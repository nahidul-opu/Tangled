From b6ee25c1e18e27ed40b61d16ce640587e8104214 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Wed, 31 Aug 2011 23:49:50 +0000
Subject: [PATCH] Enabled reseeding of the random generators used by
 EmpiricalDistributionImpl and ValueServer.  Modified ValueServer to pass its
 RandomData instance to the EmpiricalDistributionImpl that it creates when
 used in DIGEST_MODE, so reseeding ValueServer works as expected.  Changed
 EmpiricalDistributionImpl constructor to take a RandomDataImpl instead of
 just RandomData (so the instance member could be reseeded.)

JIRA: MATH-654
Reported by David James

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1163872 13f79535-47bb-0310-9956-ffa450edef68
---
 .../random/EmpiricalDistributionImpl.java     | 45 +++++++++++++++++--
 .../commons/math/random/ValueServer.java      | 25 +++++++----
 src/site/xdoc/changes.xml                     |  6 +++
 .../random/EmpiricalDistributionTest.java     |  2 +-
 .../commons/math/random/ValueServerTest.java  | 38 +++++++++++++++-
 5 files changed, 102 insertions(+), 14 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
index 587a0e17a8..2eff4d24ba 100644
--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
@@ -64,6 +64,9 @@
  */
 public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {
 
+    /** Default bin count */
+    public static final int DEFAULT_BIN_COUNT = 1000;
+
     /** Serializable version identifier */
     private static final long serialVersionUID = 5729073523949762654L;
 
@@ -91,14 +94,14 @@ public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistrib
     /** upper bounds of subintervals in (0,1) "belonging" to the bins */
     private double[] upperBounds = null;
 
-    /** RandomData instance to use in repeated calls to getNext() */
+    /** RandomDataImpl instance to use in repeated calls to getNext() */
     private final RandomDataImpl randomData;
 
     /**
      * Creates a new EmpiricalDistribution with the default bin count.
      */
     public EmpiricalDistributionImpl() {
-        this(1000, null);
+        this(DEFAULT_BIN_COUNT, new RandomDataImpl());
     }
 
     /**
@@ -107,7 +110,7 @@ public EmpiricalDistributionImpl() {
      * @param binCount number of bins
      */
     public EmpiricalDistributionImpl(int binCount) {
-        this(binCount, null);
+        this(binCount, new RandomDataImpl());
     }
 
     /**
@@ -124,6 +127,42 @@ public EmpiricalDistributionImpl(int binCount, RandomGenerator generator) {
         binStats = new ArrayList<SummaryStatistics>();
     }
 
+    /**
+     * Creates a new EmpiricalDistribution with default bin count using the
+     * provided {@link RandomGenerator} as the source of random data.
+     *
+     * @param generator random data generator (may be null, resulting in default JDK generator)
+     * @since 3.0
+     */
+    public EmpiricalDistributionImpl(RandomGenerator generator) {
+        this(DEFAULT_BIN_COUNT, generator);
+    }
+
+    /**
+     * Creates a new EmpiricalDistribution with the specified bin count using the
+     * provided {@link RandomDataImpl} instance as the source of random data.
+     *
+     * @param binCount number of bins
+     * @param randomData random data generator (may be null, resulting in default JDK generator)
+     * @since 3.0
+     */
+    public EmpiricalDistributionImpl(int binCount, RandomDataImpl randomData) {
+        this.binCount = binCount;
+        this.randomData = randomData;
+        binStats = new ArrayList<SummaryStatistics>();
+    }
+
+    /**
+     * Creates a new EmpiricalDistribution with default bin count using the
+     * provided {@link RandomDataImpl} as the source of random data.
+     *
+     * @param randomData random data generator (may be null, resulting in default JDK generator)
+     * @since 3.0
+     */
+    public EmpiricalDistributionImpl(RandomDataImpl randomData) {
+        this(DEFAULT_BIN_COUNT, randomData);
+    }
+
      /**
      * Computes the empirical distribution from the provided
      * array of numbers.
diff --git a/src/main/java/org/apache/commons/math/random/ValueServer.java b/src/main/java/org/apache/commons/math/random/ValueServer.java
index 4761630130..4d4aad5581 100644
--- a/src/main/java/org/apache/commons/math/random/ValueServer.java
+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java
@@ -85,7 +85,7 @@ public class ValueServer {
     private BufferedReader filePointer = null;
 
     /** RandomDataImpl to use for random data generation. */
-    private final RandomData randomData;
+    private final RandomDataImpl randomData;
 
     // Data generation modes ======================================
 
@@ -95,13 +95,13 @@ public ValueServer() {
     }
 
     /**
-     * Construct a ValueServer instance using a RandomData as its source
+     * Construct a ValueServer instance using a RandomDataImpl as its source
      * of random data.
      *
-     * @param randomData the RandomData instance used to source random data
-     * @since 1.1
+     * @param randomData the RandomDataImpl instance used to source random data
+     * @since 3.0
      */
-    public ValueServer(RandomData randomData) {
+    public ValueServer(RandomDataImpl randomData) {
         this.randomData = randomData;
     }
 
@@ -170,8 +170,7 @@ public double[] fill(int length) throws IOException {
      * @throws IOException if an I/O error occurs reading the input file
      */
     public void computeDistribution() throws IOException {
-        empiricalDistribution = new EmpiricalDistributionImpl();
-        empiricalDistribution.load(valuesFileURL);
+        computeDistribution(EmpiricalDistributionImpl.DEFAULT_BIN_COUNT);
     }
 
     /**
@@ -190,7 +189,7 @@ public void computeDistribution() throws IOException {
      */
     public void computeDistribution(int binCount)
             throws IOException {
-        empiricalDistribution = new EmpiricalDistributionImpl(binCount);
+        empiricalDistribution = new EmpiricalDistributionImpl(binCount, randomData);
         empiricalDistribution.load(valuesFileURL);
         mu = empiricalDistribution.getSampleStats().getMean();
         sigma = empiricalDistribution.getSampleStats().getStandardDeviation();
@@ -299,6 +298,16 @@ public void setSigma(double sigma) {
         this.sigma = sigma;
     }
 
+    /**
+     * Reseeds the random data generator.
+     *
+     * @param seed Value with which to reseed the {@link RandomDataImpl}
+     * used to generate random data.
+     */
+    public void reSeed(long seed) {
+        randomData.reSeed(seed);
+    }
+
     //------------- private methods ---------------------------------
 
     /**
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 32582293cc..8e3f40da90 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,12 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="psteitz" type="fix" issue="MATH-654">
+        Enabled reseeding of the random generators used by EmpiricalDistributionImpl
+        and ValueServer.  Modified ValueServer to pass its RandomData instance to
+        the EmpiricalDistributionImpl that it creates when used in DIGEST_MODE, so
+        reseeding ValueServer works as expected.
+      </action>
       <action dev="erans" type="fix" issue="MATH-653">
          Renamed "AbstractRealVector" to "RealVector". The interface was removed
          in favour of its unique (abstract) implementation.
diff --git a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java
index 94ed382b8e..9b322b12e3 100644
--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java
+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java
@@ -224,7 +224,7 @@ public void testGeneratorConfig() {
         }
         
         // Verify no NPE with null generator argument
-        dist = new EmpiricalDistributionImpl(5, null);
+        dist = new EmpiricalDistributionImpl(5, (RandomGenerator) null);
         dist.load(testData);
         dist.getNextValue();
     }
diff --git a/src/test/java/org/apache/commons/math/random/ValueServerTest.java b/src/test/java/org/apache/commons/math/random/ValueServerTest.java
index cd00cc8584..76c9e1341c 100644
--- a/src/test/java/org/apache/commons/math/random/ValueServerTest.java
+++ b/src/test/java/org/apache/commons/math/random/ValueServerTest.java
@@ -18,6 +18,7 @@
 
 import java.io.EOFException;
 import java.net.URL;
+import java.util.Arrays;
 
 import org.apache.commons.math.RetryRunner;
 import org.apache.commons.math.stat.descriptive.SummaryStatistics;
@@ -50,7 +51,7 @@ public void setUp() {
       * these tests will fail even if the code is working as designed.
       */
     @Test
-    public void testNextDigest() throws Exception{
+    public void testNextDigest() throws Exception {
         double next = 0.0;
         double tolerance = 0.1;
         vs.computeDistribution();
@@ -74,7 +75,40 @@ public void testNextDigest() throws Exception{
         Assert.assertEquals("mean", 5.069831575018909, stats.getMean(), tolerance);
         Assert.assertEquals("std dev", 1.0173699343977738, stats.getStandardDeviation(),
             tolerance);
-
+    }
+    
+    /**
+     * Verify that when provided with fixed seeds, stochastic modes
+     * generate fixed sequences.  Verifies the fix for MATH-654.
+     */
+    @Test 
+    public void testFixedSeed() throws Exception {
+        ValueServer valueServer = new ValueServer();
+        URL url = getClass().getResource("testData.txt");
+        valueServer.setValuesFileURL(url);
+        valueServer.computeDistribution();
+        checkFixedSeed(valueServer, ValueServer.DIGEST_MODE);
+        checkFixedSeed(valueServer, ValueServer.EXPONENTIAL_MODE);
+        checkFixedSeed(valueServer, ValueServer.GAUSSIAN_MODE);
+        checkFixedSeed(valueServer, ValueServer.UNIFORM_MODE);
+    }
+    
+    /**
+     * Do the check for {@link #testFixedSeed()}
+     * @param mode ValueServer mode
+     */
+    private void checkFixedSeed(ValueServer valueServer, int mode) throws Exception {
+        valueServer.reSeed(1000);
+        valueServer.setMode(mode);
+        double[][] values = new double[2][100];
+        for (int i = 0; i < 100; i++) {
+            values[0][i] = valueServer.getNext();
+        }
+        valueServer.reSeed(1000);
+        for (int i = 0; i < 100; i++) {
+            values[1][i] = valueServer.getNext();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
     }
 
     /**
