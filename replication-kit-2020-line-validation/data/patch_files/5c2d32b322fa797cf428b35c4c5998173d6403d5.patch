From 5c2d32b322fa797cf428b35c4c5998173d6403d5 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 20 Dec 2013 12:13:11 +0000
Subject: [PATCH] COMPRESS-252 off-by-one error writing bitsets that leads to
 corrupt 7z headers

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1552608 13f79535-47bb-0310-9956-ffa450edef68
---
 .../archivers/sevenz/SevenZOutputFile.java    |   5 +-
 .../sevenz/SevenZOutputFileTest.java          | 109 ++++++++++++++++++
 2 files changed, 111 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
index 05912b9f7fa..317d778124a 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
@@ -636,14 +636,13 @@ private void writeBits(final DataOutput header, final BitSet bits, final int len
         int shift = 7;
         for (int i = 0; i < length; i++) {
             cache |= ((bits.get(i) ? 1 : 0) << shift);
-            --shift;
-            if (shift == 0) {
+            if (--shift < 0) {
                 header.write(cache);
                 shift = 7;
                 cache = 0;
             }
         }
-        if (length > 0 && shift > 0) {
+        if (shift != 7) {
             header.write(cache);
         }
     }
diff --git a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
index 519bde3073e..af83d9539b5 100644
--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
@@ -171,4 +171,113 @@ public void testCantFinishTwice() throws Exception {
         }
     }
 
+    public void testSixEmptyFiles() throws Exception {
+        testCompress252(6, 0);
+    }
+
+    public void testSixFilesSomeNotEmpty() throws Exception {
+        testCompress252(6, 2);
+    }
+
+    public void testSevenEmptyFiles() throws Exception {
+        testCompress252(7, 0);
+    }
+
+    public void testSevenFilesSomeNotEmpty() throws Exception {
+        testCompress252(7, 2);
+    }
+
+    public void testEightEmptyFiles() throws Exception {
+        testCompress252(8, 0);
+    }
+
+    public void testEightFilesSomeNotEmpty() throws Exception {
+        testCompress252(8, 2);
+    }
+
+    public void testNineEmptyFiles() throws Exception {
+        testCompress252(9, 0);
+    }
+
+    public void testNineFilesSomeNotEmpty() throws Exception {
+        testCompress252(9, 2);
+    }
+
+    private void testCompress252(int numberOfFiles, int numberOfNonEmptyFiles)
+        throws Exception {
+        int nonEmptyModulus = numberOfNonEmptyFiles != 0
+            ? numberOfFiles / numberOfNonEmptyFiles
+            : numberOfFiles + 1;
+        output = new File(dir, "COMPRESS252-" + numberOfFiles + "-" + numberOfNonEmptyFiles + ".7z");
+        SevenZOutputFile archive = new SevenZOutputFile(output);
+        try {
+            addDir(archive);
+            for (int i = 0; i < numberOfFiles; i++) {
+                addFile(archive, i, (i + 1) % nonEmptyModulus == 0);
+            }
+        } finally {
+            archive.close();
+        }
+        verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);
+    }
+
+    private void verifyCompress252(File output, int numberOfFiles, int numberOfNonEmptyFiles)
+        throws Exception {
+        SevenZFile archive = new SevenZFile(output);
+        int filesFound = 0;
+        int nonEmptyFilesFound = 0;
+        try {
+            verifyDir(archive);
+            Boolean b = verifyFile(archive, filesFound++);
+            while (b != null) {
+                if (Boolean.TRUE.equals(b)) {
+                    nonEmptyFilesFound++;
+                }
+                b = verifyFile(archive, filesFound++);
+            }
+        } finally {
+            archive.close();
+        }
+        assertEquals(numberOfFiles + 1, filesFound);
+        assertEquals(numberOfNonEmptyFiles, nonEmptyFilesFound);
+    }
+
+    private void addDir(SevenZOutputFile archive) throws Exception {
+        SevenZArchiveEntry entry = archive.createArchiveEntry(dir, "foo/");
+        archive.putArchiveEntry(entry);
+        archive.closeArchiveEntry();
+    }
+
+    private void verifyDir(SevenZFile archive) throws Exception {
+        SevenZArchiveEntry entry = archive.getNextEntry();
+        assertNotNull(entry);
+        assertEquals("foo/", entry.getName());
+        assertTrue(entry.isDirectory());
+    }
+
+    private void addFile(SevenZOutputFile archive, int index, boolean nonEmpty)
+        throws Exception {
+        SevenZArchiveEntry entry = new SevenZArchiveEntry();
+        entry.setName("foo/" + index + ".txt");
+        archive.putArchiveEntry(entry);
+        archive.write(nonEmpty ? new byte[] { 17 } : new byte[0]);
+        archive.closeArchiveEntry();
+    }
+
+    private Boolean verifyFile(SevenZFile archive, int index) throws Exception {
+        SevenZArchiveEntry entry = archive.getNextEntry();
+        if (entry == null) {
+            return null;
+        }
+        assertEquals("foo/" + index + ".txt", entry.getName());
+        assertEquals(false, entry.isDirectory());
+        if (entry.getSize() == 0) {
+            return false;
+        }
+        assertEquals(1, entry.getSize());
+        assertEquals(17, archive.read());
+        assertEquals(-1, archive.read());
+        return true;
+    }
+
 }
