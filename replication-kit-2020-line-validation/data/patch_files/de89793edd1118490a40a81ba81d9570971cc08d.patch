From de89793edd1118490a40a81ba81d9570971cc08d Mon Sep 17 00:00:00 2001
From: Henry Saputra <hsaputra@apache.org>
Date: Thu, 23 Jun 2011 13:13:38 +0000
Subject: [PATCH] GORA-32. Map type with long values generates non-compilable
 Java class | Patch from Yves Langisch

git-svn-id: https://svn.apache.org/repos/asf/incubator/gora/trunk@1138866 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                    |  1 +
 .../org/apache/gora/compiler/GoraCompiler.java | 18 ++++++++++--------
 2 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index 5cea4b844..eb99f4941 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -2,6 +2,7 @@ Gora Change Log
 
 Trunk (unreleased changes):
 
+* GORA-32. Map type with long values generates non-compilable Java class (Yves Langisch)
 
 * GORA-29. Gora maven support (Ioannis Canellos via mattmann)
 
diff --git a/gora-core/src/main/java/org/apache/gora/compiler/GoraCompiler.java b/gora-core/src/main/java/org/apache/gora/compiler/GoraCompiler.java
index 4b8286b78..cf0ca837f 100644
--- a/gora-core/src/main/java/org/apache/gora/compiler/GoraCompiler.java
+++ b/gora-core/src/main/java/org/apache/gora/compiler/GoraCompiler.java
@@ -314,8 +314,9 @@ private void compile(Schema schema) throws IOException {
           case INT:case LONG:case FLOAT:case DOUBLE:
           case BOOLEAN:case BYTES:case STRING: case ENUM: case RECORD:
             String unboxed = unbox(fieldSchema);
+            String fieldType = type(fieldSchema);
             line(1, "public "+unboxed+" get" +camelKey+"() {");
-            line(2, "return ("+type(field.schema())+") get("+i+");");
+            line(2, "return ("+fieldType+") get("+i+");");
             line(1, "}");
             line(1, "public void set"+camelKey+"("+unboxed+" value) {");
             line(2, "put("+i+", value);");
@@ -323,9 +324,9 @@ private void compile(Schema schema) throws IOException {
             break;
           case ARRAY:
             unboxed = unbox(fieldSchema.getElementType());
-
-            line(1, "public GenericArray<"+unboxed+"> get"+camelKey+"() {");
-            line(2, "return (GenericArray<"+unboxed+">) get("+i+");");
+            fieldType = type(fieldSchema.getValueType());
+            line(1, "public GenericArray<"+fieldType+"> get"+camelKey+"() {");
+            line(2, "return (GenericArray<"+fieldType+">) get("+i+");");
             line(1, "}");
             line(1, "public void addTo"+camelKey+"("+unboxed+" element) {");
             line(2, "getStateManager().setDirty(this, "+i+");");
@@ -334,10 +335,11 @@ private void compile(Schema schema) throws IOException {
             break;
           case MAP:
             unboxed = unbox(fieldSchema.getValueType());
-            line(1, "public Map<Utf8, "+unboxed+"> get"+camelKey+"() {");
-            line(2, "return (Map<Utf8, "+unboxed+">) get("+i+");");
+            fieldType = type(fieldSchema.getValueType());
+            line(1, "public Map<Utf8, "+fieldType+"> get"+camelKey+"() {");
+            line(2, "return (Map<Utf8, "+fieldType+">) get("+i+");");
             line(1, "}");
-            line(1, "public "+unboxed+" getFrom"+camelKey+"(Utf8 key) {");
+            line(1, "public "+fieldType+" getFrom"+camelKey+"(Utf8 key) {");
             line(2, "if ("+field.name()+" == null) { return null; }");
             line(2, "return "+field.name()+".get(key);");
             line(1, "}");
@@ -345,7 +347,7 @@ private void compile(Schema schema) throws IOException {
             line(2, "getStateManager().setDirty(this, "+i+");");
             line(2, field.name()+".put(key, value);");
             line(1, "}");
-            line(1, "public "+unboxed+" removeFrom"+camelKey+"(Utf8 key) {");
+            line(1, "public "+fieldType+" removeFrom"+camelKey+"(Utf8 key) {");
             line(2, "if ("+field.name()+" == null) { return null; }");
             line(2, "getStateManager().setDirty(this, "+i+");");
             line(2, "return "+field.name()+".remove(key);");
