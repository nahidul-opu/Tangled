From 7994d3ee9d49098dcffb0c5470714076305e38cf Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Thu, 16 Aug 2012 20:43:59 +0000
Subject: [PATCH] MATH-844 Generate an exception when the parameter guessing
 procedure cannot perform correctly (in rare ill-conditioned cases).

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1374046 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 +++
 .../exception/util/LocalizedFormats.java      |  2 +-
 .../optimization/fitting/HarmonicFitter.java  |  9 +++++++
 .../fitting/HarmonicFitterTest.java           | 25 +++++++++++++++++++
 4 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ee30a686fc..234086c5dd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,6 +52,10 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
+      <action dev="erans" type="fix" issue="MATH-844">
+        Generate an exception for rare ill-conditioned cases in "HarmonicFitter"
+        guessing procedure (package "o.a.c.m.optimization.fitting").
+      </action>
       <action dev="erans" type="add" issue="MATH-815" due-to="Jared Becksfort">
         New interface for multivariate distributions.
         Added multivariate normal distribution.
diff --git a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
index 1ca563575b..04edd0b465 100644
--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
@@ -344,7 +344,7 @@ public enum LocalizedFormats implements Localizable {
     WRONG_BLOCK_LENGTH("wrong array shape (block length = {0}, expected {1})"),
     WRONG_NUMBER_OF_POINTS("{0} points are required, got only {1}"),
     NUMBER_OF_POINTS("number of points ({0})"), /* keep */
-    ZERO_DENOMINATOR("denominator must be different from 0"),
+    ZERO_DENOMINATOR("denominator must be different from 0"), /* keep */
     ZERO_DENOMINATOR_IN_FRACTION("zero denominator in fraction {0}/{1}"),
     ZERO_FRACTION_TO_DIVIDE_BY("the fraction to divide by must not be zero: {0}/{1}"),
     ZERO_NORM("zero norm"),
diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index ebb36d3102..c7af9ae56a 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -21,6 +21,7 @@
 import org.apache.commons.math3.analysis.function.HarmonicOscillator;
 import org.apache.commons.math3.exception.ZeroException;
 import org.apache.commons.math3.exception.NumberIsTooSmallException;
+import org.apache.commons.math3.exception.MathIllegalStateException;
 import org.apache.commons.math3.exception.util.LocalizedFormats;
 import org.apache.commons.math3.util.FastMath;
 
@@ -250,6 +251,8 @@ private void sortObservations() {
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
+         * @throws MathIllegalStateException when the guessing procedure cannot
+         * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
@@ -317,6 +320,12 @@ private void guessAOmega() {
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
+                if (c2 == 0) {
+                    // In some ill-conditioned cases (cf. MATH-844), the guesser
+                    // procedure cannot produce sensible results.
+                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);
+                }
+
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
             }
diff --git a/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java b/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
index 910ba1ba63..5bbad9f377 100644
--- a/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
@@ -22,6 +22,7 @@
 import org.apache.commons.math3.analysis.function.HarmonicOscillator;
 import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;
 import org.apache.commons.math3.exception.NumberIsTooSmallException;
+import org.apache.commons.math3.exception.MathIllegalStateException;
 import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.util.MathUtils;
 
@@ -176,4 +177,28 @@ public void testUnsorted() {
         Assert.assertEquals(w, fitted[1], 3.5e-3);
         Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);
     }
+
+    @Test(expected=MathIllegalStateException.class)
+    public void testMath844() {
+        final double[] y = { 0, 1, 2, 3, 2, 1,
+                             0, -1, -2, -3, -2, -1,
+                             0, 1, 2, 3, 2, 1,
+                             0, -1, -2, -3, -2, -1,
+                             0, 1, 2, 3, 2, 1, 0 };
+        final int len = y.length;
+        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];
+        for (int i = 0; i < len; i++) {
+            points[i] = new WeightedObservedPoint(1, i, y[i]);
+        }
+
+        final HarmonicFitter.ParameterGuesser guesser
+            = new HarmonicFitter.ParameterGuesser(points);
+
+        // The guesser fails because the function is far from an harmonic
+        // function: It is a triangular periodic function with amplitude 3
+        // and period 12, and all sample points are taken at integer abscissae
+        // so function values all belong to the integer subset {-3, -2, -1, 0,
+        // 1, 2, 3}.
+        guesser.guess();
+    }
 }
