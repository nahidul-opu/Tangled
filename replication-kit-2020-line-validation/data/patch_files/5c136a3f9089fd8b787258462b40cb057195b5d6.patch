From 5c136a3f9089fd8b787258462b40cb057195b5d6 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Wed, 7 Dec 2011 15:01:27 +0000
Subject: [PATCH] prove parsing of PAX headers works correctly.  COMPRESS-167

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1211465 13f79535-47bb-0310-9956-ffa450edef68
---
 .../archivers/tar/TarArchiveInputStream.java  | 22 +++++++---
 .../tar/TarArchiveInputStreamTest.java        | 43 +++++++++++++++++++
 2 files changed, 59 insertions(+), 6 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java

diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index db87d2bd979..208862ec13c 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -272,9 +272,21 @@ public void close() {
                     // make sure GC doesn't close "this" before we are done
                 }
             };
+        Map<String, String> headers = null;
+        try {
+            headers = parsePaxHeaders(br);
+        } finally {
+            // NO-OP but makes FindBugs happy
+            br.close();
+        }
+
+        getNextEntry(); // Get the actual file entry
+        applyPaxHeadersToCurrentEntry(headers);
+    }
+
+    Map<String, String> parsePaxHeaders(Reader br) throws IOException {
         Map<String, String> headers = new HashMap<String, String>();
         // Format is "length keyword=value\n";
-        try {
             while(true){ // get length
                 int ch;
                 int len = 0;
@@ -315,12 +327,10 @@ public void close() {
                     break;
                 }
             }
-        } finally {
-            // NO-OP but makes FindBugs happy
-            br.close();
-        }
+        return headers;
+    }
 
-        getNextEntry(); // Get the actual file entry
+    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
         /*
          * The following headers are defined for Pax.
          * atime, ctime, mtime, charset: cannot use these without changing TarArchiveEntry fields
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
new file mode 100644
index 00000000000..eb8b549fe32
--- /dev/null
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
@@ -0,0 +1,43 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.apache.commons.compress.archivers.tar;
+
+import java.io.StringReader;
+import java.util.Map;
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+
+public class TarArchiveInputStreamTest {
+
+    @Test
+    public void readSimplePaxHeader() throws Exception {
+        Map<String, String> headers = new TarArchiveInputStream(null)
+            .parsePaxHeaders(new StringReader("30 atime=1321711775.972059463\n"));
+        assertEquals(1, headers.size());
+        assertEquals("1321711775.972059463", headers.get("atime"));
+    }
+
+    @Test
+    public void readPaxHeaderWithEmbeddedNewline() throws Exception {
+        Map<String, String> headers = new TarArchiveInputStream(null)
+            .parsePaxHeaders(new StringReader("28 comment=line1\nline2\nand3\n"));
+        assertEquals(1, headers.size());
+        assertEquals("line1\nline2\nand3", headers.get("comment"));
+    }
+}
\ No newline at end of file
