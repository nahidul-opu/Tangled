From 8aecb842d32464a98eaab722da84902f8126957b Mon Sep 17 00:00:00 2001
From: Otmar Ertl <otmar.ertl@gmail.com>
Date: Thu, 5 Nov 2015 21:19:35 +0100
Subject: [PATCH] MATH-1269: fixed FastMath.exp returning NaN for non-NaN
 arguments

---
 src/changes/changes.xml                                  | 3 +++
 .../java/org/apache/commons/math3/util/FastMath.java     | 7 +++++++
 .../java/org/apache/commons/math3/util/FastMathTest.java | 9 +++++++++
 3 files changed, 19 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4a7a8466ca..5bdaf76c81 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -51,6 +51,9 @@ If the output is not quite correct, check for invisible trailing spaces!
   </properties>
   <body>
     <release version="3.6" date="XXXX-XX-XX" description="">
+      <action dev="oertl" type="fix" issue="MATH-1269">
+        Fixed FastMath.exp that potentially returned NaN for non-NaN argument.
+      </action>
       <action dev="luc" type="add">
         Added a nth order Brent solver for general real fields, replacing the former
         solver that was restricted to Dfp fields only.
diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java
index 161ad6cf5e..f30b502747 100644
--- a/src/main/java/org/apache/commons/math3/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -968,6 +968,13 @@ full double precision (52 bits).  Since z < 2^-10, we will have
        much larger than the others.  If there are extra bits specified from the
        pow() function, use them. */
         final double tempC = tempB + tempA;
+
+        // If tempC is positive infinite, the evaluation below could result in NaN,
+        // because z could be negative at the same time.
+        if (tempC == Double.POSITIVE_INFINITY) {
+            return Double.POSITIVE_INFINITY;
+        }
+
         final double result;
         if (extra != 0.0) {
             result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
diff --git a/src/test/java/org/apache/commons/math3/util/FastMathTest.java b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
index aadc4ecd51..2df5542f50 100644
--- a/src/test/java/org/apache/commons/math3/util/FastMathTest.java
+++ b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
@@ -215,6 +215,15 @@ public void testMath905LargeNegative() {
         }
         Assert.assertEquals(0, maxErr, 3);
     }
+    
+    @Test
+    public void testMath1269() {
+        final double arg = 709.8125;
+        final double vM = Math.exp(arg);
+        final double vFM = FastMath.exp(arg);
+        Assert.assertTrue("exp(" + arg + ") is " + vFM + " instead of " + vM,
+                          Precision.equalsIncludingNaN(vM, vFM));
+    }
 
     @Test
     public void testHyperbolicInverses() {
