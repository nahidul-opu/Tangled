From b26a3b41b047cdcc37aa65625075fa621d13f66e Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Tue, 15 Apr 2014 17:51:48 +0000
Subject: [PATCH] NET-539 NPE if Threader.thread invoked with empty list or
 with null array

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1587651 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../org/apache/commons/net/nntp/Threader.java | 22 ++++--
 .../apache/commons/net/nntp/TestThreader.java | 77 +++++++++++++++++++
 3 files changed, 95 insertions(+), 7 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/net/nntp/TestThreader.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 5fa506cc4..8f95baec9 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -68,6 +68,9 @@ This is mainly a bug-fix release. See further details below.
   IMAPExportMbox (example app) allows IMAP folders to be exported into an mbox file.
   This is the inverse of the IMAPImportMbox example added previously
         ">
+            <action issue="NET-539" type="fix" dev="sebb">
+            NPE if Threader.thread invoked with empty list or with null array
+            </action>
             <action issue="NET-536" type="add" dev="sebb">
             IMAP FETCH example
             IMAPExportMbox can export selected nessages from an IMAP folder
diff --git a/src/main/java/org/apache/commons/net/nntp/Threader.java b/src/main/java/org/apache/commons/net/nntp/Threader.java
index 037374d7b..bf9345177 100644
--- a/src/main/java/org/apache/commons/net/nntp/Threader.java
+++ b/src/main/java/org/apache/commons/net/nntp/Threader.java
@@ -27,6 +27,7 @@
  *
  */
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -36,8 +37,8 @@ public class Threader {
     /**
      * The client passes in a list of Threadable objects, and
      * the Threader constructs a connected 'graph' of messages
-     * @param messages list of messages to thread
-     * @return null if messages == null or root.child == null
+     * @param messages list of messages to thread, must not be empty
+     * @return null if messages == null or root.child == null or messages list is empty
      * @since 2.2
      */
     public Threadable thread(List<? extends Threadable> messages) {
@@ -47,8 +48,8 @@ public Threadable thread(List<? extends Threadable> messages) {
     /**
      * The client passes in a list of Iterable objects, and
      * the Threader constructs a connected 'graph' of messages
-     * @param messages iterable of messages to thread
-     * @return null if messages == null or root.child == null
+     * @param messages iterable of messages to thread, must not be empty
+     * @return null if messages == null or root.child == null or messages list is empty
      * @since 3.0
      */
     public Threadable thread(Iterable<? extends Threadable> messages) {
@@ -65,6 +66,10 @@ public Threadable thread(Iterable<? extends Threadable> messages) {
             }
         }
 
+        if (idTable.isEmpty()) {
+            return null;
+        }
+
         ThreadContainer root = findRootSet(idTable);
         idTable.clear();
         idTable = null;
@@ -446,13 +451,16 @@ private void gatherSubjects(ThreadContainer root) {
     /**
      * The client passes in an array of Threadable objects, and
      * the Threader constructs a connected 'graph' of messages
-     * @param messages array of messages to thread
-     * @return null if messages == null or root.child == null
+     * @param messages array of messages to thread, must not be empty
+     * @return null if messages == null or root.child == null or messages array is empty
      * @deprecated (2.2) prefer {@link #thread(List)}
      */
     @Deprecated
     public Threadable thread(Threadable[] messages) {
-        return thread(java.util.Arrays.asList(messages));
+        if (messages == null) {
+            return null;
+        }
+        return thread(Arrays.asList(messages));
     }
 
 }
diff --git a/src/test/java/org/apache/commons/net/nntp/TestThreader.java b/src/test/java/org/apache/commons/net/nntp/TestThreader.java
new file mode 100644
index 000000000..f18030b70
--- /dev/null
+++ b/src/test/java/org/apache/commons/net/nntp/TestThreader.java
@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.net.nntp;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Test the Threader
+ */
+public class TestThreader {
+    
+    @Test
+    @SuppressWarnings("deprecation") // test of deprecated method
+    public void testNullArray() { // NET-539
+        Threader t = new Threader();
+        Threadable[] messages=null;
+        Assert.assertNull(t.thread(messages));        
+    }
+
+    @Test
+    public void testNullList() {
+        Threader t = new Threader();
+        List<Threadable> messages=null;
+        Assert.assertNull(t.thread(messages));        
+    }
+
+    @Test
+    public void testNullIterable() {
+        Threader t = new Threader();
+        Iterable<Threadable> messages=null;
+        Assert.assertNull(t.thread(messages));        
+    }
+
+    @SuppressWarnings("deprecation") // test of deprecated method
+    @Test
+    public void testEmptyArray() { // NET-539
+        Threader t = new Threader();
+        Threadable[] messages=new Threadable[0];
+        Assert.assertNull(t.thread(messages));
+    }
+
+    @Test
+    public void testEmptyList() { // NET-539
+        Threader t = new Threader();
+        Threadable[] messages=new Threadable[0];
+        final List<Threadable> asList = Arrays.asList(messages);
+        Assert.assertNull(t.thread(asList));
+    }
+
+    @Test
+    public void testEmptyIterable() { // NET-539
+        Threader t = new Threader();
+        Threadable[] messages=new Threadable[0];
+        final Iterable<Threadable> asList = Arrays.asList(messages);
+        Assert.assertNull(t.thread(asList));
+    }
+
+}
