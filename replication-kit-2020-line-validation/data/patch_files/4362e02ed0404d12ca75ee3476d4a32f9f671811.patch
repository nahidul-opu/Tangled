From 4362e02ed0404d12ca75ee3476d4a32f9f671811 Mon Sep 17 00:00:00 2001
From: William D C M SILVA <colen@apache.org>
Date: Mon, 31 Jul 2017 12:10:22 -0300
Subject: [PATCH] OPENNLP-1121: Sort NameSample spans to avoid serialization
 issues

---
 .../opennlp/tools/namefind/NameSample.java    |  5 ++-
 .../tools/namefind/NameSampleTest.java        | 38 +++++++++++++++++++
 2 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/NameSample.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/NameSample.java
index 8858ceb60..edd7506c4 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/NameSample.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/NameSample.java
@@ -54,7 +54,9 @@ public NameSample(String id, String[] sentence, Span[] names,
     }
 
     this.sentence = Collections.unmodifiableList(new ArrayList<>(Arrays.asList(sentence)));
-    this.names = Collections.unmodifiableList(new ArrayList<>(Arrays.asList(names)));
+    List<Span> namesList = Arrays.asList(names);
+    Collections.sort(namesList);
+    this.names = Collections.unmodifiableList(namesList);
 
     if (additionalContext != null) {
       this.additionalContext = new String[additionalContext.length][];
@@ -158,7 +160,6 @@ public String toString() {
             result.append(NameSampleDataStream.START_TAG_PREFIX).append(name.getType()).append("> ");
           }
         }
-
         if (name.getEnd() == tokenIndex) {
           result.append(NameSampleDataStream.END_TAG).append(' ');
         }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java
index 911f9986d..760e2825c 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java
@@ -61,6 +61,44 @@ private static NameSample createSimpleNameSample(boolean useTypes) {
     return nameSample;
   }
 
+  /**
+   * Test serialization of sequential spans.
+   */
+  @Test
+  public void testSequentialSpans() {
+
+    String[] sentence = {"A", "Place", "a", "time", "A", "Person", "."};
+
+    Span[] names = {new Span(0, 2, "Place"), new Span(2, 4, "Time"),
+        new Span(4, 6, "Person")};
+
+    NameSample nameSample;
+    nameSample = new NameSample(sentence, names, false);
+
+    Assert.assertEquals(
+        "<START:Place> A Place <END> <START:Time> a time <END> <START:Person> A Person <END> .",
+        nameSample.toString());
+  }
+
+  /**
+   * Test serialization of unsorted sequential spans.
+   */
+  @Test
+  public void testUnsortedSequentialSpans() {
+
+    String[] sentence = {"A", "Place", "a", "time", "A", "Person", "."};
+
+    Span[] names = {new Span(0, 2, "Place"), new Span(4, 6, "Person"),
+        new Span(2, 4, "Time")};
+
+    NameSample nameSample;
+    nameSample = new NameSample(sentence, names, false);
+
+    Assert.assertEquals(
+        "<START:Place> A Place <END> <START:Time> a time <END> <START:Person> A Person <END> .",
+        nameSample.toString());
+  }
+
   /**
    * Checks if could create a NameSample without NameTypes, generate the
    * string representation and validate it.
