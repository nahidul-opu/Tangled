From c979a6f0fe3cc9d411bdff7d726c996876b401a4 Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Wed, 30 Oct 2013 14:16:11 +0000
Subject: [PATCH] MATH-1045 Loop added to ensure that the largest norm is used
 in the singularity check. Patch provided by Sean Owen.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1537099 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math3/linear/EigenDecomposition.java      |  8 ++++++--
 .../apache/commons/math3/linear/EigenSolverTest.java  | 11 +++++++++++
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
index 4d4d794a29..2bb8fd7545 100644
--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
@@ -513,8 +513,12 @@ public RealMatrix solve(RealMatrix b) {
          * @return true if the decomposed matrix is non-singular.
          */
         public boolean isNonSingular() {
-            // The eigenvalues are sorted by size, descending
-            double largestEigenvalueNorm = eigenvalueNorm(0);
+            double largestEigenvalueNorm = 0.0;
+            // Looping over all values (in case they are not sorted in decreasing
+            // order of their norm).
+            for (int i = 0; i < realEigenvalues.length; ++i) {
+                largestEigenvalueNorm = FastMath.max(largestEigenvalueNorm, eigenvalueNorm(i));
+            }
             // Corner case: zero matrix, all exactly 0 eigenvalues
             if (largestEigenvalueNorm == 0.0) {
                 return false;
diff --git a/src/test/java/org/apache/commons/math3/linear/EigenSolverTest.java b/src/test/java/org/apache/commons/math3/linear/EigenSolverTest.java
index f55dad9dfb..cff8683336 100644
--- a/src/test/java/org/apache/commons/math3/linear/EigenSolverTest.java
+++ b/src/test/java/org/apache/commons/math3/linear/EigenSolverTest.java
@@ -107,6 +107,17 @@ public void testZeroMatrix() {
         eigen.getSolver().getInverse();
     }
 
+    @Test
+    public void testIsNonSingularTinyOutOfOrderEigenvalue() {
+        final EigenDecomposition eigen
+            = new EigenDecomposition(MatrixUtils.createRealMatrix(new double[][] {
+                        { 1e-13, 0 },
+                        { 1,     1 },
+                    }));
+        Assert.assertFalse("Singular matrix not detected",
+                           eigen.getSolver().isNonSingular());
+    }
+
     /** test solve dimension errors */
     @Test
     public void testSolveDimensionErrors() {
