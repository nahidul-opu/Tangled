From 3b150986e192686a30508b2690434a8b4bace9fa Mon Sep 17 00:00:00 2001
From: smarthi <smarthi@apache.org>
Date: Mon, 26 Dec 2016 08:40:56 -0500
Subject: [PATCH] OPENNLP-845: Evaluator.evaluateSample() sends the wrong
 argument to listener.correctlyClassified(), this closes apache/opennlp#22

---
 .../java/opennlp/tools/doccat/DocumentCategorizerME.java    | 2 +-
 .../opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java    | 2 +-
 .../main/java/opennlp/tools/ml/model/EvalParameters.java    | 6 +++---
 .../src/main/java/opennlp/tools/util/eval/Evaluator.java    | 5 +++--
 4 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java b/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
index 380350e20..d2ad651d7 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
@@ -84,7 +84,7 @@ public double[] categorize(String[] text, Map<String, Object> extraInformation)
    * @param text the text to categorize
    */
   public double[] categorize(String text[]) {
-    return this.categorize(text, Collections.<String, Object>emptyMap());
+    return this.categorize(text, Collections.emptyMap());
   }
 
   /**
diff --git a/opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java b/opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java
index 5455c78ce..821faed71 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java
@@ -522,7 +522,7 @@ private void checkDimension(double[] x) {
    * it can be used to report model's training accuracy when
    * we train a Maximum Entropy classifier.
    */
-  public static interface Evaluator {
+  public interface Evaluator {
     /**
      * Measure quality of the training parameters
      * @param parameters
diff --git a/opennlp-tools/src/main/java/opennlp/tools/ml/model/EvalParameters.java b/opennlp-tools/src/main/java/opennlp/tools/ml/model/EvalParameters.java
index d86c9f1ab..08dce82b3 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/ml/model/EvalParameters.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/ml/model/EvalParameters.java
@@ -30,7 +30,7 @@ public class EvalParameters {
   private Context[] params;
   /** The number of outcomes being predicted. */
   private final int numOutcomes;
-  /** The maximum number of feattures fired in an event. Usually refered to a C.
+  /** The maximum number of features fired in an event. Usually referred to as C.
    * This is used to normalize the number of features which occur in an event. */
   private double correctionConstant;
 
@@ -40,9 +40,9 @@ public class EvalParameters {
   private double correctionParam;
 
   /**
-   * Creates a set of paramters which can be evaulated with the eval method.
+   * Creates a set of parameters which can be evaulated with the eval method.
    * @param params The parameters of the model.
-   * @param correctionParam The correction paramter.
+   * @param correctionParam The correction parameter.
    * @param correctionConstant The correction constant.
    * @param numOutcomes The number of outcomes.
    */
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java b/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
index ffdd0cf32..aa77b985a 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
@@ -35,9 +35,10 @@ public abstract class Evaluator<T> {
 
   private List<EvaluationMonitor<T>> listeners;
 
+  @SafeVarargs
   public Evaluator(EvaluationMonitor<T>... aListeners) {
     if (aListeners != null) {
-      List<EvaluationMonitor<T>> listenersList = new ArrayList<EvaluationMonitor<T>>(
+      List<EvaluationMonitor<T>> listenersList = new ArrayList<>(
           aListeners.length);
       for (EvaluationMonitor<T> evaluationMonitor : aListeners) {
         if (evaluationMonitor != null) {
@@ -80,7 +81,7 @@ public void evaluateSample(T sample) {
     if(!listeners.isEmpty()) {
       if(sample.equals(predicted)) {
         for (EvaluationMonitor<T> listener : listeners) {
-          listener.correctlyClassified(predicted, predicted);
+          listener.correctlyClassified(sample, predicted);
         }
       } else {
         for (EvaluationMonitor<T> listener : listeners) {
