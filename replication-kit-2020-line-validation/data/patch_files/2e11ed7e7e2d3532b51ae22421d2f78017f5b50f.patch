From 2e11ed7e7e2d3532b51ae22421d2f78017f5b50f Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Mon, 5 Sep 2011 23:34:43 +0000
Subject: [PATCH] IO-277 ReaderInputStream enters infinite loop when it
 encounters an unmappable character - thanks to Mike Thomas

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1165453 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/io/input/ReaderInputStream.java   | 34 ++++++++++++--
 .../commons/io/output/WriterOutputStream.java | 45 ++++++++++++++++---
 .../io/input/ReaderInputStreamTest.java       |  1 -
 3 files changed, 70 insertions(+), 10 deletions(-)

diff --git a/src/main/java/org/apache/commons/io/input/ReaderInputStream.java b/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
index 5f3fe412f99..35b6161930c 100644
--- a/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
@@ -24,6 +24,7 @@
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CoderResult;
+import java.nio.charset.CodingErrorAction;
 
 /**
  * {@link InputStream} implementation that reads a character stream from a {@link Reader}
@@ -100,16 +101,43 @@ public class ReaderInputStream extends InputStream {
      * Construct a new {@link ReaderInputStream}.
      * 
      * @param reader the target {@link Reader}
-     * @param charset the charset encoding
+     * @param encoder the charset encoder
+     * @since Commons IO 2.1
+     */
+    public ReaderInputStream(Reader reader, CharsetEncoder encoder) {
+        this(reader, encoder, DEFAULT_BUFFER_SIZE);
+    }
+
+    /**
+     * Construct a new {@link ReaderInputStream}.
+     * 
+     * @param reader the target {@link Reader}
+     * @param encoder the charset encoder
      * @param bufferSize the size of the input buffer in number of characters
+     * @since Commons IO 2.1
      */
-    public ReaderInputStream(Reader reader, Charset charset, int bufferSize) {
+    public ReaderInputStream(Reader reader, CharsetEncoder encoder, int bufferSize) {
         this.reader = reader;
-        encoder = charset.newEncoder();
+        this.encoder = encoder;
         encoderIn = CharBuffer.allocate(bufferSize);
         encoderIn.flip();
     }
 
+    /**
+     * Construct a new {@link ReaderInputStream}.
+     * 
+     * @param reader the target {@link Reader}
+     * @param charset the charset encoding
+     * @param bufferSize the size of the input buffer in number of characters
+     */
+    public ReaderInputStream(Reader reader, Charset charset, int bufferSize) {
+        this(reader,
+             charset.newEncoder()
+                    .onMalformedInput(CodingErrorAction.REPLACE)
+                    .onUnmappableCharacter(CodingErrorAction.REPLACE),
+             bufferSize);
+    }
+
     /**
      * Construct a new {@link ReaderInputStream} with a default input buffer size of
      * 1024 characters.
diff --git a/src/main/java/org/apache/commons/io/output/WriterOutputStream.java b/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
index d37dcf8a758..ee688604d62 100644
--- a/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
+++ b/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
@@ -92,28 +92,61 @@ public class WriterOutputStream extends OutputStream {
      */
     private final CharBuffer decoderOut;
 
+    /**
+     * Constructs a new {@link WriterOutputStream} with a default output buffer size of
+     * 1024 characters. The output buffer will only be flushed when it overflows or when
+     * {@link #flush()} or {@link #close()} is called.
+     * 
+     * @param writer the target {@link Writer}
+     * @param decoder the charset decoder
+     * @since Commons IO 2.1
+     */
+    public WriterOutputStream(Writer writer, CharsetDecoder decoder) {
+        this(writer, decoder, DEFAULT_BUFFER_SIZE, false);
+    }
+
     /**
      * Constructs a new {@link WriterOutputStream}.
      * 
      * @param writer the target {@link Writer}
-     * @param charset the charset encoding
+     * @param decoder the charset decoder
      * @param bufferSize the size of the output buffer in number of characters
      * @param writeImmediately If <tt>true</tt> the output buffer will be flushed after each
      *                         write operation, i.e. all available data will be written to the
      *                         underlying {@link Writer} immediately. If <tt>false</tt>, the
      *                         output buffer will only be flushed when it overflows or when
      *                         {@link #flush()} or {@link #close()} is called.
+     * @since Commons IO 2.1
      */
-    public WriterOutputStream(Writer writer, Charset charset, int bufferSize, boolean writeImmediately) {
+    public WriterOutputStream(Writer writer, CharsetDecoder decoder, int bufferSize, boolean writeImmediately) {
         this.writer = writer;
-        decoder = charset.newDecoder();
-        decoder.onMalformedInput(CodingErrorAction.REPLACE);
-        decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
-        decoder.replaceWith("?");
+        this.decoder = decoder;
         this.writeImmediately = writeImmediately;
         decoderOut = CharBuffer.allocate(bufferSize);
     }
 
+    /**
+     * Constructs a new {@link WriterOutputStream}.
+     * 
+     * @param writer the target {@link Writer}
+     * @param charset the charset encoding
+     * @param bufferSize the size of the output buffer in number of characters
+     * @param writeImmediately If <tt>true</tt> the output buffer will be flushed after each
+     *                         write operation, i.e. all available data will be written to the
+     *                         underlying {@link Writer} immediately. If <tt>false</tt>, the
+     *                         output buffer will only be flushed when it overflows or when
+     *                         {@link #flush()} or {@link #close()} is called.
+     */
+    public WriterOutputStream(Writer writer, Charset charset, int bufferSize, boolean writeImmediately) {
+        this(writer,
+             charset.newDecoder()
+                    .onMalformedInput(CodingErrorAction.REPLACE)
+                    .onUnmappableCharacter(CodingErrorAction.REPLACE)
+                    .replaceWith("?"),
+             bufferSize,
+             writeImmediately);
+    }
+
     /**
      * Constructs a new {@link WriterOutputStream} with a default output buffer size of
      * 1024 characters. The output buffer will only be flushed when it overflows or when
diff --git a/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java b/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java
index 65b2ed76b65..626c4d506b8 100644
--- a/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java
+++ b/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java
@@ -117,7 +117,6 @@ public void testReadZero() throws Exception {
      * @throws IOException
      */
     @Test
-    @Ignore
     public void testCharsetMismatchInfiniteLoop() throws IOException {
         // Input is UTF-8 bytes: 0xE0 0xB2 0xA0
         char[] inputChars = new char[] { (char) 0xE0, (char) 0xB2, (char) 0xA0 };
