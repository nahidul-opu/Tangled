From 8a83581eaf0fb46000ffe3093b8b4152dcc18b91 Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Tue, 14 Feb 2012 13:16:57 +0000
Subject: [PATCH] MATH-744 Fixed "doubleValue()" and "floatValue()" when
 numerator and denominator are larger than the range of the corresponding
 primitive type.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243912 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math/fraction/BigFraction.java    | 22 +++++++++++++++--
 src/site/xdoc/changes.xml                     |  5 ++++
 .../math/fraction/BigFractionTest.java        | 24 +++++++++++++++++++
 3 files changed, 49 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/fraction/BigFraction.java b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
index e93d76d460..a6672e426f 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
@@ -682,7 +682,16 @@ public BigFraction divide(final BigFraction fraction) {
      */
     @Override
     public double doubleValue() {
-        return numerator.doubleValue() / denominator.doubleValue();
+        double result = numerator.doubleValue() / denominator.doubleValue();
+        if (Double.isNaN(result)) {
+            // Numerator and/or denominator must be out of range:
+            // Calculate how far to shift them to put them in range.
+            int shift = Math.max(numerator.bitLength(),
+                                 denominator.bitLength()) - Double.MAX_EXPONENT;
+            result = numerator.shiftRight(shift).doubleValue() /
+                denominator.shiftRight(shift).doubleValue();
+        }
+        return result;
     }
 
     /**
@@ -726,7 +735,16 @@ public boolean equals(final Object other) {
      */
     @Override
     public float floatValue() {
-        return numerator.floatValue() / denominator.floatValue();
+        float result = numerator.floatValue() / denominator.floatValue();
+        if (Double.isNaN(result)) {
+            // Numerator and/or denominator must be out of range:
+            // Calculate how far to shift them to put them in range.
+            int shift = Math.max(numerator.bitLength(),
+                                 denominator.bitLength()) - Float.MAX_EXPONENT;
+            result = numerator.shiftRight(shift).floatValue() /
+                denominator.shiftRight(shift).floatValue();
+        }
+        return result;
     }
 
     /**
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 51d89fd4ea..e7005bbf88 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,11 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="erans" type="fix" issue="MATH-744" due-to="Thundre">
+        Fixed "doubleValue" and "floatValue" method in "BigFraction" when
+        numerator and denominator are larger than the range of the
+        corresponding primitive type.
+      </action>
       <action dev="erans" type="update" issue="MATH-488">
         Removed "MathException" (from package "o.a.c.math").
       </action>
diff --git a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
index 42051ca8a3..f2fbe0d2a9 100644
--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
@@ -198,6 +198,30 @@ public void testDoubleValue() {
         Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
     }
 
+    // MATH-744
+    @Test
+    public void testDoubleValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.doubleValue(), 1e-15);
+    }
+
+    // MATH-744
+    @Test
+    public void testFloatValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.floatValue(), 1e-15);
+    }
+
     @Test
     public void testFloatValue() {
         BigFraction first = new BigFraction(1, 2);
