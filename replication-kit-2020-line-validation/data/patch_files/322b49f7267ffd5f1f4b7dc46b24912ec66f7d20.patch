From 322b49f7267ffd5f1f4b7dc46b24912ec66f7d20 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 4 Feb 2017 14:01:24 +0000
Subject: [PATCH] VALIDATOR-411 UrlValidator accepts ports above max limit of
 16-bit unsigned integer

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1781670 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                            |  3 +++
 .../commons/validator/routines/UrlValidator.java   | 14 ++++++++++++--
 .../validator/routines/UrlValidatorTest.java       | 14 ++++++++++++--
 3 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4fb957b68..455fcbd7a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -90,6 +90,9 @@ The dependencies for Validator have not changed since the 1.4 release.
 For the current list of dependencies, please see
 http://commons.apache.org/validator/dependencies.html
   ">
+    <action issue="VALIDATOR-411" type="fix" dev="sebb">
+    UrlValidator accepts ports above max limit of 16-bit unsigned integer
+    </action>
     <action type="update" dev="sebb">
     IANA TLD lists: Updated to Version 2017020400, Last Updated Sat Feb  4 07:07:01 2017 UTC
     </action>
diff --git a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
index 28a9f3bd8..1457a37ef 100644
--- a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
@@ -156,8 +156,7 @@ public class UrlValidator implements Serializable {
 
     private static final int PARSE_AUTHORITY_HOST_IP = 2; // excludes userinfo, if present
 
-    // Not needed, because it is validated by AUTHORITY_REGEX
-//    private static final int PARSE_AUTHORITY_PORT = 3;
+    private static final int PARSE_AUTHORITY_PORT = 3; // excludes leading colon
 
     /**
      * Should always be empty. The code currently allows spaces.
@@ -413,6 +412,17 @@ protected boolean isValidAuthority(String authority) {
                     return false;
                 }
             }
+            String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
+            if (port != null && port.length() > 0) {
+            	try {
+            		long iPort = Integer.parseInt(port);
+            		if (iPort < 0 || iPort > 0xFFFF) {
+            			return false;
+            		}
+            	} catch (NumberFormatException nfe) {
+            		return false; // this can happen for big numbers
+            	}
+            }
         }
 
         String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
index c7c5957ea..a7d945ccd 100644
--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
@@ -322,6 +322,15 @@ public void testValidator342(){
         assertTrue(urlValidator.isValid("http://example.rocks"));
     }
 
+    public void testValidator411(){
+        UrlValidator urlValidator = new UrlValidator();
+        assertTrue(urlValidator.isValid("http://example.rocks:/"));
+        assertTrue(urlValidator.isValid("http://example.rocks:0/"));
+        assertTrue(urlValidator.isValid("http://example.rocks:65535/"));
+        assertFalse(urlValidator.isValid("http://example.rocks:65536/"));
+        assertFalse(urlValidator.isValid("http://example.rocks:100000/"));
+    }
+
     static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {
       boolean carry = true;  //add 1 to lowest order part.
       boolean maxIndex = true;
@@ -533,11 +542,12 @@ public static void main(String[] argv) {
                                   new ResultPair("", false)
    };
    ResultPair[] testUrlPort = {new ResultPair(":80", true),
-                             new ResultPair(":65535", true),
+                             new ResultPair(":65535", true), // max possible
                              new ResultPair(":0", true),
                              new ResultPair("", true),
                              new ResultPair(":-1", false),
-                             new ResultPair(":65636", true),
+                             new ResultPair(":65636", false),
+                             new ResultPair(":999999999999999999", false),
                              new ResultPair(":65a", false)
    };
    ResultPair[] testPath = {new ResultPair("/test1", true),
