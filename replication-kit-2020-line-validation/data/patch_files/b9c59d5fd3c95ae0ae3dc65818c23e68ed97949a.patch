From b9c59d5fd3c95ae0ae3dc65818c23e68ed97949a Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Thu, 24 May 2007 15:38:56 +0000
Subject: [PATCH] BEANUTILS-88 PropertyUtilsBean.isReadable/isWriteable always
 returns false for mapped properties - thanks to Chuck Daniels

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/beanutils/trunk@541327 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/beanutils/PropertyUtilsBean.java  | 18 ++++---
 .../beanutils/PropertyUtilsTestCase.java      | 54 +++++++++++++++++++
 2 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java b/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
index f0fce0af0..78d9ec30e 100644
--- a/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
+++ b/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
@@ -1328,9 +1328,12 @@ public boolean isReadable(Object bean, String name) {
                     getPropertyDescriptor(bean, name);
                 if (desc != null) {
                     Method readMethod = desc.getReadMethod();
-                    if ((readMethod == null) &&
-                        (desc instanceof IndexedPropertyDescriptor)) {
-                        readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
+                    if (readMethod == null) {
+                        if (desc instanceof IndexedPropertyDescriptor) {
+                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
+                        } else if (desc instanceof MappedPropertyDescriptor) {
+                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
+                        }
                     }
                     return (readMethod != null);
                 } else {
@@ -1384,9 +1387,12 @@ public boolean isWriteable(Object bean, String name) {
                     getPropertyDescriptor(bean, name);
                 if (desc != null) {
                     Method writeMethod = desc.getWriteMethod();
-                    if ((writeMethod == null) &&
-                        (desc instanceof IndexedPropertyDescriptor)) {
-                        writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
+                    if (writeMethod == null) {
+                        if (desc instanceof IndexedPropertyDescriptor) {
+                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
+                        } else if (desc instanceof MappedPropertyDescriptor) {
+                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
+                        }
                     }
                     return (writeMethod != null);
                 } else {
diff --git a/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java b/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
index ddd1d66ca..5703fee6e 100755
--- a/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
+++ b/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
@@ -2076,6 +2076,60 @@ public void testGetWriteMethodPublicSubclass() {
 
     }
 
+    /**
+     * Test isReadable() method.
+     */
+    public void testIsReadable() {
+        TestBean bean = new TestBean();
+        String property = null;
+        try {
+            property = "stringProperty";
+            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isReadable Threw exception: " + t);
+        }
+        try {
+            property = "stringIndexed";
+            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isReadable Threw exception: " + t);
+        }
+        try {
+            property = "mappedProperty";
+            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isReadable Threw exception: " + t);
+        }
+        
+    }
+
+    /**
+     * Test isReadable() method.
+     */
+    public void testIsWriteable() {
+        TestBean bean = new TestBean();
+        String property = null;
+        try {
+            property = "stringProperty";
+            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isWriteable Threw exception: " + t);
+        }
+        try {
+            property = "stringIndexed";
+            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isWriteable Threw exception: " + t);
+        }
+        try {
+            property = "mappedProperty";
+            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
+        } catch (Throwable t) {
+            fail("Property " + property +" isWriteable Threw exception: " + t);
+        }
+        
+    }
+
 
     /**
      * Test the mappedPropertyType of MappedPropertyDescriptor.
