From 5ecbfedb2acaa65ea184b8a5eff517056466e34d Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 19 Jan 2011 19:17:59 +0000
Subject: [PATCH] MATH-480 - Fix ulp(Infinity) to return Infinity rather than
 NaN MATH-478 - Adds ulp(float)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_X@1060911 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/math/util/FastMath.java   | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java
index 6f1cc9f108..0df1194902 100644
--- a/src/main/java/org/apache/commons/math/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math/util/FastMath.java
@@ -3270,11 +3270,25 @@ public static double abs(double x) {
      * @param x number from which ulp is requested
      * @return ulp(x)
      */
-
     public static double ulp(double x) {
+        if (Double.isInfinite(x)) {
+            return Double.POSITIVE_INFINITY;
+        }
         return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
     }
 
+    /**
+     * Compute least significant bit (Unit in Last Position) for a number.
+     * @param x number from which ulp is requested
+     * @return ulp(x)
+     */
+    public static float ulp(float x) {
+        if (Float.isInfinite(x)) {
+            return Float.POSITIVE_INFINITY;
+        }
+        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
+    }
+
     /**
      * Get the next machine representable number after a number, moving
      * in the direction of another number.
