From a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1 Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Mon, 19 May 2014 15:00:03 +0000
Subject: [PATCH] Fixed NullPointerException in BSPTree.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The error occurred when chopping-off a sub-hyperplane
that was exactly at a region boundary.

Thanks to Aurélien Labrosse for the fix.

JIRA: MATH-1123

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1595924 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 +
 .../math3/geometry/partitioning/BSPTree.java  |  2 +-
 .../ConvexHullGenerator2DAbstractTest.java    | 97 +++++++++++++++++++
 3 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2dfea5bdab..a6a5cda52e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,10 @@ Users are encouraged to upgrade to this version as this release not
   2. A few methods in the FastMath class are in fact slower that their
   counterpart in either Math or StrictMath (cf. MATH-740 and MATH-901).
 ">
+      <action dev="luc" type="fix" issue="MATH-1123" due-to="Aurélien Labrosse">
+        Fixed NullPointerException when chopping-off a sub-hyperplane
+        that is exactly at a region boundary.
+      </action>
       <action dev="erans" type="fix" issue="MATH-1121" due-to="Ajo Fod">
         "BrentOptimizer": increment base class iteration counter.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
index c81832b07d..5aec175fcc 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -294,7 +294,7 @@ public void visit(final BSPTreeVisitor<S> visitor) {
      */
     private SubHyperplane<S> fitToCell(final SubHyperplane<S> sub) {
         SubHyperplane<S> s = sub;
-        for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {
+        for (BSPTree<S> tree = this; tree.parent != null && s != null; tree = tree.parent) {
             if (tree == tree.parent.plus) {
                 s = s.split(tree.parent.cut.getHyperplane()).getPlus();
             } else {
diff --git a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
index 5e2d4de329..670033cdf2 100644
--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
@@ -203,6 +203,103 @@ public void testClosePoints() {
         checkConvexHull(points, hull);
     }
 
+    @Test
+    public void testIssue1123() {
+
+        List<Vector2D> points = new ArrayList<Vector2D>();
+
+        int[][] data = new int[][] { { -11, -1 }, { -11, 0 }, { -11, 1 },
+                { -10, -3 }, { -10, -2 }, { -10, -1 }, { -10, 0 }, { -10, 1 },
+                { -10, 2 }, { -10, 3 }, { -9, -4 }, { -9, -3 }, { -9, -2 },
+                { -9, -1 }, { -9, 0 }, { -9, 1 }, { -9, 2 }, { -9, 3 },
+                { -9, 4 }, { -8, -5 }, { -8, -4 }, { -8, -3 }, { -8, -2 },
+                { -8, -1 }, { -8, 0 }, { -8, 1 }, { -8, 2 }, { -8, 3 },
+                { -8, 4 }, { -8, 5 }, { -7, -6 }, { -7, -5 }, { -7, -4 },
+                { -7, -3 }, { -7, -2 }, { -7, -1 }, { -7, 0 }, { -7, 1 },
+                { -7, 2 }, { -7, 3 }, { -7, 4 }, { -7, 5 }, { -7, 6 },
+                { -6, -7 }, { -6, -6 }, { -6, -5 }, { -6, -4 }, { -6, -3 },
+                { -6, -2 }, { -6, -1 }, { -6, 0 }, { -6, 1 }, { -6, 2 },
+                { -6, 3 }, { -6, 4 }, { -6, 5 }, { -6, 6 }, { -6, 7 },
+                { -5, -7 }, { -5, -6 }, { -5, -5 }, { -5, -4 }, { -5, -3 },
+                { -5, -2 }, { -5, 4 }, { -5, 5 }, { -5, 6 }, { -5, 7 },
+                { -4, -7 }, { -4, -6 }, { -4, -5 }, { -4, -4 }, { -4, -3 },
+                { -4, -2 }, { -4, 4 }, { -4, 5 }, { -4, 6 }, { -4, 7 },
+                { -3, -8 }, { -3, -7 }, { -3, -6 }, { -3, -5 }, { -3, -4 },
+                { -3, -3 }, { -3, -2 }, { -3, 4 }, { -3, 5 }, { -3, 6 },
+                { -3, 7 }, { -3, 8 }, { -2, -8 }, { -2, -7 }, { -2, -6 },
+                { -2, -5 }, { -2, -4 }, { -2, -3 }, { -2, -2 }, { -2, 4 },
+                { -2, 5 }, { -2, 6 }, { -2, 7 }, { -2, 8 }, { -1, -8 },
+                { -1, -7 }, { -1, -6 }, { -1, -5 }, { -1, -4 }, { -1, -3 },
+                { -1, -2 }, { -1, 4 }, { -1, 5 }, { -1, 6 }, { -1, 7 },
+                { -1, 8 }, { 0, -8 }, { 0, -7 }, { 0, -6 }, { 0, -5 },
+                { 0, -4 }, { 0, -3 }, { 0, -2 }, { 0, 4 }, { 0, 5 }, { 0, 6 },
+                { 0, 7 }, { 0, 8 }, { 1, -8 }, { 1, -7 }, { 1, -6 }, { 1, -5 },
+                { 1, -4 }, { 1, -3 }, { 1, -2 }, { 1, -1 }, { 1, 0 }, { 1, 1 },
+                { 1, 2 }, { 1, 3 }, { 1, 4 }, { 1, 5 }, { 1, 6 }, { 1, 7 },
+                { 1, 8 }, { 2, -8 }, { 2, -7 }, { 2, -6 }, { 2, -5 },
+                { 2, -4 }, { 2, -3 }, { 2, -2 }, { 2, -1 }, { 2, 0 }, { 2, 1 },
+                { 2, 2 }, { 2, 3 }, { 2, 4 }, { 2, 5 }, { 2, 6 }, { 2, 7 },
+                { 2, 8 }, { 3, -8 }, { 3, -7 }, { 3, -6 }, { 3, -5 },
+                { 3, -4 }, { 3, -3 }, { 3, -2 }, { 3, -1 }, { 3, 0 }, { 3, 1 },
+                { 3, 2 }, { 3, 3 }, { 3, 4 }, { 3, 5 }, { 3, 6 }, { 3, 7 },
+                { 3, 8 }, { 4, -7 }, { 4, -6 }, { 4, -5 }, { 4, -4 },
+                { 4, -3 }, { 4, -2 }, { 4, -1 }, { 4, 0 }, { 4, 1 }, { 4, 2 },
+                { 4, 3 }, { 4, 4 }, { 4, 5 }, { 4, 6 }, { 4, 7 }, { 5, -7 },
+                { 5, -6 }, { 5, -5 }, { 5, -4 }, { 5, -3 }, { 5, -2 },
+                { 5, -1 }, { 5, 0 }, { 5, 1 }, { 5, 2 }, { 5, 3 }, { 5, 4 },
+                { 5, 5 }, { 5, 6 }, { 5, 7 }, { 6, -7 }, { 6, -6 }, { 6, -5 },
+                { 6, -4 }, { 6, -3 }, { 6, -2 }, { 6, -1 }, { 6, 0 }, { 6, 1 },
+                { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 }, { 6, 6 }, { 6, 7 },
+                { 7, -6 }, { 7, -5 }, { 7, -4 }, { 7, -3 }, { 7, -2 },
+                { 7, -1 }, { 7, 0 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 4 },
+                { 7, 5 }, { 7, 6 }, { 8, -5 }, { 8, -4 }, { 8, -3 }, { 8, -2 },
+                { 8, -1 }, { 8, 0 }, { 8, 1 }, { 8, 2 }, { 8, 3 }, { 8, 4 },
+                { 8, 5 }, { 9, -4 }, { 9, -3 }, { 9, -2 }, { 9, -1 }, { 9, 0 },
+                { 9, 1 }, { 9, 2 }, { 9, 3 }, { 9, 4 }, { 10, -3 }, { 10, -2 },
+                { 10, -1 }, { 10, 0 }, { 10, 1 }, { 10, 2 }, { 10, 3 },
+                { 11, -1 }, { 11, 0 }, { 11, 1 } };
+
+        for (int[] line : data) {
+            points.add(new Vector2D(line[0], line[1]));
+        }
+
+        Vector2D[] referenceHull = new Vector2D[] { 
+            new Vector2D(-11.0, -1.0),
+            new Vector2D(-10.0, -3.0),
+            new Vector2D( -6.0, -7.0),
+            new Vector2D( -3.0, -8.0),
+            new Vector2D(  3.0, -8.0),
+            new Vector2D(  6.0, -7.0),
+            new Vector2D( 10.0, -3.0),
+            new Vector2D( 11.0, -1.0),
+            new Vector2D( 11.0,  1.0),
+            new Vector2D( 10.0,  3.0),
+            new Vector2D(  6.0,  7.0),
+            new Vector2D(  3.0,  8.0),
+            new Vector2D( -3.0,  8.0),
+            new Vector2D( -6.0,  7.0),
+            new Vector2D(-10.0,  3.0),
+            new Vector2D(-11.0,  1.0),
+        };
+
+        ConvexHullGenerator2D generator = new MonotoneChain(true, 1e-6);
+        ConvexHull2D convHull = generator.generate(points);
+        Region<Euclidean2D> hullRegion = convHull.createRegion();
+
+        Assert.assertEquals(274.0, hullRegion.getSize(), 1.0e-12);
+        double perimeter = 0;
+        for (int i = 0; i < referenceHull.length; ++i) {
+            perimeter += Vector2D.distance(referenceHull[i],
+                                           referenceHull[(i + 1) % referenceHull.length]);
+        }
+        Assert.assertEquals(perimeter, hullRegion.getBoundarySize(), 1.0e-12);
+
+        for (int i = 0; i < referenceHull.length; ++i) {
+            Assert.assertEquals(Location.BOUNDARY, hullRegion.checkPoint(referenceHull[i]));
+        }
+
+    }
+
     // ------------------------------------------------------------------------------
     
     protected final List<Vector2D> createRandomPoints(int size) {
