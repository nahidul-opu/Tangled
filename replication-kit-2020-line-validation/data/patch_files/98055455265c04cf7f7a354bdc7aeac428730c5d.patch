From 18f181ada7826542725fa4a9460307d606695b5d Mon Sep 17 00:00:00 2001
From: Daniil Finkel <dfinkel@coldlight.com>
Date: Wed, 1 Mar 2017 17:18:23 -0500
Subject: [PATCH 1/4] MATH-1405: Iteratively double minDelta for
 Kolmogorov-Smirnov Test jiggling

---
 .../stat/inference/KolmogorovSmirnovTest.java | 13 +++++------
 .../inference/KolmogorovSmirnovTestTest.java  | 22 +++++++++++++++++++
 2 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
index 9757b7336e..d863847ad3 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
@@ -24,7 +24,6 @@
 import org.apache.commons.math4.distribution.EnumeratedRealDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.AbstractRealDistribution;
-import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.InsufficientDataException;
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.MathInternalError;
@@ -1156,18 +1155,18 @@ private static void fixTies(double[] x, double[] y) {
 
        // Add jitter using a fixed seed (so same arguments always give same results),
        // low-initialization-overhead generator
-       final RealDistribution.Sampler sampler =
-           new UniformRealDistribution(-minDelta, minDelta).createSampler(RandomSource.create(RandomSource.JDK, 100));
+       UniformRandomProvider rng = RandomSource.create(RandomSource.JDK, 100);
 
        // It is theoretically possible that jitter does not break ties, so repeat
        // until all ties are gone.  Bound the loop and throw MIE if bound is exceeded.
        int ct = 0;
        boolean ties = true;
        do {
-           jitter(x, sampler);
-           jitter(y, sampler);
+           jitter(x, rng, minDelta);
+           jitter(y, rng, minDelta);
            ties = hasTies(x, y);
            ct++;
+           minDelta *= 2; // if jittering hasn't resolved ties, minDelta may be too small, so double it for next iteration
        } while (ties && ct < 1000);
        if (ties) {
            throw new MathInternalError(); // Should never happen
@@ -1207,9 +1206,9 @@ private static boolean hasTies(double[] x, double[] y) {
      * @param sampler probability distribution to sample for jitter values
      * @throws NullPointerException if either of the parameters is null
      */
-    private static void jitter(double[] data, RealDistribution.Sampler sampler) {
+    private static void jitter(final double[] data, final UniformRandomProvider rng, final double delta) {
         for (int i = 0; i < data.length; i++) {
-            final double d = sampler.sample();
+            final double d = delta * (2 * rng.nextDouble() - 1);
             data[i] += d;
         }
     }
diff --git a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
index 0e8c5050d4..389acbe733 100644
--- a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
@@ -436,6 +436,28 @@ public void testTwoSampleWithManyTies() {
         Assert.assertEquals(0.9792777290, test.kolmogorovSmirnovTest(x, y), 1e-6);
 
     }
+    
+    @Test
+    public void testTwoSampleWithManyTiesAndVerySmallDelta() {
+        // MATH-1405
+        final double[] x = {
+                0.000000, 0.000000, 1.000000,
+                1.000000, 1.500000, 1.600000,
+                1.700000, 1.800000, 1.900000, 2.000000, 2.000000000000001 };
+        
+        final double[] y = {
+                0.000000, 0.000000, 10.000000,
+                10.000000, 11.000000, 11.000000,
+                11.000000, 15.000000, 16.000000,
+                17.000000, 18.000000, 19.000000, 20.000000, 20.000000000000001 };
+        
+        // these values result in an initial calculated minDelta of 4.440892098500626E-16,
+        // which is too small to jitter the existing values to new ones bc of floating-point precision
+        // MATH-1405 added functionality to iteratively increase minDelta until a noticeable jitter occurs
+
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();
+        Assert.assertEquals(1.12173015e-5, test.kolmogorovSmirnovTest(x, y), 1e-6);
+    }
 
     @Test
     public void testTwoSamplesAllEqual() {

From cd64fa339a97300c64dfc434483e478a58f507a8 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Thu, 2 Mar 2017 13:40:14 +0100
Subject: [PATCH 2/4] Formatting (unit test).

---
 .../inference/KolmogorovSmirnovTestTest.java  | 32 +++++++++++--------
 1 file changed, 18 insertions(+), 14 deletions(-)

diff --git a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
index 389acbe733..c3aa553d0c 100644
--- a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
@@ -436,24 +436,28 @@ public void testTwoSampleWithManyTies() {
         Assert.assertEquals(0.9792777290, test.kolmogorovSmirnovTest(x, y), 1e-6);
 
     }
-    
+
     @Test
     public void testTwoSampleWithManyTiesAndVerySmallDelta() {
-        // MATH-1405
+        // Cf. MATH-1405
         final double[] x = {
-                0.000000, 0.000000, 1.000000,
-                1.000000, 1.500000, 1.600000,
-                1.700000, 1.800000, 1.900000, 2.000000, 2.000000000000001 };
-        
+            0.000000, 0.000000, 1.000000,
+            1.000000, 1.500000, 1.600000,
+            1.700000, 1.800000, 1.900000, 2.000000, 2.000000000000001
+        };
+
         final double[] y = {
-                0.000000, 0.000000, 10.000000,
-                10.000000, 11.000000, 11.000000,
-                11.000000, 15.000000, 16.000000,
-                17.000000, 18.000000, 19.000000, 20.000000, 20.000000000000001 };
-        
-        // these values result in an initial calculated minDelta of 4.440892098500626E-16,
-        // which is too small to jitter the existing values to new ones bc of floating-point precision
-        // MATH-1405 added functionality to iteratively increase minDelta until a noticeable jitter occurs
+            0.000000, 0.000000, 10.000000,
+            10.000000, 11.000000, 11.000000,
+            11.000000, 15.000000, 16.000000,
+            17.000000, 18.000000, 19.000000, 20.000000, 20.000000000000001
+        };
+
+        // These values result in an initial calculated minDelta of 4.440892098500626E-16,
+        // which is too small to jitter the existing values to new ones bc of floating-point
+        // precision.
+        // MATH-1405 adds functionality to iteratively increase minDelta until a noticeable
+        // jitter occurs.
 
         final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();
         Assert.assertEquals(1.12173015e-5, test.kolmogorovSmirnovTest(x, y), 1e-6);

From bb7e8951cb6ef08ca9df5fc036217c3a45c4d33c Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Thu, 2 Mar 2017 13:48:36 +0100
Subject: [PATCH 3/4] Comment formatting.

---
 .../math4/stat/inference/KolmogorovSmirnovTest.java        | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
index d863847ad3..def4f043b3 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
@@ -1154,7 +1154,7 @@ private static void fixTies(double[] x, double[] y) {
        minDelta /= 2;
 
        // Add jitter using a fixed seed (so same arguments always give same results),
-       // low-initialization-overhead generator
+       // low-initialization-overhead generator.
        UniformRandomProvider rng = RandomSource.create(RandomSource.JDK, 100);
 
        // It is theoretically possible that jitter does not break ties, so repeat
@@ -1166,10 +1166,11 @@ private static void fixTies(double[] x, double[] y) {
            jitter(y, rng, minDelta);
            ties = hasTies(x, y);
            ct++;
-           minDelta *= 2; // if jittering hasn't resolved ties, minDelta may be too small, so double it for next iteration
+           // If jittering hasn't resolved ties, "minDelta" may be too small.
+           minDelta *= 2;
        } while (ties && ct < 1000);
        if (ties) {
-           throw new MathInternalError(); // Should never happen
+           throw new MathInternalError(); // Should never happen.
        }
     }
 

From e280c8636792c5426e54868d464c9d28287a98fb Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Thu, 2 Mar 2017 15:02:15 +0100
Subject: [PATCH 4/4] Use a faster RNG.

---
 .../commons/math4/stat/inference/KolmogorovSmirnovTest.java     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
index def4f043b3..09999ea1ee 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
@@ -1155,7 +1155,7 @@ private static void fixTies(double[] x, double[] y) {
 
        // Add jitter using a fixed seed (so same arguments always give same results),
        // low-initialization-overhead generator.
-       UniformRandomProvider rng = RandomSource.create(RandomSource.JDK, 100);
+       final UniformRandomProvider rng = RandomSource.create(RandomSource.TWO_CMRES, 654321);
 
        // It is theoretically possible that jitter does not break ties, so repeat
        // until all ties are gone.  Bound the loop and throw MIE if bound is exceeded.
