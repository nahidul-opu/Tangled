From 583c892a0281ef179ba36cc21d37a08f5a4259ac Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Mon, 18 Sep 2006 02:55:50 +0000
Subject: [PATCH] Added rollbackAfterValidation property and code to issue a
 rollback on a connection after validation when this property is set to true
 to eliminate Oracle driver exceptions. Default property value is false. JIRA:
 DBCP-116 Reported and patched by Thomas Fischer

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk@447204 13f79535-47bb-0310-9956-ffa450edef68
---
 .../datasources/CPDSConnectionFactory.java    | 56 +++++++++++++++++--
 .../datasources/InstanceKeyDataSource.java    | 22 ++++++++
 .../KeyedCPDSConnectionFactory.java           | 40 ++++++++++++-
 .../datasources/PerUserPoolDataSource.java    |  1 +
 .../datasources/SharedPoolDataSource.java     |  3 +-
 xdocs/changes.xml                             |  5 ++
 6 files changed, 118 insertions(+), 9 deletions(-)

diff --git a/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
index 944b17cc3d..a75005b7ed 100644
--- a/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
@@ -49,6 +49,7 @@ class CPDSConnectionFactory
 
     protected ConnectionPoolDataSource _cpds = null;
     protected String _validationQuery = null;
+    protected boolean _rollbackAfterValidation = false;
     protected ObjectPool _pool = null;
     protected String _username = null;
     protected String _password = null;
@@ -57,13 +58,14 @@ class CPDSConnectionFactory
 
     /**
      * Create a new <tt>PoolableConnectionFactory</tt>.
+     * 
      * @param cpds the ConnectionPoolDataSource from which to obtain
-     *        PooledConnection's
-     * @param pool the {*link ObjectPool} in which to pool those
-     *        {*link Connection}s
-     * @param validationQuery a query to use to {*link #validateObject validate}
-     *        {*link Connection}s. Should return at least one row.
-     *        May be <tt>null</tt>
+     * PooledConnection's
+     * @param pool the {@link ObjectPool} in which to pool those
+     * {@link Connection}s
+     * @param validationQuery a query to use to {@link #validateObject validate}
+     * {@link Connection}s. Should return at least one row. May be 
+     * <tt>null</tt>
      * @param username
      * @param password
      */
@@ -79,6 +81,32 @@ public CPDSConnectionFactory(ConnectionPoolDataSource cpds,
         _username = username;
         _password = password;
     }
+    
+    /**
+     * Create a new <tt>PoolableConnectionFactory</tt>.
+     * 
+     * @param cpds the ConnectionPoolDataSource from which to obtain
+     * PooledConnection's
+     * @param pool the {@link ObjectPool} in which to pool those {@link
+     * Connection}s
+     * @param validationQuery a query to use to {@link #validateObject
+     * validate} {@link Connection}s. Should return at least one row.
+     * May be <tt>null</tt>
+     * @param rollbackAfterValidation whether a rollback should be issued
+     * after {@link #validateObject validating} {@link Connection}s.
+     * @param username
+     * @param password
+     */
+         public CPDSConnectionFactory(ConnectionPoolDataSource cpds,
+                                      ObjectPool pool,
+                                      String validationQuery,
+                                      boolean rollbackAfterValidation,
+                                      String username,
+                                      String password) {
+             this(cpds, pool, validationQuery, username, password);
+             _rollbackAfterValidation = rollbackAfterValidation;
+         }
+
 
     /**
      * Sets the {*link ConnectionFactory} from which to obtain base
@@ -102,6 +130,19 @@ public synchronized void setValidationQuery(String validationQuery) {
         _validationQuery = validationQuery;
     }
 
+    /**
+     * Sets whether a rollback should be issued after 
+     * {*link #validateObject validating} 
+     * {*link Connection}s.
+     * @param rollbackAfterValidation whether a rollback should be issued after
+     *        {*link #validateObject validating} 
+     *        {*link Connection}s.
+     */
+    public synchronized void setRollbackAfterValidation(
+            boolean rollbackAfterValidation) {
+        _rollbackAfterValidation = rollbackAfterValidation;
+    }
+
     /**
      * Sets the {*link ObjectPool} in which to pool {*link Connection}s.
      * @param pool the {*link ObjectPool} in which to pool those
@@ -174,6 +215,9 @@ public boolean validateObject(Object obj) {
                     } else {
                         valid = false;
                     }
+                    if (_rollbackAfterValidation) {
+                        conn.rollback();
+                    }
                 } catch (Exception e) {
                     valid = false;
                 } finally {
diff --git a/src/java/org/apache/commons/dbcp/datasources/InstanceKeyDataSource.java b/src/java/org/apache/commons/dbcp/datasources/InstanceKeyDataSource.java
index 886116c8c3..612ebbd96d 100644
--- a/src/java/org/apache/commons/dbcp/datasources/InstanceKeyDataSource.java
+++ b/src/java/org/apache/commons/dbcp/datasources/InstanceKeyDataSource.java
@@ -125,6 +125,7 @@ public abstract class InstanceKeyDataSource
              GenericObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
     private boolean _testWhileIdle = GenericObjectPool.DEFAULT_TEST_WHILE_IDLE;
     private String validationQuery = null;
+    private boolean rollbackAfterValidation = false;
     private boolean testPositionSet = false;
 
     protected String instanceKey = null;
@@ -610,6 +611,27 @@ public void setValidationQuery(String validationQuery) {
         }
     }
 
+    /**
+     * Whether a rollback will be issued after executing the SQL query 
+     * that will be used to validate connections from this pool
+     * before returning them to the caller.
+     */
+    public boolean isRollbackAfterValidation() {
+        return (this.rollbackAfterValidation);
+    }
+
+    /**
+     * Whether a rollback will be issued after executing the SQL query 
+     * that will be used to validate connections from this pool
+     * before returning them to the caller. Default behavior is NOT
+     * to issue a rollback. The setting will only have an effect
+     * if a validation query is set.
+     */
+    public void setRollbackAfterValidation(boolean rollbackAfterValidation) {
+        assertInitializationAllowed();
+        this.rollbackAfterValidation = rollbackAfterValidation;
+    }
+
     // ----------------------------------------------------------------------
     // Instrumentation Methods
 
diff --git a/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
index fa2e4efe88..c351570bbe 100644
--- a/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
@@ -49,6 +49,7 @@ class KeyedCPDSConnectionFactory
 
     protected ConnectionPoolDataSource _cpds = null;
     protected String _validationQuery = null;
+    protected boolean _rollbackAfterValidation = false;
     protected KeyedObjectPool _pool = null;
     private Map validatingMap = new HashMap();
     private WeakHashMap pcMap = new WeakHashMap();
@@ -69,8 +70,27 @@ public KeyedCPDSConnectionFactory(ConnectionPoolDataSource cpds,
     }
 
     /**
-     * Sets the {*link ConnectionFactory} from which to obtain base {*link Connection}s.
-     * @param connFactory the {*link ConnectionFactory} from which to obtain base {*link Connection}s
+     * Create a new <tt>KeyedPoolableConnectionFactory</tt>.
+     * @param cpds the ConnectionPoolDataSource from which to obtain
+     * PooledConnections
+     * @param pool the {@link ObjectPool} in which to pool those
+     * {@link Connection}s
+     * @param validationQuery a query to use to {@link #validateObject validate}
+     * {@link Connection}s.  Should return at least one row. May be <tt>null</tt>
+     * @param rollbackAfterValidation whether a rollback should be issued after
+     * {@link #validateObject validating} {@link Connection}s.
+     */
+    public KeyedCPDSConnectionFactory(ConnectionPoolDataSource cpds, 
+                                      KeyedObjectPool pool, 
+                                      String validationQuery,
+                                      boolean rollbackAfterValidation) {
+        this(cpds , pool, validationQuery);
+        _rollbackAfterValidation = rollbackAfterValidation;
+    }
+
+    /**
+     * Sets the {@link ConnectionFactory} from which to obtain base {@link Connection}s.
+     * @param connFactory the {*link ConnectionFactory} from which to obtain base {@link Connection}s
      */
     synchronized public void setCPDS(ConnectionPoolDataSource cpds) {
         _cpds = cpds;
@@ -86,6 +106,19 @@ synchronized public void setValidationQuery(String validationQuery) {
         _validationQuery = validationQuery;
     }
 
+    /**
+     * Sets whether a rollback should be issued after 
+     * {*link #validateObject validating} 
+     * {*link Connection}s.
+     * @param rollbackAfterValidation whether a rollback should be issued after
+     *        {*link #validateObject validating} 
+     *        {*link Connection}s.
+     */
+    public synchronized void setRollbackAfterValidation(
+            boolean rollbackAfterValidation) {
+        _rollbackAfterValidation = rollbackAfterValidation;
+    }
+
     /**
      * Sets the {*link ObjectPool} in which to pool {*link Connection}s.
      * @param pool the {*link ObjectPool} in which to pool those {*link Connection}s
@@ -166,6 +199,9 @@ public boolean validateObject(Object key, Object obj) {
                     } else {
                         valid = false;
                     }
+                    if (_rollbackAfterValidation) {
+                        conn.rollback();
+                    }
                 } catch(Exception e) {
                     valid = false;
                 } finally {
diff --git a/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java b/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
index 42bc18f537..1d7f00d514 100644
--- a/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
+++ b/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
@@ -481,6 +481,7 @@ private synchronized void registerPool(
         // the factory with the pool, so we do not have to do so
         // explicitly)
         new CPDSConnectionFactory(cpds, pool, getValidationQuery(),
+                                  isRollbackAfterValidation(), 
                                   username, password);
            
         pools.put(getPoolKey(username), pool);
diff --git a/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java b/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java
index c480d11a6f..e6a41e2fd1 100644
--- a/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java
+++ b/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java
@@ -213,7 +213,8 @@ private void registerPool(
         // Set up the factory we will use (passing the pool associates
         // the factory with the pool, so we do not have to do so
         // explicitly)
-        new KeyedCPDSConnectionFactory(cpds, pool, getValidationQuery());
+        new KeyedCPDSConnectionFactory(cpds, pool, getValidationQuery(),
+                                       isRollbackAfterValidation());
     }
 
     protected void setupDefaults(Connection con, String username)
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 13f49e1735..fb7ffdf129 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -140,6 +140,11 @@ The <action> type attribute can be add,update,fix,remove.
         to ensure it is reflexive, even when wrapped connections are not
         DelegatingConnections.
       </action>
+      <action dev="psteitz" type="update" issue="DBCP-116" due-to="Thomas Fischer">
+        Added rollbackAfterValidation property and code to issue a rollback on a
+        connection after validation when this property is set to true to eliminate
+        Oracle driver exceptions. Default property value is false.
+      </action>
     </release>   
 
     <release version="1.2.1" date="2004-06-12" description="Maintenance Release to restore JDK 1.3 compatibility">
