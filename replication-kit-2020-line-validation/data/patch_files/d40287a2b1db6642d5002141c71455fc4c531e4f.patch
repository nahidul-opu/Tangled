From d40287a2b1db6642d5002141c71455fc4c531e4f Mon Sep 17 00:00:00 2001
From: Henning Schmiedehausen <henning@apache.org>
Date: Mon, 21 Oct 2013 08:44:33 +0000
Subject: [PATCH] [CONFIGURATION-558] Configuration no longer accepts
 List<String> as default for getList()

Similar to CONFIGURATION-557, the getList(String, List) method was
generified to be getList(String, List<Object>) but needs to be
getList(String, List<?>) so that code that used a more specific list
(such as a List<String>) still compiles against the new API.




git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/CONFIGURATION_1_X_MAINTENANCE@1534064 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  7 +++
 .../configuration/AbstractConfiguration.java  |  4 +-
 .../configuration/CompositeConfiguration.java |  4 +-
 .../commons/configuration/Configuration.java  |  2 +-
 .../DynamicCombinedConfiguration.java         |  2 +-
 .../MultiFileHierarchicalConfiguration.java   |  2 +-
 .../PatternSubtreeConfigurationWrapper.java   |  2 +-
 .../configuration/TestConfiguration.java      | 46 +++++++++++++++++++
 8 files changed, 61 insertions(+), 8 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/configuration/TestConfiguration.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index af8644357d..a90a851b29 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -47,6 +47,13 @@ BUG FIXES IN 1.10
   All of this is purely a compiler issue, the runtime itself does not see any of the generics
   due to the Java type erasure. 
 
+* [CONFIGURATION-558] Configuration no longer accepts List<String> as default for getList()
+
+  Similar to CONFIGURATION-557, the getList(String, List) method was generified to be
+  getList(String, List<Object>) but needs to be getList(String, List<?>) so that code that
+  used a more specific list (such as a List<String>) still compiles against the new API.
+
+
 IMPROVEMENTS AND NEW FEATURES IN 1.10
 =====================================
 
diff --git a/src/main/java/org/apache/commons/configuration/AbstractConfiguration.java b/src/main/java/org/apache/commons/configuration/AbstractConfiguration.java
index 9893da69cd..587a7018ce 100644
--- a/src/main/java/org/apache/commons/configuration/AbstractConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/AbstractConfiguration.java
@@ -1117,7 +1117,7 @@ public List<Object> getList(String key)
         return getList(key, new ArrayList<Object>());
     }
 
-    public List<Object> getList(String key, List<Object> defaultValue)
+    public List<Object> getList(String key, List<?> defaultValue)
     {
         Object value = getProperty(key);
         List<Object> list;
@@ -1140,7 +1140,7 @@ else if (value instanceof List)
         }
         else if (value == null)
         {
-            list = defaultValue;
+            list = (List<Object>) defaultValue;
         }
         else if (value.getClass().isArray())
         {
diff --git a/src/main/java/org/apache/commons/configuration/CompositeConfiguration.java b/src/main/java/org/apache/commons/configuration/CompositeConfiguration.java
index aa7bc0cad3..69f0034705 100644
--- a/src/main/java/org/apache/commons/configuration/CompositeConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/CompositeConfiguration.java
@@ -339,7 +339,7 @@ public boolean containsKey(String key)
     }
 
     @Override
-    public List<Object> getList(String key, List<Object> defaultValue)
+    public List<Object> getList(String key, List<?> defaultValue)
     {
         List<Object> list = new ArrayList<Object>();
 
@@ -359,7 +359,7 @@ public List<Object> getList(String key, List<Object> defaultValue)
 
         if (list.isEmpty())
         {
-            return defaultValue;
+            return (List<Object>) defaultValue;
         }
 
         ListIterator<Object> lit = list.listIterator();
diff --git a/src/main/java/org/apache/commons/configuration/Configuration.java b/src/main/java/org/apache/commons/configuration/Configuration.java
index a6bff533ca..6aa6e6686c 100644
--- a/src/main/java/org/apache/commons/configuration/Configuration.java
+++ b/src/main/java/org/apache/commons/configuration/Configuration.java
@@ -594,5 +594,5 @@ public interface Configuration
      * @throws ConversionException is thrown if the key maps to an
      *         object that is not a List.
      */
-    List<Object> getList(String key, List<Object> defaultValue);
+    List<Object> getList(String key, List<?> defaultValue);
 }
diff --git a/src/main/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java b/src/main/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
index 330ebe0505..f4fc34ce01 100644
--- a/src/main/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
@@ -481,7 +481,7 @@ public Iterator<String> getKeys(String prefix)
     }
 
     @Override
-    public List<Object> getList(String key, List<Object> defaultValue)
+    public List<Object> getList(String key, List<?> defaultValue)
     {
         return this.getCurrentConfig().getList(key, defaultValue);
     }
diff --git a/src/main/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java b/src/main/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
index c93f312d80..45a33b184c 100644
--- a/src/main/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
@@ -357,7 +357,7 @@ public Iterator<String> getKeys(String prefix)
     }
 
     @Override
-    public List<Object> getList(String key, List<Object> defaultValue)
+    public List<Object> getList(String key, List<?> defaultValue)
     {
         return this.getConfiguration().getList(key, defaultValue);
     }
diff --git a/src/main/java/org/apache/commons/configuration/PatternSubtreeConfigurationWrapper.java b/src/main/java/org/apache/commons/configuration/PatternSubtreeConfigurationWrapper.java
index a35adc60a9..a082449f1a 100644
--- a/src/main/java/org/apache/commons/configuration/PatternSubtreeConfigurationWrapper.java
+++ b/src/main/java/org/apache/commons/configuration/PatternSubtreeConfigurationWrapper.java
@@ -236,7 +236,7 @@ public Iterator<String> getKeys(String prefix)
     }
 
     @Override
-    public List<Object> getList(String key, List<Object> defaultValue)
+    public List<Object> getList(String key, List<?> defaultValue)
     {
         return config.getList(makePath(key), defaultValue);
     }
diff --git a/src/test/java/org/apache/commons/configuration/TestConfiguration.java b/src/test/java/org/apache/commons/configuration/TestConfiguration.java
new file mode 100644
index 0000000000..69b0cb6948
--- /dev/null
+++ b/src/test/java/org/apache/commons/configuration/TestConfiguration.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.configuration;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.UUID;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestConfiguration
+{
+    @Test
+    public void testConfigurationGetList()
+    {
+        final List<String> defaults = new ArrayList<String>();
+
+        String key = UUID.randomUUID().toString();
+        for (int i = 0; i < 10; i++) {
+            defaults.add(UUID.randomUUID().toString());
+        }
+
+        final Configuration c = new MapConfiguration(Collections.<String, String>emptyMap());
+
+        final List<Object> values = c.getList(key, defaults);
+
+        Assert.assertEquals(defaults, values);
+    }
+}
