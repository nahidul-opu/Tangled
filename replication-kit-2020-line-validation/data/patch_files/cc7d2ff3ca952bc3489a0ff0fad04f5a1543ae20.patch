From cc7d2ff3ca952bc3489a0ff0fad04f5a1543ae20 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Sun, 11 Dec 2011 21:33:37 +0000
Subject: [PATCH] Modified setSeed methods in Bitstream generators
 (MersenneTwister and Well generators) to clear the cache of normal deviates
 used by nextGaussian.

JIRA: MATH-723


git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1213081 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math/random/AbstractWell.java     |  3 +-
 .../math/random/BitsStreamGenerator.java      |  8 +++
 .../commons/math/random/MersenneTwister.java  |  4 ++
 src/site/xdoc/changes.xml                     |  4 ++
 .../math/random/BitsStreamGeneratorTest.java  |  3 +-
 .../random/RandomGeneratorAbstractTest.java   | 68 +++++++++++++++++++
 6 files changed, 87 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/random/AbstractWell.java b/src/main/java/org/apache/commons/math/random/AbstractWell.java
index 3deffd9c16..7a9bd6ce05 100644
--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java
+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java
@@ -151,7 +151,6 @@ public void setSeed(final int seed) {
      */
     @Override
     public void setSeed(final int[] seed) {
-
         if (seed == null) {
             setSeed(System.currentTimeMillis() + System.identityHashCode(this));
             return;
@@ -167,7 +166,7 @@ public void setSeed(final int[] seed) {
         }
 
         index = 0;
-
+        clear();  // Clear normal deviate cache
     }
 
     /** Reinitialize the generator as if just built with the given long seed.
diff --git a/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java b/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java
index bef86a0bb2..aeb0c707de 100644
--- a/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java
+++ b/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java
@@ -157,4 +157,12 @@ public long nextLong() {
         return high | low;
     }
 
+    /**
+     * Clears the cache used by the default implementation of
+     * {@link #nextGaussian}.
+     */
+    public void clear() {
+        nextGaussian = Double.NaN;
+    }
+
 }
diff --git a/src/main/java/org/apache/commons/math/random/MersenneTwister.java b/src/main/java/org/apache/commons/math/random/MersenneTwister.java
index e75a919b52..4df76d336c 100644
--- a/src/main/java/org/apache/commons/math/random/MersenneTwister.java
+++ b/src/main/java/org/apache/commons/math/random/MersenneTwister.java
@@ -150,6 +150,8 @@ public void setSeed(int seed) {
             longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
             mt[mti]= (int) longMT;
         }
+
+        clear(); // Clear normal deviate cache
     }
 
     /** Reinitialize the generator as if just built with the given int array seed.
@@ -200,6 +202,8 @@ public void setSeed(int[] seed) {
 
         mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
 
+        clear(); // Clear normal deviate cache
+
     }
 
     /** Reinitialize the generator as if just built with the given long seed.
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 40adb29cb1..e1e1260280 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,10 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="psteitz" type="fix" issue="MATH-723">
+        Modified setSeed methods in Bitstream generators (MersenneTwister and Well
+        generators) to clear the cache of normal deviates used by nextGaussian.
+      </action>
       <action dev="luc" type="fix" issue="MATH-716">
         Fixed bracketing interval balancing in BracketingNthOrderBrentSolver.
       </action>
diff --git a/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java b/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java
index b6254dc8f8..4b8a1f5f4c 100644
--- a/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java
+++ b/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java
@@ -46,7 +46,8 @@ static class TestBitStreamGenerator extends BitsStreamGenerator {
         
         @Override
         public void setSeed(int seed) {
-           ran.setSeed(seed);   
+           ran.setSeed(seed);
+           clear();
         }
 
         @Override
diff --git a/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java b/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java
index 2893cd8b23..07d487259f 100644
--- a/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java
+++ b/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java
@@ -335,5 +335,73 @@ public void testNexBytes() throws Exception {
         TestUtils.assertChiSquareAccept(expected, count, 0.001);
         
     }
+    
+    @Test
+    public void testSeeding() throws Exception {
+        // makeGenerator initializes with fixed seed
+        RandomGenerator gen = makeGenerator();
+        RandomGenerator gen1 = makeGenerator();
+        checkSameSequence(gen, gen1);
+        // reseed, but recreate the second one
+        // verifies MATH-723
+        gen.setSeed(100);
+        gen1 = makeGenerator();
+        gen1.setSeed(100);
+        checkSameSequence(gen, gen1);
+    }
+    
+    private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) throws Exception {
+        final int len = 11;  // Needs to be an odd number to check MATH-723
+        final double[][] values = new double[2][len];
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextDouble();
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextDouble();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextFloat();
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextFloat();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextInt();
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextInt();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextLong();
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextLong();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextInt(len);
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextInt(len);
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextBoolean() ? 1 : 0;
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextBoolean() ? 1 : 0;
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1]));  
+        for (int i = 0; i < len; i++) {
+            values[0][i] = gen1.nextGaussian();
+        }
+        for (int i = 0; i < len; i++) {
+            values[1][i] = gen2.nextGaussian();
+        }
+        Assert.assertTrue(Arrays.equals(values[0], values[1])); 
+    }
 
 }
