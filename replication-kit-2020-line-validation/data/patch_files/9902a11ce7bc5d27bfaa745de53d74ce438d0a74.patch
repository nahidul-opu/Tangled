From 9902a11ce7bc5d27bfaa745de53d74ce438d0a74 Mon Sep 17 00:00:00 2001
From: Thomas Vandahl <tv@apache.org>
Date: Sun, 30 Oct 2011 21:42:02 +0000
Subject: [PATCH] Fix NPE in CompositeCacheConfigurator.parseRegion. Fixes
 JCS-79

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jcs/trunk@1195255 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../control/CompositeCacheConfigurator.java   | 68 ++++++++++---------
 2 files changed, 38 insertions(+), 33 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index bd4fd7c54..ea98505be 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -20,6 +20,9 @@
 	</properties>
 	<body>
 		<release version="2.0" date="unreleased" description="JDK 1.5 based major release">
+            <action dev="tv" type="fix" issue="JCS-79" due-to="Graham Leggett">
+                Fix NPE in CompositeCacheConfigurator.parseRegion
+            </action>
             <action dev="tv" type="fix" issue="JCS-68" due-to="Niall Gallagher">
                 Made RemoteCacheServer public, added remote cache remove feature to
                 JCSAdminBean
diff --git a/src/java/org/apache/jcs/engine/control/CompositeCacheConfigurator.java b/src/java/org/apache/jcs/engine/control/CompositeCacheConfigurator.java
index f66eb99ce..1ee599fd2 100644
--- a/src/java/org/apache/jcs/engine/control/CompositeCacheConfigurator.java
+++ b/src/java/org/apache/jcs/engine/control/CompositeCacheConfigurator.java
@@ -328,54 +328,56 @@ protected CompositeCache parseRegion( Properties props, String regName, String v
 
         CompositeCache cache = new CompositeCache( regName, cca, ea );
 
-        // Next, create the auxiliaries for the new cache
-        List<AuxiliaryCache> auxList = new ArrayList<AuxiliaryCache>();
-
-        if ( log.isDebugEnabled() )
+        if (value != null)
         {
-            log.debug( "Parsing region name '" + regName + "', value '" + value + "'" );
-        }
+            // Next, create the auxiliaries for the new cache
+            List<AuxiliaryCache> auxList = new ArrayList<AuxiliaryCache>();
 
-        // We must skip over ',' but not white space
-        StringTokenizer st = new StringTokenizer( value, "," );
+            if ( log.isDebugEnabled() )
+            {
+                log.debug( "Parsing region name '" + regName + "', value '" + value + "'" );
+            }
 
-        // If value is not in the form ", appender.." or "", then we should set
-        // the priority of the category.
+            // We must skip over ',' but not white space
+            StringTokenizer st = new StringTokenizer( value, "," );
 
-        if ( !( value.startsWith( "," ) || value.equals( "" ) ) )
-        {
-            // just to be on the safe side...
-            if ( !st.hasMoreTokens() )
+            // If value is not in the form ", appender.." or "", then we should set
+            // the priority of the category.
+
+            if ( !( value.startsWith( "," ) || value.equals( "" ) ) )
             {
-                return null;
+                // just to be on the safe side...
+                if ( !st.hasMoreTokens() )
+                {
+                    return null;
+                }
             }
-        }
 
-        AuxiliaryCache auxCache;
-        String auxName;
-        while ( st.hasMoreTokens() )
-        {
-            auxName = st.nextToken().trim();
-            if ( auxName == null || auxName.equals( "," ) )
+            AuxiliaryCache auxCache;
+            String auxName;
+            while ( st.hasMoreTokens() )
             {
-                continue;
-            }
-            log.debug( "Parsing auxiliary named \"" + auxName + "\"." );
+                auxName = st.nextToken().trim();
+                if ( auxName == null || auxName.equals( "," ) )
+                {
+                    continue;
+                }
+                log.debug( "Parsing auxiliary named \"" + auxName + "\"." );
 
-            auxCache = parseAuxiliary( cache, props, auxName, regName );
+                auxCache = parseAuxiliary( cache, props, auxName, regName );
 
-            if ( auxCache != null )
-            {
-                auxList.add( auxCache );
+                if ( auxCache != null )
+                {
+                    auxList.add( auxCache );
+                }
             }
-        }
 
-        // Associate the auxiliaries with the cache
+            // Associate the auxiliaries with the cache
 
-        cache.setAuxCaches( auxList.toArray( new AuxiliaryCache[0] ) );
+            cache.setAuxCaches( auxList.toArray( new AuxiliaryCache[0] ) );
+        }
 
         // Return the new cache
-
         return cache;
     }
 
