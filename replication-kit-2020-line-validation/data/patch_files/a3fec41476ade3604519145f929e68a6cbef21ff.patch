From a3fec41476ade3604519145f929e68a6cbef21ff Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Fri, 7 Oct 2016 20:00:41 +0000
Subject: [PATCH] [CONFIGURATION-640] Added unescaping for special characters.

In Java properties files some special characters are always escaped
and need to be unescaped on loading. In Commons Configuration 2.x
this unescaping did not work correctly. This is fixed by this commit
which takes the affected special characters into account.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1763820 13f79535-47bb-0310-9956-ffa450edef68
---
 .../PropertiesConfiguration.java              | 40 +++++++++++++------
 .../TestPropertiesConfiguration.java          | 11 +++++
 src/test/resources/test.properties            |  1 +
 3 files changed, 39 insertions(+), 13 deletions(-)

diff --git a/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
index d9c13bd3f3..831a37cfc0 100644
--- a/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
@@ -228,6 +228,13 @@ public class PropertiesConfiguration extends BaseConfiguration
      */
     private static final IOFactory DEFAULT_IO_FACTORY = new DefaultIOFactory();
 
+    /**
+     * A string with special characters that need to be unescaped when reading
+     * a properties file. {@code java.util.Properties} escapes these characters
+     * when writing out a properties file.
+     */
+    private static final String UNESCAPE_CHARACTERS = ":#=!\\\'\"";
+
     /**
      * This is the name of the property that can point to other
      * properties file for including other properties files.
@@ -1332,19 +1339,7 @@ protected static String unescapeJava(String str)
                 // handle an escaped value
                 hadSlash = false;
 
-                if (ch == '\\')
-                {
-                    out.append('\\');
-                }
-                else if (ch == '\'')
-                {
-                    out.append('\'');
-                }
-                else if (ch == '\"')
-                {
-                    out.append('"');
-                }
-                else if (ch == 'r')
+                if (ch == 'r')
                 {
                     out.append('\r');
                 }
@@ -1369,6 +1364,10 @@ else if (ch == 'u')
                     // uh-oh, we're in unicode country....
                     inUnicode = true;
                 }
+                else if (needsUnescape(ch))
+                {
+                    out.append(ch);
+                }
                 else
                 {
                     out.append('\\');
@@ -1395,6 +1394,21 @@ else if (ch == '\\')
         return out.toString();
     }
 
+    /**
+     * Checks whether the specified character needs to be unescaped. This method
+     * is called when during reading a property file an escape character ('\')
+     * is detected. If the character following the escape character is
+     * recognized as a special character which is escaped per default in a Java
+     * properties file, it has to be unescaped.
+     *
+     * @param ch the character in question
+     * @return a flag whether this character has to be unescaped
+     */
+    private static boolean needsUnescape(char ch)
+    {
+        return UNESCAPE_CHARACTERS.indexOf(ch) >= 0;
+    }
+
     /**
      * Helper method for loading an included properties file. This method is
      * called by {@code load()} when an {@code include} property
diff --git a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
index 3c36be2a5c..6c6a960628 100644
--- a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
@@ -1178,6 +1178,17 @@ public InputStream getInputStream(URL url)
         assertEquals("success", configuration.getString("test.outcome"));
     }
 
+    /**
+     * Tests whether special characters in a property value are un-escaped. This
+     * test is related to CONFIGURATION-640.
+     */
+    @Test
+    public void testUnEscapeCharacters()
+    {
+        assertEquals("Wrong value", "#1 =: me!",
+                conf.getString("test.unescape.characters"));
+    }
+
     /**
      * Helper method for testing the content of a list with elements that
      * contain backslashes.
diff --git a/src/test/resources/test.properties b/src/test/resources/test.properties
index 74c80c5d04..46a87d8eb5 100644
--- a/src/test/resources/test.properties
+++ b/src/test/resources/test.properties
@@ -24,6 +24,7 @@ include = ${include.file}
 
 test.unescape = This \n string \t contains \" escaped \\ character\u0073
 test.unescape.list-separator = This string contains \, an escaped list separator
+test.unescape.characters = \#1 \=\: me\!
 
 #
 # Other test properties
