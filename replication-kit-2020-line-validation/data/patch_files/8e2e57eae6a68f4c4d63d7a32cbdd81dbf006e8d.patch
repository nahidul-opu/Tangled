From 8e2e57eae6a68f4c4d63d7a32cbdd81dbf006e8d Mon Sep 17 00:00:00 2001
From: William Colen <colen@apache.org>
Date: Fri, 13 Jul 2012 03:56:21 +0000
Subject: [PATCH] OPENNLP-481: Some applications would benefit from having the
 option of splitting tokens in the hyphen or not. Now it is configurable.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361039 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tools/formats/ad/ADNameSampleStream.java    | 17 ++++++++++++++---
 .../formats/ad/ADNameSampleStreamFactory.java   |  7 ++++++-
 .../formats/ad/ADNameSampleStreamTest.java      |  2 +-
 3 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
index c4c87afb8..d52487f82 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
@@ -156,6 +156,8 @@ public class ADNameSampleStream implements ObjectStream<NameSample> {
    * To keep the last left contraction part
    */
   private String leftContractionPart = null;
+
+  private final boolean splitHyphenatedTokens;
   
   /**
    * Creates a new {@link NameSample} stream from a line stream, i.e.
@@ -164,9 +166,13 @@ public class ADNameSampleStream implements ObjectStream<NameSample> {
    * 
    * @param lineStream
    *          a stream of lines as {@link String}
+   * @param splitHyphenatedTokens
+   *          if true hyphenated tokens will be separated: "carros-monstro" >
+   *          "carros" "-" "monstro"
    */
-  public ADNameSampleStream(ObjectStream<String> lineStream) {
+  public ADNameSampleStream(ObjectStream<String> lineStream, boolean splitHyphenatedTokens) {
     this.adSentenceStream = new ADSentenceStream(lineStream);
+    this.splitHyphenatedTokens = splitHyphenatedTokens;
   }
 
   /**
@@ -176,12 +182,17 @@ public ADNameSampleStream(ObjectStream<String> lineStream) {
    *          the Corpus {@link InputStream}
    * @param charsetName
    *          the charset of the Arvores Deitadas Corpus
+   * @param splitHyphenatedTokens
+   *          if true hyphenated tokens will be separated: "carros-monstro" >
+   *          "carros" "-" "monstro"
    */
-  public ADNameSampleStream(InputStream in, String charsetName) {
+  public ADNameSampleStream(InputStream in, String charsetName,
+      boolean splitHyphenatedTokens) {
 
     try {
       this.adSentenceStream = new ADSentenceStream(new PlainTextByLineStream(
           in, charsetName));
+      this.splitHyphenatedTokens = splitHyphenatedTokens;
     } catch (UnsupportedEncodingException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
@@ -367,7 +378,7 @@ private List<String> processTok(String tok) {
     }
     
     // lets split all hyphens
-    if (tok.contains("-") && tok.length() > 1) {
+    if (this.splitHyphenatedTokens && tok.contains("-") && tok.length() > 1) {
       Matcher matcher = hyphenPattern.matcher(tok);
 
       String firstTok = null;
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
index 5b15e5f77..7af94e0f5 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
@@ -22,6 +22,7 @@
 import java.nio.charset.Charset;
 
 import opennlp.tools.cmdline.ArgumentParser;
+import opennlp.tools.cmdline.ArgumentParser.OptionalParameter;
 import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
 import opennlp.tools.cmdline.CmdLineUtil;
 import opennlp.tools.cmdline.StreamFactoryRegistry;
@@ -47,6 +48,10 @@ interface Parameters {
 
     @ParameterDescription(valueName = "sampleData", description = "data to be used, usually a file name.")
     File getData();
+    
+    @ParameterDescription(valueName = "split", description = "if true all hyphenated tokens will be separated (default true)")
+    @OptionalParameter(defaultValue = "true")
+    Boolean getSplitHyphenatedTokens();
 
     @ParameterDescription(valueName = "language", description = "language which is being processed.")
     String getLang();
@@ -72,6 +77,6 @@ public ObjectStream<NameSample> create(String[] args) {
     ObjectStream<String> lineStream = new PlainTextByLineStream(
         sampleDataIn.getChannel(), params.getEncoding());
 
-    return new ADNameSampleStream(lineStream);
+    return new ADNameSampleStream(lineStream, params.getSplitHyphenatedTokens());
   }
 }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
index d47344535..b14a176cb 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
@@ -105,7 +105,7 @@ public void setup() throws IOException {
         .getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADNameSampleStream stream = new ADNameSampleStream(
-        new PlainTextByLineStream(in, "UTF-8"));
+        new PlainTextByLineStream(in, "UTF-8"), true);
 
     NameSample sample = stream.read();
 
