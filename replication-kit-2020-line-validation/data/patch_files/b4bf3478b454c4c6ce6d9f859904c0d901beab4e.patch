From b4bf3478b454c4c6ce6d9f859904c0d901beab4e Mon Sep 17 00:00:00 2001
From: Bernd Eckenfels <ecki@apache.org>
Date: Sun, 16 Nov 2014 06:58:24 +0000
Subject: [PATCH] [VFS-545] Remove and avoid FileSystems in cache. Add/fix
 Javadoc, added Unittests.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1639972 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/cache/AbstractFilesCache.java        |  5 ++
 .../commons/vfs2/cache/DefaultFilesCache.java | 60 +++++++++++++------
 .../commons/vfs2/cache/LRUFilesCache.java     |  1 +
 .../commons/vfs2/cache/NullFilesCache.java    |  4 --
 .../commons/vfs2/cache/SoftRefFilesCache.java |  4 --
 .../vfs2/cache/LRUFilesCacheTests.java        | 10 +++-
 .../vfs2/cache/NullFilesCacheTests.java       | 40 +++++++++++--
 .../commons/vfs2/test/CacheTestSuite.java     |  5 +-
 src/changes/changes.xml                       |  5 +-
 9 files changed, 95 insertions(+), 39 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/AbstractFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/AbstractFilesCache.java
index 6ff79c989c..d17a14b5c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/AbstractFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/AbstractFilesCache.java
@@ -16,10 +16,15 @@
  */
 package org.apache.commons.vfs2.cache;
 
+import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FilesCache;
 import org.apache.commons.vfs2.provider.AbstractVfsComponent;
 
 
 public abstract class AbstractFilesCache extends AbstractVfsComponent implements FilesCache
 {
+    // @Override - commented in FilesCache interface
+    public void touchFile(final FileObject file)
+    {
+    }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/DefaultFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/DefaultFilesCache.java
index 1f211bba8d..920d9d0371 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/DefaultFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/DefaultFilesCache.java
@@ -25,17 +25,27 @@
 import org.apache.commons.vfs2.FileSystem;
 
 /**
- * A {@link org.apache.commons.vfs2.FilesCache} implementation.
+ * A simple {@link org.apache.commons.vfs2.FilesCache FilesCache} implementation.
  * <p>
- * This implementation caches every file for the complete lifetime of the used
- * {@link org.apache.commons.vfs2.FileSystemManager}.
+ * This implementation caches every file with no expire or limit.
+ * All files and filesystems are hard reachable references. This implementation
+ * holds a list of filesystem specific {@linkplain ConcurrentHashMap ConcurrentHashMaps} in
+ * the main cache map.
+ * <p>
+ * Cached {@linkplain FileObject FileObjects} as well as {@linkplain FileSystem FileSystems}
+ * are only removed when {@link #clear(FileSystem)} is called (i.e. on filesystem close).
+ * When the used {@link org.apache.commons.vfs2.FileSystemManager FileSystemManager} is closed,
+ * it will also {@linkplain #close() close} this cache (which frees all entries).
+ * <p>
+ * Despite its name, this is not the fallback implementation used by
+ * {@link org.apache.commons.vfs2.impl.DefaultFileSystemManager#init() DefaultFileSystemManager#init()}
+ * anymore.
  */
 public class DefaultFilesCache extends AbstractFilesCache
 {
-
-    /** The FileSystem cache */
+    /** The FileSystem cache. Keeps one Map for each FileSystem. */
     private final ConcurrentMap<FileSystem, ConcurrentMap<FileName, FileObject>> filesystemCache =
-          new ConcurrentHashMap<FileSystem, ConcurrentMap<FileName, FileObject>>(10);
+                    new ConcurrentHashMap<FileSystem, ConcurrentMap<FileName, FileObject>>(10);
 
     @Override
     public void putFile(final FileObject file)
@@ -54,23 +64,35 @@ public boolean putFileIfAbsent(final FileObject file)
     @Override
     public FileObject getFile(final FileSystem filesystem, final FileName name)
     {
-        final Map<FileName, FileObject> files = getOrCreateFilesystemCache(filesystem);
-        return files.get(name);
+        // avoid creating filesystem entry for empty filesystem cache:
+        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
+        if (files == null)
+        {
+            // cache for filesystem is not known => file is not cached:
+            return null;
+        }
+
+        return files.get(name); // or null
     }
 
     @Override
     public void clear(final FileSystem filesystem)
     {
-        final Map<FileName, FileObject> files = getOrCreateFilesystemCache(filesystem);
-        files.clear();
+        // avoid keeping a reference to the FileSystem (key) object
+        final Map<FileName, FileObject> files = filesystemCache.remove(filesystem);
+        if (files != null)
+        {
+            files.clear(); // help GC
+        }
     }
 
     protected ConcurrentMap<FileName, FileObject> getOrCreateFilesystemCache(final FileSystem filesystem)
     {
         ConcurrentMap<FileName, FileObject> files = filesystemCache.get(filesystem);
-        if (files == null)
+        // we loop to make sure we never return null even when concurrent clean is called
+        while (files == null)
         {
-            filesystemCache.putIfAbsent(filesystem, new ConcurrentHashMap<FileName, FileObject>());
+            filesystemCache.putIfAbsent(filesystem, new ConcurrentHashMap<FileName, FileObject>(200, 0.75f, 8));
             files = filesystemCache.get(filesystem);
         }
 
@@ -88,11 +110,13 @@ public void close()
     @Override
     public void removeFile(final FileSystem filesystem, final FileName name)
     {
-        final Map<?, ?> files = getOrCreateFilesystemCache(filesystem);
-        files.remove(name);
-    }
-
-    public void touchFile(final FileObject file)
-    {
+        // avoid creating filesystem entry for empty filesystem cache:
+        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
+        if (files != null)
+        {
+            files.remove(name);
+            // This would be too racey:
+            // if (files.empty()) filesystemCache.remove(filessystem);
+        }
     }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/LRUFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/LRUFilesCache.java
index e31bb81a96..8741964746 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/LRUFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/LRUFilesCache.java
@@ -254,6 +254,7 @@ public void removeFile(final FileSystem filesystem, final FileName name)
         }
     }
 
+    @Override
     public void touchFile(final FileObject file)
     {
         // this moves the file back on top
diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/NullFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/NullFilesCache.java
index 1211be9dc0..8f3146ee91 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/NullFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/NullFilesCache.java
@@ -56,8 +56,4 @@ public void clear(final FileSystem filesystem)
     public void removeFile(final FileSystem filesystem, final FileName name)
     {
     }
-
-    public void touchFile(final FileObject file)
-    {
-    }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
index 9c2bb97498..d1e7373814 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
@@ -336,10 +336,6 @@ public void removeFile(final FileSystem fileSystem, final FileName fileName)
         }
     }
 
-    public void touchFile(final FileObject fileObject)
-    {
-    }
-
     private boolean removeFile(final FileSystemAndNameKey key)
     {
         if (log.isDebugEnabled())
diff --git a/core/src/test/java/org/apache/commons/vfs2/cache/LRUFilesCacheTests.java b/core/src/test/java/org/apache/commons/vfs2/cache/LRUFilesCacheTests.java
index c0d437f283..070ca26847 100644
--- a/core/src/test/java/org/apache/commons/vfs2/cache/LRUFilesCacheTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/cache/LRUFilesCacheTests.java
@@ -17,12 +17,11 @@
 package org.apache.commons.vfs2.cache;
 
 import org.apache.commons.vfs2.FileObject;
-import org.apache.commons.vfs2.test.AbstractProviderTestCase;
 
 /**
- * NullFilesCache
+ * Tests for {@link LRUFilesCache} used by {@link LRUFilesCacheTestCase}.
  */
-public class LRUFilesCacheTests extends AbstractProviderTestCase
+public class LRUFilesCacheTests extends FilesCacheTestsBase
 {
     public void testFilesCache() throws Exception
     {
@@ -73,4 +72,9 @@ public void testFilesCache() throws Exception
         final FileObject dir1_2 = scratchFolder.resolveFile("dir1");
         assertFalse(dir1 == dir1_2);
     }
+
+    public void testClass()
+    {
+        assertTrue(getManager().getFilesCache() instanceof LRUFilesCache);
+    }
 }
diff --git a/core/src/test/java/org/apache/commons/vfs2/cache/NullFilesCacheTests.java b/core/src/test/java/org/apache/commons/vfs2/cache/NullFilesCacheTests.java
index 1c120647c7..cf2e48d463 100644
--- a/core/src/test/java/org/apache/commons/vfs2/cache/NullFilesCacheTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/cache/NullFilesCacheTests.java
@@ -16,14 +16,15 @@
  */
 package org.apache.commons.vfs2.cache;
 
+import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
-import org.apache.commons.vfs2.test.AbstractProviderTestCase;
+import org.apache.commons.vfs2.FileSystem;
+import org.apache.commons.vfs2.FilesCache;
 
 /**
- * NullFilesCache
- *
+ * Tests for {@link NullFilesCache} used by {@link NullFilesCacheTestCase}.
  */
-public class NullFilesCacheTests extends AbstractProviderTestCase
+public class NullFilesCacheTests extends FilesCacheTestsBase
 {
     public void testFilesCache() throws Exception
     {
@@ -32,6 +33,35 @@ public void testFilesCache() throws Exception
         final FileObject dir1 = scratchFolder.resolveFile("dir1");
         final FileObject dir1_2 = scratchFolder.resolveFile("dir1");
 
-        assertFalse(dir1 == dir1_2);
+        assertFalse("Should always be new instance with NullCache", dir1 == dir1_2);
+    }
+
+    @Override
+    public void testBasicCacheOps() throws Exception
+    {
+        // the basic test looks different for a null cache:
+
+        final FilesCache cache = getManager().getFilesCache();
+        final FileObject fo = getWriteFolder().resolveFile("dir1");
+        final FileName fn = fo.getName();
+        final FileSystem fs = fo.getFileSystem();
+
+        cache.clear(fs);
+        assertNull(cache.getFile(fs, fn));
+
+        cache.putFile(fo);
+        assertNull(null, cache.getFile(fs, fn));
+
+        assertFalse(cache.putFileIfAbsent(fo)); // hmmm?
+        assertNull(null, cache.getFile(fs, fn));
+
+        cache.removeFile(fs, fn);
+        assertNull(cache.getFile(fs, fn));
+    }
+
+
+    public void testClass()
+    {
+        assertTrue(getManager().getFilesCache() instanceof NullFilesCache);
     }
 }
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/CacheTestSuite.java b/core/src/test/java/org/apache/commons/vfs2/test/CacheTestSuite.java
index 8e805f6298..d9c6c0639a 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/CacheTestSuite.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/CacheTestSuite.java
@@ -18,14 +18,11 @@
 
 
 /**
- * The suite of tests for a file system.
+ * The suite of tests for a file cache.
  */
 public class CacheTestSuite
     extends AbstractTestSuite
 {
-    /**
-     * Adds the tests for a file system to this suite.
-     */
     public CacheTestSuite(final ProviderTestConfig providerConfig) throws Exception
     {
         this(providerConfig, "", false);
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 56161d46a1..aab6ffcd81 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -24,8 +24,11 @@
   <body>
     <release version="2.1" date="TBD" description="New features and bug fix release.">
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
-<!--     	[Local] Need an easy way to convert from a FileObject to a File. -->
+<!--        [Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-545" dev="ecki" type="fix">
+       Make DefaultFilesCache remove reference to filesystem when it is cleared (closed).
+      </action>
       <action issue="VFS-521" dev="ecki" type="fix">
        [Ram][Tests] Make RAM provider test pass on Java 8
        (JDK-8042377, self-suppression not permitted, MonitorOutputStream#close()).
