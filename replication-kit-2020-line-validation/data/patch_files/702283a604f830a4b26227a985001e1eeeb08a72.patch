From 702283a604f830a4b26227a985001e1eeeb08a72 Mon Sep 17 00:00:00 2001
From: Nick Burch <nick@apache.org>
Date: Fri, 27 May 2011 15:16:36 +0000
Subject: [PATCH] VALIDATOR-282 - Have GenericTypeValidator try both SHORT and
 DEFAULT DateFormats when validating a date

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1128355 13f79535-47bb-0310-9956-ffa450edef68
---
 .../validator/GenericTypeValidator.java       | 30 ++++++++++++++-----
 .../validator/GenericTypeValidatorTest.java   |  4 +++
 2 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/src/main/java/org/apache/commons/validator/GenericTypeValidator.java b/src/main/java/org/apache/commons/validator/GenericTypeValidator.java
index 4100496fc..c6bd6c116 100644
--- a/src/main/java/org/apache/commons/validator/GenericTypeValidator.java
+++ b/src/main/java/org/apache/commons/validator/GenericTypeValidator.java
@@ -371,22 +371,38 @@ public static Date formatDate(String value, Locale locale) {
         }
 
         try {
-            DateFormat formatter = null;
+            // Get the formatters to check against
+            DateFormat formatterShort = null;
+            DateFormat formatterDefault = null;
             if (locale != null) {
-                formatter =
-                    DateFormat.getDateInstance(DateFormat.SHORT, locale);
+                formatterShort = 
+                   DateFormat.getDateInstance(DateFormat.SHORT, locale);
+                formatterDefault = 
+                   DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
             } else {
-                formatter =
+                formatterShort =
                     DateFormat.getDateInstance(
                     DateFormat.SHORT,
                     Locale.getDefault());
+                formatterDefault =
+                   DateFormat.getDateInstance(
+                   DateFormat.DEFAULT,
+                   Locale.getDefault());
             }
 
-            formatter.setLenient(false);
+            // Turn off lenient parsing
+            formatterShort.setLenient(false);
+            formatterDefault.setLenient(false);
 
-            date = formatter.parse(value);
+            // Firstly, try with the short form
+            try {
+               date = formatterShort.parse(value);
+            } catch (ParseException e) {
+               // Fall back on the default one
+               date = formatterDefault.parse(value);
+            }
         } catch (ParseException e) {
-            // Bad date so return null
+            // Bad date, so log and return null
             Log log = LogFactory.getLog(GenericTypeValidator.class);
             if (log.isDebugEnabled()) {
                 log.debug("Date parse failed value=[" + value  + "], " +
diff --git a/src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java b/src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java
index 7b57aa4b6..781ae27f6 100644
--- a/src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java
@@ -17,6 +17,7 @@
 package org.apache.commons.validator;
 
 import java.io.IOException;
+import java.util.Date;
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.Map;
@@ -124,6 +125,7 @@ public void testUSLocale() throws ValidatorException {
       info.setLong("88000");
       info.setFloat("12.1555");
       info.setDouble("129.1551511111");
+      info.setDate("12/21/2010");
       localeTest(info, Locale.US);
    }
 
@@ -139,6 +141,7 @@ public void testFRLocale() throws ValidatorException {
       info.setLong("88000");
       info.setFloat("12,1555");
       info.setDouble("129,1551511111");
+      info.setDate("21/12/2010");
       Map map = localeTest(info, Locale.FRENCH);
       assertTrue("float value not correct", ((Float)map.get("float")).intValue() == 12);
       assertTrue("double value not correct", ((Double)map.get("double")).intValue() == 129);
@@ -176,6 +179,7 @@ private Map localeTest(TypeBean info, Locale locale) throws ValidatorException {
       assertTrue("Expecting long result to be an instance of Long for locale: "+locale, (hResultValues.get("long") instanceof Long));
       assertTrue("Expecting float result to be an instance of Float for locale: "+locale, (hResultValues.get("float") instanceof Float));
       assertTrue("Expecting double result to be an instance of Double for locale: "+locale, (hResultValues.get("double") instanceof Double));
+      assertTrue("Expecting date result to be an instance of Date for locale: "+locale, (hResultValues.get("date") instanceof Date));
       
       for (Iterator i = hResultValues.keySet().iterator(); i.hasNext(); ) {
          String key = (String)i.next();
