From b278d97dce8ed3f486722f4faa12753def872937 Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Sun, 10 Apr 2011 16:00:56 +0000
Subject: [PATCH] replaced the custom comparison method in SimplexSolver with
 the new MathUtils.compareTo(double, double, int) with maxUlps as the third
 parameter, as per Gilles advice.

Jira: MATH-434

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1090823 13f79535-47bb-0310-9956-ffa450edef68
---
 .../math/optimization/linear/SimplexSolver.java | 17 ++++-------------
 1 file changed, 4 insertions(+), 13 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
index b9afc0ad6b..dcb9274de3 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -22,7 +22,6 @@
 
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.RealPointValuePair;
-import org.apache.commons.math.util.FastMath;
 import org.apache.commons.math.util.MathUtils;
 
 
@@ -72,7 +71,7 @@ private Integer getPivotColumn(SimplexTableau tableau) {
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             final double entry = tableau.getEntry(0, i);
-            if (MathUtils.compareTo(entry, minValue, getEpsilon(entry)) < 0) {
+            if (MathUtils.compareTo(entry, minValue, maxUlps) < 0) {
                 minValue = entry;
                 minPos = i;
             }
@@ -94,9 +93,9 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
             
-            if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {
+            if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                final int cmp = MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));
+                final int cmp = MathUtils.compareTo(ratio, minRatio, maxUlps);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
@@ -116,7 +115,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {
             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
               int column = i + tableau.getArtificialVariableOffset();
               final double entry = tableau.getEntry(row, column);
-              if (MathUtils.equals(entry, 1d, getEpsilon(entry)) &&
+              if (MathUtils.equals(entry, 1d, maxUlps) &&
                   row.equals(tableau.getBasicRow(column))) {
                 return row;
               }
@@ -196,12 +195,4 @@ public RealPointValuePair doOptimize() throws OptimizationException {
         return tableau.getSolution();
     }
 
-    /**
-     * Get an epsilon that is adjusted to the magnitude of the given value.
-     * @param value the value for which to get the epsilon
-     * @return magnitude-adjusted epsilon using {@link FastMath.ulp}
-     */
-    private double getEpsilon(double value) {
-        return FastMath.ulp(value) * (double) maxUlps;
-    }
 }
