From 9a09f41b03df238043e0eda59d5cfa11cdd36523 Mon Sep 17 00:00:00 2001
From: Mark Thomas <markt@apache.org>
Date: Sat, 7 Mar 2015 19:38:34 +0000
Subject: [PATCH] =?UTF-8?q?Fix=20BCEL-188=20Patch=20by=20J=C3=A9r=C3=B4me?=
 =?UTF-8?q?=20Leroux=20Correct=20verification=20of=20the=20return=20value?=
 =?UTF-8?q?=20of=20a=20method.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1664899 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   3 +
 .../apache/bcel/generic/ReferenceType.java    |   2 +-
 .../java/org/apache/bcel/generic/Type.java    |  17 ++++-
 .../verifier/structurals/Pass3bVerifier.java  |  68 +++++++-----------
 .../bcel/verifier/VerifierReturnTestCase.java |   5 ++
 .../bcel/verifier/tests/TestArray01.java      |  57 +++++++++++++++
 .../bcel/verifier/tests/TestReturn02.java     |  65 +++++++++++++++++
 .../bcel/verifier/tests/TestReturn03.class    | Bin 0 -> 385 bytes
 8 files changed, 173 insertions(+), 44 deletions(-)
 create mode 100644 src/test/java/org/apache/bcel/verifier/tests/TestArray01.java
 create mode 100644 src/test/java/org/apache/bcel/verifier/tests/TestReturn02.java
 create mode 100644 src/test/resources/org/apache/bcel/verifier/tests/TestReturn03.class

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 6c6fcf958e..c31ef87093 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -81,6 +81,9 @@ The <action> type attribute can be add,update,fix,remove.
         The verifier should not check for run time compatibility of objects
         assigned to arrays.
       </action>
+      <action issue="BCEL-188" type="fix" dev="markt" due-to="Jérôme Leroux">
+        Correct verification of the return value of a method.
+      </action>
       <action issue="BCEL-186" type="fix" dev="sebb">
         Performance degradation with the UTF8 cache
         getInstance no longer uses cache
diff --git a/src/main/java/org/apache/bcel/generic/ReferenceType.java b/src/main/java/org/apache/bcel/generic/ReferenceType.java
index f145bea026..dfc612b8ed 100644
--- a/src/main/java/org/apache/bcel/generic/ReferenceType.java
+++ b/src/main/java/org/apache/bcel/generic/ReferenceType.java
@@ -57,7 +57,7 @@ protected ReferenceType(byte t, String s) {
      */
     public boolean isCastableTo( Type t ) throws ClassNotFoundException {
         if (this.equals(Type.NULL)) {
-            return true; // If this is ever changed in isAssignmentCompatible()
+            return t instanceof ReferenceType; // If this is ever changed in isAssignmentCompatible()
         }
         return isAssignmentCompatibleWith(t);
         /* Yes, it's true: It's the same definition.
diff --git a/src/main/java/org/apache/bcel/generic/Type.java b/src/main/java/org/apache/bcel/generic/Type.java
index 98565d29ec..b74a5b2684 100644
--- a/src/main/java/org/apache/bcel/generic/Type.java
+++ b/src/main/java/org/apache/bcel/generic/Type.java
@@ -23,8 +23,10 @@
 import org.apache.bcel.Constants;
 import org.apache.bcel.classfile.ClassFormatException;
 import org.apache.bcel.classfile.Utility;
+import org.apache.bcel.verifier.structurals.LocalVariables;
+import org.apache.bcel.verifier.structurals.OperandStack;
 
-/** 
+/**
  * Abstract super class for all possible java types, namely basic types
  * such as int, object types like String and array types, e.g. int[]
  *
@@ -106,6 +108,19 @@ public byte getType() {
         return type;
     }
 
+    /**
+     * boolean, short and char variable are considered as int in the stack or local variable area.
+     * Returns {@link Type#INT} for {@link Type#BOOLEAN}, {@link Type#SHORT} or {@link Type#CHAR}, otherwise
+     * returns the given type.
+     * @see OperandStack#push(Type)
+     * @see LocalVariables#set(int, Type)
+     */
+    public Type normalizeForStackOrLocal(){
+        if (this == Type.BOOLEAN || this == Type.BYTE || this == Type.SHORT || this == Type.CHAR){
+            return Type.INT;
+        }
+        return this;
+    }
 
     /**
      * @return stack size of this type (2 for long and double, 0 for void, 1 otherwise)
diff --git a/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java b/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java
index 4d5e30f22c..6d8940ea2a 100644
--- a/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java
+++ b/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  *
- */ 
+ */
 package org.apache.bcel.verifier.structurals;
 
 
@@ -30,14 +30,12 @@
 import org.apache.bcel.classfile.JavaClass;
 import org.apache.bcel.classfile.Method;
 import org.apache.bcel.generic.ConstantPoolGen;
-import org.apache.bcel.generic.GETFIELD;
 import org.apache.bcel.generic.InstructionHandle;
-import org.apache.bcel.generic.InvokeInstruction;
 import org.apache.bcel.generic.JsrInstruction;
-import org.apache.bcel.generic.LoadInstruction;
 import org.apache.bcel.generic.MethodGen;
 import org.apache.bcel.generic.ObjectType;
 import org.apache.bcel.generic.RET;
+import org.apache.bcel.generic.ReferenceType;
 import org.apache.bcel.generic.ReturnInstruction;
 import org.apache.bcel.generic.ReturnaddressType;
 import org.apache.bcel.generic.Type;
@@ -53,7 +51,7 @@
  * so-called structural verification as described in The Java Virtual Machine
  * Specification, 2nd edition.
  * More detailed information is to be found at the do_verify() method's
- * documentation. 
+ * documentation.
  *
  * @version $Id$
  * @author Enver Haase
@@ -253,55 +251,41 @@ private void circulationPump(MethodGen m,ControlFlowGraph cfg, InstructionContex
                     }
                 }
                 //see JVM $4.8.2
-                //TODO implement all based on stack 
                 Type returnedType = null;
-                InstructionHandle ihPrev = null;
-                ihPrev = ih.getPrev();
-
-                if (ihPrev != null)
-                {
-                    if( ihPrev.getInstruction() instanceof InvokeInstruction )
-                    {
-                        returnedType = ((InvokeInstruction)ihPrev.getInstruction()).getType(m.getConstantPool());
-                    }
-                    if( ihPrev.getInstruction() instanceof LoadInstruction )
-                    {
-                        int index = ((LoadInstruction)ihPrev.getInstruction()).getIndex();
-                        returnedType = lvs.get(index);
-                    }
-                    if( ihPrev.getInstruction() instanceof GETFIELD )
-                    {
-                        returnedType = ((GETFIELD)ihPrev.getInstruction()).getType(m.getConstantPool());
-                    }
+                OperandStack inStack = ic.getInFrame().getStack();
+                if (inStack.size() >= 1) {
+                    returnedType = inStack.peek();
+                } else {
+                    returnedType = Type.VOID;
                 }
 
-                if( returnedType != null )
-                {
-                    if( returnedType instanceof ObjectType )
-                    {
-                        try
-                        {
-                            if( !((ObjectType)returnedType).isAssignmentCompatibleWith(m.getReturnType()) )
-                            {
-                                throw new StructuralCodeConstraintException("Returned type "+returnedType+" does not match Method's return type "+m.getReturnType());
+                if (returnedType != null) {
+                    if (returnedType instanceof ReferenceType) {
+                        try {
+                            if (!((ReferenceType) returnedType).isCastableTo(m.getReturnType())) {
+                                invalidReturnTypeError(returnedType, m);
                             }
-                        }
-                        catch (ClassNotFoundException e)
-                        {
-                            //dont know what do do now, so raise RuntimeException
+                        } catch (ClassNotFoundException e) {
+                            // Don't know what do do now, so raise RuntimeException
                             throw new RuntimeException(e);
                         }
-                    }
-                    else if( !returnedType.equals(m.getReturnType()) )
-                    {
-                        throw new StructuralCodeConstraintException("Returned type "+returnedType+" does not match Method's return type "+m.getReturnType());
+                    } else if (!returnedType.equals(m.getReturnType().normalizeForStackOrLocal())) {
+                        invalidReturnTypeError(returnedType, m);
                     }
                 }
             }
-        }while ((ih = ih.getNext()) != null);
+        } while ((ih = ih.getNext()) != null);
 
      }
 
+    /**
+     * Throws an exception indicating the returned type is not compatible with the return type of the given method
+     * @throws StructuralCodeConstraintException always
+     */
+    public void invalidReturnTypeError(Type returnedType, MethodGen m){
+        throw new StructuralCodeConstraintException("Returned type "+returnedType+" does not match Method's return type "+m.getReturnType());
+    }
+
     /**
      * Pass 3b implements the data flow analysis as described in the Java Virtual
      * Machine Specification, Second Edition.
diff --git a/src/test/java/org/apache/bcel/verifier/VerifierReturnTestCase.java b/src/test/java/org/apache/bcel/verifier/VerifierReturnTestCase.java
index 190c03ed54..6ffe402b99 100644
--- a/src/test/java/org/apache/bcel/verifier/VerifierReturnTestCase.java
+++ b/src/test/java/org/apache/bcel/verifier/VerifierReturnTestCase.java
@@ -21,6 +21,11 @@ public class VerifierReturnTestCase extends AbstractVerifierTestCase {
 
     public void testInvalidReturn() {
         assertVerifyRejected("TestReturn01", "Verification of a void method that returns an object must fail.");
+        assertVerifyRejected("TestReturn03", "Verification of an int method that returns null must fail.");
     }
 
+    public void testValidReturn() {
+        assertVerifyOK("TestReturn02", "Verification of a method that returns a newly created object must pass.");
+        assertVerifyOK("TestArray01", "Verification of a method that returns an array must pass.");
+    }
 }
diff --git a/src/test/java/org/apache/bcel/verifier/tests/TestArray01.java b/src/test/java/org/apache/bcel/verifier/tests/TestArray01.java
new file mode 100644
index 0000000000..3ae5af7dd4
--- /dev/null
+++ b/src/test/java/org/apache/bcel/verifier/tests/TestArray01.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.bcel.verifier.tests;
+
+import java.io.Serializable;
+
+public class TestArray01{
+
+    public static Object test1(){
+        String[] a = new String[4];
+        a[0] = "";
+        a.equals(null);
+        test2(a);
+        test3(a);
+        test4(a);
+        return a;
+    }
+
+    @SuppressWarnings("unused")
+    public static void test2(Object o){
+    }
+
+    @SuppressWarnings("unused")
+    public static void test3(Serializable o){
+    }
+
+    @SuppressWarnings("unused")
+    public static void test4(Cloneable o){
+    }
+
+    public static Serializable test5(){
+        return new Object[1];
+    }
+
+    public static Cloneable test6(){
+        return new Object[1];
+    }
+
+    public static Object foo(String s){
+        return s;
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/org/apache/bcel/verifier/tests/TestReturn02.java b/src/test/java/org/apache/bcel/verifier/tests/TestReturn02.java
new file mode 100644
index 0000000000..26b6419aff
--- /dev/null
+++ b/src/test/java/org/apache/bcel/verifier/tests/TestReturn02.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ */
+package org.apache.bcel.verifier.tests;
+
+public class TestReturn02 {
+
+    public static String test1(char[] data, int offset, int count) {
+        return new String(data, offset, count);
+    }
+    
+    public static Object test2(){
+        return new Object();
+    }
+    
+    public static boolean test3(){
+        return true;
+    }
+    
+    public static byte test4(){
+        return 1;
+    }
+    
+    public static short test5(){
+        return 1;
+    }
+    
+    public static char test6(){
+        return 'a';
+    }
+    
+    public static int test7(){
+        return 1;
+    }
+    
+    public static long test8(){
+        return 1l;
+    }
+    
+    public static float test9(){
+        return 1.0f;
+    }
+    
+    public static double test10(){
+        return 1.0;
+    }
+    
+    public static Object test11(){
+        return null;
+    }
+}
diff --git a/src/test/resources/org/apache/bcel/verifier/tests/TestReturn03.class b/src/test/resources/org/apache/bcel/verifier/tests/TestReturn03.class
new file mode 100644
index 0000000000000000000000000000000000000000..1d1cb9177ec374ebe534f12a4897b43bba9927f7
GIT binary patch
literal 385
zcmb7AO-sW-5Pg#-jg8gXB6!x5ALt4>DqaLZ2nt$y-^8)q5);{O`n&8&@Zb;dM~Smh
z(5sg>`{vEtdAlE<Z|?w7jA8_YquNfDe%8f|RbFtZmTb+VVXGW3+(L~7@7OiAI!$AQ
zgsr(=YE|lLs&4Z+7mm<9H<fW0gwFoKgb-fV51gQbULO&<gh6I1zG<Fvwqu=_Oc-T#
zq05Q3#`B+M=w@a?IL`hN>5LHhplQ4OnvmSrjV<`f_%*}7=}&xc>_R5x{Xifmi6<Bf
zQ&LH4boh$3RVycgUIw<YF4+Gbkh&qPhfNHm<IQ`mB3IIjumHc#oz@vhSAMS5hF_%S
BPW=D?

literal 0
HcmV?d00001

