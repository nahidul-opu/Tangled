From e4cf53407515ba8086f57de1568a24dbb544d701 Mon Sep 17 00:00:00 2001
From: Rodrigo Agerri <ragerri@apache.org>
Date: Mon, 27 Oct 2014 18:13:06 +0000
Subject: [PATCH] OPENNLP-725 now the serializer is chosen from dict attribute
 and element tag

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1634634 13f79535-47bb-0310-9956-ffa450edef68
---
 .../namefind/TokenNameFinderTrainerTool.java  | 45 ++++++++++---------
 .../tools/namefind/TokenNameFinderModel.java  |  2 +-
 .../util/featuregen/GeneratorFactory.java     | 26 +++++++++++
 3 files changed, 50 insertions(+), 23 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
index 362642219..5b8c8aa9e 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
@@ -20,7 +20,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 import opennlp.tools.cmdline.AbstractTrainerTool;
@@ -34,13 +36,14 @@
 import opennlp.tools.namefind.NameSampleTypeFilter;
 import opennlp.tools.namefind.TokenNameFinderFactory;
 import opennlp.tools.namefind.TokenNameFinderModel;
-import opennlp.tools.postag.POSTaggerFactory;
 import opennlp.tools.util.InvalidFormatException;
 import opennlp.tools.util.SequenceCodec;
 import opennlp.tools.util.featuregen.GeneratorFactory;
 import opennlp.tools.util.model.ArtifactSerializer;
 import opennlp.tools.util.model.ModelUtil;
 
+import org.w3c.dom.Element;
+
 public final class TokenNameFinderTrainerTool
     extends AbstractTrainerTool<NameSample, TrainerToolParams> {
 
@@ -92,6 +95,8 @@ public static Map<String, Object> loadResources(File resourcePath, File featureG
 
       Map<String, ArtifactSerializer> artifactSerializers = TokenNameFinderModel
           .createArtifactSerializers();
+      List<Element> elements = new ArrayList<Element>();
+      ArtifactSerializer serializer = null;
 
 
       // TODO: If there is descriptor file, it should be consulted too
@@ -105,38 +110,34 @@ public static Map<String, Object> loadResources(File resourcePath, File featureG
           // TODO: Improve error handling!
           e.printStackTrace();
         }
+        InputStream inputStreamXML = CmdLineUtil.openInFile(featureGenDescriptor);
+        try {
+          elements = GeneratorFactory.getDescriptorElements(inputStreamXML);
+        } catch (IOException e) {
+          e.printStackTrace();
+        }
       }
 
       File resourceFiles[] = resourcePath.listFiles();
-
-      // TODO: Filter files, also files with start with a dot
+      
       for (File resourceFile : resourceFiles) {
-
-        // TODO: Move extension extracting code to method and
-        // write unit test for it
-
-        // extract file ending
         String resourceName = resourceFile.getName();
-
-        int lastDot = resourceName.lastIndexOf('.');
-
-        if (lastDot == -1) {
-          continue;
+        //gettting the serializer key from the element tag name
+        //if the element contains a dict attribute
+        for (Element xmlElement : elements) {
+          String dictName = xmlElement.getAttribute("dict");
+          if (dictName != null && dictName.equals(resourceName)) {
+            serializer = artifactSerializers.get(xmlElement.getTagName());
+          }
         }
-
-        String ending = resourceName.substring(lastDot + 1);
-
-        // lookup serializer from map
-        ArtifactSerializer serializer = artifactSerializers.get(ending);
-
         // TODO: Do different? For now just ignore ....
         if (serializer == null)
           continue;
 
-        InputStream resoruceIn = CmdLineUtil.openInFile(resourceFile);
+        InputStream resourceIn = CmdLineUtil.openInFile(resourceFile);
 
         try {
-          resources.put(resourceName, serializer.create(resoruceIn));
+          resources.put(resourceName, serializer.create(resourceIn));
         } catch (InvalidFormatException e) {
           // TODO: Fix exception handling
           e.printStackTrace();
@@ -145,7 +146,7 @@ public static Map<String, Object> loadResources(File resourcePath, File featureG
           e.printStackTrace();
         } finally {
           try {
-            resoruceIn.close();
+            resourceIn.close();
           } catch (IOException e) {
           }
         }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
index b63bb942d..ca64046ea 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
@@ -263,7 +263,7 @@ public static Map<String, ArtifactSerializer> createArtifactSerializers()  {
     Map<String, ArtifactSerializer> serializers = BaseModel.createArtifactSerializers();
 
     serializers.put("featuregen", new ByteArraySerializer());
-    serializers.put("w2vclasses", new W2VClassesDictionary.W2VClassesDictionarySerializer());
+    serializers.put("w2vwordcluster", new W2VClassesDictionary.W2VClassesDictionarySerializer());
 
     return serializers;
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java b/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
index 5d69fc9ed..66b5b072e 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
@@ -19,10 +19,12 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
 
 import javax.xml.namespace.QName;
@@ -667,4 +669,28 @@ public static Map<String, ArtifactSerializer<?>> extractCustomArtifactSerializer
     }
     return mapping;
   }
+  
+  public static List<Element> getDescriptorElements(
+      InputStream xmlDescriptorIn)
+      throws IOException, InvalidFormatException {
+    
+    List<Element> elements = new ArrayList<Element>();
+    org.w3c.dom.Document xmlDescriptorDOM = createDOM(xmlDescriptorIn);
+    XPath xPath = XPathFactory.newInstance().newXPath();
+    NodeList allElements;
+    try {
+      XPathExpression exp = xPath.compile("//*");
+      allElements = (NodeList) exp.evaluate(xmlDescriptorDOM.getDocumentElement(), XPathConstants.NODESET);
+    } catch (XPathExpressionException e) {
+      throw new IllegalStateException("The hard coded XPath expression should always be valid!");
+    }
+
+    for (int i = 0; i < allElements.getLength(); i++) {
+      if (allElements.item(i) instanceof Element) {
+        Element customElement = (Element) allElements.item(i);
+        elements.add(customElement);
+        }
+      }
+    return elements;
+  }
 }
