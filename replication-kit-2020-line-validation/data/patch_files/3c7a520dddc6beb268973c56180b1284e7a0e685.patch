From 3c7a520dddc6beb268973c56180b1284e7a0e685 Mon Sep 17 00:00:00 2001
From: Joerg Schaible <joehni@apache.org>
Date: Mon, 25 Feb 2013 14:15:36 +0000
Subject: [PATCH] StaticUserAuthenticator should return only requested
 authentication data (VFS-464).

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1449714 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/auth/StaticUserAuthenticator.java    | 31 ++++++++++-
 .../auth/StaticUserAuthenticatorTestCase.java | 55 +++++++++++++++++++
 src/changes/changes.xml                       |  3 +
 3 files changed, 86 insertions(+), 3 deletions(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs2/auth/StaticUserAuthenticatorTestCase.java

diff --git a/core/src/main/java/org/apache/commons/vfs2/auth/StaticUserAuthenticator.java b/core/src/main/java/org/apache/commons/vfs2/auth/StaticUserAuthenticator.java
index 103618758d..b6230f6d01 100644
--- a/core/src/main/java/org/apache/commons/vfs2/auth/StaticUserAuthenticator.java
+++ b/core/src/main/java/org/apache/commons/vfs2/auth/StaticUserAuthenticator.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.vfs2.auth;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.commons.vfs2.UserAuthenticationData;
 import org.apache.commons.vfs2.UserAuthenticator;
 import org.apache.commons.vfs2.util.UserAuthenticatorUtils;
@@ -25,6 +27,8 @@
  */
 public class StaticUserAuthenticator implements UserAuthenticator, Comparable<StaticUserAuthenticator>
 {
+	private final static Log LOG = LogFactory.getLog(StaticUserAuthenticator.class);
+	
     /** The user name */
     private final String username;
 
@@ -45,9 +49,30 @@ public StaticUserAuthenticator(final String domain, final String username, final
     public UserAuthenticationData requestAuthentication(final UserAuthenticationData.Type[] types)
     {
         final UserAuthenticationData data = new UserAuthenticationData();
-        data.setData(UserAuthenticationData.DOMAIN, UserAuthenticatorUtils.toChar(domain));
-        data.setData(UserAuthenticationData.USERNAME, UserAuthenticatorUtils.toChar(username));
-        data.setData(UserAuthenticationData.PASSWORD, UserAuthenticatorUtils.toChar(password));
+        for(final UserAuthenticationData.Type type : types)
+        {
+        	if (type == UserAuthenticationData.DOMAIN)
+        	{
+                data.setData(UserAuthenticationData.DOMAIN, UserAuthenticatorUtils.toChar(domain));
+        	}
+        	else if (type == UserAuthenticationData.USERNAME)
+        	{
+                data.setData(UserAuthenticationData.USERNAME, UserAuthenticatorUtils.toChar(username));
+        	}
+        	else if (type == UserAuthenticationData.PASSWORD)
+        	{
+                data.setData(UserAuthenticationData.PASSWORD, UserAuthenticatorUtils.toChar(password));
+        	}
+        	else
+        	{
+        		if (LOG.isInfoEnabled())
+        		{
+                    LOG.info(StaticUserAuthenticator.class.getSimpleName()
+                    	+ " does not support authentication data type '" + type 
+                    	+ "'; authentication request ignored.");
+        		}
+        	}
+        }
         return data;
     }
 
diff --git a/core/src/test/java/org/apache/commons/vfs2/auth/StaticUserAuthenticatorTestCase.java b/core/src/test/java/org/apache/commons/vfs2/auth/StaticUserAuthenticatorTestCase.java
new file mode 100644
index 0000000000..a649a6fbae
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs2/auth/StaticUserAuthenticatorTestCase.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2.auth;
+
+import static org.junit.Assert.*;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.vfs2.UserAuthenticationData;
+import org.apache.commons.vfs2.UserAuthenticator;
+
+import org.junit.Test;
+
+public class StaticUserAuthenticatorTestCase
+{
+	@Test
+	public void testAuthenticationRequest()
+	{
+		final UserAuthenticator userAuthenticator = new StaticUserAuthenticator("DOMAIN", "USER", "PWD");
+		UserAuthenticationData authenticationData =
+			userAuthenticator.requestAuthentication(ArrayUtils.toArray(UserAuthenticationData.DOMAIN));
+		assertArrayEquals("DOMAIN".toCharArray(), authenticationData.getData(UserAuthenticationData.DOMAIN));
+		assertNull(authenticationData.getData(UserAuthenticationData.USERNAME));
+		assertNull(authenticationData.getData(UserAuthenticationData.PASSWORD));
+		authenticationData = userAuthenticator.requestAuthentication(
+			ArrayUtils.toArray(UserAuthenticationData.USERNAME, UserAuthenticationData.PASSWORD));
+		assertNull(authenticationData.getData(UserAuthenticationData.DOMAIN));
+		assertArrayEquals("USER".toCharArray(), authenticationData.getData(UserAuthenticationData.USERNAME));
+		assertArrayEquals("PWD".toCharArray(), authenticationData.getData(UserAuthenticationData.PASSWORD));
+	}
+	
+	@Test
+	public void testEquality()
+	{
+		final UserAuthenticator userAuthenticator = new StaticUserAuthenticator("DOMAIN", "USER", "PWD");
+		assertEquals(new StaticUserAuthenticator("DOMAIN", "USER", "PWD"), userAuthenticator);
+		assertNotEquals(new StaticUserAuthenticator("DOMAIN", "USER", null), userAuthenticator);
+		assertNotEquals(new StaticUserAuthenticator("DOMAIN", null, "PWD"), userAuthenticator);
+		assertNotEquals(new StaticUserAuthenticator(null, "USER", "PWD"), userAuthenticator);
+		assertEquals(new StaticUserAuthenticator("DOMAIN", "USER", "PWD").hashCode(), userAuthenticator.hashCode());
+	}
+}
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 340bd79bfe..f920cbb415 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -26,6 +26,9 @@
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
 <!--     	[Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-464" dev="joehni" type="fix">
+        StaticUserAuthenticator should return only requested authentication data.
+      </action>
       <action issue="VFS-463" dev="joehni" type="update">
         FileSytemConfigBuilder supports system properties for the value of enum-based configuration entries.
       </action>
