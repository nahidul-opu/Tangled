From ed6fa69f870c7ba9180a31c64df1becff2d81e81 Mon Sep 17 00:00:00 2001
From: Avery Ching <aching@apache.org>
Date: Sun, 18 Dec 2011 16:58:59 +0000
Subject: [PATCH] GIRAPH-105: BspServiceMaster.checkWorkers() should return
 empty lists instead of null. (ssc via aching)

git-svn-id: https://svn.apache.org/repos/asf/incubator/giraph/trunk@1220454 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG                                                  | 3 +++
 .../java/org/apache/giraph/graph/BspServiceMaster.java     | 7 ++++---
 2 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index d642c9b18..935e63865 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -2,6 +2,9 @@ Giraph Change Log
 
 Release 0.70.0 - unreleased
 
+  GIRAPH-105: BspServiceMaster.checkWorkers() should return empty
+  lists instead of null. (ssc via aching)
+
   GIRAPH-80: Don't expose the list holding the messages in
   BasicVertex. (ssc via aching)
 
diff --git a/src/main/java/org/apache/giraph/graph/BspServiceMaster.java b/src/main/java/org/apache/giraph/graph/BspServiceMaster.java
index 941b9175d..c580bf34e 100644
--- a/src/main/java/org/apache/giraph/graph/BspServiceMaster.java
+++ b/src/main/java/org/apache/giraph/graph/BspServiceMaster.java
@@ -366,7 +366,8 @@ private void getAllWorkerInfos(
      * Check all the {@link WorkerInfo} objects to ensure that a minimum
      * number of good workers exists out of the total that have reported.
      *
-     * @return List of of healthy workers
+     * @return List of of healthy workers such that the minimum has been
+     *         met, otherwise null
      */
     private List<WorkerInfo> checkWorkers() {
         boolean failJob = true;
@@ -484,7 +485,7 @@ public int createInputSplits() {
         // When creating znodes, in case the master has already run, resume
         // where it left off.
         List<WorkerInfo> healthyWorkerInfoList = checkWorkers();
-        if (healthyWorkerInfoList.isEmpty()) {
+        if (healthyWorkerInfoList == null) {
             setJobState(ApplicationState.FAILED, -1, -1);
             return -1;
         }
@@ -1386,7 +1387,7 @@ public SuperstepState coordinateSuperstep() throws
         // 5. Create superstep finished node
         // 6. If the checkpoint frequency is met, finalize the checkpoint
         List<WorkerInfo> chosenWorkerInfoList = checkWorkers();
-        if (chosenWorkerInfoList.isEmpty()) {
+        if (chosenWorkerInfoList == null) {
             LOG.fatal("coordinateSuperstep: Not enough healthy workers for " +
                       "superstep " + getSuperstep());
             setJobState(ApplicationState.FAILED, -1, -1);
