From 6f1d24654cf889d068f119b5b0cbcb9a8b8736f9 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Wed, 4 Feb 2015 13:42:53 +0000
Subject: [PATCH] Made sure BasicDataSource createDataSource fully initializes
 instance. JIRA: DBCP-432.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1657221 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  6 ++-
 .../apache/commons/dbcp2/BasicDataSource.java |  6 ++-
 .../commons/dbcp2/TestBasicDataSource.java    | 51 +++++++++++++++++++
 3 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a766691681..35662072cd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -98,7 +98,11 @@ The <action> type attribute can be add,update,fix,remove.
         Added fastFailValidation property to PooloableConnection, configurable in
         BasicDataSource.  When set to true, connections that have previously thrown
         fatal disconnection errors will fail validation immediately (no driver calls).
-      </action>  
+      </action>
+      <action issue="DBCP-432" dev="psteitz" type="fix">
+        Changed BasicDataSource createDataSource method to ensure that initialization
+        completes before clients get reference to newly created instances.
+      </action> 
     </release>
     <release version="2.0.1" date="24 May 2014" description="This is a bug fix release.">
       <action dev="markt" type="fix">
diff --git a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
index fa3ccc9e75..0814734c8c 100644
--- a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
@@ -2080,10 +2080,11 @@ protected DataSource createDataSource()
             }
 
             // Create the pooling data source to manage connections
+            DataSource newDataSource; 
             success = false;
             try {
-                dataSource = createDataSourceInstance();
-                dataSource.setLogWriter(logWriter);
+                newDataSource = createDataSourceInstance();
+                newDataSource.setLogWriter(logWriter);
                 success = true;
             } catch (SQLException se) {
                 throw se;
@@ -2110,6 +2111,7 @@ protected DataSource createDataSource()
             // If timeBetweenEvictionRunsMillis > 0, start the pool's evictor task
             startPoolMaintenance();
 
+            dataSource = newDataSource;
             return dataSource;
         }
     }
diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
index 316ef1efa8..58fe6127d8 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
@@ -682,6 +682,32 @@ public void testMaxConnLifetimeExceededMutedLog() throws Exception {
             StackMessageLog.unLock();
         }
     }
+    
+    @Test
+    public void testConcurrentInitBorrow() throws Exception {
+        ds.setDriverClassName("org.apache.commons.dbcp2.TesterConnectionDelayDriver");
+        ds.setUrl("jdbc:apache:commons:testerConnectionDelayDriver:50");
+        ds.setInitialSize(8);
+        
+        // Launch a request to trigger pool initialization
+        TestThread testThread = new TestThread(1,0);
+        Thread t = new Thread(testThread);
+        t.start();
+        
+        // Get another connection (should wait for pool init)
+        Thread.sleep(100); // Make sure t gets into init first
+        ds.getConnection();
+        
+        // Pool should have at least 6 idle connections now
+        // Use underlying pool getNumIdle to avoid waiting for ds lock
+        assertTrue(ds.getConnectionPool().getNumIdle() > 5);
+        
+        // Make sure t completes successfully
+        t.join();
+        assertFalse(testThread.failed());
+        
+        ds.close();
+    }
 }
 
 /**
@@ -710,3 +736,28 @@ public static void initConnRequestCount() {
         connectionRequestCount.set(0);
     }
 }
+
+/**
+ * TesterDriver that adds latency to connection requests. Latency (in ms) is the
+ * last component of the URL.
+ */
+class TesterConnectionDelayDriver extends TesterDriver {
+    private static final String CONNECT_STRING = "jdbc:apache:commons:testerConnectionDelayDriver";
+
+    @Override
+    public Connection connect(String url, Properties info) throws SQLException {
+        String[] parsedUrl = url.split(":");
+        int delay = Integer.parseInt(parsedUrl[parsedUrl.length - 1]);
+        try {
+            Thread.sleep(delay);
+        } catch(InterruptedException ex) {
+            Thread.currentThread().interrupt();
+        }
+        return super.connect(url, info);
+    }
+
+    @Override
+    public boolean acceptsURL(String url) throws SQLException {
+        return url.startsWith(CONNECT_STRING);
+    }
+}
