From c4560eabcd60cd0f0e211978036519db748360fa Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sun, 23 Aug 2015 16:52:06 +0000
Subject: [PATCH] BCEL-253 Pass 3b verifier is too strict.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1697224 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  1 +
 .../structurals/ControlFlowGraph.java         | 15 ++++++-
 .../verifier/structurals/Subroutines.java     | 39 ++++++++++++-------
 3 files changed, 40 insertions(+), 15 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b780deeb65..2fbef4cb19 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -63,6 +63,7 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="6.0" date="TBA" description="Major release with Java 7 and 8 support">
+      <action issue="BCEL-253" type="fix">Pass 3b verifier is too strict.</action>
       <action issue="BCEL-248" type="fix">StackMapTable[Entry] should be removed and improvements merged into StackMap[Entry]</action>
       <action issue="BCEL-202" type="fix">StackMap[Table]Entry.copy() needs to be deep; Improved support for StackMaps</action>
       <action issue="BCEL-251" type="fix">Pass3aVerifier visitANEWARRAY() does not allow 255 array dimensions</action>
diff --git a/src/main/java/org/apache/commons/bcel6/verifier/structurals/ControlFlowGraph.java b/src/main/java/org/apache/commons/bcel6/verifier/structurals/ControlFlowGraph.java
index 0cd3d7f061..659c7c5908 100644
--- a/src/main/java/org/apache/commons/bcel6/verifier/structurals/ControlFlowGraph.java
+++ b/src/main/java/org/apache/commons/bcel6/verifier/structurals/ControlFlowGraph.java
@@ -409,10 +409,21 @@ private InstructionHandle[] _getSuccessors(){
     private final Map<InstructionHandle, InstructionContext> instructionContexts = new HashMap<>();
 
     /** 
-     * A Control Flow Graph.
+     * A Control Flow Graph; with additional JustIce checks
+     * @param  method_gen the method generator instance
      */
     public ControlFlowGraph(MethodGen method_gen){
-        subroutines = new Subroutines(method_gen);
+        this(method_gen, true);
+    }
+
+    /** 
+     * A Control Flow Graph.
+     * @param  method_gen the method generator instance
+     * @param enableJustIceCheck if true, additional JustIce checks are performed
+     * @since 6.0
+     */
+    public ControlFlowGraph(MethodGen method_gen, boolean enableJustIceCheck){
+        subroutines = new Subroutines(method_gen, enableJustIceCheck);
         exceptionhandlers = new ExceptionHandlers(method_gen);
 
         InstructionHandle[] instructionhandles = method_gen.getInstructionList().getInstructionHandles();
diff --git a/src/main/java/org/apache/commons/bcel6/verifier/structurals/Subroutines.java b/src/main/java/org/apache/commons/bcel6/verifier/structurals/Subroutines.java
index f57ce0c52b..272d90f3aa 100644
--- a/src/main/java/org/apache/commons/bcel6/verifier/structurals/Subroutines.java
+++ b/src/main/java/org/apache/commons/bcel6/verifier/structurals/Subroutines.java
@@ -377,9 +377,20 @@ private enum ColourConstants{
      * Constructor.
      * @param mg A MethodGen object representing method to
      * create the Subroutine objects of.
+     * Assumes that JustIce strict checks are needed.
      */
     public Subroutines(MethodGen mg){
+        this(mg, true);
+    }
 
+    /**
+     * Constructor.
+     * @param mg A MethodGen object representing method to
+     * create the Subroutine objects of.
+     * @param enableJustIceCheck whether to enable additional JustIce checks
+     * @since 6.0
+     */
+    public Subroutines(MethodGen mg, boolean enableJustIceCheck){
         InstructionHandle[] all = mg.getInstructionList().getInstructionHandles();
         CodeExceptionGen[] handlers = mg.getExceptionHandlers();
 
@@ -482,22 +493,24 @@ public Subroutines(MethodGen mg){
             }
         }
 
-        // Now make sure no instruction of a Subroutine is protected by exception handling code
-        // as is mandated by JustIces notion of subroutines.
-        for (CodeExceptionGen handler : handlers) {
-            InstructionHandle _protected = handler.getStartPC();
-            while (_protected != handler.getEndPC().getNext()){
-                // Note the inclusive/inclusive notation of "generic API" exception handlers!
-                for (Subroutine sub : subroutines.values()) {
-                    if (sub != subroutines.get(all[0])){    // We don't want to forbid top-level exception handlers.
-                        if (sub.contains(_protected)){
-                            throw new StructuralCodeConstraintException("Subroutine instruction '"+_protected+
-                                "' is protected by an exception handler, '"+handler+
-                                "'. This is forbidden by the JustIce verifier due to its clear definition of subroutines.");
+        if (enableJustIceCheck) {
+            // Now make sure no instruction of a Subroutine is protected by exception handling code
+            // as is mandated by JustIces notion of subroutines.
+            for (CodeExceptionGen handler : handlers) {
+                InstructionHandle _protected = handler.getStartPC();
+                while (_protected != handler.getEndPC().getNext()){
+                    // Note the inclusive/inclusive notation of "generic API" exception handlers!
+                    for (Subroutine sub : subroutines.values()) {
+                        if (sub != subroutines.get(all[0])){    // We don't want to forbid top-level exception handlers.
+                            if (sub.contains(_protected)){
+                                throw new StructuralCodeConstraintException("Subroutine instruction '"+_protected+
+                                    "' is protected by an exception handler, '"+handler+
+                                    "'. This is forbidden by the JustIce verifier due to its clear definition of subroutines.");
+                            }
                         }
                     }
+                    _protected = _protected.getNext();
                 }
-                _protected = _protected.getNext();
             }
         }
 
