From b1249fa0c50a9dcfde2ed296b5d478b0cce614cf Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Tue, 26 Aug 2008 11:13:23 +0000
Subject: [PATCH] FIX: Failure to transitively install Maven2 artifacts with
 namespace (IVY-440)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@689034 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../apache/ivy/core/search/SearchEngine.java  | 30 +++++++++--
 .../plugins/resolver/DependencyResolver.java  | 12 +++++
 .../org/apache/ivy/ant/AntTestHelper.java     | 34 ++++++++++++
 .../org/apache/ivy/ant/IvyInstallTest.java    | 52 ++++++++++++++++++-
 test/repositories/namespace/ivysettings.xml   |  6 ++-
 6 files changed, 128 insertions(+), 7 deletions(-)
 create mode 100644 test/java/org/apache/ivy/ant/AntTestHelper.java

diff --git a/CHANGES.txt b/CHANGES.txt
index 474b34c86..9c4bf6efa 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -108,6 +108,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Add a memory cache for the module descriptor that are parsed from the cache (IVY-883)
 - IMPROVEMENT: Improve performance (IVY-872)
 
+- FIX: Failure to transitively install Maven2 artifacts with namespace (IVY-440)
 - FIX: Unwanted eviction of dependencies when optional attributes in dependency and info tags are in consistent (IVY-745)
 - FIX: HTTP Handlers ignore unsuccessful response codes (IVY-864) (thanks to James P. White)
 - FIX: Deliver delivers the wrong version when a dynamic revision is evicted before being resolved (IVY-707)
diff --git a/src/java/org/apache/ivy/core/search/SearchEngine.java b/src/java/org/apache/ivy/core/search/SearchEngine.java
index b5cc1fc58..5610ea6d5 100644
--- a/src/java/org/apache/ivy/core/search/SearchEngine.java
+++ b/src/java/org/apache/ivy/core/search/SearchEngine.java
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -178,6 +179,9 @@ public String[] listRevisions(String org, String module) {
     /**
      * List module ids of the module accessible through the current resolvers matching the given mid
      * criteria according to the given matcher.
+     * <p>
+     * ModuleId are returned in the system namespace.
+     * </p>
      * 
      * @param criteria
      * @param matcher
@@ -201,7 +205,8 @@ public ModuleId[] listModules(ModuleId moduleCrit, PatternMatcher matcher) {
                 String org = (String) moduleIdAsMap[i].get(IvyPatternHelper.ORGANISATION_KEY);
                 String name = (String) moduleIdAsMap[i].get(IvyPatternHelper.MODULE_KEY);
                 ModuleId modId = ModuleId.newInstance(org, name);
-                ret.add(modId);
+                ret.add(NameSpaceHelper.transform(
+                    modId, resolver.getNamespace().getToSystemTransformer()));
             }
         }
 
@@ -211,6 +216,9 @@ public ModuleId[] listModules(ModuleId moduleCrit, PatternMatcher matcher) {
     /**
      * List module revision ids of the module accessible through the current resolvers matching the
      * given mrid criteria according to the given matcher.
+     * <p>
+     * ModuleRevisionId are returned in the system namespace.
+     * </p>
      * 
      * @param criteria
      * @param matcher
@@ -239,13 +247,24 @@ public ModuleRevisionId[] listModules(ModuleRevisionId moduleCrit, PatternMatche
                 String branch = (String) moduleIdAsMap[i].get(IvyPatternHelper.BRANCH_KEY);
                 String rev = (String) moduleIdAsMap[i].get(IvyPatternHelper.REVISION_KEY);
                 ModuleRevisionId modRevId = ModuleRevisionId.newInstance(org, name, branch, rev);
-                ret.add(modRevId);
+                ret.add(resolver.getNamespace().getToSystemTransformer().transform(modRevId));
             }
         }
 
         return (ModuleRevisionId[]) ret.toArray(new ModuleRevisionId[ret.size()]);
     }
 
+    /**
+     * List modules matching a given criteria, available in the given dependency resolver.
+     * <p>
+     * ModuleRevisionId are returned in the system namespace.
+     * </p>
+     *  
+     * @param resolver the resolver in which modules should looked up
+     * @param moduleCrit the criteria to match
+     * @param matcher the matcher to use to match criteria
+     * @return an array of matching module revision ids
+     */
     public ModuleRevisionId[] listModules(
             DependencyResolver resolver, ModuleRevisionId moduleCrit, PatternMatcher matcher) {
         Map criteria = new HashMap();
@@ -260,16 +279,17 @@ public ModuleRevisionId[] listModules(
                 IvyPatternHelper.BRANCH_KEY, IvyPatternHelper.REVISION_KEY};
 
         Map[] moduleIdAsMap = resolver.listTokenValues(tokensToList, criteria);
-        ModuleRevisionId[] result = new ModuleRevisionId[moduleIdAsMap.length];
+        Set result = new LinkedHashSet(); // we use a Set to remove duplicates
         for (int i = 0; i < moduleIdAsMap.length; i++) {
             String org = (String) moduleIdAsMap[i].get(IvyPatternHelper.ORGANISATION_KEY);
             String name = (String) moduleIdAsMap[i].get(IvyPatternHelper.MODULE_KEY);
             String branch = (String) moduleIdAsMap[i].get(IvyPatternHelper.BRANCH_KEY);
             String rev = (String) moduleIdAsMap[i].get(IvyPatternHelper.REVISION_KEY);
-            result[i] = ModuleRevisionId.newInstance(org, name, branch, rev);
+            result.add(resolver.getNamespace().getToSystemTransformer().transform(
+                ModuleRevisionId.newInstance(org, name, branch, rev)));
         }
         
-        return result;
+        return (ModuleRevisionId[]) result.toArray(new ModuleRevisionId[result.size()]);
     }
     
     private void addMatcher(
diff --git a/src/java/org/apache/ivy/plugins/resolver/DependencyResolver.java b/src/java/org/apache/ivy/plugins/resolver/DependencyResolver.java
index ab727c490..9fbc4e285 100644
--- a/src/java/org/apache/ivy/plugins/resolver/DependencyResolver.java
+++ b/src/java/org/apache/ivy/plugins/resolver/DependencyResolver.java
@@ -33,6 +33,7 @@
 import org.apache.ivy.core.search.ModuleEntry;
 import org.apache.ivy.core.search.OrganisationEntry;
 import org.apache.ivy.core.search.RevisionEntry;
+import org.apache.ivy.plugins.namespace.Namespace;
 import org.apache.ivy.plugins.resolver.util.ResolvedResource;
 
 /**
@@ -120,6 +121,11 @@ ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data)
      * otherTokenValues map. For instance, if token = "revision" and the map contains
      * "organisation"->"foo" "module"->"bar" The results will be the list of revisions of the module
      * bar from the org foo.
+     * <p>
+     * Note that listing does not take into account namespaces, and return raw 
+     * information without any namespace transformation. The caller is responsible for calling 
+     * namespace transformation with the Namespace returned by {@link #getNamespace()}.
+     * </p>
      */
     String[] listTokenValues(String token, Map otherTokenValues);
     
@@ -131,6 +137,12 @@ ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data)
 
     RevisionEntry[] listRevisions(ModuleEntry module);
     
+    /**
+     * Returns the namespace associated with this resolver.
+     * @return the namespace associated with this resolver.
+     */
+    Namespace getNamespace();
+    
     void dumpSettings();
     
     void setSettings(ResolverSettings settings);
diff --git a/test/java/org/apache/ivy/ant/AntTestHelper.java b/test/java/org/apache/ivy/ant/AntTestHelper.java
new file mode 100644
index 000000000..a0fa7248a
--- /dev/null
+++ b/test/java/org/apache/ivy/ant/AntTestHelper.java
@@ -0,0 +1,34 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package org.apache.ivy.ant;
+
+import org.apache.tools.ant.DefaultLogger;
+import org.apache.tools.ant.Project;
+
+public class AntTestHelper {
+    // this is probably already available in some Ant class or helper... 
+    public static Project newProject() {
+        Project project = new Project();
+        DefaultLogger logger = new DefaultLogger();
+        logger.setMessageOutputLevel(Project.MSG_INFO);
+        logger.setOutputPrintStream(System.out);
+        logger.setErrorPrintStream(System.out);
+        project.addBuildListener(logger);
+        return project;
+    }
+}
diff --git a/test/java/org/apache/ivy/ant/IvyInstallTest.java b/test/java/org/apache/ivy/ant/IvyInstallTest.java
index b6717eb22..171e81742 100644
--- a/test/java/org/apache/ivy/ant/IvyInstallTest.java
+++ b/test/java/org/apache/ivy/ant/IvyInstallTest.java
@@ -23,6 +23,7 @@
 
 import org.apache.ivy.util.FileUtil;
 import org.apache.tools.ant.BuildException;
+import org.apache.tools.ant.DefaultLogger;
 import org.apache.tools.ant.Project;
 
 public class IvyInstallTest extends TestCase {
@@ -35,7 +36,9 @@ public class IvyInstallTest extends TestCase {
     protected void setUp() throws Exception {
         createCache();
         cleanInstall();
-        project = new Project();
+        
+        project = AntTestHelper.newProject();
+        
         project.setProperty("ivy.settings.file", "test/repositories/ivysettings.xml");
 
         install = new IvyInstall();
@@ -115,6 +118,53 @@ public void testInstallWithBranch() {
         assertTrue(new File("build/test/install/foo/foo1/branch1/ivy-2.xml").exists());
     }
 
+    public void testInstallWithNamespace() {
+        project.setProperty("ivy.settings.file", "test/repositories/namespace/ivysettings.xml");
+        install.setOrganisation("systemorg");
+        install.setModule("systemmod2");
+        install.setRevision("1.0");
+        install.setTransitive(true);
+        install.setFrom("ns");
+        install.setTo("install");
+
+        install.execute();
+
+        assertTrue(new File("build/test/install/systemorg/systemmod2/ivy-1.0.xml").exists());
+        assertTrue(new File("build/test/install/systemorg/systemmod/ivy-1.0.xml").exists());
+    }
+
+    public void testInstallWithNamespace2() {
+        project.setProperty("ivy.settings.file", "test/repositories/namespace/ivysettings.xml");
+        install.setOrganisation("A");
+        install.setModule("B");
+        install.setRevision("1.0");
+        install.setTransitive(true);
+        install.setFrom("ns");
+        install.setTo("install");
+
+        try {
+            install.execute();
+            fail("installing module with namespace coordinates instead of system one should fail");
+        } catch (BuildException ex) {
+            // expected
+        }
+    }
+
+    public void testInstallWithNamespace3() {
+        project.setProperty("ivy.settings.file", "test/repositories/namespace/ivysettings.xml");
+        install.setOrganisation("*");
+        install.setModule("*");
+        install.setRevision("*");
+        install.setTransitive(true);
+        install.setFrom("ns");
+        install.setTo("install");
+
+        install.execute();
+
+        assertTrue(new File("build/test/install/systemorg/systemmod2/ivy-1.0.xml").exists());
+        assertTrue(new File("build/test/install/systemorg/systemmod/ivy-1.0.xml").exists());
+    }
+
     public void testDependencyNotFoundFailure() {
         install.setOrganisation("xxx");
         install.setModule("yyy");
diff --git a/test/repositories/namespace/ivysettings.xml b/test/repositories/namespace/ivysettings.xml
index 7d60bba7b..dbcb421b5 100644
--- a/test/repositories/namespace/ivysettings.xml
+++ b/test/repositories/namespace/ivysettings.xml
@@ -66,7 +66,11 @@
 		<filesystem name="ns" namespace="test" m2compatible="true">
 			<ivy pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/ivy.xml"/>
 			<ivy pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/[module]-[revision].pom"/>
-			<artifact pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/[artifact].[ext]"/>
+			<artifact pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/[artifact](-[classifier]).[ext]"/>
+		</filesystem>
+		<filesystem name="install">
+			<ivy pattern="build/test/install/[organisation]/[module]/[artifact]-[revision].[ext]"/>
+			<artifact pattern="build/test/install/[organisation]/[module]/[artifact](-[classifier])-[revision].[ext]"/>
 		</filesystem>
 	</resolvers>
 </ivysettings>
