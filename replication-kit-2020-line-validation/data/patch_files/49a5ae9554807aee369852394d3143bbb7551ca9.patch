From 49a5ae9554807aee369852394d3143bbb7551ca9 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 27 Oct 2010 20:26:06 +0000
Subject: [PATCH] [CONFIGURATION-424] Fixed a bug in the handling of the global
 section in HierarchicalINIConfiguration.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1028086 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../HierarchicalINIConfiguration.java         | 13 ++---
 .../TestHierarchicalINIConfiguration.java     | 52 ++++++++++++++++---
 3 files changed, 55 insertions(+), 14 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index bfeaf2985c..78872b7706 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-424">
+        HierarchicalINIConfiguration now works correctly with configurations
+        that contain only properties in the global section.
+      </action>
       <action dev="rgoers" type="fix" issue="CONFIGURATION-423" due-to="William Buckley">
         testFromClassPath() can fail when it should not because of inconsistent escaping of output from
         PropertiesConfiguration.getURL() and FileChangedReloadingStrategy.getFile().toURL().
diff --git a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
index 905f52e116..9687694334 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
@@ -616,22 +616,23 @@ public Set getSections()
     {
         Set sections = new ListOrderedSet();
         boolean globalSection = false;
+        boolean inSection = false;
 
         for (Iterator it = getRootNode().getChildren().iterator(); it.hasNext();)
         {
             ConfigurationNode node = (ConfigurationNode) it.next();
             if (isSectionNode(node))
             {
-                if (globalSection)
-                {
-                    sections.add(null);
-                    globalSection = false;
-                }
+                inSection = true;
                 sections.add(node.getName());
             }
             else
             {
-                globalSection = true;
+                if(!inSection && !globalSection)
+                {
+                    globalSection = true;
+                    sections.add(null);
+                }
             }
         }
 
diff --git a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
index edaf639a93..eb76bd65e9 100644
--- a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
@@ -76,9 +76,13 @@ public class TestHierarchicalINIConfiguration extends TestCase
             + "  line 2" + LINE_SEPARATOR
             + "continueNoLine = one \\" + LINE_SEPARATOR;
 
+    /** An ini file that contains only a property in the global section. */
+    private static final String INI_DATA_GLOBAL_ONLY = "globalVar = testGlobal"
+            + LINE_SEPARATOR + LINE_SEPARATOR;
+
     /** An ini file with a global section. */
-    private static final String INI_DATA_GLOBAL = "globalVar = testGlobal"
-            + LINE_SEPARATOR + LINE_SEPARATOR + INI_DATA;
+    private static final String INI_DATA_GLOBAL = INI_DATA_GLOBAL_ONLY
+            + INI_DATA;
 
     /** A test ini file. */
     private static final File TEST_FILE = new File("target/test.ini");
@@ -152,15 +156,36 @@ public void testSave() throws Exception
     }
 
     /**
-     * Tests saving a configuration that contains a global section.
+     * Helper method for testing a save operation. This method constructs a
+     * configuration from the specified content string. Then it saves this
+     * configuration and checks whether the result matches the original content.
+     *
+     * @param content the content of the configuration
+     * @throws ConfigurationException if an error occurs
      */
-    public void testSaveWithGlobalSection() throws ConfigurationException
+    private void checkSave(String content) throws ConfigurationException
     {
-        HierarchicalINIConfiguration config = setUpConfig(INI_DATA_GLOBAL);
+        HierarchicalINIConfiguration config = setUpConfig(content);
         StringWriter writer = new StringWriter();
         config.save(writer);
-        assertEquals("Wrong content of ini file", INI_DATA_GLOBAL, writer
-                .toString());
+        assertEquals("Wrong content of ini file", content, writer.toString());
+    }
+
+    /**
+     * Tests saving a configuration that contains a global section.
+     */
+    public void testSaveWithGlobalSection() throws ConfigurationException
+    {
+        checkSave(INI_DATA_GLOBAL);
+    }
+
+    /**
+     * Tests whether a configuration that contains only a global section can be
+     * saved correctly.
+     */
+    public void testSaveWithOnlyGlobalSection() throws ConfigurationException
+    {
+        checkSave(INI_DATA_GLOBAL_ONLY);
     }
 
     /**
@@ -209,7 +234,7 @@ public void testLoadURL() throws ConfigurationException, IOException
     {
         writeTestFile(INI_DATA);
         HierarchicalINIConfiguration config = new HierarchicalINIConfiguration(
-                TEST_FILE.toURL());
+                TEST_FILE.toURI().toURL());
         checkContent(config);
     }
 
@@ -448,6 +473,17 @@ public void testGetSectionsNoGlobal() throws ConfigurationException
         });
     }
 
+    /**
+     * Tests whether the sections of a configuration can be queried that
+     * contains only a global section.
+     */
+    public void testGetSectionsGlobalOnly() throws ConfigurationException
+    {
+        checkSectionNames(INI_DATA_GLOBAL_ONLY, new String[] {
+            null
+        });
+    }
+
     /**
      * Tests whether variables containing a dot are not misinterpreted as
      * sections. This test is related to CONFIGURATION-327.
