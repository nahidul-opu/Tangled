From 95fde08d7ff98666d724fada3358611d74357fd6 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Thu, 6 Nov 2008 07:23:41 +0000
Subject: [PATCH] CONFIGURATION-347: The Iterator returned by
 AbstractConfiguration.getKeys() now points to a snapshot of the keys. This
 prevents ConcurrentModificationExceptions during iteration when a reload
 happens.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@711782 13f79535-47bb-0310-9956-ffa450edef68
---
 .../AbstractFileConfiguration.java            | 35 ++++++++++++-
 .../configuration/TestFileConfiguration.java  | 49 +++++++++++++++++--
 xdocs/changes.xml                             |  6 +++
 3 files changed, 83 insertions(+), 7 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index e5338502bc..e418b32b5e 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -32,6 +32,8 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
 
 import org.apache.commons.configuration.reloading.InvariantReloadingStrategy;
 import org.apache.commons.configuration.reloading.ReloadingStrategy;
@@ -40,7 +42,7 @@
 
 /**
  * <p>Partial implementation of the <code>FileConfiguration</code> interface.
- * Developpers of file based configuration may want to extend this class,
+ * Developers of file based configuration may want to extend this class,
  * the two methods left to implement are <code>{@link FileConfiguration#load(Reader)}</code>
  * and <code>{@link FileConfiguration#save(Writer)}</code>.</p>
  * <p>This base class already implements a couple of ways to specify the location
@@ -934,10 +936,39 @@ public boolean containsKey(String key)
         return super.containsKey(key);
     }
 
+    /**
+     * Returns an <code>Iterator</code> with the keys contained in this
+     * configuration. This implementation performs a reload if necessary before
+     * obtaining the keys. The <code>Iterator</code> returned by this method
+     * points to a snapshot taken when this method was called. Later changes at
+     * the set of keys (including those caused by a reload) won't be visible.
+     * This is because a reload can happen at any time during iteration, and it
+     * is impossible to determine how this reload affects the current iteration.
+     * When using the iterator a client has to be aware that changes of the
+     * configuration are possible at any time. For instance, if after a reload
+     * operation some keys are no longer present, the iterator will still return
+     * those keys because they were found when it was created.
+     *
+     * @return an <code>Iterator</code> with the keys of this configuration
+     */
     public Iterator getKeys()
     {
         reload();
-        return super.getKeys();
+        List keyList = new LinkedList();
+        enterNoReload();
+        try
+        {
+            for (Iterator it = super.getKeys(); it.hasNext();)
+            {
+                keyList.add(it.next());
+            }
+
+            return keyList.iterator();
+        }
+        finally
+        {
+            exitNoReload();
+        }
     }
 
     /**
diff --git a/src/test/org/apache/commons/configuration/TestFileConfiguration.java b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
index 0e883a350c..cd5cec0cf5 100644
--- a/src/test/org/apache/commons/configuration/TestFileConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
@@ -17,20 +17,21 @@
 
 package org.apache.commons.configuration;
 
-import java.net.URL;
-import java.util.Properties;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.net.URL;
+import java.util.Iterator;
+import java.util.Properties;
+
+import junit.framework.TestCase;
 
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
 
-import junit.framework.TestCase;
-
 /**
  * @author Emmanuel Bourg
  * @version $Revision$, $Date$
@@ -426,7 +427,7 @@ public void testLoadMultiple() throws ConfigurationException
     }
 
     /**
-     * Tests to invoke save() without explicitely setting a file name. This
+     * Tests to invoke save() without explicitly setting a file name. This
      * will cause an exception.
      */
     public void testSaveWithoutFileName() throws Exception
@@ -589,6 +590,44 @@ public void testReloadError() throws ConfigurationException
         assertNotNull("Exception is not set", l.getLastEvent().getCause());
     }
 
+    /**
+     * Tests iterating over the keys of a non hierarchical file-based
+     * configuration while a reload happens. This test is related to
+     * CONFIGURATION-347.
+     */
+    public void testIterationWithReloadFlat() throws ConfigurationException
+    {
+        PropertiesConfiguration config = new PropertiesConfiguration(TEST_FILE);
+        checkIterationWithReload(config);
+    }
+
+    /**
+     * Tests iterating over the keys of a hierarchical file-based configuration
+     * while a reload happens. This test is related to CONFIGURATION-347.
+     */
+    public void testIterationWithReloadHierarchical()
+            throws ConfigurationException
+    {
+        XMLConfiguration config = new XMLConfiguration("test.xml");
+        checkIterationWithReload(config);
+    }
+
+    /**
+     * Helper method for testing an iteration over the keys of a file-based
+     * configuration while a reload happens.
+     *
+     * @param config the configuration to test
+     */
+    private void checkIterationWithReload(FileConfiguration config)
+    {
+        config.setReloadingStrategy(new FileAlwaysReloadingStrategy());
+        for (Iterator it = config.getKeys(); it.hasNext();)
+        {
+            String key = (String) it.next();
+            assertNotNull("No value for key " + key, config.getProperty(key));
+        }
+    }
+
     /**
      * Helper method for comparing the content of two configuration objects.
      *
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index fed0e5b02c..a14ae2bce2 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,12 @@
 
   <body>
     <release version="1.6" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-347">
+        AbstractFileConfiguration.getKeys() now returns an iterator that points
+        to a snapshot of the keys of the configuration. This prevents
+        ConcurrentModificationExceptions during iteration when a reload is
+        performed.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-346">
         ConfigurationUtils.convertToHierarchical() now creates multiple
         configuration nodes for properties with multiple values. This
