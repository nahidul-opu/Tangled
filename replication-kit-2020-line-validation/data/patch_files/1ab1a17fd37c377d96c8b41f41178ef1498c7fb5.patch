From 1ab1a17fd37c377d96c8b41f41178ef1498c7fb5 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Mon, 30 Dec 2013 22:55:50 +0000
Subject: [PATCH] NET-521 SubnetUtils.SubnetInfo.getAddressCount() can overflow
 as it returns an int

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1554332 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../apache/commons/net/util/SubnetUtils.java  | 26 +++++++++++++--
 .../apache/commons/net/SubnetUtilsTest.java   | 33 +++++++++++++++++++
 3 files changed, 60 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2487d6930..6ae9af101 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -64,6 +64,9 @@ The <action> type attribute can be add,update,fix,remove.
     <body>
         <release version="3.4" date="2013-??-??" description="
         ">
+            <action issue="NET-521" type="fix" dev="sebb">
+            SubnetUtils.SubnetInfo.getAddressCount() can overflow as it returns an int
+            </action>
             <action issue="NET-515" type="fix" due-to="Sebastian Ritter">
             FTPClient sample in class javadoc "bug"
             </action>
diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index 8e0d58069..24cb3d371 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -90,6 +90,9 @@ public void setInclusiveHostCount(boolean inclusiveHostCount) {
      *
      */
     public final class SubnetInfo {
+        /* Mask to convert unsigned int to a long (i.e. keep 32 bits) */
+        private static final long UNSIGNED_INT_MASK = 0x0FFFFFFFFL;
+
         private SubnetInfo() {}
 
         private int netmask()       { return netmask; }
@@ -159,13 +162,32 @@ public String getHighAddress() {
             return format(toArray(high()));
         }
 
+        /**
+         * Get the count of available addresses.
+         * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
+         * @return the count of addresses, may be zero.
+         * @throws RuntimeException if the correct count is greater than {@code Integer.MAX_VALUE}
+         * @deprecated use {@link #getAddressCountLong()} instead
+         */
+        @Deprecated
+        public int getAddressCount() {
+            long countLong = getAddressCountLong();
+            if (countLong > Integer.MAX_VALUE) {
+                throw new RuntimeException("Count is larger than an integer: " + countLong);
+            }
+            // N.B. cannot be negative
+            return (int)countLong;
+        }
+
         /**
          * Get the count of available addresses.
          * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
          * @return the count of addresses, may be zero.
          */
-        public int getAddressCount()                {
-            int count = broadcast() - network() + (isInclusiveHostCount() ? 1 : -1);
+        public long getAddressCountLong() {
+            long b = broadcast() & UNSIGNED_INT_MASK;
+            long n = network()   & UNSIGNED_INT_MASK;
+            long count = b - n + (isInclusiveHostCount() ? 1 : -1);
             return count < 0 ? 0 : count;
         }
 
diff --git a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
index dc24a2793..ed9cd1866 100644
--- a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
+++ b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
@@ -22,6 +22,7 @@
 
 import junit.framework.TestCase;
 
+@SuppressWarnings("deprecation") // deliberate use of deprecated methods
 public class SubnetUtilsTest extends TestCase {
 
     // TODO Lower address test
@@ -311,4 +312,36 @@ public void testZeroNetmaskBits() {
         } catch (IllegalArgumentException expected) {
         }
     }
+
+    public void testNET521() {
+        SubnetUtils utils;
+        SubnetInfo info;
+
+        utils = new SubnetUtils("0.0.0.0/0");
+        utils.setInclusiveHostCount(true);
+        info = utils.getInfo();
+        assertEquals("0.0.0.0", info.getNetmask());
+        assertEquals(4294967296L, info.getAddressCountLong());
+        try {
+            info.getAddressCount();
+            fail("Expected RuntimeException");
+        } catch (RuntimeException expected) {
+            // ignored
+        }
+        utils = new SubnetUtils("128.0.0.0/1");
+        utils.setInclusiveHostCount(true);
+        info = utils.getInfo();
+        assertEquals("128.0.0.0", info.getNetmask());
+        assertEquals(2147483648L, info.getAddressCountLong());
+        try {
+            info.getAddressCount();
+            fail("Expected RuntimeException");
+        } catch (RuntimeException expected) {
+            // ignored
+        }
+        // if we exclude the broadcast and network addresses, the count is less than Integer.MAX_VALUE
+        utils.setInclusiveHostCount(false);
+        info = utils.getInfo();
+        assertEquals(2147483646, info.getAddressCount());
+    }
 }
