From bcea7f0bf3b3de8006ef8c2f4bae3dd1974ae285 Mon Sep 17 00:00:00 2001
From: William Colen <colen@apache.org>
Date: Sat, 17 Mar 2012 19:40:20 +0000
Subject: [PATCH] OPENNLP-477: DictionaryNameFinder now generates spans with a
 default type.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1301983 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tools/namefind/DictionaryNameFinder.java  |   4 +-
 .../DictionaryNameFinderEvaluatorTest.java    | 109 ++++++++++++++++++
 2 files changed, 112 insertions(+), 1 deletion(-)
 create mode 100644 opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java

diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
index 24fc1e365..b804ddc6d 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
@@ -33,6 +33,8 @@ public class DictionaryNameFinder implements TokenNameFinder {
 
   private Dictionary mDictionary;
 
+  private static final String DEFAULT_TYPE = "default"; 
+
   /**
    * Initializes the current instance.
    *
@@ -62,7 +64,7 @@ public Span[] find(String[] tokenStrings) {
           StringList tokenList = new StringList(tokens);
 
           if (mDictionary.contains(tokenList)) {
-            foundName = new Span(startToken, endToken + 1);
+            foundName = new Span(startToken, endToken + 1, DEFAULT_TYPE);
           }
         }
       }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
new file mode 100644
index 000000000..df2d3642f
--- /dev/null
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package opennlp.tools.namefind;
+
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+
+import opennlp.tools.dictionary.Dictionary;
+import opennlp.tools.util.ObjectStream;
+import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.Span;
+import opennlp.tools.util.StringList;
+import opennlp.tools.util.eval.FMeasure;
+
+import org.junit.Test;
+
+/**
+ * Tests the evaluation of a {@link DictionaryNameFinder}.
+ */
+public class DictionaryNameFinderEvaluatorTest {
+
+  @Test
+  public void testEvaluator() throws IOException, URISyntaxException {
+    DictionaryNameFinder nameFinder = new DictionaryNameFinder(
+        createDictionary());
+    TokenNameFinderEvaluator evaluator = new TokenNameFinderEvaluator(
+        nameFinder);
+    ObjectStream<NameSample> sample = createSample();
+
+    evaluator.evaluate(sample);
+    sample.close();
+    FMeasure fmeasure = evaluator.getFMeasure();
+
+    // TODO: why isn't it == 1?
+    assertTrue(fmeasure.getFMeasure() > 0);
+  }
+
+  /**
+   * Creates a NameSample stream using an annotated corpus
+   * 
+   * @return
+   * @throws IOException
+   * @throws URISyntaxException
+   */
+  private static ObjectStream<NameSample> createSample() throws IOException,
+      URISyntaxException {
+    FileInputStream sampleDataIn = new FileInputStream(new File(
+        DictionaryNameFinderEvaluatorTest.class.getClassLoader()
+            .getResource("opennlp/tools/namefind/AnnotatedSentences.txt")
+            .toURI()));
+
+    return new NameSampleDataStream(new PlainTextByLineStream(
+        sampleDataIn.getChannel(), "ISO-8859-1"));
+  }
+
+  /**
+   * Creates a dictionary with all names from the sample data.
+   * 
+   * @return a dictionary
+   * @throws IOException
+   * @throws URISyntaxException
+   */
+  private static Dictionary createDictionary() throws IOException,
+      URISyntaxException {
+    ObjectStream<NameSample> sampleStream = createSample();
+    NameSample sample = sampleStream.read();
+    List<String[]> entries = new ArrayList<String[]>();
+    while (sample != null) {
+      Span[] names = sample.getNames();
+      if (names != null && names.length > 0) {
+        String[] toks = sample.getSentence();
+        for (Span name : names) {
+          Span[] n = { name };
+          String[] nameToks = Span.spansToStrings(n, toks);
+          entries.add(nameToks);
+        }
+      }
+      sample = sampleStream.read();
+    }
+    sampleStream.close();
+    Dictionary dictionary = new Dictionary(true);
+    for (String[] entry : entries) {
+      StringList dicEntry = new StringList(entry);
+      dictionary.put(dicEntry);
+    }
+    return dictionary;
+  }
+}
