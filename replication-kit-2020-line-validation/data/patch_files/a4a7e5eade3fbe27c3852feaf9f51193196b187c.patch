From a4a7e5eade3fbe27c3852feaf9f51193196b187c Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Fri, 27 Jul 2007 20:57:40 +0000
Subject: [PATCH] Delete existing child nodes before adding new ones (<assign>
 semantics) SCXML-51

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/scxml/trunk@560379 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/scxml/model/Assign.java    |  8 ++++++-
 .../commons/scxml/model/AssignTest.java       |  2 +-
 .../commons/scxml/model/assign-test.xml       | 23 ++++++++++++++++++-
 xdocs/guide/datamodel.xml                     | 10 ++++----
 4 files changed, 36 insertions(+), 7 deletions(-)

diff --git a/src/main/java/org/apache/commons/scxml/model/Assign.java b/src/main/java/org/apache/commons/scxml/model/Assign.java
index ca877df0e..8c3a48273 100644
--- a/src/main/java/org/apache/commons/scxml/model/Assign.java
+++ b/src/main/java/org/apache/commons/scxml/model/Assign.java
@@ -195,8 +195,14 @@ public void execute(final EventDispatcher evtDispatcher,
                     } else {
                         newNode = eval.evalLocation(ctx, expr);
                     }
+                    // Remove all children
+                    for (Node child = oldNode.getFirstChild();
+                            child != null;
+                            child = child.getNextSibling()) {
+                        oldNode.removeChild(child);
+                    }
                     if (newNode != null) {
-                        // adopt children, possible spec clarification needed
+                        // Adopt new children
                         for (Node child = newNode.getFirstChild();
                                 child != null;
                                 child = child.getNextSibling()) {
diff --git a/src/test/java/org/apache/commons/scxml/model/AssignTest.java b/src/test/java/org/apache/commons/scxml/model/AssignTest.java
index b60e10a89..261d67b7f 100644
--- a/src/test/java/org/apache/commons/scxml/model/AssignTest.java
+++ b/src/test/java/org/apache/commons/scxml/model/AssignTest.java
@@ -69,7 +69,7 @@ public void tearDown() {
     public void testAssignSrc() {
         Set currentStates = exec.getCurrentStatus().getStates();
         assertEquals(1, currentStates.size());
-        assertEquals("assign2", ((State)currentStates.iterator().
+        assertEquals("assign3", ((State)currentStates.iterator().
             next()).getId());
         assertTrue(exec.getCurrentStatus().isFinal());
     }
diff --git a/src/test/java/org/apache/commons/scxml/model/assign-test.xml b/src/test/java/org/apache/commons/scxml/model/assign-test.xml
index 1fb0fb3af..2d1f983c9 100644
--- a/src/test/java/org/apache/commons/scxml/model/assign-test.xml
+++ b/src/test/java/org/apache/commons/scxml/model/assign-test.xml
@@ -17,6 +17,7 @@
 -->
 <!-- Test "src" attribute of assign element -->
 <scxml xmlns="http://www.w3.org/2005/07/scxml"
+       xmlns:rad="http://foo/bar"
        version="1.0"
        initialstate="assign1">
   
@@ -44,6 +45,26 @@
 
   </state>
 
-  <state id="assign2" final="true" />
+  <state id="assign2">
+
+    <datamodel>
+      <data name="jira51data1">
+          <rad:timeout>10</rad:timeout>
+      </data> 
+      <data name="jira51data2">
+          <rad:short xmlns="">20</rad:short>
+      </data>
+    </datamodel>
+
+    <onentry>
+        <assign location="Data(jira51data1,'rad:timeout')" expr="Data(jira51data2,'rad:short')"/>
+    </onentry>
+
+    <transition cond="Data(jira51data1,'rad:timeout') eq 20"
+                target="assign3" />
+
+  </state>
+
+  <state id="assign3" final="true"/>
 
 </scxml>
diff --git a/xdocs/guide/datamodel.xml b/xdocs/guide/datamodel.xml
index e9ba92c78..e5121d281 100644
--- a/xdocs/guide/datamodel.xml
+++ b/xdocs/guide/datamodel.xml
@@ -256,11 +256,13 @@
       &lt;assign location="Data(carrental, 'car/dates')"
                  expr="Data(hotelbooking, 'hotel/stay')" /&gt;
 
-      &lt;!-- copies over all children of &lt;stay&gt;, the
-              &lt;startdate&gt; and &lt;enddate&gt; in this case --&gt;
+      &lt;!-- deletes all children of &lt;dates&gt; and then copies
+              over all children of &lt;stay&gt;, the &lt;startdate&gt;
+              and &lt;enddate&gt; in this case --&gt;
     </pre>
-    In these cases, the node pointed by the expression is first cloned, and
-    then added as a child node to the node the lvalue points to.</p>
+    In these cases, the children of the node pointed by the expression are
+    first cloned, and then added as children to the node the lvalue points
+    to.</p>
     </li>
 
    </ol>
