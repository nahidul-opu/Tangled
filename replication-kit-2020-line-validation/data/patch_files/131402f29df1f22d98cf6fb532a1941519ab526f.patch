From 131402f29df1f22d98cf6fb532a1941519ab526f Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Mon, 23 Jul 2012 03:27:32 +0000
Subject: [PATCH] [VFS-432][HTTP][WebDAV] Allow HTTP follow redirect.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1364484 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/http/HttpFileObject.java    | 21 ++++++-
 .../http/HttpFileSystemConfigBuilder.java     | 39 ++++++++++++-
 .../provider/webdav/WebdavFileObject.java     |  9 +--
 .../webdav/WebdavFileSystemConfigBuilder.java | 16 ++++++
 .../http/test/HttpProviderTestCase.java       | 57 ++++++++++++++++---
 src/changes/changes.xml                       |  7 ++-
 6 files changed, 128 insertions(+), 21 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
index bf01ce5d7d..44e6b09cff 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
@@ -31,6 +31,7 @@
 import org.apache.commons.vfs2.FileContentInfoFactory;
 import org.apache.commons.vfs2.FileNotFoundException;
 import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.RandomAccessContent;
 import org.apache.commons.vfs2.provider.AbstractFileName;
@@ -47,12 +48,20 @@
 public class HttpFileObject extends AbstractFileObject<HttpFileSystem>
 {
     private final String urlCharset;
+    private final boolean followRedirect;
     private HeadMethod method;
 
     protected HttpFileObject(final AbstractFileName name, final HttpFileSystem fileSystem)
+    {
+        this(name, fileSystem, HttpFileSystemConfigBuilder.getInstance());
+    }
+
+    protected HttpFileObject(final AbstractFileName name, final HttpFileSystem fileSystem, final HttpFileSystemConfigBuilder builder)
     {
         super(name, fileSystem);
-        urlCharset = HttpFileSystemConfigBuilder.getInstance().getUrlCharset(getFileSystem().getFileSystemOptions());
+        final FileSystemOptions fileSystemOptions = fileSystem.getFileSystemOptions();
+        urlCharset = builder.getUrlCharset(fileSystemOptions);
+        followRedirect = builder.getFollowRedirect(fileSystemOptions);
     }
 
     /**
@@ -162,14 +171,15 @@ protected RandomAccessContent doGetRandomAccessContent(final RandomAccessMode mo
     }
 
     /**
-     * Prepares a Method object.
+     * Prepares a HttpMethod object.
+     * 
      * @since 2.0 (was package)
      */
     protected void setupMethod(final HttpMethod method) throws FileSystemException, URIException
     {
         String pathEncoded = ((URLFileName) getName()).getPathQueryEncoded(urlCharset);
         method.setPath(pathEncoded);
-        method.setFollowRedirects(true);
+        method.setFollowRedirects(this.getFollowRedirect());
         method.setRequestHeader("User-Agent", "Jakarta-Commons-VFS");
     }
 
@@ -210,6 +220,11 @@ protected FileContentInfoFactory getFileContentInfoFactory()
         return new HttpFileContentInfoFactory();
     }
 
+    protected boolean getFollowRedirect()
+    {
+        return followRedirect;
+    }
+
     HeadMethod getHeadMethod() throws IOException
     {
         if (method != null) {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystemConfigBuilder.java
index 3c01ee89e5..6a6fb683a7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystemConfigBuilder.java
@@ -34,7 +34,11 @@ public class HttpFileSystemConfigBuilder extends FileSystemConfigBuilder
 
     private static final int DEFAULT_MAX_CONNECTIONS = 50;
 
-    private static final String OPTION_NAME_PREEMPTIVE_AUTHENTICATION = "preemptiveAuth";
+    private static final boolean DEFAULT_FOLLOW_REDIRECT = true;
+
+    private static final String KEY_PREEMPTIVE_AUTHENTICATION = "preemptiveAuth";
+
+    protected static final String KEY_FOLLOW_REDIRECT = "followRedirect";
 
     /** @since 2.0 */
     protected HttpFileSystemConfigBuilder(String prefix)
@@ -161,6 +165,21 @@ public void setCookies(FileSystemOptions opts, Cookie[] cookies)
         setParam(opts, "cookies", cookies);
     }
 
+    /**
+     * Sets whether to follow redirects for the connection.
+     * 
+     * @param opts
+     *            The FileSystem options.
+     * @param redirect
+     *            {@code true} to follow redirects, {@code false} not to.
+     * @see #setFollowRedirect
+     * @since 2.1
+     */
+    public void setFollowRedirect(FileSystemOptions opts, boolean redirect)
+    {
+        setParam(opts, KEY_FOLLOW_REDIRECT, redirect);
+    }
+
     /**
      * The cookies to add to the request.
      * @param opts The FileSystem options.
@@ -171,6 +190,20 @@ public Cookie[] getCookies(FileSystemOptions opts)
         return (Cookie[]) getParam(opts, "cookies");
     }
 
+    /**
+     * Gets whether to follow redirects for the connection.
+     * 
+     * @param opts
+     *            The FileSystem options.
+     * @return {@code true} to follow redirects, {@code false} not to.
+     * @see #setFollowRedirect
+     * @since 2.1
+     */
+    public boolean getFollowRedirect(FileSystemOptions opts)
+    {
+        return getBoolean(opts, KEY_FOLLOW_REDIRECT, DEFAULT_FOLLOW_REDIRECT);
+    }
+
     /**
      * The maximum number of connections allowed.
      * @param opts The FileSystem options.
@@ -224,7 +257,7 @@ public int getMaxConnectionsPerHost(FileSystemOptions opts)
      */
     public boolean isPreemptiveAuth(FileSystemOptions opts)
     {
-        return getBoolean(opts, OPTION_NAME_PREEMPTIVE_AUTHENTICATION, Boolean.FALSE).booleanValue();
+        return getBoolean(opts, KEY_PREEMPTIVE_AUTHENTICATION, Boolean.FALSE).booleanValue();
     }
 
     /**
@@ -238,7 +271,7 @@ public boolean isPreemptiveAuth(FileSystemOptions opts)
      */
     public void setPreemptiveAuth(FileSystemOptions opts, boolean preemptiveAuth)
     {
-        setParam(opts, OPTION_NAME_PREEMPTIVE_AUTHENTICATION, Boolean.valueOf(preemptiveAuth));
+        setParam(opts, KEY_PREEMPTIVE_AUTHENTICATION, Boolean.valueOf(preemptiveAuth));
     }
 
     @Override
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
index 83ae78bd56..f91c6b5172 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
@@ -39,6 +39,7 @@
 import org.apache.commons.vfs2.FileNotFoundException;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.NameScope;
 import org.apache.commons.vfs2.provider.AbstractFileName;
@@ -91,10 +92,11 @@ public class WebdavFileObject extends HttpFileObject
 
     protected WebdavFileObject(final AbstractFileName name, final WebdavFileSystem fileSystem)
     {
-        super(name, fileSystem);
+        super(name, fileSystem, WebdavFileSystemConfigBuilder.getInstance());
         this.fileSystem = fileSystem;
         builder = (WebdavFileSystemConfigBuilder) WebdavFileSystemConfigBuilder.getInstance();
-        this.urlCharset = builder.getUrlCharset(getFileSystem().getFileSystemOptions());
+        final FileSystemOptions fileSystemOptions = fileSystem.getFileSystemOptions();
+        this.urlCharset = builder.getUrlCharset(fileSystemOptions);
     }
 
     protected void configureMethod(HttpMethodBase httpMethod)
@@ -394,8 +396,7 @@ protected void setupMethod(final HttpMethod method) throws FileSystemException,
     {
         String pathEncoded = ((URLFileName) getName()).getPathQueryEncoded(urlCharset);
         method.setPath(pathEncoded);
-        // All the WebDav methods are EntityEnclosingMethods and are not allowed to redirect.
-        method.setFollowRedirects(false);
+        method.setFollowRedirects(this.getFollowRedirect());
         method.setRequestHeader("User-Agent", "Jakarta-Commons-VFS");
         method.addRequestHeader("Cache-control", "no-cache");
         method.addRequestHeader("Cache-store", "no-store");
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystemConfigBuilder.java
index 15eb85c86a..c06af2758e 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystemConfigBuilder.java
@@ -28,6 +28,8 @@
 public final class WebdavFileSystemConfigBuilder extends HttpFileSystemConfigBuilder
 {
     private static final WebdavFileSystemConfigBuilder BUILDER = new WebdavFileSystemConfigBuilder();
+    
+    private static final boolean DEFAULT_FOLLOW_REDIRECT = false;
 
     private WebdavFileSystemConfigBuilder()
     {
@@ -64,6 +66,20 @@ public String getCreatorName(FileSystemOptions opts)
         return getString(opts, "creatorName");
     }
 
+    /**
+     * Gets whether to follow redirects for the connection.
+     * 
+     * @param opts
+     *            The FileSystem options.
+     * @return {@code true} to follow redirects, {@code false} not to.
+     * @see #setFollowRedirect
+     * @since 2.1
+     */
+    public boolean getFollowRedirect(FileSystemOptions opts)
+    {
+        return getBoolean(opts, KEY_FOLLOW_REDIRECT, DEFAULT_FOLLOW_REDIRECT);
+    }
+
     /**
      * Whether to use versioning.
      * @param opts The FileSystem options.
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/http/test/HttpProviderTestCase.java b/core/src/test/java/org/apache/commons/vfs2/provider/http/test/HttpProviderTestCase.java
index 37de6039f7..082e77f5d3 100644
--- a/core/src/test/java/org/apache/commons/vfs2/provider/http/test/HttpProviderTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/http/test/HttpProviderTestCase.java
@@ -22,13 +22,15 @@
 import junit.framework.Assert;
 import junit.framework.Test;
 
-import org.apache.commons.vfs2.FileContent;
+import org.apache.commons.vfs2.FileNotFolderException;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemManager;
+import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.VFS;
 import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
 import org.apache.commons.vfs2.provider.http.HttpFileProvider;
+import org.apache.commons.vfs2.provider.http.HttpFileSystemConfigBuilder;
 import org.apache.commons.vfs2.test.AbstractProviderTestConfig;
 import org.apache.commons.vfs2.test.ProviderTestSuite;
 import org.apache.commons.vfs2.util.FreeSocketPortUtil;
@@ -81,6 +83,16 @@ public static Test suite() throws Exception
     {
         return new ProviderTestSuite(new HttpProviderTestCase())
         {
+            /**
+             * Adds base tests - excludes the nested test cases.
+             */
+            @Override
+            protected void addBaseTests() throws Exception
+            {
+                super.addBaseTests();
+                addTests(HttpProviderTestCase.class);
+            }
+
             @Override
             protected void setUp() throws Exception
             {
@@ -126,6 +138,12 @@ public HttpProviderTestCase() throws IOException
         ConnectionUri = "http://localhost:" + SocketPort;
     }
 
+    private void checkReadTestsFolder(final FileObject file) throws FileSystemException
+    {
+        Assert.assertNotNull(file.getChildren());
+        Assert.assertTrue(file.getChildren().length > 0);
+    }
+
     /**
      * Returns the base folder for tests.
      */
@@ -149,17 +167,38 @@ public void prepare(final DefaultFileSystemManager manager) throws Exception
         manager.addProvider("http", new HttpFileProvider());
     }
 
-    public void testGetContent() throws FileSystemException
+    private void testResloveFolderSlash(String uri, boolean followRedirect) throws FileSystemException
+    {
+        VFS.getManager().getFilesCache().close();
+        final FileSystemOptions opts = new FileSystemOptions();
+        HttpFileSystemConfigBuilder.getInstance().setFollowRedirect(opts, followRedirect);
+        final FileObject file = VFS.getManager().resolveFile(uri, opts);
+        try
+        {
+            checkReadTestsFolder(file);
+        } catch (FileNotFolderException e)
+        {
+            // Expected: VFS HTTP does not support listing children yet.
+        }
+    }
+
+    public void testResloveFolderSlashNoRedirectOff() throws FileSystemException
+    {
+        testResloveFolderSlash(ConnectionUri + "/read-tests", false);
+    }
+
+    public void testResloveFolderSlashNoRedirectOn() throws FileSystemException
+    {
+        testResloveFolderSlash(ConnectionUri + "/read-tests", true);
+    }
+
+    public void testResloveFolderSlashYesRedirectOff() throws FileSystemException
     {
-        final FileObject file = VFS.getManager().resolveFile(ConnectionUri + "/read-tests/file1.txt");
-        Assert.assertNotNull(file.getContent());
+        testResloveFolderSlash(ConnectionUri + "/read-tests/", false);
     }
 
-    public void testGetContentInfo() throws FileSystemException
+    public void testResloveFolderSlashYesRedirectOn() throws FileSystemException
     {
-        final FileObject file = VFS.getManager().resolveFile(ConnectionUri + "/read-tests/file1.txt");
-        final FileContent content = file.getContent();
-        Assert.assertNotNull(content);
-        Assert.assertNotNull(content.getContentInfo());
+        testResloveFolderSlash(ConnectionUri + "/read-tests/", true);
     }
 }
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b1a8cf1712..428bba801c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,10 +23,13 @@
 
   <body>
     <release version="2.1" date="TBD" description="New features and bug fix release.">
-      <action issue="VFS-431" dev="ggregory" type="add" due-to="awelynant">
+      <action issue="VFS-432" dev="ggregory" type="add" due-to="ggregory">
+        [HTTP][WebDAV] Allow HTTP follow redirect.
+      </action>
+      <action issue="VFS-431" dev="ggregory" type="add" due-to="ggregory">
         FileSystemOption does not implement toString().
       </action>
-      <action issue="VFS-429" dev="ggregory" type="add" due-to="awelynant">
+      <action issue="VFS-429" dev="ggregory" type="add" due-to="ggregory">
         Remove extra FileSystem ivar in AbstractFileObject subclasses with generics.
       </action>
       <action issue="VFS-427" dev="ggregory" type="add" due-to="awelynant">
