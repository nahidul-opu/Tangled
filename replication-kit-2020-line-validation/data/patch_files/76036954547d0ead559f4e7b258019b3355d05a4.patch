From 76036954547d0ead559f4e7b258019b3355d05a4 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Fri, 10 Mar 2017 23:33:40 +0000
Subject: [PATCH] NET-624 SubnetInfo#toCidrNotation - a wrong format subnet
 mask is allowed

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1786469 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  3 +++
 .../apache/commons/net/util/SubnetUtils.java   | 18 ++++++++++++++++--
 .../apache/commons/net/SubnetUtilsTest.java    | 18 ++++++++++++++++++
 3 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a49cdba82..27d107104 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -71,6 +71,9 @@ This is mainly a bug-fix release. See further details below.
  However it is not source compatible with releases before 3.4, as some methods were added to the interface NtpV3Packet in 3.4
         
 ">
+            <action issue="NET-624" type="fix" dev="sebb" due-to="Makoto Sakaguchi">
+            SubnetInfo#toCidrNotation: A wrong format subnet mask is allowed
+            </action>
             <action issue="NET-623" type="fix" dev="sebb" due-to="Makoto Sakaguchi">
             SubnetUtils - fixed spelling errors
             </action>
diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index 2f33d58cf..c6b4c1ec8 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -354,11 +354,25 @@ int pop(int x) {
         return x & 0x0000003F;
     }
 
-    /* Convert two dotted decimal addresses to a single xxx.xxx.xxx.xxx/yy format
+    /*
+     * Convert two dotted decimal addresses to a single xxx.xxx.xxx.xxx/yy format
      * by counting the 1-bit population in the mask address. (It may be better to count
      * NBITS-#trailing zeroes for this case)
      */
     private String toCidrNotation(String addr, String mask) {
-        return addr + "/" + pop(toInteger(mask));
+        int maskInt = toInteger(mask);
+
+        /*
+         * Check the subnet mask
+         *
+         * An IPv4 subnet mask must consist of a set of contiguous 1-bits followed by a block of 0-bits.
+         * If the mask follows the format, the numbers of subtracting one from the lowest one bit of the mask,
+         * see Hacker's Delight section 2.1, equals to the bitwise complement of the mask.
+         */
+        if ((maskInt & -maskInt) - 1 != ~maskInt) {
+            throw new IllegalArgumentException("Could not parse [" + mask + "]");
+        }
+
+        return addr + "/" + pop(maskInt);
     }
 }
diff --git a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
index 2d8f18ec8..a56e9cdb5 100644
--- a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
+++ b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
@@ -340,6 +340,24 @@ public void testNET521() {
         assertEquals(2147483646, info.getAddressCount());
     }
 
+    public void testNET624() {
+        new SubnetUtils("0.0.0.0/0");
+        new SubnetUtils("0.0.0.0","0.0.0.0");
+        new SubnetUtils("0.0.0.0","128.0.0.0");
+        try {
+            new SubnetUtils("0.0.0.0","64.0.0.0");
+            fail("Should have thrown IllegalArgumentException");
+        } catch (IllegalArgumentException expected) {
+            // Ignored
+        }
+        try {
+            new SubnetUtils("0.0.0.0","0.0.0.1");
+            fail("Should have thrown IllegalArgumentException");
+        } catch (IllegalArgumentException expected) {
+            // Ignored
+        }
+    }
+
     public void testNET520() {
         SubnetUtils utils = new SubnetUtils("0.0.0.0/0");
         utils.setInclusiveHostCount(true);
