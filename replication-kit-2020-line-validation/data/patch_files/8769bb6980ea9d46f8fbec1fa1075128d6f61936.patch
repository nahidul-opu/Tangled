From 8769bb6980ea9d46f8fbec1fa1075128d6f61936 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 10 Jun 2016 14:59:28 +0200
Subject: [PATCH] fix COMPRESS-357 with a volatile flag

---
 src/changes/changes.xml                              |  4 ++--
 .../bzip2/BZip2CompressorOutputStream.java           | 12 +++++++-----
 2 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index eb9bb008e19..d74fd989438 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -76,8 +76,8 @@ The <action> type attribute can be add,update,fix,remove.
         used in Apple's iWork 13 files.
       </action>
       <action issue="COMPRESS-357" type="fix" date="2016-05-26">
-        BZip2CompressorOutputStream#finish is now synchronized to
-        avoid a race condition with the finalize method.
+        A race-condition between BZip2CompressorOutputStream's finish
+        and finalize methods could lead to corrupted streams.
       </action>
       <action issue="COMPRESS-351" type="update" date="2016-06-07">
         ZipArchiveInputStream and CpioArchiveInputStream could throw
diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
index 3bdee5aa366..483d844eab6 100644
--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
@@ -322,6 +322,7 @@ private static void hbMakeCodeLengths(final byte[] len, final int[] freq,
     private BlockSort blockSorter;
 
     private OutputStream out;
+    private volatile boolean closed;
 
     /**
      * Chooses a blocksize based on the given length of the data to compress.
@@ -392,7 +393,7 @@ public BZip2CompressorOutputStream(final OutputStream out, final int blockSize)
 
     @Override
     public void write(final int b) throws IOException {
-        if (this.out != null) {
+        if (!closed) {
             write0(b);
         } else {
             throw new IOException("closed");
@@ -476,8 +477,8 @@ protected void finalize() throws Throwable {
     }
 
 
-    public synchronized void finish() throws IOException {
-        if (out != null) {
+    public void finish() throws IOException {
+        if (!closed) {
             try {
                 if (this.runLength > 0) {
                     writeRun();
@@ -486,6 +487,7 @@ public synchronized void finish() throws IOException {
                 endBlock();
                 endCompression();
             } finally {
+                closed = true;
                 this.out = null;
                 this.data = null;
                 this.blockSorter = null;
@@ -495,7 +497,7 @@ public synchronized void finish() throws IOException {
 
     @Override
     public void close() throws IOException {
-        if (out != null) {
+        if (!closed) {
             final OutputStream outShadow = this.out;
             finish();
             outShadow.close();
@@ -625,7 +627,7 @@ public void write(final byte[] buf, int offs, final int len)
                                                 + len + ") > buf.length("
                                                 + buf.length + ").");
         }
-        if (this.out == null) {
+        if (closed) {
             throw new IOException("stream closed");
         }
 
