From a32f8b913901de4e6c5090f0fd33b0c9cda02ef9 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Tue, 25 Dec 2007 19:05:58 +0000
Subject: [PATCH] CONFIGURATION-302:
 FileChangedReloadingStrategy.reloadingRequired() now returns true until
 reloadingPerformed() has been called.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@606798 13f79535-47bb-0310-9956-ffa450edef68
---
 .../FileChangedReloadingStrategy.java         | 21 +++++++-----
 .../TestFileChangedReloadingStrategy.java     | 33 +++++++++++++++++--
 xdocs/changes.xml                             |  5 +++
 3 files changed, 49 insertions(+), 10 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java b/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
index 36f56c60a3..b2b390a475 100644
--- a/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
+++ b/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
@@ -61,6 +61,9 @@ public class FileChangedReloadingStrategy implements ReloadingStrategy
     /** The minimum delay in milliseconds between checks. */
     protected long refreshDelay = DEFAULT_REFRESH_DELAY;
 
+    /** A flag whether a reload is required.*/
+    private boolean reloading;
+
     public void setConfiguration(FileConfiguration configuration)
     {
         this.configuration = configuration;
@@ -73,16 +76,17 @@ public void init()
 
     public boolean reloadingRequired()
     {
-        boolean reloading = false;
-
-        long now = System.currentTimeMillis();
-
-        if (now > lastChecked + refreshDelay)
+        if (!reloading)
         {
-            lastChecked = now;
-            if (hasChanged())
+            long now = System.currentTimeMillis();
+
+            if (now > lastChecked + refreshDelay)
             {
-                reloading = true;
+                lastChecked = now;
+                if (hasChanged())
+                {
+                    reloading = true;
+                }
             }
         }
 
@@ -124,6 +128,7 @@ protected void updateLastModified()
         {
             lastModified = file.lastModified();
         }
+        reloading = false;
     }
 
     /**
diff --git a/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java b/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
index b440be7519..b31ba22920 100644
--- a/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
+++ b/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
@@ -22,6 +22,8 @@
 import java.net.URL;
 
 import junit.framework.TestCase;
+
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.commons.configuration.XMLConfiguration;
 
@@ -33,6 +35,9 @@
  */
 public class TestFileChangedReloadingStrategy extends TestCase
 {
+    /** Constant for the name of a test properties file.*/
+    private static final String TEST_FILE = "test.properties";
+
     public void testAutomaticReloading() throws Exception
     {
         // create a new configuration
@@ -111,14 +116,14 @@ public void testGetRefreshDelay()
     public void testFromClassPath() throws Exception
     {
         PropertiesConfiguration config = new PropertiesConfiguration();
-        config.setFileName("test.properties");
+        config.setFileName(TEST_FILE);
         config.load();
         assertTrue(config.getBoolean("configuration.loaded"));
         FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy();
         config.setReloadingStrategy(strategy);
         assertEquals(config.getURL(), strategy.getFile().toURL());
     }
-    
+
     /**
      * Tests to watch a configuration file in a jar. In this case the jar file
      * itself should be monitored.
@@ -134,4 +139,28 @@ public void testFromJar() throws Exception
         assertNotNull("Strategy's file is null", file);
         assertEquals("Strategy does not monitor the jar file", "resources.jar", file.getName());
     }
+
+    /**
+     * Tests calling reloadingRequired() multiple times before a reload actually
+     * happens. This test is related to CONFIGURATION-302.
+     */
+    public void testReloadingRequiredMultipleTimes()
+            throws ConfigurationException
+    {
+        FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy()
+        {
+            protected boolean hasChanged()
+            {
+                // signal always a change
+                return true;
+            }
+        };
+        strategy.setRefreshDelay(100000);
+        PropertiesConfiguration config = new PropertiesConfiguration(TEST_FILE);
+        config.setReloadingStrategy(strategy);
+        assertTrue("Reloading not required", strategy.reloadingRequired());
+        assertTrue("Reloading no more required", strategy.reloadingRequired());
+        strategy.reloadingPerformed();
+        assertFalse("Reloading still required", strategy.reloadingRequired());
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index a4616673ec..f403fa8c55 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,11 @@
 
   <body>
     <release version="1.6" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-302">
+        If a change has been detected by FileChangedReloadingStrategy, the
+        reloadingRequired() method will now return true until
+        reloadingPerformed() has been called.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-301">
         Fixed a NullPointerException that could be thrown under certain
         circumstances when saving an XMLConfiguration that was created using
