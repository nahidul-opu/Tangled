From a933173f486614073b68b6c0a6ef09a9c72c94fc Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sun, 29 Jan 2012 20:56:50 +0000
Subject: [PATCH] Only assume a TAR is a TAR if it at least contains one 512
 byte block.  COMPRESS-171

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1237475 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../archivers/ArchiveStreamFactory.java       |  2 +
 .../archivers/ArchiveStreamFactoryTest.java   | 42 +++++++++++++++++++
 3 files changed, 48 insertions(+)
 create mode 100644 src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 01cb3756da5..206d6441da9 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -46,6 +46,10 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <release version="1.4" date="unreleased"
              description="Release 1.4">
+      <action issue="COMPRESS-171" type="fix" date="2012-01-29">
+        ArchiveStreamFactory.createArchiveInputStream would claim
+        short text files were TAR archives.
+      </action> 
       <action issue="COMPRESS-156" type="add" date="2011-11-02">
         Support for the XZ format has been added.
       </action> 
diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index a30cd5a8671..c831b60b010 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -237,6 +237,7 @@ public ArchiveInputStream createArchiveInputStream(final InputStream in)
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
+            if (signatureLength >= 512) {
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                 tais.getNextEntry();
@@ -246,6 +247,7 @@ public ArchiveInputStream createArchiveInputStream(final InputStream in)
                 // autodetection, simply not a TAR
                 // ignored
             }
+            }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
diff --git a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
new file mode 100644
index 00000000000..88a1160add7
--- /dev/null
+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.commons.compress.archivers;
+
+import java.io.ByteArrayInputStream;
+import org.junit.Test;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class ArchiveStreamFactoryTest {
+
+    /**
+     * see https://issues.apache.org/jira/browse/COMPRESS-171
+     */
+    @Test
+    public void shortTextFilesAreNoTARs() throws Exception {
+        try {
+            new ArchiveStreamFactory()
+                .createArchiveInputStream(new ByteArrayInputStream("This certainly is not a tar archive, really, no kidding".getBytes()));
+            fail("created an input stream for a non-archive");
+        } catch (ArchiveException ae) {
+            assertTrue(ae.getMessage().startsWith("No Archiver found"));
+        }
+    }
+
+}
\ No newline at end of file
