From 523be0566f25a8b12273c94deede09cf13c4967b Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Mon, 11 Jun 2007 22:22:30 +0000
Subject: [PATCH] Ivy does not handle multiple version dependencies in maven2
 poms correctly (IVY-494)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@546306 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../plugins/version/VersionRangeMatcher.java  | 16 ++++-----
 .../version/VersionRangeMatcherTest.java      | 35 +++++++++++++++++++
 3 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index c35d19c14..0a2eb3751 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -57,6 +57,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Remove @author tags (thanks to Stephane Bailliez)
 - IMPROVEMENT: Remove use of deprecated elements in ivysettings.xml (IVY-505) (with contribution from Jan Materne)
 
+- FIX: Ivy does not handle multiple version dependencies in maven2 poms correctly (IVY-494)
 - FIX: pom parser doesn't necessarily processes all important information (IVY-524)
 - FIX: <info> element of Ivy file in cache is not updated when using namespaces (IVY-516)
 - FIX: Retrieve Ant task ignores resolveId attribute (IVY-522) (thanks to Scott Goldstein)
diff --git a/src/java/org/apache/ivy/plugins/version/VersionRangeMatcher.java b/src/java/org/apache/ivy/plugins/version/VersionRangeMatcher.java
index 873895360..f8cf08eca 100644
--- a/src/java/org/apache/ivy/plugins/version/VersionRangeMatcher.java
+++ b/src/java/org/apache/ivy/plugins/version/VersionRangeMatcher.java
@@ -66,24 +66,24 @@ public class VersionRangeMatcher extends AbstractVersionMatcher {
 
     private final static String UI_PATTERN = "\\" + UPPER_INFINITE;
 
-    private final static String SEP_PATTERN = "\\" + SEPARATOR;
+    private final static String SEP_PATTERN = "\\s*\\" + SEPARATOR + "\\s*";
 
     private final static String OPEN_PATTERN = "[" + OPEN_INC_PATTERN + OPEN_EXC_PATTERN + "]";
 
     private final static String CLOSE_PATTERN = "[" + CLOSE_INC_PATTERN + CLOSE_EXC_PATTERN + "]";
 
-    private final static String ANY_NON_SPECIAL_PATTERN = "[^" + SEP_PATTERN + OPEN_INC_PATTERN
+    private final static String ANY_NON_SPECIAL_PATTERN = "[^\\s" + SEPARATOR + OPEN_INC_PATTERN
             + OPEN_EXC_PATTERN + CLOSE_INC_PATTERN + CLOSE_EXC_PATTERN + LI_PATTERN + UI_PATTERN
             + "]";
 
-    private final static String FINITE_PATTERN = OPEN_PATTERN + "(" + ANY_NON_SPECIAL_PATTERN
-            + "+)" + SEP_PATTERN + "(" + ANY_NON_SPECIAL_PATTERN + "+)" + CLOSE_PATTERN;
+    private final static String FINITE_PATTERN = OPEN_PATTERN + "\\s*(" + ANY_NON_SPECIAL_PATTERN
+            + "+)" + SEP_PATTERN + "(" + ANY_NON_SPECIAL_PATTERN + "+)\\s*" + CLOSE_PATTERN;
 
-    private final static String LOWER_INFINITE_PATTERN = LI_PATTERN + "\\,("
-            + ANY_NON_SPECIAL_PATTERN + "+)" + CLOSE_PATTERN;
+    private final static String LOWER_INFINITE_PATTERN = LI_PATTERN + SEP_PATTERN + "("
+            + ANY_NON_SPECIAL_PATTERN + "+)\\s*" + CLOSE_PATTERN;
 
-    private final static String UPPER_INFINITE_PATTERN = OPEN_PATTERN + "("
-            + ANY_NON_SPECIAL_PATTERN + "+)\\," + UI_PATTERN;
+    private final static String UPPER_INFINITE_PATTERN = OPEN_PATTERN + "\\s*("
+            + ANY_NON_SPECIAL_PATTERN + "+)" + SEP_PATTERN + UI_PATTERN;
 
     private final static Pattern FINITE_RANGE = Pattern.compile(FINITE_PATTERN);
 
diff --git a/test/java/org/apache/ivy/plugins/version/VersionRangeMatcherTest.java b/test/java/org/apache/ivy/plugins/version/VersionRangeMatcherTest.java
index 480815bda..dd1e6d711 100644
--- a/test/java/org/apache/ivy/plugins/version/VersionRangeMatcherTest.java
+++ b/test/java/org/apache/ivy/plugins/version/VersionRangeMatcherTest.java
@@ -41,6 +41,30 @@ public void testDynamic() {
         assertDynamic("]1.0,2.0]", true);
         assertDynamic("[1.0,)", true);
         assertDynamic("(,1.0]", true);
+
+        assertDynamic("[1.0, 2.0]", true);
+        assertDynamic("[ 1.0, 2.0]", true);
+        assertDynamic("[1.0, 2.0 ]", true);
+        assertDynamic("[ 1.0, 2.0 ]", true);
+        assertDynamic("[1.0, 2.0[", true);
+        assertDynamic("[ 1.0, 2.0[", true);
+        assertDynamic("[1.0, 2.0 [", true);
+        assertDynamic("[ 1.0, 2.0 [", true);
+        assertDynamic("]1.0, 2.0[", true);
+        assertDynamic("] 1.0, 2.0[", true);
+        assertDynamic("]1.0, 2.0 [", true);
+        assertDynamic("] 1.0, 2.0 [", true);
+        assertDynamic("]1.0, 2.0]", true);
+        assertDynamic("] 1.0, 2.0]", true);
+        assertDynamic("]1.0, 2.0 ]", true);
+        assertDynamic("] 1.0, 2.0 ]", true);
+        assertDynamic("[1.0, )", true);
+        assertDynamic("[ 1.0,)", true);
+        assertDynamic("[ 1.0, )", true);
+        assertDynamic("( ,1.0]", true);
+        assertDynamic("(, 1.0]", true);
+        assertDynamic("( , 1.0]", true);
+        assertDynamic("( , 1.0 ]", true);
     }
 
     public void testIncludingFinite() {
@@ -49,6 +73,12 @@ public void testIncludingFinite() {
         assertAccept("[1.0,2.0]", "2.1", false);
         assertAccept("[1.0,2.0]", "1.0", true);
         assertAccept("[1.0,2.0]", "2.0", true);
+
+        assertAccept("[1.0, 2.0]", "1.1", true);
+        assertAccept("[1.0, 2.0 ]", "0.9", false);
+        assertAccept("[1.0, 2.0]", "2.1", false);
+        assertAccept("[ 1.0,2.0]", "1.0", true);
+        assertAccept("[ 1.0 , 2.0 ]", "2.0", true);
     }
 
     public void testExcludingFinite() {
@@ -79,6 +109,11 @@ public void testIncludingInfinite() {
         assertAccept("(,2.0]", "2.0", true);
 
         assertAccept("(,2.0]", "2.3", false);
+        
+        assertAccept("[1.0, )", "1.1", true);
+        assertAccept("[1.0 ,)", "2.0", true);
+        assertAccept("[1.0 , )", "3.5.6", true);
+        assertAccept("[ 1.0, )", "1.0", true);
     }
 
     public void testExcludingInfinite() {
