From 9cacb42aed327bc29be7ddaf738d64eef4a9afbc Mon Sep 17 00:00:00 2001
From: Avery Ching <aching@apache.org>
Date: Wed, 25 Jul 2012 00:50:56 +0000
Subject: [PATCH] GIRAPH-266: Average aggregators don't calculate real average
 (majakabiljo via aching).

git-svn-id: https://svn.apache.org/repos/asf/giraph/trunk@1365372 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG                                     |  3 +
 .../aggregators/DoubleAverageAggregator.java  | 77 -------------------
 .../aggregators/FloatAverageAggregator.java   | 77 -------------------
 .../aggregators/TestDoubleAggregators.java    | 12 ---
 .../aggregators/TestFloatAggregators.java     | 12 ---
 5 files changed, 3 insertions(+), 178 deletions(-)
 delete mode 100644 src/main/java/org/apache/giraph/aggregators/DoubleAverageAggregator.java
 delete mode 100644 src/main/java/org/apache/giraph/aggregators/FloatAverageAggregator.java

diff --git a/CHANGELOG b/CHANGELOG
index afbcd480d..a223bff7a 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -2,6 +2,9 @@ Giraph Change Log
 
 Release 0.2.0 - unreleased
 
+  GIRAPH-266: Average aggregators don't calculate real average
+  (majakabiljo via aching).
+
   GIRAPH-244: Vertex API redesign (apresta via aching).
 
   GIRAPH-236: Add FindBugs to maven build (Jan van der Lugt via
diff --git a/src/main/java/org/apache/giraph/aggregators/DoubleAverageAggregator.java b/src/main/java/org/apache/giraph/aggregators/DoubleAverageAggregator.java
deleted file mode 100644
index ab8b4906f..000000000
--- a/src/main/java/org/apache/giraph/aggregators/DoubleAverageAggregator.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.giraph.aggregators;
-
-import org.apache.hadoop.io.DoubleWritable;
-
-import org.apache.giraph.graph.Aggregator;
-
-/**
- * Aggregator for averaging double values.
- */
-public class DoubleAverageAggregator implements Aggregator<DoubleWritable> {
-  /** Aggregated sum */
-  private double sum = 0;
-  /** Number of aggregated numbers */
-  private long count = 0;
-
-  /**
-   * Aggregate a primitive double.
-   *
-   * @param value Double value to aggregate.
-   */
-  public void aggregate(double value) {
-    sum += value;
-    count++;
-  }
-
-  @Override
-  public void aggregate(DoubleWritable value) {
-    sum += value.get();
-    count++;
-  }
-
-  /**
-   * Reset the aggregated value.
-   */
-  public void resetAggregatedValue() {
-    sum = 0.0;
-    count = 0;
-  }
-
-  /**
-   * This method should not be used, use resetAggregatedValue()
-   *
-   * @param value Double value to aggregate
-   */
-  @Override
-  public void setAggregatedValue(DoubleWritable value) {
-  }
-
-  @Override
-  public DoubleWritable getAggregatedValue() {
-    return new DoubleWritable(count > 0 ? sum / count : 0.0);
-  }
-
-  @Override
-  public DoubleWritable createAggregatedValue() {
-    return new DoubleWritable();
-  }
-
-}
diff --git a/src/main/java/org/apache/giraph/aggregators/FloatAverageAggregator.java b/src/main/java/org/apache/giraph/aggregators/FloatAverageAggregator.java
deleted file mode 100644
index 62d05519e..000000000
--- a/src/main/java/org/apache/giraph/aggregators/FloatAverageAggregator.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.giraph.aggregators;
-
-import org.apache.hadoop.io.FloatWritable;
-
-import org.apache.giraph.graph.Aggregator;
-
-/**
- * Aggregator for averaging float values.
- */
-public class FloatAverageAggregator implements Aggregator<FloatWritable> {
-  /** Aggregated sum */
-  private float sum = 0;
-  /** Number of aggregated numbers */
-  private long count = 0;
-
-  /**
-   * Aggregate a primitive float.
-   *
-   * @param value Float value to aggregate.
-   */
-  public void aggregate(float value) {
-    sum += value;
-    count++;
-  }
-
-  @Override
-  public void aggregate(FloatWritable value) {
-    sum += value.get();
-    count++;
-  }
-
-  /**
-   * Reset the aggregated value.
-   */
-  public void resetAggregatedValue() {
-    sum = 0.0f;
-    count = 0;
-  }
-
-  /**
-   * This method should not be used, use resetAggregatedValue()
-   *
-   * @param value Float value to aggregate.
-   */
-  @Override
-  public void setAggregatedValue(FloatWritable value) {
-  }
-
-  @Override
-  public FloatWritable getAggregatedValue() {
-    return new FloatWritable(count > 0 ? sum / count : 0.0f);
-  }
-
-  @Override
-  public FloatWritable createAggregatedValue() {
-    return new FloatWritable();
-  }
-
-}
diff --git a/src/test/java/org/apache/giraph/aggregators/TestDoubleAggregators.java b/src/test/java/org/apache/giraph/aggregators/TestDoubleAggregators.java
index 0dea60cf6..2ebdd93e6 100644
--- a/src/test/java/org/apache/giraph/aggregators/TestDoubleAggregators.java
+++ b/src/test/java/org/apache/giraph/aggregators/TestDoubleAggregators.java
@@ -25,18 +25,6 @@
 
 public class TestDoubleAggregators {
 
-  @Test
-  public void testAverageAggregator() {
-    DoubleAverageAggregator max = new DoubleAverageAggregator();
-    max.aggregate(1.0);
-    max.aggregate(new DoubleWritable(3.0));
-    assertEquals(2.0, max.getAggregatedValue().get());
-    max.resetAggregatedValue();
-    assertEquals(0.0, max.getAggregatedValue().get());
-    DoubleWritable dw = max.createAggregatedValue();
-    assertNotNull(dw);
-  }
-  
   @Test
   public void testMaxAggregator() {
     DoubleMaxAggregator max = new DoubleMaxAggregator();
diff --git a/src/test/java/org/apache/giraph/aggregators/TestFloatAggregators.java b/src/test/java/org/apache/giraph/aggregators/TestFloatAggregators.java
index 40e20a12a..8970ae47d 100644
--- a/src/test/java/org/apache/giraph/aggregators/TestFloatAggregators.java
+++ b/src/test/java/org/apache/giraph/aggregators/TestFloatAggregators.java
@@ -25,18 +25,6 @@
 
 public class TestFloatAggregators {
 
-  @Test
-  public void testAverageAggregator() {
-    FloatAverageAggregator max = new FloatAverageAggregator();
-    max.aggregate(1.0f);
-    max.aggregate(new FloatWritable(3.0f));
-    assertEquals(2.0f, max.getAggregatedValue().get());
-    max.resetAggregatedValue();
-    assertEquals(0.0f, max.getAggregatedValue().get());
-    FloatWritable fw = max.createAggregatedValue();
-    assertNotNull(fw);
-  }
-  
   @Test
   public void testMaxAggregator() {
     FloatMaxAggregator max = new FloatMaxAggregator();
