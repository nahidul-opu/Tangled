From 6d8ef99f2ed43b9f71005561af57e50c3b24f7d0 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 16 May 2013 13:09:56 +0000
Subject: [PATCH] IO-354 Commons IO Tailer does not respect UTF-8 Charset
 Rework to allow charset to be specified

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1483340 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/io/input/Tailer.java   | 48 +++++++++++++++++--
 .../apache/commons/io/input/TailerTest.java   |  6 +--
 2 files changed, 48 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index 14d3e6015ff..12cb86ce7cb 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -105,6 +105,7 @@
  * </pre>
  * <p>If you interrupt a tailer, the tailer listener is called with the {@link InterruptedException}.</p>
  *
+ * <p>The file is read using the default charset; this can be overriden if necessary</p>
  * @see TailerListener
  * @see TailerListenerAdapter
  * @version $Id$
@@ -119,6 +120,9 @@ public class Tailer implements Runnable {
 
     private static final int DEFAULT_BUFSIZE = 4096;
 
+    // The default charset used for reading files
+    private static final Charset DEFAULT_CHARSET = Charset.defaultCharset();
+
     /**
      * Buffer on top of RandomAccessFile.
      */
@@ -129,6 +133,11 @@ public class Tailer implements Runnable {
      */
     private final File file;
 
+    /**
+     * The character set that will be used to read the file.
+     */
+    private final Charset cset;
+
     /**
      * The amount of time to wait for the file to be updated.
      */
@@ -218,6 +227,23 @@ public Tailer(final File file, final TailerListener listener, final long delayMi
      * @param bufSize Buffer size
      */
     public Tailer(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int bufSize) {
+        this(file, DEFAULT_CHARSET, listener, delayMillis, end, reOpen, bufSize);
+    }
+
+    /**
+     * Creates a Tailer for the given file, with a specified buffer size.
+     * @param file the file to follow.
+     * @param cset the Charset to be used for reading the file
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen if true, close and reopen the file between reading chunks
+     * @param bufSize Buffer size
+     * @deprecated
+     */
+    @Deprecated
+    public Tailer(final File file, final Charset cset, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen
+            , final int bufSize) {
         this.file = file;
         this.delayMillis = delayMillis;
         this.end = end;
@@ -228,6 +254,7 @@ public Tailer(final File file, final TailerListener listener, final long delayMi
         this.listener = listener;
         listener.init(this);
         this.reOpen = reOpen;
+        this.cset = cset; 
     }
 
     /**
@@ -257,7 +284,24 @@ public static Tailer create(final File file, final TailerListener listener, fina
      */
     public static Tailer create(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen,
             final int bufSize) {
-        final Tailer tailer = new Tailer(file, listener, delayMillis, end, reOpen, bufSize);
+        return create(file, DEFAULT_CHARSET, listener, delayMillis, end, reOpen, bufSize);
+    }
+
+    /**
+     * Creates and starts a Tailer for the given file.
+     *
+     * @param file the file to follow.
+     * @param charset the character set to use for reading the file
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen whether to close/reopen the file between chunks
+     * @param bufSize buffer size.
+     * @return The new tailer
+     */
+    public static Tailer create(final File file, final Charset charset, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen
+            ,final int bufSize) {
+        final Tailer tailer = new Tailer(file, charset, listener, delayMillis, end, reOpen, bufSize);
         final Thread thread = new Thread(tailer);
         thread.setDaemon(true);
         thread.start();
@@ -453,8 +497,6 @@ public void stop() {
      * @throws java.io.IOException if an I/O error occurs.
      */
     private long readLines(final RandomAccessFile reader) throws IOException {
-        // Make explicit that the default charset is being used here
-        Charset cset = Charset.defaultCharset();
         ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64);
         long pos = reader.getFilePointer();
         long rePos = pos; // position to re-read
diff --git a/src/test/java/org/apache/commons/io/input/TailerTest.java b/src/test/java/org/apache/commons/io/input/TailerTest.java
index 6ddc85ac487..fe514c4b10e 100644
--- a/src/test/java/org/apache/commons/io/input/TailerTest.java
+++ b/src/test/java/org/apache/commons/io/input/TailerTest.java
@@ -120,12 +120,12 @@ public void testMultiByteBreak() throws Exception {
         final TestTailerListener listener = new TestTailerListener();
         final String osname = System.getProperty("os.name");
         final boolean isWindows = osname.startsWith("Windows");
-        tailer = new Tailer(file, listener, delay, false, isWindows);
+        // Need to use UTF-8 to read & write the file otherwise it can be corrupted (depending on the default charset)
+        final Charset charsetUTF8 = Charset.forName("UTF-8");
+        tailer = new Tailer(file, charsetUTF8, listener, delay, false, isWindows, 4096);
         final Thread thread = new Thread(tailer);
         thread.start();
 
-        // Need to use UTF-8 to read & write the file otherwise it can be corrupted (depending on the default charset)
-        final Charset charsetUTF8 = Charset.forName("UTF-8");
         Writer out = new OutputStreamWriter(new FileOutputStream(file), charsetUTF8);
         BufferedReader reader = null;
         try{
