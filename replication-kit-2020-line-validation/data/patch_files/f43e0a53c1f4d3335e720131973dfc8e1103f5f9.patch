From f43e0a53c1f4d3335e720131973dfc8e1103f5f9 Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Sat, 21 Apr 2007 13:44:46 +0000
Subject: [PATCH] Applying Joe Kelly's fix for COLLECTIONS-249 -
 SetUniqueList.addAll(int, Collection ) was always inserting at the end of the
 list

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@531027 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.html                            |  1 +
 .../collections/list/SetUniqueList.java       | 22 +++++++++++-----
 .../collections/list/TestSetUniqueList.java   | 25 +++++++++++++++++++
 3 files changed, 42 insertions(+), 6 deletions(-)

diff --git a/RELEASE-NOTES.html b/RELEASE-NOTES.html
index 020adcc88a..d422735ac3 100644
--- a/RELEASE-NOTES.html
+++ b/RELEASE-NOTES.html
@@ -59,6 +59,7 @@
 <li>ExtendedProperties - Include property name had confused static/instance semantics [COLLECTIONS-214]</li>
 <li>CollectionUtils - Fix removeAll() method which was completely broken [COLLECTIONS-219]</li>
 <li>MultiValueMap - Fix put() and putAll() to return correct results [COLLECTIONS-228]</li>
+<li>SetUniqueList - addAll(int, Collection) fixed to properly insert at the specified index [COLLECTIONS-249]</li>
 </ul>
 
 <center><h3>JAVADOC</h3></center>
diff --git a/src/java/org/apache/commons/collections/list/SetUniqueList.java b/src/java/org/apache/commons/collections/list/SetUniqueList.java
index b075608352..25d1504f09 100644
--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java
+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java
@@ -155,20 +155,25 @@ public void add(int index, Object object) {
     }
 
     /**
-     * Adds an element to the end of the list if it is not already present.
+     * Adds a collection of objects to the end of the list avoiding duplicates.
+     * <p>
+     * Only elements that are not already in this list will be added, and
+     * duplicates from the specified collection will be ignored.
      * <p>
      * <i>(Violation)</i>
-     * The <code>List</code> interface makes the assumption that the element is
-     * always inserted. This may not happen with this implementation.
+     * The <code>List</code> interface makes the assumption that the elements
+     * are always inserted. This may not happen with this implementation.
      * 
-     * @param coll  the collection to add
+     * @param coll  the collection to add in iterator order
+     * @return true if this collection changed
      */
     public boolean addAll(Collection coll) {
         return addAll(size(), coll);
     }
 
     /**
-     * Adds a collection of objects to the end of the list avoiding duplicates.
+     * Adds a collection of objects a specific index in the list avoiding 
+     * duplicates.
      * <p>
      * Only elements that are not already in this list will be added, and
      * duplicates from the specified collection will be ignored.
@@ -187,7 +192,12 @@ public boolean addAll(int index, Collection coll) {
 
         // adds all elements
         for (final Iterator it = coll.iterator(); it.hasNext();) {
-            add(it.next());
+            int sizeBeforeAddNext = size();
+            add(index, it.next());
+            // if it was inserted, then increase the target index
+            if (sizeBeforeAddNext != size()) {
+              index++;
+            }
         }
 
         // compares sizes to detect if collection changed
diff --git a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
index 560a88bd77..ac68d72df3 100644
--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
@@ -144,6 +144,31 @@ public void testCollectionAddAll() {
         assertEquals("Size should increase after addAll", 
                      size + elements.length, collection.size());
     }
+
+    public void testIntCollectionAddAll() {
+      // make a SetUniqueList with one element
+      List list = new SetUniqueList(new ArrayList(), new HashSet());
+      final Integer existingElement = new Integer(1);
+      list.add(existingElement);
+
+      // add two new unique elements at index 0
+      final Integer firstNewElement = new Integer(2);
+      final Integer secondNewElement = new Integer(3);
+      collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});
+      list.addAll(0, collection);
+      assertEquals("Unique elements should be added.", 3, list.size());
+      assertEquals("First new element should be at index 0", firstNewElement, list.get(0));
+      assertEquals("Second new element should be at index 1", secondNewElement, list.get(1));
+      assertEquals("Existing element should shift to index 2", existingElement, list.get(2));
+
+      // add a duplicate element and a unique element at index 0
+      final Integer thirdNewElement = new Integer(4);
+      collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});
+      list.addAll(0, collection);
+      assertEquals("Duplicate element should not be added, unique element should be added.",
+        4, list.size());
+      assertEquals("Third new element should be at index 0", thirdNewElement, list.get(0));
+    }
     
     public void testListSetByIndex() {
         // override for set behaviour
