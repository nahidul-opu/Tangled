From 75ab5e6bca39e2785f4638365c7fa94a9875f7b6 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Mon, 14 Jun 2010 21:49:11 +0000
Subject: [PATCH] FIX: makepom ignores artifact type in ivy.xml and hardcodes
 'jar' in the output pom (IVY-736) (thanks to Aaron Hachez)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@954656 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../parser/m2/PomModuleDescriptorWriter.java  | 29 +++++++++++++++-
 .../m2/PomModuleDescriptorWriterTest.java     | 13 ++++++++
 .../parser/m2/test-write-packaging.xml        | 33 +++++++++++++++++++
 4 files changed, 75 insertions(+), 1 deletion(-)
 create mode 100644 test/java/org/apache/ivy/plugins/parser/m2/test-write-packaging.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index c0faa0a31..987492bfc 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -126,6 +126,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Trace a message when a property file referenced from the settings doesn't exixts (IVY-1074)
 - IMPROVEMENT: use defaultconf in combination with defaultconfmapping (IVY-1135) (thanks to Jon Schneider)
 
+- FIX: makepom ignores artifact type in ivy.xml and hardcodes 'jar' in the output pom (IVY-736)
 - FIX: Ant output wasn't always prefixed by the name of the Ivy task
 - FIX: Resolved Ivy properties written to cache during ivy:resolve incorrectly represents forced revisions (IVY-1159)
 - FIX: Namespace rules not properly applied to parent projects (IVY-1186)
diff --git a/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriter.java b/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriter.java
index b43a9b8c3..502083fc2 100644
--- a/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriter.java
+++ b/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriter.java
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import org.apache.ivy.Ivy;
+import org.apache.ivy.core.module.descriptor.Artifact;
 import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
 import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
 import org.apache.ivy.core.module.id.ModuleRevisionId;
@@ -84,7 +85,18 @@ private static void printModuleId(ModuleDescriptor md, PrintWriter out) {
         ModuleRevisionId mrid = md.getModuleRevisionId();
         out.println("  <groupId>" + mrid.getOrganisation() + "</groupId>");
         out.println("  <artifactId>" + mrid.getName() + "</artifactId>");
-        out.println("  <packaging>jar</packaging>");
+        
+        String type;
+        
+        Artifact artifact = findArtifact(md);
+        if (artifact == null) {
+            // no suitable artifact found, default to 'pom'
+            type = "pom";
+        } else {
+            type = artifact.getType();
+        }
+
+        out.println("  <packaging>" + type + "</packaging>");
         if (mrid.getRevision() != null) {
             out.println("  <version>" + mrid.getRevision() + "</version>");
         }
@@ -92,6 +104,21 @@ private static void printModuleId(ModuleDescriptor md, PrintWriter out) {
             out.println("  <url>" + md.getHomePage() + "</url>");
         }
     }
+    
+    /**
+     * Returns the first artifact with the correct name and without a classifier.
+     */
+    private static Artifact findArtifact(ModuleDescriptor md) {
+        Artifact[] artifacts = md.getAllArtifacts();
+        for (int i = 0; i < artifacts.length; i++) {
+            if (artifacts[i].getName().equals(md.getModuleRevisionId().getName())
+                    && artifacts[i].getAttribute("classifier") == null) {
+                return artifacts[i];
+            }
+        }
+        
+        return null;
+    }
 
     private static void printDependencies(
             ModuleDescriptor md, ConfigurationScopeMapping mapping, PrintWriter out) {
diff --git a/test/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriterTest.java b/test/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriterTest.java
index e9b5d0a36..54935e646 100644
--- a/test/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriterTest.java
+++ b/test/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorWriterTest.java
@@ -93,6 +93,19 @@ public void testOptional() throws Exception {
         assertEquals(expected, wrote);
     }
     
+    public void testPackaging() throws Exception {
+        ModuleDescriptor md = PomModuleDescriptorParser.getInstance().parseDescriptor(
+            new IvySettings(), getClass().getResource("test-packaging.pom"), false);
+        PomModuleDescriptorWriter.write(md, LICENSE, PomModuleDescriptorWriter.DEFAULT_MAPPING, _dest);
+        assertTrue(_dest.exists());
+
+        String wrote = FileUtil.readEntirely(new BufferedReader(new FileReader(_dest))).replaceAll(
+            "\r\n", "\n").replace('\r', '\n');
+        String expected = readEntirely("test-write-packaging.xml")
+            .replaceAll("\r\n", "\n").replace('\r', '\n');
+        assertEquals(expected, wrote);
+    }
+    
     private String readEntirely(String resource) throws IOException {
         return FileUtil.readEntirely(new BufferedReader(new InputStreamReader(
             PomModuleDescriptorWriterTest.class.getResource(resource).openStream())));
diff --git a/test/java/org/apache/ivy/plugins/parser/m2/test-write-packaging.xml b/test/java/org/apache/ivy/plugins/parser/m2/test-write-packaging.xml
new file mode 100644
index 000000000..8aa4aab63
--- /dev/null
+++ b/test/java/org/apache/ivy/plugins/parser/m2/test-write-packaging.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
+<!--
+   Apache Maven 2 POM generated by Apache Ivy
+   http://ant.apache.org/ivy/
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.apache</groupId>
+  <artifactId>test</artifactId>
+  <packaging>war</packaging>
+  <version>1.0</version>
+  <url>http://ivy.jayasoft.org/</url>
+</project>
