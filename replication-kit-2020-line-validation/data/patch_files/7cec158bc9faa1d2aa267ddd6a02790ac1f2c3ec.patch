From 7cec158bc9faa1d2aa267ddd6a02790ac1f2c3ec Mon Sep 17 00:00:00 2001
From: Thomas Vandahl <tv@apache.org>
Date: Sun, 17 Jan 2016 15:48:07 +0000
Subject: [PATCH] Fix JCS-158: NullPointerException in
 IndexedDiskCache.addToRecycleBin(...)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jcs/trunk@1725098 13f79535-47bb-0310-9956-ffa450edef68
---
 .../disk/indexed/IndexedDiskCache.java        | 42 ++++++++++++-------
 src/changes/changes.xml                       |  3 ++
 2 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
index 2cda130f8..e12addda1 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
@@ -34,6 +34,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
@@ -128,7 +129,7 @@ public class IndexedDiskCache<K, V> extends AbstractDiskCache<K, V>
     private int startupSize = 0;
 
     /** the number of bytes free on disk. */
-    private long bytesFree = 0;
+    private AtomicLong bytesFree = new AtomicLong(0);
 
     /** mode we are working on (size or count limited **/
     private DiskLimitType diskLimitType = DiskLimitType.COUNT;
@@ -1174,16 +1175,25 @@ protected void addToRecycleBin(IndexedDiskElementDescriptor ded)
         // reuse the spot
         if (ded != null)
         {
-            this.adjustBytesFree(ded, true);
+            storageLock.readLock().lock();
 
-            if (doRecycle)
+            try
             {
-                recycle.add(ded);
-                if (log.isDebugEnabled())
+                this.adjustBytesFree(ded, true);
+
+                if (doRecycle)
                 {
-                    log.debug(logCacheName + "recycled ded" + ded);
-                }
+                    recycle.add(ded);
+                    if (log.isDebugEnabled())
+                    {
+                        log.debug(logCacheName + "recycled ded" + ded);
+                    }
 
+                }
+            }
+            finally
+            {
+                storageLock.readLock().unlock();
             }
         }
     }
@@ -1459,17 +1469,17 @@ protected int getRecyleCount()
      *
      * @return The number bytes free on the disk file.
      */
-    protected synchronized long getBytesFree()
+    protected long getBytesFree()
     {
-        return this.bytesFree;
+        return this.bytesFree.get();
     }
 
     /**
      * Resets the number of bytes that are free.
      */
-    private synchronized void resetBytesFree()
+    private void resetBytesFree()
     {
-        this.bytesFree = 0;
+        this.bytesFree.set(0);
     }
 
     /**
@@ -1479,7 +1489,7 @@ private synchronized void resetBytesFree()
      * @param ded
      * @param add
      */
-    private synchronized void adjustBytesFree(IndexedDiskElementDescriptor ded, boolean add)
+    private void adjustBytesFree(IndexedDiskElementDescriptor ded, boolean add)
     {
         if (ded != null)
         {
@@ -1487,11 +1497,11 @@ private synchronized void adjustBytesFree(IndexedDiskElementDescriptor ded, bool
 
             if (add)
             {
-                this.bytesFree += amount;
+                this.bytesFree.addAndGet(amount);
             }
             else
             {
-                this.bytesFree -= amount;
+                this.bytesFree.addAndGet(-amount);
             }
         }
     }
@@ -1604,8 +1614,8 @@ public synchronized IStats getStatistics()
             log.error(e);
         }
         elems.add(new StatElement<Integer>("Max Key Size", this.maxKeySize));
-        elems.add(new StatElement<Integer>("Hit Count", Integer.valueOf(this.hitCount.get())));
-        elems.add(new StatElement<Long>("Bytes Free", Long.valueOf(this.bytesFree)));
+        elems.add(new StatElement<AtomicInteger>("Hit Count", this.hitCount));
+        elems.add(new StatElement<AtomicLong>("Bytes Free", this.bytesFree));
         elems.add(new StatElement<Integer>("Optimize Operation Count", Integer.valueOf(this.removeCount)));
         elems.add(new StatElement<Integer>("Times Optimized", Integer.valueOf(this.timesOptimized)));
         elems.add(new StatElement<Integer>("Recycle Count", Integer.valueOf(this.recycleCnt)));
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index db5188444..1b48190d7 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -20,6 +20,9 @@
 	</properties>
 	<body>
         <release version="2.0" date="unreleased" description="JDK 1.6 based major release">
+            <action issue="JCS-158" dev="tv" type="fix" due-to="Wiktor Niesiobedzki">
+                Fix NullPointerException in IndexedDiskCache.addToRecycleBin(...)
+            </action>
             <action dev="tv" type="update">
                 Reduce synchronization
             </action>
