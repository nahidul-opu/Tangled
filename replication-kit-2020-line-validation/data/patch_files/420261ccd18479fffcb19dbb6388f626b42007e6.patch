From 420261ccd18479fffcb19dbb6388f626b42007e6 Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Tue, 13 Nov 2007 23:38:55 +0000
Subject: [PATCH] fix unit test failures due to recent modification on
 IvyContext handling (IVY-639)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@594716 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/ivy/ant/AntBuildTrigger.java   |  2 +-
 .../org/apache/ivy/ant/AntCallTrigger.java    |  2 +-
 src/java/org/apache/ivy/core/IvyContext.java  | 28 +++++++++++
 .../apache/ivy/core/resolve/ResolveTest.java  | 46 +++++++++++--------
 4 files changed, 56 insertions(+), 22 deletions(-)

diff --git a/src/java/org/apache/ivy/ant/AntBuildTrigger.java b/src/java/org/apache/ivy/ant/AntBuildTrigger.java
index 6286f7813..38757cd25 100644
--- a/src/java/org/apache/ivy/ant/AntBuildTrigger.java
+++ b/src/java/org/apache/ivy/ant/AntBuildTrigger.java
@@ -70,7 +70,7 @@ public void progress(IvyEvent event) {
                 Message.verbose("target build file already built, skipping: " + f);
             } else {
                 Ant ant = new Ant();
-                Project project = (Project) IvyContext.getContext().peek(
+                Project project = (Project) IvyContext.peekInContextStack(
                     IvyTask.ANT_PROJECT_CONTEXT_KEY);
                 if (project == null) {
                     project = new Project();
diff --git a/src/java/org/apache/ivy/ant/AntCallTrigger.java b/src/java/org/apache/ivy/ant/AntCallTrigger.java
index 555b5a066..c6b81bbd1 100644
--- a/src/java/org/apache/ivy/ant/AntCallTrigger.java
+++ b/src/java/org/apache/ivy/ant/AntCallTrigger.java
@@ -59,7 +59,7 @@ public class AntCallTrigger extends AbstractTrigger implements Trigger {
     private String prefix;
 
     public void progress(IvyEvent event) {
-        Project project = (Project) IvyContext.getContext().peek(IvyTask.ANT_PROJECT_CONTEXT_KEY);
+        Project project = (Project) IvyContext.peekInContextStack(IvyTask.ANT_PROJECT_CONTEXT_KEY);
         if (project == null) {
             Message.info("ant call trigger can only be used from an ant build. Ignoring.");
             return;
diff --git a/src/java/org/apache/ivy/core/IvyContext.java b/src/java/org/apache/ivy/core/IvyContext.java
index 635bf64b9..c2b0bb4e9 100644
--- a/src/java/org/apache/ivy/core/IvyContext.java
+++ b/src/java/org/apache/ivy/core/IvyContext.java
@@ -31,6 +31,7 @@
 import org.apache.ivy.core.settings.IvySettings;
 import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
 import org.apache.ivy.util.MessageLogger;
+import org.apache.tools.ant.Project;
 
 /**
  * This class represents an execution context of an Ivy action. It contains several getters to
@@ -101,6 +102,32 @@ public static void popContext() {
         getCurrentStack().pop();
     }
 
+
+    /**
+     * Reads the first object from the list saved under given key in the first context from the
+     * context stack in which this key is defined. If value under key in any of the contexts form
+     * the stack represents non List object then a RuntimeException is thrown.
+     * <p>
+     * This methods does a similar job to {@link #peek(String)}, except that it considers the whole
+     * context stack and not only one instance.
+     * </p>
+     * 
+     * @param key
+     *            context key for the string
+     * @return top object from the list (index 0) of the first context in the stack containing this
+     *         key or null if no key or list empty in all contexts from the context stack
+     * @see #peek(String)
+     */
+    public static Object peekInContextStack(String key) {
+        Object value = null;
+        Stack contextStack = getCurrentStack();
+        for (int i = contextStack.size() - 1; i >= 0 && value == null; i--) {
+            IvyContext ctx = (IvyContext) contextStack.get(i);
+            value = ctx.peek(key);
+        }
+        return value;
+    }
+
     /**
      * Returns the current ivy instance.
      * <p>
@@ -203,6 +230,7 @@ public Object peek(String key) {
         }
     }
 
+
     /**
      * Removes and returns first object from the list saved under given key in the context. If value
      * under key represents non List object then a RuntimeException is thrown.
diff --git a/test/java/org/apache/ivy/core/resolve/ResolveTest.java b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
index 6e7156563..02005bfe8 100644
--- a/test/java/org/apache/ivy/core/resolve/ResolveTest.java
+++ b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
@@ -32,6 +32,7 @@
 
 import org.apache.ivy.Ivy;
 import org.apache.ivy.TestHelper;
+import org.apache.ivy.core.IvyContext;
 import org.apache.ivy.core.cache.ArtifactOrigin;
 import org.apache.ivy.core.cache.CacheManager;
 import org.apache.ivy.core.module.descriptor.Artifact;
@@ -94,34 +95,39 @@ protected void tearDown() throws Exception {
 
 
     public void testResolveWithRetainingArtifactName() throws Exception {
-        settings.setCacheArtifactPattern(ivy.substitute("[module]/[originalname].[ext]"));
-        ResolveReport report = ivy.resolve(new File("test/repositories/2/mod15.2/ivy-1.1.xml")
-                .toURL(), getResolveOptions(new String[] {"default"}));
-        assertNotNull(report);
+        ivy.pushContext();
+        try {
+            settings.setCacheArtifactPattern(ivy.substitute("[module]/[originalname].[ext]"));
+            ResolveReport report = ivy.resolve(new File("test/repositories/2/mod15.2/ivy-1.1.xml")
+            .toURL(), getResolveOptions(new String[] {"default"}));
+            assertNotNull(report);
 
-        ArtifactDownloadReport[] dReports = report.getConfigurationReport("default")
-                .getDownloadReports(ModuleRevisionId.newInstance("org15", "mod15.1", "1.1"));
-        assertNotNull(dReports);
-        assertEquals("number of downloaded artifacts not correct", 1, dReports.length);
+            ArtifactDownloadReport[] dReports = report.getConfigurationReport("default")
+            .getDownloadReports(ModuleRevisionId.newInstance("org15", "mod15.1", "1.1"));
+            assertNotNull(dReports);
+            assertEquals("number of downloaded artifacts not correct", 1, dReports.length);
 
-        Artifact artifact = dReports[0].getArtifact();
-        assertNotNull(artifact);
+            Artifact artifact = dReports[0].getArtifact();
+            assertNotNull(artifact);
 
-        String cachePath = cacheManager.getArchivePathInCache(artifact);
-        assertTrue("artifact name has not been retained: " + cachePath, cachePath
+            String cachePath = cacheManager.getArchivePathInCache(artifact);
+            assertTrue("artifact name has not been retained: " + cachePath, cachePath
                 .endsWith("library.jar"));
 
-        dReports = report.getConfigurationReport("default").getDownloadReports(
-            ModuleRevisionId.newInstance("org14", "mod14.1", "1.1"));
-        assertNotNull(dReports);
-        assertEquals("number of downloaded artifacts not correct", 1, dReports.length);
+            dReports = report.getConfigurationReport("default").getDownloadReports(
+                ModuleRevisionId.newInstance("org14", "mod14.1", "1.1"));
+            assertNotNull(dReports);
+            assertEquals("number of downloaded artifacts not correct", 1, dReports.length);
 
-        artifact = dReports[0].getArtifact();
-        assertNotNull(artifact);
+            artifact = dReports[0].getArtifact();
+            assertNotNull(artifact);
 
-        cachePath = cacheManager.getArchivePathInCache(artifact);
-        assertTrue("artifact name has not been retained: " + cachePath, cachePath
+            cachePath = cacheManager.getArchivePathInCache(artifact);
+            assertTrue("artifact name has not been retained: " + cachePath, cachePath
                 .endsWith("mod14.1-1.1.jar"));
+        } finally {
+            ivy.popContext();
+        }
     }
 
     public void testArtifactOrigin() throws Exception {
