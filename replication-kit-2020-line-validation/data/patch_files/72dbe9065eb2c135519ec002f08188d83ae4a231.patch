From 72dbe9065eb2c135519ec002f08188d83ae4a231 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Mon, 21 Apr 2008 19:21:49 +0000
Subject: [PATCH] FIX: onMissingDescriptor doesn't work due to == comparison
 (IVY-805) (thanks to Ben Hale)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@650229 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  2 +
 src/java/org/apache/ivy/ant/IvyBuildList.java | 14 +--
 test/buildlist/H/build.xml                    | 18 ++++
 .../org/apache/ivy/ant/IvyBuildListTest.java  | 91 ++++++++++++++++---
 4 files changed, 104 insertions(+), 21 deletions(-)
 create mode 100644 test/buildlist/H/build.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index e0dec6176..988eac400 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -28,6 +28,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 	Jacob Grydholt Jensen
 	Scott Goldstein
 	Pierre Hägnestrand
+	Ben Hale
 	Peter Hayes
 	Matt Inger
 	Anders Janmyr
@@ -78,6 +79,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Change allownomd and skipbuildwithoutivy into a more semantically correct name (IVY-297)
 - IMPROVEMENT: Smarter determination if an expression is exact or not for RegexpPatternMatcher and GlobPatternMatcher
 
+- FIX: onMissingDescriptor doesn't work due to == comparison (IVY-805) (thanks to Ben Hale)
 - FIX: revision token is not set in report outputpattern (IVY-272)
 - FIX: Ivy uses the first set of configurations it sees when resolving multiple versions of a module (IVY-681)
 - FIX: Eviction fails for libs not providing their ivy configuration and providing artifacts named different between lib versions (IVY-537)
diff --git a/src/java/org/apache/ivy/ant/IvyBuildList.java b/src/java/org/apache/ivy/ant/IvyBuildList.java
index 50b114a82..c38ff070e 100644
--- a/src/java/org/apache/ivy/ant/IvyBuildList.java
+++ b/src/java/org/apache/ivy/ant/IvyBuildList.java
@@ -244,7 +244,7 @@ public void doExecute() throws BuildException {
             new WarningNonMatchingVersionReporter();
         List sortedModules = ivy.sortModuleDescriptors(mds, nonMatchingVersionReporter);
 
-        if (onMissingDescriptor != OnMissingDescriptor.TAIL) {
+        if (!OnMissingDescriptor.TAIL.equals(onMissingDescriptor)) {
             for (ListIterator iter = noDescriptor.listIterator(); iter.hasNext();) {
                 File buildFile = (File) iter.next();
                 addBuildFile(path, buildFile);
@@ -286,7 +286,7 @@ public void doExecute() throws BuildException {
             File buildFile = (File) buildFiles.get(md);
             addBuildFile(path, buildFile);
         }
-        if (onMissingDescriptor == OnMissingDescriptor.TAIL) {
+        if (OnMissingDescriptor.TAIL.equals(onMissingDescriptor)) {
             for (ListIterator iter = noDescriptor.listIterator(); iter.hasNext();) {
                 File buildFile = (File) iter.next();
                 addBuildFile(path, buildFile);
@@ -298,23 +298,23 @@ public void doExecute() throws BuildException {
     }
 
     private void onMissingDescriptor(File buildFile, File ivyFile, List noDescriptor) {
-        if (onMissingDescriptor == OnMissingDescriptor.SKIP) {
+        if (OnMissingDescriptor.SKIP.equals(onMissingDescriptor)) {
             Message.debug("skipping " + buildFile + ": descriptor " + ivyFile
                     + " doesn't exist");
-        } else if (onMissingDescriptor == OnMissingDescriptor.FAIL) {
+        } else if (OnMissingDescriptor.FAIL.equals(onMissingDescriptor)) {
             throw new BuildException(
                 "a module has no module descriptor and onMissingDescriptor=fail. "
                 + "Build file: " + buildFile + ". Expected descriptor: " + ivyFile);
         } else {
-            if (onMissingDescriptor == OnMissingDescriptor.WARN) {
+            if (OnMissingDescriptor.WARN.equals(onMissingDescriptor)) {
                 Message.warn(
                     "a module has no module descriptor. "
                     + "Build file: " + buildFile + ". Expected descriptor: " + ivyFile);
             }
             Message.verbose("no descriptor for " + buildFile + ": descriptor=" + ivyFile
                     + ": adding it at the " 
-                    + onMissingDescriptor == OnMissingDescriptor.TAIL 
-                    ? "tail" : "head" + " of the path");
+                    + (OnMissingDescriptor.TAIL.equals(onMissingDescriptor) 
+                    ? "tail" : "head" + " of the path"));
             Message.verbose(
                 "\t(change onMissingDescriptor if you want to take another action");
             noDescriptor.add(buildFile);
diff --git a/test/buildlist/H/build.xml b/test/buildlist/H/build.xml
new file mode 100644
index 000000000..84312b7a8
--- /dev/null
+++ b/test/buildlist/H/build.xml
@@ -0,0 +1,18 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
diff --git a/test/java/org/apache/ivy/ant/IvyBuildListTest.java b/test/java/org/apache/ivy/ant/IvyBuildListTest.java
index b99784343..81b91f5a4 100644
--- a/test/java/org/apache/ivy/ant/IvyBuildListTest.java
+++ b/test/java/org/apache/ivy/ant/IvyBuildListTest.java
@@ -57,7 +57,7 @@ public void testSimple() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/build.xml,F/build.xml,G/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -96,7 +96,7 @@ public void testReverse() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/build.xml,F/build.xml,G/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("reverse.ordered.build.files");
 
         buildlist.execute();
@@ -136,7 +136,7 @@ public void testWithRoot() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -167,7 +167,7 @@ public void testWithRootCircular() {
         fs.setDir(new File("test/buildlist"));
         fs.setIncludes("**/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -194,7 +194,7 @@ public void testWithTwoRoots() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -231,7 +231,7 @@ public void testWithRootExclude() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -263,7 +263,7 @@ public void testWithRootAndOnlyDirectDep() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -296,7 +296,7 @@ public void testWithLeaf() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -331,7 +331,7 @@ public void testWithLeafCircular() {
         fs.setDir(new File("test/buildlist"));
         fs.setIncludes("**/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -359,7 +359,7 @@ public void testWithTwoLeafs() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -398,7 +398,7 @@ public void testWithLeafExclude() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -432,7 +432,7 @@ public void testWithLeafAndOnlyDirectDep() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/**");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -465,7 +465,7 @@ public void testRestartFrom() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("E2/build.xml,F/build.xml,G/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
@@ -489,6 +489,69 @@ public void testRestartFrom() {
         assertEquals(new File("test/buildlist/E/build.xml").getAbsolutePath(), new File(files[3])
                 .getAbsolutePath());
     }
+    
+    public void testOnMissingDescriptor() {
+        Project p = new Project();
+
+        IvyBuildList buildlist = new IvyBuildList();
+        buildlist.setProject(p);
+
+        FileSet fs = new FileSet();
+        fs.setDir(new File("test/buildlist"));
+        fs.setIncludes("**/build.xml");
+        fs.setExcludes("E2/build.xml,F/build.xml,G/build.xml");
+        buildlist.addFileset(fs);
+        buildlist.setOnMissingDescriptor(new String("tail")); // IVY-805: new String instance
+        buildlist.setReference("ordered.build.files");
+        buildlist.execute();
+
+        Object o = p.getReference("ordered.build.files");
+        assertNotNull(o);
+        assertTrue(o instanceof Path);
+
+        Path path = (Path) o;
+        String[] files = path.list();
+        assertNotNull(files);
+        
+        assertEquals(6, files.length);
+
+        assertEquals(new File("test/buildlist/B/build.xml").getAbsolutePath(), new File(files[0])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/C/build.xml").getAbsolutePath(), new File(files[1])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/A/build.xml").getAbsolutePath(), new File(files[2])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/D/build.xml").getAbsolutePath(), new File(files[3])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/E/build.xml").getAbsolutePath(), new File(files[4])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/H/build.xml").getAbsolutePath(), new File(files[5])
+                .getAbsolutePath());
+        
+        buildlist.setOnMissingDescriptor(new String("skip")); // IVY-805: new String instance
+        buildlist.execute();
+
+        o = p.getReference("ordered.build.files");
+        assertNotNull(o);
+        assertTrue(o instanceof Path);
+
+        path = (Path) o;
+        files = path.list();
+        assertNotNull(files);
+        
+        assertEquals(5, files.length);
+
+        assertEquals(new File("test/buildlist/B/build.xml").getAbsolutePath(), new File(files[0])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/C/build.xml").getAbsolutePath(), new File(files[1])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/A/build.xml").getAbsolutePath(), new File(files[2])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/D/build.xml").getAbsolutePath(), new File(files[3])
+                .getAbsolutePath());
+        assertEquals(new File("test/buildlist/E/build.xml").getAbsolutePath(), new File(files[4])
+                .getAbsolutePath());
+    }
 
     public void testWithModuleWithSameNameAndDifferentOrg() {
         Project p = new Project();
@@ -501,7 +564,7 @@ public void testWithModuleWithSameNameAndDifferentOrg() {
         fs.setIncludes("**/build.xml");
         fs.setExcludes("F/build.xml,G/build.xml");
         buildlist.addFileset(fs);
-
+        buildlist.setOnMissingDescriptor("skip");
         buildlist.setReference("ordered.build.files");
 
         buildlist.execute();
