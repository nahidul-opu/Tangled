From 459f14b33c02509a4b9cc5360f3ff2f4edba9284 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Thu, 26 Jul 2012 20:24:27 +0000
Subject: [PATCH] [COLLECTIONS-239] to keep backwards compatibility, do not use
 DefaultEquator in case no equator is specific, but rather use the original
 equals method.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1366185 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/collections/functors/EqualPredicate.java   | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
index 396bb83438..00a28c2d76 100644
--- a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
+++ b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
@@ -79,7 +79,9 @@ public static <T> Predicate<T> equalPredicate(T object, Equator<T> equator) {
      * @param object  the object to compare to
      */
     public EqualPredicate(T object) {
-        this(object, new DefaultEquator<T>());
+        // do not use the DefaultEquator to keep backwards compatibility
+        // the DefaultEquator returns also true if the two object references are equal
+        this(object, null);
     }
 
     /**
@@ -103,7 +105,11 @@ public EqualPredicate(T object, Equator<T> equator) {
      * @return true if input object equals stored value
      */
     public boolean evaluate(T object) {
-        return equator.equate(iValue, object);
+        if (equator != null) {
+            return equator.equate(iValue, object);
+        } else {
+            return iValue.equals(object);
+        }
     }
 
     /**
