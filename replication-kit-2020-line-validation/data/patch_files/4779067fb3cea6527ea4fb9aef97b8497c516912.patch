From 4779067fb3cea6527ea4fb9aef97b8497c516912 Mon Sep 17 00:00:00 2001
From: Bernd Eckenfels <ecki@apache.org>
Date: Sun, 30 Nov 2014 09:47:34 +0000
Subject: [PATCH] [VFS-487] DefaultFileMonitor detect re-creation events

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1642533 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/vfs2/impl/DefaultFileMonitor.java |  10 +-
 .../impl/test/DefaultFileMonitorTests.java    | 118 ++++++++++++------
 src/changes/changes.xml                       |   3 +
 3 files changed, 90 insertions(+), 41 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
index 74d17dee73..68379d0d63 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
@@ -356,11 +356,6 @@ public void run()
         mainloop:
         while (!monitorThread.isInterrupted() && this.shouldRun)
         {
-            while (!this.deleteStack.empty())
-            {
-                this.removeFile(this.deleteStack.pop());
-            }
-
             // For each entry in the map
             Object[] fileNames;
             synchronized (this.monitorMap)
@@ -407,6 +402,11 @@ public void run()
                 this.addFile(this.addStack.pop());
             }
 
+            while (!this.deleteStack.empty())
+            {
+                this.removeFile(this.deleteStack.pop());
+            }
+
             try
             {
                 Thread.sleep(getDelay());
diff --git a/core/src/test/java/org/apache/commons/vfs2/impl/test/DefaultFileMonitorTests.java b/core/src/test/java/org/apache/commons/vfs2/impl/test/DefaultFileMonitorTests.java
index 8a1d718e1f..47e3990398 100644
--- a/core/src/test/java/org/apache/commons/vfs2/impl/test/DefaultFileMonitorTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/impl/test/DefaultFileMonitorTests.java
@@ -66,14 +66,19 @@ public void testFileCreated() throws Exception
     {
         final FileObject fileObj = fsManager.resolveFile(testFile.toURI().toURL().toString());
         final DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener());
+        // TestFileListener manipulates changeStatus
         monitor.setDelay(100);
         monitor.addFile(fileObj);
         monitor.start();
-        writeToFile(testFile);
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event", changeStatus == 3);
-        monitor.stop();
+        try
+        {
+            writeToFile(testFile);
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event", changeStatus == 3);
+        } finally {
+            monitor.stop();
+        }
     }
 
     public void testFileDeleted() throws Exception
@@ -81,14 +86,19 @@ public void testFileDeleted() throws Exception
         writeToFile(testFile);
         final FileObject fileObj = fsManager.resolveFile(testFile.toURI().toString());
         final DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener());
+        // TestFileListener manipulates changeStatus
         monitor.setDelay(100);
         monitor.addFile(fileObj);
         monitor.start();
-        testFile.delete();
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event", changeStatus == 2);
-        monitor.stop();
+        try
+        {
+            testFile.delete();
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event", changeStatus == 2);
+        } finally {
+            monitor.stop();
+        }
     }
 
     public void testFileModified() throws Exception
@@ -96,19 +106,24 @@ public void testFileModified() throws Exception
         writeToFile(testFile);
         final FileObject fileObj = fsManager.resolveFile(testFile.toURI().toURL().toString());
         final DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener());
+        // TestFileListener manipulates changeStatus
         monitor.setDelay(100);
         monitor.addFile(fileObj);
         monitor.start();
-        // Need a long delay to insure the new timestamp doesn't truncate to be the same as
-        // the current timestammp. Java only guarantees the timestamp will be to 1 second.
-        Thread.sleep(1000);
-        final long value = System.currentTimeMillis();
-        final boolean rc = testFile.setLastModified(value);
-        assertTrue("setLastModified succeeded",rc);
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event", changeStatus == 1);
-        monitor.stop();
+        try
+        {
+            // Need a long delay to insure the new timestamp doesn't truncate to be the same as
+            // the current timestammp. Java only guarantees the timestamp will be to 1 second.
+            Thread.sleep(1000);
+            final long value = System.currentTimeMillis();
+            final boolean rc = testFile.setLastModified(value);
+            assertTrue("setLastModified succeeded",rc);
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event", changeStatus == 1);
+        } finally {
+            monitor.stop();
+        }
     }
 
 
@@ -116,33 +131,64 @@ public void testFileRecreated() throws Exception
     {
         final FileObject fileObj = fsManager.resolveFile(testFile.toURI().toURL().toString());
         final DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener());
+        // TestFileListener manipulates changeStatus
         monitor.setDelay(100);
         monitor.addFile(fileObj);
         monitor.start();
+        try
+        {
+            writeToFile(testFile);
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event " + changeStatus, changeStatus == 3);
+            changeStatus = 0;
+            testFile.delete();
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event " + changeStatus, changeStatus == 2);
+            changeStatus = 0;
+            Thread.sleep(500);
+            monitor.addFile(fileObj);
+            writeToFile(testFile);
+            Thread.sleep(300);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event " + changeStatus, changeStatus == 3);
+        } finally {
+            monitor.stop();
+        }
+    }
+
+    public void testChildFileRecreated() throws Exception
+    {
         writeToFile(testFile);
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event " + changeStatus, changeStatus == 3);
-        changeStatus = 0;
-        testFile.delete();
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event " + changeStatus, changeStatus == 2);
-        changeStatus = 0;
-        Thread.sleep(500);
+        final FileObject fileObj = fsManager.resolveFile(testDir.toURI().toURL().toString());
+        final DefaultFileMonitor monitor = new DefaultFileMonitor(new TestFileListener());
+        monitor.setDelay(2000);
         monitor.addFile(fileObj);
-        writeToFile(testFile);
-        Thread.sleep(300);
-        assertTrue("No event occurred", changeStatus != 0);
-        assertTrue("Incorrect event " + changeStatus, changeStatus == 3);
-        monitor.stop();
+        monitor.start();
+        try
+        {
+            changeStatus = 0;
+            Thread.sleep(300);
+            testFile.delete();
+            Thread.sleep(3000);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event " + changeStatus, changeStatus == 2);
+            changeStatus = 0;
+            Thread.sleep(300);
+            writeToFile(testFile);
+            Thread.sleep(3000);
+            assertTrue("No event occurred", changeStatus != 0);
+            assertTrue("Incorrect event " + changeStatus, changeStatus == 3);
+        } finally {
+            monitor.stop();
+        }
     }
 
     private void writeToFile(final File file) throws Exception
     {
         final FileWriter out = new FileWriter(file);
         out.write("string=value1");
-        out.flush();
         out.close();
     }
 
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ad6127c5fc..c32cc83b93 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -26,6 +26,9 @@
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
 <!--        [Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-487" dev="ecki" type="fix" due-to="Dave Marion">
+       DefaultFileMonitor detects recreated files.
+      </action>
       <action issue="VFS-523" dev="ecki" type="fix" due-to="Roger Whitcomb">
        [HDFS] Make HdfsFileObject.equal use system hashcode/equals instead of 
        wrongly comparing file path only.
