From 29768de21e099cc7b5bdf411bd02fc11fd79f932 Mon Sep 17 00:00:00 2001
From: Colm O Heigeartaigh <coheigea@apache.org>
Date: Mon, 24 Nov 2014 11:21:22 +0000
Subject: [PATCH] [SANTUARIO-406] - RSA/ECB/OAEPWithSHA-256AndMGF1Padding not
 working. Thanks to Thomas Konstantinides for the patch.

git-svn-id: https://svn.apache.org/repos/asf/santuario/xml-security-java/branches/1.5.x-fixes@1641364 13f79535-47bb-0310-9956-ffa450edef68
---
 .../xml/security/encryption/XMLCipher.java    | 67 ++++++++++++++-----
 1 file changed, 52 insertions(+), 15 deletions(-)

diff --git a/src/main/java/org/apache/xml/security/encryption/XMLCipher.java b/src/main/java/org/apache/xml/security/encryption/XMLCipher.java
index dcab17082f..862b813335 100644
--- a/src/main/java/org/apache/xml/security/encryption/XMLCipher.java
+++ b/src/main/java/org/apache/xml/security/encryption/XMLCipher.java
@@ -1606,21 +1606,7 @@ private Cipher constructCipher(String algorithm, String digestAlgorithm) throws
         } catch (NoSuchAlgorithmException nsae) {
             // Check to see if an RSA OAEP MGF-1 with SHA-1 algorithm was requested
             // Some JDKs don't support RSA/ECB/OAEPPadding
-            if (XMLCipher.RSA_OAEP.equals(algorithm)
-                && (digestAlgorithm == null 
-                    || MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA1.equals(digestAlgorithm))) {
-                try {
-                    if (requestedJCEProvider == null) {
-                        c = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");
-                    } else {
-                        c = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding", requestedJCEProvider);
-                    }
-                } catch (Exception ex) {
-                    throw new XMLEncryptionException("empty", ex);
-                }
-            } else {
-                throw new XMLEncryptionException("empty", nsae);
-            }
+            c = constructCipher(algorithm, digestAlgorithm, nsae);
         } catch (NoSuchProviderException nspre) {
             throw new XMLEncryptionException("empty", nspre);
         } catch (NoSuchPaddingException nspae) {
@@ -1629,6 +1615,57 @@ private Cipher constructCipher(String algorithm, String digestAlgorithm) throws
         
         return c;
     }
+    
+    private Cipher constructCipher(String algorithm, String digestAlgorithm, Exception nsae) throws XMLEncryptionException {
+        if (!XMLCipher.RSA_OAEP.equals(algorithm)) {
+            throw new XMLEncryptionException("empty", nsae);
+        }
+        
+        if (digestAlgorithm == null 
+            || MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA1.equals(digestAlgorithm)) {
+            try {
+                if (requestedJCEProvider == null) {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");
+                } else {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding", requestedJCEProvider);
+                }
+            } catch (Exception ex) {
+                throw new XMLEncryptionException("empty", ex);
+            }
+        } else if (MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA256.equals(digestAlgorithm)) {
+            try {
+                if (requestedJCEProvider == null) {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
+                } else {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding", requestedJCEProvider);
+                }
+            } catch (Exception ex) {
+                throw new XMLEncryptionException("empty", ex);
+            }
+        } else if (MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA384.equals(digestAlgorithm)) {
+            try {
+                if (requestedJCEProvider == null) {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-384AndMGF1Padding");
+                } else {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-384AndMGF1Padding", requestedJCEProvider);
+                }
+            } catch (Exception ex) {
+                throw new XMLEncryptionException("empty", ex);
+            }
+        } else if (MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA512.equals(digestAlgorithm)) {
+            try {
+                if (requestedJCEProvider == null) {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-512AndMGF1Padding");
+                } else {
+                    return Cipher.getInstance("RSA/ECB/OAEPWithSHA-512AndMGF1Padding", requestedJCEProvider);
+                }
+            } catch (Exception ex) {
+                throw new XMLEncryptionException("empty", ex);
+            }
+        } else {
+            throw new XMLEncryptionException("empty", nsae);
+        }
+    }
 
     /**
      * Decrypt a key from a passed in EncryptedKey structure.  This version
