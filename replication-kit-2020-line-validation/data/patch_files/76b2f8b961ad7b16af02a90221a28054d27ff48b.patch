From 76b2f8b961ad7b16af02a90221a28054d27ff48b Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Mon, 28 Jul 2008 21:41:38 +0000
Subject: [PATCH] Serialization of expressions may produce invalid XML Variant
 of a patch by Ingmar Kliche <ingmar dot kliche at googlemail dot com>. Thanks
 Ingmar! SCXML-76

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/scxml/trunk@680515 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/scxml/SCXMLHelper.java | 55 +++++++++++++++++++
 .../commons/scxml/io/SCXMLSerializer.java     | 33 ++++++-----
 .../commons/scxml/io/SCXMLSerializerTest.java | 15 +++++
 3 files changed, 90 insertions(+), 13 deletions(-)

diff --git a/src/main/java/org/apache/commons/scxml/SCXMLHelper.java b/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
index 17dbf4cb6..29e3a35c5 100644
--- a/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
+++ b/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.scxml;
 
+import java.io.StringWriter;
 import java.util.HashSet;
 import java.util.IdentityHashMap;
 import java.util.Iterator;
@@ -468,6 +469,60 @@ public static void cloneDatamodel(final Datamodel datamodel,
         }
     }
 
+    /**
+     * Escape XML strings for serialization.
+     * The basic algorithm is taken from Commons Lang (see oacl.Entities.java)
+     *
+     * @param str A string to be escaped
+     * @return The escaped string
+     */
+    public static String escapeXML(final String str) {
+        if (str == null) {
+            return null;
+        }
+
+        // Make the writer an arbitrary bit larger than the source string
+        int len = str.length();
+        StringWriter stringWriter = new StringWriter(len + 8);
+
+        for (int i = 0; i < len; i++) {
+            char c = str.charAt(i);
+            String entityName = null; // Look for XML 1.0 predefined entities
+            switch (c) {
+                case '"':
+                    entityName = "quot";
+                    break;
+                case '&':
+                    entityName = "amp";
+                    break;
+                case '\'':
+                    entityName = "apos";
+                    break;
+                case '<':
+                    entityName = "lt";
+                    break;
+                case '>':
+                    entityName = "gt";
+                    break;
+            }
+            if (entityName == null) {
+                if (c > 0x7F) {
+                    stringWriter.write("&#");
+                    stringWriter.write(Integer.toString(c));
+                    stringWriter.write(';');
+                } else {
+                    stringWriter.write(c);
+                }
+            } else {
+                stringWriter.write('&');
+                stringWriter.write(entityName);
+                stringWriter.write(';');
+            }
+        }
+
+        return stringWriter.toString();
+    }
+
     /**
      * Discourage instantiation since this is a utility class.
      */
diff --git a/src/main/java/org/apache/commons/scxml/io/SCXMLSerializer.java b/src/main/java/org/apache/commons/scxml/io/SCXMLSerializer.java
index 1074bb53c..f546590f8 100644
--- a/src/main/java/org/apache/commons/scxml/io/SCXMLSerializer.java
+++ b/src/main/java/org/apache/commons/scxml/io/SCXMLSerializer.java
@@ -222,7 +222,7 @@ public static void serializeInvoke(final StringBuffer b,
             Param p = (Param) iter.next();
             b.append(indent).append(INDENT).append("<param name=\"").
                 append(p.getName()).append("\" expr=\"").
-                append(p.getExpr()).append("\"/>\n");
+                append(SCXMLHelper.escapeXML(p.getExpr())).append("\"/>\n");
         }
         Finalize f = i.getFinalize();
         if (f != null) {
@@ -289,7 +289,8 @@ public static void serializeTransition(final StringBuffer b,
             b.append(" event=\"").append(t.getEvent()).append("\"");
         }
         if (!SCXMLHelper.isStringEmpty(t.getCond())) {
-            b.append(" cond=\"").append(t.getCond()).append("\"");
+            b.append(" cond=\"").append(SCXMLHelper.escapeXML(t.getCond())).
+                append("\"");
         }
         boolean next = !SCXMLHelper.isStringEmpty(t.getNext());
         if (next) {
@@ -362,7 +363,8 @@ public static void serializeDatamodel(final StringBuffer b,
                 } else {
                     b.append(indent).append(INDENT).append("<data id=\"").
                         append(datum.getId()).append("\" expr=\"").
-                        append(datum.getExpr()).append("\" />\n");
+                        append(SCXMLHelper.escapeXML(datum.getExpr())).
+                        append("\" />\n");
                 }
             }
             b.append(indent).append("</datamodel>\n");
@@ -423,8 +425,9 @@ public static boolean serializeActions(final StringBuffer b, final List l,
             if (a instanceof Var) {
                 Var v = (Var) a;
                 b.append(indent).append("<var name=\"").append(v.getName())
-                        .append("\" expr=\"").append(v.getExpr()).append(
-                                "\"/>\n");
+                    .append("\" expr=\"")
+                    .append(SCXMLHelper.escapeXML(v.getExpr()))
+                    .append("\"/>\n");
             } else if (a instanceof Assign) {
                 Assign asn = (Assign) a;
                 b.append(indent).append("<assign");
@@ -433,11 +436,13 @@ public static boolean serializeActions(final StringBuffer b, final List l,
                     if (!SCXMLHelper.isStringEmpty(asn.getSrc())) {
                         b.append("\" src=\"").append(asn.getSrc());
                     } else {
-                        b.append("\" expr=\"").append(asn.getExpr());
+                        b.append("\" expr=\"").
+                            append(SCXMLHelper.escapeXML(asn.getExpr()));
                     }
                 } else {
                     b.append(" name=\"").append(asn.getName()).
-                        append("\" expr=\"").append(asn.getExpr());
+                        append("\" expr=\"").
+                        append(SCXMLHelper.escapeXML(asn.getExpr()));
                 }
                 b.append("\"/>\n");
             } else if (a instanceof Send) {
@@ -448,12 +453,13 @@ public static boolean serializeActions(final StringBuffer b, final List l,
                     .append(c.getSendid()).append("\"/>\n");
             } else if (a instanceof Log) {
                 Log lg = (Log) a;
-                b.append(indent).append("<log expr=\"").append(lg.getExpr())
-                        .append("\"/>\n");
+                b.append(indent).append("<log expr=\"").
+                    append(SCXMLHelper.escapeXML(lg.getExpr())).
+                    append("\"/>\n");
             } else if (a instanceof Exit) {
                 Exit e = (Exit) a;
                 b.append(indent).append("<exit");
-                String expr = e.getExpr();
+                String expr = SCXMLHelper.escapeXML(e.getExpr());
                 String nl = e.getNamelist();
                 if (expr != null) {
                     b.append(" expr=\"" + expr + "\"");
@@ -471,7 +477,8 @@ public static boolean serializeActions(final StringBuffer b, final List l,
             } else if (a instanceof ElseIf) {
                 ElseIf eif = (ElseIf) a;
                 b.append(indent).append("<elseif cond=\"")
-                        .append(eif.getCond()).append("\" />\n");
+                    .append(SCXMLHelper.escapeXML(eif.getCond()))
+                    .append("\" />\n");
             }
         }
         return exit;
@@ -538,8 +545,8 @@ public static final String getBodyContent(
      */
     public static void serializeIf(final StringBuffer b,
             final If iff, final String indent) {
-        b.append(indent).append("<if cond=\"").append(iff.getCond()).append(
-                "\">\n");
+        b.append(indent).append("<if cond=\"").append(SCXMLHelper.
+            escapeXML(iff.getCond())).append("\">\n");
         serializeActions(b, iff.getActions(), indent + INDENT);
         b.append(indent).append("</if>\n");
     }
diff --git a/src/test/java/org/apache/commons/scxml/io/SCXMLSerializerTest.java b/src/test/java/org/apache/commons/scxml/io/SCXMLSerializerTest.java
index 216c5bed8..19a93e15e 100644
--- a/src/test/java/org/apache/commons/scxml/io/SCXMLSerializerTest.java
+++ b/src/test/java/org/apache/commons/scxml/io/SCXMLSerializerTest.java
@@ -35,6 +35,7 @@
 import org.apache.commons.scxml.model.SCXML;
 import org.apache.commons.scxml.model.Send;
 import org.apache.commons.scxml.model.State;
+import org.apache.commons.scxml.model.Transition;
 import org.apache.commons.scxml.model.TransitionTarget;
 import org.apache.commons.scxml.model.Var;
 
@@ -287,4 +288,18 @@ public void testSerializeOnExit() {
         assertEquals(actualValue, returnValue.toString());
     }
 
+    public void testSerializeTransitionEscapeXML() {
+        Transition t = new Transition();
+
+        // note: the '<' char has to be escaped to "&lt;" to create valid XML
+        t.setCond("i < 3");
+
+        String actualValue = "<transition cond=\"i &lt; 3\">\n</transition>\n";
+
+        StringBuffer returnValue = new StringBuffer();
+        SCXMLSerializer.serializeTransition(returnValue, t, "");
+
+        assertEquals(actualValue, returnValue.toString());
+    }
+
 }
