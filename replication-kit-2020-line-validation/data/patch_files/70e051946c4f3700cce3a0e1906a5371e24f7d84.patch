From 70e051946c4f3700cce3a0e1906a5371e24f7d84 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 10 Jul 2013 12:08:52 +0000
Subject: [PATCH] IO-389 FileUtils.sizeOfDirectory can throw
 IllegalArgumentException

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1501744 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  3 +++
 .../java/org/apache/commons/io/FileUtils.java  | 18 +++++++++++++++---
 2 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b24db9f6bba..a0f7047eb26 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -47,6 +47,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <!-- The release date is the date RC is cut -->
     <release version="2.5" date="2013-??-??" description="New features and bug fixes.">    
+      <action issue="IO-389" dev="sebb" type="fix" due-to="Austin Doupnik">
+         FileUtils.sizeOfDirectory can throw IllegalArgumentException
+      </action>
       <action issue="IO-390" dev="sebb" type="fix">
          FileUtils.sizeOfDirectoryAsBigInteger can overflow.
          Ensure that recursive calls all use BigInteger
diff --git a/src/main/java/org/apache/commons/io/FileUtils.java b/src/main/java/org/apache/commons/io/FileUtils.java
index ec2f994e4d7..8b2ea2e6530 100644
--- a/src/main/java/org/apache/commons/io/FileUtils.java
+++ b/src/main/java/org/apache/commons/io/FileUtils.java
@@ -2519,7 +2519,7 @@ public static long sizeOf(final File file) {
         }
 
         if (file.isDirectory()) {
-            return sizeOfDirectory(file);
+            return sizeOfDirectory0(file); // private method; expects directory
         } else {
             return file.length();
         }
@@ -2566,7 +2566,6 @@ public static BigInteger sizeOfAsBigInteger(final File file) {
      * overflow occurs. See {@link #sizeOfDirectoryAsBigInteger(File)} for an alternative
      * method that does not overflow.
      *
-     *
      * @param directory
      *            directory to inspect, must not be {@code null}
      * @return size of directory in bytes, 0 if directory is security restricted, a negative number when the real total
@@ -2576,7 +2575,11 @@ public static BigInteger sizeOfAsBigInteger(final File file) {
      */
     public static long sizeOfDirectory(final File directory) {
         checkDirectory(directory);
+        return sizeOfDirectory0(directory);
+    }
 
+    // Private method, must be invoked will a directory parameter
+    private static long sizeOfDirectory0(final File directory) {
         final File[] files = directory.listFiles();
         if (files == null) {  // null if security restricted
             return 0L;
@@ -2586,7 +2589,7 @@ public static long sizeOfDirectory(final File directory) {
         for (final File file : files) {
             try {
                 if (!isSymlink(file)) {
-                    size += sizeOf(file);
+                    size += sizeOf0(file); // internal method
                     if (size < 0) {
                         break;
                     }
@@ -2599,6 +2602,15 @@ public static long sizeOfDirectory(final File directory) {
         return size;
     }
 
+    // Internal method - does not check existence
+    private static long sizeOf0(File file) {
+        if (file.isDirectory()) {
+            return sizeOfDirectory0(file);
+        } else {
+            return file.length(); // will be 0 if file does not exist
+        }
+    }
+
     /**
      * Counts the size of a directory recursively (sum of the length of all files).
      *
