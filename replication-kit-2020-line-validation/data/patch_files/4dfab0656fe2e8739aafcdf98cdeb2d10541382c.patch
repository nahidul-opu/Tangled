From 4dfab0656fe2e8739aafcdf98cdeb2d10541382c Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Mon, 30 Jan 2006 17:57:44 +0000
Subject: [PATCH] first attempt to fix IVY-159

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/trunk@484193 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  3 +-
 src/java/fr/jayasoft/ivy/Ivy.java             |  2 +-
 .../jayasoft/ivy/resolver/BasicResolver.java  | 13 +++-
 .../jayasoft/ivy/resolver/ChainResolver.java  | 11 ++-
 test/java/fr/jayasoft/ivy/ResolveTest.java    | 78 +++++++++++++++++++
 5 files changed, 97 insertions(+), 10 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index d29658b90..63b507903 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,8 +1,9 @@
 - IMPROVE: add regexp management in the install ant task (IVY-154)
 
+- attempt to fix IVY-159
 - FIX: HTML report shouldn't display the dependencies of evicted modules (IVY-158) (thanks to Maarten Coene)
 - FIX: bug when an organisation or module or revision contains a space (IVY-157)
-- slight modification of xsd in attempt to fix IVY-156
+- FIX: cos-nonambig warnings (IVY-156)
 
    version 1.3-RC1 - 2006-01-25
 ===============================
diff --git a/src/java/fr/jayasoft/ivy/Ivy.java b/src/java/fr/jayasoft/ivy/Ivy.java
index 72b61f888..18a2afde7 100644
--- a/src/java/fr/jayasoft/ivy/Ivy.java
+++ b/src/java/fr/jayasoft/ivy/Ivy.java
@@ -1223,7 +1223,7 @@ public ResolvedModuleRevision findModuleInCache(ModuleRevisionId mrid, File cach
                         }
                     }
                     if (resolver != null) {
-                        Message.debug("\tfound ivy file in cache for "+mrid+": "+ivyFile);
+                        Message.debug("\tfound ivy file in cache for "+mrid+" (resolved by "+resolver.getName()+"): "+ivyFile);
                         return new DefaultModuleRevision(resolver, depMD, false, false);
                     } else {
                         Message.debug("\tresolver not found: "+resolverName+" => cannot use cached ivy file for "+mrid);                                    
diff --git a/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java b/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
index bb339dffb..4f86e3c0e 100644
--- a/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
+++ b/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
@@ -134,8 +134,8 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
         if (mrid.isExactRevision() && !isCheckmodified() && !dd.isChanging()) {
             ResolvedModuleRevision rmr = findModuleInCache(data, mrid);
             if (rmr != null) {
-                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this) {
-                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+": but it's a default one, maybe we can find a better one");
+                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this && isResolved(data, mrid)) {
+                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+" (resolved by "+rmr.getResolver().getName()+"): but it's a default one, maybe we can find a better one");
                 } else {
                     Message.verbose("\t"+getName()+": revision in cache: "+mrid);
                     return toSystem(rmr);
@@ -201,8 +201,8 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
             // now let's see if we can find it in cache and if it is up to date
             ResolvedModuleRevision rmr = findModuleInCache(data, resolvedMrid);
             if (rmr != null) {
-                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this) {
-                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+": but it's a default one, maybe we can find a better one");
+                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this && isResolved(data, resolvedMrid)) {
+                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+" (resolved by "+rmr.getResolver().getName()+"): but it's a default one, maybe we can find a better one");
                 } else {
                     if (!isCheckmodified() && !dd.isChanging()) {
                         Message.verbose("\t"+getName()+": revision in cache: "+mrid);
@@ -363,6 +363,11 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
         return new DefaultModuleRevision(this, systemMd, searched, downloaded);
     }
 
+    private boolean isResolved(ResolveData data, ModuleRevisionId mrid) {
+        IvyNode node = getSystemNode(data, mrid);
+        return node != null && node.getModuleRevision() != null;
+    }
+
     private boolean checkDescriptorConsistency(ModuleRevisionId mrid, ModuleDescriptor md, ResolvedResource ivyRef) {
         boolean ok = true;
         if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
diff --git a/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java b/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
index 4334d267c..d3d9b0029 100644
--- a/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
+++ b/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
@@ -77,7 +77,10 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
                         (!dd.getDependencyRevisionId().isExactRevision() 
                          || (ret == null || ret.getDescriptor().isDefault()))) {
                     // check if latest is asked and compare to return the most recent
-                    if (ret == null || isAfter(mr, ret, data.getDate())) {
+                    if (ret == null) {
+                        Message.debug("\tmodule revision kept as first found: "+mr.getId());
+                        ret = mr;
+                    } else if (isAfter(mr, ret, data.getDate())) {
                         Message.debug("\tmodule revision kept as younger: "+mr.getId());
                         ret = mr;
                     } else if (ret != null && !mr.getDescriptor().isDefault() && ret.getDescriptor().isDefault()) {
@@ -127,10 +130,10 @@ private LatestStrategy setLatestIfRequired(DependencyResolver resolver, LatestSt
      */
     private boolean isAfter(ResolvedModuleRevision rmr1, ResolvedModuleRevision rmr2, Date date) {
         ArtifactInfo[] ais = new ArtifactInfo[] {
-                new ResolvedModuleRevisionArtifactInfo(rmr1),
-                new ResolvedModuleRevisionArtifactInfo(rmr2)
+                new ResolvedModuleRevisionArtifactInfo(rmr2),
+                new ResolvedModuleRevisionArtifactInfo(rmr1)
         };
-        return getLatestStrategy().findLatest(ais, date) != ais[1];
+        return getLatestStrategy().findLatest(ais, date) != ais[0];
     }
 
     public void reportFailure() {
diff --git a/test/java/fr/jayasoft/ivy/ResolveTest.java b/test/java/fr/jayasoft/ivy/ResolveTest.java
index 2466b9542..71912be7c 100644
--- a/test/java/fr/jayasoft/ivy/ResolveTest.java
+++ b/test/java/fr/jayasoft/ivy/ResolveTest.java
@@ -23,6 +23,7 @@
 import fr.jayasoft.ivy.report.ResolveReport;
 import fr.jayasoft.ivy.report.XmlReportOutputter;
 import fr.jayasoft.ivy.resolver.DualResolver;
+import fr.jayasoft.ivy.resolver.FileSystemResolver;
 import fr.jayasoft.ivy.util.FileUtil;
 
 /**
@@ -75,6 +76,83 @@ public void testResolveSimple() throws Exception {
         assertTrue(_ivy.getArchiveFileInCache(_cache, "org1", "mod1.2", "2.0", "mod1.2", "jar", "jar").exists());
     }
 
+    public void testFromCache() throws Exception {
+        // mod1.1 depends on mod1.2
+        
+        // we first do a simple resolve so that module is in cache
+        _ivy.resolve(new File("test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml").toURL(),
+                null, new String[] {"*"}, _cache, null, true);
+
+        // we now use a badly configured ivy, so that it can't find module in repository
+        Ivy ivy = new Ivy();
+        ivy.configure(new File("test/repositories/bugIVY-56/ivyconf.xml"));
+        
+        ResolveReport report = ivy.resolve(new File("test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml").toURL(),
+                null, new String[] {"*"}, _cache, null, true);
+        assertFalse(report.hasError());
+
+        ModuleDescriptor md = report.getModuleDescriptor();
+
+        ModuleRevisionId mrid = ModuleRevisionId.newInstance("org1", "mod1.1", "1.0");
+        assertEquals(mrid, md.getModuleRevisionId());
+        
+        assertTrue(_ivy.getResolvedIvyFileInCache(_cache, mrid).exists());
+        
+        // dependencies
+        assertTrue(_ivy.getIvyFileInCache(_cache, ModuleRevisionId.newInstance("org1", "mod1.2", "2.0")).exists());
+        assertTrue(_ivy.getArchiveFileInCache(_cache, "org1", "mod1.2", "2.0", "mod1.2", "jar", "jar").exists());
+    }
+
+    public void testFromCache2() throws Exception {
+        // mod1.1 depends on mod1.2
+
+        // configuration
+        Ivy ivy = new Ivy();
+        DualResolver resolver = new DualResolver();
+        resolver.setName("dual");
+        FileSystemResolver r = new FileSystemResolver();
+        r.setName("1");
+        r.addArtifactPattern("build/testCache2/[artifact]-[revision].[ext]");
+        resolver.add(r);
+        r = new FileSystemResolver();
+        r.setName("2");
+        r.addArtifactPattern("build/testCache2/[artifact]-[revision].[ext]");
+        resolver.add(r);
+        ivy.addResolver(resolver);
+        ivy.setDefaultResolver("dual");
+        
+        // set up repository
+        File art = new File("build/testCache2/mod1.2-2.0.jar");
+        FileUtil.copy(new File("test/repositories/1/org1/mod1.2/jars/mod1.2-2.0.jar"), art, null);
+
+        // we first do a simple resolve so that module is in cache
+        ResolveReport report = ivy.resolve(new File("test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml").toURL(),
+                null, new String[] {"*"}, _cache, null, true);
+        assertFalse(report.hasError());
+
+        // now we clean the repository to simulate repo not available (network pb for instance)
+        Delete del = new Delete();
+        del.setProject(new Project());
+        del.setDir(new File("build/testCache2"));
+        del.execute();
+        
+        // now do a new resolve: it should use cached data
+        report = ivy.resolve(new File("test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml").toURL(),
+                null, new String[] {"*"}, _cache, null, true);
+        assertFalse(report.hasError());
+
+        ModuleDescriptor md = report.getModuleDescriptor();
+
+        ModuleRevisionId mrid = ModuleRevisionId.newInstance("org1", "mod1.1", "1.0");
+        assertEquals(mrid, md.getModuleRevisionId());
+        
+        assertTrue(_ivy.getResolvedIvyFileInCache(_cache, mrid).exists());
+        
+        // dependencies
+        assertTrue(_ivy.getIvyFileInCache(_cache, ModuleRevisionId.newInstance("org1", "mod1.2", "2.0")).exists());
+        assertTrue(_ivy.getArchiveFileInCache(_cache, "org1", "mod1.2", "2.0", "mod1.2", "jar", "jar").exists());
+    }
+
     public void testFromCacheOnly() throws Exception {
         Ivy ivy = new Ivy();
         ivy.configure(new File("test/repositories/bugIVY-56/ivyconf.xml"));
