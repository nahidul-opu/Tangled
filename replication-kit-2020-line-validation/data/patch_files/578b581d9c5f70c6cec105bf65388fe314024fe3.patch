From 578b581d9c5f70c6cec105bf65388fe314024fe3 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 29 Feb 2012 21:11:35 +0000
Subject: [PATCH] [CONFIGURATION-481] Improved variable substitution in
 configuration sources created by a DefaultConfigurationBuilder. It is now
 possible to reference properties of other sources. (Obviously, this already
 worked in Configuration 1.6.)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1295276 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../DefaultConfigurationBuilder.java          | 48 +++++++++++++++++--
 .../interpol/ConfigurationInterpolator.java   |  4 +-
 .../TestDefaultConfigurationBuilder.java      | 25 ++++++++++
 .../resources/testInterpolation.properties    | 22 +++++++++
 src/test/resources/testInterpolation.xml      | 31 ++++++++++++
 .../resources/testInterpolationBuilder.xml    | 31 ++++++++++++
 7 files changed, 160 insertions(+), 5 deletions(-)
 create mode 100644 src/test/resources/testInterpolation.properties
 create mode 100644 src/test/resources/testInterpolation.xml
 create mode 100644 src/test/resources/testInterpolationBuilder.xml

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 1a52ba358a..150d0e3261 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,10 @@
   <body>
     <release version="1.9" date="in SVN"
       description="TBD">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-481">
+        Variable substitution in configuration sources declared in a definition
+        file for DefaultConfigurationBuilder now works across multiple sources.
+      </action>
     </release>
 
     <release version="1.8" date="2012-02-04"
diff --git a/src/main/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java b/src/main/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
index 91d9a50496..22b08612b9 100644
--- a/src/main/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
+++ b/src/main/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
@@ -414,6 +414,27 @@ public class DefaultConfigurationBuilder extends XMLConfiguration implements
      */
     private static final long serialVersionUID = -3113777854714492123L;
 
+    /**
+     * A specialized {@code StrLookup} object which operates on the combined
+     * configuration constructed by this builder. This object is used as
+     * default lookup for {@code ConfigurationInterpolator} objects assigned to
+     * newly created configuration objects.
+     */
+    private final StrLookup combinedConfigLookup = new StrLookup()
+    {
+        @Override
+        public String lookup(String key)
+        {
+            if (constructedConfiguration != null)
+            {
+                Object value =
+                        constructedConfiguration.resolveContainerStore(key);
+                return (value != null) ? value.toString() : null;
+            }
+            return null;
+        }
+    };
+
     /** Stores the configuration that is currently constructed.*/
     private CombinedConfiguration constructedConfiguration;
 
@@ -538,7 +559,7 @@ public void addConfigurationProvider(String tagName,
      */
     public ConfigurationProvider removeConfigurationProvider(String tagName)
     {
-        return (ConfigurationProvider) providers.remove(tagName);
+        return providers.remove(tagName);
     }
 
     /**
@@ -550,7 +571,7 @@ public ConfigurationProvider removeConfigurationProvider(String tagName)
      */
     public ConfigurationProvider providerForTag(String tagName)
     {
-        return (ConfigurationProvider) providers.get(tagName);
+        return providers.get(tagName);
     }
 
     /**
@@ -1297,7 +1318,9 @@ public Object createBean(Class<?> beanClass, BeanDeclaration data,
 
             try
             {
-                return provider.getConfiguration(decl);
+                AbstractConfiguration config = provider.getConfiguration(decl);
+                installInterpolator(decl, config);
+                return config;
             }
             catch (Exception ex)
             {
@@ -1347,6 +1370,25 @@ public Class<?> getDefaultBeanClass()
             // will complain that the bean's class cannot be determined
             return Configuration.class;
         }
+
+        /**
+         * Installs a specialized {@code ConfigurationInterpolator} on a newly
+         * created configuration which also takes the combined configuration
+         * created by the builder into account. With this
+         * {@code ConfigurationInterpolator} the interpolation facilities of
+         * this child configuration are extended to include all other
+         * configurations created by this builder.
+         *
+         * @param decl the {@code ConfigurationDeclaration}
+         * @param config the newly created configuration instance
+         */
+        private void installInterpolator(ConfigurationDeclaration decl,
+                AbstractConfiguration config)
+        {
+            ConfigurationInterpolator parent = new ConfigurationInterpolator();
+            parent.setDefaultLookup(decl.getConfigurationBuilder().combinedConfigLookup);
+            config.getInterpolator().setParentInterpolator(parent);
+        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java b/src/main/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
index 91a66bc660..07f0444d5b 100644
--- a/src/main/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
+++ b/src/main/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
@@ -296,7 +296,7 @@ public String lookup(String var)
             String value = fetchLookupForPrefix(prefix).lookup(name);
             if (value == null && getParentInterpolator() != null)
             {
-                value = getParentInterpolator().fetchLookupForPrefix(prefix).lookup(name);
+                value = getParentInterpolator().lookup(name);
             }
             if (value != null)
             {
@@ -306,7 +306,7 @@ public String lookup(String var)
         String value = fetchNoPrefixLookup().lookup(var);
         if (value == null && getParentInterpolator() != null)
         {
-            value = getParentInterpolator().fetchNoPrefixLookup().lookup(var);
+            value = getParentInterpolator().lookup(var);
         }
         return value;
     }
diff --git a/src/test/java/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java b/src/test/java/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
index 35e7027710..0a63473bb6 100644
--- a/src/test/java/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
+++ b/src/test/java/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
@@ -1188,6 +1188,31 @@ public void testExpression() throws Exception
         }
     }
 
+    /**
+     * Tests whether variable substitution works across multiple child
+     * configurations. This test is related to CONFIGURATION-481.
+     */
+    @Test
+    public void testInterpolationOverMultipleSources()
+            throws ConfigurationException
+    {
+        File testFile =
+                ConfigurationAssert.getTestFile("testInterpolationBuilder.xml");
+        factory.setFile(testFile);
+        CombinedConfiguration combConfig = factory.getConfiguration(true);
+        assertEquals("Wrong value", "abc-product",
+                combConfig.getString("products.product.desc"));
+        XMLConfiguration xmlConfig =
+                (XMLConfiguration) combConfig.getConfiguration("test");
+        assertEquals("Wrong value from XML config", "abc-product",
+                xmlConfig.getString("products/product/desc"));
+        SubnodeConfiguration subConfig =
+                xmlConfig
+                        .configurationAt("products/product[@name='abc']", true);
+        assertEquals("Wrong value from sub config", "abc-product",
+                subConfig.getString("desc"));
+    }
+
     private void verify(String key, CombinedConfiguration config, int rows)
     {
         System.setProperty("Id", key);
diff --git a/src/test/resources/testInterpolation.properties b/src/test/resources/testInterpolation.properties
new file mode 100644
index 0000000000..7ff3dc8de0
--- /dev/null
+++ b/src/test/resources/testInterpolation.properties
@@ -0,0 +1,22 @@
+#   Licensed to the Apache Software Foundation (ASF) under one or more
+#   contributor license agreements.  See the NOTICE file distributed with
+#   this work for additional information regarding copyright ownership.
+#   The ASF licenses this file to You under the Apache License, Version 2.0
+#   (the "License"); you may not use this file except in compliance with
+#   the License.  You may obtain a copy of the License at
+#
+#       http://www.apache.org/licenses/LICENSE-2.0
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS,
+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#   See the License for the specific language governing permissions and
+#   limitations under the License.
+
+# A test configuration file for testing variable substitution across multiple
+# configuration sources created by a DefaultConfigurationBuilder.
+# This properties configuration defines a property which is referenced by
+# another configuration source.
+# $Id:$
+myvar=abc
+
diff --git a/src/test/resources/testInterpolation.xml b/src/test/resources/testInterpolation.xml
new file mode 100644
index 0000000000..270ad8a503
--- /dev/null
+++ b/src/test/resources/testInterpolation.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<!--
+  A test configuration file for testing variable substitution across multiple
+  configuration sources created by a DefaultConfigurationBuilder.
+  This XML configuration references a variable defined by another configuration
+  source.
+  $Id:$
+-->
+<test>
+  <products>
+    <product name="abc">
+      <desc>${myvar}-product</desc>
+    </product>
+  </products>
+</test>
diff --git a/src/test/resources/testInterpolationBuilder.xml b/src/test/resources/testInterpolationBuilder.xml
new file mode 100644
index 0000000000..441c1e336a
--- /dev/null
+++ b/src/test/resources/testInterpolationBuilder.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<!--
+  A test configuration file for testing variable substitution across multiple
+  configuration sources created by a DefaultConfigurationBuilder.
+  This configuration definition file for a DefaultConfigurationBuilder
+  references multiple sources which contain variable references.
+  $Id:$
+-->
+<configuration>
+  <system/>
+  <properties fileName="testInterpolation.properties"/>
+  <xml fileName="testInterpolation.xml" config-name="test">
+    <expressionEngine config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+  </xml>
+</configuration>
