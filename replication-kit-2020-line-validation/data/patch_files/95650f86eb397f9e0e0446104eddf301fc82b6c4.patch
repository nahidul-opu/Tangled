From 95650f86eb397f9e0e0446104eddf301fc82b6c4 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Sat, 19 Jan 2013 13:40:09 +0000
Subject: [PATCH] [MATH-930] Add info the class javadoc wrt convergence
 criteria, add another ctor to only adjust the epsilon value.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1435544 13f79535-47bb-0310-9956-ffa450edef68
---
 .../math3/optim/linear/SimplexSolver.java     | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java
index f72a542d09..6fb85d4568 100644
--- a/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java
@@ -24,6 +24,23 @@
 
 /**
  * Solves a linear problem using the "Two-Phase Simplex" method.
+ * <p>
+ * <b>Note:</b> Depending on the problem definition, the default convergence criteria
+ * may be too strict, resulting in {@link NoFeasibleSolutionException} or
+ * {@link TooManyIterationsException}. In such a case it is advised to adjust these
+ * criteria with more appropriate values, e.g. relaxing the epsilon value.
+ * <p>
+ * Default convergence criteria:
+ * <ul>
+ *   <li>Algorithm convergence: 1e-6</li>
+ *   <li>Floating-point comparisons: 10 ulp</li>
+ * </ul>
+ * <p>
+ * It may also be counter-productive to provide a too large value for {@link MaxIter}
+ * as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData...)},
+ * as the {@link SimplexSolver} will use different strategies depending on the current iteration
+ * count. After half of the allowed max iterations has already been reached, the strategy to select
+ * pivot rows will change in order to break possible cycles due to degenerate problems.
  *
  * @version $Id$
  * @since 2.0
@@ -48,6 +65,15 @@ public SimplexSolver() {
         this(DEFAULT_EPSILON, DEFAULT_ULPS);
     }
 
+    /**
+     * Builds a simplex solver with a specified accepted amount of error.
+     *
+     * @param epsilon Amount of error to accept for algorithm convergence.
+     */
+    public SimplexSolver(final double epsilon) {
+        this(epsilon, DEFAULT_ULPS);
+    }
+
     /**
      * Builds a simplex solver with a specified accepted amount of error.
      *
