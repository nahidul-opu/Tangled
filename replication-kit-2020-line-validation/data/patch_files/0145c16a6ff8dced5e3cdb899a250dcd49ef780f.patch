From 0145c16a6ff8dced5e3cdb899a250dcd49ef780f Mon Sep 17 00:00:00 2001
From: Jochen Wiedmann <jochen@apache.org>
Date: Tue, 1 Mar 2011 22:10:10 +0000
Subject: [PATCH] PR: COLLECTIONS-360 Prevent an NPE in
 FilterListIterator.next() and FilterListIterator.previous()

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1076034 13f79535-47bb-0310-9956-ffa450edef68
---
 pom.xml                                          |  3 +++
 .../iterators/FilterListIterator.java            |  6 ++++++
 .../iterators/TestFilterListIterator.java        | 16 ++++++++++++++++
 3 files changed, 25 insertions(+)

diff --git a/pom.xml b/pom.xml
index 2ad7b1ef28..2edbcb455c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -350,6 +350,9 @@
     <contributor>
       <name>Serhiy Yevtushenko</name>
     </contributor>
+    <contributor>
+      <name>Sai Zhang</name>
+    </contributor>
     <contributor>
       <name>Jason van Zyl</name>
     </contributor>
diff --git a/src/java/org/apache/commons/collections/iterators/FilterListIterator.java b/src/java/org/apache/commons/collections/iterators/FilterListIterator.java
index 7e9b4bf80b..8c2d65002b 100644
--- a/src/java/org/apache/commons/collections/iterators/FilterListIterator.java
+++ b/src/java/org/apache/commons/collections/iterators/FilterListIterator.java
@@ -227,6 +227,9 @@ private boolean setNextObject() {
             clearNextObject();
         }
 
+        if (iterator == null) {
+            return false;
+        }
         while (iterator.hasNext()) {
             E object = iterator.next();
             if (predicate.evaluate(object)) {
@@ -256,6 +259,9 @@ private boolean setPreviousObject() {
             clearPreviousObject();
         }
 
+        if (iterator == null) {
+            return false;
+        }
         while (iterator.hasPrevious()) {
             E object = iterator.previous();
             if (predicate.evaluate(object)) {
diff --git a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java
index 57c60a077e..a18514db8a 100644
--- a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java
+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java
@@ -17,12 +17,16 @@
 package org.apache.commons.collections.iterators;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Random;
 
 import junit.framework.TestCase;
 import org.apache.commons.collections.Predicate;
+import org.apache.commons.collections.PredicateUtils;
+import org.apache.commons.collections.list.GrowthList;
+import org.junit.Assert;
 
 /**
  * Tests the FilterListIterator class.
@@ -279,6 +283,18 @@ public void testFailingHasNextBug() {
         assertEquals(expected.previous(), filtered.previous());
     }
 
+    /**
+     * Test for {@link https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360}.
+     */
+    public void testCollections360() throws Throwable {
+        Collection<Predicate<Object>> var7 = new GrowthList<Predicate<Object>>();
+        Predicate<Object> var9 = PredicateUtils.anyPredicate(var7);
+        FilterListIterator<Object> var13 = new FilterListIterator<Object>(var9);
+        Assert.assertFalse(var13.hasNext());
+        FilterListIterator<Object> var14 = new FilterListIterator<Object>(var9);
+        Assert.assertFalse(var14.hasPrevious());
+    }
+
     // Utilities
 
     private void walkForward(ListIterator<?> expected, ListIterator<?> testing) {
