From a23dfda185b8414033aa2350c75fcd56a0911728 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Thu, 1 Dec 2016 20:54:45 +0000
Subject: [PATCH] [CONFIGURATION-641] Improved exception when loading
 PropertiesConfiguration.

It is now checked whether the locator has been correctly initialized.
If not, an exception with a helpful message is thrown.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1772267 13f79535-47bb-0310-9956-ffa450edef68
---
 .../PropertiesConfiguration.java              |  8 ++-
 .../TestPropertiesConfiguration.java          | 52 +++++++++++--------
 2 files changed, 36 insertions(+), 24 deletions(-)

diff --git a/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
index 831a37cfc0..5c4b1f0ac1 100644
--- a/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java
@@ -1421,7 +1421,13 @@ private static boolean needsUnescape(char ch)
      */
     private void loadIncludeFile(String fileName) throws ConfigurationException
     {
-        assert locator != null : "Locator has not been set!";
+        if (locator == null)
+        {
+            throw new ConfigurationException("Load operation not properly "
+                    + "initialized! Do not call read(InputStream) directly,"
+                    + " but use a FileHandler to load a configuration.");
+        }
+
         URL url = locateIncludeFile(locator.getBasePath(), fileName);
         if (url == null)
         {
diff --git a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
index 6c6a960628..93215f35cf 100644
--- a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java
@@ -17,29 +17,7 @@
 
 package org.apache.commons.configuration2;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.io.UnsupportedEncodingException;
-import java.io.Writer;
+import java.io.*;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
@@ -71,6 +49,9 @@
 import org.junit.Rule;
 import org.junit.rules.TemporaryFolder;
 
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.junit.Assert.*;
+
 /**
  * Test for loading and saving properties files.
  *
@@ -1189,6 +1170,31 @@ public void testUnEscapeCharacters()
                 conf.getString("test.unescape.characters"));
     }
 
+    /**
+     * Tests a direct invocation of the read() method. This is not allowed
+     * because certain initializations have not been done. This test is
+     * related to CONFIGURATION-641.
+     */
+    @Test
+    public void testReadCalledDirectly() throws IOException
+    {
+        conf = new PropertiesConfiguration();
+        Reader in = new FileReader(ConfigurationAssert.getTestFile("test.properties"));
+        try
+        {
+            conf.read(in);
+            fail("No exception thrown!");
+        }
+        catch (ConfigurationException e)
+        {
+            assertThat(e.getMessage(), containsString("FileHandler"));
+        }
+        finally
+        {
+            in.close();
+        }
+    }
+
     /**
      * Helper method for testing the content of a list with elements that
      * contain backslashes.
