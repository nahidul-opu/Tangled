From f9e08f8eed413e17c5d7655c686e7f4019779950 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 17 Apr 2013 14:16:14 +0000
Subject: [PATCH] IO-368 ClassLoaderObjectInputStream does not handle primitive
 typed members

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1468926 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                             |  3 +++
 .../io/input/ClassLoaderObjectInputStream.java      | 13 +++++--------
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 957cebac363..a4285ac4582 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -47,6 +47,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <!-- The release date is the date RC is cut -->
     <release version="2.5" date="2013-??-??" description="New features and bug fixes.">    
+      <action issue="IO-368" dev="sebb" type="fix">
+        ClassLoaderObjectInputStream does not handle primitive typed members
+      </action>            
       <action issue="IO-341" dev="sebb" type="add">
          A constant for holding the BOM character (U+FEFF)
       </action>            
diff --git a/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java b/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
index eafb9c4621a..a7c7f252e78 100644
--- a/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
@@ -65,14 +65,11 @@ public ClassLoaderObjectInputStream(
     protected Class<?> resolveClass(final ObjectStreamClass objectStreamClass)
             throws IOException, ClassNotFoundException {
         
-        final Class<?> clazz = Class.forName(objectStreamClass.getName(), false, classLoader);
-
-        if (clazz != null) {
-            // the classloader knows of the class
-            return clazz;
-        } else {
-            // classloader knows not of class, let the super classloader do it
-            return super.resolveClass(objectStreamClass);
+        try {
+            return Class.forName(objectStreamClass.getName(), false, classLoader);
+        } catch (ClassNotFoundException cnfe) {
+            // delegate to super class loader which can resolve primitives
+            return super.resolveClass(objectStreamClass);            
         }
     }
 
