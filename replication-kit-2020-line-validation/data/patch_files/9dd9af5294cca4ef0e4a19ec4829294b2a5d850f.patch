From 9dd9af5294cca4ef0e4a19ec4829294b2a5d850f Mon Sep 17 00:00:00 2001
From: Avery Ching <aching@apache.org>
Date: Fri, 16 Sep 2011 20:56:44 +0000
Subject: [PATCH] GIRAPH-34: Failure of Vertex reflection for putVertexList
 from GIRAPH-27. (aching)

git-svn-id: https://svn.apache.org/repos/asf/incubator/giraph/trunk@1171776 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG                                     |  3 ++
 .../giraph/comm/BasicRPCCommunications.java   | 27 ++++++++++++------
 .../examples/SimpleCheckpointVertex.java      |  5 ++--
 .../org/apache/giraph/graph/BasicVertex.java  | 28 +++++++++++++++----
 .../java/org/apache/giraph/graph/Vertex.java  | 13 ++++-----
 .../giraph/TestVertexRangeBalancer.java       |  2 +-
 6 files changed, 53 insertions(+), 25 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index 587fa0e03..46ad7df27 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -2,6 +2,9 @@ Giraph Change Log
 
 Release 0.70.0 - unreleased
 
+  GIRAPH-34: Failure of Vertex reflection for putVertexList from
+  GIRAPH-27. (aching)
+
   GIRAPH-35: Modifying the site to indicate that Jake Mannix and
   Dmitriy Ryaboy are now Giraph committers. (aching)
 
diff --git a/src/main/java/org/apache/giraph/comm/BasicRPCCommunications.java b/src/main/java/org/apache/giraph/comm/BasicRPCCommunications.java
index 06a08c4ef..f1414ccb0 100644
--- a/src/main/java/org/apache/giraph/comm/BasicRPCCommunications.java
+++ b/src/main/java/org/apache/giraph/comm/BasicRPCCommunications.java
@@ -37,13 +37,13 @@
 import org.apache.log4j.Logger;
 
 import org.apache.giraph.bsp.CentralizedServiceWorker;
-import org.apache.giraph.graph.GiraphJob;
+import org.apache.giraph.graph.BasicVertex;
 import org.apache.giraph.graph.BspUtils;
-import org.apache.giraph.graph.VertexCombiner;
 import org.apache.giraph.graph.Edge;
-import org.apache.giraph.graph.Vertex;
+import org.apache.giraph.graph.GiraphJob;
 import org.apache.giraph.graph.MutableVertex;
-import org.apache.giraph.graph.BasicVertex;
+import org.apache.giraph.graph.Vertex;
+import org.apache.giraph.graph.VertexCombiner;
 import org.apache.giraph.graph.VertexMutations;
 import org.apache.giraph.graph.VertexRange;
 import org.apache.giraph.graph.VertexResolver;
@@ -423,6 +423,15 @@ protected abstract Server getRPCServer(
         InetSocketAddress addr,
         int numHandlers, String jobId, J jobToken) throws IOException;
 
+    /**
+     * Only constructor.
+     *
+     * @param context Context for getting configuration
+     * @param service Service worker to get the vertex ranges
+     * @throws IOException
+     * @throws UnknownHostException
+     * @throws InterruptedException
+     */
     public BasicRPCCommunications(Mapper<?, ?, ?, ?>.Context context,
                                   CentralizedServiceWorker<I, V, E, M> service)
             throws IOException, UnknownHostException, InterruptedException {
@@ -804,8 +813,8 @@ private InetSocketAddress getInetSocketAddress(I destVertex) {
     public final void sendMessageReq(I destVertex, M msg) {
         InetSocketAddress addr = getInetSocketAddress(destVertex);
         if (LOG.isDebugEnabled()) {
-            LOG.debug("sendMessage: Send bytes (" + msg.toString() + ") to " +
-                      destVertex + " with address " + addr);
+            LOG.debug("sendMessage: Send bytes (" + msg.toString() +
+                      ") to " + destVertex + " with address " + addr);
         }
         ++totalMsgsSentInSuperstep;
         Map<I, MsgList<M>> msgMap = null;
@@ -825,8 +834,10 @@ public final void sendMessageReq(I destVertex, M msg) {
                 msgMap.put(destVertex, msgList);
             }
             msgList.add(msg);
-            LOG.debug("sendMessage: added msg=" + msg + ", size=" +
-                      msgList.size());
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("sendMessage: added msg=" + msg + ", size=" +
+                          msgList.size());
+            }
             if (msgList.size() > maxSize) {
                 peerThreads.get(addr).flushLargeMsgList(destVertex);
             }
diff --git a/src/main/java/org/apache/giraph/examples/SimpleCheckpointVertex.java b/src/main/java/org/apache/giraph/examples/SimpleCheckpointVertex.java
index 1a81674d4..26673cde5 100644
--- a/src/main/java/org/apache/giraph/examples/SimpleCheckpointVertex.java
+++ b/src/main/java/org/apache/giraph/examples/SimpleCheckpointVertex.java
@@ -124,12 +124,13 @@ public void compute(Iterator<FloatWritable> msgIterator) {
             System.out.println("compute: vertex " + getVertexId() +
                                " sending edgeValue " + edgeValue +
                                " vertexValue " + vertexValue +
-                               " total " + (edgeValue.get() + (float) vertexValue) +
+                               " total " + (edgeValue.get() +
+                               (float) vertexValue) +
                                " to vertex " + targetVertexId +
                                " on superstep " + getSuperstep());
             edgeValue.set(edgeValue.get() + (float) vertexValue);
             addEdge(targetVertexId, edgeValue);
-            sendMsg(targetVertexId, edgeValue);
+            sendMsg(targetVertexId, new FloatWritable(edgeValue.get()));
         }
     }
 
diff --git a/src/main/java/org/apache/giraph/graph/BasicVertex.java b/src/main/java/org/apache/giraph/graph/BasicVertex.java
index ea9166092..9ea5466dd 100644
--- a/src/main/java/org/apache/giraph/graph/BasicVertex.java
+++ b/src/main/java/org/apache/giraph/graph/BasicVertex.java
@@ -18,6 +18,8 @@
 
 package org.apache.giraph.graph;
 
+import org.apache.hadoop.conf.Configurable;
+import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.io.WritableComparable;
 import org.apache.hadoop.mapreduce.Mapper;
@@ -37,9 +39,11 @@
 @SuppressWarnings("rawtypes")
 public abstract class BasicVertex<I extends WritableComparable,
         V extends Writable, E extends Writable, M extends Writable>
-        implements AggregatorUsage, Iterable<I> {
+        implements AggregatorUsage, Iterable<I>, Configurable {
     /** Global graph state **/
     private GraphState<I,V,E,M> graphState;
+    /** Configuration */
+    private Configuration conf;
 
     /**
      * Optionally defined by the user to be executed once on all workers
@@ -160,10 +164,12 @@ public long getNumEdges() {
     public abstract int getNumOutEdges();
 
     /**
-     * Send a message to a vertex id.
+     * Send a message to a vertex id.  The message should not be mutated after
+     * this method returns or else undefined results could occur.
      *
-     * @param id vertex id to send the message to
-     * @param msg message data to send
+     * @param id Vertex id to send the message to
+     * @param msg Message data to send.  Note that after the message is sent,
+     *        the user should not modify the object.
      */
     public void sendMsg(I id, M msg) {
         if (msg == null) {
@@ -182,8 +188,8 @@ public void sendMsg(I id, M msg) {
     /**
      * After this is called, the compute() code will no longer be called for
      * this vertice unless a message is sent to it.  Then the compute() code
-     * will be called once again until this function is called.  The application
-     * finishes only when all vertices vote to halt.
+     * will be called once again until this function is called.  The
+     * application finishes only when all vertices vote to halt.
      */
     public abstract void voteToHalt();
 
@@ -245,4 +251,14 @@ public final boolean useAggregator(String name) {
         return getGraphState().getGraphMapper().getAggregatorUsage().
             useAggregator(name);
     }
+
+    @Override
+    public Configuration getConf() {
+        return conf;
+    }
+
+    @Override
+    public void setConf(Configuration conf) {
+        this.conf = conf;
+    }
 }
diff --git a/src/main/java/org/apache/giraph/graph/Vertex.java b/src/main/java/org/apache/giraph/graph/Vertex.java
index 3cb558ae0..92b3cb73a 100644
--- a/src/main/java/org/apache/giraph/graph/Vertex.java
+++ b/src/main/java/org/apache/giraph/graph/Vertex.java
@@ -145,7 +145,7 @@ public int getNumOutEdges() {
     @Override
     public E removeEdge(I targetVertexId) {
         Edge<I, E> edge = destEdgeMap.remove(targetVertexId);
-        if(edge != null) {
+        if (edge != null) {
             return edge.getEdgeValue();
         } else {
             return null;
@@ -175,26 +175,23 @@ public final boolean isHalted() {
 
     @Override
     final public void readFields(DataInput in) throws IOException {
-        vertexId =
-            BspUtils.<I>createVertexIndex(getContext().getConfiguration());
+        vertexId = BspUtils.<I>createVertexIndex(getConf());
         vertexId.readFields(in);
         boolean hasVertexValue = in.readBoolean();
         if (hasVertexValue) {
-            vertexValue =
-                BspUtils.<V>createVertexValue(getContext().getConfiguration());
+            vertexValue = BspUtils.<V>createVertexValue(getConf());
             vertexValue.readFields(in);
         }
         long edgeMapSize = in.readLong();
         for (long i = 0; i < edgeMapSize; ++i) {
             Edge<I, E> edge = new Edge<I, E>();
-            edge.setConf(getContext().getConfiguration());
+            edge.setConf(getConf());
             edge.readFields(in);
             addEdge(edge.getDestVertexId(), edge.getEdgeValue());
         }
         long msgListSize = in.readLong();
         for (long i = 0; i < msgListSize; ++i) {
-            M msg =
-                BspUtils.<M>createMessageValue(getContext().getConfiguration());
+            M msg = BspUtils.<M>createMessageValue(getConf());
             msg.readFields(in);
             msgList.add(msg);
         }
diff --git a/src/test/java/org/apache/giraph/TestVertexRangeBalancer.java b/src/test/java/org/apache/giraph/TestVertexRangeBalancer.java
index 3ac2393f4..5378fb4fc 100644
--- a/src/test/java/org/apache/giraph/TestVertexRangeBalancer.java
+++ b/src/test/java/org/apache/giraph/TestVertexRangeBalancer.java
@@ -71,7 +71,7 @@ public void testSuperstepBalancer()
         removeAndSetOutput(job, outputPath);
         assertTrue(job.run(true));
         FileSystem hdfs = FileSystem.get(job.getConfiguration());
-        final int correctLen = 118;
+        final int correctLen = 123;
         if (getJobTracker() != null) {
             FileStatus [] fileStatusArr = hdfs.listStatus(outputPath);
             int totalLen = 0;
