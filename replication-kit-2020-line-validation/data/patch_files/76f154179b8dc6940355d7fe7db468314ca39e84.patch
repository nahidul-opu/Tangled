From 76f154179b8dc6940355d7fe7db468314ca39e84 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Sat, 13 Sep 2014 15:46:38 +0000
Subject: [PATCH] [MATH-1145] Fix integer overflows in MannWhitneyUTest. Thanks
 to Anders Conbere.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1624756 13f79535-47bb-0310-9956-ffa450edef68
---
 pom.xml                                             |  3 +++
 src/changes/changes.xml                             |  4 ++++
 .../math3/stat/inference/MannWhitneyUTest.java      |  6 +++---
 .../math3/stat/inference/MannWhitneyUTestTest.java  | 13 +++++++++++++
 4 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/pom.xml b/pom.xml
index 0ad0547635..40f9dad770 100644
--- a/pom.xml
+++ b/pom.xml
@@ -176,6 +176,9 @@
     <contributor>
       <name>Dan Checkoway</name>
     </contributor>
+    <contributor>
+      <name>Anders Conbere</name>
+    </contributor>
     <contributor>
       <name>Charles Cooper</name>
     </contributor>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a4a06972b9..6ce7623990 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,10 @@ Users are encouraged to upgrade to this version as this release not
   2. A few methods in the FastMath class are in fact slower that their
   counterpart in either Math or StrictMath (cf. MATH-740 and MATH-901).
 ">
+      <action dev="tn" type="fix" issue="MATH-1145" due-to="Anders Conbere">
+        Fix potential integer overflows in "MannWhitneyUTest" when providing
+        large sample arrays.
+      </action>
       <action dev="tn" type="fix" issue="MATH-1149" due-to="M Kim">
         Fixed potential null pointer dereferencing in constructor of
         "DummyStepInterpolator(DummyStepInterpolator)".
diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
index cb12075573..8f20f65982 100644
--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
@@ -145,12 +145,12 @@ public double mannWhitneyU(final double[] x, final double[] y)
          * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
          * e.g. x, n1 is the number of observations in sample 1.
          */
-        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
+        final double U1 = sumRankX - ((long) x.length * (x.length + 1)) / 2;
 
         /*
          * It can be shown that U1 + U2 = n1 * n2
          */
-        final double U2 = x.length * y.length - U1;
+        final double U2 = (long) x.length * y.length - U1;
 
         return FastMath.max(U1, U2);
     }
@@ -230,7 +230,7 @@ public double mannWhitneyUTest(final double[] x, final double[] y)
         /*
          * It can be shown that U1 + U2 = n1 * n2
          */
-        final double Umin = x.length * y.length - Umax;
+        final double Umin = (long) x.length * y.length - Umax;
 
         return calculateAsymptoticPValue(Umin, x.length, y.length);
     }
diff --git a/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java b/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java
index 45587a70d0..4e76b9604b 100644
--- a/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java
+++ b/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java
@@ -112,4 +112,17 @@ public void testBigDataSet() {
         double result = testStatistic.mannWhitneyUTest(d1, d2);
         Assert.assertTrue(result > 0.1);
     }
+    
+    @Test
+    public void testBigDataSetOverflow() {
+        // MATH-1145
+        double[] d1 = new double[110000];
+        double[] d2 = new double[110000];
+        for (int i = 0; i < 110000; i++) {
+            d1[i] = i;
+            d2[i] = i;
+        }
+        double result = testStatistic.mannWhitneyUTest(d1, d2);
+        Assert.assertTrue(result == 1.0);
+    }
 }
