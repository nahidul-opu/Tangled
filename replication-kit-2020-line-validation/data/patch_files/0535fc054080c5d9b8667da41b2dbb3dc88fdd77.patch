From 0535fc054080c5d9b8667da41b2dbb3dc88fdd77 Mon Sep 17 00:00:00 2001
From: Joerg Schaible <joehni@apache.org>
Date: Tue, 22 Sep 2015 13:14:58 +0000
Subject: [PATCH] VFS-297: Fix FileSystemOptions.compareTo(). Implement
 equals() and hashCode().

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1704617 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/vfs2/FileSystemOptions.java       | 64 +++++++++++++-
 .../commons/vfs2/FileSystemOptionsTest.java   | 85 +++++++++++++++++++
 2 files changed, 145 insertions(+), 4 deletions(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs2/FileSystemOptionsTest.java

diff --git a/core/src/main/java/org/apache/commons/vfs2/FileSystemOptions.java b/core/src/main/java/org/apache/commons/vfs2/FileSystemOptions.java
index 0f8ab9ee7d..c549d3bd93 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileSystemOptions.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileSystemOptions.java
@@ -16,7 +16,10 @@
  */
 package org.apache.commons.vfs2;
 
+import java.util.Arrays;
+import java.util.Iterator;
 import java.util.Map;
+import java.util.SortedMap;
 import java.util.TreeMap;
 
 /**
@@ -167,8 +170,27 @@ public int compareTo(final FileSystemOptions other)
             return 0;
         }
 
-        final int hash = options.hashCode();
-        final int hashFk = other.options.hashCode();
+        // ensure proper sequence of options
+        final SortedMap<FileSystemOptionKey, Object> myOptions = 
+              options instanceof SortedMap 
+            ? (SortedMap<FileSystemOptionKey, Object>)options 
+            : new TreeMap<FileSystemOptionKey, Object>(options);
+        final SortedMap<FileSystemOptionKey, Object> theirOptions = 
+              other.options instanceof SortedMap 
+            ? (SortedMap<FileSystemOptionKey, Object>)other.options 
+            : new TreeMap<FileSystemOptionKey, Object>(other.options);
+        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
+        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
+        while(optKeysIter.hasNext()) {
+            int comp = optKeysIter.next().compareTo(otherKeysIter.next());
+            if (comp != 0) {
+                return comp;
+            }
+        }
+
+        Object[] array = new Object[propsSz];
+        final int hash = Arrays.deepHashCode(myOptions.values().toArray(array));
+        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray(array));
         if (hash < hashFk)
         {
             return -1;
@@ -178,10 +200,44 @@ public int compareTo(final FileSystemOptions other)
             return 1;
         }
 
-        // bad props not the same instance, but looks like the same
-        // TODO: compare Entry by Entry
+        // TODO: compare Entry by Entry ??
         return 0;
     }
+    
+    @Override
+    public int hashCode()
+    {
+        final int prime = 31;
+        int result = 1;
+        if (options == null) {
+            result = prime * result;
+        } else {
+            final SortedMap<FileSystemOptionKey, Object> myOptions = 
+                options instanceof SortedMap 
+              ? (SortedMap<FileSystemOptionKey, Object>)options 
+              : new TreeMap<FileSystemOptionKey, Object>(options);
+            result = prime * result + myOptions.keySet().hashCode();
+            result = prime * result + Arrays.deepHashCode(myOptions.values().toArray(new Object[options.size()]));
+        }
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        FileSystemOptions other = (FileSystemOptions)obj;
+        return compareTo(other) == 0;
+    }
+    
 
     /**
      * {@inheritDoc}
diff --git a/core/src/test/java/org/apache/commons/vfs2/FileSystemOptionsTest.java b/core/src/test/java/org/apache/commons/vfs2/FileSystemOptionsTest.java
new file mode 100644
index 0000000000..211ec78c97
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs2/FileSystemOptionsTest.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Check FileSystemOptions.
+ * 
+ * @since 2.1
+ */
+public class FileSystemOptionsTest {
+
+    @Test
+    public void testEqualsHashCodeAndCompareTo() {
+        final JUnitConfigBuilder builder = JUnitConfigBuilder.getInstance();
+        final FileSystemOptions expected = new FileSystemOptions();
+        builder.setId(expected, "Test");
+        
+        final FileSystemOptions actual = new FileSystemOptions();
+        builder.setId(actual, "Test");
+        
+        Assert.assertEquals(expected, actual);
+        Assert.assertEquals(0, actual.compareTo(expected));
+        Assert.assertEquals(expected.hashCode(), actual.hashCode());
+
+        builder.setNames(expected, new String[]{"A", "B", "C"});
+        
+        Assert.assertNotEquals(expected, actual);
+        Assert.assertEquals(-1, actual.compareTo(expected));
+        Assert.assertNotEquals(expected.hashCode(), actual.hashCode());
+
+        builder.setNames(actual, new String[]{"A", "B", "C"});
+        
+        Assert.assertEquals(expected, actual);
+        Assert.assertEquals(0, actual.compareTo(expected));
+        Assert.assertEquals(expected.hashCode(), actual.hashCode());
+    }
+    
+    public static class JUnitConfigBuilder extends FileSystemConfigBuilder
+    {
+        private static final JUnitConfigBuilder BUILDER = new JUnitConfigBuilder();
+
+        public static JUnitConfigBuilder getInstance()
+        {
+            return BUILDER;
+        }
+
+        public void setId(final FileSystemOptions opts, final String id)
+        {
+            setParam(opts, "id", id);
+        }
+
+        public void setNames(final FileSystemOptions opts, final String[] names)
+        {
+            setParam(opts, "names", names);
+        }
+
+        @Override
+        protected Class<? extends FileSystem> getConfigClass()
+        {
+            return JUnitFS.class;
+        }
+
+        private abstract static class JUnitFS implements FileSystem
+        {
+        }
+    }
+   
+}
