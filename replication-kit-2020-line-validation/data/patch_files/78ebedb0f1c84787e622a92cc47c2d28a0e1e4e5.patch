From ce8c82f1fb742c6d93b9a9a6c7dadacb59bb0be1 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 01:51:58 +0100
Subject: [PATCH 01/21] MATH-1335.

New package "o.a.c.m.rng" contains RNG core functionality (uniform distribution).

Utilities to interface with stress test suites.
Userguide: benchmarks and stress test suites reports (MATH-1327).
---
 .../commons/math4/rng/RandomSource.java       |  417 ++
 .../math4/rng/UniformRandomProvider.java      |  118 +
 .../math4/rng/internal/BaseProvider.java      |  141 +
 .../math4/rng/internal/ProviderBuilder.java   |  346 ++
 .../math4/rng/internal/StateSettable.java     |   49 +
 .../math4/rng/internal/package-info.java      |   51 +
 .../rng/internal/source32/AbstractWell.java   |  208 +
 .../rng/internal/source32/ISAACRandom.java    |  270 ++
 .../rng/internal/source32/IntProvider.java    |  137 +
 .../rng/internal/source32/JDKRandom.java      |   95 +
 .../internal/source32/MersenneTwister.java    |  230 +
 .../internal/source32/RandomIntSource.java    |   30 +
 .../rng/internal/source32/Well1024a.java      |   78 +
 .../rng/internal/source32/Well19937a.java     |   80 +
 .../rng/internal/source32/Well19937c.java     |   85 +
 .../rng/internal/source32/Well44497a.java     |   83 +
 .../rng/internal/source32/Well44497b.java     |   90 +
 .../math4/rng/internal/source32/Well512a.java |   78 +
 .../rng/internal/source32/package-info.java   |   52 +
 .../rng/internal/source64/LongProvider.java   |  141 +
 .../internal/source64/MersenneTwister64.java  |  201 +
 .../internal/source64/RandomLongSource.java   |   30 +
 .../rng/internal/source64/SplitMix64.java     |   78 +
 .../math4/rng/internal/source64/TwoCmres.java |  310 ++
 .../internal/source64/XorShift1024Star.java   |  108 +
 .../rng/internal/source64/package-info.java   |   52 +
 .../math4/rng/internal/util/Int2Long.java     |   37 +
 .../math4/rng/internal/util/IntArray2Int.java |   41 +
 .../rng/internal/util/IntArray2LongArray.java |   44 +
 .../math4/rng/internal/util/Long2Int.java     |   36 +
 .../rng/internal/util/Long2IntArray.java      |   50 +
 .../rng/internal/util/Long2LongArray.java     |   56 +
 .../rng/internal/util/LongArray2IntArray.java |   43 +
 .../rng/internal/util/LongArray2Long.java     |   41 +
 .../math4/rng/internal/util/LongMixInt.java   |   50 +
 .../math4/rng/internal/util/LongMixLong.java  |   56 +
 .../rng/internal/util/NoOpConverter.java      |   40 +
 .../rng/internal/util/NumberFactory.java      |  327 ++
 .../rng/internal/util/SeedConverter.java      |   35 +
 .../internal/util/SeedConverterComposer.java  |   56 +
 .../math4/rng/internal/util/SeedFactory.java  |  262 ++
 .../math4/rng/internal/util/package-info.java |   22 +
 .../commons/math4/rng/package-info.java       |   95 +
 src/site/apt/userguide/rng.apt                |  228 +
 .../txt/userguide/rng/stress/dh/run_1/dh_1    |  146 +
 .../txt/userguide/rng/stress/dh/run_1/dh_10   |  139 +
 .../txt/userguide/rng/stress/dh/run_1/dh_11   |  148 +
 .../txt/userguide/rng/stress/dh/run_1/dh_12   |  172 +
 .../txt/userguide/rng/stress/dh/run_1/dh_13   |  168 +
 .../txt/userguide/rng/stress/dh/run_1/dh_2    |  139 +
 .../txt/userguide/rng/stress/dh/run_1/dh_3    |  173 +
 .../txt/userguide/rng/stress/dh/run_1/dh_4    |  140 +
 .../txt/userguide/rng/stress/dh/run_1/dh_5    |  140 +
 .../txt/userguide/rng/stress/dh/run_1/dh_6    |  146 +
 .../txt/userguide/rng/stress/dh/run_1/dh_7    |  204 +
 .../txt/userguide/rng/stress/dh/run_1/dh_8    |  201 +
 .../txt/userguide/rng/stress/dh/run_1/dh_9    |  143 +
 .../txt/userguide/rng/stress/dh/run_2/dh_1    |  146 +
 .../txt/userguide/rng/stress/dh/run_2/dh_10   |  172 +
 .../txt/userguide/rng/stress/dh/run_2/dh_11   |  259 ++
 .../txt/userguide/rng/stress/dh/run_2/dh_12   |  168 +
 .../txt/userguide/rng/stress/dh/run_2/dh_13   |  261 ++
 .../txt/userguide/rng/stress/dh/run_2/dh_2    |  140 +
 .../txt/userguide/rng/stress/dh/run_2/dh_3    |  139 +
 .../txt/userguide/rng/stress/dh/run_2/dh_4    |  171 +
 .../txt/userguide/rng/stress/dh/run_2/dh_5    |  143 +
 .../txt/userguide/rng/stress/dh/run_2/dh_6    |  260 ++
 .../txt/userguide/rng/stress/dh/run_2/dh_7    |  143 +
 .../txt/userguide/rng/stress/dh/run_2/dh_8    |  800 ++++
 .../txt/userguide/rng/stress/dh/run_2/dh_9    |  175 +
 .../txt/userguide/rng/stress/tu/run_1/tu_1    | 3882 +++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_10   | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_11   | 3795 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_12   | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_13   | 3802 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_2    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_3    | 3807 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_4    | 3806 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_5    | 3804 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_6    | 3804 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_7    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_8    | 3804 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_1/tu_9    | 3802 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_1    | 3879 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_10   | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_11   | 3795 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_12   | 3795 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_13   | 3795 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_2    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_3    | 3808 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_4    | 3805 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_5    | 3804 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_6    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_7    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_8    | 3803 ++++++++++++++++
 .../txt/userguide/rng/stress/tu/run_2/tu_9    | 3795 ++++++++++++++++
 src/site/site.xml                             |    1 +
 src/site/xdoc/userguide/index.xml             |    7 +
 .../math4/rng/Providers32ParametricTest.java  |   64 +
 .../math4/rng/Providers64ParametricTest.java  |   64 +
 .../rng/ProvidersCommonParametricTest.java    |  667 +++
 .../commons/math4/rng/ProvidersList.java      |  157 +
 .../internal/source32/ISAACRandomTest.java    |  389 ++
 .../rng/internal/source32/JDKRandomTest.java  |   38 +
 .../source32/MersenneTwisterTest.java         |  240 +
 .../rng/internal/source32/Well1024aTest.java  |   71 +
 .../rng/internal/source32/Well19937aTest.java |  109 +
 .../rng/internal/source32/Well19937cTest.java |  109 +
 .../rng/internal/source32/Well44497aTest.java |  109 +
 .../rng/internal/source32/Well44497bTest.java |  109 +
 .../rng/internal/source32/Well512aTest.java   |   69 +
 .../source64/MersenneTwister64Test.java       |  239 +
 .../rng/internal/source64/SplitMix64Test.java |   45 +
 .../rng/internal/source64/TwoCmresTest.java   |   55 +
 .../source64/XorShift1024StarTest.java        |   55 +
 .../rng/internal/util/NumberFactoryTest.java  |  164 +
 .../rng/internal/util/SeedFactoryTest.java    |  111 +
 src/userguide/README                          |   15 +-
 src/userguide/c/rng/stdin2testu01.c           |  127 +
 .../math4/userguide/rng/GeneratorsList.java   |   57 +
 .../userguide/rng/RandomStressTester.java     |  280 ++
 src/userguide/pom.xml                         |   30 +
 122 files changed, 112502 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/org/apache/commons/math4/rng/RandomSource.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/UniformRandomProvider.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/BaseProvider.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/ProviderBuilder.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/StateSettable.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/package-info.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/AbstractWell.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/ISAACRandom.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/IntProvider.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/JDKRandom.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/MersenneTwister.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/RandomIntSource.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well1024a.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937a.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937c.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497a.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497b.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/Well512a.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source32/package-info.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/LongProvider.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/RandomLongSource.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/SplitMix64.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/TwoCmres.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/XorShift1024Star.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/source64/package-info.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/Int2Long.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2Int.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2LongArray.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/Long2Int.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/Long2IntArray.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/Long2LongArray.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2IntArray.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2Long.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/LongMixInt.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/LongMixLong.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/NoOpConverter.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/NumberFactory.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverter.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverterComposer.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/SeedFactory.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/internal/util/package-info.java
 create mode 100644 src/main/java/org/apache/commons/math4/rng/package-info.java
 create mode 100644 src/site/apt/userguide/rng.apt
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_1
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_10
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_11
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_12
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_13
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_2
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_3
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_4
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_5
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_6
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_7
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_8
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_9
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_1
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_10
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_11
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_12
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_13
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_2
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_3
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_4
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_5
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_6
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_7
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_8
 create mode 100644 src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_9
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_1
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_10
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_11
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_12
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_13
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_2
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_3
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_4
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_5
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_6
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_7
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_8
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_9
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_1
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_10
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_11
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_12
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_13
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_2
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_3
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_4
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_5
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_6
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_7
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_8
 create mode 100644 src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_9
 create mode 100644 src/test/java/org/apache/commons/math4/rng/Providers32ParametricTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/Providers64ParametricTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/ProvidersCommonParametricTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/ProvidersList.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/ISAACRandomTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/JDKRandomTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/MersenneTwisterTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well1024aTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937aTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937cTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497aTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497bTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source32/Well512aTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64Test.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source64/SplitMix64Test.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source64/TwoCmresTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/source64/XorShift1024StarTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/util/NumberFactoryTest.java
 create mode 100644 src/test/java/org/apache/commons/math4/rng/internal/util/SeedFactoryTest.java
 create mode 100644 src/userguide/c/rng/stdin2testu01.c
 create mode 100644 src/userguide/java/org/apache/commons/math4/userguide/rng/GeneratorsList.java
 create mode 100644 src/userguide/java/org/apache/commons/math4/userguide/rng/RandomStressTester.java

diff --git a/src/main/java/org/apache/commons/math4/rng/RandomSource.java b/src/main/java/org/apache/commons/math4/rng/RandomSource.java
new file mode 100644
index 0000000000..087960cddc
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/RandomSource.java
@@ -0,0 +1,417 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.rng.internal.ProviderBuilder;
+import org.apache.commons.math4.rng.internal.BaseProvider;
+import org.apache.commons.math4.rng.internal.util.SeedFactory;
+import org.apache.commons.math4.rng.internal.source64.TwoCmres;
+
+/**
+ * This class provides the API for creating generators of random numbers.
+ * <p>
+ * Usage examples:
+ * <pre><code>
+ *  UniformRandomProvider rng = RandomSource.create(RandomSource.MT);
+ * </code></pre>
+ * or
+ * <pre><code>
+ *  final int[] seed = new int[] { 196, 9, 0, 226  };
+ *  UniformRandomProvider rng = RandomSource.create(RandomSource.MT, seed);
+ * </code></pre>
+ * or
+ * <pre><code>
+ *  final int[] seed = RandomSource.createIntArray(256);
+ *  UniformRandomProvider rng = RandomSource.create(RandomSource.MT, seed);
+ * </code></pre>
+ * where the first argument to method {@code create} is the identifier
+ * of the generator's concrete implementation, and the second the is the
+ * (optional) seed.
+ * <br>
+ * In the first form, a random seed will be {@link SeedFactory generated
+ * automatically}; the random seed generation step is explicit in the
+ * third form.
+ * </p>
+ *
+ * <p>
+ * Seeding is the procedure by which a value (or set of values) is
+ * used to <i>initialize</i> a generator instance.
+ * The requirement that a given seed will always result in the same
+ * internal state allows to create different instances of a generator
+ * that will produce the same sequence of pseudo-random numbers.
+ * </p>
+ *
+ * <p>
+ * The type of data used as a seed depends on the concrete implementation
+ * as some types may not provide enough information to fully initialize
+ * the generator's internal state.
+ * <br>
+ * The reference algorithm's seeding procedure (if provided) operates
+ * on a value of a (single) <i>native</i> type:
+ * Each concrete implementation's constructor creates an instance using
+ * the native type whose information contents is used to set the
+ * internal state.
+ * <br>
+ * When the seed value passed by the caller is of the native type, it is
+ * expected that the sequences produced will be the same as those
+ * produced by other implementations of the algorithm.
+ * <br>
+ * However, when the seed value passed by the caller is not of the native
+ * type, a transformation is performed by this library and the resulting
+ * native type value will <i>not</i> contain more information than the
+ * original seed value.
+ * If the algorithm's native type is "simpler" than the type passed by
+ * the caller, then some (unuse) information will even be lost.
+ * <br>
+ * The transformation from non-native to native seed type is arbitrary,
+ * as long as it does not reduce the amount of information required by
+ * the algorithm to initialize its state.
+ * The consequence of the transformation is that the sequences produced
+ * by this library may not be the same as the sequences produced by other
+ * implementations of the same algorithm!
+ * </p>
+ *
+ * <p>
+ * This class provides methods to generate random seeds (single values
+ * or arrays of values, of {@code int} or {@code long} types) that can
+ * be passed to the {@link RandomSource#create(RandomSource,Object,Object[])
+ * generators factory method}.
+ * <br>
+ * Although the seed-generating methods defined in this class will likely
+ * return different values for all calls, there is no guarantee that the
+ * produced seed will result always in a "good" sequence of numbers, even
+ * if the generator is good.
+ * The only way to ensure that the selected seed will make the generator
+ * produce a "good" sequence is to submit that sequence to a series of
+ * stringent tests, as provided by tools such as
+ * <a href="http://www.phy.duke.edu/~rgb/General/dieharder.php">dieharder</a>
+ * or <a href="http://simul.iro.umontreal.ca/testu01/tu01.html">TestU01</a>.
+ * </p>
+ *
+ * <p>
+ * The current implementations have no provision for producing non-overlapping
+ * sequences.
+ * For parallel applications, a possible workaround is that each thread uses
+ * a generator of a different type (see {@link #TWO_CMRES_SELECT}).
+ * </p>
+ *
+ * <p>
+ * <b>Note:</b>
+ * Seeding is not equivalent to restoring the internal state of an
+ * <i>already initialized</i> generator.
+ * Indeed, generators can have a state that is more complex than the
+ * seed, and seeding is thus a transformation (from seed to state).
+ * Implementations do not provide the inverse transformation (from
+ * state to seed), hence it is not generally possible to know the seed
+ * that would initialize a new generator instance to the current state
+ * of another instance.
+ * Reseeding is also inefficient if the purpose is to continue the
+ * same sequence where another instance left off, as it would require
+ * to "replay" all the calls performed by that other instance (and it
+ * would require to know the number of calls to the primary source of
+ * randomness, which is also not usually accessible).
+ * <br>
+ * This factory thus provides a method for
+ * {@link #saveState(UniformRandomProvider) saving} the internal
+ * state of a generator.
+ * The state is encapsulated in an {@link State "opaque object"} to be
+ * used for {@link #restoreState(UniformRandomProvider,State) restoring}
+ * a generator (of the same type) to an identical state (e.g. to allow
+ * persistent storage, or to continue a sequence from where the original
+ * instance left off.).
+ * </p>
+ *
+ * @since 4.0
+ */
+public enum RandomSource {
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.JDKRandom}.
+     * Native seed type: {@code Long}.
+     */
+    JDK(ProviderBuilder.RandomSourceInternal.JDK),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well512a}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_512_A(ProviderBuilder.RandomSourceInternal.WELL_512_A),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well1024a}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_1024_A(ProviderBuilder.RandomSourceInternal.WELL_1024_A),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well19937a}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_19937_A(ProviderBuilder.RandomSourceInternal.WELL_19937_A),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well19937c}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_19937_C(ProviderBuilder.RandomSourceInternal.WELL_19937_C),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well44497a}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_44497_A(ProviderBuilder.RandomSourceInternal.WELL_44497_A),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.Well44497b}.
+     * Native seed type: {@code int[]}.
+     */
+    WELL_44497_B(ProviderBuilder.RandomSourceInternal.WELL_44497_B),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.MersenneTwister}.
+     * Native seed type: {@code int[]}.
+     */
+    MT(ProviderBuilder.RandomSourceInternal.MT),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source32.ISAACRandom}.
+     * Native seed type: {@code int[]}.
+     */
+    ISAAC(ProviderBuilder.RandomSourceInternal.ISAAC),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source64.SplitMix64}.
+     * Native seed type: {@code Long}.
+     */
+    SPLIT_MIX_64(ProviderBuilder.RandomSourceInternal.SPLIT_MIX_64),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source64.XorShift1024Star}.
+     * Native seed type: {@code long[]}.
+     */
+    XOR_SHIFT_1024_S(ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source64.TwoCmres}.
+     * Native seed type: {@code Integer}.
+     */
+    TWO_CMRES(ProviderBuilder.RandomSourceInternal.TWO_CMRES),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source64.TwoCmres},
+     * with explicit selection of the two subcycle generators.
+     * Native seed type: {@code Integer}.
+     */
+    TWO_CMRES_SELECT(ProviderBuilder.RandomSourceInternal.TWO_CMRES_SELECT),
+    /**
+     * Source of randomness is {@link org.apache.commons.math4.rng.internal.source64.MersenneTwister64}.
+     * Native seed type: {@code long[]}.
+     */
+    MT_64(ProviderBuilder.RandomSourceInternal.MT_64);
+
+    /** Internal identifier. */
+    private final ProviderBuilder.RandomSourceInternal internalIdentifier;
+
+    /**
+     * @param id Internal identifier.
+     */
+    RandomSource(ProviderBuilder.RandomSourceInternal id) {
+        internalIdentifier = id;
+    }
+
+    /**
+     * @return the internal identifier.
+     */
+    ProviderBuilder.RandomSourceInternal getInternalIdentifier() {
+        return internalIdentifier;
+    }
+
+    /**
+     * Checks whether the type of given {@code seed} is the native type
+     * of the implementation.
+     *
+     * @param seed Seed value.
+     * @return {@code true} if the seed can be passed to the builder
+     * for this RNG type.
+     */
+    public boolean isNativeSeed(Object seed) {
+        return internalIdentifier.isNativeSeed(seed);
+    }
+
+    /**
+     * Marker interface used to define the "save" and "restore"
+     * functionality of the generators.
+     */
+    public interface State {}
+
+    /**
+     * Creates a random number generator with a random seed.
+     *
+     * <p>
+     * Example of usage:
+     * <pre><code>
+     *  UniformRandomProvider rng = RandomSource.create(Source.MT);
+     * </code></pre>
+     * </p>
+     *
+     * @param source {@link RandomSource RNG type}.
+     * @return the RNG.
+     */
+    public static UniformRandomProvider create(RandomSource source) {
+        return create(source, null);
+    }
+
+    /**
+     * Creates a random number generator with the given {@code seed}.
+     *
+     * <p>
+     * Example of usage:
+     * <pre><code>
+     *  UniformRandomProvider rng = RandomSource.create(Source.TWO_CMRES_SELECT, 26219, 6, 9);
+     * </code></pre>
+     * </p>
+     *
+     * <p>
+     * Valid types for the {@code seed} are:
+     *  <ul>
+     *   <li>{@code Integer} (or {@code int})</li>
+     *   <li>{@code Long} (or {@code long})</li>
+     *   <li>{@code int[]}</li>
+     *   <li>{@code long[]}</li>
+     *  </ul>
+     * </p>
+     *
+     * <p>
+     * Notes:
+     * <ul>
+     *  <li>
+     *   When the seed type passed as argument is more complex (i.e. more
+     *   bits can be independently chosen) than the generator's
+     *   {@link #isNativeSeed(Object) native type}, the conversion of a
+     *   set of different seeds will necessarily result in the same value
+     *   of the native seed type.
+     *  </li>
+     *  <li>
+     *   When the native seed type is an array, the same remark applies
+     *   when the array contains more bits than the state of the generator.
+     *  </li>
+     *  <li>
+     *   When the native seed type is an array and the {@code seed} is
+     *   {@code null}, the size of the generated array will be 128.
+     *  </li>
+     * </p>
+     *
+     * @param source {@link RandomSource RNG type}.
+     * @param seed Seed value.  It can be {@code null} (in which case a
+     * random value will be used).
+     * @param data Additional arguments to the implementation's constructor.
+     * Please refer to the documentation of each specific implementation.
+     * @return the RNG.
+     * @throws MathUnsupportedOperationException if the type of the
+     * {@code seed} is invalid.
+     * @throws org.apache.commons.math4.exception.InsufficientDataException
+     * if data is missing to initialize the generator implemented by the
+     * given {@code source}.
+     */
+    public static UniformRandomProvider create(RandomSource source,
+                                               Object seed,
+                                               Object ... data) {
+        return ProviderBuilder.create(source.getInternalIdentifier(), seed, data);
+    }
+
+    /**
+     * Gets the number of elements of the set of "subcycle" generators from
+     * which two can be selected in order to create a {@link TwoCmres} RNG.
+     *
+     * @return the number of implemented subcycle generators.
+     */
+    public static int numberOfCmresGenerators() {
+        return TwoCmres.numberOfSubcycleGenerators();
+    }
+
+    /**
+     * Saves the state of a RNG.
+     *
+     * @param provider Provider.
+     * @return the current state of the given {@code provider}.
+     * @throws MathUnsupportedOperationException if the {@code provider} is
+     * not an object created by this factory or the underlying source of
+     * randomness does not support this functionality.
+     *
+     * @see #restoreState(UniformRandomProvider,RandomSource.State)
+     */
+    public static State saveState(UniformRandomProvider provider) {
+        if (!(provider instanceof BaseProvider)) {
+            throw new MathUnsupportedOperationException();
+        } else {
+            return ((BaseProvider) provider).getState();
+        }
+    }
+
+    /**
+     * Restores the state of a RNG.
+     *
+     * @param provider Provider.
+     * @param state State which the {@code provider} will be set to.
+     * This parameter must have been obtained by a call to
+     * {@link #saveState(UniformRandomProvider) saveState(rng)}
+     * where {@code rng} is either the same object as {@code provider},
+     * or an object of the same concrete type.
+     * @throws MathUnsupportedOperationException if the {@code provider} is
+     * not an object created by this factory or the underlying source of
+     * randomness does not support this functionality.
+     * @throws org.apache.commons.math4.exception.InsufficientDataException
+     * if it was detected that the {@code state} is incompatible with the
+     * given {@code provider}.
+     *
+     * @see #saveState(UniformRandomProvider)
+     */
+    public static void restoreState(UniformRandomProvider provider,
+                                    State state) {
+        if (!(provider instanceof BaseProvider)) {
+            throw new MathUnsupportedOperationException();
+        } else {
+            ((BaseProvider) provider).setState(state);
+        }
+    }
+
+    /**
+     * Creates a number for use as a seed.
+     *
+     * @return a random number.
+     */
+    public static int createInt() {
+        return SeedFactory.createInt();
+    }
+
+    /**
+     * Creates a number for use as a seed.
+     *
+     * @return a random number.
+     */
+    public static long createLong() {
+        return SeedFactory.createLong();
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @return an array of {@code n} random numbers.
+     */
+    public static int[] createIntArray(int n) {
+        return SeedFactory.createIntArray(n);
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @return an array of {@code n} random numbers.
+     */
+    public static long[] createLongArray(int n) {
+        return SeedFactory.createLongArray(n);
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/UniformRandomProvider.java b/src/main/java/org/apache/commons/math4/rng/UniformRandomProvider.java
new file mode 100644
index 0000000000..ef17f06f09
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/UniformRandomProvider.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+/**
+ * Applies to generators of random number sequences that follow a uniform
+ * distribution.
+ *
+ * @since 4.0
+ */
+public interface UniformRandomProvider {
+    /**
+     * Generates {@code byte} values and places them into a user-supplied array.
+     * <p>
+     * The number of random bytes produced is equal to the length of the
+     * the byte array.
+     * </p>
+     *
+     * @param bytes Byte array in which to put the random bytes.
+     * Cannot be {@code null}.
+     */
+    void nextBytes(byte[] bytes);
+
+    /**
+     * Generates {@code byte} values and places them into a user-supplied array.
+     *
+     * <p>
+     * The array is filled with bytes extracted from random integers.
+     * This implies that the number of random bytes generated may be larger than
+     * the length of the byte array.
+     * </p>
+     *
+     * @param bytes Array in which to put the generated bytes.
+     * Cannot be {@code null}.
+     * @param start Index at which to start inserting the generated bytes.
+     * @param len Number of bytes to insert.
+     * @throws org.apache.commons.math4.exception.OutOfRangeException
+     * if {@code start < 0} or {@code start >= bytes.length}.
+     * @throws org.apache.commons.math4.exception.OutOfRangeException
+     * if {@code len < 0} or {@code len > bytes.length - start}.
+     */
+    void nextBytes(byte[] bytes,
+                   int start,
+                   int len);
+
+    /**
+     * Generates an {@code int} value.
+     *
+     * @return the next random value.
+     */
+    int nextInt();
+
+    /**
+     * Generates an {@code int} value between 0 (inclusive) and the
+     * specified value (exclusive).
+     *
+     * @param n Bound on the random number to be returned.  Must be positive.
+     * @return a random {@code int} value between 0 (inclusive) and n
+     * (exclusive).
+     * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
+     * if {@code n} is not positive.
+     */
+    int nextInt(int n);
+
+    /**
+     * Generates a {@code long} value.
+     *
+     * @return the next random value.
+     */
+    long nextLong();
+
+    /**
+     * Generates a {@code long} value between 0 (inclusive) and the specified
+     * value (exclusive).
+     *
+     * @param n Bound on the random number to be returned.  Must be positive.
+     * @return a random {@code long} value between 0 (inclusive) and n
+     * (exclusive).
+     * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
+     * if {@code n} is not positive.
+     */
+    long nextLong(long n);
+
+    /**
+     * Generates a {@code boolean} value.
+     *
+     * @return the next random value.
+     */
+    boolean nextBoolean();
+
+    /**
+     * Generates a {@code float} value between 0 and 1.
+     *
+     * @return the next random value between 0 and 1.
+     */
+    float nextFloat();
+
+    /**
+     * Generates a {@code double} value between 0 and 1.
+     *
+     * @return the next random value between 0 and 1.
+     */
+    double nextDouble();
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/BaseProvider.java b/src/main/java/org/apache/commons/math4/rng/internal/BaseProvider.java
new file mode 100644
index 0000000000..e29d8549c2
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/BaseProvider.java
@@ -0,0 +1,141 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal;
+
+import java.util.Arrays;
+import java.io.Serializable;
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.exception.NotStrictlyPositiveException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
+
+/**
+ * Base class with default implementation for common methods.
+ */
+public abstract class BaseProvider
+    implements UniformRandomProvider,
+               StateSettable {
+    /** {@inheritDoc} */
+    @Override
+    public int nextInt(int n) throws IllegalArgumentException {
+        if (n > 0) {
+            if ((n & -n) == n) {
+                return (int) ((n * (long) (nextInt() >>> 1)) >> 31);
+            }
+            int bits;
+            int val;
+            do {
+                bits = nextInt() >>> 1;
+                val = bits % n;
+            } while (bits - val + (n - 1) < 0);
+            return val;
+        }
+
+        throw new NotStrictlyPositiveException(n);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long nextLong(long n) {
+        if (n > 0) {
+            long bits;
+            long val;
+            do {
+                bits = nextLong() >>> 1;
+                val  = bits % n;
+            } while (bits - val + (n - 1) < 0);
+            return val;
+        }
+
+        throw new NotStrictlyPositiveException(n);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getName();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public RandomSource.State getState() {
+        return new State(getStateInternal());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void setState(RandomSource.State state) {
+        // Cast will intentionally fail if the argument is not one we created.
+        final State s = (State) state;
+        setStateInternal(s.getState());
+    }
+
+    /**
+     * Creates a snapshot of the RNG state.
+     *
+     * @return the internal state.
+     * @throws MathUnsupportedOperationException if not implemented.
+     */
+    protected byte[] getStateInternal() {
+        throw new MathUnsupportedOperationException();
+    }
+
+    /**
+     * Resets the RNG to the given {@code state}.
+     *
+     * @param state State (previously obtained by a call to
+     * {@link #getStateInternal()}).
+     * @throws MathUnsupportedOperationException if not implemented.
+     */
+    protected void setStateInternal(byte[] state) {
+        throw new MathUnsupportedOperationException();
+    }
+
+    /**
+     * "Black-box" state.
+     * Its sole purpose is to store all the data needed to recover
+     * the same state in order to restart a sequence where it left
+     * off.
+     * External code should not to modify the data contained in
+     * instances of this class.
+     */
+    private static class State
+        implements RandomSource.State,
+                   Serializable {
+        /** Serializable version identifier. */
+        private static final long serialVersionUID = 4720160226L;
+        /** Internal state. */
+        private byte[] state;
+
+        /**
+         * @param state Mapping of all the data which a subclass of
+         * {@link BaseProvider} needs in order to reset its internal
+         * state.
+         */
+        State(byte[] state) {
+            this.state = Arrays.copyOf(state, state.length);
+        }
+
+        /**
+         * @return the internal state.
+         */
+        byte[] getState() {
+            return Arrays.copyOf(state, state.length);
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/ProviderBuilder.java b/src/main/java/org/apache/commons/math4/rng/internal/ProviderBuilder.java
new file mode 100644
index 0000000000..f38b679a0c
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/ProviderBuilder.java
@@ -0,0 +1,346 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.exception.MathInternalError;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.internal.util.SeedFactory;
+import org.apache.commons.math4.rng.internal.util.NoOpConverter;
+import org.apache.commons.math4.rng.internal.util.Int2Long;
+import org.apache.commons.math4.rng.internal.util.Long2Int;
+import org.apache.commons.math4.rng.internal.util.Long2IntArray;
+import org.apache.commons.math4.rng.internal.util.Long2LongArray;
+import org.apache.commons.math4.rng.internal.util.IntArray2LongArray;
+import org.apache.commons.math4.rng.internal.util.LongArray2IntArray;
+import org.apache.commons.math4.rng.internal.util.LongArray2Long;
+import org.apache.commons.math4.rng.internal.util.IntArray2Int;
+import org.apache.commons.math4.rng.internal.util.SeedConverter;
+import org.apache.commons.math4.rng.internal.util.SeedConverterComposer;
+import org.apache.commons.math4.rng.internal.source32.JDKRandom;
+import org.apache.commons.math4.rng.internal.source32.Well512a;
+import org.apache.commons.math4.rng.internal.source32.Well1024a;
+import org.apache.commons.math4.rng.internal.source32.Well19937a;
+import org.apache.commons.math4.rng.internal.source32.Well19937c;
+import org.apache.commons.math4.rng.internal.source32.Well44497a;
+import org.apache.commons.math4.rng.internal.source32.Well44497b;
+import org.apache.commons.math4.rng.internal.source32.ISAACRandom;
+import org.apache.commons.math4.rng.internal.source32.MersenneTwister;
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+import org.apache.commons.math4.rng.internal.source64.XorShift1024Star;
+import org.apache.commons.math4.rng.internal.source64.TwoCmres;
+import org.apache.commons.math4.rng.internal.source64.MersenneTwister64;
+
+/**
+ * RNG builder.
+ * <p>
+ * It uses reflection to find the factory method of the RNG implementation,
+ * and performs seed type conversions.
+ * </p>
+ */
+public class ProviderBuilder {
+    /** Length of the seed array (for random seed). */
+    private static final int RANDOM_SEED_ARRAY_SIZE = 128;
+    /** Seed converter. */
+    private static final Long2Int LONG_TO_INT = new Long2Int();
+    /** Seed converter. */
+    private static final Int2Long INT_TO_LONG = new Int2Long();
+    /** Seed converter. */
+    private static final Long2IntArray LONG_TO_INT_ARRAY = new Long2IntArray(RANDOM_SEED_ARRAY_SIZE);
+    /** Seed converter. */
+    private static final Long2LongArray LONG_TO_LONG_ARRAY = new Long2LongArray(RANDOM_SEED_ARRAY_SIZE);
+    /** Seed converter. */
+    private static final LongArray2Long LONG_ARRAY_TO_LONG = new LongArray2Long();
+    /** Seed converter. */
+    private static final IntArray2Int INT_ARRAY_TO_INT = new IntArray2Int();
+    /** Seed converter. */
+    private static final LongArray2IntArray LONG_ARRAY_TO_INT_ARRAY = new LongArray2IntArray();
+    /** Seed converter. */
+    private static final IntArray2LongArray INT_ARRAY_TO_LONG_ARRAY = new IntArray2LongArray();
+    /** Map to convert "Integer" seeds. */
+    private static final Map<Class<?>, SeedConverter<Integer,?>> CONV_INT = new HashMap<>();
+    /** Map to convert "int[]" seeds. */
+    private static final Map<Class<?>, SeedConverter<int[],?>> CONV_INT_ARRAY = new HashMap<>();
+    /** Map to convert "Long" seeds. */
+    private static final Map<Class<?>, SeedConverter<Long,?>> CONV_LONG = new HashMap<>();
+    /** Map to convert "long[]" seeds. */
+    private static final Map<Class<?>, SeedConverter<long[],?>> CONV_LONG_ARRAY = new HashMap<>();
+
+    static {
+        // Input seed type is "Long".
+        // Key is the implementation's "native" seed type.
+        CONV_LONG.put(Integer.class, LONG_TO_INT);
+        CONV_LONG.put(Long.class, new NoOpConverter<Long>());
+        CONV_LONG.put(int[].class, LONG_TO_INT_ARRAY);
+        CONV_LONG.put(long[].class, LONG_TO_LONG_ARRAY);
+
+        // Input seed type is "Integer".
+        // Key is the implementation's "native" seed type.
+        CONV_INT.put(Integer.class, new NoOpConverter<Integer>());
+        CONV_INT.put(Long.class, INT_TO_LONG);
+        CONV_INT.put(int[].class, new SeedConverterComposer<Integer,Long,int[]>(INT_TO_LONG, LONG_TO_INT_ARRAY));
+        CONV_INT.put(long[].class, new SeedConverterComposer<Integer,Long,long[]>(INT_TO_LONG, LONG_TO_LONG_ARRAY));
+
+        // Input seed type is "int[]".
+        // Key is the implementation's "native" seed type.
+        CONV_INT_ARRAY.put(Integer.class, INT_ARRAY_TO_INT);
+        CONV_INT_ARRAY.put(Long.class, new SeedConverterComposer<int[],Integer,Long>(INT_ARRAY_TO_INT, INT_TO_LONG));
+        CONV_INT_ARRAY.put(int[].class, new NoOpConverter<int[]>());
+        CONV_INT_ARRAY.put(long[].class, INT_ARRAY_TO_LONG_ARRAY);
+
+        // Input seed type is "long[]".
+        // Key is the implementation's "native" seed type.
+        CONV_LONG_ARRAY.put(Integer.class, new SeedConverterComposer<long[],Long,Integer>(LONG_ARRAY_TO_LONG, LONG_TO_INT));
+        CONV_LONG_ARRAY.put(Long.class, LONG_ARRAY_TO_LONG);
+        CONV_LONG_ARRAY.put(int[].class, LONG_ARRAY_TO_INT_ARRAY);
+        CONV_LONG_ARRAY.put(long[].class, new NoOpConverter<long[]>());
+    }
+
+    /**
+     * Class only contains static method.
+     */
+    private ProviderBuilder() {}
+
+    /**
+     * Creates a RNG instance.
+     *
+     * @param source RNG specification.
+     * @param seed Seed value.  It can be {@code null} (in which case a
+     * random value will be used).
+     * @param args Additional arguments to the implementation's constructor.
+     * @return a new RNG instance.
+     * @throws MathUnsupportedOperationException if the seed type is
+     * invalid.
+     */
+    public static UniformRandomProvider create(RandomSourceInternal source,
+                                               Object seed,
+                                               Object[] args) {
+        // Convert seed to native type.
+        final Object nativeSeed = createSeed(source, seed);
+
+        // Build a single array with all the arguments to be passed
+        // (in the right order) to the constructor.
+        final List<Object> all = new ArrayList<>();
+        all.add(nativeSeed);
+        if (args != null) {
+            all.addAll(Arrays.asList(args));
+        }
+
+        // Instantiate.
+        return create(createConstructor(source), all.toArray());
+    }
+
+    /**
+     * Creates a native seed from any of the supported seed types.
+     *
+     * @param source Source.
+     * @param seed Input seed.
+     * @return the native seed.
+     * @throw MathUnsupportedOperationException if the {@code seed} type
+     * is invalid.
+     */
+    private static Object createSeed(RandomSourceInternal source,
+                                     Object seed) {
+        Object nativeSeed = null;
+
+        if (seed == null) {
+            // Create a random seed of the appropriate native type.
+
+            if (source.getSeed().equals(Integer.class)) {
+                nativeSeed = SeedFactory.createInt();
+            } else if (source.getSeed().equals(Long.class)) {
+                nativeSeed = SeedFactory.createLong();
+            } else if (source.getSeed().equals(int[].class)) {
+                nativeSeed = SeedFactory.createIntArray(RANDOM_SEED_ARRAY_SIZE);
+            } else if (source.getSeed().equals(long[].class)) {
+                nativeSeed = SeedFactory.createLongArray(RANDOM_SEED_ARRAY_SIZE);
+            }
+        } else {
+            // Convert to native type.
+
+            if (seed instanceof Integer) {
+                nativeSeed = CONV_INT.get(source.getSeed()).convert((Integer) seed);
+            } else if (seed instanceof Long) {
+                nativeSeed = CONV_LONG.get(source.getSeed()).convert((Long) seed);
+            } else if (seed instanceof int[]) {
+                nativeSeed = CONV_INT_ARRAY.get(source.getSeed()).convert((int[]) seed);
+            } else if (seed instanceof long[]) {
+                nativeSeed = CONV_LONG_ARRAY.get(source.getSeed()).convert((long[]) seed);
+            }
+
+            if (nativeSeed == null) {
+                // Since the input seed was not null, getting here means that
+                // no suitable converter is present in the maps.
+                throw new MathUnsupportedOperationException();
+            }
+
+            if (!source.isNativeSeed(nativeSeed)) {
+                // Conversion setup is wrong.
+                throw new MathInternalError();
+            }
+        }
+
+        return nativeSeed;
+    }
+
+    /**
+     * Creates a constructor.
+     *
+     * @param source RNG specification.
+     * @return a RNG constructor.
+     */
+    private static Constructor<?> createConstructor(RandomSourceInternal source) {
+        try {
+            return source.getRng().getConstructor(source.getArgs());
+        } catch (NoSuchMethodException e) {
+            // Info in "RandomSourceInternal" is inconsistent with the
+            // constructor of the implementation.
+            throw new MathInternalError(e);
+        }
+    }
+
+    /**
+     * Creates a RNG.
+     *
+     * @param rng RNG specification.
+     * @param args Arguments to the implementation's constructor.
+     * @return a new RNG instance.
+     */
+    private static UniformRandomProvider create(Constructor<?> rng,
+                                                Object[] args) {
+        try {
+            return (UniformRandomProvider) rng.newInstance(args);
+        } catch (InvocationTargetException |
+                 InstantiationException |
+                 IllegalArgumentException |
+                 IllegalAccessException e) {
+            throw new MathInternalError(e);
+        }
+    }
+
+    /**
+     * Identifiers of the generators.
+     */
+    public enum RandomSourceInternal {
+        /** Source of randomness is {@link JDKRandom}. */
+        JDK(JDKRandom.class,
+            Long.class),
+        /** Source of randomness is {@link Well512a}. */
+        WELL_512_A(Well512a.class,
+                   int[].class),
+        /** Source of randomness is {@link Well1024a}. */
+        WELL_1024_A(Well1024a.class,
+                    int[].class),
+        /** Source of randomness is {@link Well19937a}. */
+        WELL_19937_A(Well19937a.class,
+                     int[].class),
+        /** Source of randomness is {@link Well19937c}. */
+        WELL_19937_C(Well19937c.class,
+                     int[].class),
+        /** Source of randomness is {@link Well44497a}. */
+        WELL_44497_A(Well44497a.class,
+                     int[].class),
+        /** Source of randomness is {@link Well44497b}. */
+        WELL_44497_B(Well44497b.class,
+                     int[].class),
+        /** Source of randomness is {@link MersenneTwister}. */
+        MT(MersenneTwister.class,
+           int[].class),
+        /** Source of randomness is {@link ISAACRandom}. */
+        ISAAC(ISAACRandom.class,
+              int[].class),
+        /** Source of randomness is {@link SplitMix64}. */
+        SPLIT_MIX_64(SplitMix64.class,
+                     Long.class),
+        /** Source of randomness is {@link XorShift1024Star}. */
+        XOR_SHIFT_1024_S(XorShift1024Star.class,
+                         long[].class),
+        /** Source of randomness is {@link TwoCmres}. */
+        TWO_CMRES(TwoCmres.class,
+                  Integer.class),
+        /**
+         * Source of randomness is {@link TwoCmres} with explicit selection
+         * of the two subcycle generators.
+         */
+        TWO_CMRES_SELECT(TwoCmres.class,
+                         Integer.class,
+                         Integer.TYPE,
+                         Integer.TYPE),
+        /** Source of randomness is {@link MersenneTwister64}. */
+        MT_64(MersenneTwister64.class,
+              long[].class);
+
+        /** Source type. */
+        private final Class<? extends UniformRandomProvider> rng;
+        /** Data needed to build the generator. */
+        private final Class<?>[] args;
+
+        /**
+         * @param rng Source type.
+         * @param args Data needed to create a generator instance.
+         * The first element must be the native seed type.
+         */
+        RandomSourceInternal(Class<? extends UniformRandomProvider> rng,
+                             Class<?> ... args) {
+            this.rng = rng;
+            this.args = Arrays.copyOf(args, args.length);
+        }
+
+        /**
+         * @return the source type.
+         */
+        public Class<?> getRng() {
+            return rng;
+        }
+
+        /**
+         * @return the seed type.
+         */
+        Class<?> getSeed() {
+            return args[0];
+        }
+
+        /**
+         * @return the data needed to build the generator.
+         */
+        Class<?>[] getArgs() {
+            return args;
+        }
+
+        /**
+         * Checks whether the type of given {@code seed} is the native type
+         * of the implementation.
+         *
+         * @param <SEED> Seed type.
+         *
+         * @param seed Seed value.
+         * @return {@code true} if the seed can be passed to the builder
+         * for this RNG type.
+         */
+        public <SEED> boolean isNativeSeed(SEED seed) {
+            return getSeed().equals(seed.getClass());
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/StateSettable.java b/src/main/java/org/apache/commons/math4/rng/internal/StateSettable.java
new file mode 100644
index 0000000000..6c7e7a5653
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/StateSettable.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal;
+
+import org.apache.commons.math4.rng.RandomSource;
+
+/**
+ * Indicates that the state of the instance can be saved and restored.
+ *
+ * @since 4.0
+ */
+public interface StateSettable {
+    /**
+     * Sets the instance's state.
+     *
+     * @param state State. The given argument must have been retrieved
+     * by a call to {@link #getState()}.
+     *
+     * @throws org.apache.commons.math4.exception.MathUnsupportedOperationException
+     * if not implemented.
+     */
+    void setState(RandomSource.State state);
+
+    /**
+     * Gets the instance's state.
+     *
+     * @return the current state. The given argument can then be passed
+     * to {@link #setState(RandomSource.State)} in order to recover the
+     * current state.
+     *
+     * @throws org.apache.commons.math4.exception.MathUnsupportedOperationException
+     * if not implemented.
+     */
+     RandomSource.State getState();
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/package-info.java b/src/main/java/org/apache/commons/math4/rng/internal/package-info.java
new file mode 100644
index 0000000000..47ad828e75
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/package-info.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * <h3>Base classes for the {@link org.apache.commons.math4.rng.UniformRandomProvider
+ * generation of uniformly distributed random numbers}.
+ * </h3>
+ *
+ * <p>
+ * <b>For internal use only:</b> Direct access to classes in this package
+ * and below, is discouraged, as they could be modified without notice.
+ * </p>
+ *
+ * <p><b>Notes for developers</b></p>
+ *
+ * <p>
+ * This package contains the common functionality.
+ * <br>
+ * Implementations that produce
+ * {@link org.apache.commons.math4.rng.internal.source32.RandomIntSource int}
+ * values are defined in the
+ * {@link org.apache.commons.math4.rng.internal.source32 source32} package.
+ * <br>
+ * Implementations that produce
+ * {@link org.apache.commons.math4.rng.internal.source64.RandomLongSource long}
+ * values are defined in the
+ * {@link org.apache.commons.math4.rng.internal.source64 source64} package.
+ * </p>
+ *
+ * <p>
+ * Each implementation must have an identifier in
+ * {@link org.apache.commons.math4.rng.internal.ProviderBuilder.RandomSourceInternal}
+ * which must be referred to from the {@link org.apache.commons.math4.rng.RandomSource public API}.
+ * </p>
+ */
+
+package org.apache.commons.math4.rng.internal;
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/AbstractWell.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/AbstractWell.java
new file mode 100644
index 0000000000..c9737db170
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/AbstractWell.java
@@ -0,0 +1,208 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * This abstract class implements the WELL class of pseudo-random number
+ * generator from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto
+ * Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ *
+ * @since 4.0
+ */
+public abstract class AbstractWell extends IntProvider {
+    /** Current index in the bytes pool. */
+    protected int index;
+    /** Bytes pool. */
+    protected final int[] v;
+
+    /**
+     * Creates a new random number generator using an int array seed.
+     *
+     * @param k Number of bits in the pool (not necessarily a multiple of 32).
+     * @param seed Initial seed.
+     */
+    protected AbstractWell(final int k,
+                           final int[] seed) {
+        final int r = calculateBlockCount(k);
+        v = new int[r];
+        index = 0;
+
+        // Initialize the pool content.
+        setSeedInternal(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        final int[] s = Arrays.copyOf(v, v.length + 1);
+        s[v.length] = index;
+
+        return NumberFactory.makeByteArray(s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != (v.length + 1) * 4) {
+            throw new InsufficientDataException();
+        }
+
+        final int[] tmp = NumberFactory.makeIntArray(s);
+
+        System.arraycopy(tmp, 0, v, 0, v.length);
+        index = tmp[v.length];
+    }
+
+    /**
+     * Reinitialize the generator as if just built with the given int array seed.
+     *
+     * <p>The state of the generator is exactly the same as a new generator built
+     * with the same seed.</p>
+     *
+     * @param seed Seed. Cannot be null.
+     */
+    private void setSeedInternal(final int[] seed) {
+        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));
+
+        if (seed.length < v.length) {
+            for (int i = seed.length; i < v.length; ++i) {
+                final long current = v[i - seed.length];
+                v[i] = (int) ((1812433253L * (current ^ (current >> 30)) + i) & 0xffffffffL);
+            }
+        }
+
+        index = 0;
+    }
+
+    /**
+     * Calculate the number of 32-bits blocks.
+     *
+     * @param k Number of bits in the pool (not necessarily a multiple of 32).
+     * @return the number of 32-bits blocks.
+     */
+    private static int calculateBlockCount(final int k) {
+        // the bits pool contains k bits, k = r w - p where r is the number
+        // of w bits blocks, w is the block size (always 32 in the original paper)
+        // and p is the number of unused bits in the last block
+        final int w = 32;
+        final int r = (k + w - 1) / w;
+        return r;
+    }
+
+    /**
+     * Inner class used to store the indirection index table which is fixed for a given
+     * type of WELL class of pseudo-random number generator.
+     */
+    protected static final class IndexTable {
+        /** Index indirection table giving for each index its predecessor taking table size into account. */
+        private final int[] iRm1;
+        /** Index indirection table giving for each index its second predecessor taking table size into account. */
+        private final int[] iRm2;
+        /** Index indirection table giving for each index the value index + m1 taking table size into account. */
+        private final int[] i1;
+        /** Index indirection table giving for each index the value index + m2 taking table size into account. */
+        private final int[] i2;
+        /** Index indirection table giving for each index the value index + m3 taking table size into account. */
+        private final int[] i3;
+
+        /** Creates a new pre-calculated indirection index table.
+         * @param k number of bits in the pool (not necessarily a multiple of 32)
+         * @param m1 first parameter of the algorithm
+         * @param m2 second parameter of the algorithm
+         * @param m3 third parameter of the algorithm
+         */
+        public IndexTable(final int k, final int m1, final int m2, final int m3) {
+
+            final int r = calculateBlockCount(k);
+
+            // precompute indirection index tables. These tables are used for optimizing access
+            // they allow saving computations like "(j + r - 2) % r" with costly modulo operations
+            iRm1 = new int[r];
+            iRm2 = new int[r];
+            i1 = new int[r];
+            i2 = new int[r];
+            i3 = new int[r];
+            for (int j = 0; j < r; ++j) {
+                iRm1[j] = (j + r - 1) % r;
+                iRm2[j] = (j + r - 2) % r;
+                i1[j] = (j + m1) % r;
+                i2[j] = (j + m2) % r;
+                i3[j] = (j + m3) % r;
+            }
+        }
+
+        /**
+         * Returns the predecessor of the given index modulo the table size.
+         * @param index the index to look at
+         * @return (index - 1) % table size
+         */
+        public int getIndexPred(final int index) {
+            return iRm1[index];
+        }
+
+        /**
+         * Returns the second predecessor of the given index modulo the table size.
+         * @param index the index to look at
+         * @return (index - 2) % table size
+         */
+        public int getIndexPred2(final int index) {
+            return iRm2[index];
+        }
+
+        /**
+         * Returns index + M1 modulo the table size.
+         * @param index the index to look at
+         * @return (index + M1) % table size
+         */
+        public int getIndexM1(final int index) {
+            return i1[index];
+        }
+
+        /**
+         * Returns index + M2 modulo the table size.
+         * @param index the index to look at
+         * @return (index + M2) % table size
+         */
+        public int getIndexM2(final int index) {
+            return i2[index];
+        }
+
+        /**
+         * Returns index + M3 modulo the table size.
+         * @param index the index to look at
+         * @return (index + M3) % table size
+         */
+        public int getIndexM3(final int index) {
+            return i3[index];
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/ISAACRandom.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/ISAACRandom.java
new file mode 100644
index 0000000000..c7dd73aec3
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/ISAACRandom.java
@@ -0,0 +1,270 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source32;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * A fast cryptographic pseudo-random number generator.
+ * <p>
+ * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit
+ * random numbers.
+ * ISAAC has been designed to be cryptographically secure and is inspired
+ * by RC4.
+ * Cycles are guaranteed to be at least 2<sup>40</sup> values long, and they
+ * are 2<sup>8295</sup> values long on average.
+ * The results are uniformly distributed, unbiased, and unpredictable unless
+ * you know the seed.
+ * <p>
+ * This code is based (with minor changes and improvements) on the original
+ * implementation of the algorithm by Bob Jenkins.
+ *
+ * @see <a href="http://burtleburtle.net/bob/rand/isaacafa.html">
+ * ISAAC: a fast cryptographic pseudo-random number generator</a>
+ *
+ * @since 4.0
+ */
+public class ISAACRandom extends IntProvider {
+    /** Log of size of rsl[] and mem[] */
+    private static final int SIZE_L = 8;
+    /** Size of rsl[] and mem[] */
+    private static final int SIZE = 1 << SIZE_L;
+    /** Half-size of rsl[] and mem[] */
+    private static final int H_SIZE = SIZE >> 1;
+    /** For pseudo-random lookup */
+    private static final int MASK = SIZE - 1 << 2;
+    /** The golden ratio */
+    private static final int GLD_RATIO = 0x9e3779b9;
+    /** The results given to the user */
+    private final int[] rsl = new int[SIZE];
+    /** The internal state */
+    private final int[] mem = new int[SIZE];
+    /** Count through the results in rsl[] */
+    private int count;
+    /** Accumulator */
+    private int isaacA;
+    /** The last result */
+    private int isaacB;
+    /** Counter, guarantees cycle is at least 2^40 */
+    private int isaacC;
+    /** Service variable. */
+    private final int[] arr = new int[8];
+    /** Service variable. */
+    private int isaacX;
+    /** Service variable. */
+    private int isaacI;
+    /** Service variable. */
+    private int isaacJ;
+
+    /**
+     * Creates a new ISAAC random number generator.
+     *
+     * @param seed Initial seed
+     */
+    public ISAACRandom(int[] seed) {
+        setSeedInternal(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        final int[] sRsl = Arrays.copyOf(rsl, SIZE);
+        final int[] sMem = Arrays.copyOf(mem, SIZE);
+        final int[] sRem = Arrays.copyOf(new int[] { count, isaacA, isaacB, isaacC }, 4);
+
+        final int[] s = new int[2 * SIZE + sRem.length];
+        System.arraycopy(sRsl, 0, s, 0, SIZE);
+        System.arraycopy(sMem, 0, s, SIZE, SIZE);
+        System.arraycopy(sRem, 0, s, 2 * SIZE, sRem.length);
+
+        return NumberFactory.makeByteArray(s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != (2 * SIZE + 4) * 4) {
+            throw new InsufficientDataException();
+        }
+
+        final int[] tmp = NumberFactory.makeIntArray(s);
+
+        System.arraycopy(tmp, 0, rsl, 0, SIZE);
+        System.arraycopy(tmp, SIZE, mem, 0, SIZE);
+        final int offset = 2 * SIZE;
+        count = tmp[offset];
+        isaacA = tmp[offset + 1];
+        isaacB = tmp[offset + 2];
+        isaacC = tmp[offset + 3];
+    }
+
+    /**
+     * Reseeds the RNG.
+     *
+     * @param seed Seed. Cannot be null.
+     */
+    private void setSeedInternal(int[] seed) {
+        final int seedLen = seed.length;
+        final int rslLen = rsl.length;
+        System.arraycopy(seed, 0, rsl, 0, Math.min(seedLen, rslLen));
+        if (seedLen < rslLen) {
+            for (int j = seedLen; j < rslLen; j++) {
+                long k = rsl[j - seedLen];
+                rsl[j] = (int) (0x6c078965L * (k ^ k >> 30) + j & 0xffffffffL);
+            }
+        }
+        initState();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        if (count < 0) {
+            isaac();
+            count = SIZE - 1;
+        }
+        return rsl[count--];
+    }
+
+    /** Generate 256 results */
+    private void isaac() {
+        isaacI = 0;
+        isaacJ = H_SIZE;
+        isaacB += ++isaacC;
+        while (isaacI < H_SIZE) {
+            isaac2();
+        }
+        isaacJ = 0;
+        while (isaacJ < H_SIZE) {
+            isaac2();
+        }
+    }
+
+    /** Intermediate internal loop. */
+    private void isaac2() {
+        isaacX = mem[isaacI];
+        isaacA ^= isaacA << 13;
+        isaacA += mem[isaacJ++];
+        isaac3();
+        isaacX = mem[isaacI];
+        isaacA ^= isaacA >>> 6;
+        isaacA += mem[isaacJ++];
+        isaac3();
+        isaacX = mem[isaacI];
+        isaacA ^= isaacA << 2;
+        isaacA += mem[isaacJ++];
+        isaac3();
+        isaacX = mem[isaacI];
+        isaacA ^= isaacA >>> 16;
+        isaacA += mem[isaacJ++];
+        isaac3();
+    }
+
+    /** Lowest level internal loop. */
+    private void isaac3() {
+        mem[isaacI] = mem[(isaacX & MASK) >> 2] + isaacA + isaacB;
+        isaacB = mem[(mem[isaacI] >> SIZE_L & MASK) >> 2] + isaacX;
+        rsl[isaacI++] = isaacB;
+    }
+
+    /** Initialize, or reinitialize, this instance of rand. */
+    private void initState() {
+        isaacA = 0;
+        isaacB = 0;
+        isaacC = 0;
+        for (int j = 0; j < arr.length; j++) {
+            arr[j] = GLD_RATIO;
+        }
+        for (int j = 0; j < 4; j++) {
+            shuffle();
+        }
+        // fill in mem[] with messy stuff
+        for (int j = 0; j < SIZE; j += 8) {
+            arr[0] += rsl[j];
+            arr[1] += rsl[j + 1];
+            arr[2] += rsl[j + 2];
+            arr[3] += rsl[j + 3];
+            arr[4] += rsl[j + 4];
+            arr[5] += rsl[j + 5];
+            arr[6] += rsl[j + 6];
+            arr[7] += rsl[j + 7];
+            shuffle();
+            setState(j);
+        }
+        // second pass makes all of seed affect all of mem
+        for (int j = 0; j < SIZE; j += 8) {
+            arr[0] += mem[j];
+            arr[1] += mem[j + 1];
+            arr[2] += mem[j + 2];
+            arr[3] += mem[j + 3];
+            arr[4] += mem[j + 4];
+            arr[5] += mem[j + 5];
+            arr[6] += mem[j + 6];
+            arr[7] += mem[j + 7];
+            shuffle();
+            setState(j);
+        }
+        isaac();
+        count = SIZE - 1;
+    }
+
+    /** Shuffle array. */
+    private void shuffle() {
+        arr[0] ^= arr[1] << 11;
+        arr[3] += arr[0];
+        arr[1] += arr[2];
+        arr[1] ^= arr[2] >>> 2;
+        arr[4] += arr[1];
+        arr[2] += arr[3];
+        arr[2] ^= arr[3] << 8;
+        arr[5] += arr[2];
+        arr[3] += arr[4];
+        arr[3] ^= arr[4] >>> 16;
+        arr[6] += arr[3];
+        arr[4] += arr[5];
+        arr[4] ^= arr[5] << 10;
+        arr[7] += arr[4];
+        arr[5] += arr[6];
+        arr[5] ^= arr[6] >>> 4;
+        arr[0] += arr[5];
+        arr[6] += arr[7];
+        arr[6] ^= arr[7] << 8;
+        arr[1] += arr[6];
+        arr[7] += arr[0];
+        arr[7] ^= arr[0] >>> 9;
+        arr[2] += arr[7];
+        arr[0] += arr[1];
+    }
+
+    /** Set the state by copying the internal arrays.
+     *
+     * @param start First index into {@link #mem} array.
+     */
+    private void setState(int start) {
+        mem[start] = arr[0];
+        mem[start + 1] = arr[1];
+        mem[start + 2] = arr[2];
+        mem[start + 3] = arr[3];
+        mem[start + 4] = arr[4];
+        mem[start + 5] = arr[5];
+        mem[start + 6] = arr[6];
+        mem[start + 7] = arr[7];
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/IntProvider.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/IntProvider.java
new file mode 100644
index 0000000000..bae33fc780
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/IntProvider.java
@@ -0,0 +1,137 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+import org.apache.commons.math4.rng.internal.BaseProvider;
+
+/**
+ * Base class for all implementations that provide an {@code int}-based
+ * source randomness.
+ */
+public abstract class IntProvider
+    extends BaseProvider
+    implements RandomIntSource {
+
+    /** {@inheritDoc} */
+    @Override
+    public abstract int next();
+
+    /** {@inheritDoc} */
+    @Override
+    public int nextInt() {
+        return next();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public boolean nextBoolean() {
+        return NumberFactory.makeBoolean(nextInt());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public double nextDouble() {
+        return NumberFactory.makeDouble(nextInt(), nextInt());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public float nextFloat() {
+        return NumberFactory.makeFloat(nextInt());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long nextLong() {
+        return NumberFactory.makeLong(nextInt(), nextInt());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void nextBytes(byte[] bytes) {
+        nextBytesFill(this, bytes, 0, bytes.length);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void nextBytes(byte[] bytes,
+                          int start,
+                          int len) {
+        if (start < 0 ||
+            start >= bytes.length) {
+            throw new OutOfRangeException(start, 0, bytes.length);
+        }
+        if (len < 0 ||
+            len > bytes.length - start) {
+            throw new OutOfRangeException(len, 0, bytes.length - start);
+        }
+
+        nextBytesFill(this, bytes, start, len);
+    }
+
+    /**
+     * Generates random bytes and places them into a user-supplied array.
+     *
+     * <p>
+     * The array is filled with bytes extracted from random {@code int} values.
+     * This implies that the number of random bytes generated may be larger than
+     * the length of the byte array.
+     * </p>
+     *
+     * @param source Source of randomness.
+     * @param bytes Array in which to put the generated bytes. Cannot be null.
+     * @param start Index at which to start inserting the generated bytes.
+     * @param len Number of bytes to insert.
+     */
+    static void nextBytesFill(RandomIntSource source,
+                              byte[] bytes,
+                              int start,
+                              int len) {
+        int index = start; // Index of first insertion.
+
+        // Index of first insertion plus multiple of 4 part of length
+        // (i.e. length with 2 least significant bits unset).
+        final int indexLoopLimit = index + (len & 0x7ffffffc);
+
+        // Start filling in the byte array, 4 bytes at a time.
+        while (index < indexLoopLimit) {
+            final int random = source.next();
+            bytes[index++] = (byte) random;
+            bytes[index++] = (byte) (random >>> 8);
+            bytes[index++] = (byte) (random >>> 16);
+            bytes[index++] = (byte) (random >>> 24);
+        }
+
+        final int indexLimit = start + len; // Index of last insertion + 1.
+
+        // Fill in the remaining bytes.
+        if (index < indexLimit) {
+            int random = source.next();
+            while (true) {
+                bytes[index++] = (byte) random;
+                if (index < indexLimit) {
+                    random >>>= 8;
+                } else {
+                    break;
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/JDKRandom.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/JDKRandom.java
new file mode 100644
index 0000000000..e393c123a8
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/JDKRandom.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import java.util.Random;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ByteArrayInputStream;
+
+/**
+ * A provider that uses the {@link Random#nextInt()} method of the JDK's
+ * {@code Random} class as the source of randomness.
+ *
+ * <p>
+ * <b>Caveat:</b> All the other calls will be redirected to the methods
+ * implemented within this library.
+ * </p>
+ *
+ * <p>
+ * The state of this source of randomness is saved and restored through
+ * the serialization of the {@link Random} instance.
+ * </p>
+ *
+ * @since 4.0
+ */
+public class JDKRandom extends IntProvider {
+    /** Delegate.  Cannot be "final" (to allow serialization). */
+    private Random delegate;
+
+    /**
+     * Creates an instance with the given seed.
+     *
+     * @param seed Initial seed.
+     */
+    public JDKRandom(Long seed) {
+        delegate = new Random(seed);
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @see Random#nextInt()
+     */
+    @Override
+    public int next() {
+        return delegate.nextInt();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        try {
+            final ByteArrayOutputStream bos = new ByteArrayOutputStream();
+            final ObjectOutputStream oos = new ObjectOutputStream(bos);
+
+            // Serialize the "delegate".
+            oos.writeObject(delegate);
+
+            return bos.toByteArray();
+        } catch (IOException e) {
+            // Workaround checked exception.
+            throw new RuntimeException(e);
+        }
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        try {
+            final ByteArrayInputStream bis = new ByteArrayInputStream(s);
+            final ObjectInputStream ois = new ObjectInputStream(bis);
+
+            delegate = (Random) ois.readObject();
+        } catch (ClassNotFoundException|IOException e) {
+            // Workaround checked exception.
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/MersenneTwister.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/MersenneTwister.java
new file mode 100644
index 0000000000..7ae5fd8bad
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/MersenneTwister.java
@@ -0,0 +1,230 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * This class implements a powerful pseudo-random number generator
+ * developed by Makoto Matsumoto and Takuji Nishimura during
+ * 1996-1997.
+ *
+ * <p>
+ * This generator features an extremely long period
+ * (2<sup>19937</sup>-1) and 623-dimensional equidistribution up to
+ * 32 bits accuracy.  The home page for this generator is located at
+ * <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">
+ * http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html</a>.
+ * </p>
+ *
+ * <p>
+ * This generator is described in a paper by Makoto Matsumoto and
+ * Takuji Nishimura in 1998:
+ * <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf">
+ * Mersenne Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random
+ * Number Generator</a>,
+ * ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1,
+ * January 1998, pp 3--30
+ * </p>
+ *
+ * <p>
+ * This class is mainly a Java port of the
+ * <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html">
+ * 2002-01-26 version of the generator</a> written in C by Makoto Matsumoto
+ * and Takuji Nishimura. Here is their original copyright:
+ * </p>
+ *
+ * <table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0">
+ * <tr><td>Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
+ *     All rights reserved.</td></tr>
+ *
+ * <tr><td>Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * <ol>
+ *   <li>Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.</li>
+ *   <li>Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.</li>
+ *   <li>The names of its contributors may not be used to endorse or promote
+ *       products derived from this software without specific prior written
+ *       permission.</li>
+ * </ol></td></tr>
+ *
+ * <tr><td><strong>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+ * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.</strong></td></tr>
+ * </table>
+ *
+ * @since 4.0
+ */
+public class MersenneTwister extends IntProvider {
+    /** Mask 32 most significant bits. */
+    private static final long INT_MASK_LONG = 0xffffffffL;
+    /** Most significant w-r bits. */
+    private static final long UPPER_MASK_LONG = 0x80000000L;
+    /** Least significant r bits */
+    private static final long LOWER_MASK_LONG = 0x7fffffffL;
+    /** Most significant w-r bits. */
+    private static final int UPPER_MASK = 0x80000000;
+    /** Least significant r bits */
+    private static final int LOWER_MASK = 0x7fffffff;
+    /** Size of the bytes pool. */
+    private static final int N = 624;
+    /** Period second parameter. */
+    private static final int M = 397;
+    /** X * MATRIX_A for X = {0, 1}. */
+    private static final int[] MAG01 = { 0x0, 0x9908b0df };
+    /** Bytes pool. */
+    private int[] mt = new int[N];
+    /** Current index in the bytes pool. */
+    private int mti;
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public MersenneTwister(int[] seed) {
+        setSeedInternal(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        final int[] s = Arrays.copyOf(mt, N + 1);
+        s[N] = mti;
+
+        return NumberFactory.makeByteArray(s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != (N + 1) * 4) {
+            throw new InsufficientDataException();
+        }
+
+        final int[] tmp = NumberFactory.makeIntArray(s);
+
+        System.arraycopy(tmp, 0, mt, 0, N);
+        mti = tmp[N];
+    }
+
+    /**
+     * Reinitializes the generator as if just built with the given seed.
+     *
+     * @param seed Initial seed.
+     */
+    private void setSeedInternal(int[] seed) {
+        initState(19650218);
+        int i = 1;
+        int j = 0;
+
+        for (int k = Math.max(N, seed.length); k != 0; k--) {
+            final long l0 = (mt[i] & LOWER_MASK_LONG)   | ((mt[i]   < 0) ? UPPER_MASK_LONG : 0);
+            final long l1 = (mt[i-1] & LOWER_MASK_LONG) | ((mt[i-1] < 0) ? UPPER_MASK_LONG : 0);
+            final long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
+            mt[i]   = (int) (l & INT_MASK_LONG);
+            i++; j++;
+            if (i >= N) {
+                mt[0] = mt[N - 1];
+                i = 1;
+            }
+            if (j >= seed.length) {
+                j = 0;
+            }
+        }
+
+        for (int k = N - 1; k != 0; k--) {
+            final long l0 = (mt[i] & LOWER_MASK_LONG)   | ((mt[i]   < 0) ? UPPER_MASK_LONG : 0);
+            final long l1 = (mt[i-1] & LOWER_MASK_LONG) | ((mt[i-1] < 0) ? UPPER_MASK_LONG : 0);
+            final long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
+            mt[i]   = (int) (l & INT_MASK_LONG);
+            i++;
+            if (i >= N) {
+                mt[0] = mt[N - 1];
+                i = 1;
+            }
+        }
+
+        mt[0] = UPPER_MASK; // MSB is 1; assuring non-zero initial array
+    }
+
+    /**
+     * Initialize the internal state of this instance.
+     *
+     * @param seed Seed.
+     */
+    private void initState(int seed) {
+        long longMT = seed & INT_MASK_LONG;
+        mt[0]= (int) longMT;
+        for (mti = 1; mti < N; ++mti) {
+            longMT = (1812433253L * (longMT ^ (longMT >> 30)) + mti) & INT_MASK_LONG;
+            mt[mti]= (int) longMT;
+        }
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        int y;
+
+        if (mti >= N) { // Generate N words at one time.
+            int mtNext = mt[0];
+            for (int k = 0; k < N - M; ++k) {
+                int mtCurr = mtNext;
+                mtNext = mt[k + 1];
+                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
+                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 1];
+            }
+            for (int k = N - M; k < N - 1; ++k) {
+                int mtCurr = mtNext;
+                mtNext = mt[k + 1];
+                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
+                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 1];
+            }
+            y = (mtNext & UPPER_MASK) | (mt[0] & LOWER_MASK);
+            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 1];
+
+            mti = 0;
+        }
+
+        y = mt[mti++];
+
+        // Tempering.
+        y ^=  y >>> 11;
+        y ^= (y << 7) & 0x9d2c5680;
+        y ^= (y << 15) & 0xefc60000;
+        y ^=  y >>> 18;
+
+        return y;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/RandomIntSource.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/RandomIntSource.java
new file mode 100644
index 0000000000..88f420c7cc
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/RandomIntSource.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * Source of randomness that generate values of type {@code int}.
+ *
+ * @since 4.0
+ */
+public interface RandomIntSource {
+    /**
+     * @return the next random value.
+     */
+    int next();
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well1024a.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well1024a.java
new file mode 100644
index 0000000000..86c84c329a
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well1024a.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL1024a pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 4.0
+ */
+public class Well1024a extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 1024;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 3;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 24;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 10;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well1024a(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        final int indexRm1 = TABLE.getIndexPred(index);
+
+        final int v0 = v[index];
+        final int vM1 = v[TABLE.getIndexM1(index)];
+        final int vM2 = v[TABLE.getIndexM2(index)];
+        final int vM3 = v[TABLE.getIndexM3(index)];
+
+        final int z0 = v[indexRm1];
+        final int z1 = v0 ^ (vM1 ^ (vM1 >>> 8));
+        final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
+        final int z3 = z1 ^ z2;
+        final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        index = indexRm1;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937a.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937a.java
new file mode 100644
index 0000000000..7f83ddf001
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937a.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL19937a pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 4.0
+ */
+public class Well19937a extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 19937;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 70;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 179;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 449;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well19937a(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        final int indexRm1 = TABLE.getIndexPred(index);
+        final int indexRm2 = TABLE.getIndexPred2(index);
+
+        final int v0 = v[index];
+        final int vM1 = v[TABLE.getIndexM1(index)];
+        final int vM2 = v[TABLE.getIndexM2(index)];
+        final int vM3 = v[TABLE.getIndexM3(index)];
+
+        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
+        final int z1 = (v0 ^ (v0 << 25)) ^ (vM1 ^ (vM1 >>> 27));
+        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
+        final int z3 = z1 ^ z2;
+        final int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        v[indexRm2] &= 0x80000000;
+        index = indexRm1;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937c.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937c.java
new file mode 100644
index 0000000000..25b9d03650
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well19937c.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL19937c pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 2.2
+ */
+public class Well19937c extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 19937;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 70;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 179;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 449;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well19937c(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        final int indexRm1 = TABLE.getIndexPred(index);
+        final int indexRm2 = TABLE.getIndexPred2(index);
+
+        final int v0 = v[index];
+        final int vM1 = v[TABLE.getIndexM1(index)];
+        final int vM2 = v[TABLE.getIndexM2(index)];
+        final int vM3 = v[TABLE.getIndexM3(index)];
+
+        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
+        final int z1 = (v0 ^ (v0 << 25)) ^ (vM1 ^ (vM1 >>> 27));
+        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
+        final int z3 = z1 ^ z2;
+        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        v[indexRm2] &= 0x80000000;
+        index = indexRm1;
+
+        // add Matsumoto-Kurita tempering
+        // to get a maximally-equidistributed generator
+        z4 ^= (z4 <<  7) & 0xe46e1700;
+        z4 ^= (z4 << 15) & 0x9b868000;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497a.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497a.java
new file mode 100644
index 0000000000..8b72b83bf4
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497a.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL44497a pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 4.0
+ */
+public class Well44497a extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 44497;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 23;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 481;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 229;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well44497a(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        final int indexRm1 = TABLE.getIndexPred(index);
+        final int indexRm2 = TABLE.getIndexPred2(index);
+
+        final int v0 = v[index];
+        final int vM1 = v[TABLE.getIndexM1(index)];
+        final int vM2 = v[TABLE.getIndexM2(index)];
+        final int vM3 = v[TABLE.getIndexM3(index)];
+
+        // the values below include the errata of the original article
+        final int z0 = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
+        final int z1 = (v0 ^ (v0 << 24)) ^ (vM1 ^ (vM1 >>> 30));
+        final int z2 = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
+        final int z3 = z1 ^ z2;
+        final int z2Prime  = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
+        final int z2Second = ((z2 & 0x00020000) != 0) ? (z2Prime ^ 0xb729fcec) : z2Prime;
+        final int z4 = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        v[indexRm2] &= 0xFFFF8000;
+        index = indexRm1;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497b.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497b.java
new file mode 100644
index 0000000000..5300aba27b
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well44497b.java
@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL44497b pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 4.0
+ */
+public class Well44497b extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 44497;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 23;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 481;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 229;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well44497b(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        // compute raw value given by WELL44497a generator
+        // which is NOT maximally-equidistributed
+        final int indexRm1 = TABLE.getIndexPred(index);
+        final int indexRm2 = TABLE.getIndexPred2(index);
+
+        final int v0 = v[index];
+        final int vM1 = v[TABLE.getIndexM1(index)];
+        final int vM2 = v[TABLE.getIndexM2(index)];
+        final int vM3 = v[TABLE.getIndexM3(index)];
+
+        // the values below include the errata of the original article
+        final int z0 = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
+        final int z1 = (v0 ^ (v0 << 24))  ^ (vM1 ^ (vM1 >>> 30));
+        final int z2 = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
+        final int z3 = z1 ^ z2;
+        final int z2Prime = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
+        final int z2Second = ((z2 & 0x00020000) != 0) ? (z2Prime ^ 0xb729fcec) : z2Prime;
+        int z4 = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        v[indexRm2] &= 0xFFFF8000;
+        index = indexRm1;
+
+        // add Matsumoto-Kurita tempering
+        // to get a maximally-equidistributed generator
+        z4 ^= (z4 <<  7) & 0x93dd1400;
+        z4 ^= (z4 << 15) & 0xfa118000;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/Well512a.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well512a.java
new file mode 100644
index 0000000000..1faf5711d8
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/Well512a.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+/**
+ * This class implements the WELL512a pseudo-random number generator
+ * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
+ * <p>
+ * This generator is described in a paper by Fran&ccedil;ois Panneton,
+ * Pierre L'Ecuyer and Makoto Matsumoto
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">
+ * Improved Long-Period Generators Based on Linear Recurrences Modulo 2</a>
+ * ACM Transactions on Mathematical Software, 32, 1 (2006).
+ * The errata for the paper are in
+ * <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.
+ * </p>
+ *
+ * @see <a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a>
+ * @since 4.0
+ */
+public class Well512a extends AbstractWell {
+    /** Number of bits in the pool. */
+    private static final int K = 512;
+    /** First parameter of the algorithm. */
+    private static final int M1 = 13;
+    /** Second parameter of the algorithm. */
+    private static final int M2 = 9;
+    /** Third parameter of the algorithm. */
+    private static final int M3 = 5;
+    /** The indirection index table. */
+    private static final IndexTable TABLE = new IndexTable(K, M1, M2, M3);
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public Well512a(int[] seed) {
+        super(K, seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        final int indexRm1 = TABLE.getIndexPred(index);
+
+        final int vi = v[index];
+        final int vi1 = v[TABLE.getIndexM1(index)];
+        final int vi2 = v[TABLE.getIndexM2(index)];
+        final int z0 = v[indexRm1];
+
+        // the values below include the errata of the original article
+        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
+        final int z2 = vi2 ^ (vi2 >>> 11);
+        final int z3 = z1 ^ z2;
+        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));
+
+        v[index] = z3;
+        v[indexRm1] = z4;
+        index = indexRm1;
+
+        return z4;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source32/package-info.java b/src/main/java/org/apache/commons/math4/rng/internal/source32/package-info.java
new file mode 100644
index 0000000000..bb7d2e2d4c
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source32/package-info.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * <h3>
+ * Concrete algorithms for {@code int}-based sources of randomness
+ * </h3>
+ *
+ * <p>
+ * <b>For internal use only:</b> Direct access to classes in this package
+ * is discouraged, as they could be modified without notice.
+ * </p>
+ *
+ * <p><b>Notes for developers</b></p>
+ *
+ * <ul>
+ *  <li>
+ *   A source of randomness must inherit from
+ *   {@link org.apache.commons.math4.rng.internal.source32.IntProvider}
+ *  </li>
+ *  <li>
+ *   The "provider" must specify <em>one</em> way for setting the seed.
+ *   For a given seed, the generated sequence must always be the same.
+ *  </li>
+ *  <li>
+ *   The "provider" must implement methods {@code getStateInternal} and
+ *   {@code setStateInternal} in order to save and restore the state of an
+ *   instance (cf. {@link org.apache.commons.math4.rng.internal.BaseProvider}).
+ *  </li>
+ *  <li>
+ *   When a new class is implemented here, user-access to it must be provided
+ *   through associated {@link org.apache.commons.math4.rng.RandomSource
+ *   factory methods}.
+ *  </li>
+ * </ul>
+ */
+
+package org.apache.commons.math4.rng.internal.source32;
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/LongProvider.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/LongProvider.java
new file mode 100644
index 0000000000..3e73f058ae
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/LongProvider.java
@@ -0,0 +1,141 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+import org.apache.commons.math4.rng.internal.BaseProvider;
+
+/**
+ * Base class for all implementations that provide a {@code long}-based
+ * source randomness.
+ */
+public abstract class LongProvider
+    extends BaseProvider
+    implements RandomLongSource {
+
+    /** {@inheritDoc} */
+    @Override
+    public abstract long next();
+
+    /** {@inheritDoc} */
+    @Override
+    public long nextLong() {
+        return next();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int nextInt() {
+        return NumberFactory.makeInt(nextLong());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public double nextDouble() {
+        return NumberFactory.makeDouble(nextLong());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public boolean nextBoolean() {
+        return NumberFactory.makeBoolean(nextLong());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public float nextFloat() {
+        return NumberFactory.makeFloat(nextInt());
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void nextBytes(byte[] bytes) {
+        nextBytesFill(this, bytes, 0, bytes.length);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void nextBytes(byte[] bytes,
+                          int start,
+                          int len) {
+        if (start < 0 ||
+            start >= bytes.length) {
+            throw new OutOfRangeException(start, 0, bytes.length);
+        }
+        if (len < 0 ||
+            len > bytes.length - start) {
+            throw new OutOfRangeException(len, 0, bytes.length - start);
+        }
+
+        nextBytesFill(this, bytes, start, len);
+    }
+
+    /**
+     * Generates random bytes and places them into a user-supplied array.
+     *
+     * <p>
+     * The array is filled with bytes extracted from random {@code long} values.
+     * This implies that the number of random bytes generated may be larger than
+     * the length of the byte array.
+     * </p>
+     *
+     * @param source Source of randomness.
+     * @param bytes Array in which to put the generated bytes. Cannot be null.
+     * @param start Index at which to start inserting the generated bytes.
+     * @param len Number of bytes to insert.
+     */
+    static void nextBytesFill(RandomLongSource source,
+                              byte[] bytes,
+                              int start,
+                              int len) {
+        int index = start; // Index of first insertion.
+
+        // Index of first insertion plus multiple of 8 part of length
+        // (i.e. length with 3 least significant bits unset).
+        final int indexLoopLimit = index + (len & 0x7ffffff8);
+
+        // Start filling in the byte array, 8 bytes at a time.
+        while (index < indexLoopLimit) {
+            final long random = source.next();
+            bytes[index++] = (byte) random;
+            bytes[index++] = (byte) (random >>> 8);
+            bytes[index++] = (byte) (random >>> 16);
+            bytes[index++] = (byte) (random >>> 24);
+            bytes[index++] = (byte) (random >>> 32);
+            bytes[index++] = (byte) (random >>> 40);
+            bytes[index++] = (byte) (random >>> 48);
+            bytes[index++] = (byte) (random >>> 56);
+        }
+
+        final int indexLimit = start + len; // Index of last insertion + 1.
+
+        // Fill in the remaining bytes.
+        if (index < indexLimit) {
+            long random = source.next();
+            while (true) {
+                bytes[index++] = (byte) random;
+                if (index < indexLimit) {
+                    random >>>= 8;
+                } else {
+                    break;
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64.java
new file mode 100644
index 0000000000..0280842b44
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64.java
@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source64;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * This class provides the 64-bits version of the originally 32-bits
+ * {@link org.apache.commons.math4.rng.internal.source32.MersenneTwister
+ * Mersenne Twister}.
+ *
+ * <p>
+ * This class is mainly a Java port of
+ * <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt64.html">
+ *  the 2014/2/23 version of the generator
+ * </a> written in C by Takuji Nishimura and Makoto Matsumoto.
+ * </p>
+ *
+ * <p>
+ * Here is their original copyright:
+ * </p>
+ *
+ * <table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0">
+ * <tr><td>Copyright (C) 2004, Makoto Matsumoto and Takuji Nishimura,
+ *     All rights reserved.</td></tr>
+ *
+ * <tr><td>Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * <ol>
+ *   <li>Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.</li>
+ *   <li>Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.</li>
+ *   <li>The names of its contributors may not be used to endorse or promote
+ *       products derived from this software without specific prior written
+ *       permission.</li>
+ * </ol></td></tr>
+ *
+ * <tr><td><strong>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
+ * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.</strong></td></tr>
+ * </table>
+ *
+ * @since 4.0
+ */
+public class MersenneTwister64 extends LongProvider {
+    /** Size of the bytes pool. */
+    private static final int NN = 312;
+    /** Period second parameter. */
+    private static final int MM = 156;
+    /** X * MATRIX_A for X = {0, 1}. */
+    private static final long[] MAG01 = { 0x0, 0xb5026f5aa96619e9L };
+    /** Most significant 33 bits. */
+    private static final long UM = 0xffffffff80000000L;
+    /** Least significant 31 bits. */
+    private static final long LM = 0x7fffffffL;
+    /** Bytes pool. */
+    private long[] mt = new long[NN];
+    /** Current index in the bytes pool. */
+    private int mti;
+
+    /**
+     * Creates a new random number generator.
+     *
+     * @param seed Initial seed.
+     */
+    public MersenneTwister64(long[] seed) {
+        setSeedInternal(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        final long[] s = Arrays.copyOf(mt, NN + 1);
+        s[NN] = mti;
+
+        return NumberFactory.makeByteArray(s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != (NN + 1) * 8) {
+            throw new InsufficientDataException();
+        }
+
+        final long[] tmp = NumberFactory.makeLongArray(s);
+
+        System.arraycopy(tmp, 0, mt, 0, NN);
+        mti = (int) tmp[NN];
+    }
+
+    /**
+     * Reinitializes the generator as if just built with the given seed.
+     *
+     * @param seed Initial seed.
+     */
+    private void setSeedInternal(long[] seed) {
+        initState(19650218L);
+
+        int i = 1;
+        int j = 0;
+
+        for (int k = Math.max(NN, seed.length); k != 0; k--) {
+            final long mm1 = mt[i - 1];
+            mt[i] = (mt[i] ^ ((mm1 ^ (mm1 >>> 62)) * 0x369dea0f31a53f85L)) + seed[j] + j; // non linear
+            i++;
+            j++;
+            if (i >= NN) {
+                mt[0] = mt[NN - 1];
+                i = 1;
+            }
+            if (j >= seed.length) {
+                j = 0;
+            }
+        }
+        for (int k = NN - 1; k != 0; k--) {
+            final long mm1 = mt[i - 1];
+            mt[i] = (mt[i] ^ ((mm1 ^ (mm1 >>> 62)) * 0x27bb2ee687b0b0fdL)) - i; // non linear
+            i++;
+            if (i >= NN) {
+                mt[0] = mt[NN - 1];
+                i = 1;
+            }
+        }
+
+        mt[0] = 0x8000000000000000L; // MSB is 1; assuring non-zero initial array
+    }
+
+    /**
+     * Initialize the internal state of this instance.
+     *
+     * @param seed Seed.
+     */
+    private void initState(long seed) {
+        mt[0] = seed;
+        for (mti = 1; mti < NN; mti++) {
+            final long mm1 = mt[mti - 1];
+            mt[mti] = 0x5851f42d4c957f2dL * (mm1 ^ (mm1 >>> 62)) + mti;
+        }
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long next() {
+        long x;
+
+        if (mti >= NN) { // generate NN words at one time
+            for (int i = 0; i < NN - MM; i++) {
+                x = (mt[i] & UM) | (mt[i + 1] & LM);
+                mt[i] = mt[i + MM] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
+            }
+            for (int i = NN - MM; i < NN - 1; i++) {
+                x = (mt[i] & UM) | (mt[i + 1] & LM);
+                mt[i] = mt[ i + (MM - NN)] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
+            }
+
+            x = (mt[NN - 1] & UM) | (mt[0] & LM);
+            mt[NN - 1] = mt[MM - 1] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
+
+            mti = 0;
+        }
+
+        x = mt[mti++];
+
+        x ^= (x >>> 29) & 0x5555555555555555L;
+        x ^= (x << 17) & 0x71d67fffeda60000L;
+        x ^= (x << 37) & 0xfff7eee000000000L;
+        x ^= x >>> 43;
+
+        return x;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/RandomLongSource.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/RandomLongSource.java
new file mode 100644
index 0000000000..0daa0684b1
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/RandomLongSource.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
+
+/**
+ * Source of randomness that generate values of type {@code long}.
+ *
+ * @since 4.0
+ */
+public interface RandomLongSource {
+    /**
+     * @return the next random value.
+     */
+    long next();
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/SplitMix64.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/SplitMix64.java
new file mode 100644
index 0000000000..086bd03228
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/SplitMix64.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * A fast RNG, with 64 bits of state, that can be used to initialize the
+ * state of other generators.
+ *
+ * @see <a href="http://xorshift.di.unimi.it/splitmix64.c">
+ * Original source code</a>
+ *
+ * @since 4.0
+ */
+public class SplitMix64 extends LongProvider {
+    /** State. */
+    private long state;
+
+    /**
+     * Creates a new instance.
+     *
+     * @param seed Initial seed.
+     */
+    public SplitMix64(Long seed) {
+        setSeedInternal(seed);
+    }
+
+    /**
+     * Seeds the RNG.
+     *
+     * @param seed Seed.
+     */
+    private void setSeedInternal(Long seed) {
+        state = seed;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long next() {
+        long z = state += 0x9e3779b97f4a7c15L;
+        z = (z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;
+        z = (z ^ (z >>> 27)) * 0x94d049bb133111ebL;
+        return z ^ (z >>> 31);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        return NumberFactory.makeByteArray(state);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != 8) {
+            throw new InsufficientDataException();
+        }
+
+        state = NumberFactory.makeLong(s);
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/TwoCmres.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/TwoCmres.java
new file mode 100644
index 0000000000..d6fdcd6e5e
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/TwoCmres.java
@@ -0,0 +1,310 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
+
+import java.util.List;
+import java.util.ArrayList;
+import org.apache.commons.math4.exception.MathInternalError;
+import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * Random number generator designed by Mark D. Overton.
+ * <p>
+ *  It is one of the many generators described by the author in the following article series:
+ *  <ul>
+ *   <li><a href="http://www.drdobbs.com/tools/fast-high-quality-parallel-random-number/229625477">Part one</a></li>
+ *   <li><a href="http://www.drdobbs.com/tools/fast-high-quality-parallel-random-number/231000484">Part two</a></li>
+ *  </ul>
+ * </p>
+ *
+ * @since 4.0
+ */
+public class TwoCmres extends LongProvider {
+    /** A small positive integer. */
+    private static final byte SEED_GUARD = 9;
+    /** Factory of instances of this class. Singleton. */
+    private static final Cmres.Factory FACTORY = new Cmres.Factory();
+    /** First subcycle generator. */
+    private final Cmres x;
+    /** Second subcycle generator. */
+    private final Cmres y;
+    /** State of first subcycle generator. */
+    private long xx;
+    /** State of second subcycle generator. */
+    private long yy;
+
+    /**
+     * Creates a new instance.
+     *
+     * @param seed Initial seed.
+     * @param x First subcycle generator.
+     * @param y Second subcycle generator.
+     * @throws InsufficientDataException if {@code x == y}.
+     */
+    private TwoCmres(int seed,
+                     Cmres x,
+                     Cmres y) {
+        if (x == y) {
+            throw new InsufficientDataException();
+        }
+        this.x = x;
+        this.y = y;
+        setSeedInternal(seed);
+    }
+
+    /**
+     * Creates a new instance.
+     *
+     * @param seed Seed.
+     */
+    public TwoCmres(Integer seed) {
+        this(seed, 0, 1);
+    }
+
+    /**
+     * Creates a new instance.
+     *
+     * @param seed Seed.
+     * @param i Table entry for first subcycle generator.
+     * @param j Table entry for second subcycle generator.
+     * @throws InsufficientDataException if {@code i == j}.
+     * @throws OutOfRangeException if {@code i < 0} or
+     * {@code i >= numberOfSubcycleGenerators()}.
+     * @throws OutOfRangeException if {@code j < 0} or
+     * {@code j >= numberOfSubcycleGenerators()}.
+     */
+    public TwoCmres(Integer seed,
+                    int i,
+                    int j) {
+        this(seed, FACTORY.get(i), FACTORY.get(j));
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long next() {
+        xx = x.transform(xx);
+        yy = y.transform(yy);
+
+        return xx + yy;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return super.toString() + " (" + x + " + " + y + ")";
+    }
+
+    /**
+     * @return the number of subcycle generators.
+     */
+    public static int numberOfSubcycleGenerators() {
+        return FACTORY.numberOfSubcycleGenerators();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        return NumberFactory.makeByteArray(new long[] { xx, yy });
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != 16) {
+            throw new InsufficientDataException();
+        }
+
+        final long[] state = NumberFactory.makeLongArray(s);
+        xx = state[0];
+        yy = state[1];
+    }
+
+    /**
+     * @param seed Seed.
+     */
+    private void setSeedInternal(int seed) {
+        // The seeding procedure consists in going away from some
+        // point known to be in the cycle.
+        // The total number of calls to the "transform" method will
+        // not exceed about 130,000 (which is negligible as seeding
+        // will not occur more than once in normal usage).
+
+        // Make two positive 16-bits integers.
+        final long s = NumberFactory.makeLong(0, seed); // s >= 0
+        final int xMax = (int) (s & 0xffff + SEED_GUARD);
+        final int yMax = (int) ((s >> 16) + SEED_GUARD);
+
+        if (xMax < 0 ||
+            yMax < 0) {
+            throw new MathInternalError();
+        }
+
+        xx = x.getStart();
+        for (int i = xMax; i > 0; i--) {
+            xx = x.transform(xx);
+        }
+
+        yy = y.getStart();
+        for (int i = yMax; i > 0; i--) {
+            yy = y.transform(yy);
+        }
+    }
+
+    /**
+     * Subcycle generator.
+     * Class is immutable.
+     */
+    static class Cmres {
+        /** Cycle start. */
+        private final int start;
+        /** Multiplier. */
+        private final long multiply;
+        /** Rotation. */
+        private final int rotate;
+
+        /**
+         * @param multiply Multiplier.
+         * @param rotate Positive number. Must be in {@code [0, 64]}.
+         * @param start Cycle start.
+         */
+        Cmres(long multiply,
+              int rotate,
+              int start) {
+            this.multiply = multiply;
+            this.rotate = rotate;
+            this.start = start;
+        }
+
+        /** {@inheritDoc} */
+        @Override
+        public String toString() {
+            final String sep = ", ";
+            // Use hexadecimal for "multiplier" field.
+            final String m = String.format((java.util.Locale) null, "0x%016xL", multiply);
+            return "Cmres: [" + m + sep + rotate + sep + start + "]";
+        }
+
+        /**
+         * @return the multiplier.
+         */
+        public long getMultiply() {
+            return multiply;
+        }
+
+        /**
+         * @return the cycle start.
+         */
+        public int getStart() {
+            return start;
+        }
+
+        /**
+         * @param state Current state.
+         * @return the new state.
+         */
+        long transform(long state) {
+            long s = state;
+            s *= multiply;
+            s = rotl(s);
+            s -= state;
+            return s;
+        }
+
+        /**
+         * @param state State.
+         * @return the rotated state.
+         */
+        private long rotl(long state) {
+            return (state << rotate) | (state >>> (64 - rotate));
+        }
+
+        /** Factory. */
+        static class Factory {
+            /** List of good "Cmres" subcycle generators. */
+            private static final List<Cmres> TABLE = new ArrayList<Cmres>();
+
+            /**
+             * Populates the table.
+             * It lists parameters known to be good (provided in
+             * the article referred to above).
+             * To maintain compatibility, new entries must be added
+             * only at the end of the table.
+             */
+            static {
+                add(0xedce446814d3b3d9L, 33, 0x13b572e7);
+                add(0xc5b3cf786c806df7L, 33, 0x13c8e18a);
+                add(0xdd91bbb8ab9e0e65L, 31, 0x06dd03a6);
+                add(0x7b69342c0790221dL, 31, 0x1646bb8b);
+                add(0x0c72c0d18614c32bL, 33, 0x06014a3d);
+                add(0xd8d98c13bebe26c9L, 33, 0x014e8475);
+                add(0xcb039dc328bbc40fL, 31, 0x008684bd);
+                add(0x858c5ef3c021ed2fL, 32, 0x0dc8d622);
+                add(0x4c8be96bfc23b127L, 33, 0x0b6b20cc);
+                add(0x11eab77f808cf641L, 32, 0x06534421);
+                add(0xbc9bd78810fd28fdL, 31, 0x1d9ba40d);
+                add(0x0f1505c780688cb5L, 33, 0x0b7b7b67);
+                add(0xadc174babc2053afL, 31, 0x267f4197);
+                add(0x900b6b82b31686d9L, 31, 0x023c6985);
+                // Add new entries here.
+            }
+
+            /**
+             * @return the number of subcycle generators.
+             */
+            int numberOfSubcycleGenerators() {
+                return TABLE.size();
+            }
+
+            /**
+             * @param index Index into the list of available generators.
+             * @return the subcycle generator entry at index {@code index}.
+             */
+            Cmres get(int index) {
+                if (index < 0 ||
+                    index >= TABLE.size()) {
+                    throw new OutOfRangeException(index, 0, TABLE.size());
+                }
+
+                return TABLE.get(index);
+            }
+
+            /**
+             * Adds an entry to the {@link Factory#TABLE}.
+             *
+             * @param multiply Multiplier.
+             * @param rotate Rotate.
+             * @param start Cycle start.
+             */
+            private static void add(long multiply,
+                                    int rotate,
+                                    int start) {
+                // Sanity check: if there are duplicates, the class initialization
+                // will fail (and the JVM will report "NoClassDefFoundError").
+                for (Cmres sg : TABLE) {
+                    if (multiply == sg.getMultiply()) {
+                        throw new MathInternalError();
+                    }
+                }
+
+                TABLE.add(new Cmres(multiply, rotate, start));
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/XorShift1024Star.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/XorShift1024Star.java
new file mode 100644
index 0000000000..c6bcfaae2d
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/XorShift1024Star.java
@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * A fast RNG.
+ *
+ * @see <a href="http://xorshift.di.unimi.it/xorshift1024star.c">
+ * Original source code</a>
+ *
+ * @since 4.0
+ */
+public class XorShift1024Star extends LongProvider {
+    /** Size of the state vector. */
+    private static final int SEED_SIZE = 16;
+    /** State. */
+    private final long[] state = new long[SEED_SIZE];
+    /** Index in "state" array. */
+    private int index;
+
+    /**
+     * Creates a new instance.
+     *
+     * @param seed Initial seed.
+     * If the length is larger than 16, only the first 16 elements will
+     * be used; if smaller, the remaining elements will be automatically
+     * set.
+     */
+    public XorShift1024Star(long[] seed) {
+        setSeedInternal(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
+        s[SEED_SIZE] = index;
+
+        return NumberFactory.makeByteArray(s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        if (s.length != (SEED_SIZE + 1) * 8) {
+            throw new InsufficientDataException();
+        }
+
+        final long[] tmp = NumberFactory.makeLongArray(s);
+
+        System.arraycopy(tmp, 0, state, 0, SEED_SIZE);
+        index = (int) tmp[SEED_SIZE];
+    }
+
+    /**
+     * Seeds the RNG.
+     *
+     * @param seed Seed.
+     */
+    private void setSeedInternal(long[] seed) {
+        // Reset the whole state of this RNG (i.e. "state" and "index").
+        // Seeding procedure is not part of the reference code.
+
+        System.arraycopy(seed, 0, state, 0, Math.min(seed.length, state.length));
+
+        if (seed.length < SEED_SIZE) {
+            for (int i = seed.length; i < SEED_SIZE; i++) {
+                state[i] = 26021969L * i;
+            }
+            for (int i = SEED_SIZE - 1; i > seed.length; i--) {
+                state[i] ^= state[SEED_SIZE - i - 1];
+            }
+
+            state[seed.length] = 0x8000000000000000L; // Ensuring non-zero initial array.
+        }
+
+        index = 0;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long next() {
+        final long s0 = state[index];
+        long s1 = state[index = (index + 1) & 15];
+        s1 ^= s1 << 31; // a
+        state[index] = s1 ^ s0 ^ (s1 >>> 11) ^ (s0 >>> 30); // b,c
+        return state[index] * 1181783497276652981L;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/source64/package-info.java b/src/main/java/org/apache/commons/math4/rng/internal/source64/package-info.java
new file mode 100644
index 0000000000..8afab2c9d2
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/source64/package-info.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * <h3>
+ * Concrete algorithms for {@code long}-based sources of randomness
+ * </h3>
+ *
+ * <p>
+ * <b>For internal use only:</b> Direct access to classes in this package
+ * is discouraged, as they could be modified without notice.
+ * </p>
+ *
+ * <p><b>Notes for developers</b></p>
+ *
+ * <ul>
+ *  <li>
+ *   A source of randomness must inherit from
+ *   {@link org.apache.commons.math4.rng.internal.source64.LongProvider}
+ *  </li>
+ *  <li>
+ *   The "provider" must specify <em>one</em> way for setting the seed.
+ *   For a given seed, the generated sequence must always be the same.
+ *  </li>
+ *  <li>
+ *   The "provider" must implement methods {@code getStateInternal} and
+ *   {@code setStateInternal} in order to save and restore the state of an
+ *   instance (cf. {@link org.apache.commons.math4.rng.internal.BaseProvider}).
+ *  </li>
+ *  <li>
+ *   When a new class is implemented here, user-access to it must be provided
+ *   through associated {@link org.apache.commons.math4.rng.RandomSource
+ *   factory methods}.
+ *  </li>
+ * </ul>
+ */
+
+package org.apache.commons.math4.rng.internal.source64;
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/Int2Long.java b/src/main/java/org/apache/commons/math4/rng/internal/util/Int2Long.java
new file mode 100644
index 0000000000..d423c084e8
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/Int2Long.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Converts a {@code Integer} to an {@code Long}.
+ *
+ * @since 4.0
+ */
+public class Int2Long implements SeedConverter<Integer, Long> {
+    /** {@inheritDoc} */
+    @Override
+    public Long convert(Integer seed) {
+        final int s = seed;
+        return NumberFactory.makeLong(s, ~s);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2Int.java b/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2Int.java
new file mode 100644
index 0000000000..030895d06c
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2Int.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Creates a single value by "xor" of all the values in the input array.
+ *
+ * @since 4.0
+ */
+public class IntArray2Int implements SeedConverter<int[], Integer> {
+    /** {@inheritDoc} */
+    @Override
+    public Integer convert(int[] seed) {
+        int out = 0;
+        for (int i = 0; i < seed.length; i++) {
+            out ^= seed[i];
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2LongArray.java b/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2LongArray.java
new file mode 100644
index 0000000000..399de7f51b
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/IntArray2LongArray.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Creates a {@code long[]} from an {@code int[]}.
+ *
+ * @since 4.0
+ */
+public class IntArray2LongArray implements SeedConverter<int[], long[]> {
+    /** {@inheritDoc} */
+    @Override
+    public long[] convert(int[] seed) {
+        final int outSize = (seed.length + 1) / 2;
+        final long[] out = new long[outSize];
+        for (int i = 0; i < outSize; i++) {
+            final int lo = seed[i];
+            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
+            out[i] = NumberFactory.makeLong(hi, lo) ;
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/Long2Int.java b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2Int.java
new file mode 100644
index 0000000000..638b173370
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2Int.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Converts a {@code Long} to an {@code Integer}.
+ *
+ * @since 4.0
+ */
+public class Long2Int implements SeedConverter<Long, Integer> {
+    /** {@inheritDoc} */
+    @Override
+    public Integer convert(Long seed) {
+        return NumberFactory.makeInt(seed);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/Long2IntArray.java b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2IntArray.java
new file mode 100644
index 0000000000..84e5016ea3
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2IntArray.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+
+/**
+ * Uses a {@code long} value to seed a {@link SplitMix64} RNG and
+ * create a {@code int[]} with the requested number of random
+ * values.
+ *
+ * @since 4.0
+ */
+public class Long2IntArray implements SeedConverter<Long, int[]> {
+    /** Size of the output array. */
+    private final int size;
+
+    /**
+     * @param size Size of the output array.
+     */
+    public Long2IntArray(int size) {
+        this.size = size;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int[] convert(Long seed) {
+        return SeedFactory.createIntArray(size, new SplitMix64(seed));
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + "(size=" + size + ")";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/Long2LongArray.java b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2LongArray.java
new file mode 100644
index 0000000000..9d8b700784
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/Long2LongArray.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+
+/**
+ * Uses a {@code Long} value to seed a {@link SplitMix64} RNG and
+ * create a {@code long[]} with the requested number of random
+ * values.
+ *
+ * @since 4.0
+ */
+public class Long2LongArray implements SeedConverter<Long, long[]> {
+    /** Size of the output array. */
+    private final int size;
+
+    /**
+     * @param size Size of the output array.
+     */
+    public Long2LongArray(int size) {
+        this.size = size;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long[] convert(Long seed) {
+        final long[] out = new long[size];
+        final SplitMix64 rng = new SplitMix64(seed);
+        for (int i = 0; i < size; i++) {
+            out[i] = rng.nextLong();
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + "(size: " + size + ")";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2IntArray.java b/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2IntArray.java
new file mode 100644
index 0000000000..67b2ba84e1
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2IntArray.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Creates an {@code int[]} from a {@code long[]}.
+ *
+ * @since 4.0
+ */
+public class LongArray2IntArray implements SeedConverter<long[], int[]> {
+    /** {@inheritDoc} */
+    @Override
+    public int[] convert(long[] seed) {
+        final int[] out = new int[seed.length * 2];
+        for (int i = 0; i < seed.length; i++) {
+            final long current = seed[i];
+            out[i] = NumberFactory.extractLo(current);
+            out[seed.length + i] = NumberFactory.extractHi(current);
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2Long.java b/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2Long.java
new file mode 100644
index 0000000000..4556aaf64d
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/LongArray2Long.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Creates a single value by "xor" of all the values in the input array.
+ *
+ * @since 4.0
+ */
+public class LongArray2Long implements SeedConverter<long[], Long> {
+    /** {@inheritDoc} */
+    @Override
+    public Long convert(long[] seed) {
+        long out = 0;
+        for (int i = 0; i < seed.length; i++) {
+            out ^= seed[i];
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixInt.java b/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixInt.java
new file mode 100644
index 0000000000..e30a0727ee
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixInt.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+
+/**
+ * Uses a {@code long} value to seed a {@link SplitMix64} RNG and
+ * create an {@code int[]} with the requested number of random
+ * values.
+ *
+ * @since 4.0
+ */
+public class LongMixInt implements SeedConverter<Long, int[]> {
+    /** Size of the output array. */
+    private final int size;
+
+    /**
+     * @param size Size of the output array.
+     */
+    public LongMixInt(int size) {
+        this.size = size;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int[] convert(Long seed) {
+        return SeedFactory.createIntArray(size, new SplitMix64(seed));
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + "(size=" + size + ")";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixLong.java b/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixLong.java
new file mode 100644
index 0000000000..12fb59e172
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/LongMixLong.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+
+/**
+ * Uses a {@code long} value to seed a {@link SplitMix64} RNG and
+ * create a {@code long[]} with the requested number of random
+ * values.
+ *
+ * @since 4.0
+ */
+public class LongMixLong implements SeedConverter<Long, long[]> {
+    /** Size of the output array. */
+    private final int size;
+
+    /**
+     * @param size Size of the output array.
+     */
+    public LongMixLong(int size) {
+        this.size = size;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long[] convert(Long seed) {
+        final long[] out = new long[size];
+        final SplitMix64 rng = new SplitMix64(seed);
+        for (int i = 0; i < size; i++) {
+            out[i] = rng.nextLong();
+        }
+
+        return out;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + "(size: " + size + ")";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/NoOpConverter.java b/src/main/java/org/apache/commons/math4/rng/internal/util/NoOpConverter.java
new file mode 100644
index 0000000000..08aee80f47
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/NoOpConverter.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+
+/**
+ * Dummy converter that simply passes on its input.
+ * It can be useful to avoid "unchecked" compiler warnings.
+ *
+ * @param <SEED> Seed type.
+ *
+ * @since 4.0
+ */
+public class NoOpConverter<SEED> implements SeedConverter<SEED, SEED> {
+    /** {@inheritDoc} */
+    @Override
+    public SEED convert(SEED seed) {
+        return seed;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return "Pass-through";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/NumberFactory.java b/src/main/java/org/apache/commons/math4/rng/internal/util/NumberFactory.java
new file mode 100644
index 0000000000..befb16c3c8
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/NumberFactory.java
@@ -0,0 +1,327 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import java.util.Arrays;
+import org.apache.commons.math4.exception.DimensionMismatchException;
+
+/**
+ * Utility for creating number types from one or two {@code int} values
+ * or one {@code long} value, or a sequence of bytes.
+ */
+public final class NumberFactory {
+    /** See {@link #makeDouble(long)} */
+    private static final long DOUBLE_HIGH_BITS = 0x3ffL << 52;
+    /** See {@link #makeFloat(int)} */
+    private static final float FLOAT_MULTIPLIER = 0x1.0p-23f;
+    /** See {@link #makeDouble(int, int)} */
+    private static final double DOUBLE_MULTIPLIER = 0x1.0p-52d;
+    /** Lowest byte mask. */
+    private static final long LONG_LOWEST_BYTE_MASK = 0xffL;
+    /** Number of bytes in a {@code long} */
+    private static final int LONG_SIZE = 8;
+    /** Lowest byte mask. */
+    private static final int INT_LOWEST_BYTE_MASK = 0xff;
+    /** Number of bytes in a {@code int} */
+    private static final int INT_SIZE = 4;
+
+    /**
+     * Class contains only static methods.
+     */
+    private NumberFactory() {}
+
+    /**
+     * @param v Number.
+     * @return a boolean.
+     */
+    public static boolean makeBoolean(int v) {
+        return (v >>> 31) != 0;
+    }
+
+    /**
+     * @param v Number.
+     * @return a boolean.
+     */
+    public static boolean makeBoolean(long v) {
+        return (v >>> 63) != 0;
+    }
+
+    /**
+     * @param v Number.
+     * @return a {@code double} value in the interval {@code [0, 1]}.
+     */
+    public static double makeDouble(long v) {
+        // http://xorshift.di.unimi.it
+        return Double.longBitsToDouble(DOUBLE_HIGH_BITS | v >>> 12) - 1d;
+    }
+
+    /**
+     * @param v Number (high order bits).
+     * @param w Number (low order bits).
+     * @return a {@code double} value in the interval {@code [0, 1]}.
+     */
+    public static double makeDouble(int v,
+                                    int w) {
+        final long high = ((long) (v >>> 6)) << 26;
+        final int low = w >>> 6;
+        return (high | low) * DOUBLE_MULTIPLIER;
+    }
+
+    /**
+     * @param v Number.
+     * @return a {@code float} value in the interval {@code [0, 1]}.
+     */
+    public static float makeFloat(int v) {
+        return (v >>> 9) * FLOAT_MULTIPLIER;
+    }
+
+    /**
+     * @param v Number (high order bits).
+     * @param w Number (low order bits).
+     * @return a {@code long} value.
+     */
+    public static long makeLong(int v,
+                                int w) {
+        return (((long) v) << 32) | (w & 0xffffffffL);
+    }
+
+    /**
+     * Creates an {@code int} from a {@code long}.
+     *
+     * @param v Number.
+     * @return an {@code int} value made from the "xor" of the
+     * {@link #extractHi(long) high order bits} and
+     * {@link #extractLo(long) low order bits} of {@code v}.
+     */
+    public static int makeInt(long v) {
+        return extractHi(v) ^ extractLo(v);
+    }
+
+    /**
+     * Creates an {@code int} from a {@code long}, using the high order bits.
+     * <p>
+     * The returned value is such that if
+     * <pre><code>
+     *  vL = extractLo(v);
+     *  vH = extractHi(v);
+     * </code></pre>
+     * then {@code v} is equal to {@link #makeLong(int,int) makeLong(vH, vL)}.
+     * </p>
+     *
+     * @param v Number.
+     * @return an {@code int} value made from the most significant bits
+     * of {@code v}.
+     */
+    public static int extractHi(long v) {
+        return (int) (v >>> 32);
+    }
+
+    /**
+     * Creates an {@code int} from a {@code long}, using the low order bits.
+     * <p>
+     * The returned value is such that if
+     * <pre><code>
+     *  vL = extractLo(v);
+     *  vH = extractHi(v);
+     * </code></pre>
+     * then {@code v} is equal to {@link #makeLong(int,int) makeLong(vH, vL)}.
+     * </p>
+     *
+     * @param v Number.
+     * @return an {@code int} value made from the least significant bits
+     * of {@code v}.
+     */
+    public static int extractLo(long v) {
+        return (int) v;
+    }
+
+    /**
+     * Splits a {@code long} into 8 bytes.
+     *
+     * @param v Value.
+     * @return the bytes that compose the given value (least-significant
+     * byte first).
+     */
+    public static byte[] makeByteArray(long v) {
+        final byte[] b = new byte[LONG_SIZE];
+
+        for (int i = 0; i < LONG_SIZE; i++) {
+            final int shift = i * 8;
+            b[i] = (byte) ((v >>> shift) & LONG_LOWEST_BYTE_MASK);
+        }
+
+        return b;
+    }
+
+    /**
+     * Creates a {@code long} from 8 bytes.
+     *
+     * @param input Input.
+     * @return the value that correspond to the given bytes assuming
+     * that the is ordered in increasing byte significance (i.e. the
+     * first byte in the array is the least-siginficant).
+     * @throws DimensionMismatchException if {@code input.length != 8}.
+     */
+    public static long makeLong(byte[] input) {
+        if (input.length != LONG_SIZE) {
+            throw new DimensionMismatchException(input.length, LONG_SIZE);
+        }
+
+        long v = 0;
+        for (int i = 0; i < LONG_SIZE; i++) {
+            final int shift = i * 8;
+            v |= (((long) input[i]) & LONG_LOWEST_BYTE_MASK) << shift;
+        }
+
+        return v;
+    }
+
+    /**
+     * Splits an array of {@code long} values into a sequence of bytes.
+     * This method calls {@link #makeByteArray(long)} for each element of
+     * the {@code input}.
+     *
+     * @param input Input.
+     * @return an array of bytes.
+     */
+    public static byte[] makeByteArray(long[] input) {
+        final int size = input.length * LONG_SIZE;
+        final byte[] b = new byte[size];
+
+        for (int i = 0; i < input.length; i++) {
+            final byte[] current = makeByteArray(input[i]);
+            System.arraycopy(current, 0, b, i * LONG_SIZE, LONG_SIZE);
+        }
+
+        return b;
+    }
+
+    /**
+     * Creates an array of {@code long} values from a sequence of bytes.
+     * This method calls {@link #makeLong(byte[])} for each subsequence
+     * of 8 bytes.
+     *
+     * @param input Input.
+     * @return an array of {@code long}.
+     * @throws DimensionMismatchException if {@code input.length} is not
+     * a multiple of 8.
+     */
+    public static long[] makeLongArray(byte[] input) {
+        final int size = input.length;
+        final int num = size / LONG_SIZE;
+        if (num * LONG_SIZE != size) {
+            throw new DimensionMismatchException(size, num * LONG_SIZE);
+        }
+
+        final long[] output = new long[num];
+        for (int i = 0; i < num; i++) {
+            final int from = i * LONG_SIZE;
+            final byte[] current = Arrays.copyOfRange(input, from, from + LONG_SIZE);
+            output[i] = makeLong(current);
+        }
+
+        return output;
+    }
+
+    /**
+     * Splits an {@code int} into 4 bytes.
+     *
+     * @param v Value.
+     * @return the bytes that compose the given value (least-significant
+     * byte first).
+     */
+    public static byte[] makeByteArray(int v) {
+        final byte[] b = new byte[INT_SIZE];
+
+        for (int i = 0; i < INT_SIZE; i++) {
+            final int shift = i * 8;
+            b[i] = (byte) ((v >>> shift) & INT_LOWEST_BYTE_MASK);
+        }
+
+        return b;
+    }
+
+    /**
+     * Creates an {@code int} from 4 bytes.
+     *
+     * @param input Input.
+     * @return the value that correspond to the given bytes assuming
+     * that the is ordered in increasing byte significance (i.e. the
+     * first byte in the array is the least-siginficant).
+     * @throws DimensionMismatchException if {@code input.length != 4}.
+     */
+    public static int makeInt(byte[] input) {
+        if (input.length != INT_SIZE) {
+            throw new DimensionMismatchException(input.length, INT_SIZE);
+        }
+
+        int v = 0;
+        for (int i = 0; i < INT_SIZE; i++) {
+            final int shift = i * 8;
+            v |= (((int) input[i]) & INT_LOWEST_BYTE_MASK) << shift;
+        }
+
+        return v;
+    }
+
+    /**
+     * Splits an array of {@code int} values into a sequence of bytes.
+     * This method calls {@link #makeByteArray(int)} for each element of
+     * the {@code input}.
+     *
+     * @param input Input.
+     * @return an array of bytes.
+     */
+    public static byte[] makeByteArray(int[] input) {
+        final int size = input.length * INT_SIZE;
+        final byte[] b = new byte[size];
+
+        for (int i = 0; i < input.length; i++) {
+            final byte[] current = makeByteArray(input[i]);
+            System.arraycopy(current, 0, b, i * INT_SIZE, INT_SIZE);
+        }
+
+        return b;
+    }
+
+    /**
+     * Creates an array of {@code int} values from a sequence of bytes.
+     * This method calls {@link #makeInt(byte[])} for each subsequence
+     * of 4 bytes.
+     *
+     * @param input Input. Length must be a multiple of 4.
+     * @return an array of {@code int}.
+     * @throws DimensionMismatchException if {@code input.length} is not
+     * a multiple of 4.
+     */
+    public static int[] makeIntArray(byte[] input) {
+        final int size = input.length;
+        final int num = size / INT_SIZE;
+        if (num * INT_SIZE != size) {
+            throw new DimensionMismatchException(size, num * INT_SIZE);
+        }
+
+        final int[] output = new int[num];
+        for (int i = 0; i < num; i++) {
+            final int from = i * INT_SIZE;
+            final byte[] current = Arrays.copyOfRange(input, from, from + INT_SIZE);
+            output[i] = makeInt(current);
+        }
+
+        return output;
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverter.java b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverter.java
new file mode 100644
index 0000000000..532277b158
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverter.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Seed converter.
+ *
+ * @param <IN> Input seed type.
+ * @param <OUT> Output seed type.
+ *
+ * @since 4.0
+ */
+public interface SeedConverter<IN, OUT> {
+    /**
+     * Converts seed from input type to output type.
+     *
+     * @param seed Original seed value.
+     * @return the converted seed value.
+     */
+    OUT convert(IN seed);
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverterComposer.java b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverterComposer.java
new file mode 100644
index 0000000000..c39c7d893f
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedConverterComposer.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+/**
+ * Composes two {@link SeedConverter converters}.
+ *
+ * @param <IN> Input seed type.
+ * @param <TRANS> Transitional seed type.
+ * @param <OUT> Output seed type.
+ *
+ * @since 4.0
+ */
+public class SeedConverterComposer<IN, TRANS, OUT> implements SeedConverter<IN, OUT> {
+    /** First conversion. */
+    private SeedConverter<IN, TRANS> first;
+    /** Second conversion. */
+    private SeedConverter<TRANS, OUT> second;
+
+    /**
+     * @param first First conversion.
+     * @param second second conversion.
+     */
+    public SeedConverterComposer(SeedConverter<IN, TRANS> first,
+                                 SeedConverter<TRANS, OUT> second) {
+        this.first = first;
+        this.second = second;
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public OUT convert(IN seed) {
+        final TRANS trans = first.convert(seed);
+        return second.convert(trans);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + " (" + second + " o " + first + ")";
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/SeedFactory.java b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedFactory.java
new file mode 100644
index 0000000000..dc867f2e29
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/SeedFactory.java
@@ -0,0 +1,262 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.apache.commons.math4.rng.internal.source32.RandomIntSource;
+import org.apache.commons.math4.rng.internal.source32.Well44497b;
+import org.apache.commons.math4.rng.internal.source64.RandomLongSource;
+import org.apache.commons.math4.rng.internal.source64.SplitMix64;
+
+/**
+ * Utilities related to seeding.
+ *
+ * <p>
+ * This class provides methods to generate random seeds (single values
+ * or arrays of values, of {@code int} or {@code long} types) that can
+ * be passed to the {@link org.apache.commons.math4.rng.RandomSource
+ * methods that create a generator instance}.
+ * <br>
+ * Although the seed-generating methods defined in this class will likely
+ * return different values for all calls, there is no guarantee that the
+ * produced seed will result always in a "good" sequence of numbers (even
+ * if the generator initialized with that seed is good).
+ * <br>
+ * There is <i>no guarantee</i> that sequences will not overlap.
+ * </p>
+ *
+ * @since 4.0
+ */
+public class SeedFactory {
+    /** Generator with a long period. */
+    private static final RandomIntSource SEED_GENERATOR;
+
+    static {
+        // Another RNG for initializing the "SEED_GENERATOR".
+        final long t = System.currentTimeMillis();
+        final int h = System.identityHashCode(Runtime.getRuntime());
+        final SplitMix64 rng = new SplitMix64(t ^ NumberFactory.makeLong(h, ~h));
+
+        final int blockCount = 1391; // Size of the state array of "Well44497b".
+        SEED_GENERATOR = new Well44497b(createIntArray(blockCount, rng));
+    }
+
+    /**
+     * Class contains only static methods.
+     */
+    private SeedFactory() {}
+
+    /**
+     * Creates a number for use as a seed.
+     *
+     * @return a random number.
+     */
+    public static int createInt() {
+        return createInt(SEED_GENERATOR, System.identityHashCode(new Object()));
+    }
+
+    /**
+     * Creates a number for use as a seed.
+     *
+     * @return a random number.
+     */
+    public static long createLong() {
+        return createLong(SEED_GENERATOR, System.identityHashCode(new Object()));
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @return an array of {@code n} random numbers.
+     */
+    public static int[] createIntArray(int n) {
+        return createIntArray(n, SEED_GENERATOR, new Object());
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @return an array of {@code n} random numbers.
+     */
+    public static long[] createLongArray(int n) {
+        return createLongArray(n, SEED_GENERATOR, new Object());
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @return an array of {@code n} random numbers drawn from the
+     * {@code source}.
+     */
+    static long[] createLongArray(int n,
+                                  RandomIntSource source) {
+        return createLongArray(n, source, null);
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @return an array of {@code n} random numbers drawn from the
+     * {@code source}.
+     */
+    static int[] createIntArray(int n,
+                                RandomLongSource source) {
+        return createIntArray(n, source, null);
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @return an array of {@code n} random numbers drawn from the
+     * {@code source}.
+     */
+    static int[] createIntArray(int n,
+                                RandomIntSource source) {
+        return createIntArray(n, source, null);
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @param h Arbitrary object whose {@link System#identityHashCode(Object)
+     * hash code} will be combined with the next number drawn from
+     * the {@code source}.
+     * @return an array of {@code n} random numbers.
+     */
+    private static long[] createLongArray(int n,
+                                          RandomIntSource source,
+                                          Object h) {
+        final long[] array = new long[n];
+
+        final int hash = System.identityHashCode(h);
+        for (int i = 0; i < n; i++) {
+            array[i] = createLong(source, hash);
+        }
+
+        return array;
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @param h Arbitrary object whose {@link System#identityHashCode(Object)
+     * hash code} will be combined with the next number drawn from
+     * the {@code source}.
+     * @return an array of {@code n} random numbers.
+     */
+    private static int[] createIntArray(int n,
+                                        RandomLongSource source,
+                                        Object h) {
+        final int[] array = new int[n];
+
+        final int hash = System.identityHashCode(h);
+        for (int i = 0; i < n; i += 2) {
+            final long v = createLong(source, hash);
+
+            array[i] = NumberFactory.extractHi(v);
+
+            if (i + 1 < n) {
+                array[i + 1] = NumberFactory.extractLo(v);
+            }
+        }
+
+        return array;
+    }
+
+    /**
+     * Creates an array of numbers for use as a seed.
+     *
+     * @param n Size of the array to create.
+     * @param source Source of randomness.
+     * @param h Arbitrary object whose {@link System#identityHashCode(Object)
+     * hash code} will be combined with the next number drawn from
+     * the {@code source}.
+     * @return an array of {@code n} random numbers.
+     */
+    private static int[] createIntArray(int n,
+                                        RandomIntSource source,
+                                        Object h) {
+        final int[] array = new int[n];
+
+        final int hash = System.identityHashCode(h);
+        for (int i = 0; i < n; i++) {
+            array[i] = createInt(source, hash);
+        }
+
+        return array;
+    }
+
+    /**
+     * Creates a random number by performing an "xor" between the
+     * next value in the sequence of the {@code source} and the
+     * given {@code number}.
+     *
+     * @param source Source of randomness.
+     * @param number Arbitrary number.
+     * @return a random number.
+     */
+    private static long createLong(RandomLongSource source,
+                                   int number) {
+        synchronized (source) {
+            return source.next() ^ NumberFactory.makeLong(number, number);
+        }
+    }
+
+    /**
+     * Creates a random number by performing an "xor" between the
+     * the next value in the sequence of the {@code source} and the
+     * given {@code number}.
+     *
+     * @param source Source of randomness.
+     * @param number Arbitrary number.
+     * @return a random number.
+     */
+    private static long createLong(RandomIntSource source,
+                                   int number) {
+        synchronized (source) {
+            return NumberFactory.makeLong(source.next() ^ number,
+                                          source.next() ^ number);
+        }
+    }
+
+    /**
+     * Creates a random number by performing an "xor" between the
+     * next value in the sequence of the {@code source} and the
+     * given {@code number}.
+     *
+     * @param source Source of randomness.
+     * @param number Arbitrary number.
+     * @return a random number.
+     */
+    private static int createInt(RandomIntSource source,
+                                 int number) {
+        synchronized (source) {
+            return source.next() ^ number;
+        }
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/rng/internal/util/package-info.java b/src/main/java/org/apache/commons/math4/rng/internal/util/package-info.java
new file mode 100644
index 0000000000..9ce521321e
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/internal/util/package-info.java
@@ -0,0 +1,22 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Utilities for seed conversion.
+ */
+
+package org.apache.commons.math4.rng.internal.util;
diff --git a/src/main/java/org/apache/commons/math4/rng/package-info.java b/src/main/java/org/apache/commons/math4/rng/package-info.java
new file mode 100644
index 0000000000..19c5755d16
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/rng/package-info.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * <h3>Randomness Providers</h3>
+ *
+ * <p>
+ * This package contains the public API for generating sequences of
+ * pseudo-random numbers that are <i>uniformly distributed</i> in a
+ * specified range.
+ * <br>
+ * All implemented generators can be instantiated through
+ * {@link org.apache.commons.math4.rng.RandomSource factory methods}.
+ * The low-level classes, that define how the randomness is produced,
+ * are implemented in package {@link org.apache.commons.math4.rng.internal}
+ * and its sub-packages, but should not be used directly.
+ * <br>
+ * The generators are <i>not</i> thread-safe: Parallel applications must
+ * use different generator instances in different threads.
+ * </p>
+ *
+ * <p>
+ * In the case of pseudo-random generators, the source of randomness is
+ * usually a set of numbers whose bits representation are scrambled in such
+ * a way as to produce a random-looking sequence.
+ * <br>
+ * The main property of the sequence is that the numbers must be uniformly
+ * distributed within their allowed range.
+ * <br>
+ * Classes in this package do not provide any further processing of the
+ * number generation such as to match other types of distribution.
+ * </p>
+ *
+ * <p>
+ * Which source of randomness to choose may depend on which properties
+ * are more important.
+ * Considerations can include speed of generation, memory usage, period
+ * size, equidistribution, correlation, etc.
+ * <br>
+ * For some of the generators, interesting properties (of the reference
+ * implementations) are proven in scientific papers.
+ * Some generators can also suffer from potential weaknesses.
+ * </p>
+ *
+ * <p>
+ * For simple sampling, any of the generators implemented in this library
+ * may be sufficient.
+ * <br>
+ * For Monte-Carlo simulations that require generating high-dimensional
+ * vectors), equidistribution and non-correlation are crucial.
+ * The <i>Mersenne Twister</i> and <i>Well</i> generators have
+ * equidistribution properties proven according to their bits pool size
+ * which is directly related to their period (all of them have maximal
+ * period, i.e. a generator with size {@code n} pool has a period
+ * <code>2<sup>n</sup>-1</code>).
+ * They also have equidistribution properties for 32 bits blocks up to
+ * {@code s/32} dimension where {@code s} is their pool size.
+ * <br>
+ * For example, {@code Well19937c} is equidistributed up to dimension 623
+ * (i.e. 19937 divided by 32).
+ * It means that a Monte-Carlo simulation generating vectors of {@code n}
+ * (32-bits integer) variables at each iteration has some guarantee on the
+ * properties of its components as long as {@code n < 623}.
+ * Note that if the variables are of type {@code double}, the limit is
+ * divided by two (since 64 bits are needed to create a {@code double}).
+ * <br>
+ * Reference to the relevant publications are listed in the specific
+ * documentation of each class.
+ * </p>
+ *
+ * <p>
+ * Memory usage can vary a lot between providers.
+ * The state of {@code MersenneTwister} is composed of 624 integers,
+ * using about 2.5 kB.
+ * The <i>Well</i> generators use 6 integer arrays, the length of each
+ * being equal to the pool size; thus, for example, {@code Well44497b}
+ * uses about 33 kB.
+ * </p>
+ */
+
+package org.apache.commons.math4.rng;
diff --git a/src/site/apt/userguide/rng.apt b/src/site/apt/userguide/rng.apt
new file mode 100644
index 0000000000..a4931b8dec
--- /dev/null
+++ b/src/site/apt/userguide/rng.apt
@@ -0,0 +1,228 @@
+~~
+~~ Licensed to the Apache Software Foundation (ASF) under one or more
+~~ contributor license agreements.  See the NOTICE file distributed with
+~~ this work for additional information regarding copyright ownership.
+~~ The ASF licenses this file to You under the Apache License, Version 2.0
+~~ (the "License"); you may not use this file except in compliance with
+~~ the License.  You may obtain a copy of the License at
+~~
+~~      http://www.apache.org/licenses/LICENSE-2.0
+~~
+~~ Unless required by applicable law or agreed to in writing, software
+~~ distributed under the License is distributed on an "AS IS" BASIS,
+~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+~~ See the License for the specific language governing permissions and
+~~ limitations under the License.
+~~
+
+  -----------------------------------------------
+  The Commons Math User Guide - Random Number Generators
+  -----------------------------------------------
+
+20 Random Number Generators
+
+
+* 20.1 Overview
+
+  The <<<rng>>> package contains the random number generation functionality.
+  Please refer to the {{{../apidocs/org/apache/commons/math4/rng/package-summary.html}Javadoc}} of the package for details.
+
+
+
+* 20.2 Performance
+
+  This section reports benchmarks of the RNG implementations.
+  All runs were performed on a platform with the following characteristics:
+
+  * CPU: Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz
+
+  * Java runtime: 1.7.0_95-b00
+
+  * JVM: OpenJDK 64-Bit Server VM 24.95-b01
+
+  []
+
+  The following tables indicates the performance for generating
+
+  * a sequence of 32-bits integers (a.k.a. Java type <<<int>>>)
+
+  * a sequence of 64-bits integers (a.k.a. Java type <<<long>>>)
+
+  * a sequence of 64-bits floating point numbers (a.k.a. Java type <<<double>>>)
+
+  []
+
+  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/math4/rng/RandomSource.html}RandomSource}}).
+  
+  Two independent benchmarking tools were used:
+
+  * Commons Math <<<PerfTestUtils>>>
+
+  * {{{http://openjdk.java.net/projects/code-tools/jmh/}JMH}}
+
+  []
+  
+  The results of those tools are reported in second and third columns, respectively, where
+  the value is the ratio of the performance of the implementation with respect to the 
+  corresponding performance of the JDK's <<<java.util.Random>>> class.
+  In these tables, <lower> is <better>.
+
+
+
+** Generating <<<int>>> values
+
+
+*---------------------------------*------------------------+--------------+
+|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
+*---------------------------------*------------------------+--------------+
+| JDK         | 1.21                   | 1.000        |
+*---------------------------------*------------------------+--------------+
+| MT   | 1.19                   | 0.639        |
+*---------------------------------*------------------------+--------------+
+| WELL_512_A          | 1.33                   | 0.740        |
+*---------------------------------*------------------------+--------------+
+| WELL_1024_A         | 1.38                   | 0.795        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_A        | 1.47                   | 1.039        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_C        | 1.54                   | 1.102        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_A        | 1.53                   | 1.187        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_B        | 1.59                   | 1.114        |
+*---------------------------------*------------------------+--------------+
+| ISAAC       | 1.30                   | 0.610        |
+*---------------------------------*------------------------+--------------+
+| MT_64 | 1.31                   | 0.734        |
+*---------------------------------*------------------------+--------------+
+| SPLIT_MIX_64        | 1.00                   | 0.361        |
+*---------------------------------*------------------------+--------------+
+| XOR_SHIFT_1024_S  | 1.09                   | 0.450        |
+*---------------------------------*------------------------+--------------+
+| TWO_CMRES          | 1.14                   | 0.464        |
+*---------------------------------*------------------------+--------------+
+
+
+
+** Generating <<<long>>> values
+
+
+*---------------------------------*------------------------+--------------+
+|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
+*---------------------------------*------------------------+--------------+
+| JDK         | 1.40                   | 1.002        |
+*---------------------------------*------------------------+--------------+
+| MT   | 0.85                   | 0.569        |
+*---------------------------------*------------------------+--------------+
+| WELL_512_A          | 1.05                   | 0.798        |
+*---------------------------------*------------------------+--------------+
+| WELL_1024_A         | 1.08                   | 0.873        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_A        | 1.21                   | 0.968        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_C        | 1.27                   | 1.020        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_A        | 1.26                   | 1.103        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_B        | 1.31                   | 1.043        |
+*---------------------------------*------------------------+--------------+
+| ISAAC       | 0.96                   | 0.515        |
+*---------------------------------*------------------------+--------------+
+| MT_64 | 0.67                   | 0.343        |
+*---------------------------------*------------------------+--------------+
+| SPLIT_MIX_64        | 0.55                   | 0.175        |
+*---------------------------------*------------------------+--------------+
+| XOR_SHIFT_1024_S  | 0.59                   | 0.207        |
+*---------------------------------*------------------------+--------------+
+| TWO_CMRES          | 0.61                   | 0.223        |
+*---------------------------------*------------------------+--------------+
+
+
+
+** Generating <<<double>>> values
+
+
+*---------------------------------*------------------------+--------------+
+|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
+*---------------------------------*------------------------+--------------+
+| JDK         | 1.15                   | 1.001        |
+*---------------------------------*------------------------+--------------+
+| MT   | 0.86                   | 0.614        |
+*---------------------------------*------------------------+--------------+
+| WELL_512_A          | 1.08                   | 0.839        |
+*---------------------------------*------------------------+--------------+
+| WELL_1024_A         | 1.11                   | 0.899        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_A        | 1.23                   | 0.984        |
+*---------------------------------*------------------------+--------------+
+| WELL_19937_C        | 1.29                   | 1.069        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_A        | 1.28                   | 1.125        |
+*---------------------------------*------------------------+--------------+
+| WELL_44497_B        | 1.33                   | 1.093        |
+*---------------------------------*------------------------+--------------+
+| ISAAC       | 0.98                   | 0.583        |
+*---------------------------------*------------------------+--------------+
+| MT_64 | 0.66                   | 0.391        |
+*---------------------------------*------------------------+--------------+
+| SPLIT_MIX_64        | 0.57                   | 0.226        |
+*---------------------------------*------------------------+--------------+
+| XOR_SHIFT_1024_S  | 0.59                   | 0.262        |
+*---------------------------------*------------------------+--------------+
+| TWO_CMRES          | 0.60                   | 0.284        |
+*---------------------------------*------------------------+--------------+
+
+
+* 20.3 Quality
+
+  This section reports results of performing "stress tests" that aim at detecting failures
+  of an implementation to produce sequences of numbers that follow a uniform distribution.
+
+  Two different test suites were used:
+
+  * {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}Dieharder}}
+
+  * {{{http://simul.iro.umontreal.ca/testu01/tu01.html}TestU01}}
+
+  []
+
+  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/math4/rng/RandomSource.html}RandomSource}}).
+  The second and third columns contain the number of tests which <Dieharder> and <TestU01>
+  respectively reported as below the accepted threshold for considering the sequence as
+  uniformly random; hence, in this table, <lower> is <better>.
+
+  For each the two test suites, two runs were performed (using random seeds): Click on one
+  of the numbers of the comma-separated list in order to see the text report of the
+  corresponding run.
+  Note: For <Dieharder>, a failure on the "Diehard Sums Test" can be {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}ignored}}.
+
+
+*---------------------------------*----------------*---------------------*
+|| RNG identifier             || Dieharder     || TestU01 (BigCrush) |
+*----------------*----------------*----------------*---------------------*
+| JDK         | {{{../txt/userguide/rng/stress/dh/run_1/dh_1}13}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_1}11}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_1}77}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_1}74}} |
+*---------------------------------*----------------*----------------*
+| MT   | {{{../txt/userguide/rng/stress/dh/run_1/dh_2}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_2}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_2}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_2}2}} |
+*---------------------------------*----------------*----------------*
+| WELL_512_A          | {{{../txt/userguide/rng/stress/dh/run_1/dh_3}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_3}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_3}6}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_3}7}} |
+*---------------------------------*----------------*----------------*
+| WELL_1024_A         | {{{../txt/userguide/rng/stress/dh/run_1/dh_4}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_4}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_4}5}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_4}4}} |
+*---------------------------------*----------------*----------------*
+| WELL_19937_A        | {{{../txt/userguide/rng/stress/dh/run_1/dh_5}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_5}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_5}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_5}3}} |
+*---------------------------------*----------------*----------------*
+| WELL_19937_C        | {{{../txt/userguide/rng/stress/dh/run_1/dh_6}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_6}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_6}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_6}2}} |
+*---------------------------------*----------------*----------------*
+| WELL_44497_A        | {{{../txt/userguide/rng/stress/dh/run_1/dh_7}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_7}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_7}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_7}2}} |
+*---------------------------------*----------------*----------------*
+| WELL_44497_B        | {{{../txt/userguide/rng/stress/dh/run_1/dh_8}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_8}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_8}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_8}2}} |
+*---------------------------------*----------------*----------------*
+| ISAAC       | {{{../txt/userguide/rng/stress/dh/run_1/dh_9}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_9}1}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_9}1}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_9}0}} |
+*---------------------------------*----------------*----------------*
+| MT_64 | {{{../txt/userguide/rng/stress/dh/run_1/dh_10}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_10}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_10}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_10}2}} |
+*---------------------------------*----------------*----------------*
+| SPLIT_MIX_64        | {{{../txt/userguide/rng/stress/dh/run_1/dh_11}1}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_11}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_11}0}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_11}0}} |
+*---------------------------------*----------------*----------------*
+| XOR_SHIFT_1024_S  | {{{../txt/userguide/rng/stress/dh/run_1/dh_12}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_12}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_12}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_12}0}} |
+*---------------------------------*----------------*----------------*
+| TWO_CMRES          | {{{../txt/userguide/rng/stress/dh/run_1/dh_13}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_13}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_13}1}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_13}0}} |
+*---------------------------------*----------------*----------------*
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_1 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_1
new file mode 100644
index 0000000000..224d2a0e35
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_1
@@ -0,0 +1,146 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.JDKRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.46e+06  |3234096741|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.03946185|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.01629539|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.98579998|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.53483219|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.99560702|   WEAK   
+   diehard_bitstream|   0|   2097152|     200|0.47019123|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.58743463|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.00000000|  FAILED  
+         diehard_dna|   0|   2097152|     100|0.00000000|  FAILED  
+diehard_count_1s_str|   0|    256000|     100|0.90699558|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.97545849|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.01296474|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.51391418|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.18584250|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.00726652|  PASSED  
+        diehard_sums|   0|       100|     100|0.40869228|  PASSED  
+        diehard_runs|   0|    100000|     100|0.05169565|  PASSED  
+        diehard_runs|   0|    100000|     100|0.98866390|  PASSED  
+       diehard_craps|   0|    200000|     100|0.35494552|  PASSED  
+       diehard_craps|   0|    200000|     100|0.47365191|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.14780252|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.29338446|  PASSED  
+         sts_monobit|   1|    100000|     100|0.97888201|  PASSED  
+            sts_runs|   2|    100000|     100|0.74655596|  PASSED  
+          sts_serial|   1|    100000|     100|0.41897552|  PASSED  
+          sts_serial|   2|    100000|     100|0.38034056|  PASSED  
+          sts_serial|   3|    100000|     100|0.99170185|  PASSED  
+          sts_serial|   3|    100000|     100|0.76457270|  PASSED  
+          sts_serial|   4|    100000|     100|0.80172413|  PASSED  
+          sts_serial|   4|    100000|     100|0.52177712|  PASSED  
+          sts_serial|   5|    100000|     100|0.99297019|  PASSED  
+          sts_serial|   5|    100000|     100|0.59183271|  PASSED  
+          sts_serial|   6|    100000|     100|0.94001454|  PASSED  
+          sts_serial|   6|    100000|     100|0.39218216|  PASSED  
+          sts_serial|   7|    100000|     100|0.69888838|  PASSED  
+          sts_serial|   7|    100000|     100|0.16541368|  PASSED  
+          sts_serial|   8|    100000|     100|0.47131229|  PASSED  
+          sts_serial|   8|    100000|     100|0.09817778|  PASSED  
+          sts_serial|   9|    100000|     100|0.42261781|  PASSED  
+          sts_serial|   9|    100000|     100|0.05344107|  PASSED  
+          sts_serial|  10|    100000|     100|0.77804588|  PASSED  
+          sts_serial|  10|    100000|     100|0.57799732|  PASSED  
+          sts_serial|  11|    100000|     100|0.01016312|  PASSED  
+          sts_serial|  11|    100000|     100|0.06073112|  PASSED  
+          sts_serial|  12|    100000|     100|0.65917138|  PASSED  
+          sts_serial|  12|    100000|     100|0.63230695|  PASSED  
+          sts_serial|  13|    100000|     100|0.84190399|  PASSED  
+          sts_serial|  13|    100000|     100|0.85277783|  PASSED  
+          sts_serial|  14|    100000|     100|0.49213152|  PASSED  
+          sts_serial|  14|    100000|     100|0.30112917|  PASSED  
+          sts_serial|  15|    100000|     100|0.14544079|  PASSED  
+          sts_serial|  15|    100000|     100|0.94737293|  PASSED  
+          sts_serial|  16|    100000|     100|0.39262889|  PASSED  
+          sts_serial|  16|    100000|     100|0.84185055|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.54063417|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.09286365|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.27436056|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.10595606|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.72828807|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.78439941|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.54939794|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.49285600|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.55836635|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.09735886|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.99987371|   WEAK   
+         rgb_bitdist|  11|    100000|     200|0.72189984|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.16961094|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.20393701|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.00000002|  FAILED  
+rgb_minimum_distance|   4|     10000|    1000|0.00000000|  FAILED  
+rgb_minimum_distance|   5|     10000|    1000|0.00000000|  FAILED  
+    rgb_permutations|   2|    100000|     100|0.57021718|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.62537216|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.34391663|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.51106315|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.75921017|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.11901881|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.98766090|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.59129144|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.42126930|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.28570675|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.61879754|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.44777033|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.95714236|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.55158775|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.99968320|   WEAK   
+      rgb_lagged_sum|  10|   1000000|     200|0.94120047|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.00001553|   WEAK   
+      rgb_lagged_sum|  11|   1000000|     200|0.00000000|  FAILED  
+      rgb_lagged_sum|  12|   1000000|     100|0.88935254|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.76358163|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.93169219|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.00000000|  FAILED  
+      rgb_lagged_sum|  16|   1000000|     100|0.97118631|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.94598742|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.59454816|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.00027545|   WEAK   
+      rgb_lagged_sum|  19|   1000000|     200|0.00000001|  FAILED  
+      rgb_lagged_sum|  20|   1000000|     100|0.87996908|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.76558265|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.35273627|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.00007767|   WEAK   
+      rgb_lagged_sum|  23|   1000000|     200|0.00000000|  FAILED  
+      rgb_lagged_sum|  24|   1000000|     100|0.48030158|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.98040339|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.58094512|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.26354148|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.02516105|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.19290606|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.98500384|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.00000000|  FAILED  
+      rgb_lagged_sum|  32|   1000000|     100|0.73025626|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.02497988|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|1.00000000|  FAILED  
+             dab_dct| 256|     50000|       1|0.92579052|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.00000240|   WEAK   
+        dab_filltree|  32|  15000000|       1|0.00309996|   WEAK   
+        dab_filltree|  32|  15000000|     101|0.00000000|  FAILED  
+        dab_filltree|  32|  15000000|     101|0.00000000|  FAILED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.24726392|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.74594891|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.66141319|  PASSED  
+# 
+# Test duration: 165.6195733010167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_10 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_10
new file mode 100644
index 0000000000..bf7b31d1d0
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_10
@@ -0,0 +1,139 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.MersenneTwister64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.35e+06  |4060973066|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.38038146|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.82073994|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.99419941|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.84421559|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.68114221|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.49571971|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.50489838|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.56038693|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.52187833|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.82794918|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.94334354|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.41934767|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.38986875|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.30645416|  PASSED  
+        diehard_sums|   0|       100|     100|0.95555200|  PASSED  
+        diehard_runs|   0|    100000|     100|0.45678041|  PASSED  
+        diehard_runs|   0|    100000|     100|0.77628546|  PASSED  
+       diehard_craps|   0|    200000|     100|0.66628776|  PASSED  
+       diehard_craps|   0|    200000|     100|0.74815016|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.42574679|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.95301550|  PASSED  
+         sts_monobit|   1|    100000|     100|0.01768472|  PASSED  
+            sts_runs|   2|    100000|     100|0.66990502|  PASSED  
+          sts_serial|   1|    100000|     100|0.56397489|  PASSED  
+          sts_serial|   2|    100000|     100|0.14554819|  PASSED  
+          sts_serial|   3|    100000|     100|0.10532469|  PASSED  
+          sts_serial|   3|    100000|     100|0.50086684|  PASSED  
+          sts_serial|   4|    100000|     100|0.87214766|  PASSED  
+          sts_serial|   4|    100000|     100|0.96260182|  PASSED  
+          sts_serial|   5|    100000|     100|0.46155357|  PASSED  
+          sts_serial|   5|    100000|     100|0.93540615|  PASSED  
+          sts_serial|   6|    100000|     100|0.06399709|  PASSED  
+          sts_serial|   6|    100000|     100|0.37475484|  PASSED  
+          sts_serial|   7|    100000|     100|0.19960274|  PASSED  
+          sts_serial|   7|    100000|     100|0.71409873|  PASSED  
+          sts_serial|   8|    100000|     100|0.58265537|  PASSED  
+          sts_serial|   8|    100000|     100|0.30875682|  PASSED  
+          sts_serial|   9|    100000|     100|0.89120538|  PASSED  
+          sts_serial|   9|    100000|     100|0.08055589|  PASSED  
+          sts_serial|  10|    100000|     100|0.94326678|  PASSED  
+          sts_serial|  10|    100000|     100|0.63560702|  PASSED  
+          sts_serial|  11|    100000|     100|0.63552036|  PASSED  
+          sts_serial|  11|    100000|     100|0.41447321|  PASSED  
+          sts_serial|  12|    100000|     100|0.11137836|  PASSED  
+          sts_serial|  12|    100000|     100|0.31247769|  PASSED  
+          sts_serial|  13|    100000|     100|0.11571281|  PASSED  
+          sts_serial|  13|    100000|     100|0.34165091|  PASSED  
+          sts_serial|  14|    100000|     100|0.45691599|  PASSED  
+          sts_serial|  14|    100000|     100|0.86847228|  PASSED  
+          sts_serial|  15|    100000|     100|0.20344802|  PASSED  
+          sts_serial|  15|    100000|     100|0.01403264|  PASSED  
+          sts_serial|  16|    100000|     100|0.49704173|  PASSED  
+          sts_serial|  16|    100000|     100|0.99251040|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.82107588|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.26857984|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.74121909|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.85664588|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.14846957|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.58492538|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.50773594|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.51477335|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.58560247|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.73157176|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.35133278|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.69691200|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.11088599|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.56158689|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.85110247|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.85208203|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.30212792|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.37729899|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.32979222|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.68814175|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.57882968|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.93734672|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.64486630|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.94899438|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.12065130|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.98819337|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.05992105|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.07167199|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.56228730|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.10534144|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.53198515|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.97513880|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.84345586|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.68663096|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.90102702|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.33847765|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.60279321|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.58322395|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.42415615|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.36335552|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.81338367|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.75672514|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.72069324|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.31844638|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.94061253|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.83342998|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.31439533|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.97325800|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.84734559|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.93209485|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.51632833|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.99249230|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.11288279|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.62750032|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.64126517|  PASSED  
+             dab_dct| 256|     50000|       1|0.73583907|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.91066506|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.72068986|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.43062103|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.68290109|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.99593445|   WEAK   
+        dab_monobit2|  12|  65000000|     101|0.01209486|  PASSED  
+# 
+# Test duration: 127.73469639051667 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_11 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_11
new file mode 100644
index 0000000000..628a507aa2
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_11
@@ -0,0 +1,148 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.SplitMix64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  6.56e+06  |3876872701|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.89394608|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.44622126|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.93312610|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.83502820|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.47558461|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.83393107|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.17085818|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.95316222|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.58772531|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.92622543|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.24541775|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.82051329|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.16939087|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.26180585|  PASSED  
+        diehard_sums|   0|       100|     100|0.00131414|   WEAK   
+        diehard_sums|   0|       100|     200|0.00019033|   WEAK   
+        diehard_sums|   0|       100|     300|0.00001845|   WEAK   
+        diehard_sums|   0|       100|     400|0.00000274|   WEAK   
+        diehard_sums|   0|       100|     500|0.00000146|   WEAK   
+        diehard_sums|   0|       100|     600|0.00000518|   WEAK   
+        diehard_sums|   0|       100|     700|0.00000120|   WEAK   
+        diehard_sums|   0|       100|     800|0.00000136|   WEAK   
+        diehard_sums|   0|       100|     900|0.00000164|   WEAK   
+        diehard_sums|   0|       100|    1000|0.00000038|  FAILED  
+        diehard_runs|   0|    100000|     100|0.90697557|  PASSED  
+        diehard_runs|   0|    100000|     100|0.46492407|  PASSED  
+       diehard_craps|   0|    200000|     100|0.08890164|  PASSED  
+       diehard_craps|   0|    200000|     100|0.68877459|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.65830948|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.55949006|  PASSED  
+         sts_monobit|   1|    100000|     100|0.91014347|  PASSED  
+            sts_runs|   2|    100000|     100|0.46023787|  PASSED  
+          sts_serial|   1|    100000|     100|0.37938157|  PASSED  
+          sts_serial|   2|    100000|     100|0.79494593|  PASSED  
+          sts_serial|   3|    100000|     100|0.25702001|  PASSED  
+          sts_serial|   3|    100000|     100|0.56670546|  PASSED  
+          sts_serial|   4|    100000|     100|0.83700449|  PASSED  
+          sts_serial|   4|    100000|     100|0.15880323|  PASSED  
+          sts_serial|   5|    100000|     100|0.73026691|  PASSED  
+          sts_serial|   5|    100000|     100|0.79324799|  PASSED  
+          sts_serial|   6|    100000|     100|0.12893514|  PASSED  
+          sts_serial|   6|    100000|     100|0.43885054|  PASSED  
+          sts_serial|   7|    100000|     100|0.58482440|  PASSED  
+          sts_serial|   7|    100000|     100|0.59704969|  PASSED  
+          sts_serial|   8|    100000|     100|0.17431467|  PASSED  
+          sts_serial|   8|    100000|     100|0.88757904|  PASSED  
+          sts_serial|   9|    100000|     100|0.29214774|  PASSED  
+          sts_serial|   9|    100000|     100|0.21963552|  PASSED  
+          sts_serial|  10|    100000|     100|0.97034591|  PASSED  
+          sts_serial|  10|    100000|     100|0.68185135|  PASSED  
+          sts_serial|  11|    100000|     100|0.44262494|  PASSED  
+          sts_serial|  11|    100000|     100|0.60229032|  PASSED  
+          sts_serial|  12|    100000|     100|0.60546721|  PASSED  
+          sts_serial|  12|    100000|     100|0.68248356|  PASSED  
+          sts_serial|  13|    100000|     100|0.70604921|  PASSED  
+          sts_serial|  13|    100000|     100|0.33437419|  PASSED  
+          sts_serial|  14|    100000|     100|0.76956496|  PASSED  
+          sts_serial|  14|    100000|     100|0.45860942|  PASSED  
+          sts_serial|  15|    100000|     100|0.99328462|  PASSED  
+          sts_serial|  15|    100000|     100|0.27008137|  PASSED  
+          sts_serial|  16|    100000|     100|0.77186602|  PASSED  
+          sts_serial|  16|    100000|     100|0.95522347|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.65901869|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.96646800|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.56192931|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.71123613|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.60652057|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.40311562|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.94461945|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.94399288|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.18597796|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.16016896|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.43475932|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.99978738|   WEAK   
+         rgb_bitdist|  12|    100000|     200|0.68461269|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.16541757|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.24623892|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.01443284|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.11408750|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.03121809|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.79282729|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.86630693|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.51763993|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.89857723|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.74404815|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.02292037|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.93288381|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.90626965|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.47551343|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.98593748|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.05946751|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.50416533|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.68245658|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.43373343|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.96109236|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.41697577|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.73468235|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.36902723|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.98028491|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.99078444|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.54349261|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.04822766|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.05522277|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.65230164|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.47670341|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.21627174|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.60489204|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.78484760|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.16596556|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.91582999|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.49254250|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.25321125|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.60415030|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.98270526|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.71498718|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.50196089|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.62516898|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.57152727|  PASSED  
+             dab_dct| 256|     50000|       1|0.59394670|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.17868986|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.81965604|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.36858723|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.62765239|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.08817873|  PASSED  
+# 
+# Test duration: 116.67653443753333 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_12 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_12
new file mode 100644
index 0000000000..43da233643
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_12
@@ -0,0 +1,172 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.XorShift1024Star
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.66e+06  |1277479534|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.86198313|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.63731814|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.13115738|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.62855999|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.89731999|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.17949849|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.95496419|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.92220752|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.02583854|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.17781796|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.39368629|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.23540279|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.09913499|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.46914639|  PASSED  
+        diehard_sums|   0|       100|     100|0.71241446|  PASSED  
+        diehard_runs|   0|    100000|     100|0.29355985|  PASSED  
+        diehard_runs|   0|    100000|     100|0.45855161|  PASSED  
+       diehard_craps|   0|    200000|     100|0.99743024|   WEAK   
+       diehard_craps|   0|    200000|     100|0.13198940|  PASSED  
+       diehard_craps|   0|    200000|     200|0.50198767|  PASSED  
+       diehard_craps|   0|    200000|     200|0.58025917|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.58571899|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.27724347|  PASSED  
+         sts_monobit|   1|    100000|     100|0.61773671|  PASSED  
+            sts_runs|   2|    100000|     100|0.16306655|  PASSED  
+          sts_serial|   1|    100000|     100|0.17914389|  PASSED  
+          sts_serial|   2|    100000|     100|0.67763220|  PASSED  
+          sts_serial|   3|    100000|     100|0.67391299|  PASSED  
+          sts_serial|   3|    100000|     100|0.99988809|   WEAK   
+          sts_serial|   4|    100000|     100|0.52472648|  PASSED  
+          sts_serial|   4|    100000|     100|0.55467848|  PASSED  
+          sts_serial|   5|    100000|     100|0.14392479|  PASSED  
+          sts_serial|   5|    100000|     100|0.58369865|  PASSED  
+          sts_serial|   6|    100000|     100|0.86311731|  PASSED  
+          sts_serial|   6|    100000|     100|0.62412787|  PASSED  
+          sts_serial|   7|    100000|     100|0.16807248|  PASSED  
+          sts_serial|   7|    100000|     100|0.06111990|  PASSED  
+          sts_serial|   8|    100000|     100|0.25524956|  PASSED  
+          sts_serial|   8|    100000|     100|0.72448783|  PASSED  
+          sts_serial|   9|    100000|     100|0.02704149|  PASSED  
+          sts_serial|   9|    100000|     100|0.41529079|  PASSED  
+          sts_serial|  10|    100000|     100|0.85009126|  PASSED  
+          sts_serial|  10|    100000|     100|0.48010293|  PASSED  
+          sts_serial|  11|    100000|     100|0.82872611|  PASSED  
+          sts_serial|  11|    100000|     100|0.89756655|  PASSED  
+          sts_serial|  12|    100000|     100|0.95201682|  PASSED  
+          sts_serial|  12|    100000|     100|0.25576598|  PASSED  
+          sts_serial|  13|    100000|     100|0.62201514|  PASSED  
+          sts_serial|  13|    100000|     100|0.57304663|  PASSED  
+          sts_serial|  14|    100000|     100|0.82023812|  PASSED  
+          sts_serial|  14|    100000|     100|0.16026739|  PASSED  
+          sts_serial|  15|    100000|     100|0.53508630|  PASSED  
+          sts_serial|  15|    100000|     100|0.26418736|  PASSED  
+          sts_serial|  16|    100000|     100|0.58894749|  PASSED  
+          sts_serial|  16|    100000|     100|0.46526557|  PASSED  
+          sts_serial|   1|    100000|     200|0.72352161|  PASSED  
+          sts_serial|   2|    100000|     200|0.75042646|  PASSED  
+          sts_serial|   3|    100000|     200|0.93847445|  PASSED  
+          sts_serial|   3|    100000|     200|0.62306511|  PASSED  
+          sts_serial|   4|    100000|     200|0.40341318|  PASSED  
+          sts_serial|   4|    100000|     200|0.26698158|  PASSED  
+          sts_serial|   5|    100000|     200|0.43240432|  PASSED  
+          sts_serial|   5|    100000|     200|0.97831152|  PASSED  
+          sts_serial|   6|    100000|     200|0.76521236|  PASSED  
+          sts_serial|   6|    100000|     200|0.66183325|  PASSED  
+          sts_serial|   7|    100000|     200|0.89309989|  PASSED  
+          sts_serial|   7|    100000|     200|0.03053954|  PASSED  
+          sts_serial|   8|    100000|     200|0.12273168|  PASSED  
+          sts_serial|   8|    100000|     200|0.08494183|  PASSED  
+          sts_serial|   9|    100000|     200|0.09684804|  PASSED  
+          sts_serial|   9|    100000|     200|0.47562336|  PASSED  
+          sts_serial|  10|    100000|     200|0.74134447|  PASSED  
+          sts_serial|  10|    100000|     200|0.97905748|  PASSED  
+          sts_serial|  11|    100000|     200|0.97413987|  PASSED  
+          sts_serial|  11|    100000|     200|0.91786276|  PASSED  
+          sts_serial|  12|    100000|     200|0.99116165|  PASSED  
+          sts_serial|  12|    100000|     200|0.42648513|  PASSED  
+          sts_serial|  13|    100000|     200|0.93068328|  PASSED  
+          sts_serial|  13|    100000|     200|0.98032272|  PASSED  
+          sts_serial|  14|    100000|     200|0.29657434|  PASSED  
+          sts_serial|  14|    100000|     200|0.09694261|  PASSED  
+          sts_serial|  15|    100000|     200|0.56619393|  PASSED  
+          sts_serial|  15|    100000|     200|0.82196711|  PASSED  
+          sts_serial|  16|    100000|     200|0.79646115|  PASSED  
+          sts_serial|  16|    100000|     200|0.78757244|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.55875683|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.98546150|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.64529161|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.90867536|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.99998913|   WEAK   
+         rgb_bitdist|   5|    100000|     200|0.31096608|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.54070259|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.85454917|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.75137668|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.52054867|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.05003706|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.51572696|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.33144705|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.47858895|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.01305979|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.72853927|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.37077925|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.36844956|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.15435203|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.92635060|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.12448644|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.07050481|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.90574934|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.97049936|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.15551539|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.39742832|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.06560771|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.25967033|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.23465718|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.95894771|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.99644149|   WEAK   
+      rgb_lagged_sum|   9|   1000000|     200|0.72122320|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.40592463|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.11499425|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.09093057|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.83672570|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.06379458|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.25409683|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.45738764|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.27200323|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.96676225|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.21539480|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.46300952|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.33383290|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.22278328|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.99014659|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.60055427|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.84297553|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.11376412|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.74618911|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.35634899|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.95186868|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.51735206|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.32749912|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.44005272|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.97185072|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.99007726|  PASSED  
+             dab_dct| 256|     50000|       1|0.09683268|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.27626888|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.69368536|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.58725536|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.32244773|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.69535825|  PASSED  
+# 
+# Test duration: 118.87736675828334 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_13 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_13
new file mode 100644
index 0000000000..b49e8a9cf0
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_13
@@ -0,0 +1,168 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.TwoCmres (Cmres: [0xedce446814d3b3d9L, 33, 330658535] + Cmres: [0xc5b3cf786c806df7L, 33, 331932042])
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  7.87e+06  |1623170409|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.06673649|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.30427840|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.25200666|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.13734856|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.66626521|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.56775058|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.28852698|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.12361343|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.60377568|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.79315934|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.95039058|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.16615086|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.33710498|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.31917042|  PASSED  
+        diehard_sums|   0|       100|     100|0.76356650|  PASSED  
+        diehard_runs|   0|    100000|     100|0.98291382|  PASSED  
+        diehard_runs|   0|    100000|     100|0.51985231|  PASSED  
+       diehard_craps|   0|    200000|     100|0.96403781|  PASSED  
+       diehard_craps|   0|    200000|     100|0.02637301|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.72890473|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.69803814|  PASSED  
+         sts_monobit|   1|    100000|     100|0.63975148|  PASSED  
+            sts_runs|   2|    100000|     100|0.15337659|  PASSED  
+          sts_serial|   1|    100000|     100|0.12204467|  PASSED  
+          sts_serial|   2|    100000|     100|0.86816684|  PASSED  
+          sts_serial|   3|    100000|     100|0.94763649|  PASSED  
+          sts_serial|   3|    100000|     100|0.79632534|  PASSED  
+          sts_serial|   4|    100000|     100|0.99876777|   WEAK   
+          sts_serial|   4|    100000|     100|0.83069123|  PASSED  
+          sts_serial|   5|    100000|     100|0.75728847|  PASSED  
+          sts_serial|   5|    100000|     100|0.62780517|  PASSED  
+          sts_serial|   6|    100000|     100|0.91234446|  PASSED  
+          sts_serial|   6|    100000|     100|0.64583386|  PASSED  
+          sts_serial|   7|    100000|     100|0.67214207|  PASSED  
+          sts_serial|   7|    100000|     100|0.79137329|  PASSED  
+          sts_serial|   8|    100000|     100|0.57000983|  PASSED  
+          sts_serial|   8|    100000|     100|0.92782289|  PASSED  
+          sts_serial|   9|    100000|     100|0.67721181|  PASSED  
+          sts_serial|   9|    100000|     100|0.55798035|  PASSED  
+          sts_serial|  10|    100000|     100|0.90302847|  PASSED  
+          sts_serial|  10|    100000|     100|0.70802558|  PASSED  
+          sts_serial|  11|    100000|     100|0.10814216|  PASSED  
+          sts_serial|  11|    100000|     100|0.73924740|  PASSED  
+          sts_serial|  12|    100000|     100|0.96310906|  PASSED  
+          sts_serial|  12|    100000|     100|0.42933642|  PASSED  
+          sts_serial|  13|    100000|     100|0.89363587|  PASSED  
+          sts_serial|  13|    100000|     100|0.71140691|  PASSED  
+          sts_serial|  14|    100000|     100|0.75667049|  PASSED  
+          sts_serial|  14|    100000|     100|0.53365354|  PASSED  
+          sts_serial|  15|    100000|     100|0.81564398|  PASSED  
+          sts_serial|  15|    100000|     100|0.81890036|  PASSED  
+          sts_serial|  16|    100000|     100|0.22787288|  PASSED  
+          sts_serial|  16|    100000|     100|0.51079464|  PASSED  
+          sts_serial|   1|    100000|     200|0.45248588|  PASSED  
+          sts_serial|   2|    100000|     200|0.73940169|  PASSED  
+          sts_serial|   3|    100000|     200|0.76608817|  PASSED  
+          sts_serial|   3|    100000|     200|0.68569219|  PASSED  
+          sts_serial|   4|    100000|     200|0.97533008|  PASSED  
+          sts_serial|   4|    100000|     200|0.66357569|  PASSED  
+          sts_serial|   5|    100000|     200|0.51585852|  PASSED  
+          sts_serial|   5|    100000|     200|0.76937150|  PASSED  
+          sts_serial|   6|    100000|     200|0.20423389|  PASSED  
+          sts_serial|   6|    100000|     200|0.24855182|  PASSED  
+          sts_serial|   7|    100000|     200|0.83937387|  PASSED  
+          sts_serial|   7|    100000|     200|0.10776938|  PASSED  
+          sts_serial|   8|    100000|     200|0.46985760|  PASSED  
+          sts_serial|   8|    100000|     200|0.91624018|  PASSED  
+          sts_serial|   9|    100000|     200|0.31272546|  PASSED  
+          sts_serial|   9|    100000|     200|0.41419756|  PASSED  
+          sts_serial|  10|    100000|     200|0.24132141|  PASSED  
+          sts_serial|  10|    100000|     200|0.95518257|  PASSED  
+          sts_serial|  11|    100000|     200|0.07700528|  PASSED  
+          sts_serial|  11|    100000|     200|0.46704231|  PASSED  
+          sts_serial|  12|    100000|     200|0.25784729|  PASSED  
+          sts_serial|  12|    100000|     200|0.58129670|  PASSED  
+          sts_serial|  13|    100000|     200|0.16331253|  PASSED  
+          sts_serial|  13|    100000|     200|0.93405341|  PASSED  
+          sts_serial|  14|    100000|     200|0.18029999|  PASSED  
+          sts_serial|  14|    100000|     200|0.72961703|  PASSED  
+          sts_serial|  15|    100000|     200|0.61321362|  PASSED  
+          sts_serial|  15|    100000|     200|0.63184058|  PASSED  
+          sts_serial|  16|    100000|     200|0.20773905|  PASSED  
+          sts_serial|  16|    100000|     200|0.71586909|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.69415931|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.12624091|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.22538287|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.32055635|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.13052601|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.52801646|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.67087873|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.63129626|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.98800258|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.30029002|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.94642893|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.99443795|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.55457479|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.07265421|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.49304406|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.38882417|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.85766631|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.93256747|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.55684664|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.74620535|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.17980216|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.63342243|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.22324314|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.59564694|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.65899678|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.39673184|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.46298516|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.16100713|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.84282969|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.97992525|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.68272004|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.17844944|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.11191312|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.29326968|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.99177158|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.80801444|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.17813701|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.17939213|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.88358710|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.84354589|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.57913594|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.71916259|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.61143784|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.14727082|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.90142206|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.94430752|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.80380200|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.28284147|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.20001887|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.81875443|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.54027690|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.66221005|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.98646262|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.01721435|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.48656023|  PASSED  
+             dab_dct| 256|     50000|       1|0.26895122|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.80215939|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.23290890|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.70369720|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.17892404|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.29468051|  PASSED  
+# 
+# Test duration: 120.78482549196669 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_2 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_2
new file mode 100644
index 0000000000..01485b2106
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_2
@@ -0,0 +1,139 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.MersenneTwister
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.63e+06  | 909089418|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.57666818|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.10676771|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.74337120|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.68880686|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.69978963|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.97501727|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.81350437|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.20400884|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.15322777|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.14494589|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.51474850|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.95366320|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.43818452|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.40334241|  PASSED  
+        diehard_sums|   0|       100|     100|0.76348841|  PASSED  
+        diehard_runs|   0|    100000|     100|0.79256591|  PASSED  
+        diehard_runs|   0|    100000|     100|0.25445506|  PASSED  
+       diehard_craps|   0|    200000|     100|0.32367700|  PASSED  
+       diehard_craps|   0|    200000|     100|0.70730899|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.01837715|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.81349523|  PASSED  
+         sts_monobit|   1|    100000|     100|0.64167023|  PASSED  
+            sts_runs|   2|    100000|     100|0.55130082|  PASSED  
+          sts_serial|   1|    100000|     100|0.44545864|  PASSED  
+          sts_serial|   2|    100000|     100|0.35537223|  PASSED  
+          sts_serial|   3|    100000|     100|0.13085564|  PASSED  
+          sts_serial|   3|    100000|     100|0.76794555|  PASSED  
+          sts_serial|   4|    100000|     100|0.23072317|  PASSED  
+          sts_serial|   4|    100000|     100|0.10561915|  PASSED  
+          sts_serial|   5|    100000|     100|0.78697932|  PASSED  
+          sts_serial|   5|    100000|     100|0.81793074|  PASSED  
+          sts_serial|   6|    100000|     100|0.67895492|  PASSED  
+          sts_serial|   6|    100000|     100|0.88569864|  PASSED  
+          sts_serial|   7|    100000|     100|0.98638259|  PASSED  
+          sts_serial|   7|    100000|     100|0.56313192|  PASSED  
+          sts_serial|   8|    100000|     100|0.42004340|  PASSED  
+          sts_serial|   8|    100000|     100|0.45497062|  PASSED  
+          sts_serial|   9|    100000|     100|0.41746404|  PASSED  
+          sts_serial|   9|    100000|     100|0.92447592|  PASSED  
+          sts_serial|  10|    100000|     100|0.74648127|  PASSED  
+          sts_serial|  10|    100000|     100|0.36009885|  PASSED  
+          sts_serial|  11|    100000|     100|0.69574999|  PASSED  
+          sts_serial|  11|    100000|     100|0.40293019|  PASSED  
+          sts_serial|  12|    100000|     100|0.03981890|  PASSED  
+          sts_serial|  12|    100000|     100|0.69569396|  PASSED  
+          sts_serial|  13|    100000|     100|0.63061198|  PASSED  
+          sts_serial|  13|    100000|     100|0.63037669|  PASSED  
+          sts_serial|  14|    100000|     100|0.87816463|  PASSED  
+          sts_serial|  14|    100000|     100|0.21663864|  PASSED  
+          sts_serial|  15|    100000|     100|0.87852591|  PASSED  
+          sts_serial|  15|    100000|     100|0.41693707|  PASSED  
+          sts_serial|  16|    100000|     100|0.33631835|  PASSED  
+          sts_serial|  16|    100000|     100|0.65572542|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.97695501|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.88067359|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.89288899|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.42071996|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.96788278|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.03237150|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.99273662|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.58534734|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.24754216|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.86834877|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.70560945|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.90617943|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.60172035|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.62349099|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.93111162|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.68394275|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.42623990|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.09156349|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.24806729|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.99945481|   WEAK   
+    rgb_permutations|   5|    100000|     200|0.98242354|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.28501418|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.14402422|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.42909551|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.96931894|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.24946832|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.76140626|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.76905041|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.23977956|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.58321098|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.63502451|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.93678255|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.18382447|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.58329523|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.75276909|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.84309855|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.52505871|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.66504576|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.37592499|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.98037413|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.08356807|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.28079745|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.70923675|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.43704352|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.56901929|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.46522224|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.81510301|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.89165619|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.09809237|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.85382352|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.10819683|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.68401331|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.83058076|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.28293116|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.40832593|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.56819550|  PASSED  
+             dab_dct| 256|     50000|       1|0.11083045|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.46591225|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.22493349|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.25637799|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.08104752|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.57265590|  PASSED  
+# 
+# Test duration: 116.58544601305 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_3 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_3
new file mode 100644
index 0000000000..3ac5a0197a
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_3
@@ -0,0 +1,173 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well512a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.51e+06  |4211420527|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.73569699|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.08622316|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.80836729|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.99111559|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.83659726|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.70330969|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.65389789|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.48126817|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.90155342|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.24169832|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.95085394|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.70520965|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.99881464|   WEAK   
+    diehard_3dsphere|   3|      4000|     200|0.65540217|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.88558219|  PASSED  
+        diehard_sums|   0|       100|     100|0.97435568|  PASSED  
+        diehard_runs|   0|    100000|     100|0.46447902|  PASSED  
+        diehard_runs|   0|    100000|     100|0.77608604|  PASSED  
+       diehard_craps|   0|    200000|     100|0.74670227|  PASSED  
+       diehard_craps|   0|    200000|     100|0.07572357|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.49225755|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.01154094|  PASSED  
+         sts_monobit|   1|    100000|     100|0.51545966|  PASSED  
+            sts_runs|   2|    100000|     100|0.46898980|  PASSED  
+          sts_serial|   1|    100000|     100|0.48264154|  PASSED  
+          sts_serial|   2|    100000|     100|0.87095634|  PASSED  
+          sts_serial|   3|    100000|     100|0.93502495|  PASSED  
+          sts_serial|   3|    100000|     100|0.92442039|  PASSED  
+          sts_serial|   4|    100000|     100|0.20983709|  PASSED  
+          sts_serial|   4|    100000|     100|0.11248912|  PASSED  
+          sts_serial|   5|    100000|     100|0.33340568|  PASSED  
+          sts_serial|   5|    100000|     100|0.83923511|  PASSED  
+          sts_serial|   6|    100000|     100|0.77159773|  PASSED  
+          sts_serial|   6|    100000|     100|0.99729842|   WEAK   
+          sts_serial|   7|    100000|     100|0.69682384|  PASSED  
+          sts_serial|   7|    100000|     100|0.49451383|  PASSED  
+          sts_serial|   8|    100000|     100|0.21687301|  PASSED  
+          sts_serial|   8|    100000|     100|0.20732811|  PASSED  
+          sts_serial|   9|    100000|     100|0.15358619|  PASSED  
+          sts_serial|   9|    100000|     100|0.79842773|  PASSED  
+          sts_serial|  10|    100000|     100|0.28868417|  PASSED  
+          sts_serial|  10|    100000|     100|0.72864074|  PASSED  
+          sts_serial|  11|    100000|     100|0.52528201|  PASSED  
+          sts_serial|  11|    100000|     100|0.56684576|  PASSED  
+          sts_serial|  12|    100000|     100|0.94363896|  PASSED  
+          sts_serial|  12|    100000|     100|0.75370192|  PASSED  
+          sts_serial|  13|    100000|     100|0.64929204|  PASSED  
+          sts_serial|  13|    100000|     100|0.16172691|  PASSED  
+          sts_serial|  14|    100000|     100|0.25057488|  PASSED  
+          sts_serial|  14|    100000|     100|0.48541434|  PASSED  
+          sts_serial|  15|    100000|     100|0.22064194|  PASSED  
+          sts_serial|  15|    100000|     100|0.01808135|  PASSED  
+          sts_serial|  16|    100000|     100|0.80793746|  PASSED  
+          sts_serial|  16|    100000|     100|0.43733434|  PASSED  
+          sts_serial|   1|    100000|     200|0.34976204|  PASSED  
+          sts_serial|   2|    100000|     200|0.93526197|  PASSED  
+          sts_serial|   3|    100000|     200|0.50858476|  PASSED  
+          sts_serial|   3|    100000|     200|0.19465837|  PASSED  
+          sts_serial|   4|    100000|     200|0.01310388|  PASSED  
+          sts_serial|   4|    100000|     200|0.23421588|  PASSED  
+          sts_serial|   5|    100000|     200|0.96469089|  PASSED  
+          sts_serial|   5|    100000|     200|0.16949722|  PASSED  
+          sts_serial|   6|    100000|     200|0.43346233|  PASSED  
+          sts_serial|   6|    100000|     200|0.69913325|  PASSED  
+          sts_serial|   7|    100000|     200|0.71578405|  PASSED  
+          sts_serial|   7|    100000|     200|0.22797027|  PASSED  
+          sts_serial|   8|    100000|     200|0.26581934|  PASSED  
+          sts_serial|   8|    100000|     200|0.14862050|  PASSED  
+          sts_serial|   9|    100000|     200|0.22688915|  PASSED  
+          sts_serial|   9|    100000|     200|0.70814818|  PASSED  
+          sts_serial|  10|    100000|     200|0.46870704|  PASSED  
+          sts_serial|  10|    100000|     200|0.80822502|  PASSED  
+          sts_serial|  11|    100000|     200|0.07913288|  PASSED  
+          sts_serial|  11|    100000|     200|0.62243568|  PASSED  
+          sts_serial|  12|    100000|     200|0.90482873|  PASSED  
+          sts_serial|  12|    100000|     200|0.76035109|  PASSED  
+          sts_serial|  13|    100000|     200|0.55907604|  PASSED  
+          sts_serial|  13|    100000|     200|0.04002659|  PASSED  
+          sts_serial|  14|    100000|     200|0.42102911|  PASSED  
+          sts_serial|  14|    100000|     200|0.43398037|  PASSED  
+          sts_serial|  15|    100000|     200|0.35645685|  PASSED  
+          sts_serial|  15|    100000|     200|0.32876181|  PASSED  
+          sts_serial|  16|    100000|     200|0.30750171|  PASSED  
+          sts_serial|  16|    100000|     200|0.09587246|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.87310037|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.31592448|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.61824218|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.99942776|   WEAK   
+         rgb_bitdist|   4|    100000|     200|0.92398512|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.88343458|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.83272604|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.98829206|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.99907992|   WEAK   
+         rgb_bitdist|   8|    100000|     200|0.86791402|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.46498741|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.61928372|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.84783913|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.23328216|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.93646288|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.99761569|   WEAK   
+rgb_minimum_distance|   3|     10000|    1100|0.97748827|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.81621178|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.11447885|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.96689779|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.81610330|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.56063833|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.80868060|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.04484539|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.99994915|   WEAK   
+      rgb_lagged_sum|   1|   1000000|     200|0.25055014|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.27636319|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.16970026|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.04565450|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.55001363|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.81626184|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.53218931|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.42800661|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.64722177|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.59656239|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.07248502|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.60370774|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.67685289|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.67111539|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.13888373|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.89991041|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.87684042|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.28816255|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.63431690|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.04818588|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.22299419|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.81364986|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.76859070|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.25131951|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.13082282|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.26551839|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.13675576|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.72796549|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.60128457|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.79992817|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.42925500|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.28257611|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.14339836|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.94043589|  PASSED  
+             dab_dct| 256|     50000|       1|0.50865939|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.77604985|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.14225807|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.83200748|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.02390761|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.57871202|  PASSED  
+# 
+# Test duration: 118.20524420808334 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_4 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_4
new file mode 100644
index 0000000000..0940febb4b
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_4
@@ -0,0 +1,140 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well1024a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.42e+06  |2497224856|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.93943859|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.63728896|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.95580176|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.18097112|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.99343489|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.94166579|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.22314485|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.79986859|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.70848092|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.83114286|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.40502936|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.62710075|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.74542315|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.41799689|  PASSED  
+        diehard_sums|   0|       100|     100|0.00534029|  PASSED  
+        diehard_runs|   0|    100000|     100|0.90021313|  PASSED  
+        diehard_runs|   0|    100000|     100|0.16525007|  PASSED  
+       diehard_craps|   0|    200000|     100|0.97941614|  PASSED  
+       diehard_craps|   0|    200000|     100|0.79551098|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.25751371|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.53841215|  PASSED  
+         sts_monobit|   1|    100000|     100|0.75586975|  PASSED  
+            sts_runs|   2|    100000|     100|0.66449057|  PASSED  
+          sts_serial|   1|    100000|     100|0.47969343|  PASSED  
+          sts_serial|   2|    100000|     100|0.97479350|  PASSED  
+          sts_serial|   3|    100000|     100|0.80306348|  PASSED  
+          sts_serial|   3|    100000|     100|0.89855897|  PASSED  
+          sts_serial|   4|    100000|     100|0.79521344|  PASSED  
+          sts_serial|   4|    100000|     100|0.82696406|  PASSED  
+          sts_serial|   5|    100000|     100|0.72777371|  PASSED  
+          sts_serial|   5|    100000|     100|0.90364439|  PASSED  
+          sts_serial|   6|    100000|     100|0.94248747|  PASSED  
+          sts_serial|   6|    100000|     100|0.84120341|  PASSED  
+          sts_serial|   7|    100000|     100|0.57766358|  PASSED  
+          sts_serial|   7|    100000|     100|0.94269176|  PASSED  
+          sts_serial|   8|    100000|     100|0.72358453|  PASSED  
+          sts_serial|   8|    100000|     100|0.42902721|  PASSED  
+          sts_serial|   9|    100000|     100|0.70277439|  PASSED  
+          sts_serial|   9|    100000|     100|0.74865473|  PASSED  
+          sts_serial|  10|    100000|     100|0.69649290|  PASSED  
+          sts_serial|  10|    100000|     100|0.56688921|  PASSED  
+          sts_serial|  11|    100000|     100|0.46844177|  PASSED  
+          sts_serial|  11|    100000|     100|0.65632957|  PASSED  
+          sts_serial|  12|    100000|     100|0.33209458|  PASSED  
+          sts_serial|  12|    100000|     100|0.07622771|  PASSED  
+          sts_serial|  13|    100000|     100|0.08350208|  PASSED  
+          sts_serial|  13|    100000|     100|0.39915645|  PASSED  
+          sts_serial|  14|    100000|     100|0.71431624|  PASSED  
+          sts_serial|  14|    100000|     100|0.41316037|  PASSED  
+          sts_serial|  15|    100000|     100|0.61006624|  PASSED  
+          sts_serial|  15|    100000|     100|0.57857458|  PASSED  
+          sts_serial|  16|    100000|     100|0.77349407|  PASSED  
+          sts_serial|  16|    100000|     100|0.63593005|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.30023699|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.00249511|   WEAK   
+         rgb_bitdist|   2|    100000|     200|0.08721476|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.98468481|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.09495465|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.49274571|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.10569290|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.47612470|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.90156059|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.30526760|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.70397740|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.79932716|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.66661217|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.99069444|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.77935640|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.60074439|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.70558491|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.88696488|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.12568196|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.48262897|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.89950526|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.03246953|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.21606141|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.96675656|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.59100832|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.25778641|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.69962887|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.63056047|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.28816373|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.84364800|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.23523932|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.81983359|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.97430489|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.90295208|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.11930308|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.63926431|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.26795824|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.68419648|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.12107420|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.31015405|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.72145665|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.72609446|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.84462652|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.95286882|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.89006976|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.30068378|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.60464167|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.28938971|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.99518634|   WEAK   
+      rgb_lagged_sum|  27|   1000000|     200|0.90965463|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.55903539|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.50446676|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.07112938|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.52086491|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.74499506|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.36734192|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.66315774|  PASSED  
+             dab_dct| 256|     50000|       1|0.80017590|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.18763190|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.67790596|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.74471137|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.50106617|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.36989956|  PASSED  
+# 
+# Test duration: 122.20074466720001 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_5 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_5
new file mode 100644
index 0000000000..f66b16515c
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_5
@@ -0,0 +1,140 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.06e+06  | 944676986|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.82045877|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.84473310|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.45195539|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.70289015|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.27390588|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.91111976|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.02130490|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.16227625|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.50065029|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.84089195|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.09561419|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.99368228|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.02820788|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.82285003|  PASSED  
+        diehard_sums|   0|       100|     100|0.07114222|  PASSED  
+        diehard_runs|   0|    100000|     100|0.94217033|  PASSED  
+        diehard_runs|   0|    100000|     100|0.98486755|  PASSED  
+       diehard_craps|   0|    200000|     100|0.20251530|  PASSED  
+       diehard_craps|   0|    200000|     100|0.97545408|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.46275263|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.83452806|  PASSED  
+         sts_monobit|   1|    100000|     100|0.63882607|  PASSED  
+            sts_runs|   2|    100000|     100|0.65857445|  PASSED  
+          sts_serial|   1|    100000|     100|0.28813074|  PASSED  
+          sts_serial|   2|    100000|     100|0.59340831|  PASSED  
+          sts_serial|   3|    100000|     100|0.73841124|  PASSED  
+          sts_serial|   3|    100000|     100|0.11029865|  PASSED  
+          sts_serial|   4|    100000|     100|0.69147207|  PASSED  
+          sts_serial|   4|    100000|     100|0.24211323|  PASSED  
+          sts_serial|   5|    100000|     100|0.42113289|  PASSED  
+          sts_serial|   5|    100000|     100|0.22195716|  PASSED  
+          sts_serial|   6|    100000|     100|0.40125433|  PASSED  
+          sts_serial|   6|    100000|     100|0.49315024|  PASSED  
+          sts_serial|   7|    100000|     100|0.84984551|  PASSED  
+          sts_serial|   7|    100000|     100|0.95984864|  PASSED  
+          sts_serial|   8|    100000|     100|0.11799542|  PASSED  
+          sts_serial|   8|    100000|     100|0.96167249|  PASSED  
+          sts_serial|   9|    100000|     100|0.71524974|  PASSED  
+          sts_serial|   9|    100000|     100|0.52923584|  PASSED  
+          sts_serial|  10|    100000|     100|0.26515863|  PASSED  
+          sts_serial|  10|    100000|     100|0.49996394|  PASSED  
+          sts_serial|  11|    100000|     100|0.84125453|  PASSED  
+          sts_serial|  11|    100000|     100|0.98729007|  PASSED  
+          sts_serial|  12|    100000|     100|0.74606799|  PASSED  
+          sts_serial|  12|    100000|     100|0.96135142|  PASSED  
+          sts_serial|  13|    100000|     100|0.79151378|  PASSED  
+          sts_serial|  13|    100000|     100|0.95646369|  PASSED  
+          sts_serial|  14|    100000|     100|0.85182328|  PASSED  
+          sts_serial|  14|    100000|     100|0.45431179|  PASSED  
+          sts_serial|  15|    100000|     100|0.92779031|  PASSED  
+          sts_serial|  15|    100000|     100|0.97606049|  PASSED  
+          sts_serial|  16|    100000|     100|0.43128126|  PASSED  
+          sts_serial|  16|    100000|     100|0.93524173|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.56998908|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.09449602|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.69656828|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.87135093|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.62350313|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.14372522|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.86877141|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.95728455|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.59624944|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.60481178|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.19222006|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.63945132|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.85307803|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.81294855|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.03739119|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.09435474|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.92217060|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.80890515|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.91880038|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.53864209|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.68568696|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.01107186|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.86445672|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.39067655|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.82306252|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.94609907|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.49706294|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.13833086|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.63595987|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.89354116|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.02182848|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.45525029|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.58704773|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.93376289|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.41769046|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.94415602|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.07320999|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.82047033|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.67145729|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.88456306|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.46426107|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.58381577|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.95930190|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.46210194|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.58002195|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.98402509|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.99557167|   WEAK   
+      rgb_lagged_sum|  26|   1000000|     200|0.90058729|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.94462086|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.76724806|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.69144938|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.66929207|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.28894366|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.27274575|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.98606330|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.31163606|  PASSED  
+             dab_dct| 256|     50000|       1|0.29595322|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.54632049|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.61008716|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.43951189|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.10556475|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.99867968|   WEAK   
+        dab_monobit2|  12|  65000000|     101|0.12153278|  PASSED  
+# 
+# Test duration: 134.41813858098334 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_6 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_6
new file mode 100644
index 0000000000..618559577a
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_6
@@ -0,0 +1,146 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937c
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.36e+06  |1937046421|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.51267882|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.99052334|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.43110254|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.58244765|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.62006555|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.31077148|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.87976687|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.14495226|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.54976486|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.43678777|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.77995133|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.25538371|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.80797587|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.67499976|  PASSED  
+        diehard_sums|   0|       100|     100|0.52413111|  PASSED  
+        diehard_runs|   0|    100000|     100|0.80051199|  PASSED  
+        diehard_runs|   0|    100000|     100|0.65987492|  PASSED  
+       diehard_craps|   0|    200000|     100|0.17261905|  PASSED  
+       diehard_craps|   0|    200000|     100|0.78770120|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.93072090|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.99652021|   WEAK   
+ marsaglia_tsang_gcd|   0|  10000000|     200|0.32666708|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     200|0.99727340|   WEAK   
+ marsaglia_tsang_gcd|   0|  10000000|     300|0.49401547|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     300|0.54350483|  PASSED  
+         sts_monobit|   1|    100000|     100|0.39866950|  PASSED  
+            sts_runs|   2|    100000|     100|0.83581386|  PASSED  
+          sts_serial|   1|    100000|     100|0.31625711|  PASSED  
+          sts_serial|   2|    100000|     100|0.92545666|  PASSED  
+          sts_serial|   3|    100000|     100|0.98151795|  PASSED  
+          sts_serial|   3|    100000|     100|0.60175234|  PASSED  
+          sts_serial|   4|    100000|     100|0.80972298|  PASSED  
+          sts_serial|   4|    100000|     100|0.70233360|  PASSED  
+          sts_serial|   5|    100000|     100|0.98481379|  PASSED  
+          sts_serial|   5|    100000|     100|0.97210811|  PASSED  
+          sts_serial|   6|    100000|     100|0.65595365|  PASSED  
+          sts_serial|   6|    100000|     100|0.82899224|  PASSED  
+          sts_serial|   7|    100000|     100|0.03672567|  PASSED  
+          sts_serial|   7|    100000|     100|0.59821253|  PASSED  
+          sts_serial|   8|    100000|     100|0.53663446|  PASSED  
+          sts_serial|   8|    100000|     100|0.03086427|  PASSED  
+          sts_serial|   9|    100000|     100|0.29828922|  PASSED  
+          sts_serial|   9|    100000|     100|0.55836146|  PASSED  
+          sts_serial|  10|    100000|     100|0.81740386|  PASSED  
+          sts_serial|  10|    100000|     100|0.04205089|  PASSED  
+          sts_serial|  11|    100000|     100|0.96668011|  PASSED  
+          sts_serial|  11|    100000|     100|0.71260192|  PASSED  
+          sts_serial|  12|    100000|     100|0.78493579|  PASSED  
+          sts_serial|  12|    100000|     100|0.62422816|  PASSED  
+          sts_serial|  13|    100000|     100|0.80078069|  PASSED  
+          sts_serial|  13|    100000|     100|0.76059009|  PASSED  
+          sts_serial|  14|    100000|     100|0.96779536|  PASSED  
+          sts_serial|  14|    100000|     100|0.56582383|  PASSED  
+          sts_serial|  15|    100000|     100|0.90362059|  PASSED  
+          sts_serial|  15|    100000|     100|0.18441234|  PASSED  
+          sts_serial|  16|    100000|     100|0.59537281|  PASSED  
+          sts_serial|  16|    100000|     100|0.92467399|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.86852256|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.94901006|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.97129520|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.66425505|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.99550191|   WEAK   
+         rgb_bitdist|   5|    100000|     200|0.84437025|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.38268114|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.74953095|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.78092226|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.99702703|   WEAK   
+         rgb_bitdist|   9|    100000|     200|0.62351723|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.99029363|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.46760973|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.16847988|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.09009079|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.83478823|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.26704122|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.38450616|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.41237823|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.48576105|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.98696409|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.99787308|   WEAK   
+    rgb_permutations|   5|    100000|     200|0.97615275|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.91424395|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.20599549|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.46422562|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.71232253|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.57603360|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.89803200|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.45340776|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.36442274|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.49480498|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.33094142|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.47641961|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.43372374|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.98913689|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.45877548|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.83162863|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.15850218|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.12786978|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.60886089|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.72649082|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.76492612|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.53206310|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.52133317|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.05441741|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.41107746|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.99588606|   WEAK   
+      rgb_lagged_sum|  24|   1000000|     200|0.98990428|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.32617875|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.97442171|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.78299587|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.60922391|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.64487666|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.61066705|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.57863115|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.23473328|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.20995162|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.63078574|  PASSED  
+             dab_dct| 256|     50000|       1|0.42967831|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.11482983|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.87492994|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.52338027|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.66207465|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.73112863|  PASSED  
+# 
+# Test duration: 133.69631865308332 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_7 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_7
new file mode 100644
index 0000000000..6aee1d3f46
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_7
@@ -0,0 +1,204 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  7.98e+06  | 928607557|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.82007001|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.99547281|   WEAK   
+      diehard_operm5|   0|   1000000|     200|0.49051121|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.74741099|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.50752156|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.17270720|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.35550779|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.49666162|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.12894355|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.59478096|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.50883747|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.45749625|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.96538054|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.02189419|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.15869088|  PASSED  
+        diehard_sums|   0|       100|     100|0.00841445|  PASSED  
+        diehard_runs|   0|    100000|     100|0.78690636|  PASSED  
+        diehard_runs|   0|    100000|     100|0.58450153|  PASSED  
+       diehard_craps|   0|    200000|     100|0.92507252|  PASSED  
+       diehard_craps|   0|    200000|     100|0.99015443|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.50464897|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.65940503|  PASSED  
+         sts_monobit|   1|    100000|     100|0.06582809|  PASSED  
+            sts_runs|   2|    100000|     100|0.85976447|  PASSED  
+          sts_serial|   1|    100000|     100|0.47108999|  PASSED  
+          sts_serial|   2|    100000|     100|0.13198569|  PASSED  
+          sts_serial|   3|    100000|     100|0.60561394|  PASSED  
+          sts_serial|   3|    100000|     100|0.81757721|  PASSED  
+          sts_serial|   4|    100000|     100|0.29426072|  PASSED  
+          sts_serial|   4|    100000|     100|0.41808668|  PASSED  
+          sts_serial|   5|    100000|     100|0.40081116|  PASSED  
+          sts_serial|   5|    100000|     100|0.81190373|  PASSED  
+          sts_serial|   6|    100000|     100|0.80462705|  PASSED  
+          sts_serial|   6|    100000|     100|0.40548752|  PASSED  
+          sts_serial|   7|    100000|     100|0.84312607|  PASSED  
+          sts_serial|   7|    100000|     100|0.48336103|  PASSED  
+          sts_serial|   8|    100000|     100|0.68109838|  PASSED  
+          sts_serial|   8|    100000|     100|0.25464021|  PASSED  
+          sts_serial|   9|    100000|     100|0.27908490|  PASSED  
+          sts_serial|   9|    100000|     100|0.82810109|  PASSED  
+          sts_serial|  10|    100000|     100|0.10706928|  PASSED  
+          sts_serial|  10|    100000|     100|0.63868801|  PASSED  
+          sts_serial|  11|    100000|     100|0.01407815|  PASSED  
+          sts_serial|  11|    100000|     100|0.09818554|  PASSED  
+          sts_serial|  12|    100000|     100|0.00202141|   WEAK   
+          sts_serial|  12|    100000|     100|0.20964323|  PASSED  
+          sts_serial|  13|    100000|     100|0.05727806|  PASSED  
+          sts_serial|  13|    100000|     100|0.90206720|  PASSED  
+          sts_serial|  14|    100000|     100|0.00055873|   WEAK   
+          sts_serial|  14|    100000|     100|0.17847817|  PASSED  
+          sts_serial|  15|    100000|     100|0.27402956|  PASSED  
+          sts_serial|  15|    100000|     100|0.91876061|  PASSED  
+          sts_serial|  16|    100000|     100|0.03777306|  PASSED  
+          sts_serial|  16|    100000|     100|0.53543350|  PASSED  
+          sts_serial|   1|    100000|     200|0.95477890|  PASSED  
+          sts_serial|   2|    100000|     200|0.82585956|  PASSED  
+          sts_serial|   3|    100000|     200|0.36670304|  PASSED  
+          sts_serial|   3|    100000|     200|0.50271837|  PASSED  
+          sts_serial|   4|    100000|     200|0.27038031|  PASSED  
+          sts_serial|   4|    100000|     200|0.76416151|  PASSED  
+          sts_serial|   5|    100000|     200|0.35949676|  PASSED  
+          sts_serial|   5|    100000|     200|0.38834493|  PASSED  
+          sts_serial|   6|    100000|     200|0.53176978|  PASSED  
+          sts_serial|   6|    100000|     200|0.58358586|  PASSED  
+          sts_serial|   7|    100000|     200|0.99807673|   WEAK   
+          sts_serial|   7|    100000|     200|0.51102811|  PASSED  
+          sts_serial|   8|    100000|     200|0.68874068|  PASSED  
+          sts_serial|   8|    100000|     200|0.77295542|  PASSED  
+          sts_serial|   9|    100000|     200|0.71284329|  PASSED  
+          sts_serial|   9|    100000|     200|0.94177147|  PASSED  
+          sts_serial|  10|    100000|     200|0.76331279|  PASSED  
+          sts_serial|  10|    100000|     200|0.70231947|  PASSED  
+          sts_serial|  11|    100000|     200|0.16660736|  PASSED  
+          sts_serial|  11|    100000|     200|0.08573089|  PASSED  
+          sts_serial|  12|    100000|     200|0.01449615|  PASSED  
+          sts_serial|  12|    100000|     200|0.10054957|  PASSED  
+          sts_serial|  13|    100000|     200|0.08148787|  PASSED  
+          sts_serial|  13|    100000|     200|0.83353394|  PASSED  
+          sts_serial|  14|    100000|     200|0.06870757|  PASSED  
+          sts_serial|  14|    100000|     200|0.91854888|  PASSED  
+          sts_serial|  15|    100000|     200|0.21648779|  PASSED  
+          sts_serial|  15|    100000|     200|0.46966659|  PASSED  
+          sts_serial|  16|    100000|     200|0.31462053|  PASSED  
+          sts_serial|  16|    100000|     200|0.97386862|  PASSED  
+          sts_serial|   1|    100000|     300|0.85116989|  PASSED  
+          sts_serial|   2|    100000|     300|0.73261351|  PASSED  
+          sts_serial|   3|    100000|     300|0.69815478|  PASSED  
+          sts_serial|   3|    100000|     300|0.55285217|  PASSED  
+          sts_serial|   4|    100000|     300|0.33081797|  PASSED  
+          sts_serial|   4|    100000|     300|0.32159624|  PASSED  
+          sts_serial|   5|    100000|     300|0.70617878|  PASSED  
+          sts_serial|   5|    100000|     300|0.35138655|  PASSED  
+          sts_serial|   6|    100000|     300|0.50667861|  PASSED  
+          sts_serial|   6|    100000|     300|0.56040238|  PASSED  
+          sts_serial|   7|    100000|     300|0.78827367|  PASSED  
+          sts_serial|   7|    100000|     300|0.97065250|  PASSED  
+          sts_serial|   8|    100000|     300|0.90041627|  PASSED  
+          sts_serial|   8|    100000|     300|0.96786351|  PASSED  
+          sts_serial|   9|    100000|     300|0.57872360|  PASSED  
+          sts_serial|   9|    100000|     300|0.46435289|  PASSED  
+          sts_serial|  10|    100000|     300|0.98584255|  PASSED  
+          sts_serial|  10|    100000|     300|0.62998604|  PASSED  
+          sts_serial|  11|    100000|     300|0.30809523|  PASSED  
+          sts_serial|  11|    100000|     300|0.10027349|  PASSED  
+          sts_serial|  12|    100000|     300|0.26167543|  PASSED  
+          sts_serial|  12|    100000|     300|0.19350487|  PASSED  
+          sts_serial|  13|    100000|     300|0.37927445|  PASSED  
+          sts_serial|  13|    100000|     300|0.71921891|  PASSED  
+          sts_serial|  14|    100000|     300|0.21398731|  PASSED  
+          sts_serial|  14|    100000|     300|0.71135804|  PASSED  
+          sts_serial|  15|    100000|     300|0.41674830|  PASSED  
+          sts_serial|  15|    100000|     300|0.36236637|  PASSED  
+          sts_serial|  16|    100000|     300|0.53289201|  PASSED  
+          sts_serial|  16|    100000|     300|0.88775973|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.94155049|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.81891646|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.23711082|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.41912970|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.98230793|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.92659444|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.11980889|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.56551597|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.24468436|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.31401751|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.49183090|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.05110940|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.87823054|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.46134883|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.29795173|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.02955673|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.47685135|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.99533406|   WEAK   
+    rgb_permutations|   3|    100000|     200|0.10670238|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.81368843|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.41329332|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.38968451|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.57090927|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.06218170|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.02280486|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.05530322|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.09877564|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.94342191|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.93161832|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.26114296|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.53096461|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.60169214|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.52231633|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.86624830|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.71442269|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.92954668|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.48566554|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.20698682|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.99437670|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.99734998|   WEAK   
+      rgb_lagged_sum|  18|   1000000|     200|0.99927818|   WEAK   
+      rgb_lagged_sum|  18|   1000000|     300|0.78851563|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.97051716|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.99907913|   WEAK   
+      rgb_lagged_sum|  20|   1000000|     200|0.80396797|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.99986353|   WEAK   
+      rgb_lagged_sum|  21|   1000000|     200|0.43133733|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.75065276|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.33548964|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.54121548|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.34269794|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.00998816|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.58548470|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.16490566|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.43192865|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.56195536|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.29028720|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.84210168|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.39986448|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.28901123|  PASSED  
+             dab_dct| 256|     50000|       1|0.33677959|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.25513156|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.24437722|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.61751696|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.20017244|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.98043063|  PASSED  
+# 
+# Test duration: 137.55742882765 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_8 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_8
new file mode 100644
index 0000000000..c744795ed0
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_8
@@ -0,0 +1,201 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497b
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.21e+06  |2910993051|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.85063748|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.81273589|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.87816386|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.42814646|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.04286407|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.95793268|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.04253381|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.26565466|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.99098352|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.97859584|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.62905479|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.11737319|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.41186865|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.85097789|  PASSED  
+        diehard_sums|   0|       100|     100|0.00983403|  PASSED  
+        diehard_runs|   0|    100000|     100|0.85218797|  PASSED  
+        diehard_runs|   0|    100000|     100|0.63267832|  PASSED  
+       diehard_craps|   0|    200000|     100|0.09494403|  PASSED  
+       diehard_craps|   0|    200000|     100|0.16049734|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.33818020|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.70774106|  PASSED  
+         sts_monobit|   1|    100000|     100|0.55866871|  PASSED  
+            sts_runs|   2|    100000|     100|0.41167458|  PASSED  
+          sts_serial|   1|    100000|     100|0.42240442|  PASSED  
+          sts_serial|   2|    100000|     100|0.49861954|  PASSED  
+          sts_serial|   3|    100000|     100|0.69015488|  PASSED  
+          sts_serial|   3|    100000|     100|0.38179689|  PASSED  
+          sts_serial|   4|    100000|     100|0.32935287|  PASSED  
+          sts_serial|   4|    100000|     100|0.99876192|   WEAK   
+          sts_serial|   5|    100000|     100|0.76971899|  PASSED  
+          sts_serial|   5|    100000|     100|0.95269489|  PASSED  
+          sts_serial|   6|    100000|     100|0.64367474|  PASSED  
+          sts_serial|   6|    100000|     100|0.30994624|  PASSED  
+          sts_serial|   7|    100000|     100|0.59407462|  PASSED  
+          sts_serial|   7|    100000|     100|0.90373629|  PASSED  
+          sts_serial|   8|    100000|     100|0.38899304|  PASSED  
+          sts_serial|   8|    100000|     100|0.85683354|  PASSED  
+          sts_serial|   9|    100000|     100|0.04054051|  PASSED  
+          sts_serial|   9|    100000|     100|0.37007877|  PASSED  
+          sts_serial|  10|    100000|     100|0.83745337|  PASSED  
+          sts_serial|  10|    100000|     100|0.04265845|  PASSED  
+          sts_serial|  11|    100000|     100|0.95766410|  PASSED  
+          sts_serial|  11|    100000|     100|0.95252680|  PASSED  
+          sts_serial|  12|    100000|     100|0.89359367|  PASSED  
+          sts_serial|  12|    100000|     100|0.75449176|  PASSED  
+          sts_serial|  13|    100000|     100|0.93758152|  PASSED  
+          sts_serial|  13|    100000|     100|0.44311691|  PASSED  
+          sts_serial|  14|    100000|     100|0.88013990|  PASSED  
+          sts_serial|  14|    100000|     100|0.24008044|  PASSED  
+          sts_serial|  15|    100000|     100|0.66719010|  PASSED  
+          sts_serial|  15|    100000|     100|0.98859880|  PASSED  
+          sts_serial|  16|    100000|     100|0.75320744|  PASSED  
+          sts_serial|  16|    100000|     100|0.82605477|  PASSED  
+          sts_serial|   1|    100000|     200|0.70218774|  PASSED  
+          sts_serial|   2|    100000|     200|0.33264330|  PASSED  
+          sts_serial|   3|    100000|     200|0.93737717|  PASSED  
+          sts_serial|   3|    100000|     200|0.22252881|  PASSED  
+          sts_serial|   4|    100000|     200|0.29425631|  PASSED  
+          sts_serial|   4|    100000|     200|0.62150655|  PASSED  
+          sts_serial|   5|    100000|     200|0.77358704|  PASSED  
+          sts_serial|   5|    100000|     200|0.81543226|  PASSED  
+          sts_serial|   6|    100000|     200|0.42100356|  PASSED  
+          sts_serial|   6|    100000|     200|0.83357484|  PASSED  
+          sts_serial|   7|    100000|     200|0.51110264|  PASSED  
+          sts_serial|   7|    100000|     200|0.94708614|  PASSED  
+          sts_serial|   8|    100000|     200|0.10923389|  PASSED  
+          sts_serial|   8|    100000|     200|0.38931280|  PASSED  
+          sts_serial|   9|    100000|     200|0.00381027|   WEAK   
+          sts_serial|   9|    100000|     200|0.49556404|  PASSED  
+          sts_serial|  10|    100000|     200|0.67352211|  PASSED  
+          sts_serial|  10|    100000|     200|0.06990724|  PASSED  
+          sts_serial|  11|    100000|     200|0.97317017|  PASSED  
+          sts_serial|  11|    100000|     200|0.91392155|  PASSED  
+          sts_serial|  12|    100000|     200|0.31583896|  PASSED  
+          sts_serial|  12|    100000|     200|0.36224166|  PASSED  
+          sts_serial|  13|    100000|     200|0.93394881|  PASSED  
+          sts_serial|  13|    100000|     200|0.75358014|  PASSED  
+          sts_serial|  14|    100000|     200|0.04553189|  PASSED  
+          sts_serial|  14|    100000|     200|0.03960865|  PASSED  
+          sts_serial|  15|    100000|     200|0.07846780|  PASSED  
+          sts_serial|  15|    100000|     200|0.91198359|  PASSED  
+          sts_serial|  16|    100000|     200|0.07651736|  PASSED  
+          sts_serial|  16|    100000|     200|0.90458625|  PASSED  
+          sts_serial|   1|    100000|     300|0.67888783|  PASSED  
+          sts_serial|   2|    100000|     300|0.08930947|  PASSED  
+          sts_serial|   3|    100000|     300|0.57405260|  PASSED  
+          sts_serial|   3|    100000|     300|0.12699816|  PASSED  
+          sts_serial|   4|    100000|     300|0.48341426|  PASSED  
+          sts_serial|   4|    100000|     300|0.88008042|  PASSED  
+          sts_serial|   5|    100000|     300|0.83753962|  PASSED  
+          sts_serial|   5|    100000|     300|0.71883393|  PASSED  
+          sts_serial|   6|    100000|     300|0.60118311|  PASSED  
+          sts_serial|   6|    100000|     300|0.95967654|  PASSED  
+          sts_serial|   7|    100000|     300|0.34960778|  PASSED  
+          sts_serial|   7|    100000|     300|0.81568203|  PASSED  
+          sts_serial|   8|    100000|     300|0.04737059|  PASSED  
+          sts_serial|   8|    100000|     300|0.77372755|  PASSED  
+          sts_serial|   9|    100000|     300|0.10220799|  PASSED  
+          sts_serial|   9|    100000|     300|0.83617955|  PASSED  
+          sts_serial|  10|    100000|     300|0.80896354|  PASSED  
+          sts_serial|  10|    100000|     300|0.05407971|  PASSED  
+          sts_serial|  11|    100000|     300|0.81497009|  PASSED  
+          sts_serial|  11|    100000|     300|0.28593863|  PASSED  
+          sts_serial|  12|    100000|     300|0.17207211|  PASSED  
+          sts_serial|  12|    100000|     300|0.23507787|  PASSED  
+          sts_serial|  13|    100000|     300|0.54749268|  PASSED  
+          sts_serial|  13|    100000|     300|0.85545938|  PASSED  
+          sts_serial|  14|    100000|     300|0.01394194|  PASSED  
+          sts_serial|  14|    100000|     300|0.27324321|  PASSED  
+          sts_serial|  15|    100000|     300|0.00610106|  PASSED  
+          sts_serial|  15|    100000|     300|0.85419153|  PASSED  
+          sts_serial|  16|    100000|     300|0.12431227|  PASSED  
+          sts_serial|  16|    100000|     300|0.96686027|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.07811895|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.96058421|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.47663989|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.13308627|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.21738712|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.99254962|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.99904450|   WEAK   
+         rgb_bitdist|   7|    100000|     200|0.56160349|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.81772225|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.22529749|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.86439946|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.89902137|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.94699045|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.98995603|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.64762751|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.59382517|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.96436469|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.26633926|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.45745610|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.26976054|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.26228593|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.23747334|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.77237790|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.39637512|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.99700103|   WEAK   
+      rgb_lagged_sum|   3|   1000000|     200|0.50593047|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.11801391|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.58938886|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.96624158|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.05537309|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.08385241|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.90865689|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.49378572|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.90752931|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.78843768|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.45118102|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.16730631|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.43344461|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.73398837|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.90429587|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.99527076|   WEAK   
+      rgb_lagged_sum|  18|   1000000|     200|0.80510357|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.74948425|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.82568360|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.52313986|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.73570579|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.05313203|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.51517067|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.97969953|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.91039025|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.94098808|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.99265881|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.36105124|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.65170344|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.28699845|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.77234618|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.74177706|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.21989665|  PASSED  
+             dab_dct| 256|     50000|       1|0.95075593|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.72913115|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.27600544|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.45765439|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.71345018|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.16245895|  PASSED  
+# 
+# Test duration: 126.65715881980002 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_9 b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_9
new file mode 100644
index 0000000000..7408c6d754
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_1/dh_9
@@ -0,0 +1,143 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.ISAACRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  6.30e+06  |2172845642|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.20670107|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.78001700|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.35493394|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.92377787|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.49773359|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.25439379|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.53137774|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.68339120|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.62172476|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.31383541|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.36104913|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.94578959|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.93483509|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.77909624|  PASSED  
+        diehard_sums|   0|       100|     100|0.02187112|  PASSED  
+        diehard_runs|   0|    100000|     100|0.04592615|  PASSED  
+        diehard_runs|   0|    100000|     100|0.08649807|  PASSED  
+       diehard_craps|   0|    200000|     100|0.99288037|  PASSED  
+       diehard_craps|   0|    200000|     100|0.57261537|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.99707121|   WEAK   
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.06992656|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     200|0.93772565|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     200|0.08229452|  PASSED  
+         sts_monobit|   1|    100000|     100|0.86135560|  PASSED  
+            sts_runs|   2|    100000|     100|0.89338196|  PASSED  
+          sts_serial|   1|    100000|     100|0.72294158|  PASSED  
+          sts_serial|   2|    100000|     100|0.56063265|  PASSED  
+          sts_serial|   3|    100000|     100|0.74160336|  PASSED  
+          sts_serial|   3|    100000|     100|0.44158164|  PASSED  
+          sts_serial|   4|    100000|     100|0.90160450|  PASSED  
+          sts_serial|   4|    100000|     100|0.59272149|  PASSED  
+          sts_serial|   5|    100000|     100|0.13190688|  PASSED  
+          sts_serial|   5|    100000|     100|0.57876824|  PASSED  
+          sts_serial|   6|    100000|     100|0.26746526|  PASSED  
+          sts_serial|   6|    100000|     100|0.20589715|  PASSED  
+          sts_serial|   7|    100000|     100|0.32117179|  PASSED  
+          sts_serial|   7|    100000|     100|0.82871234|  PASSED  
+          sts_serial|   8|    100000|     100|0.93975526|  PASSED  
+          sts_serial|   8|    100000|     100|0.96787785|  PASSED  
+          sts_serial|   9|    100000|     100|0.92844528|  PASSED  
+          sts_serial|   9|    100000|     100|0.46291505|  PASSED  
+          sts_serial|  10|    100000|     100|0.69120501|  PASSED  
+          sts_serial|  10|    100000|     100|0.87888496|  PASSED  
+          sts_serial|  11|    100000|     100|0.83927442|  PASSED  
+          sts_serial|  11|    100000|     100|0.59246076|  PASSED  
+          sts_serial|  12|    100000|     100|0.27892839|  PASSED  
+          sts_serial|  12|    100000|     100|0.01182971|  PASSED  
+          sts_serial|  13|    100000|     100|0.76906876|  PASSED  
+          sts_serial|  13|    100000|     100|0.80424172|  PASSED  
+          sts_serial|  14|    100000|     100|0.44036194|  PASSED  
+          sts_serial|  14|    100000|     100|0.17877200|  PASSED  
+          sts_serial|  15|    100000|     100|0.85848151|  PASSED  
+          sts_serial|  15|    100000|     100|0.90726316|  PASSED  
+          sts_serial|  16|    100000|     100|0.98994663|  PASSED  
+          sts_serial|  16|    100000|     100|0.92925223|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.90044701|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.46248158|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.93285651|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.89291881|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.88046327|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.62040673|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.98007235|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.95048032|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.78019518|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.28539233|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.18588791|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.17947094|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.11148307|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.33939380|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.04620613|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.99983314|   WEAK   
+rgb_minimum_distance|   5|     10000|    1100|0.99765656|   WEAK   
+rgb_minimum_distance|   5|     10000|    1200|0.93470420|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.43793294|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.94647548|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.06571911|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.78592139|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.76126990|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.82970137|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.28570727|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.42851728|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.53024569|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.87601460|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.04867236|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.11738690|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.64898192|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.64493123|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.47007712|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.86883990|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.96496572|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.63170559|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.10372391|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.51228021|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.80271064|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.76104849|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.50381960|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.47853096|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.41436075|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.09040258|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.57530915|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.99327254|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.89376099|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.74113432|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.38035803|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.19664273|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.65211304|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.08659366|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.07771201|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.73285927|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.99996862|   WEAK   
+      rgb_lagged_sum|  32|   1000000|     200|0.53857461|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.48268826|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.14566213|  PASSED  
+             dab_dct| 256|     50000|       1|0.72666906|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.13946531|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.91373961|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.95156252|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.69433445|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.90451670|  PASSED  
+# 
+# Test duration: 126.64687635416666 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_1 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_1
new file mode 100644
index 0000000000..67f73d43f8
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_1
@@ -0,0 +1,146 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.JDKRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.26e+06  |2112158018|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.39551175|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.01638871|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.78049209|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.34865144|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.52307003|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.18051558|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.00000000|  FAILED  
+         diehard_dna|   0|   2097152|     100|0.00000000|  FAILED  
+diehard_count_1s_str|   0|    256000|     100|0.61503829|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.50896368|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.91507220|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.01185796|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.46183478|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.73634198|  PASSED  
+        diehard_sums|   0|       100|     100|0.28173715|  PASSED  
+        diehard_runs|   0|    100000|     100|0.16963573|  PASSED  
+        diehard_runs|   0|    100000|     100|0.79914087|  PASSED  
+       diehard_craps|   0|    200000|     100|0.00624281|  PASSED  
+       diehard_craps|   0|    200000|     100|0.00984013|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.77215769|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.38272860|  PASSED  
+         sts_monobit|   1|    100000|     100|0.08921400|  PASSED  
+            sts_runs|   2|    100000|     100|0.89059755|  PASSED  
+          sts_serial|   1|    100000|     100|0.72380148|  PASSED  
+          sts_serial|   2|    100000|     100|0.92622647|  PASSED  
+          sts_serial|   3|    100000|     100|0.01922055|  PASSED  
+          sts_serial|   3|    100000|     100|0.24748347|  PASSED  
+          sts_serial|   4|    100000|     100|0.20938540|  PASSED  
+          sts_serial|   4|    100000|     100|0.97499289|  PASSED  
+          sts_serial|   5|    100000|     100|0.21258357|  PASSED  
+          sts_serial|   5|    100000|     100|0.84160381|  PASSED  
+          sts_serial|   6|    100000|     100|0.14074346|  PASSED  
+          sts_serial|   6|    100000|     100|0.71820628|  PASSED  
+          sts_serial|   7|    100000|     100|0.48148409|  PASSED  
+          sts_serial|   7|    100000|     100|0.91477979|  PASSED  
+          sts_serial|   8|    100000|     100|0.97405700|  PASSED  
+          sts_serial|   8|    100000|     100|0.96765038|  PASSED  
+          sts_serial|   9|    100000|     100|0.85433874|  PASSED  
+          sts_serial|   9|    100000|     100|0.96817705|  PASSED  
+          sts_serial|  10|    100000|     100|0.98018984|  PASSED  
+          sts_serial|  10|    100000|     100|0.81314848|  PASSED  
+          sts_serial|  11|    100000|     100|0.97118546|  PASSED  
+          sts_serial|  11|    100000|     100|0.71497230|  PASSED  
+          sts_serial|  12|    100000|     100|0.74387481|  PASSED  
+          sts_serial|  12|    100000|     100|0.92198078|  PASSED  
+          sts_serial|  13|    100000|     100|0.72773474|  PASSED  
+          sts_serial|  13|    100000|     100|0.35936114|  PASSED  
+          sts_serial|  14|    100000|     100|0.97405149|  PASSED  
+          sts_serial|  14|    100000|     100|0.23387605|  PASSED  
+          sts_serial|  15|    100000|     100|0.85995233|  PASSED  
+          sts_serial|  15|    100000|     100|0.36625336|  PASSED  
+          sts_serial|  16|    100000|     100|0.94326461|  PASSED  
+          sts_serial|  16|    100000|     100|0.62443342|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.20619215|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.72263974|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.60159278|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.49577750|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.27600807|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.91404718|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.48671626|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.83192803|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.55592104|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.43915356|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.20397356|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.09113635|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.27607082|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.00000001|  FAILED  
+rgb_minimum_distance|   4|     10000|    1000|0.00000000|  FAILED  
+rgb_minimum_distance|   5|     10000|    1000|0.00000000|  FAILED  
+    rgb_permutations|   2|    100000|     100|0.98902753|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.64029886|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.03482400|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.17978988|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.40238149|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.35754973|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.94014887|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.00011083|   WEAK   
+      rgb_lagged_sum|   3|   1000000|     200|0.00000003|  FAILED  
+      rgb_lagged_sum|   4|   1000000|     100|0.38873599|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.73749013|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.79623901|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.00000536|   WEAK   
+      rgb_lagged_sum|   7|   1000000|     200|0.00000000|  FAILED  
+      rgb_lagged_sum|   8|   1000000|     100|0.68228881|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.93800352|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.99168634|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.35169487|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.53996422|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.00540083|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.99625042|   WEAK   
+      rgb_lagged_sum|  14|   1000000|     200|0.99609054|   WEAK   
+      rgb_lagged_sum|  14|   1000000|     300|0.77485138|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.00009127|   WEAK   
+      rgb_lagged_sum|  15|   1000000|     200|0.00000000|  FAILED  
+      rgb_lagged_sum|  16|   1000000|     100|0.99889543|   WEAK   
+      rgb_lagged_sum|  16|   1000000|     200|0.81971042|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.03302253|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.81600518|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.27907363|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.54051536|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.97145774|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.54137492|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.09777112|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.30051939|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.55496032|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.75418746|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.05940748|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.16745497|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.15184415|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.87682520|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.31666592|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.95714405|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.89905458|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|1.00000000|  FAILED  
+             dab_dct| 256|     50000|       1|0.19204543|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.00006893|   WEAK   
+        dab_filltree|  32|  15000000|       1|0.00014568|   WEAK   
+        dab_filltree|  32|  15000000|     101|0.00000000|  FAILED  
+        dab_filltree|  32|  15000000|     101|0.00000000|  FAILED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.82737453|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.33898398|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.80932347|  PASSED  
+# 
+# Test duration: 200.7653692116667 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_10 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_10
new file mode 100644
index 0000000000..43d9631a93
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_10
@@ -0,0 +1,172 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.MersenneTwister64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.43e+06  |  65196341|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.77393593|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.17506318|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.95522455|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.53205969|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.23688694|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.73918395|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.31135650|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.44805445|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.01849881|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.67854943|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.83699181|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.82267572|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.91560437|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.02920041|  PASSED  
+        diehard_sums|   0|       100|     100|0.40395437|  PASSED  
+        diehard_runs|   0|    100000|     100|0.81213684|  PASSED  
+        diehard_runs|   0|    100000|     100|0.71356831|  PASSED  
+       diehard_craps|   0|    200000|     100|0.14777897|  PASSED  
+       diehard_craps|   0|    200000|     100|0.23480249|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.28319249|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.46725297|  PASSED  
+         sts_monobit|   1|    100000|     100|0.90843962|  PASSED  
+            sts_runs|   2|    100000|     100|0.99601137|   WEAK   
+            sts_runs|   2|    100000|     200|0.85241048|  PASSED  
+          sts_serial|   1|    100000|     100|0.57903662|  PASSED  
+          sts_serial|   2|    100000|     100|0.92277059|  PASSED  
+          sts_serial|   3|    100000|     100|0.85558613|  PASSED  
+          sts_serial|   3|    100000|     100|0.82689250|  PASSED  
+          sts_serial|   4|    100000|     100|0.21146680|  PASSED  
+          sts_serial|   4|    100000|     100|0.87093728|  PASSED  
+          sts_serial|   5|    100000|     100|0.54737605|  PASSED  
+          sts_serial|   5|    100000|     100|0.89422059|  PASSED  
+          sts_serial|   6|    100000|     100|0.98154808|  PASSED  
+          sts_serial|   6|    100000|     100|0.65700573|  PASSED  
+          sts_serial|   7|    100000|     100|0.43081117|  PASSED  
+          sts_serial|   7|    100000|     100|0.34762085|  PASSED  
+          sts_serial|   8|    100000|     100|0.46617263|  PASSED  
+          sts_serial|   8|    100000|     100|0.64056917|  PASSED  
+          sts_serial|   9|    100000|     100|0.95246172|  PASSED  
+          sts_serial|   9|    100000|     100|0.45537826|  PASSED  
+          sts_serial|  10|    100000|     100|0.49564166|  PASSED  
+          sts_serial|  10|    100000|     100|0.18647826|  PASSED  
+          sts_serial|  11|    100000|     100|0.88334832|  PASSED  
+          sts_serial|  11|    100000|     100|0.99729981|   WEAK   
+          sts_serial|  12|    100000|     100|0.04487347|  PASSED  
+          sts_serial|  12|    100000|     100|0.07061114|  PASSED  
+          sts_serial|  13|    100000|     100|0.54891810|  PASSED  
+          sts_serial|  13|    100000|     100|0.68499137|  PASSED  
+          sts_serial|  14|    100000|     100|0.16635928|  PASSED  
+          sts_serial|  14|    100000|     100|0.71003648|  PASSED  
+          sts_serial|  15|    100000|     100|0.08063234|  PASSED  
+          sts_serial|  15|    100000|     100|0.97293993|  PASSED  
+          sts_serial|  16|    100000|     100|0.40370620|  PASSED  
+          sts_serial|  16|    100000|     100|0.74985908|  PASSED  
+          sts_serial|   1|    100000|     200|0.78709899|  PASSED  
+          sts_serial|   2|    100000|     200|0.62803292|  PASSED  
+          sts_serial|   3|    100000|     200|0.30933408|  PASSED  
+          sts_serial|   3|    100000|     200|0.11787851|  PASSED  
+          sts_serial|   4|    100000|     200|0.21135855|  PASSED  
+          sts_serial|   4|    100000|     200|0.37638290|  PASSED  
+          sts_serial|   5|    100000|     200|0.54237676|  PASSED  
+          sts_serial|   5|    100000|     200|0.71371444|  PASSED  
+          sts_serial|   6|    100000|     200|0.73921505|  PASSED  
+          sts_serial|   6|    100000|     200|0.52316682|  PASSED  
+          sts_serial|   7|    100000|     200|0.75112761|  PASSED  
+          sts_serial|   7|    100000|     200|0.72005591|  PASSED  
+          sts_serial|   8|    100000|     200|0.90205200|  PASSED  
+          sts_serial|   8|    100000|     200|0.54622671|  PASSED  
+          sts_serial|   9|    100000|     200|0.93761558|  PASSED  
+          sts_serial|   9|    100000|     200|0.92367380|  PASSED  
+          sts_serial|  10|    100000|     200|0.54833953|  PASSED  
+          sts_serial|  10|    100000|     200|0.15454070|  PASSED  
+          sts_serial|  11|    100000|     200|0.88714505|  PASSED  
+          sts_serial|  11|    100000|     200|0.79952825|  PASSED  
+          sts_serial|  12|    100000|     200|0.22935506|  PASSED  
+          sts_serial|  12|    100000|     200|0.81065185|  PASSED  
+          sts_serial|  13|    100000|     200|0.91718096|  PASSED  
+          sts_serial|  13|    100000|     200|0.66107482|  PASSED  
+          sts_serial|  14|    100000|     200|0.89397341|  PASSED  
+          sts_serial|  14|    100000|     200|0.78689572|  PASSED  
+          sts_serial|  15|    100000|     200|0.29907934|  PASSED  
+          sts_serial|  15|    100000|     200|0.99258192|  PASSED  
+          sts_serial|  16|    100000|     200|0.88212572|  PASSED  
+          sts_serial|  16|    100000|     200|0.44320798|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.48756819|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.16781758|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.01326397|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.29941916|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.07399842|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.64459014|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.07093541|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.85720209|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.77552102|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.88525749|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.99857719|   WEAK   
+         rgb_bitdist|  11|    100000|     200|0.57762074|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.65870675|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.99641563|   WEAK   
+rgb_minimum_distance|   2|     10000|    1100|0.96129992|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.10831138|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.48424754|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.74105213|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.27138425|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.99123993|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.76223624|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.96472560|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.55325789|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.37582970|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.95796737|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.91519934|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.34774506|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.13192176|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.73793948|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.46275363|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.26947437|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.94336080|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.81907638|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.63532196|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.91816728|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.48472825|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.18849714|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.99543588|   WEAK   
+      rgb_lagged_sum|  15|   1000000|     200|0.98140516|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.72146672|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.25663529|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.49601297|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.16977272|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.80457283|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.18842898|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.48211543|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.08829944|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.20373754|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.60300923|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.35125415|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.54331550|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.32180759|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.86980491|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.18116049|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.14811981|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.57453124|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.90603371|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.04174385|  PASSED  
+             dab_dct| 256|     50000|       1|0.69965085|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.51316451|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.70016839|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.74454854|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.07070269|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.30658733|  PASSED  
+# 
+# Test duration: 149.76614831083333 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_11 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_11
new file mode 100644
index 0000000000..74e38401e5
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_11
@@ -0,0 +1,259 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.SplitMix64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  1.21e+07  | 819939227|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.65130319|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.42848657|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.99197105|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.93624281|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.67567225|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.18053904|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.93998513|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.85381608|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.07879285|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.51257809|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.82824986|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.86277034|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.96747895|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.04392786|  PASSED  
+        diehard_sums|   0|       100|     100|0.08986396|  PASSED  
+        diehard_runs|   0|    100000|     100|0.65830365|  PASSED  
+        diehard_runs|   0|    100000|     100|0.95113109|  PASSED  
+       diehard_craps|   0|    200000|     100|0.73510806|  PASSED  
+       diehard_craps|   0|    200000|     100|0.74377626|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.19429933|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.21689040|  PASSED  
+         sts_monobit|   1|    100000|     100|0.66954403|  PASSED  
+            sts_runs|   2|    100000|     100|0.39085737|  PASSED  
+          sts_serial|   1|    100000|     100|0.38379903|  PASSED  
+          sts_serial|   2|    100000|     100|0.26568121|  PASSED  
+          sts_serial|   3|    100000|     100|0.50785557|  PASSED  
+          sts_serial|   3|    100000|     100|0.58023393|  PASSED  
+          sts_serial|   4|    100000|     100|0.54233628|  PASSED  
+          sts_serial|   4|    100000|     100|0.84921829|  PASSED  
+          sts_serial|   5|    100000|     100|0.95073679|  PASSED  
+          sts_serial|   5|    100000|     100|0.88545369|  PASSED  
+          sts_serial|   6|    100000|     100|0.95073539|  PASSED  
+          sts_serial|   6|    100000|     100|0.14384287|  PASSED  
+          sts_serial|   7|    100000|     100|0.42463259|  PASSED  
+          sts_serial|   7|    100000|     100|0.69419843|  PASSED  
+          sts_serial|   8|    100000|     100|0.24220688|  PASSED  
+          sts_serial|   8|    100000|     100|0.75347138|  PASSED  
+          sts_serial|   9|    100000|     100|0.12717188|  PASSED  
+          sts_serial|   9|    100000|     100|0.68064930|  PASSED  
+          sts_serial|  10|    100000|     100|0.02148683|  PASSED  
+          sts_serial|  10|    100000|     100|0.10301291|  PASSED  
+          sts_serial|  11|    100000|     100|0.30103069|  PASSED  
+          sts_serial|  11|    100000|     100|0.41385219|  PASSED  
+          sts_serial|  12|    100000|     100|0.13643935|  PASSED  
+          sts_serial|  12|    100000|     100|0.83847274|  PASSED  
+          sts_serial|  13|    100000|     100|0.92166105|  PASSED  
+          sts_serial|  13|    100000|     100|0.99950128|   WEAK   
+          sts_serial|  14|    100000|     100|0.12574218|  PASSED  
+          sts_serial|  14|    100000|     100|0.29623219|  PASSED  
+          sts_serial|  15|    100000|     100|0.96613665|  PASSED  
+          sts_serial|  15|    100000|     100|0.64378973|  PASSED  
+          sts_serial|  16|    100000|     100|0.71854774|  PASSED  
+          sts_serial|  16|    100000|     100|0.44482901|  PASSED  
+          sts_serial|   1|    100000|     200|0.67504828|  PASSED  
+          sts_serial|   2|    100000|     200|0.50964247|  PASSED  
+          sts_serial|   3|    100000|     200|0.66875166|  PASSED  
+          sts_serial|   3|    100000|     200|0.84146775|  PASSED  
+          sts_serial|   4|    100000|     200|0.49968330|  PASSED  
+          sts_serial|   4|    100000|     200|0.25629735|  PASSED  
+          sts_serial|   5|    100000|     200|0.41389110|  PASSED  
+          sts_serial|   5|    100000|     200|0.94237091|  PASSED  
+          sts_serial|   6|    100000|     200|0.68311036|  PASSED  
+          sts_serial|   6|    100000|     200|0.19749474|  PASSED  
+          sts_serial|   7|    100000|     200|0.79210326|  PASSED  
+          sts_serial|   7|    100000|     200|0.97196134|  PASSED  
+          sts_serial|   8|    100000|     200|0.92286499|  PASSED  
+          sts_serial|   8|    100000|     200|0.88672932|  PASSED  
+          sts_serial|   9|    100000|     200|0.56033577|  PASSED  
+          sts_serial|   9|    100000|     200|0.75729568|  PASSED  
+          sts_serial|  10|    100000|     200|0.28711716|  PASSED  
+          sts_serial|  10|    100000|     200|0.17368631|  PASSED  
+          sts_serial|  11|    100000|     200|0.96770656|  PASSED  
+          sts_serial|  11|    100000|     200|0.34341952|  PASSED  
+          sts_serial|  12|    100000|     200|0.99687982|   WEAK   
+          sts_serial|  12|    100000|     200|0.67554006|  PASSED  
+          sts_serial|  13|    100000|     200|0.90892531|  PASSED  
+          sts_serial|  13|    100000|     200|0.98458137|  PASSED  
+          sts_serial|  14|    100000|     200|0.94620601|  PASSED  
+          sts_serial|  14|    100000|     200|0.80422641|  PASSED  
+          sts_serial|  15|    100000|     200|0.37569225|  PASSED  
+          sts_serial|  15|    100000|     200|0.54794692|  PASSED  
+          sts_serial|  16|    100000|     200|0.24098810|  PASSED  
+          sts_serial|  16|    100000|     200|0.30436068|  PASSED  
+          sts_serial|   1|    100000|     300|0.97204404|  PASSED  
+          sts_serial|   2|    100000|     300|0.88073743|  PASSED  
+          sts_serial|   3|    100000|     300|0.80544082|  PASSED  
+          sts_serial|   3|    100000|     300|0.85649486|  PASSED  
+          sts_serial|   4|    100000|     300|0.56286566|  PASSED  
+          sts_serial|   4|    100000|     300|0.51864908|  PASSED  
+          sts_serial|   5|    100000|     300|0.25653791|  PASSED  
+          sts_serial|   5|    100000|     300|0.81389220|  PASSED  
+          sts_serial|   6|    100000|     300|0.99633932|   WEAK   
+          sts_serial|   6|    100000|     300|0.16601696|  PASSED  
+          sts_serial|   7|    100000|     300|0.61561137|  PASSED  
+          sts_serial|   7|    100000|     300|0.97066641|  PASSED  
+          sts_serial|   8|    100000|     300|0.77309095|  PASSED  
+          sts_serial|   8|    100000|     300|0.65502534|  PASSED  
+          sts_serial|   9|    100000|     300|0.93053708|  PASSED  
+          sts_serial|   9|    100000|     300|0.62463182|  PASSED  
+          sts_serial|  10|    100000|     300|0.54734419|  PASSED  
+          sts_serial|  10|    100000|     300|0.50740403|  PASSED  
+          sts_serial|  11|    100000|     300|0.87249357|  PASSED  
+          sts_serial|  11|    100000|     300|0.58996589|  PASSED  
+          sts_serial|  12|    100000|     300|0.96602452|  PASSED  
+          sts_serial|  12|    100000|     300|0.72674687|  PASSED  
+          sts_serial|  13|    100000|     300|0.54751109|  PASSED  
+          sts_serial|  13|    100000|     300|0.93759680|  PASSED  
+          sts_serial|  14|    100000|     300|0.89220444|  PASSED  
+          sts_serial|  14|    100000|     300|0.96051387|  PASSED  
+          sts_serial|  15|    100000|     300|0.68690283|  PASSED  
+          sts_serial|  15|    100000|     300|0.76934858|  PASSED  
+          sts_serial|  16|    100000|     300|0.45354506|  PASSED  
+          sts_serial|  16|    100000|     300|0.97960069|  PASSED  
+          sts_serial|   1|    100000|     400|0.94091702|  PASSED  
+          sts_serial|   2|    100000|     400|0.27638744|  PASSED  
+          sts_serial|   3|    100000|     400|0.92986482|  PASSED  
+          sts_serial|   3|    100000|     400|0.80878797|  PASSED  
+          sts_serial|   4|    100000|     400|0.68588392|  PASSED  
+          sts_serial|   4|    100000|     400|0.48513545|  PASSED  
+          sts_serial|   5|    100000|     400|0.73714455|  PASSED  
+          sts_serial|   5|    100000|     400|0.47861256|  PASSED  
+          sts_serial|   6|    100000|     400|0.91481150|  PASSED  
+          sts_serial|   6|    100000|     400|0.11535560|  PASSED  
+          sts_serial|   7|    100000|     400|0.86349621|  PASSED  
+          sts_serial|   7|    100000|     400|0.92029293|  PASSED  
+          sts_serial|   8|    100000|     400|0.86653286|  PASSED  
+          sts_serial|   8|    100000|     400|0.71278050|  PASSED  
+          sts_serial|   9|    100000|     400|0.71347996|  PASSED  
+          sts_serial|   9|    100000|     400|0.44657478|  PASSED  
+          sts_serial|  10|    100000|     400|0.37015976|  PASSED  
+          sts_serial|  10|    100000|     400|0.76038237|  PASSED  
+          sts_serial|  11|    100000|     400|0.99684176|   WEAK   
+          sts_serial|  11|    100000|     400|0.81430850|  PASSED  
+          sts_serial|  12|    100000|     400|0.90328065|  PASSED  
+          sts_serial|  12|    100000|     400|0.80247381|  PASSED  
+          sts_serial|  13|    100000|     400|0.59656608|  PASSED  
+          sts_serial|  13|    100000|     400|0.90689206|  PASSED  
+          sts_serial|  14|    100000|     400|0.84603980|  PASSED  
+          sts_serial|  14|    100000|     400|0.90430810|  PASSED  
+          sts_serial|  15|    100000|     400|0.39247079|  PASSED  
+          sts_serial|  15|    100000|     400|0.41296654|  PASSED  
+          sts_serial|  16|    100000|     400|0.18169630|  PASSED  
+          sts_serial|  16|    100000|     400|0.41683888|  PASSED  
+          sts_serial|   1|    100000|     500|0.69320651|  PASSED  
+          sts_serial|   2|    100000|     500|0.10917949|  PASSED  
+          sts_serial|   3|    100000|     500|0.56299477|  PASSED  
+          sts_serial|   3|    100000|     500|0.31094316|  PASSED  
+          sts_serial|   4|    100000|     500|0.33317132|  PASSED  
+          sts_serial|   4|    100000|     500|0.65841777|  PASSED  
+          sts_serial|   5|    100000|     500|0.30829427|  PASSED  
+          sts_serial|   5|    100000|     500|0.60157652|  PASSED  
+          sts_serial|   6|    100000|     500|0.88025153|  PASSED  
+          sts_serial|   6|    100000|     500|0.04660464|  PASSED  
+          sts_serial|   7|    100000|     500|0.96944836|  PASSED  
+          sts_serial|   7|    100000|     500|0.97102302|  PASSED  
+          sts_serial|   8|    100000|     500|0.89481786|  PASSED  
+          sts_serial|   8|    100000|     500|0.78816533|  PASSED  
+          sts_serial|   9|    100000|     500|0.33904423|  PASSED  
+          sts_serial|   9|    100000|     500|0.32592935|  PASSED  
+          sts_serial|  10|    100000|     500|0.28013100|  PASSED  
+          sts_serial|  10|    100000|     500|0.76769840|  PASSED  
+          sts_serial|  11|    100000|     500|0.99066696|  PASSED  
+          sts_serial|  11|    100000|     500|0.81779354|  PASSED  
+          sts_serial|  12|    100000|     500|0.87172641|  PASSED  
+          sts_serial|  12|    100000|     500|0.46324166|  PASSED  
+          sts_serial|  13|    100000|     500|0.98324252|  PASSED  
+          sts_serial|  13|    100000|     500|0.99472778|  PASSED  
+          sts_serial|  14|    100000|     500|0.53993180|  PASSED  
+          sts_serial|  14|    100000|     500|0.46009474|  PASSED  
+          sts_serial|  15|    100000|     500|0.97975293|  PASSED  
+          sts_serial|  15|    100000|     500|0.87764916|  PASSED  
+          sts_serial|  16|    100000|     500|0.79198726|  PASSED  
+          sts_serial|  16|    100000|     500|0.21613635|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.68120105|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.90639560|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.94656851|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.12251952|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.61456409|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.52350159|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.87956511|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.89413760|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.28575731|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.49093734|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.26660227|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.96468479|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.33405128|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.36253717|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.54979726|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.12334255|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.97168259|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.83233143|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.71352165|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.59973194|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.49917365|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.70611235|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.59359761|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.57186179|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.30795009|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.53465999|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.31533107|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.94058815|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.90566697|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.64301348|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.32913816|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.03880868|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.95173167|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.27721428|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.81328176|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.61209416|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.33620210|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.95627576|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.02142494|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.26605904|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.97753126|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.01423671|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.14396401|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.47421297|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.51423760|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.81571899|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.99702972|   WEAK   
+      rgb_lagged_sum|  26|   1000000|     200|0.52849528|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.95999913|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.90199933|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.39451836|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.39232515|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.84792631|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.88075632|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.26412166|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.97769960|  PASSED  
+             dab_dct| 256|     50000|       1|0.24267823|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.88006729|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.95082422|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.12386267|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.70985509|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.30670303|  PASSED  
+# 
+# Test duration: 135.24708653241666 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_12 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_12
new file mode 100644
index 0000000000..e4973cd36d
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_12
@@ -0,0 +1,168 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.XorShift1024Star
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.67e+06  |4049234644|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.43986711|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.86075341|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.62133164|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.40501983|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.21450471|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.14529679|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.42952368|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.62661288|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.38079796|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.91119869|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.99280463|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.26539580|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.84202820|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.95952556|  PASSED  
+        diehard_sums|   0|       100|     100|0.06744412|  PASSED  
+        diehard_runs|   0|    100000|     100|0.69092881|  PASSED  
+        diehard_runs|   0|    100000|     100|0.01348188|  PASSED  
+       diehard_craps|   0|    200000|     100|0.65927335|  PASSED  
+       diehard_craps|   0|    200000|     100|0.16087370|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.83170722|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.83595386|  PASSED  
+         sts_monobit|   1|    100000|     100|0.09001001|  PASSED  
+            sts_runs|   2|    100000|     100|0.15108464|  PASSED  
+          sts_serial|   1|    100000|     100|0.09519062|  PASSED  
+          sts_serial|   2|    100000|     100|0.99529374|   WEAK   
+          sts_serial|   3|    100000|     100|0.19986415|  PASSED  
+          sts_serial|   3|    100000|     100|0.52295559|  PASSED  
+          sts_serial|   4|    100000|     100|0.98417753|  PASSED  
+          sts_serial|   4|    100000|     100|0.67069285|  PASSED  
+          sts_serial|   5|    100000|     100|0.56911975|  PASSED  
+          sts_serial|   5|    100000|     100|0.90964413|  PASSED  
+          sts_serial|   6|    100000|     100|0.95518599|  PASSED  
+          sts_serial|   6|    100000|     100|0.56937053|  PASSED  
+          sts_serial|   7|    100000|     100|0.47793310|  PASSED  
+          sts_serial|   7|    100000|     100|0.21857744|  PASSED  
+          sts_serial|   8|    100000|     100|0.28709825|  PASSED  
+          sts_serial|   8|    100000|     100|0.38737847|  PASSED  
+          sts_serial|   9|    100000|     100|0.94874889|  PASSED  
+          sts_serial|   9|    100000|     100|0.90658668|  PASSED  
+          sts_serial|  10|    100000|     100|0.83220602|  PASSED  
+          sts_serial|  10|    100000|     100|0.34854881|  PASSED  
+          sts_serial|  11|    100000|     100|0.94357460|  PASSED  
+          sts_serial|  11|    100000|     100|0.74871348|  PASSED  
+          sts_serial|  12|    100000|     100|0.62709624|  PASSED  
+          sts_serial|  12|    100000|     100|0.76152945|  PASSED  
+          sts_serial|  13|    100000|     100|0.92395096|  PASSED  
+          sts_serial|  13|    100000|     100|0.78993724|  PASSED  
+          sts_serial|  14|    100000|     100|0.37069384|  PASSED  
+          sts_serial|  14|    100000|     100|0.27746731|  PASSED  
+          sts_serial|  15|    100000|     100|0.17526422|  PASSED  
+          sts_serial|  15|    100000|     100|0.21895898|  PASSED  
+          sts_serial|  16|    100000|     100|0.05918295|  PASSED  
+          sts_serial|  16|    100000|     100|0.07329479|  PASSED  
+          sts_serial|   1|    100000|     200|0.74068880|  PASSED  
+          sts_serial|   2|    100000|     200|0.93915184|  PASSED  
+          sts_serial|   3|    100000|     200|0.06170017|  PASSED  
+          sts_serial|   3|    100000|     200|0.12790917|  PASSED  
+          sts_serial|   4|    100000|     200|0.20067613|  PASSED  
+          sts_serial|   4|    100000|     200|0.50188373|  PASSED  
+          sts_serial|   5|    100000|     200|0.32524639|  PASSED  
+          sts_serial|   5|    100000|     200|0.33585786|  PASSED  
+          sts_serial|   6|    100000|     200|0.25966230|  PASSED  
+          sts_serial|   6|    100000|     200|0.82193807|  PASSED  
+          sts_serial|   7|    100000|     200|0.54395252|  PASSED  
+          sts_serial|   7|    100000|     200|0.18979469|  PASSED  
+          sts_serial|   8|    100000|     200|0.94930808|  PASSED  
+          sts_serial|   8|    100000|     200|0.67127739|  PASSED  
+          sts_serial|   9|    100000|     200|0.60733327|  PASSED  
+          sts_serial|   9|    100000|     200|0.96994624|  PASSED  
+          sts_serial|  10|    100000|     200|0.62606979|  PASSED  
+          sts_serial|  10|    100000|     200|0.40033589|  PASSED  
+          sts_serial|  11|    100000|     200|0.80899190|  PASSED  
+          sts_serial|  11|    100000|     200|0.89986722|  PASSED  
+          sts_serial|  12|    100000|     200|0.39663416|  PASSED  
+          sts_serial|  12|    100000|     200|0.06467541|  PASSED  
+          sts_serial|  13|    100000|     200|0.21524272|  PASSED  
+          sts_serial|  13|    100000|     200|0.82559608|  PASSED  
+          sts_serial|  14|    100000|     200|0.77172495|  PASSED  
+          sts_serial|  14|    100000|     200|0.14008237|  PASSED  
+          sts_serial|  15|    100000|     200|0.98463956|  PASSED  
+          sts_serial|  15|    100000|     200|0.49808309|  PASSED  
+          sts_serial|  16|    100000|     200|0.55248697|  PASSED  
+          sts_serial|  16|    100000|     200|0.58672133|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.92225732|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.36445678|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.96225262|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.76926547|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.59270749|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.27159563|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.77094872|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.48930166|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.70790945|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.98539462|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.96861063|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.89141142|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.96790115|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.80411688|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.52446188|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.47978117|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.40777196|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.95076980|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.08936872|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.26510667|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.74705832|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.59459494|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.97178777|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.17394485|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.80415340|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.96850998|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.03325897|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.67259803|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.43739569|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.22073208|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.26353974|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.39073326|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.64778518|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.36232598|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.82578596|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.15625029|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.07173397|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.30506458|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.79791891|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.14586711|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.48057611|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.32640210|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.61535302|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.72472744|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.71146280|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.90294638|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.13115386|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.20782030|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.17832007|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.46665024|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.62685486|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.36271734|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.24656354|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.29974209|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.66226186|  PASSED  
+             dab_dct| 256|     50000|       1|0.01688589|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.30797985|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.09215619|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.71199761|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.63044442|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.59958440|  PASSED  
+# 
+# Test duration: 142.62414436471667 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_13 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_13
new file mode 100644
index 0000000000..0e64bc553d
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_13
@@ -0,0 +1,261 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.TwoCmres (Cmres: [0xedce446814d3b3d9L, 33, 330658535] + Cmres: [0xc5b3cf786c806df7L, 33, 331932042])
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.57e+06  |4137854788|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.41377932|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.43068389|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.09864020|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.33203502|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.46716732|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.52705769|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.61769679|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.09792456|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.64272247|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.22613773|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.98727196|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.63824725|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.32779128|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.40226180|  PASSED  
+        diehard_sums|   0|       100|     100|0.00712395|  PASSED  
+        diehard_runs|   0|    100000|     100|0.79789724|  PASSED  
+        diehard_runs|   0|    100000|     100|0.05642734|  PASSED  
+       diehard_craps|   0|    200000|     100|0.95181698|  PASSED  
+       diehard_craps|   0|    200000|     100|0.28904414|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.98520547|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.37339961|  PASSED  
+         sts_monobit|   1|    100000|     100|0.66302572|  PASSED  
+            sts_runs|   2|    100000|     100|0.97092640|  PASSED  
+          sts_serial|   1|    100000|     100|0.16638697|  PASSED  
+          sts_serial|   2|    100000|     100|0.36061922|  PASSED  
+          sts_serial|   3|    100000|     100|0.06431213|  PASSED  
+          sts_serial|   3|    100000|     100|0.26283736|  PASSED  
+          sts_serial|   4|    100000|     100|0.53979796|  PASSED  
+          sts_serial|   4|    100000|     100|0.86011045|  PASSED  
+          sts_serial|   5|    100000|     100|0.67844160|  PASSED  
+          sts_serial|   5|    100000|     100|0.73843150|  PASSED  
+          sts_serial|   6|    100000|     100|0.82803712|  PASSED  
+          sts_serial|   6|    100000|     100|0.70984129|  PASSED  
+          sts_serial|   7|    100000|     100|0.21575629|  PASSED  
+          sts_serial|   7|    100000|     100|0.22745102|  PASSED  
+          sts_serial|   8|    100000|     100|0.13213154|  PASSED  
+          sts_serial|   8|    100000|     100|0.30575979|  PASSED  
+          sts_serial|   9|    100000|     100|0.34686823|  PASSED  
+          sts_serial|   9|    100000|     100|0.36243200|  PASSED  
+          sts_serial|  10|    100000|     100|0.70363959|  PASSED  
+          sts_serial|  10|    100000|     100|0.84298185|  PASSED  
+          sts_serial|  11|    100000|     100|0.98918819|  PASSED  
+          sts_serial|  11|    100000|     100|0.95692442|  PASSED  
+          sts_serial|  12|    100000|     100|0.80698265|  PASSED  
+          sts_serial|  12|    100000|     100|0.68704909|  PASSED  
+          sts_serial|  13|    100000|     100|0.61600331|  PASSED  
+          sts_serial|  13|    100000|     100|0.25682490|  PASSED  
+          sts_serial|  14|    100000|     100|0.71221014|  PASSED  
+          sts_serial|  14|    100000|     100|0.99934597|   WEAK   
+          sts_serial|  15|    100000|     100|0.98061769|  PASSED  
+          sts_serial|  15|    100000|     100|0.55623022|  PASSED  
+          sts_serial|  16|    100000|     100|0.74324230|  PASSED  
+          sts_serial|  16|    100000|     100|0.19663505|  PASSED  
+          sts_serial|   1|    100000|     200|0.01030154|  PASSED  
+          sts_serial|   2|    100000|     200|0.28075457|  PASSED  
+          sts_serial|   3|    100000|     200|0.00620861|  PASSED  
+          sts_serial|   3|    100000|     200|0.02592878|  PASSED  
+          sts_serial|   4|    100000|     200|0.16909100|  PASSED  
+          sts_serial|   4|    100000|     200|0.82086476|  PASSED  
+          sts_serial|   5|    100000|     200|0.20192706|  PASSED  
+          sts_serial|   5|    100000|     200|0.79643142|  PASSED  
+          sts_serial|   6|    100000|     200|0.57211541|  PASSED  
+          sts_serial|   6|    100000|     200|0.53233417|  PASSED  
+          sts_serial|   7|    100000|     200|0.67540321|  PASSED  
+          sts_serial|   7|    100000|     200|0.91595629|  PASSED  
+          sts_serial|   8|    100000|     200|0.84776370|  PASSED  
+          sts_serial|   8|    100000|     200|0.48084876|  PASSED  
+          sts_serial|   9|    100000|     200|0.71105599|  PASSED  
+          sts_serial|   9|    100000|     200|0.78257380|  PASSED  
+          sts_serial|  10|    100000|     200|0.33994953|  PASSED  
+          sts_serial|  10|    100000|     200|0.16533311|  PASSED  
+          sts_serial|  11|    100000|     200|0.17915407|  PASSED  
+          sts_serial|  11|    100000|     200|0.97757438|  PASSED  
+          sts_serial|  12|    100000|     200|0.15767885|  PASSED  
+          sts_serial|  12|    100000|     200|0.70660237|  PASSED  
+          sts_serial|  13|    100000|     200|0.04894857|  PASSED  
+          sts_serial|  13|    100000|     200|0.26161827|  PASSED  
+          sts_serial|  14|    100000|     200|0.03320222|  PASSED  
+          sts_serial|  14|    100000|     200|0.33848541|  PASSED  
+          sts_serial|  15|    100000|     200|0.00478397|   WEAK   
+          sts_serial|  15|    100000|     200|0.89452421|  PASSED  
+          sts_serial|  16|    100000|     200|0.01756813|  PASSED  
+          sts_serial|  16|    100000|     200|0.19931613|  PASSED  
+          sts_serial|   1|    100000|     300|0.00205544|   WEAK   
+          sts_serial|   2|    100000|     300|0.61937202|  PASSED  
+          sts_serial|   3|    100000|     300|0.03071851|  PASSED  
+          sts_serial|   3|    100000|     300|0.03032828|  PASSED  
+          sts_serial|   4|    100000|     300|0.08984246|  PASSED  
+          sts_serial|   4|    100000|     300|0.69920341|  PASSED  
+          sts_serial|   5|    100000|     300|0.32288784|  PASSED  
+          sts_serial|   5|    100000|     300|0.41056062|  PASSED  
+          sts_serial|   6|    100000|     300|0.44916924|  PASSED  
+          sts_serial|   6|    100000|     300|0.16270803|  PASSED  
+          sts_serial|   7|    100000|     300|0.78587871|  PASSED  
+          sts_serial|   7|    100000|     300|0.73347325|  PASSED  
+          sts_serial|   8|    100000|     300|0.98347896|  PASSED  
+          sts_serial|   8|    100000|     300|0.36027085|  PASSED  
+          sts_serial|   9|    100000|     300|0.58191302|  PASSED  
+          sts_serial|   9|    100000|     300|0.96187028|  PASSED  
+          sts_serial|  10|    100000|     300|0.78912775|  PASSED  
+          sts_serial|  10|    100000|     300|0.33754471|  PASSED  
+          sts_serial|  11|    100000|     300|0.07653014|  PASSED  
+          sts_serial|  11|    100000|     300|0.43036478|  PASSED  
+          sts_serial|  12|    100000|     300|0.10557524|  PASSED  
+          sts_serial|  12|    100000|     300|0.63105000|  PASSED  
+          sts_serial|  13|    100000|     300|0.14206597|  PASSED  
+          sts_serial|  13|    100000|     300|0.54619202|  PASSED  
+          sts_serial|  14|    100000|     300|0.09345313|  PASSED  
+          sts_serial|  14|    100000|     300|0.52252062|  PASSED  
+          sts_serial|  15|    100000|     300|0.01806564|  PASSED  
+          sts_serial|  15|    100000|     300|0.97807773|  PASSED  
+          sts_serial|  16|    100000|     300|0.03263752|  PASSED  
+          sts_serial|  16|    100000|     300|0.07051090|  PASSED  
+          sts_serial|   1|    100000|     400|0.01502923|  PASSED  
+          sts_serial|   2|    100000|     400|0.13228516|  PASSED  
+          sts_serial|   3|    100000|     400|0.00360645|   WEAK   
+          sts_serial|   3|    100000|     400|0.00984887|  PASSED  
+          sts_serial|   4|    100000|     400|0.02166662|  PASSED  
+          sts_serial|   4|    100000|     400|0.53249206|  PASSED  
+          sts_serial|   5|    100000|     400|0.13757613|  PASSED  
+          sts_serial|   5|    100000|     400|0.22631392|  PASSED  
+          sts_serial|   6|    100000|     400|0.91482934|  PASSED  
+          sts_serial|   6|    100000|     400|0.09023090|  PASSED  
+          sts_serial|   7|    100000|     400|0.64054033|  PASSED  
+          sts_serial|   7|    100000|     400|0.44242911|  PASSED  
+          sts_serial|   8|    100000|     400|0.86399072|  PASSED  
+          sts_serial|   8|    100000|     400|0.14521041|  PASSED  
+          sts_serial|   9|    100000|     400|0.79289110|  PASSED  
+          sts_serial|   9|    100000|     400|0.66282885|  PASSED  
+          sts_serial|  10|    100000|     400|0.88414860|  PASSED  
+          sts_serial|  10|    100000|     400|0.58068627|  PASSED  
+          sts_serial|  11|    100000|     400|0.91275543|  PASSED  
+          sts_serial|  11|    100000|     400|0.70471939|  PASSED  
+          sts_serial|  12|    100000|     400|0.22167518|  PASSED  
+          sts_serial|  12|    100000|     400|0.68048707|  PASSED  
+          sts_serial|  13|    100000|     400|0.33805718|  PASSED  
+          sts_serial|  13|    100000|     400|0.70857165|  PASSED  
+          sts_serial|  14|    100000|     400|0.35577976|  PASSED  
+          sts_serial|  14|    100000|     400|0.96667107|  PASSED  
+          sts_serial|  15|    100000|     400|0.21076038|  PASSED  
+          sts_serial|  15|    100000|     400|0.98253218|  PASSED  
+          sts_serial|  16|    100000|     400|0.06071902|  PASSED  
+          sts_serial|  16|    100000|     400|0.08412877|  PASSED  
+          sts_serial|   1|    100000|     500|0.13834123|  PASSED  
+          sts_serial|   2|    100000|     500|0.25024803|  PASSED  
+          sts_serial|   3|    100000|     500|0.01785919|  PASSED  
+          sts_serial|   3|    100000|     500|0.03648554|  PASSED  
+          sts_serial|   4|    100000|     500|0.05924361|  PASSED  
+          sts_serial|   4|    100000|     500|0.38646230|  PASSED  
+          sts_serial|   5|    100000|     500|0.15596968|  PASSED  
+          sts_serial|   5|    100000|     500|0.50872450|  PASSED  
+          sts_serial|   6|    100000|     500|0.88291851|  PASSED  
+          sts_serial|   6|    100000|     500|0.02081203|  PASSED  
+          sts_serial|   7|    100000|     500|0.65824396|  PASSED  
+          sts_serial|   7|    100000|     500|0.55644469|  PASSED  
+          sts_serial|   8|    100000|     500|0.92441847|  PASSED  
+          sts_serial|   8|    100000|     500|0.12875775|  PASSED  
+          sts_serial|   9|    100000|     500|0.82424125|  PASSED  
+          sts_serial|   9|    100000|     500|0.64618913|  PASSED  
+          sts_serial|  10|    100000|     500|0.85661010|  PASSED  
+          sts_serial|  10|    100000|     500|0.14667206|  PASSED  
+          sts_serial|  11|    100000|     500|0.92863616|  PASSED  
+          sts_serial|  11|    100000|     500|0.95895694|  PASSED  
+          sts_serial|  12|    100000|     500|0.28474931|  PASSED  
+          sts_serial|  12|    100000|     500|0.54895548|  PASSED  
+          sts_serial|  13|    100000|     500|0.25982749|  PASSED  
+          sts_serial|  13|    100000|     500|0.46806655|  PASSED  
+          sts_serial|  14|    100000|     500|0.49922708|  PASSED  
+          sts_serial|  14|    100000|     500|0.81653416|  PASSED  
+          sts_serial|  15|    100000|     500|0.35050729|  PASSED  
+          sts_serial|  15|    100000|     500|0.96227025|  PASSED  
+          sts_serial|  16|    100000|     500|0.26401565|  PASSED  
+          sts_serial|  16|    100000|     500|0.37069644|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.92425608|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.83940461|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.84689557|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.33128106|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.12842913|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.21486534|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.90751856|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.16633581|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.31056439|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.99965960|   WEAK   
+         rgb_bitdist|  10|    100000|     200|0.91538601|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.24070042|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.49027792|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.13794213|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.72970342|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.32452086|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.46581590|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.38494734|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.55243592|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.62705490|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.78412476|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.95652731|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.97125545|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.28441088|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.10571028|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.18579692|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.77950641|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.59250046|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.02505981|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.47302995|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.98595871|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.98853717|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.61490023|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.50160482|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.12027240|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.96754010|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.21334535|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.88783046|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.99955140|   WEAK   
+      rgb_lagged_sum|  17|   1000000|     200|0.99971790|   WEAK   
+      rgb_lagged_sum|  17|   1000000|     300|0.40146641|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.41667502|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.08874978|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.90107966|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.34200440|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.37963530|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.97024129|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.27937268|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.23074718|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.77447675|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.93043715|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.69797099|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.49932176|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.15535844|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.88161991|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.79593086|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.19101819|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.42748649|  PASSED  
+             dab_dct| 256|     50000|       1|0.87136468|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.56742800|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.82856739|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.26510823|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.50524832|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.67910494|  PASSED  
+# 
+# Test duration: 150.40452241786667 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_2 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_2
new file mode 100644
index 0000000000..029c4e07e8
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_2
@@ -0,0 +1,140 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.MersenneTwister
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  1.15e+07  |1277800222|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.83018903|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.83633437|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.50851126|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.14990437|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.92071822|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.81766238|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.73439841|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.30440003|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.78889002|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.65339742|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.00043440|   WEAK   
+ diehard_parking_lot|   0|     12000|     200|0.04327588|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.48631739|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.95061316|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.14096759|  PASSED  
+        diehard_sums|   0|       100|     100|0.46750328|  PASSED  
+        diehard_runs|   0|    100000|     100|0.95663857|  PASSED  
+        diehard_runs|   0|    100000|     100|0.73895911|  PASSED  
+       diehard_craps|   0|    200000|     100|0.37410375|  PASSED  
+       diehard_craps|   0|    200000|     100|0.52228801|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.68805022|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.54566978|  PASSED  
+         sts_monobit|   1|    100000|     100|0.71086339|  PASSED  
+            sts_runs|   2|    100000|     100|0.27451357|  PASSED  
+          sts_serial|   1|    100000|     100|0.28377179|  PASSED  
+          sts_serial|   2|    100000|     100|0.36220838|  PASSED  
+          sts_serial|   3|    100000|     100|0.41180880|  PASSED  
+          sts_serial|   3|    100000|     100|0.75252825|  PASSED  
+          sts_serial|   4|    100000|     100|0.41476323|  PASSED  
+          sts_serial|   4|    100000|     100|0.85743608|  PASSED  
+          sts_serial|   5|    100000|     100|0.64963035|  PASSED  
+          sts_serial|   5|    100000|     100|0.82901243|  PASSED  
+          sts_serial|   6|    100000|     100|0.43147096|  PASSED  
+          sts_serial|   6|    100000|     100|0.13121044|  PASSED  
+          sts_serial|   7|    100000|     100|0.98669558|  PASSED  
+          sts_serial|   7|    100000|     100|0.92833177|  PASSED  
+          sts_serial|   8|    100000|     100|0.45968500|  PASSED  
+          sts_serial|   8|    100000|     100|0.94041262|  PASSED  
+          sts_serial|   9|    100000|     100|0.99274909|  PASSED  
+          sts_serial|   9|    100000|     100|0.71353226|  PASSED  
+          sts_serial|  10|    100000|     100|0.35758926|  PASSED  
+          sts_serial|  10|    100000|     100|0.62132348|  PASSED  
+          sts_serial|  11|    100000|     100|0.95598741|  PASSED  
+          sts_serial|  11|    100000|     100|0.35974491|  PASSED  
+          sts_serial|  12|    100000|     100|0.75156429|  PASSED  
+          sts_serial|  12|    100000|     100|0.16837932|  PASSED  
+          sts_serial|  13|    100000|     100|0.98373346|  PASSED  
+          sts_serial|  13|    100000|     100|0.94512769|  PASSED  
+          sts_serial|  14|    100000|     100|0.61157975|  PASSED  
+          sts_serial|  14|    100000|     100|0.15294120|  PASSED  
+          sts_serial|  15|    100000|     100|0.69383273|  PASSED  
+          sts_serial|  15|    100000|     100|0.49247879|  PASSED  
+          sts_serial|  16|    100000|     100|0.23449799|  PASSED  
+          sts_serial|  16|    100000|     100|0.09706383|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.76006007|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.97512548|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.99523447|   WEAK   
+         rgb_bitdist|   3|    100000|     200|0.12743870|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.22950891|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.27343882|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.83359583|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.97493515|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.72344973|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.18869202|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.64357304|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.23423637|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.46106820|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.78010679|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.69567338|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.33331609|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.59933760|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.38829960|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.55789991|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.69001051|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.62157374|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.01700889|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.29371434|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.85272567|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.57261486|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.95761395|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.33288937|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.20187862|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.39926490|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.18720819|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.88746650|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.45892693|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.01445470|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.83809167|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.31910381|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.99430621|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.14805002|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.57730846|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.20003188|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.66040701|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.91001847|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.09730677|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.28863728|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.69063750|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.56653569|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.92151039|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.07121380|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.67797694|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.78638953|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.50998415|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.34697518|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.71245062|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.70362965|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.96068361|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.05987099|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.92951828|  PASSED  
+             dab_dct| 256|     50000|       1|0.86323735|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.03464038|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.76944755|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.25825632|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.67560717|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.20729674|  PASSED  
+# 
+# Test duration: 143.5374114685 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_3 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_3
new file mode 100644
index 0000000000..df61da532f
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_3
@@ -0,0 +1,139 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well512a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.35e+06  |3039926621|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.65925723|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.24838406|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.89217314|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.22808738|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.12742827|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.37088973|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.36624898|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.19975594|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.28857097|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.86523679|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.47786440|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.41599958|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.94099937|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.95474734|  PASSED  
+        diehard_sums|   0|       100|     100|0.10394147|  PASSED  
+        diehard_runs|   0|    100000|     100|0.99190374|  PASSED  
+        diehard_runs|   0|    100000|     100|0.58456385|  PASSED  
+       diehard_craps|   0|    200000|     100|0.75100681|  PASSED  
+       diehard_craps|   0|    200000|     100|0.93956528|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.74829394|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.55266383|  PASSED  
+         sts_monobit|   1|    100000|     100|0.91676243|  PASSED  
+            sts_runs|   2|    100000|     100|0.84245917|  PASSED  
+          sts_serial|   1|    100000|     100|0.98952676|  PASSED  
+          sts_serial|   2|    100000|     100|0.53452615|  PASSED  
+          sts_serial|   3|    100000|     100|0.92861142|  PASSED  
+          sts_serial|   3|    100000|     100|0.97923884|  PASSED  
+          sts_serial|   4|    100000|     100|0.80345231|  PASSED  
+          sts_serial|   4|    100000|     100|0.48689085|  PASSED  
+          sts_serial|   5|    100000|     100|0.66464949|  PASSED  
+          sts_serial|   5|    100000|     100|0.42874876|  PASSED  
+          sts_serial|   6|    100000|     100|0.40619496|  PASSED  
+          sts_serial|   6|    100000|     100|0.46529689|  PASSED  
+          sts_serial|   7|    100000|     100|0.74711429|  PASSED  
+          sts_serial|   7|    100000|     100|0.70443318|  PASSED  
+          sts_serial|   8|    100000|     100|0.87013219|  PASSED  
+          sts_serial|   8|    100000|     100|0.84304190|  PASSED  
+          sts_serial|   9|    100000|     100|0.17309720|  PASSED  
+          sts_serial|   9|    100000|     100|0.04198352|  PASSED  
+          sts_serial|  10|    100000|     100|0.86229712|  PASSED  
+          sts_serial|  10|    100000|     100|0.15973091|  PASSED  
+          sts_serial|  11|    100000|     100|0.87446331|  PASSED  
+          sts_serial|  11|    100000|     100|0.54795254|  PASSED  
+          sts_serial|  12|    100000|     100|0.74764833|  PASSED  
+          sts_serial|  12|    100000|     100|0.82470249|  PASSED  
+          sts_serial|  13|    100000|     100|0.96686471|  PASSED  
+          sts_serial|  13|    100000|     100|0.94974559|  PASSED  
+          sts_serial|  14|    100000|     100|0.64004526|  PASSED  
+          sts_serial|  14|    100000|     100|0.83637589|  PASSED  
+          sts_serial|  15|    100000|     100|0.81053687|  PASSED  
+          sts_serial|  15|    100000|     100|0.54090818|  PASSED  
+          sts_serial|  16|    100000|     100|0.94014624|  PASSED  
+          sts_serial|  16|    100000|     100|0.37794867|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.84667603|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.45601246|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.49010180|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.83470734|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.17934962|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.28786832|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.88723743|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.86241962|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.35217801|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.12286924|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.50554388|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.82754029|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.60571436|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.08957350|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.47456926|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.59956612|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.66657895|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.14698778|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.22614237|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.74233560|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.88951138|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.68300915|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.55070313|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.87706432|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.34048283|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.80266702|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.27051638|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.99977720|   WEAK   
+      rgb_lagged_sum|   7|   1000000|     200|0.70214908|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.58065020|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.60779307|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.17029790|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.73086778|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.85769018|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.20253527|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.81906672|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.05452111|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.31488148|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.57561285|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.33432498|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.87556478|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.62064793|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.44057796|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.77145320|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.44218644|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.34580454|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.86707698|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.25065903|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.08845387|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.44035148|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.98840474|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.89618865|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.03461368|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.71574074|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.83334922|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.94003448|  PASSED  
+             dab_dct| 256|     50000|       1|0.64360075|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.17896690|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.59765176|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.20525483|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.49968819|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.70382284|  PASSED  
+# 
+# Test duration: 146.3986435312167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_4 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_4
new file mode 100644
index 0000000000..ec0750ef1a
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_4
@@ -0,0 +1,171 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well1024a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.28e+06  |4183199985|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.37967206|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.16896039|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.10234056|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.99915806|   WEAK   
+    diehard_rank_6x8|   0|    100000|     200|0.76328994|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.04550289|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.18093229|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.88977379|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.39711689|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.91868508|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.09864004|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.84439484|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.63769359|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.99667292|   WEAK   
+    diehard_3dsphere|   3|      4000|     200|0.97890583|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.08113282|  PASSED  
+        diehard_sums|   0|       100|     100|0.18304848|  PASSED  
+        diehard_runs|   0|    100000|     100|0.93055788|  PASSED  
+        diehard_runs|   0|    100000|     100|0.02722999|  PASSED  
+       diehard_craps|   0|    200000|     100|0.95649653|  PASSED  
+       diehard_craps|   0|    200000|     100|0.10594796|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.95130745|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.94675735|  PASSED  
+         sts_monobit|   1|    100000|     100|0.94965858|  PASSED  
+            sts_runs|   2|    100000|     100|0.49268154|  PASSED  
+          sts_serial|   1|    100000|     100|0.67414934|  PASSED  
+          sts_serial|   2|    100000|     100|0.52573235|  PASSED  
+          sts_serial|   3|    100000|     100|0.81327554|  PASSED  
+          sts_serial|   3|    100000|     100|0.90513972|  PASSED  
+          sts_serial|   4|    100000|     100|0.71732065|  PASSED  
+          sts_serial|   4|    100000|     100|0.13308603|  PASSED  
+          sts_serial|   5|    100000|     100|0.23540984|  PASSED  
+          sts_serial|   5|    100000|     100|0.44328515|  PASSED  
+          sts_serial|   6|    100000|     100|0.33156927|  PASSED  
+          sts_serial|   6|    100000|     100|0.78537532|  PASSED  
+          sts_serial|   7|    100000|     100|0.49729112|  PASSED  
+          sts_serial|   7|    100000|     100|0.95479854|  PASSED  
+          sts_serial|   8|    100000|     100|0.05387016|  PASSED  
+          sts_serial|   8|    100000|     100|0.15736901|  PASSED  
+          sts_serial|   9|    100000|     100|0.13780496|  PASSED  
+          sts_serial|   9|    100000|     100|0.74793613|  PASSED  
+          sts_serial|  10|    100000|     100|0.56198066|  PASSED  
+          sts_serial|  10|    100000|     100|0.39265977|  PASSED  
+          sts_serial|  11|    100000|     100|0.66864511|  PASSED  
+          sts_serial|  11|    100000|     100|0.41904624|  PASSED  
+          sts_serial|  12|    100000|     100|0.95726079|  PASSED  
+          sts_serial|  12|    100000|     100|0.26374857|  PASSED  
+          sts_serial|  13|    100000|     100|0.96889789|  PASSED  
+          sts_serial|  13|    100000|     100|0.65655695|  PASSED  
+          sts_serial|  14|    100000|     100|0.98593485|  PASSED  
+          sts_serial|  14|    100000|     100|0.42000525|  PASSED  
+          sts_serial|  15|    100000|     100|0.99865014|   WEAK   
+          sts_serial|  15|    100000|     100|0.78080800|  PASSED  
+          sts_serial|  16|    100000|     100|0.94693227|  PASSED  
+          sts_serial|  16|    100000|     100|0.57689706|  PASSED  
+          sts_serial|   1|    100000|     200|0.75009672|  PASSED  
+          sts_serial|   2|    100000|     200|0.45933997|  PASSED  
+          sts_serial|   3|    100000|     200|0.88239488|  PASSED  
+          sts_serial|   3|    100000|     200|0.38370527|  PASSED  
+          sts_serial|   4|    100000|     200|0.87910017|  PASSED  
+          sts_serial|   4|    100000|     200|0.85888426|  PASSED  
+          sts_serial|   5|    100000|     200|0.64148870|  PASSED  
+          sts_serial|   5|    100000|     200|0.72448038|  PASSED  
+          sts_serial|   6|    100000|     200|0.52416264|  PASSED  
+          sts_serial|   6|    100000|     200|0.59597198|  PASSED  
+          sts_serial|   7|    100000|     200|0.63751373|  PASSED  
+          sts_serial|   7|    100000|     200|0.40881850|  PASSED  
+          sts_serial|   8|    100000|     200|0.23992923|  PASSED  
+          sts_serial|   8|    100000|     200|0.71371195|  PASSED  
+          sts_serial|   9|    100000|     200|0.15240908|  PASSED  
+          sts_serial|   9|    100000|     200|0.44579086|  PASSED  
+          sts_serial|  10|    100000|     200|0.22104239|  PASSED  
+          sts_serial|  10|    100000|     200|0.71386608|  PASSED  
+          sts_serial|  11|    100000|     200|0.47257227|  PASSED  
+          sts_serial|  11|    100000|     200|0.36853280|  PASSED  
+          sts_serial|  12|    100000|     200|0.88238100|  PASSED  
+          sts_serial|  12|    100000|     200|0.69923733|  PASSED  
+          sts_serial|  13|    100000|     200|0.77501701|  PASSED  
+          sts_serial|  13|    100000|     200|0.53610861|  PASSED  
+          sts_serial|  14|    100000|     200|0.90628335|  PASSED  
+          sts_serial|  14|    100000|     200|0.00777700|  PASSED  
+          sts_serial|  15|    100000|     200|0.83242333|  PASSED  
+          sts_serial|  15|    100000|     200|0.46827261|  PASSED  
+          sts_serial|  16|    100000|     200|0.93963409|  PASSED  
+          sts_serial|  16|    100000|     200|0.93327416|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.90555951|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.43684064|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.29045486|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.31604577|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.59786472|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.33428311|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.82649800|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.92805252|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.53762168|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.25936001|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.94071508|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.96301533|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.89820332|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.83852811|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.07554308|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.22658770|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.30090736|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.94143138|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.61659743|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.31714668|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.72028204|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.91126692|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.92236868|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.57543958|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.49015039|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.45677219|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.14915843|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.45441388|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.83995691|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.75774590|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.68958257|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.64431849|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.63493083|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.14803740|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.96401463|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.99827869|   WEAK   
+      rgb_lagged_sum|  15|   1000000|     200|0.78902787|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.70048950|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.97155656|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.13683972|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.66010592|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.79100372|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.10614381|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.78268174|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.67852033|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.44990687|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.21184617|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.16578623|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.51146717|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.47461193|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.11560118|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.82871666|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.59624564|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.56418510|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.53357570|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.29132571|  PASSED  
+             dab_dct| 256|     50000|       1|0.80875808|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.88308721|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.74581447|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.09046849|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.11531268|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.90158558|  PASSED  
+# 
+# Test duration: 148.72610797815003 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_5 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_5
new file mode 100644
index 0000000000..1d8f0fa33c
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_5
@@ -0,0 +1,143 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.11e+06  |1324685015|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.97873706|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.31625234|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.81874010|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.38511330|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.72448209|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.21526395|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.14809241|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.13975350|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.27264345|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.23899278|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.59288414|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.44640415|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.89918701|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.85012417|  PASSED  
+        diehard_sums|   0|       100|     100|0.07862421|  PASSED  
+        diehard_runs|   0|    100000|     100|0.22539800|  PASSED  
+        diehard_runs|   0|    100000|     100|0.25024342|  PASSED  
+       diehard_craps|   0|    200000|     100|0.66918238|  PASSED  
+       diehard_craps|   0|    200000|     100|0.74263938|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.76388825|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.12763949|  PASSED  
+         sts_monobit|   1|    100000|     100|0.90379684|  PASSED  
+            sts_runs|   2|    100000|     100|0.96725937|  PASSED  
+          sts_serial|   1|    100000|     100|0.89179612|  PASSED  
+          sts_serial|   2|    100000|     100|0.72323704|  PASSED  
+          sts_serial|   3|    100000|     100|0.52010951|  PASSED  
+          sts_serial|   3|    100000|     100|0.22447689|  PASSED  
+          sts_serial|   4|    100000|     100|0.31207188|  PASSED  
+          sts_serial|   4|    100000|     100|0.00723587|  PASSED  
+          sts_serial|   5|    100000|     100|0.97048978|  PASSED  
+          sts_serial|   5|    100000|     100|0.81338656|  PASSED  
+          sts_serial|   6|    100000|     100|0.13820363|  PASSED  
+          sts_serial|   6|    100000|     100|0.01043639|  PASSED  
+          sts_serial|   7|    100000|     100|0.03953577|  PASSED  
+          sts_serial|   7|    100000|     100|0.02379927|  PASSED  
+          sts_serial|   8|    100000|     100|0.47458458|  PASSED  
+          sts_serial|   8|    100000|     100|0.46015889|  PASSED  
+          sts_serial|   9|    100000|     100|0.81464024|  PASSED  
+          sts_serial|   9|    100000|     100|0.66406361|  PASSED  
+          sts_serial|  10|    100000|     100|0.53261452|  PASSED  
+          sts_serial|  10|    100000|     100|0.88051566|  PASSED  
+          sts_serial|  11|    100000|     100|0.56643984|  PASSED  
+          sts_serial|  11|    100000|     100|0.11383998|  PASSED  
+          sts_serial|  12|    100000|     100|0.29462130|  PASSED  
+          sts_serial|  12|    100000|     100|0.02722840|  PASSED  
+          sts_serial|  13|    100000|     100|0.55119783|  PASSED  
+          sts_serial|  13|    100000|     100|0.72716120|  PASSED  
+          sts_serial|  14|    100000|     100|0.53381465|  PASSED  
+          sts_serial|  14|    100000|     100|0.31932292|  PASSED  
+          sts_serial|  15|    100000|     100|0.68645828|  PASSED  
+          sts_serial|  15|    100000|     100|0.94979473|  PASSED  
+          sts_serial|  16|    100000|     100|0.13657316|  PASSED  
+          sts_serial|  16|    100000|     100|0.26675130|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.02478061|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.07528420|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.57858945|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.80502569|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.00483505|   WEAK   
+         rgb_bitdist|   5|    100000|     200|0.10185402|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.32770207|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.36675591|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.88234317|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.07422959|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.89191964|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.99910018|   WEAK   
+         rgb_bitdist|  11|    100000|     200|0.41561250|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.74345980|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.10392245|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.38843244|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.03155304|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.16214581|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.64186486|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.06742496|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.91809323|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.54190175|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.81729482|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.19767763|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.99809832|   WEAK   
+      rgb_lagged_sum|   2|   1000000|     200|0.41500829|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.17526318|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.19400369|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.52139840|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.48238904|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.69067647|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.91361815|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.06310703|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.29108052|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.94573219|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.90058722|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.96964807|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.23084181|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.40614194|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.99734781|   WEAK   
+      rgb_lagged_sum|  16|   1000000|     200|0.90592642|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.78266848|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.90745627|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.46898421|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.64303764|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.78785428|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.64289335|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.99712926|   WEAK   
+      rgb_lagged_sum|  23|   1000000|     200|0.83532125|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.37457204|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.72225826|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.85509807|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.19342055|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.55197797|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.94564052|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.98416036|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.97123174|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.41819068|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.87419667|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.50271402|  PASSED  
+             dab_dct| 256|     50000|       1|0.35130777|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.09459145|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.10110627|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.07851894|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.50633037|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.45029930|  PASSED  
+# 
+# Test duration: 162.06253442048333 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_6 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_6
new file mode 100644
index 0000000000..d276dfef80
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_6
@@ -0,0 +1,260 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937c
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.37e+06  |3334361804|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.33902894|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.16900958|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.98520421|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.95411917|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.65099743|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.72997564|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.96814123|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.22517961|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.86241438|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.17957029|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.83744977|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.13941120|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.68303986|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.57025791|  PASSED  
+        diehard_sums|   0|       100|     100|0.52231410|  PASSED  
+        diehard_runs|   0|    100000|     100|0.64626314|  PASSED  
+        diehard_runs|   0|    100000|     100|0.81897851|  PASSED  
+       diehard_craps|   0|    200000|     100|0.93418601|  PASSED  
+       diehard_craps|   0|    200000|     100|0.60805271|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.81819286|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.52754285|  PASSED  
+         sts_monobit|   1|    100000|     100|0.37890714|  PASSED  
+            sts_runs|   2|    100000|     100|0.96148485|  PASSED  
+          sts_serial|   1|    100000|     100|0.31001355|  PASSED  
+          sts_serial|   2|    100000|     100|0.99599161|   WEAK   
+          sts_serial|   3|    100000|     100|0.52488613|  PASSED  
+          sts_serial|   3|    100000|     100|0.31877707|  PASSED  
+          sts_serial|   4|    100000|     100|0.82948358|  PASSED  
+          sts_serial|   4|    100000|     100|0.20185553|  PASSED  
+          sts_serial|   5|    100000|     100|0.82606199|  PASSED  
+          sts_serial|   5|    100000|     100|0.40795669|  PASSED  
+          sts_serial|   6|    100000|     100|0.99209107|  PASSED  
+          sts_serial|   6|    100000|     100|0.58524695|  PASSED  
+          sts_serial|   7|    100000|     100|0.54602489|  PASSED  
+          sts_serial|   7|    100000|     100|0.51515163|  PASSED  
+          sts_serial|   8|    100000|     100|0.20279979|  PASSED  
+          sts_serial|   8|    100000|     100|0.98276260|  PASSED  
+          sts_serial|   9|    100000|     100|0.99017482|  PASSED  
+          sts_serial|   9|    100000|     100|0.40115439|  PASSED  
+          sts_serial|  10|    100000|     100|0.98381543|  PASSED  
+          sts_serial|  10|    100000|     100|0.97169831|  PASSED  
+          sts_serial|  11|    100000|     100|0.69916793|  PASSED  
+          sts_serial|  11|    100000|     100|0.82244173|  PASSED  
+          sts_serial|  12|    100000|     100|0.98881736|  PASSED  
+          sts_serial|  12|    100000|     100|0.88903637|  PASSED  
+          sts_serial|  13|    100000|     100|0.62493512|  PASSED  
+          sts_serial|  13|    100000|     100|0.02643409|  PASSED  
+          sts_serial|  14|    100000|     100|0.94146388|  PASSED  
+          sts_serial|  14|    100000|     100|0.05129506|  PASSED  
+          sts_serial|  15|    100000|     100|0.33783283|  PASSED  
+          sts_serial|  15|    100000|     100|0.42022922|  PASSED  
+          sts_serial|  16|    100000|     100|0.93096511|  PASSED  
+          sts_serial|  16|    100000|     100|0.08534973|  PASSED  
+          sts_serial|   1|    100000|     200|0.31374350|  PASSED  
+          sts_serial|   2|    100000|     200|0.77622320|  PASSED  
+          sts_serial|   3|    100000|     200|0.87277999|  PASSED  
+          sts_serial|   3|    100000|     200|0.99891004|   WEAK   
+          sts_serial|   4|    100000|     200|0.34087456|  PASSED  
+          sts_serial|   4|    100000|     200|0.21548720|  PASSED  
+          sts_serial|   5|    100000|     200|0.70669660|  PASSED  
+          sts_serial|   5|    100000|     200|0.96704079|  PASSED  
+          sts_serial|   6|    100000|     200|0.74448169|  PASSED  
+          sts_serial|   6|    100000|     200|0.02327035|  PASSED  
+          sts_serial|   7|    100000|     200|0.13512242|  PASSED  
+          sts_serial|   7|    100000|     200|0.04402775|  PASSED  
+          sts_serial|   8|    100000|     200|0.04657087|  PASSED  
+          sts_serial|   8|    100000|     200|0.82707014|  PASSED  
+          sts_serial|   9|    100000|     200|0.78715084|  PASSED  
+          sts_serial|   9|    100000|     200|0.97043527|  PASSED  
+          sts_serial|  10|    100000|     200|0.97470209|  PASSED  
+          sts_serial|  10|    100000|     200|0.96197967|  PASSED  
+          sts_serial|  11|    100000|     200|0.47919447|  PASSED  
+          sts_serial|  11|    100000|     200|0.33035068|  PASSED  
+          sts_serial|  12|    100000|     200|0.73206815|  PASSED  
+          sts_serial|  12|    100000|     200|0.90999844|  PASSED  
+          sts_serial|  13|    100000|     200|0.83430520|  PASSED  
+          sts_serial|  13|    100000|     200|0.52363389|  PASSED  
+          sts_serial|  14|    100000|     200|0.89567712|  PASSED  
+          sts_serial|  14|    100000|     200|0.05256107|  PASSED  
+          sts_serial|  15|    100000|     200|0.39651524|  PASSED  
+          sts_serial|  15|    100000|     200|0.73344344|  PASSED  
+          sts_serial|  16|    100000|     200|0.45612542|  PASSED  
+          sts_serial|  16|    100000|     200|0.48364900|  PASSED  
+          sts_serial|   1|    100000|     300|0.39005846|  PASSED  
+          sts_serial|   2|    100000|     300|0.91116693|  PASSED  
+          sts_serial|   3|    100000|     300|0.90918793|  PASSED  
+          sts_serial|   3|    100000|     300|0.97378321|  PASSED  
+          sts_serial|   4|    100000|     300|0.77199373|  PASSED  
+          sts_serial|   4|    100000|     300|0.66547445|  PASSED  
+          sts_serial|   5|    100000|     300|0.98378648|  PASSED  
+          sts_serial|   5|    100000|     300|0.98923215|  PASSED  
+          sts_serial|   6|    100000|     300|0.72237614|  PASSED  
+          sts_serial|   6|    100000|     300|0.13975497|  PASSED  
+          sts_serial|   7|    100000|     300|0.73870875|  PASSED  
+          sts_serial|   7|    100000|     300|0.33515098|  PASSED  
+          sts_serial|   8|    100000|     300|0.16446282|  PASSED  
+          sts_serial|   8|    100000|     300|0.72851585|  PASSED  
+          sts_serial|   9|    100000|     300|0.99692292|   WEAK   
+          sts_serial|   9|    100000|     300|0.98870291|  PASSED  
+          sts_serial|  10|    100000|     300|0.88653931|  PASSED  
+          sts_serial|  10|    100000|     300|0.99880041|   WEAK   
+          sts_serial|  11|    100000|     300|0.23009197|  PASSED  
+          sts_serial|  11|    100000|     300|0.36184916|  PASSED  
+          sts_serial|  12|    100000|     300|0.65393093|  PASSED  
+          sts_serial|  12|    100000|     300|0.74718009|  PASSED  
+          sts_serial|  13|    100000|     300|0.57240783|  PASSED  
+          sts_serial|  13|    100000|     300|0.39080265|  PASSED  
+          sts_serial|  14|    100000|     300|0.84261940|  PASSED  
+          sts_serial|  14|    100000|     300|0.21697709|  PASSED  
+          sts_serial|  15|    100000|     300|0.98280056|  PASSED  
+          sts_serial|  15|    100000|     300|0.98523833|  PASSED  
+          sts_serial|  16|    100000|     300|0.96840606|  PASSED  
+          sts_serial|  16|    100000|     300|0.59220393|  PASSED  
+          sts_serial|   1|    100000|     400|0.79952430|  PASSED  
+          sts_serial|   2|    100000|     400|0.82688750|  PASSED  
+          sts_serial|   3|    100000|     400|0.65765573|  PASSED  
+          sts_serial|   3|    100000|     400|0.93382369|  PASSED  
+          sts_serial|   4|    100000|     400|0.98598169|  PASSED  
+          sts_serial|   4|    100000|     400|0.99718327|   WEAK   
+          sts_serial|   5|    100000|     400|0.99980289|   WEAK   
+          sts_serial|   5|    100000|     400|0.81777062|  PASSED  
+          sts_serial|   6|    100000|     400|0.33252618|  PASSED  
+          sts_serial|   6|    100000|     400|0.13433104|  PASSED  
+          sts_serial|   7|    100000|     400|0.72568325|  PASSED  
+          sts_serial|   7|    100000|     400|0.28657646|  PASSED  
+          sts_serial|   8|    100000|     400|0.10275109|  PASSED  
+          sts_serial|   8|    100000|     400|0.68117960|  PASSED  
+          sts_serial|   9|    100000|     400|0.49822099|  PASSED  
+          sts_serial|   9|    100000|     400|0.67154776|  PASSED  
+          sts_serial|  10|    100000|     400|0.55659657|  PASSED  
+          sts_serial|  10|    100000|     400|0.98400849|  PASSED  
+          sts_serial|  11|    100000|     400|0.35113327|  PASSED  
+          sts_serial|  11|    100000|     400|0.68666619|  PASSED  
+          sts_serial|  12|    100000|     400|0.77204559|  PASSED  
+          sts_serial|  12|    100000|     400|0.17557545|  PASSED  
+          sts_serial|  13|    100000|     400|0.58660251|  PASSED  
+          sts_serial|  13|    100000|     400|0.28361520|  PASSED  
+          sts_serial|  14|    100000|     400|0.36144480|  PASSED  
+          sts_serial|  14|    100000|     400|0.09021380|  PASSED  
+          sts_serial|  15|    100000|     400|0.26006754|  PASSED  
+          sts_serial|  15|    100000|     400|0.54397030|  PASSED  
+          sts_serial|  16|    100000|     400|0.27929650|  PASSED  
+          sts_serial|  16|    100000|     400|0.61477373|  PASSED  
+          sts_serial|   1|    100000|     500|0.64627198|  PASSED  
+          sts_serial|   2|    100000|     500|0.90417640|  PASSED  
+          sts_serial|   3|    100000|     500|0.37806243|  PASSED  
+          sts_serial|   3|    100000|     500|0.81436817|  PASSED  
+          sts_serial|   4|    100000|     500|0.92155913|  PASSED  
+          sts_serial|   4|    100000|     500|0.92992166|  PASSED  
+          sts_serial|   5|    100000|     500|0.92457412|  PASSED  
+          sts_serial|   5|    100000|     500|0.77345272|  PASSED  
+          sts_serial|   6|    100000|     500|0.21939241|  PASSED  
+          sts_serial|   6|    100000|     500|0.06760935|  PASSED  
+          sts_serial|   7|    100000|     500|0.35973975|  PASSED  
+          sts_serial|   7|    100000|     500|0.24111951|  PASSED  
+          sts_serial|   8|    100000|     500|0.04265546|  PASSED  
+          sts_serial|   8|    100000|     500|0.41737169|  PASSED  
+          sts_serial|   9|    100000|     500|0.27501433|  PASSED  
+          sts_serial|   9|    100000|     500|0.55471507|  PASSED  
+          sts_serial|  10|    100000|     500|0.35831064|  PASSED  
+          sts_serial|  10|    100000|     500|0.83433061|  PASSED  
+          sts_serial|  11|    100000|     500|0.09874252|  PASSED  
+          sts_serial|  11|    100000|     500|0.37036257|  PASSED  
+          sts_serial|  12|    100000|     500|0.66754332|  PASSED  
+          sts_serial|  12|    100000|     500|0.93833550|  PASSED  
+          sts_serial|  13|    100000|     500|0.41458670|  PASSED  
+          sts_serial|  13|    100000|     500|0.38120717|  PASSED  
+          sts_serial|  14|    100000|     500|0.15984249|  PASSED  
+          sts_serial|  14|    100000|     500|0.02687063|  PASSED  
+          sts_serial|  15|    100000|     500|0.53058827|  PASSED  
+          sts_serial|  15|    100000|     500|0.58253309|  PASSED  
+          sts_serial|  16|    100000|     500|0.63785859|  PASSED  
+          sts_serial|  16|    100000|     500|0.57310525|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.32573254|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.48041520|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.71306959|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.41851101|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.64475492|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.73449149|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.70937060|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.34067798|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.56997054|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.42287847|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.44738156|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.22232608|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.19327258|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.81055025|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.90244006|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.27507361|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.82969465|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.60470846|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.93710623|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.12832164|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.01452483|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.78105258|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.15312110|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.96704133|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.89155575|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.10410746|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.62843428|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.08391358|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.61503919|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.49047843|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.39668875|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.25226931|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.09436183|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.74510400|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.81857951|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.90137981|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.94752528|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.83341319|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.70513074|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.89718522|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.33647555|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.98390612|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.23675547|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.48135017|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.09079197|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.02305748|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.26733513|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.97214481|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.69460385|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.58585169|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.13119563|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.31757199|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.95214009|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.10787252|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.93611706|  PASSED  
+             dab_dct| 256|     50000|       1|0.34752816|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.64217530|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.44229477|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.99556903|   WEAK   
+       dab_filltree2|   1|   5000000|       1|0.90214349|  PASSED  
+       dab_filltree2|   0|   5000000|     101|0.92818702|  PASSED  
+       dab_filltree2|   1|   5000000|     101|0.94608261|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.46644015|  PASSED  
+# 
+# Test duration: 157.60660263953335 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_7 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_7
new file mode 100644
index 0000000000..7a240a0403
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_7
@@ -0,0 +1,143 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.19e+06  |1041997854|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.80187216|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.61100451|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.75146496|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.93193662|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.62788669|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.53661676|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.12407821|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.98715269|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.62644200|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.70348326|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.79600924|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.61535064|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.45708543|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.50570394|  PASSED  
+        diehard_sums|   0|       100|     100|0.35238433|  PASSED  
+        diehard_runs|   0|    100000|     100|0.15945898|  PASSED  
+        diehard_runs|   0|    100000|     100|0.24231765|  PASSED  
+       diehard_craps|   0|    200000|     100|0.21559884|  PASSED  
+       diehard_craps|   0|    200000|     100|0.55447355|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.71289644|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.62127133|  PASSED  
+         sts_monobit|   1|    100000|     100|0.72272298|  PASSED  
+            sts_runs|   2|    100000|     100|0.86196986|  PASSED  
+          sts_serial|   1|    100000|     100|0.35360871|  PASSED  
+          sts_serial|   2|    100000|     100|0.66877839|  PASSED  
+          sts_serial|   3|    100000|     100|0.85271378|  PASSED  
+          sts_serial|   3|    100000|     100|0.97392361|  PASSED  
+          sts_serial|   4|    100000|     100|0.73341160|  PASSED  
+          sts_serial|   4|    100000|     100|0.54790218|  PASSED  
+          sts_serial|   5|    100000|     100|0.99490903|  PASSED  
+          sts_serial|   5|    100000|     100|0.25972060|  PASSED  
+          sts_serial|   6|    100000|     100|0.52193260|  PASSED  
+          sts_serial|   6|    100000|     100|0.36805573|  PASSED  
+          sts_serial|   7|    100000|     100|0.32489079|  PASSED  
+          sts_serial|   7|    100000|     100|0.03388755|  PASSED  
+          sts_serial|   8|    100000|     100|0.07298106|  PASSED  
+          sts_serial|   8|    100000|     100|0.94677478|  PASSED  
+          sts_serial|   9|    100000|     100|0.10061493|  PASSED  
+          sts_serial|   9|    100000|     100|0.18182045|  PASSED  
+          sts_serial|  10|    100000|     100|0.80509182|  PASSED  
+          sts_serial|  10|    100000|     100|0.34719024|  PASSED  
+          sts_serial|  11|    100000|     100|0.82251854|  PASSED  
+          sts_serial|  11|    100000|     100|0.37241756|  PASSED  
+          sts_serial|  12|    100000|     100|0.57742830|  PASSED  
+          sts_serial|  12|    100000|     100|0.14971630|  PASSED  
+          sts_serial|  13|    100000|     100|0.22184499|  PASSED  
+          sts_serial|  13|    100000|     100|0.85784401|  PASSED  
+          sts_serial|  14|    100000|     100|0.33978075|  PASSED  
+          sts_serial|  14|    100000|     100|0.97289399|  PASSED  
+          sts_serial|  15|    100000|     100|0.97904833|  PASSED  
+          sts_serial|  15|    100000|     100|0.62298556|  PASSED  
+          sts_serial|  16|    100000|     100|0.12878687|  PASSED  
+          sts_serial|  16|    100000|     100|0.43284759|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.77380541|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.73200370|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.31724334|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.01702691|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.22686084|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.99971773|   WEAK   
+         rgb_bitdist|   6|    100000|     200|0.48818561|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.74742009|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.03339909|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.38858045|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.20831290|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.43093782|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.17196967|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.69443555|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.89796205|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.80301917|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.57935885|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.99951200|   WEAK   
+    rgb_permutations|   2|    100000|     200|0.99044316|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.46595580|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.54471856|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.56908207|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.86946802|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.96657641|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.90691978|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.28864821|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.99943487|   WEAK   
+      rgb_lagged_sum|   4|   1000000|     200|0.77533347|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.39390734|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.93343776|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.83992481|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.72689904|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.53910749|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.52059801|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.30613618|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.77276205|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.40964865|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.86534443|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.38541883|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.89672716|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.67161251|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.18683541|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.98107536|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.67779362|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.04985419|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.36235990|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.54694571|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.27203710|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.78936783|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.44740362|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.94535534|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.65166475|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.69670377|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.53551941|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.79843436|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.70285114|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.48404789|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.56870408|  PASSED  
+             dab_dct| 256|     50000|       1|0.74939723|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.63125846|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.76546612|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.99763961|   WEAK   
+       dab_filltree2|   1|   5000000|       1|0.81326588|  PASSED  
+       dab_filltree2|   0|   5000000|     101|0.69542422|  PASSED  
+       dab_filltree2|   1|   5000000|     101|0.22172752|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.41617820|  PASSED  
+# 
+# Test duration: 156.2953042299667 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_8 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_8
new file mode 100644
index 0000000000..6e6eebbd6d
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_8
@@ -0,0 +1,800 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497b
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  8.14e+06  |3240771676|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.81680343|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.83093104|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.69890950|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.73757194|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.79560953|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.91743161|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.30375937|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.48183957|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.58403744|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.13206026|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.39368629|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.92222474|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.43358713|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.41102170|  PASSED  
+        diehard_sums|   0|       100|     100|0.11298386|  PASSED  
+        diehard_runs|   0|    100000|     100|0.88159233|  PASSED  
+        diehard_runs|   0|    100000|     100|0.90214433|  PASSED  
+       diehard_craps|   0|    200000|     100|0.03843281|  PASSED  
+       diehard_craps|   0|    200000|     100|0.77456635|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.39987405|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.05747832|  PASSED  
+         sts_monobit|   1|    100000|     100|0.99464121|  PASSED  
+            sts_runs|   2|    100000|     100|0.94267702|  PASSED  
+          sts_serial|   1|    100000|     100|0.20950020|  PASSED  
+          sts_serial|   2|    100000|     100|0.50407611|  PASSED  
+          sts_serial|   3|    100000|     100|0.85057752|  PASSED  
+          sts_serial|   3|    100000|     100|0.65487831|  PASSED  
+          sts_serial|   4|    100000|     100|0.60209893|  PASSED  
+          sts_serial|   4|    100000|     100|0.32116768|  PASSED  
+          sts_serial|   5|    100000|     100|0.17223680|  PASSED  
+          sts_serial|   5|    100000|     100|0.37939987|  PASSED  
+          sts_serial|   6|    100000|     100|0.66671747|  PASSED  
+          sts_serial|   6|    100000|     100|0.04386058|  PASSED  
+          sts_serial|   7|    100000|     100|0.34604983|  PASSED  
+          sts_serial|   7|    100000|     100|0.47838019|  PASSED  
+          sts_serial|   8|    100000|     100|0.83460317|  PASSED  
+          sts_serial|   8|    100000|     100|0.62981425|  PASSED  
+          sts_serial|   9|    100000|     100|0.77962063|  PASSED  
+          sts_serial|   9|    100000|     100|0.99955982|   WEAK   
+          sts_serial|  10|    100000|     100|0.27605490|  PASSED  
+          sts_serial|  10|    100000|     100|0.15126031|  PASSED  
+          sts_serial|  11|    100000|     100|0.47920323|  PASSED  
+          sts_serial|  11|    100000|     100|0.84941018|  PASSED  
+          sts_serial|  12|    100000|     100|0.19624503|  PASSED  
+          sts_serial|  12|    100000|     100|0.41833940|  PASSED  
+          sts_serial|  13|    100000|     100|0.99389349|  PASSED  
+          sts_serial|  13|    100000|     100|0.77268057|  PASSED  
+          sts_serial|  14|    100000|     100|0.12123384|  PASSED  
+          sts_serial|  14|    100000|     100|0.08863515|  PASSED  
+          sts_serial|  15|    100000|     100|0.92644666|  PASSED  
+          sts_serial|  15|    100000|     100|0.27845301|  PASSED  
+          sts_serial|  16|    100000|     100|0.68209282|  PASSED  
+          sts_serial|  16|    100000|     100|0.37365079|  PASSED  
+          sts_serial|   1|    100000|     200|0.85514360|  PASSED  
+          sts_serial|   2|    100000|     200|0.25674755|  PASSED  
+          sts_serial|   3|    100000|     200|0.93645219|  PASSED  
+          sts_serial|   3|    100000|     200|0.37775574|  PASSED  
+          sts_serial|   4|    100000|     200|0.37714408|  PASSED  
+          sts_serial|   4|    100000|     200|0.08978336|  PASSED  
+          sts_serial|   5|    100000|     200|0.03040927|  PASSED  
+          sts_serial|   5|    100000|     200|0.33012285|  PASSED  
+          sts_serial|   6|    100000|     200|0.15022462|  PASSED  
+          sts_serial|   6|    100000|     200|0.62285283|  PASSED  
+          sts_serial|   7|    100000|     200|0.60916939|  PASSED  
+          sts_serial|   7|    100000|     200|0.09498785|  PASSED  
+          sts_serial|   8|    100000|     200|0.99833151|   WEAK   
+          sts_serial|   8|    100000|     200|0.61048753|  PASSED  
+          sts_serial|   9|    100000|     200|0.72509686|  PASSED  
+          sts_serial|   9|    100000|     200|0.83391077|  PASSED  
+          sts_serial|  10|    100000|     200|0.31533498|  PASSED  
+          sts_serial|  10|    100000|     200|0.07040741|  PASSED  
+          sts_serial|  11|    100000|     200|0.90100087|  PASSED  
+          sts_serial|  11|    100000|     200|0.56791314|  PASSED  
+          sts_serial|  12|    100000|     200|0.15266979|  PASSED  
+          sts_serial|  12|    100000|     200|0.20452573|  PASSED  
+          sts_serial|  13|    100000|     200|0.65792351|  PASSED  
+          sts_serial|  13|    100000|     200|0.57757768|  PASSED  
+          sts_serial|  14|    100000|     200|0.28899730|  PASSED  
+          sts_serial|  14|    100000|     200|0.39326344|  PASSED  
+          sts_serial|  15|    100000|     200|0.91378879|  PASSED  
+          sts_serial|  15|    100000|     200|0.98983256|  PASSED  
+          sts_serial|  16|    100000|     200|0.58185239|  PASSED  
+          sts_serial|  16|    100000|     200|0.71642908|  PASSED  
+          sts_serial|   1|    100000|     300|0.82681350|  PASSED  
+          sts_serial|   2|    100000|     300|0.10070102|  PASSED  
+          sts_serial|   3|    100000|     300|0.99186311|  PASSED  
+          sts_serial|   3|    100000|     300|0.42794292|  PASSED  
+          sts_serial|   4|    100000|     300|0.66544070|  PASSED  
+          sts_serial|   4|    100000|     300|0.74721513|  PASSED  
+          sts_serial|   5|    100000|     300|0.07913374|  PASSED  
+          sts_serial|   5|    100000|     300|0.76937303|  PASSED  
+          sts_serial|   6|    100000|     300|0.41149255|  PASSED  
+          sts_serial|   6|    100000|     300|0.72328073|  PASSED  
+          sts_serial|   7|    100000|     300|0.18088411|  PASSED  
+          sts_serial|   7|    100000|     300|0.07732748|  PASSED  
+          sts_serial|   8|    100000|     300|0.99778892|   WEAK   
+          sts_serial|   8|    100000|     300|0.19794588|  PASSED  
+          sts_serial|   9|    100000|     300|0.31694204|  PASSED  
+          sts_serial|   9|    100000|     300|0.40963719|  PASSED  
+          sts_serial|  10|    100000|     300|0.58866464|  PASSED  
+          sts_serial|  10|    100000|     300|0.37044609|  PASSED  
+          sts_serial|  11|    100000|     300|0.90954698|  PASSED  
+          sts_serial|  11|    100000|     300|0.93679327|  PASSED  
+          sts_serial|  12|    100000|     300|0.16721541|  PASSED  
+          sts_serial|  12|    100000|     300|0.29015556|  PASSED  
+          sts_serial|  13|    100000|     300|0.98544489|  PASSED  
+          sts_serial|  13|    100000|     300|0.49195350|  PASSED  
+          sts_serial|  14|    100000|     300|0.40461847|  PASSED  
+          sts_serial|  14|    100000|     300|0.15438435|  PASSED  
+          sts_serial|  15|    100000|     300|0.51499395|  PASSED  
+          sts_serial|  15|    100000|     300|0.48512487|  PASSED  
+          sts_serial|  16|    100000|     300|0.55473985|  PASSED  
+          sts_serial|  16|    100000|     300|0.99925069|   WEAK   
+          sts_serial|   1|    100000|     400|0.91477126|  PASSED  
+          sts_serial|   2|    100000|     400|0.15222902|  PASSED  
+          sts_serial|   3|    100000|     400|0.96838682|  PASSED  
+          sts_serial|   3|    100000|     400|0.37167619|  PASSED  
+          sts_serial|   4|    100000|     400|0.54585635|  PASSED  
+          sts_serial|   4|    100000|     400|0.40316876|  PASSED  
+          sts_serial|   5|    100000|     400|0.36013870|  PASSED  
+          sts_serial|   5|    100000|     400|0.41187042|  PASSED  
+          sts_serial|   6|    100000|     400|0.61926551|  PASSED  
+          sts_serial|   6|    100000|     400|0.47016641|  PASSED  
+          sts_serial|   7|    100000|     400|0.01319731|  PASSED  
+          sts_serial|   7|    100000|     400|0.02256028|  PASSED  
+          sts_serial|   8|    100000|     400|0.89223551|  PASSED  
+          sts_serial|   8|    100000|     400|0.44511237|  PASSED  
+          sts_serial|   9|    100000|     400|0.13665073|  PASSED  
+          sts_serial|   9|    100000|     400|0.81777364|  PASSED  
+          sts_serial|  10|    100000|     400|0.35117496|  PASSED  
+          sts_serial|  10|    100000|     400|0.32811900|  PASSED  
+          sts_serial|  11|    100000|     400|0.51927196|  PASSED  
+          sts_serial|  11|    100000|     400|0.46028397|  PASSED  
+          sts_serial|  12|    100000|     400|0.56846897|  PASSED  
+          sts_serial|  12|    100000|     400|0.40343961|  PASSED  
+          sts_serial|  13|    100000|     400|0.67339065|  PASSED  
+          sts_serial|  13|    100000|     400|0.07356258|  PASSED  
+          sts_serial|  14|    100000|     400|0.99961302|   WEAK   
+          sts_serial|  14|    100000|     400|0.39703484|  PASSED  
+          sts_serial|  15|    100000|     400|0.93626795|  PASSED  
+          sts_serial|  15|    100000|     400|0.34835385|  PASSED  
+          sts_serial|  16|    100000|     400|0.89094486|  PASSED  
+          sts_serial|  16|    100000|     400|0.94074061|  PASSED  
+          sts_serial|   1|    100000|     500|0.99764292|   WEAK   
+          sts_serial|   2|    100000|     500|0.10353788|  PASSED  
+          sts_serial|   3|    100000|     500|0.92483869|  PASSED  
+          sts_serial|   3|    100000|     500|0.58729338|  PASSED  
+          sts_serial|   4|    100000|     500|0.43825816|  PASSED  
+          sts_serial|   4|    100000|     500|0.50964777|  PASSED  
+          sts_serial|   5|    100000|     500|0.68467771|  PASSED  
+          sts_serial|   5|    100000|     500|0.35440277|  PASSED  
+          sts_serial|   6|    100000|     500|0.72101174|  PASSED  
+          sts_serial|   6|    100000|     500|0.85784275|  PASSED  
+          sts_serial|   7|    100000|     500|0.01312564|  PASSED  
+          sts_serial|   7|    100000|     500|0.01124853|  PASSED  
+          sts_serial|   8|    100000|     500|0.68702794|  PASSED  
+          sts_serial|   8|    100000|     500|0.14592370|  PASSED  
+          sts_serial|   9|    100000|     500|0.40761042|  PASSED  
+          sts_serial|   9|    100000|     500|0.74684653|  PASSED  
+          sts_serial|  10|    100000|     500|0.38239694|  PASSED  
+          sts_serial|  10|    100000|     500|0.46906467|  PASSED  
+          sts_serial|  11|    100000|     500|0.66678934|  PASSED  
+          sts_serial|  11|    100000|     500|0.95223451|  PASSED  
+          sts_serial|  12|    100000|     500|0.19149871|  PASSED  
+          sts_serial|  12|    100000|     500|0.22826763|  PASSED  
+          sts_serial|  13|    100000|     500|0.79736117|  PASSED  
+          sts_serial|  13|    100000|     500|0.31747450|  PASSED  
+          sts_serial|  14|    100000|     500|0.98998414|  PASSED  
+          sts_serial|  14|    100000|     500|0.27483287|  PASSED  
+          sts_serial|  15|    100000|     500|0.91326397|  PASSED  
+          sts_serial|  15|    100000|     500|0.24579086|  PASSED  
+          sts_serial|  16|    100000|     500|0.93879994|  PASSED  
+          sts_serial|  16|    100000|     500|0.83805166|  PASSED  
+          sts_serial|   1|    100000|     600|0.78485463|  PASSED  
+          sts_serial|   2|    100000|     600|0.32392650|  PASSED  
+          sts_serial|   3|    100000|     600|0.91841337|  PASSED  
+          sts_serial|   3|    100000|     600|0.41798964|  PASSED  
+          sts_serial|   4|    100000|     600|0.54476915|  PASSED  
+          sts_serial|   4|    100000|     600|0.40208091|  PASSED  
+          sts_serial|   5|    100000|     600|0.66246372|  PASSED  
+          sts_serial|   5|    100000|     600|0.42489368|  PASSED  
+          sts_serial|   6|    100000|     600|0.43583042|  PASSED  
+          sts_serial|   6|    100000|     600|0.31021111|  PASSED  
+          sts_serial|   7|    100000|     600|0.00039352|   WEAK   
+          sts_serial|   7|    100000|     600|0.00146274|   WEAK   
+          sts_serial|   8|    100000|     600|0.44118099|  PASSED  
+          sts_serial|   8|    100000|     600|0.07235683|  PASSED  
+          sts_serial|   9|    100000|     600|0.44458653|  PASSED  
+          sts_serial|   9|    100000|     600|0.81046431|  PASSED  
+          sts_serial|  10|    100000|     600|0.51987632|  PASSED  
+          sts_serial|  10|    100000|     600|0.87105281|  PASSED  
+          sts_serial|  11|    100000|     600|0.67131290|  PASSED  
+          sts_serial|  11|    100000|     600|0.85232113|  PASSED  
+          sts_serial|  12|    100000|     600|0.18431319|  PASSED  
+          sts_serial|  12|    100000|     600|0.11597416|  PASSED  
+          sts_serial|  13|    100000|     600|0.72127533|  PASSED  
+          sts_serial|  13|    100000|     600|0.16330688|  PASSED  
+          sts_serial|  14|    100000|     600|0.93531023|  PASSED  
+          sts_serial|  14|    100000|     600|0.17729286|  PASSED  
+          sts_serial|  15|    100000|     600|0.85965667|  PASSED  
+          sts_serial|  15|    100000|     600|0.44778523|  PASSED  
+          sts_serial|  16|    100000|     600|0.92673903|  PASSED  
+          sts_serial|  16|    100000|     600|0.56719213|  PASSED  
+          sts_serial|   1|    100000|     700|0.94579474|  PASSED  
+          sts_serial|   2|    100000|     700|0.08143280|  PASSED  
+          sts_serial|   3|    100000|     700|0.81955562|  PASSED  
+          sts_serial|   3|    100000|     700|0.80963159|  PASSED  
+          sts_serial|   4|    100000|     700|0.33248546|  PASSED  
+          sts_serial|   4|    100000|     700|0.59198853|  PASSED  
+          sts_serial|   5|    100000|     700|0.73958194|  PASSED  
+          sts_serial|   5|    100000|     700|0.43709310|  PASSED  
+          sts_serial|   6|    100000|     700|0.96687779|  PASSED  
+          sts_serial|   6|    100000|     700|0.68857633|  PASSED  
+          sts_serial|   7|    100000|     700|0.00089270|   WEAK   
+          sts_serial|   7|    100000|     700|0.00092661|   WEAK   
+          sts_serial|   8|    100000|     700|0.66233470|  PASSED  
+          sts_serial|   8|    100000|     700|0.13924117|  PASSED  
+          sts_serial|   9|    100000|     700|0.30536680|  PASSED  
+          sts_serial|   9|    100000|     700|0.80029719|  PASSED  
+          sts_serial|  10|    100000|     700|0.64051471|  PASSED  
+          sts_serial|  10|    100000|     700|0.83393044|  PASSED  
+          sts_serial|  11|    100000|     700|0.62712714|  PASSED  
+          sts_serial|  11|    100000|     700|0.91325196|  PASSED  
+          sts_serial|  12|    100000|     700|0.43310696|  PASSED  
+          sts_serial|  12|    100000|     700|0.34001489|  PASSED  
+          sts_serial|  13|    100000|     700|0.52875568|  PASSED  
+          sts_serial|  13|    100000|     700|0.14286094|  PASSED  
+          sts_serial|  14|    100000|     700|0.93895562|  PASSED  
+          sts_serial|  14|    100000|     700|0.29284026|  PASSED  
+          sts_serial|  15|    100000|     700|0.56926292|  PASSED  
+          sts_serial|  15|    100000|     700|0.74315221|  PASSED  
+          sts_serial|  16|    100000|     700|0.92764752|  PASSED  
+          sts_serial|  16|    100000|     700|0.97917867|  PASSED  
+          sts_serial|   1|    100000|     800|0.99992965|   WEAK   
+          sts_serial|   2|    100000|     800|0.30498925|  PASSED  
+          sts_serial|   3|    100000|     800|0.47310147|  PASSED  
+          sts_serial|   3|    100000|     800|0.55419435|  PASSED  
+          sts_serial|   4|    100000|     800|0.27240850|  PASSED  
+          sts_serial|   4|    100000|     800|0.76247014|  PASSED  
+          sts_serial|   5|    100000|     800|0.53829860|  PASSED  
+          sts_serial|   5|    100000|     800|0.67014909|  PASSED  
+          sts_serial|   6|    100000|     800|0.99361371|  PASSED  
+          sts_serial|   6|    100000|     800|0.72099846|  PASSED  
+          sts_serial|   7|    100000|     800|0.00674251|  PASSED  
+          sts_serial|   7|    100000|     800|0.00041677|   WEAK   
+          sts_serial|   8|    100000|     800|0.84526855|  PASSED  
+          sts_serial|   8|    100000|     800|0.08436608|  PASSED  
+          sts_serial|   9|    100000|     800|0.64567990|  PASSED  
+          sts_serial|   9|    100000|     800|0.77859499|  PASSED  
+          sts_serial|  10|    100000|     800|0.89803433|  PASSED  
+          sts_serial|  10|    100000|     800|0.97597483|  PASSED  
+          sts_serial|  11|    100000|     800|0.75303628|  PASSED  
+          sts_serial|  11|    100000|     800|0.70893781|  PASSED  
+          sts_serial|  12|    100000|     800|0.29705854|  PASSED  
+          sts_serial|  12|    100000|     800|0.33449916|  PASSED  
+          sts_serial|  13|    100000|     800|0.61926537|  PASSED  
+          sts_serial|  13|    100000|     800|0.08300415|  PASSED  
+          sts_serial|  14|    100000|     800|0.80560218|  PASSED  
+          sts_serial|  14|    100000|     800|0.07971245|  PASSED  
+          sts_serial|  15|    100000|     800|0.34440994|  PASSED  
+          sts_serial|  15|    100000|     800|0.86732059|  PASSED  
+          sts_serial|  16|    100000|     800|0.93641193|  PASSED  
+          sts_serial|  16|    100000|     800|0.99378250|  PASSED  
+          sts_serial|   1|    100000|     900|0.97268295|  PASSED  
+          sts_serial|   2|    100000|     900|0.26275510|  PASSED  
+          sts_serial|   3|    100000|     900|0.15139991|  PASSED  
+          sts_serial|   3|    100000|     900|0.27809823|  PASSED  
+          sts_serial|   4|    100000|     900|0.15182430|  PASSED  
+          sts_serial|   4|    100000|     900|0.63138280|  PASSED  
+          sts_serial|   5|    100000|     900|0.63265600|  PASSED  
+          sts_serial|   5|    100000|     900|0.42202151|  PASSED  
+          sts_serial|   6|    100000|     900|0.89267137|  PASSED  
+          sts_serial|   6|    100000|     900|0.83841948|  PASSED  
+          sts_serial|   7|    100000|     900|0.05245939|  PASSED  
+          sts_serial|   7|    100000|     900|0.00169352|   WEAK   
+          sts_serial|   8|    100000|     900|0.87346669|  PASSED  
+          sts_serial|   8|    100000|     900|0.10310322|  PASSED  
+          sts_serial|   9|    100000|     900|0.75809475|  PASSED  
+          sts_serial|   9|    100000|     900|0.90772018|  PASSED  
+          sts_serial|  10|    100000|     900|0.99208917|  PASSED  
+          sts_serial|  10|    100000|     900|0.80495036|  PASSED  
+          sts_serial|  11|    100000|     900|0.58769548|  PASSED  
+          sts_serial|  11|    100000|     900|0.34727661|  PASSED  
+          sts_serial|  12|    100000|     900|0.12968038|  PASSED  
+          sts_serial|  12|    100000|     900|0.34546602|  PASSED  
+          sts_serial|  13|    100000|     900|0.44569517|  PASSED  
+          sts_serial|  13|    100000|     900|0.26801594|  PASSED  
+          sts_serial|  14|    100000|     900|0.48233899|  PASSED  
+          sts_serial|  14|    100000|     900|0.19980494|  PASSED  
+          sts_serial|  15|    100000|     900|0.66126080|  PASSED  
+          sts_serial|  15|    100000|     900|0.72453315|  PASSED  
+          sts_serial|  16|    100000|     900|0.91430088|  PASSED  
+          sts_serial|  16|    100000|     900|0.87273205|  PASSED  
+          sts_serial|   1|    100000|    1000|0.82411233|  PASSED  
+          sts_serial|   2|    100000|    1000|0.26998969|  PASSED  
+          sts_serial|   3|    100000|    1000|0.14408595|  PASSED  
+          sts_serial|   3|    100000|    1000|0.44563640|  PASSED  
+          sts_serial|   4|    100000|    1000|0.18231844|  PASSED  
+          sts_serial|   4|    100000|    1000|0.41612297|  PASSED  
+          sts_serial|   5|    100000|    1000|0.59258354|  PASSED  
+          sts_serial|   5|    100000|    1000|0.37009573|  PASSED  
+          sts_serial|   6|    100000|    1000|0.97605186|  PASSED  
+          sts_serial|   6|    100000|    1000|0.83416557|  PASSED  
+          sts_serial|   7|    100000|    1000|0.02783969|  PASSED  
+          sts_serial|   7|    100000|    1000|0.00202682|   WEAK   
+          sts_serial|   8|    100000|    1000|0.71656832|  PASSED  
+          sts_serial|   8|    100000|    1000|0.00813774|  PASSED  
+          sts_serial|   9|    100000|    1000|0.46700666|  PASSED  
+          sts_serial|   9|    100000|    1000|0.56956917|  PASSED  
+          sts_serial|  10|    100000|    1000|0.82740340|  PASSED  
+          sts_serial|  10|    100000|    1000|0.77197956|  PASSED  
+          sts_serial|  11|    100000|    1000|0.14951925|  PASSED  
+          sts_serial|  11|    100000|    1000|0.16565264|  PASSED  
+          sts_serial|  12|    100000|    1000|0.05325737|  PASSED  
+          sts_serial|  12|    100000|    1000|0.48046528|  PASSED  
+          sts_serial|  13|    100000|    1000|0.30264306|  PASSED  
+          sts_serial|  13|    100000|    1000|0.48529480|  PASSED  
+          sts_serial|  14|    100000|    1000|0.34908410|  PASSED  
+          sts_serial|  14|    100000|    1000|0.31098177|  PASSED  
+          sts_serial|  15|    100000|    1000|0.42339092|  PASSED  
+          sts_serial|  15|    100000|    1000|0.52634295|  PASSED  
+          sts_serial|  16|    100000|    1000|0.82317727|  PASSED  
+          sts_serial|  16|    100000|    1000|0.91461036|  PASSED  
+          sts_serial|   1|    100000|    1100|0.91371549|  PASSED  
+          sts_serial|   2|    100000|    1100|0.47206645|  PASSED  
+          sts_serial|   3|    100000|    1100|0.06463235|  PASSED  
+          sts_serial|   3|    100000|    1100|0.57932876|  PASSED  
+          sts_serial|   4|    100000|    1100|0.07286050|  PASSED  
+          sts_serial|   4|    100000|    1100|0.29406646|  PASSED  
+          sts_serial|   5|    100000|    1100|0.30699003|  PASSED  
+          sts_serial|   5|    100000|    1100|0.54070676|  PASSED  
+          sts_serial|   6|    100000|    1100|0.71784287|  PASSED  
+          sts_serial|   6|    100000|    1100|0.84008280|  PASSED  
+          sts_serial|   7|    100000|    1100|0.08586917|  PASSED  
+          sts_serial|   7|    100000|    1100|0.00440856|   WEAK   
+          sts_serial|   8|    100000|    1100|0.44039805|  PASSED  
+          sts_serial|   8|    100000|    1100|0.00565388|  PASSED  
+          sts_serial|   9|    100000|    1100|0.37467495|  PASSED  
+          sts_serial|   9|    100000|    1100|0.69559816|  PASSED  
+          sts_serial|  10|    100000|    1100|0.65886410|  PASSED  
+          sts_serial|  10|    100000|    1100|0.95890422|  PASSED  
+          sts_serial|  11|    100000|    1100|0.06356606|  PASSED  
+          sts_serial|  11|    100000|    1100|0.06560565|  PASSED  
+          sts_serial|  12|    100000|    1100|0.04793661|  PASSED  
+          sts_serial|  12|    100000|    1100|0.48707844|  PASSED  
+          sts_serial|  13|    100000|    1100|0.80661224|  PASSED  
+          sts_serial|  13|    100000|    1100|0.14242905|  PASSED  
+          sts_serial|  14|    100000|    1100|0.51415682|  PASSED  
+          sts_serial|  14|    100000|    1100|0.21942618|  PASSED  
+          sts_serial|  15|    100000|    1100|0.20047033|  PASSED  
+          sts_serial|  15|    100000|    1100|0.22904578|  PASSED  
+          sts_serial|  16|    100000|    1100|0.66874015|  PASSED  
+          sts_serial|  16|    100000|    1100|0.94393624|  PASSED  
+          sts_serial|   1|    100000|    1200|0.83256312|  PASSED  
+          sts_serial|   2|    100000|    1200|0.54502958|  PASSED  
+          sts_serial|   3|    100000|    1200|0.30225528|  PASSED  
+          sts_serial|   3|    100000|    1200|0.67315402|  PASSED  
+          sts_serial|   4|    100000|    1200|0.07155105|  PASSED  
+          sts_serial|   4|    100000|    1200|0.18371377|  PASSED  
+          sts_serial|   5|    100000|    1200|0.17266011|  PASSED  
+          sts_serial|   5|    100000|    1200|0.72410320|  PASSED  
+          sts_serial|   6|    100000|    1200|0.50540113|  PASSED  
+          sts_serial|   6|    100000|    1200|0.76683179|  PASSED  
+          sts_serial|   7|    100000|    1200|0.31259978|  PASSED  
+          sts_serial|   7|    100000|    1200|0.00453731|   WEAK   
+          sts_serial|   8|    100000|    1200|0.56282680|  PASSED  
+          sts_serial|   8|    100000|    1200|0.05513951|  PASSED  
+          sts_serial|   9|    100000|    1200|0.62161232|  PASSED  
+          sts_serial|   9|    100000|    1200|0.46001506|  PASSED  
+          sts_serial|  10|    100000|    1200|0.76817901|  PASSED  
+          sts_serial|  10|    100000|    1200|0.93601114|  PASSED  
+          sts_serial|  11|    100000|    1200|0.07653136|  PASSED  
+          sts_serial|  11|    100000|    1200|0.08153342|  PASSED  
+          sts_serial|  12|    100000|    1200|0.14402564|  PASSED  
+          sts_serial|  12|    100000|    1200|0.42213918|  PASSED  
+          sts_serial|  13|    100000|    1200|0.80226269|  PASSED  
+          sts_serial|  13|    100000|    1200|0.34730320|  PASSED  
+          sts_serial|  14|    100000|    1200|0.49397783|  PASSED  
+          sts_serial|  14|    100000|    1200|0.15008752|  PASSED  
+          sts_serial|  15|    100000|    1200|0.17104398|  PASSED  
+          sts_serial|  15|    100000|    1200|0.24731581|  PASSED  
+          sts_serial|  16|    100000|    1200|0.49367500|  PASSED  
+          sts_serial|  16|    100000|    1200|0.82105876|  PASSED  
+          sts_serial|   1|    100000|    1300|0.92274318|  PASSED  
+          sts_serial|   2|    100000|    1300|0.63805111|  PASSED  
+          sts_serial|   3|    100000|    1300|0.36082068|  PASSED  
+          sts_serial|   3|    100000|    1300|0.70604654|  PASSED  
+          sts_serial|   4|    100000|    1300|0.11335910|  PASSED  
+          sts_serial|   4|    100000|    1300|0.21437386|  PASSED  
+          sts_serial|   5|    100000|    1300|0.29961043|  PASSED  
+          sts_serial|   5|    100000|    1300|0.63716795|  PASSED  
+          sts_serial|   6|    100000|    1300|0.37024703|  PASSED  
+          sts_serial|   6|    100000|    1300|0.65282461|  PASSED  
+          sts_serial|   7|    100000|    1300|0.24149584|  PASSED  
+          sts_serial|   7|    100000|    1300|0.00301040|   WEAK   
+          sts_serial|   8|    100000|    1300|0.34119283|  PASSED  
+          sts_serial|   8|    100000|    1300|0.03534010|  PASSED  
+          sts_serial|   9|    100000|    1300|0.30884092|  PASSED  
+          sts_serial|   9|    100000|    1300|0.18952870|  PASSED  
+          sts_serial|  10|    100000|    1300|0.63752445|  PASSED  
+          sts_serial|  10|    100000|    1300|0.42766349|  PASSED  
+          sts_serial|  11|    100000|    1300|0.04311184|  PASSED  
+          sts_serial|  11|    100000|    1300|0.11501413|  PASSED  
+          sts_serial|  12|    100000|    1300|0.16731505|  PASSED  
+          sts_serial|  12|    100000|    1300|0.60143648|  PASSED  
+          sts_serial|  13|    100000|    1300|0.60826059|  PASSED  
+          sts_serial|  13|    100000|    1300|0.53157449|  PASSED  
+          sts_serial|  14|    100000|    1300|0.43211642|  PASSED  
+          sts_serial|  14|    100000|    1300|0.19293483|  PASSED  
+          sts_serial|  15|    100000|    1300|0.12771534|  PASSED  
+          sts_serial|  15|    100000|    1300|0.30582300|  PASSED  
+          sts_serial|  16|    100000|    1300|0.63225566|  PASSED  
+          sts_serial|  16|    100000|    1300|0.93152615|  PASSED  
+          sts_serial|   1|    100000|    1400|0.77736273|  PASSED  
+          sts_serial|   2|    100000|    1400|0.56918231|  PASSED  
+          sts_serial|   3|    100000|    1400|0.55055131|  PASSED  
+          sts_serial|   3|    100000|    1400|0.81925225|  PASSED  
+          sts_serial|   4|    100000|    1400|0.17224631|  PASSED  
+          sts_serial|   4|    100000|    1400|0.31339860|  PASSED  
+          sts_serial|   5|    100000|    1400|0.32544492|  PASSED  
+          sts_serial|   5|    100000|    1400|0.52238003|  PASSED  
+          sts_serial|   6|    100000|    1400|0.56629527|  PASSED  
+          sts_serial|   6|    100000|    1400|0.69243979|  PASSED  
+          sts_serial|   7|    100000|    1400|0.08242956|  PASSED  
+          sts_serial|   7|    100000|    1400|0.00057844|   WEAK   
+          sts_serial|   8|    100000|    1400|0.39479926|  PASSED  
+          sts_serial|   8|    100000|    1400|0.04064990|  PASSED  
+          sts_serial|   9|    100000|    1400|0.40248037|  PASSED  
+          sts_serial|   9|    100000|    1400|0.18754970|  PASSED  
+          sts_serial|  10|    100000|    1400|0.48319195|  PASSED  
+          sts_serial|  10|    100000|    1400|0.43277261|  PASSED  
+          sts_serial|  11|    100000|    1400|0.06813786|  PASSED  
+          sts_serial|  11|    100000|    1400|0.15420448|  PASSED  
+          sts_serial|  12|    100000|    1400|0.39617325|  PASSED  
+          sts_serial|  12|    100000|    1400|0.45351934|  PASSED  
+          sts_serial|  13|    100000|    1400|0.74529191|  PASSED  
+          sts_serial|  13|    100000|    1400|0.61146146|  PASSED  
+          sts_serial|  14|    100000|    1400|0.47009628|  PASSED  
+          sts_serial|  14|    100000|    1400|0.21393676|  PASSED  
+          sts_serial|  15|    100000|    1400|0.12323527|  PASSED  
+          sts_serial|  15|    100000|    1400|0.31276375|  PASSED  
+          sts_serial|  16|    100000|    1400|0.75635646|  PASSED  
+          sts_serial|  16|    100000|    1400|0.94133178|  PASSED  
+          sts_serial|   1|    100000|    1500|0.81000036|  PASSED  
+          sts_serial|   2|    100000|    1500|0.98236363|  PASSED  
+          sts_serial|   3|    100000|    1500|0.72644430|  PASSED  
+          sts_serial|   3|    100000|    1500|0.90972061|  PASSED  
+          sts_serial|   4|    100000|    1500|0.32339138|  PASSED  
+          sts_serial|   4|    100000|    1500|0.55759988|  PASSED  
+          sts_serial|   5|    100000|    1500|0.54408244|  PASSED  
+          sts_serial|   5|    100000|    1500|0.46032452|  PASSED  
+          sts_serial|   6|    100000|    1500|0.69297720|  PASSED  
+          sts_serial|   6|    100000|    1500|0.64094130|  PASSED  
+          sts_serial|   7|    100000|    1500|0.05381328|  PASSED  
+          sts_serial|   7|    100000|    1500|0.00173982|   WEAK   
+          sts_serial|   8|    100000|    1500|0.39892360|  PASSED  
+          sts_serial|   8|    100000|    1500|0.02143211|  PASSED  
+          sts_serial|   9|    100000|    1500|0.35289759|  PASSED  
+          sts_serial|   9|    100000|    1500|0.20117257|  PASSED  
+          sts_serial|  10|    100000|    1500|0.56342408|  PASSED  
+          sts_serial|  10|    100000|    1500|0.27142404|  PASSED  
+          sts_serial|  11|    100000|    1500|0.04509473|  PASSED  
+          sts_serial|  11|    100000|    1500|0.01492224|  PASSED  
+          sts_serial|  12|    100000|    1500|0.53370220|  PASSED  
+          sts_serial|  12|    100000|    1500|0.47791977|  PASSED  
+          sts_serial|  13|    100000|    1500|0.89187219|  PASSED  
+          sts_serial|  13|    100000|    1500|0.51447055|  PASSED  
+          sts_serial|  14|    100000|    1500|0.43332804|  PASSED  
+          sts_serial|  14|    100000|    1500|0.31753356|  PASSED  
+          sts_serial|  15|    100000|    1500|0.18918418|  PASSED  
+          sts_serial|  15|    100000|    1500|0.43101496|  PASSED  
+          sts_serial|  16|    100000|    1500|0.93716939|  PASSED  
+          sts_serial|  16|    100000|    1500|0.86733760|  PASSED  
+          sts_serial|   1|    100000|    1600|0.76184902|  PASSED  
+          sts_serial|   2|    100000|    1600|0.99915613|   WEAK   
+          sts_serial|   3|    100000|    1600|0.76666027|  PASSED  
+          sts_serial|   3|    100000|    1600|0.92478197|  PASSED  
+          sts_serial|   4|    100000|    1600|0.47692755|  PASSED  
+          sts_serial|   4|    100000|    1600|0.46847946|  PASSED  
+          sts_serial|   5|    100000|    1600|0.78978912|  PASSED  
+          sts_serial|   5|    100000|    1600|0.25192213|  PASSED  
+          sts_serial|   6|    100000|    1600|0.73932074|  PASSED  
+          sts_serial|   6|    100000|    1600|0.59158050|  PASSED  
+          sts_serial|   7|    100000|    1600|0.04622548|  PASSED  
+          sts_serial|   7|    100000|    1600|0.00124978|   WEAK   
+          sts_serial|   8|    100000|    1600|0.32313708|  PASSED  
+          sts_serial|   8|    100000|    1600|0.00804022|  PASSED  
+          sts_serial|   9|    100000|    1600|0.42206573|  PASSED  
+          sts_serial|   9|    100000|    1600|0.39843716|  PASSED  
+          sts_serial|  10|    100000|    1600|0.49478862|  PASSED  
+          sts_serial|  10|    100000|    1600|0.49202955|  PASSED  
+          sts_serial|  11|    100000|    1600|0.02973993|  PASSED  
+          sts_serial|  11|    100000|    1600|0.01946525|  PASSED  
+          sts_serial|  12|    100000|    1600|0.39044990|  PASSED  
+          sts_serial|  12|    100000|    1600|0.38913968|  PASSED  
+          sts_serial|  13|    100000|    1600|0.95788218|  PASSED  
+          sts_serial|  13|    100000|    1600|0.35178639|  PASSED  
+          sts_serial|  14|    100000|    1600|0.56114226|  PASSED  
+          sts_serial|  14|    100000|    1600|0.40303996|  PASSED  
+          sts_serial|  15|    100000|    1600|0.12277171|  PASSED  
+          sts_serial|  15|    100000|    1600|0.43726352|  PASSED  
+          sts_serial|  16|    100000|    1600|0.88618219|  PASSED  
+          sts_serial|  16|    100000|    1600|0.78861412|  PASSED  
+          sts_serial|   1|    100000|    1700|0.63181734|  PASSED  
+          sts_serial|   2|    100000|    1700|0.99365384|  PASSED  
+          sts_serial|   3|    100000|    1700|0.71641322|  PASSED  
+          sts_serial|   3|    100000|    1700|0.70347035|  PASSED  
+          sts_serial|   4|    100000|    1700|0.62243769|  PASSED  
+          sts_serial|   4|    100000|    1700|0.49733460|  PASSED  
+          sts_serial|   5|    100000|    1700|0.83027883|  PASSED  
+          sts_serial|   5|    100000|    1700|0.29310567|  PASSED  
+          sts_serial|   6|    100000|    1700|0.70140417|  PASSED  
+          sts_serial|   6|    100000|    1700|0.52144357|  PASSED  
+          sts_serial|   7|    100000|    1700|0.04266698|  PASSED  
+          sts_serial|   7|    100000|    1700|0.00149197|   WEAK   
+          sts_serial|   8|    100000|    1700|0.30610432|  PASSED  
+          sts_serial|   8|    100000|    1700|0.00934316|  PASSED  
+          sts_serial|   9|    100000|    1700|0.54878347|  PASSED  
+          sts_serial|   9|    100000|    1700|0.60752522|  PASSED  
+          sts_serial|  10|    100000|    1700|0.43286110|  PASSED  
+          sts_serial|  10|    100000|    1700|0.45373918|  PASSED  
+          sts_serial|  11|    100000|    1700|0.07602053|  PASSED  
+          sts_serial|  11|    100000|    1700|0.04644017|  PASSED  
+          sts_serial|  12|    100000|    1700|0.50105416|  PASSED  
+          sts_serial|  12|    100000|    1700|0.59916935|  PASSED  
+          sts_serial|  13|    100000|    1700|0.71681850|  PASSED  
+          sts_serial|  13|    100000|    1700|0.30969231|  PASSED  
+          sts_serial|  14|    100000|    1700|0.88845616|  PASSED  
+          sts_serial|  14|    100000|    1700|0.60075207|  PASSED  
+          sts_serial|  15|    100000|    1700|0.20434702|  PASSED  
+          sts_serial|  15|    100000|    1700|0.48959599|  PASSED  
+          sts_serial|  16|    100000|    1700|0.98447746|  PASSED  
+          sts_serial|  16|    100000|    1700|0.83867799|  PASSED  
+          sts_serial|   1|    100000|    1800|0.58627801|  PASSED  
+          sts_serial|   2|    100000|    1800|0.98011063|  PASSED  
+          sts_serial|   3|    100000|    1800|0.77687580|  PASSED  
+          sts_serial|   3|    100000|    1800|0.73110104|  PASSED  
+          sts_serial|   4|    100000|    1800|0.47989786|  PASSED  
+          sts_serial|   4|    100000|    1800|0.45100274|  PASSED  
+          sts_serial|   5|    100000|    1800|0.83153314|  PASSED  
+          sts_serial|   5|    100000|    1800|0.33507173|  PASSED  
+          sts_serial|   6|    100000|    1800|0.36943890|  PASSED  
+          sts_serial|   6|    100000|    1800|0.45533320|  PASSED  
+          sts_serial|   7|    100000|    1800|0.04772195|  PASSED  
+          sts_serial|   7|    100000|    1800|0.00223851|   WEAK   
+          sts_serial|   8|    100000|    1800|0.54716709|  PASSED  
+          sts_serial|   8|    100000|    1800|0.01703973|  PASSED  
+          sts_serial|   9|    100000|    1800|0.59021583|  PASSED  
+          sts_serial|   9|    100000|    1800|0.30023970|  PASSED  
+          sts_serial|  10|    100000|    1800|0.29010593|  PASSED  
+          sts_serial|  10|    100000|    1800|0.27946468|  PASSED  
+          sts_serial|  11|    100000|    1800|0.09680659|  PASSED  
+          sts_serial|  11|    100000|    1800|0.03906677|  PASSED  
+          sts_serial|  12|    100000|    1800|0.32254234|  PASSED  
+          sts_serial|  12|    100000|    1800|0.49988569|  PASSED  
+          sts_serial|  13|    100000|    1800|0.57219382|  PASSED  
+          sts_serial|  13|    100000|    1800|0.29760085|  PASSED  
+          sts_serial|  14|    100000|    1800|0.81229863|  PASSED  
+          sts_serial|  14|    100000|    1800|0.69796981|  PASSED  
+          sts_serial|  15|    100000|    1800|0.44633976|  PASSED  
+          sts_serial|  15|    100000|    1800|0.27286585|  PASSED  
+          sts_serial|  16|    100000|    1800|0.96307867|  PASSED  
+          sts_serial|  16|    100000|    1800|0.72486610|  PASSED  
+          sts_serial|   1|    100000|    1900|0.75862642|  PASSED  
+          sts_serial|   2|    100000|    1900|0.97508292|  PASSED  
+          sts_serial|   3|    100000|    1900|0.57052065|  PASSED  
+          sts_serial|   3|    100000|    1900|0.90572245|  PASSED  
+          sts_serial|   4|    100000|    1900|0.38913217|  PASSED  
+          sts_serial|   4|    100000|    1900|0.58588475|  PASSED  
+          sts_serial|   5|    100000|    1900|0.88828104|  PASSED  
+          sts_serial|   5|    100000|    1900|0.31880379|  PASSED  
+          sts_serial|   6|    100000|    1900|0.36276708|  PASSED  
+          sts_serial|   6|    100000|    1900|0.51418500|  PASSED  
+          sts_serial|   7|    100000|    1900|0.05268077|  PASSED  
+          sts_serial|   7|    100000|    1900|0.00210539|   WEAK   
+          sts_serial|   8|    100000|    1900|0.73113743|  PASSED  
+          sts_serial|   8|    100000|    1900|0.01971416|  PASSED  
+          sts_serial|   9|    100000|    1900|0.66459759|  PASSED  
+          sts_serial|   9|    100000|    1900|0.22773934|  PASSED  
+          sts_serial|  10|    100000|    1900|0.44611405|  PASSED  
+          sts_serial|  10|    100000|    1900|0.21677275|  PASSED  
+          sts_serial|  11|    100000|    1900|0.06766129|  PASSED  
+          sts_serial|  11|    100000|    1900|0.02085774|  PASSED  
+          sts_serial|  12|    100000|    1900|0.23775078|  PASSED  
+          sts_serial|  12|    100000|    1900|0.49416831|  PASSED  
+          sts_serial|  13|    100000|    1900|0.66510739|  PASSED  
+          sts_serial|  13|    100000|    1900|0.22445717|  PASSED  
+          sts_serial|  14|    100000|    1900|0.70173255|  PASSED  
+          sts_serial|  14|    100000|    1900|0.58186778|  PASSED  
+          sts_serial|  15|    100000|    1900|0.37810628|  PASSED  
+          sts_serial|  15|    100000|    1900|0.19459492|  PASSED  
+          sts_serial|  16|    100000|    1900|0.99092844|  PASSED  
+          sts_serial|  16|    100000|    1900|0.72455520|  PASSED  
+          sts_serial|   1|    100000|    2000|0.50185498|  PASSED  
+          sts_serial|   2|    100000|    2000|0.94671319|  PASSED  
+          sts_serial|   3|    100000|    2000|0.49494481|  PASSED  
+          sts_serial|   3|    100000|    2000|0.96843881|  PASSED  
+          sts_serial|   4|    100000|    2000|0.34386068|  PASSED  
+          sts_serial|   4|    100000|    2000|0.36958380|  PASSED  
+          sts_serial|   5|    100000|    2000|0.70726676|  PASSED  
+          sts_serial|   5|    100000|    2000|0.35828509|  PASSED  
+          sts_serial|   6|    100000|    2000|0.35570236|  PASSED  
+          sts_serial|   6|    100000|    2000|0.59079599|  PASSED  
+          sts_serial|   7|    100000|    2000|0.04513913|  PASSED  
+          sts_serial|   7|    100000|    2000|0.00199436|   WEAK   
+          sts_serial|   8|    100000|    2000|0.74561405|  PASSED  
+          sts_serial|   8|    100000|    2000|0.01336202|  PASSED  
+          sts_serial|   9|    100000|    2000|0.57185834|  PASSED  
+          sts_serial|   9|    100000|    2000|0.24424734|  PASSED  
+          sts_serial|  10|    100000|    2000|0.49247842|  PASSED  
+          sts_serial|  10|    100000|    2000|0.18455062|  PASSED  
+          sts_serial|  11|    100000|    2000|0.10555616|  PASSED  
+          sts_serial|  11|    100000|    2000|0.01363137|  PASSED  
+          sts_serial|  12|    100000|    2000|0.23290045|  PASSED  
+          sts_serial|  12|    100000|    2000|0.37989284|  PASSED  
+          sts_serial|  13|    100000|    2000|0.85301514|  PASSED  
+          sts_serial|  13|    100000|    2000|0.24974837|  PASSED  
+          sts_serial|  14|    100000|    2000|0.57041912|  PASSED  
+          sts_serial|  14|    100000|    2000|0.47576450|  PASSED  
+          sts_serial|  15|    100000|    2000|0.35127341|  PASSED  
+          sts_serial|  15|    100000|    2000|0.10414440|  PASSED  
+          sts_serial|  16|    100000|    2000|0.98328739|  PASSED  
+          sts_serial|  16|    100000|    2000|0.79169835|  PASSED  
+          sts_serial|   1|    100000|    2100|0.47490098|  PASSED  
+          sts_serial|   2|    100000|    2100|0.84414482|  PASSED  
+          sts_serial|   3|    100000|    2100|0.50143598|  PASSED  
+          sts_serial|   3|    100000|    2100|0.95422605|  PASSED  
+          sts_serial|   4|    100000|    2100|0.37916453|  PASSED  
+          sts_serial|   4|    100000|    2100|0.30775747|  PASSED  
+          sts_serial|   5|    100000|    2100|0.56741394|  PASSED  
+          sts_serial|   5|    100000|    2100|0.56506493|  PASSED  
+          sts_serial|   6|    100000|    2100|0.28592773|  PASSED  
+          sts_serial|   6|    100000|    2100|0.52026019|  PASSED  
+          sts_serial|   7|    100000|    2100|0.09699332|  PASSED  
+          sts_serial|   7|    100000|    2100|0.00299178|   WEAK   
+          sts_serial|   8|    100000|    2100|0.81269842|  PASSED  
+          sts_serial|   8|    100000|    2100|0.02348495|  PASSED  
+          sts_serial|   9|    100000|    2100|0.62895590|  PASSED  
+          sts_serial|   9|    100000|    2100|0.19754659|  PASSED  
+          sts_serial|  10|    100000|    2100|0.71972641|  PASSED  
+          sts_serial|  10|    100000|    2100|0.22902343|  PASSED  
+          sts_serial|  11|    100000|    2100|0.09595733|  PASSED  
+          sts_serial|  11|    100000|    2100|0.00718452|  PASSED  
+          sts_serial|  12|    100000|    2100|0.23922763|  PASSED  
+          sts_serial|  12|    100000|    2100|0.52839650|  PASSED  
+          sts_serial|  13|    100000|    2100|0.90758620|  PASSED  
+          sts_serial|  13|    100000|    2100|0.30996045|  PASSED  
+          sts_serial|  14|    100000|    2100|0.55852599|  PASSED  
+          sts_serial|  14|    100000|    2100|0.44590008|  PASSED  
+          sts_serial|  15|    100000|    2100|0.32624015|  PASSED  
+          sts_serial|  15|    100000|    2100|0.09377023|  PASSED  
+          sts_serial|  16|    100000|    2100|0.98865059|  PASSED  
+          sts_serial|  16|    100000|    2100|0.59357838|  PASSED  
+          sts_serial|   1|    100000|    2200|0.44918609|  PASSED  
+          sts_serial|   2|    100000|    2200|0.80728270|  PASSED  
+          sts_serial|   3|    100000|    2200|0.61163760|  PASSED  
+          sts_serial|   3|    100000|    2200|0.99877518|   WEAK   
+          sts_serial|   4|    100000|    2200|0.32402755|  PASSED  
+          sts_serial|   4|    100000|    2200|0.50853106|  PASSED  
+          sts_serial|   5|    100000|    2200|0.57173050|  PASSED  
+          sts_serial|   5|    100000|    2200|0.74843643|  PASSED  
+          sts_serial|   6|    100000|    2200|0.58043723|  PASSED  
+          sts_serial|   6|    100000|    2200|0.76916150|  PASSED  
+          sts_serial|   7|    100000|    2200|0.15306859|  PASSED  
+          sts_serial|   7|    100000|    2200|0.00580800|  PASSED  
+          sts_serial|   8|    100000|    2200|0.80843841|  PASSED  
+          sts_serial|   8|    100000|    2200|0.03071090|  PASSED  
+          sts_serial|   9|    100000|    2200|0.68316272|  PASSED  
+          sts_serial|   9|    100000|    2200|0.27354677|  PASSED  
+          sts_serial|  10|    100000|    2200|0.82402928|  PASSED  
+          sts_serial|  10|    100000|    2200|0.27790257|  PASSED  
+          sts_serial|  11|    100000|    2200|0.09262009|  PASSED  
+          sts_serial|  11|    100000|    2200|0.01086558|  PASSED  
+          sts_serial|  12|    100000|    2200|0.24453638|  PASSED  
+          sts_serial|  12|    100000|    2200|0.52323854|  PASSED  
+          sts_serial|  13|    100000|    2200|0.88898826|  PASSED  
+          sts_serial|  13|    100000|    2200|0.29584341|  PASSED  
+          sts_serial|  14|    100000|    2200|0.59752375|  PASSED  
+          sts_serial|  14|    100000|    2200|0.39102616|  PASSED  
+          sts_serial|  15|    100000|    2200|0.43704260|  PASSED  
+          sts_serial|  15|    100000|    2200|0.13260799|  PASSED  
+          sts_serial|  16|    100000|    2200|0.99015086|  PASSED  
+          sts_serial|  16|    100000|    2200|0.52197271|  PASSED  
+          sts_serial|   1|    100000|    2300|0.44755305|  PASSED  
+          sts_serial|   2|    100000|    2300|0.86508985|  PASSED  
+          sts_serial|   3|    100000|    2300|0.70274787|  PASSED  
+          sts_serial|   3|    100000|    2300|0.98228774|  PASSED  
+          sts_serial|   4|    100000|    2300|0.32533810|  PASSED  
+          sts_serial|   4|    100000|    2300|0.42352819|  PASSED  
+          sts_serial|   5|    100000|    2300|0.58385424|  PASSED  
+          sts_serial|   5|    100000|    2300|0.78151515|  PASSED  
+          sts_serial|   6|    100000|    2300|0.72391324|  PASSED  
+          sts_serial|   6|    100000|    2300|0.61981085|  PASSED  
+          sts_serial|   7|    100000|    2300|0.15893656|  PASSED  
+          sts_serial|   7|    100000|    2300|0.01481637|  PASSED  
+          sts_serial|   8|    100000|    2300|0.83467699|  PASSED  
+          sts_serial|   8|    100000|    2300|0.03116149|  PASSED  
+          sts_serial|   9|    100000|    2300|0.72801965|  PASSED  
+          sts_serial|   9|    100000|    2300|0.20434985|  PASSED  
+          sts_serial|  10|    100000|    2300|0.79508708|  PASSED  
+          sts_serial|  10|    100000|    2300|0.25943233|  PASSED  
+          sts_serial|  11|    100000|    2300|0.05806935|  PASSED  
+          sts_serial|  11|    100000|    2300|0.01133229|  PASSED  
+          sts_serial|  12|    100000|    2300|0.32280893|  PASSED  
+          sts_serial|  12|    100000|    2300|0.46947576|  PASSED  
+          sts_serial|  13|    100000|    2300|0.91825546|  PASSED  
+          sts_serial|  13|    100000|    2300|0.30479787|  PASSED  
+          sts_serial|  14|    100000|    2300|0.50360900|  PASSED  
+          sts_serial|  14|    100000|    2300|0.24722754|  PASSED  
+          sts_serial|  15|    100000|    2300|0.51102753|  PASSED  
+          sts_serial|  15|    100000|    2300|0.07958363|  PASSED  
+          sts_serial|  16|    100000|    2300|0.99087437|  PASSED  
+          sts_serial|  16|    100000|    2300|0.86245064|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.84299386|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.77136192|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.16094576|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.82786506|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.65614955|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.20409618|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.51982583|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.57119684|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.93699028|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.14851199|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.32072911|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.71985848|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.58669648|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.70067921|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.56029570|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.03218202|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.10089228|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.81993233|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.35169436|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.95915086|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.47547304|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.99764818|   WEAK   
+      rgb_lagged_sum|   1|   1000000|     200|0.59742695|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.09261855|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.94553898|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.99708960|   WEAK   
+      rgb_lagged_sum|   4|   1000000|     200|0.30445032|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.17537517|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.68796973|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.23050463|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.19961188|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.25228769|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.33034369|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.96894967|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.22687060|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.06439499|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.78703319|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.37057974|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.72612544|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.98517311|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.74679052|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.89983005|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.40325651|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.45127906|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.25602012|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.45346967|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.73107982|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.46672596|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.77836826|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.87491781|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.94292289|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.95504266|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.22599821|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.69815285|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.08943179|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.20323250|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.23346032|  PASSED  
+             dab_dct| 256|     50000|       1|0.02458160|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.10654186|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.98020536|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.44472851|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.80526071|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.91826083|  PASSED  
+# 
+# Test duration: 158.92324526918335 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_9 b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_9
new file mode 100644
index 0000000000..e9751de1e5
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/dh/run_2/dh_9
@@ -0,0 +1,175 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.ISAACRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: /usr/bin/dieharder -a -g 200 -Y 1 -k 2 
+# 
+#=============================================================================#
+#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
+#=============================================================================#
+   rng_name    |rands/second|   Seed   |
+stdin_input_raw|  1.18e+07  | 497564842|
+#=============================================================================#
+        test_name   |ntup| tsamples |psamples|  p-value |Assessment
+#=============================================================================#
+   diehard_birthdays|   0|       100|     100|0.35374914|  PASSED  
+      diehard_operm5|   0|   1000000|     100|0.59069448|  PASSED  
+  diehard_rank_32x32|   0|     40000|     100|0.43612131|  PASSED  
+    diehard_rank_6x8|   0|    100000|     100|0.74197773|  PASSED  
+   diehard_bitstream|   0|   2097152|     100|0.83750479|  PASSED  
+        diehard_opso|   0|   2097152|     100|0.31158581|  PASSED  
+        diehard_oqso|   0|   2097152|     100|0.84060093|  PASSED  
+         diehard_dna|   0|   2097152|     100|0.42145904|  PASSED  
+diehard_count_1s_str|   0|    256000|     100|0.71132913|  PASSED  
+diehard_count_1s_byt|   0|    256000|     100|0.70714491|  PASSED  
+ diehard_parking_lot|   0|     12000|     100|0.54683180|  PASSED  
+    diehard_2dsphere|   2|      8000|     100|0.28081789|  PASSED  
+    diehard_3dsphere|   3|      4000|     100|0.78254047|  PASSED  
+     diehard_squeeze|   0|    100000|     100|0.92143241|  PASSED  
+        diehard_sums|   0|       100|     100|0.00010924|   WEAK   
+        diehard_sums|   0|       100|     200|0.00003613|   WEAK   
+        diehard_sums|   0|       100|     300|0.00013445|   WEAK   
+        diehard_sums|   0|       100|     400|0.00010952|   WEAK   
+        diehard_sums|   0|       100|     500|0.00000919|   WEAK   
+        diehard_sums|   0|       100|     600|0.00000165|   WEAK   
+        diehard_sums|   0|       100|     700|0.00000016|  FAILED  
+        diehard_runs|   0|    100000|     100|0.34008263|  PASSED  
+        diehard_runs|   0|    100000|     100|0.00670337|  PASSED  
+       diehard_craps|   0|    200000|     100|0.93617848|  PASSED  
+       diehard_craps|   0|    200000|     100|0.11439052|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.87864160|  PASSED  
+ marsaglia_tsang_gcd|   0|  10000000|     100|0.29279911|  PASSED  
+         sts_monobit|   1|    100000|     100|0.97322027|  PASSED  
+            sts_runs|   2|    100000|     100|0.32151434|  PASSED  
+          sts_serial|   1|    100000|     100|0.45816918|  PASSED  
+          sts_serial|   2|    100000|     100|0.05693067|  PASSED  
+          sts_serial|   3|    100000|     100|0.27177228|  PASSED  
+          sts_serial|   3|    100000|     100|0.62784580|  PASSED  
+          sts_serial|   4|    100000|     100|0.30933771|  PASSED  
+          sts_serial|   4|    100000|     100|0.80494271|  PASSED  
+          sts_serial|   5|    100000|     100|0.94943059|  PASSED  
+          sts_serial|   5|    100000|     100|0.20993620|  PASSED  
+          sts_serial|   6|    100000|     100|0.90542502|  PASSED  
+          sts_serial|   6|    100000|     100|0.86467206|  PASSED  
+          sts_serial|   7|    100000|     100|0.56421895|  PASSED  
+          sts_serial|   7|    100000|     100|0.86877060|  PASSED  
+          sts_serial|   8|    100000|     100|0.98525616|  PASSED  
+          sts_serial|   8|    100000|     100|0.28527702|  PASSED  
+          sts_serial|   9|    100000|     100|0.63916254|  PASSED  
+          sts_serial|   9|    100000|     100|0.12606074|  PASSED  
+          sts_serial|  10|    100000|     100|0.48519022|  PASSED  
+          sts_serial|  10|    100000|     100|0.79594465|  PASSED  
+          sts_serial|  11|    100000|     100|0.19871085|  PASSED  
+          sts_serial|  11|    100000|     100|0.19029163|  PASSED  
+          sts_serial|  12|    100000|     100|0.82889857|  PASSED  
+          sts_serial|  12|    100000|     100|0.03457363|  PASSED  
+          sts_serial|  13|    100000|     100|0.85973678|  PASSED  
+          sts_serial|  13|    100000|     100|0.36479869|  PASSED  
+          sts_serial|  14|    100000|     100|0.54213412|  PASSED  
+          sts_serial|  14|    100000|     100|0.99810579|   WEAK   
+          sts_serial|  15|    100000|     100|0.24295957|  PASSED  
+          sts_serial|  15|    100000|     100|0.10399853|  PASSED  
+          sts_serial|  16|    100000|     100|0.69927942|  PASSED  
+          sts_serial|  16|    100000|     100|0.25609478|  PASSED  
+          sts_serial|   1|    100000|     200|0.15012642|  PASSED  
+          sts_serial|   2|    100000|     200|0.44808137|  PASSED  
+          sts_serial|   3|    100000|     200|0.62375609|  PASSED  
+          sts_serial|   3|    100000|     200|0.81806595|  PASSED  
+          sts_serial|   4|    100000|     200|0.64167235|  PASSED  
+          sts_serial|   4|    100000|     200|0.99198656|  PASSED  
+          sts_serial|   5|    100000|     200|0.69024667|  PASSED  
+          sts_serial|   5|    100000|     200|0.09311174|  PASSED  
+          sts_serial|   6|    100000|     200|0.76046917|  PASSED  
+          sts_serial|   6|    100000|     200|0.90897121|  PASSED  
+          sts_serial|   7|    100000|     200|0.40768604|  PASSED  
+          sts_serial|   7|    100000|     200|0.54661418|  PASSED  
+          sts_serial|   8|    100000|     200|0.47518217|  PASSED  
+          sts_serial|   8|    100000|     200|0.10192384|  PASSED  
+          sts_serial|   9|    100000|     200|0.19074350|  PASSED  
+          sts_serial|   9|    100000|     200|0.48858586|  PASSED  
+          sts_serial|  10|    100000|     200|0.78976019|  PASSED  
+          sts_serial|  10|    100000|     200|0.32778006|  PASSED  
+          sts_serial|  11|    100000|     200|0.67548835|  PASSED  
+          sts_serial|  11|    100000|     200|0.74458339|  PASSED  
+          sts_serial|  12|    100000|     200|0.95546290|  PASSED  
+          sts_serial|  12|    100000|     200|0.16110007|  PASSED  
+          sts_serial|  13|    100000|     200|0.31546551|  PASSED  
+          sts_serial|  13|    100000|     200|0.25978662|  PASSED  
+          sts_serial|  14|    100000|     200|0.02736663|  PASSED  
+          sts_serial|  14|    100000|     200|0.16251749|  PASSED  
+          sts_serial|  15|    100000|     200|0.78060042|  PASSED  
+          sts_serial|  15|    100000|     200|0.20094257|  PASSED  
+          sts_serial|  16|    100000|     200|0.48697350|  PASSED  
+          sts_serial|  16|    100000|     200|0.43392026|  PASSED  
+         rgb_bitdist|   1|    100000|     100|0.08388708|  PASSED  
+         rgb_bitdist|   2|    100000|     100|0.74624476|  PASSED  
+         rgb_bitdist|   3|    100000|     100|0.96873964|  PASSED  
+         rgb_bitdist|   4|    100000|     100|0.65143929|  PASSED  
+         rgb_bitdist|   5|    100000|     100|0.83496501|  PASSED  
+         rgb_bitdist|   6|    100000|     100|0.67105685|  PASSED  
+         rgb_bitdist|   7|    100000|     100|0.29809745|  PASSED  
+         rgb_bitdist|   8|    100000|     100|0.94043550|  PASSED  
+         rgb_bitdist|   9|    100000|     100|0.97347808|  PASSED  
+         rgb_bitdist|  10|    100000|     100|0.99348777|  PASSED  
+         rgb_bitdist|  11|    100000|     100|0.41763768|  PASSED  
+         rgb_bitdist|  12|    100000|     100|0.03098129|  PASSED  
+rgb_minimum_distance|   2|     10000|    1000|0.31530075|  PASSED  
+rgb_minimum_distance|   3|     10000|    1000|0.81456839|  PASSED  
+rgb_minimum_distance|   4|     10000|    1000|0.36921067|  PASSED  
+rgb_minimum_distance|   5|     10000|    1000|0.90733972|  PASSED  
+    rgb_permutations|   2|    100000|     100|0.34952033|  PASSED  
+    rgb_permutations|   3|    100000|     100|0.43945554|  PASSED  
+    rgb_permutations|   4|    100000|     100|0.78184214|  PASSED  
+    rgb_permutations|   5|    100000|     100|0.39033347|  PASSED  
+      rgb_lagged_sum|   0|   1000000|     100|0.93704275|  PASSED  
+      rgb_lagged_sum|   1|   1000000|     100|0.98747394|  PASSED  
+      rgb_lagged_sum|   2|   1000000|     100|0.44799883|  PASSED  
+      rgb_lagged_sum|   3|   1000000|     100|0.19630019|  PASSED  
+      rgb_lagged_sum|   4|   1000000|     100|0.09039870|  PASSED  
+      rgb_lagged_sum|   5|   1000000|     100|0.33906385|  PASSED  
+      rgb_lagged_sum|   6|   1000000|     100|0.43332179|  PASSED  
+      rgb_lagged_sum|   7|   1000000|     100|0.69585324|  PASSED  
+      rgb_lagged_sum|   8|   1000000|     100|0.83947414|  PASSED  
+      rgb_lagged_sum|   9|   1000000|     100|0.65175667|  PASSED  
+      rgb_lagged_sum|  10|   1000000|     100|0.51247847|  PASSED  
+      rgb_lagged_sum|  11|   1000000|     100|0.14010074|  PASSED  
+      rgb_lagged_sum|  12|   1000000|     100|0.99722066|   WEAK   
+      rgb_lagged_sum|  12|   1000000|     200|0.96500133|  PASSED  
+      rgb_lagged_sum|  13|   1000000|     100|0.80390216|  PASSED  
+      rgb_lagged_sum|  14|   1000000|     100|0.18909264|  PASSED  
+      rgb_lagged_sum|  15|   1000000|     100|0.78289464|  PASSED  
+      rgb_lagged_sum|  16|   1000000|     100|0.92852678|  PASSED  
+      rgb_lagged_sum|  17|   1000000|     100|0.70690359|  PASSED  
+      rgb_lagged_sum|  18|   1000000|     100|0.28389751|  PASSED  
+      rgb_lagged_sum|  19|   1000000|     100|0.26175376|  PASSED  
+      rgb_lagged_sum|  20|   1000000|     100|0.40097449|  PASSED  
+      rgb_lagged_sum|  21|   1000000|     100|0.93922485|  PASSED  
+      rgb_lagged_sum|  22|   1000000|     100|0.62567689|  PASSED  
+      rgb_lagged_sum|  23|   1000000|     100|0.63904120|  PASSED  
+      rgb_lagged_sum|  24|   1000000|     100|0.68885659|  PASSED  
+      rgb_lagged_sum|  25|   1000000|     100|0.52922307|  PASSED  
+      rgb_lagged_sum|  26|   1000000|     100|0.76450329|  PASSED  
+      rgb_lagged_sum|  27|   1000000|     100|0.85008648|  PASSED  
+      rgb_lagged_sum|  28|   1000000|     100|0.13351208|  PASSED  
+      rgb_lagged_sum|  29|   1000000|     100|0.63907788|  PASSED  
+      rgb_lagged_sum|  30|   1000000|     100|0.92353327|  PASSED  
+      rgb_lagged_sum|  31|   1000000|     100|0.72849039|  PASSED  
+      rgb_lagged_sum|  32|   1000000|     100|0.90021014|  PASSED  
+     rgb_kstest_test|   0|     10000|    1000|0.60184224|  PASSED  
+     dab_bytedistrib|   0|  51200000|       1|0.42241921|  PASSED  
+             dab_dct| 256|     50000|       1|0.18173767|  PASSED  
+Preparing to run test 207.  ntuple = 0
+        dab_filltree|  32|  15000000|       1|0.36572673|  PASSED  
+        dab_filltree|  32|  15000000|       1|0.69629195|  PASSED  
+Preparing to run test 208.  ntuple = 0
+       dab_filltree2|   0|   5000000|       1|0.27853367|  PASSED  
+       dab_filltree2|   1|   5000000|       1|0.50830727|  PASSED  
+Preparing to run test 209.  ntuple = 0
+        dab_monobit2|  12|  65000000|       1|0.85962195|  PASSED  
+# 
+# Test duration: 147.66484655655 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_1 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_1
new file mode 100644
index 0000000000..6284523583
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_1
@@ -0,0 +1,3882 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.JDKRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.99e+9
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :  4.2e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :        0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795333120
+  j =  1                              :        600000000
+  j =  2                              :                0
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:56.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1335
+p-value of test                       :    0.78
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334455
+  j =  1                              :        599997330
+  j =  2                              :             1335
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:20.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :        0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795333120
+  j =  1                              :        600000000
+  j =  2                              :                0
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1405
+p-value of test                       :    0.14
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334525
+  j =  1                              :        599997190
+  j =  2                              :             1405
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:30.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341580
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674700
+  j =  1                              :              180
+  j =  2                              :        154974900
+  j =  3                              :         96683340
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1337
+p-value of test                       :    0.76
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334457
+  j =  1                              :        599997326
+  j =  2                              :             1337
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:29.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341381
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674501
+  j =  1                              :              379
+  j =  2                              :        154975099
+  j =  3                              :         96683141
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:32.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1341
+p-value of test                       :    0.73
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334461
+  j =  1                              :        599997318
+  j =  2                              :             1341
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341180
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674300
+  j =  1                              :              580
+  j =  2                              :        154975300
+  j =  3                              :         96682940
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:25.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1376
+p-value of test                       :    0.38
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334496
+  j =  1                              :        599997248
+  j =  2                              :             1376
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:52.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 : 11932277
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 201409327
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 4281972
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:15.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 396234610
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 313496568
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 85304229
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :  745503
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 595349080
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:03.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 5165123
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:30.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         : 1072.10
+p-value of test                       :   eps      *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  672.27
+p-value of test                       :4.1e-294    *****
+
+Test on the Nm values of W_{n,i}(mNP1):  699.85
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  714.74
+p-value of test                       :   eps      *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  714.74
+p-value of test                       :   eps      *****
+
+Test on the Nm values of W_{n,i}(mNP1):14871.66
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:14:24.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  357.37
+p-value of test                       :3.2e-157    *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  357.37
+p-value of test                       :3.2e-157    *****
+
+Test on the Nm values of W_{n,i}(mNP1): 7943.61
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:27:14.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  178.68
+p-value of test                       : 1.8e-79    *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  178.68
+p-value of test                       : 1.8e-79    *****
+
+Test on the Nm values of W_{n,i}(mNP1): 5360.52
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  > 250000     *****
+p-value of test                       :   eps      *****
+
+Stat. AD (mNP2)                       : 8.93e+6
+p-value of test                       :   eps      *****
+
+Stat. AD after spacings (mNP2-S)      : 8.93e+6
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  : 4476.86
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.89
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :32196.55
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   15.15
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  : 2.23e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  : 4075.22
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   56.22
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   29.80
+p-value of test                       :    0.9970
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  : 2.01e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  442.43
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 2.11e+6
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7191.96
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.84e-7
+p-value of test                       : 1 -  2.8e-7    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    1.00
+p-value of test                       : 4.2e-15    *****
+
+Anderson-Darling statistic = A2       :   66.57
+p-value of test                       : 1.5e-30    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :  199.09
+p-value of test                       : 7.3e-27    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   51.69
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:04:02.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :  256.62
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :29156.14
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 1.82e+6
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 5.82e+6
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         : 305341510
+p-value of test                       :   eps      *****
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743471165510
+  j =  1                              :          9476333
+  j =  2                              :         13916426
+  j =  3                              :         11242897
+  j =  4                              :         14934640
+  j =  5                              :         35016751
+
+-----------------------------------------------
+CPU time used                    :  00:03:36.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    34728
+p-value of test                       : 1 - eps1    *****
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165858728
+  j =  1                              :        399930544
+  j =  2                              :            34728
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:28.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.019
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.81
+p-value of test                       : 4.2e-29    *****
+
+Anderson-Darling statistic = A2       :   57.56
+p-value of test                       : 1.3e-26    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.06e-4
+p-value of test                       :    0.9991    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.60
+p-value of test                       : 4.8e-11    *****
+
+Anderson-Darling statistic = A2       :   29.84
+p-value of test                       : 2.0e-14    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.02e+6
+p-value of test                       : 2.9e-15    *****
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.93
+p-value of test                       : 5.9e-36    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.046
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :   56.41
+p-value of test                       : 4.1e-26    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.37
+p-value of test                       :  3.4e-3
+
+Kolmogorov-Smirnov- statistic = D-    :    0.42
+p-value of test                       :  4.4e-4    *****
+
+Anderson-Darling statistic = A2       :    5.14
+p-value of test                       :  2.5e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.35e-4
+p-value of test                       :    0.9998    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.45
+p-value of test                       :  1.9e-4    *****
+
+Anderson-Darling statistic = A2       :    9.23
+p-value of test                       :  3.3e-5    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.01e+6
+p-value of test                       :  2.1e-6    *****
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.99
+p-value of test                       : 1.8e-40    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 5.24e-3
+p-value of test                       :    0.9942
+
+Anderson-Darling statistic = A2       :   77.07
+p-value of test                       : 3.8e-35    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.47
+p-value of test                       :  5.9e-9    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.39
+p-value of test                       :  2.1e-6    *****
+
+Anderson-Darling statistic = A2       :   12.59
+p-value of test                       :  9.4e-7    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    1.00
+p-value of test                       :2.9e-106    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 2.52e-6
+p-value of test                       : 1 -  2.5e-6    *****
+
+Anderson-Darling statistic = A2       :  225.84
+p-value of test                       :5.4e-100    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.99
+p-value of test                       : 6.6e-46    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 1.99e-3
+p-value of test                       :    0.9979
+
+Anderson-Darling statistic = A2       :   91.82
+p-value of test                       : 1.3e-41    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 3.87e-4
+p-value of test                       :  2.5e-3
+
+Kolmogorov-Smirnov- statistic = D-    : 4.10e-4
+p-value of test                       :  1.2e-3
+
+Anderson-Darling statistic = A2       :    6.23
+p-value of test                       :  7.8e-4    *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.49e-5
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    : 8.53e-5
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      : 1.86e-3
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.038
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :  116.34
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.87
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :42542.13
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :  101.15
+p-value of test                       :  4.5e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   65.19
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :23743.56
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :  211.07
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   58.68
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :13232.94
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.016
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.67
+p-value of test                       :  3.2e-5    *****
+
+Anderson-Darling statistic = A2       :   11.96
+p-value of test                       :  1.8e-6    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   89.07
+p-value of test                       :  1.3e-5    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   29.50
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.69
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.63
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.72
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.92
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.056
+p-value of test                       :    0.91
+
+Anderson-Darling statistic = A2       :    1.64
+p-value of test                       :    0.15
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  104.50
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :    0.34
+p-value of test                       :    0.08
+
+Anderson-Darling statistic = A2       :    1.38
+p-value of test                       :    0.21
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17474.88
+p-value of test                       :    0.40
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :  883.35
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :  619.01
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :  434.44
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :  618.93
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :  563.57
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   22.53
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   34.66
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   33.31
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   33.14
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   11.27
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  194.70
+p-value of test                       :  4.4e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  226.66
+p-value of test                       :  2.1e-5    *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  433.65
+p-value of test                       :    0.99
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  146.19
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   64.81
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:54.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  166.74
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  151.74
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  499.15
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  129.07
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   73.84
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  345.13
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  395.32
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4950.98
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  383.38
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  222.52
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  377.34
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  395.69
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4789.59
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  363.77
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  182.86
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   18.22
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.64
+p-value of test                       :    0.74
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    4.23
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -1.49e-3
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.25
+p-value of test                       :    0.40
+
+Sample variance                       :    0.90
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.87
+p-value of test                       :    0.43
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.58
+p-value of test                       :    0.28
+
+Sample variance                       :    1.45
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.032
+p-value of test                       :  2.2e-4    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.016
+p-value of test                       :    0.11
+
+Anderson-Darling statistic = A2       :    6.74
+p-value of test                       :  4.5e-4    *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 4.86e-3
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :   0.011
+p-value of test                       :    0.37
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  : 4943.38
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+Global longest run of 1               :   26.00
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   12.51
+p-value of test                       :    0.13
+
+-----------------------------------------------
+Global longest run of 1               :   35.00
+p-value of test                       :    0.14
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.95
+p-value of test                       : 1.3e-13    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 6.32e-5
+p-value of test                       : 1 -  6.3e-5    *****
+
+Anderson-Darling statistic = A2       :   38.61
+p-value of test                       : 2.7e-18    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :   70.73
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:45.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :   0.086
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.98
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  179.20
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.60
+p-value of test                       :  2.6e-4    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.025
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    7.12
+p-value of test                       :  3.2e-4    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9518.02
+p-value of test                       :    0.9997    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.40e-3
+p-value of test                       :    0.9921
+
+Kolmogorov-Smirnov- statistic = D-    :    0.48
+p-value of test                       :  5.5e-3
+
+Anderson-Darling statistic = A2       :    4.56
+p-value of test                       :  4.9e-3
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10407.91
+p-value of test                       :  2.2e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.37
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.05
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.52
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:05:06.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.000
+p-value of test                       : 1 - eps1    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    1.00
+p-value of test                       :   eps      *****
+
+Anderson-Darling statistic = A2       :  357.37
+p-value of test                       :3.2e-157    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  :70626.35
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4881.37
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  :35758.91
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4071.97
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  : 4.45e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.33
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11859.05
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     : 8531.55
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Total number of bits:  7999997250
+
+Normal statistic for number of bits   :  -0.022
+p-value of test                       :    0.51
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   47.77
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Total number of bits:  8000096154
+
+Normal statistic for number of bits   :    0.76
+p-value of test                       :    0.22
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.46
+p-value of test                       :  9.3e-3
+
+Kolmogorov-Smirnov- statistic = D-    :    0.43
+p-value of test                       :    0.02
+
+Anderson-Darling statistic = A2       :    3.13
+p-value of test                       :    0.02
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.043
+p-value of test                       :    0.52
+
+Sample variance                       : 8.55e-3
+p-value of test                       : 1 -  8.0e-9    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.67
+p-value of test                       :  3.5e-5    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    4.98
+p-value of test                       :  3.1e-3
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.53
+p-value of test                       :    0.94
+
+Sample variance                       : 1.90e-3
+p-value of test                       : 1 - 9.3e-12    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.45
+p-value of test                       :    0.33
+
+Sample variance                       :    0.51
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.044
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.79
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.80
+p-value of test                       :    0.79
+
+Sample variance                       :    0.88
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.90
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  155
+ Total CPU time:   04:48:24.38
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+  1  SerialOver, r = 0                eps  
+  3  CollisionOver, t = 2           1 - eps1
+  5  CollisionOver, t = 3           1 - eps1
+  7  CollisionOver, t = 7             eps  
+  9  CollisionOver, t = 14            eps  
+ 11  CollisionOver, t = 21            eps  
+ 13  BirthdaySpacings, t = 2          eps  
+ 14  BirthdaySpacings, t = 3          eps  
+ 15  BirthdaySpacings, t = 4          eps  
+ 16  BirthdaySpacings, t = 7          eps  
+ 17  BirthdaySpacings, t = 7          eps  
+ 18  BirthdaySpacings, t = 8          eps  
+ 19  BirthdaySpacings, t = 8          eps  
+ 20  BirthdaySpacings, t = 16         eps  
+ 21  BirthdaySpacings, t = 16         eps  
+ 22  ClosePairs NP, t = 3             eps  
+ 22  ClosePairs mNP, t = 3         4.1e-294
+ 22  ClosePairs mNP1, t = 3           eps  
+ 22  ClosePairs mNP2, t = 3           eps  
+ 22  ClosePairs NJumps, t = 3       1 - eps1
+ 23  ClosePairs NP, t = 5             eps  
+ 23  ClosePairs mNP, t = 5            eps  
+ 23  ClosePairs mNP1, t = 5           eps  
+ 23  ClosePairs NJumps, t = 5       1 - eps1
+ 24  ClosePairs NP, t = 9          3.2e-157
+ 24  ClosePairs mNP, t = 9         3.2e-157
+ 24  ClosePairs mNP1, t = 9           eps  
+ 24  ClosePairs NJumps, t = 9       1 - eps1
+ 25  ClosePairs NP, t = 16          1.8e-79
+ 25  ClosePairs mNP, t = 16         1.8e-79
+ 25  ClosePairs mNP1, t = 16          eps  
+ 25  ClosePairs mNP2, t = 16          eps  
+ 25  ClosePairs NJumps, t = 16        eps  
+ 25  ClosePairs mNP2S, t = 16         eps  
+ 26  SimpPoker, r = 0                 eps  
+ 28  SimpPoker, r = 0                 eps  
+ 30  CouponCollector, r = 0           eps  
+ 31  CouponCollector, r = 10          eps  
+ 34  Gap, r = 0                       eps  
+ 36  Gap, r = 0                       eps  
+ 38  Run, r = 0                     7.3e-27
+ 40  Permutation, t = 3               eps  
+ 41  Permutation, t = 5               eps  
+ 42  Permutation, t = 7               eps  
+ 43  Permutation, t = 10              eps  
+ 44  CollisionPermut, r = 0           eps  
+ 45  CollisionPermut, r = 10        1 - eps1
+ 46  MaxOft AD, t = 8               1.3e-26
+ 47  MaxOft, t = 16                 2.9e-15
+ 47  MaxOft AD, t = 16              4.1e-26
+ 49  MaxOft, t = 32                  2.1e-6
+ 49  MaxOft AD, t = 32              3.8e-35
+ 50  SampleProd, t = 8               9.4e-7
+ 51  SampleProd, t = 16            5.4e-100
+ 52  SampleProd, t = 24             1.3e-41
+ 53  SampleMean, r = 0               7.8e-4
+ 57  AppearanceSpacings, r = 0        eps  
+ 59  WeightDistrib, r = 0             eps  
+ 62  WeightDistrib, r = 0             eps  
+ 63  WeightDistrib, r = 10            eps  
+ 65  SumCollector                     eps  
+ 66  MatrixRank, L=30, r=0           1.3e-5
+ 74  RandomWalk1 H (L=50, r=0)        eps  
+ 74  RandomWalk1 M (L=50, r=0)        eps  
+ 74  RandomWalk1 J (L=50, r=0)        eps  
+ 74  RandomWalk1 R (L=50, r=0)        eps  
+ 74  RandomWalk1 C (L=50, r=0)        eps  
+ 76  RandomWalk1 M (L=1000, r=0)     2.1e-5
+ 84  Fourier3, r = 0                 4.5e-4
+ 86  LongestHeadRun, r = 0            eps  
+ 86  LongestHeadRun, r = 0          1 - eps1
+ 88  PeriodsInStrings, r = 0        1 - eps1
+ 90  HammingWeight2, r = 0           0.9997 
+ 95  HammingIndep, L=30, r=0          eps  
+ 97  HammingIndep, L=300, r=0         eps  
+ 99  HammingIndep, L=1200, r=0        eps  
+ 101  Run of bits, r = 0               eps  
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1421.7311415373501 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_10 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_10
new file mode 100644
index 0000000000..bb38491f1e
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_10
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.MersenneTwister64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1403
+p-value of test                       :    0.15
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334523
+  j =  1                              :        599997194
+  j =  2                              :             1403
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:26.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1457
+p-value of test                       :  6.7e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334577
+  j =  1                              :        599997086
+  j =  2                              :             1457
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:19.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1288
+p-value of test                       :    0.98
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334408
+  j =  1                              :        599997424
+  j =  2                              :             1288
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:56.74
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1297
+p-value of test                       :    0.97
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334417
+  j =  1                              :        599997406
+  j =  2                              :             1297
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:44.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1458
+p-value of test                       :  6.2e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334578
+  j =  1                              :        599997084
+  j =  2                              :             1458
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:16.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1303
+p-value of test                       :    0.95
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334423
+  j =  1                              :        599997394
+  j =  2                              :             1303
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:10.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1416
+p-value of test                       :    0.08
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334536
+  j =  1                              :        599997168
+  j =  2                              :             1416
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:46.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1409
+p-value of test                       :    0.12
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334529
+  j =  1                              :        599997182
+  j =  2                              :             1409
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:16.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1363
+p-value of test                       :    0.51
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334483
+  j =  1                              :        599997274
+  j =  2                              :             1363
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:07.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1400
+p-value of test                       :    0.17
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334520
+  j =  1                              :        599997200
+  j =  2                              :             1400
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:59.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5392
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:26.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4244
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7481
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4235
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4343
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7330
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:03.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7404
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:02.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7303
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:06.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7367
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:39.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.78
+p-value of test                       :    0.12
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.72
+p-value of test                       :    0.54
+
+Test on the Nm values of W_{n,i}(mNP1):    0.40
+p-value of test                       :    0.85
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     941
+p-value of test                       :    0.09
+
+Stat. AD (mNP2)                       :    1.34
+p-value of test                       :    0.22
+
+Stat. AD after spacings (mNP2-S)      :    0.86
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.69
+p-value of test                       :    0.57
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.64
+p-value of test                       :    0.04
+
+Test on the Nm values of W_{n,i}(mNP1):    0.17
+p-value of test                       :    0.9963
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     611
+p-value of test                       :    0.33
+
+Stat. AD (mNP2)                       :    0.36
+p-value of test                       :    0.89
+
+Stat. AD after spacings (mNP2-S)      :    0.32
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.14
+p-value of test                       :    0.29
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.85
+p-value of test                       :    0.03
+
+Test on the Nm values of W_{n,i}(mNP1):    0.42
+p-value of test                       :    0.83
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     295
+p-value of test                       :    0.60
+
+Stat. AD (mNP2)                       :    0.89
+p-value of test                       :    0.42
+
+Stat. AD after spacings (mNP2-S)      :    1.07
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.88
+p-value of test                       :    0.11
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.70
+p-value of test                       :    0.55
+
+Test on the Nm values of W_{n,i}(mNP1):    0.37
+p-value of test                       :    0.88
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     152
+p-value of test                       :    0.45
+
+Stat. AD (mNP2)                       :    0.55
+p-value of test                       :    0.69
+
+Stat. AD after spacings (mNP2-S)      :    0.95
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.72
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.79
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :    8.61
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   18.60
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   35.12
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   40.19
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   57.76
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   56.94
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  198.51
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  429.65
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1474.17
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:03:15.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7205.53
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :   0.090
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.72
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   23.83
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.035
+p-value of test                       :    0.95
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.30
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   69.35
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:04:11.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    9.65
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  133.05
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5010.31
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45629
+p-value of test                       :    0.88
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869629
+  j =  1                              :        399908743
+  j =  2                              :            45627
+  j =  3                              :                1
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:28.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45872
+p-value of test                       :    0.51
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869872
+  j =  1                              :        399908259
+  j =  2                              :            45866
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:47.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :   0.022
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:31.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.049
+p-value of test                       :    0.84
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.16
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.35
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.30
+
+Kolmogorov-Smirnov- statistic = D-    :   0.057
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :   0.073
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.96
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.051
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:34.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.075
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    1.25
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.048
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.019
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    2.86
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.17e-4
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    : 3.61e-5
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    2.02
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.62e-5
+p-value of test                       :    0.74
+
+Kolmogorov-Smirnov- statistic = D-    : 2.20e-4
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    0.11
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.83
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.30
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.90
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   53.93
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   89.58
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   32.44
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   46.06
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   23.54
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   38.05
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.24
+p-value of test                       :    0.98
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   39.32
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.053
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    1.37
+p-value of test                       :    0.21
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   26.44
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    3.30
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.73
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.44
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.37
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  131.11
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.063
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17591.13
+p-value of test                       :    0.19
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   28.01
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.89
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   21.37
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   28.64
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.80
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   46.73
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   37.93
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   18.78
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   27.76
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    8.83
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  173.73
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  152.19
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  534.78
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  149.62
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   83.41
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  142.70
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  115.30
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  534.93
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  137.01
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   72.85
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  400.39
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  368.40
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4854.66
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  376.36
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  214.76
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  377.61
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  369.98
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5122.54
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  384.64
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  174.34
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   17.68
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -403.29
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   14.77
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.48
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :   0.072
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.93
+p-value of test                       :    0.83
+
+Sample variance                       :    1.37
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.10
+p-value of test                       :    0.46
+
+Sample variance                       :    0.37
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.016
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    : 5.72e-3
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.013
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    3.54
+p-value of test                       :    0.90
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   13.19
+p-value of test                       :    0.11
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.61
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.90
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  188.94
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :   0.030
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.07
+p-value of test                       :    0.32
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  173.91
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :   0.095
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.76
+p-value of test                       :    0.51
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9904.24
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9903.18
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.36
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.04
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.31
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:05:09.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.069
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4985.29
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.74
+
+Kolmogorov-Smirnov- statistic = D-    :    0.41
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    1.36
+p-value of test                       :    0.21
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4990.13
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4177.93
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4108.48
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11744.33
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11699.99
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   46.70
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Total number of bits:  8000048127
+
+Normal statistic for number of bits   :    0.38
+p-value of test                       :    0.35
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   50.63
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Total number of bits:  7999959627
+
+Normal statistic for number of bits   :   -0.32
+p-value of test                       :    0.63
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.088
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    1.04
+p-value of test                       :    0.33
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.12
+p-value of test                       :    0.13
+
+Sample variance                       :    0.66
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.33
+p-value of test                       :    0.37
+
+Sample variance                       :    0.82
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.50
+p-value of test                       :    0.69
+
+Sample variance                       :    1.37
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.086
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.24
+p-value of test                       :    0.40
+
+Sample variance                       :    1.13
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.85
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:20:07.21
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1350.4745436515834 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_11 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_11
new file mode 100644
index 0000000000..e33d722420
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_11
@@ -0,0 +1,3795 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.SplitMix64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1402
+p-value of test                       :    0.16
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334522
+  j =  1                              :        599997196
+  j =  2                              :             1402
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1322
+p-value of test                       :    0.87
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334442
+  j =  1                              :        599997356
+  j =  2                              :             1322
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:18.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1363
+p-value of test                       :    0.51
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334483
+  j =  1                              :        599997274
+  j =  2                              :             1363
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:53.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1399
+p-value of test                       :    0.18
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334519
+  j =  1                              :        599997202
+  j =  2                              :             1399
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1322
+p-value of test                       :    0.87
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334442
+  j =  1                              :        599997356
+  j =  2                              :             1322
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:04.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1380
+p-value of test                       :    0.34
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334500
+  j =  1                              :        599997240
+  j =  2                              :             1380
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:48.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1277
+p-value of test                       :    0.9911
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334397
+  j =  1                              :        599997446
+  j =  2                              :             1277
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:55.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1395
+p-value of test                       :    0.21
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334515
+  j =  1                              :        599997210
+  j =  2                              :             1395
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:44.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1361
+p-value of test                       :    0.53
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334481
+  j =  1                              :        599997278
+  j =  2                              :             1361
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:26.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:15.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5498
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:31.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4319
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7347
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4313
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4394
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7266
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7299
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7310
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:09.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7423
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.74
+p-value of test                       :    0.53
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.13
+p-value of test                       :    0.30
+
+Test on the Nm values of W_{n,i}(mNP1):    0.93
+p-value of test                       :    0.40
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     860
+p-value of test                       :    0.91
+
+Stat. AD (mNP2)                       :    0.55
+p-value of test                       :    0.70
+
+Stat. AD after spacings (mNP2-S)      :    1.25
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.51
+p-value of test                       :    0.74
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.08
+p-value of test                       :    0.32
+
+Test on the Nm values of W_{n,i}(mNP1):    1.37
+p-value of test                       :    0.21
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     626
+p-value of test                       :    0.15
+
+Stat. AD (mNP2)                       :    0.49
+p-value of test                       :    0.76
+
+Stat. AD after spacings (mNP2-S)      :    1.90
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.32
+p-value of test                       :    0.23
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.32
+p-value of test                       :    0.92
+
+Test on the Nm values of W_{n,i}(mNP1):    0.36
+p-value of test                       :    0.89
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     300
+p-value of test                       :    0.51
+
+Stat. AD (mNP2)                       :    0.69
+p-value of test                       :    0.56
+
+Stat. AD after spacings (mNP2-S)      :    0.21
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.27
+p-value of test                       :    0.96
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.58
+p-value of test                       :    0.16
+
+Test on the Nm values of W_{n,i}(mNP1):    0.30
+p-value of test                       :    0.94
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     141
+p-value of test                       :    0.75
+
+Stat. AD (mNP2)                       :    1.33
+p-value of test                       :    0.22
+
+Stat. AD after spacings (mNP2-S)      :    0.52
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:03:23.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.26
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.35
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   20.06
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   10.39
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   52.09
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   68.39
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   38.64
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   62.95
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  201.34
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  445.52
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1401.96
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7078.92
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   29.81
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.40
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    : 8.36e-3
+p-value of test                       :    0.9910
+
+Anderson-Darling statistic = A2       :    2.98
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   36.62
+p-value of test                       :    0.9926
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.67
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:14.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  109.13
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5105.16
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45949
+p-value of test                       :    0.37
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869949
+  j =  1                              :        399908107
+  j =  2                              :            45939
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:34.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45681
+p-value of test                       :    0.82
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869681
+  j =  1                              :        399908643
+  j =  2                              :            45671
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:48.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.099
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    0.54
+p-value of test                       :    0.71
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :  7.2e-3
+
+Kolmogorov-Smirnov- statistic = D-    :   0.059
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    1.41
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:30.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.15
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.04
+
+Anderson-Darling statistic = A2       :    2.94
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.41
+p-value of test                       :  7.3e-4    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.020
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    4.50
+p-value of test                       :  5.2e-3
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 1.99e+6
+p-value of test                       :    0.9954
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.34
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.071
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    1.05
+p-value of test                       :    0.33
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    : 8.13e-3
+p-value of test                       :    0.9905
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.062
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.98
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.082
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.017
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    1.38
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.87e-4
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    : 9.18e-5
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.05e-4
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    : 2.27e-4
+p-value of test                       :    0.13
+
+Anderson-Darling statistic = A2       :    1.22
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.82
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.75
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.04
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.81
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   73.26
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   54.58
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   49.25
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   49.80
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   25.16
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.57
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   37.44
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:02:37.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.063
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   44.54
+p-value of test                       :    0.29
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.54
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   38.62
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    6.17
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.51
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.059
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.77
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.35
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  137.23
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17385.97
+p-value of test                       :    0.59
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   29.70
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   41.56
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   19.40
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   15.60
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   24.14
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   34.06
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   24.86
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.87
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   16.00
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   19.86
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  154.24
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  164.38
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  481.61
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.39
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :  100.15
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  151.92
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  141.16
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  526.56
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  128.43
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   57.96
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  365.83
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  351.72
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4974.44
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  374.64
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  221.82
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  376.42
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  420.86
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4876.83
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  335.12
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  220.37
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.72
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.39
+p-value of test                       :    0.65
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   12.61
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    0.62
+p-value of test                       :    0.27
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   0.016
+p-value of test                       :    0.49
+
+Sample variance                       :    1.24
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.072
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.97
+p-value of test                       :    0.83
+
+Sample variance                       :    0.83
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.35e-3
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    : 6.91e-3
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.89e-3
+p-value of test                       :    0.67
+
+Kolmogorov-Smirnov- statistic = D-    : 9.25e-3
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    5.17
+p-value of test                       :    0.74
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    7.96
+p-value of test                       :    0.44
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  218.15
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  211.05
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.062
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10197.59
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:08.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.065
+p-value of test                       :    0.88
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10181.56
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.62
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.20
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.33
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:05:09.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.029
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.45
+p-value of test                       :    0.19
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4735.64
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    :   0.077
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4833.33
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4081.96
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4202.00
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11859.94
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11710.35
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   36.70
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Total number of bits:  7999988499
+
+Normal statistic for number of bits   :  -0.091
+p-value of test                       :    0.54
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   53.24
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+Total number of bits:  7999932948
+
+Normal statistic for number of bits   :   -0.53
+p-value of test                       :    0.70
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.096
+p-value of test                       :    0.78
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.69
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.67
+p-value of test                       :    0.25
+
+Sample variance                       :    0.59
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :   0.036
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.34
+p-value of test                       :    0.91
+
+Sample variance                       :    1.17
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:40.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.80
+p-value of test                       :    0.21
+
+Sample variance                       :    0.79
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.52
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.23
+p-value of test                       :    0.59
+
+Sample variance                       :    1.55
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:02:30.34
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:20:08.45
+
+ All tests were passed
+
+
+
+# 
+# Test duration: 1356.1262149745833 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_12 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_12
new file mode 100644
index 0000000000..4d9d01a942
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_12
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.XorShift1024Star
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1351
+p-value of test                       :    0.63
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334471
+  j =  1                              :        599997298
+  j =  2                              :             1351
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:20.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1363
+p-value of test                       :    0.51
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334483
+  j =  1                              :        599997274
+  j =  2                              :             1363
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1347
+p-value of test                       :    0.67
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334467
+  j =  1                              :        599997306
+  j =  2                              :             1347
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:30.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1346
+p-value of test                       :    0.68
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334466
+  j =  1                              :        599997308
+  j =  2                              :             1346
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:52.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1339
+p-value of test                       :    0.75
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334459
+  j =  1                              :        599997322
+  j =  2                              :             1339
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:16.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1412
+p-value of test                       :    0.10
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334532
+  j =  1                              :        599997176
+  j =  2                              :             1412
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:03.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1382
+p-value of test                       :    0.32
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334502
+  j =  1                              :        599997236
+  j =  2                              :             1382
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:44.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1378
+p-value of test                       :    0.36
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334498
+  j =  1                              :        599997244
+  j =  2                              :             1378
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:53.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1406
+p-value of test                       :    0.13
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334526
+  j =  1                              :        599997188
+  j =  2                              :             1406
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:00.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1326
+p-value of test                       :    0.85
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334446
+  j =  1                              :        599997348
+  j =  2                              :             1326
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5441
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:27.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4421
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7257
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4363
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4418
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7290
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:00.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7385
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:59.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7362
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:57.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7264
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.65
+p-value of test                       :    0.60
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.83
+p-value of test                       :    0.46
+
+Test on the Nm values of W_{n,i}(mNP1):    2.98
+p-value of test                       :    0.03
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     948
+p-value of test                       :    0.06
+
+Stat. AD (mNP2)                       :    1.73
+p-value of test                       :    0.13
+
+Stat. AD after spacings (mNP2-S)      :    0.85
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.00
+p-value of test                       :    0.35
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.71
+p-value of test                       :    0.13
+
+Test on the Nm values of W_{n,i}(mNP1):    1.03
+p-value of test                       :    0.34
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     578
+p-value of test                       :    0.81
+
+Stat. AD (mNP2)                       :    0.54
+p-value of test                       :    0.71
+
+Stat. AD after spacings (mNP2-S)      :    0.45
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.45
+p-value of test                       :    0.05
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.12
+p-value of test                       :    0.08
+
+Test on the Nm values of W_{n,i}(mNP1):    1.25
+p-value of test                       :    0.25
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     289
+p-value of test                       :    0.73
+
+Stat. AD (mNP2)                       :    2.77
+p-value of test                       :    0.04
+
+Stat. AD after spacings (mNP2-S)      :    0.87
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.58
+p-value of test                       :    0.66
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.77
+p-value of test                       :    0.49
+
+Test on the Nm values of W_{n,i}(mNP1):    1.01
+p-value of test                       :    0.35
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     161
+p-value of test                       :    0.19
+
+Stat. AD (mNP2)                       :    0.29
+p-value of test                       :    0.95
+
+Stat. AD after spacings (mNP2-S)      :    0.72
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    0.32
+p-value of test                       :    0.9999    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   10.67
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   18.51
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   20.49
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   61.87
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   32.45
+p-value of test                       :    0.9912
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   50.89
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   56.98
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  193.95
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  454.43
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1476.45
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7241.10
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   22.77
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   59.80
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:04:09.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    3.62
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  120.91
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4958.56
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46291
+p-value of test                       :    0.03
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870291
+  j =  1                              :        399907422
+  j =  2                              :            46283
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45938
+p-value of test                       :    0.39
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869938
+  j =  1                              :        399908127
+  j =  2                              :            45932
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:47.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.046
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.69
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.065
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.63
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:24.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.34
+
+Kolmogorov-Smirnov- statistic = D-    :   0.076
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.081
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.034
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.39
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.044
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    0.72
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:34.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.88
+p-value of test                       :    0.43
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :  1.5e-3
+
+Kolmogorov-Smirnov- statistic = D-    :   0.045
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    3.36
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    : 9.32e-3
+p-value of test                       :    0.99
+
+Anderson-Darling statistic = A2       :    1.74
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.040
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.19e-4
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    : 9.42e-5
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    0.30
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.31e-4
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    : 2.56e-4
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.32
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.69
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:00:28.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.42
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.57
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.29
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   43.47
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   78.98
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.93
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   28.48
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   30.46
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   33.93
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   33.00
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    : 7.27e-3
+p-value of test                       :    0.9922
+
+Anderson-Darling statistic = A2       :    2.23
+p-value of test                       :    0.07
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   23.85
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.062
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.34
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.34
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   47.76
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.19
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.41
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    3.12
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.82
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.018
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.51
+p-value of test                       :  2.8e-3
+
+Anderson-Darling statistic = A2       :    3.57
+p-value of test                       :    0.01
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  165.44
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.083
+p-value of test                       :    0.83
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.05
+
+Anderson-Darling statistic = A2       :    1.37
+p-value of test                       :    0.21
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17681.10
+p-value of test                       :    0.09
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   29.42
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   37.42
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.81
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   13.86
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.86
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   31.02
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   26.18
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   32.19
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   29.36
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   16.10
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  140.98
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  145.85
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  488.81
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  125.51
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   92.01
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  158.78
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.06
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  514.96
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  113.03
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   76.39
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  476.81
+p-value of test                       :  8.6e-4    *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  360.01
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5095.55
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  389.90
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  191.48
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  412.32
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  376.91
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4896.52
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  404.35
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  191.43
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   19.82
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    2.80
+p-value of test                       :  2.6e-3
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   18.32
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.46
+p-value of test                       :    0.68
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.35
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.77
+p-value of test                       :    0.12
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.40
+p-value of test                       :    0.08
+
+Sample variance                       :    0.75
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.065
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.69
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.78
+p-value of test                       :    0.78
+
+Sample variance                       :    0.92
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.010
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    : 4.09e-3
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    0.68
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.32e-3
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    : 5.56e-3
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.29
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.30
+p-value of test                       :    0.32
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.47
+p-value of test                       :    0.23
+
+-----------------------------------------------
+Global longest run of 1               :   30.00
+p-value of test                       :    0.90
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    1.45
+p-value of test                       :    0.19
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  173.14
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:02:47.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.048
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.11
+
+Anderson-Darling statistic = A2       :    2.44
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  243.67
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :   0.014
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    1.73
+p-value of test                       :    0.13
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9755.01
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.089
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.40
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    2.00
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10219.87
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.47
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.40
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.57
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:05:13.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.52
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4866.90
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.42
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    2.27
+p-value of test                       :    0.07
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4778.52
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4082.68
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4075.73
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11730.94
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11627.85
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   57.88
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Total number of bits:  8000019894
+
+Normal statistic for number of bits   :    0.16
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   74.00
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Total number of bits:  8000149914
+
+Normal statistic for number of bits   :    1.19
+p-value of test                       :    0.12
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.54
+p-value of test                       :    0.29
+
+Sample variance                       :    0.81
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.24
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.49
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.41
+p-value of test                       :    0.66
+
+Sample variance                       :    0.35
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :   0.064
+p-value of test                       :    0.89
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.65
+p-value of test                       :    0.74
+
+Sample variance                       :    1.14
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Tests on the sum of all N observations
+Standardized normal statistic         : 3.76e-3
+p-value of test                       :    0.50
+
+Sample variance                       :    0.82
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.22
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:21:23.01
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 26  SimpPoker, r = 0                0.9999 
+ 78  RandomWalk1 H (L=10000, r=0)    8.6e-4
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1358.10906162945 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_13 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_13
new file mode 100644
index 0000000000..9496500bcc
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_13
@@ -0,0 +1,3802 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.TwoCmres (Cmres: [0xedce446814d3b3d9L, 33, 330658535] + Cmres: [0xc5b3cf786c806df7L, 33, 331932042])
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1324
+p-value of test                       :    0.86
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334444
+  j =  1                              :        599997352
+  j =  2                              :             1324
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:10.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1358
+p-value of test                       :    0.56
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334478
+  j =  1                              :        599997284
+  j =  2                              :             1358
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:20.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1435
+p-value of test                       :    0.03
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334555
+  j =  1                              :        599997130
+  j =  2                              :             1435
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:13.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1414
+p-value of test                       :    0.09
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334534
+  j =  1                              :        599997172
+  j =  2                              :             1414
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:28.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1381
+p-value of test                       :    0.33
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334501
+  j =  1                              :        599997238
+  j =  2                              :             1381
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:23.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1434
+p-value of test                       :    0.03
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334554
+  j =  1                              :        599997132
+  j =  2                              :             1434
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1307
+p-value of test                       :    0.94
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334427
+  j =  1                              :        599997386
+  j =  2                              :             1307
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1269
+p-value of test                       :    0.9952
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334389
+  j =  1                              :        599997462
+  j =  2                              :             1269
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1304
+p-value of test                       :    0.95
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334424
+  j =  1                              :        599997392
+  j =  2                              :             1304
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:33.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:16.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5352
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:30.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4341
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7271
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4250
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4374
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7353
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:01.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7391
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:11.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7298
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:09.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7315
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:38.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.95
+p-value of test                       :    0.38
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.63
+p-value of test                       :    0.62
+
+Test on the Nm values of W_{n,i}(mNP1):    0.48
+p-value of test                       :    0.76
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     940
+p-value of test                       :    0.09
+
+Stat. AD (mNP2)                       :    1.43
+p-value of test                       :    0.19
+
+Stat. AD after spacings (mNP2-S)      :    1.65
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.30
+p-value of test                       :    0.94
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.75
+p-value of test                       :    0.51
+
+Test on the Nm values of W_{n,i}(mNP1):    1.02
+p-value of test                       :    0.34
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     626
+p-value of test                       :    0.15
+
+Stat. AD (mNP2)                       :    1.08
+p-value of test                       :    0.32
+
+Stat. AD after spacings (mNP2-S)      :    1.02
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.93
+p-value of test                       :    0.39
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.86
+p-value of test                       :    0.44
+
+Test on the Nm values of W_{n,i}(mNP1):    0.74
+p-value of test                       :    0.53
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     293
+p-value of test                       :    0.64
+
+Stat. AD (mNP2)                       :    0.39
+p-value of test                       :    0.85
+
+Stat. AD after spacings (mNP2-S)      :    0.54
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.05
+p-value of test                       :    0.33
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.36
+p-value of test                       :    0.88
+
+Test on the Nm values of W_{n,i}(mNP1):    0.26
+p-value of test                       :    0.97
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     159
+p-value of test                       :    0.24
+
+Stat. AD (mNP2)                       :    0.44
+p-value of test                       :    0.81
+
+Stat. AD after spacings (mNP2-S)      :    0.82
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.82
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    8.84
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   18.36
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   12.41
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   50.13
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   68.28
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   38.66
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   53.48
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  277.63
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  441.31
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1394.28
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7144.07
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.35
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   28.85
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.57
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   54.80
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:04:13.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    7.06
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  109.92
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5175.79
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46140
+p-value of test                       :    0.11
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870140
+  j =  1                              :        399907725
+  j =  2                              :            46130
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:18.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45982
+p-value of test                       :    0.32
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869982
+  j =  1                              :        399908039
+  j =  2                              :            45976
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:44.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.027
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    1.57
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :   0.045
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    0.90
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:35.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :   0.087
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.061
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.63
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.055
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :   0.066
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    1.83
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:38.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :   0.046
+p-value of test                       :    0.89
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :   0.067
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.014
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.11
+
+Anderson-Darling statistic = A2       :    1.57
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.037
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.76
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.66e-4
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    : 1.02e-4
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.58e-4
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    : 1.45e-4
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   0.095
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:00:36.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.33
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.61
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.31
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   70.47
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   72.21
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   60.84
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   54.21
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   35.14
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   28.46
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   20.00
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.33
+p-value of test                       :    0.09
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   44.04
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   43.98
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.08
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.36
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    2.73
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.60
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.65
+p-value of test                       :    0.60
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  143.40
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17362.59
+p-value of test                       :    0.64
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   37.73
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   28.10
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   24.29
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   28.24
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    4.16
+p-value of test                       :    0.9993    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   30.81
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   46.24
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   36.91
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   27.30
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   22.97
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  129.52
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  139.91
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  491.91
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  134.34
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   54.78
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  118.72
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  146.59
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  502.87
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  124.06
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   69.92
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  371.89
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  369.54
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5029.22
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  343.31
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  226.00
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  408.45
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  381.05
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5085.96
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  413.51
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  213.92
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    5.58
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    1.11
+p-value of test                       :    0.13
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    9.88
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    1.27
+p-value of test                       :    0.10
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.66
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.58
+p-value of test                       :    0.72
+
+Sample variance                       :    0.62
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:00:54.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.085
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.86
+p-value of test                       :    0.80
+
+Sample variance                       :    0.48
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.022
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    : 9.63e-3
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    2.22
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.98e-3
+p-value of test                       :    0.67
+
+Kolmogorov-Smirnov- statistic = D-    :   0.025
+p-value of test                       :  7.1e-3
+
+Anderson-Darling statistic = A2       :    2.39
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.83
+p-value of test                       :    0.21
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    6.24
+p-value of test                       :    0.62
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.082
+p-value of test                       :    0.83
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.54
+p-value of test                       :    0.70
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  219.29
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.40
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :   0.092
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    1.29
+p-value of test                       :    0.24
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  188.28
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.080
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.00
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9823.42
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.40
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9876.28
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.31
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.99
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.45
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.97e-3
+p-value of test                       :    0.9903
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5031.19
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.22
+p-value of test                       :    0.26
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4955.08
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4052.41
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 3907.79
+p-value of test                       :    0.9903
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11921.55
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11906.73
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   46.28
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Total number of bits:  8000045754
+
+Normal statistic for number of bits   :    0.36
+p-value of test                       :    0.36
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   45.11
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Total number of bits:  7999963110
+
+Normal statistic for number of bits   :   -0.29
+p-value of test                       :    0.61
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    1.37
+p-value of test                       :    0.21
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.27
+p-value of test                       :    0.90
+
+Sample variance                       :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.34
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.44
+p-value of test                       :    0.33
+
+Sample variance                       :    1.02
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.27
+p-value of test                       :    0.61
+
+Sample variance                       :    0.92
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.44
+p-value of test                       :    0.33
+
+Sample variance                       :    0.85
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.39
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:23:58.12
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 74  RandomWalk1 C (L=50, r=0)       0.9993 
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1341.5887962447334 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_2 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_2
new file mode 100644
index 0000000000..a5a08d04ad
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_2
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.MersenneTwister
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1411
+p-value of test                       :    0.11
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334531
+  j =  1                              :        599997178
+  j =  2                              :             1411
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.49
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1320
+p-value of test                       :    0.88
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334440
+  j =  1                              :        599997360
+  j =  2                              :             1320
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:09.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1376
+p-value of test                       :    0.38
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334496
+  j =  1                              :        599997248
+  j =  2                              :             1376
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1386
+p-value of test                       :    0.28
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334506
+  j =  1                              :        599997228
+  j =  2                              :             1386
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:46.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1393
+p-value of test                       :    0.22
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334513
+  j =  1                              :        599997214
+  j =  2                              :             1393
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1309
+p-value of test                       :    0.93
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334429
+  j =  1                              :        599997382
+  j =  2                              :             1309
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:06.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1372
+p-value of test                       :    0.42
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334492
+  j =  1                              :        599997256
+  j =  2                              :             1372
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:48.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1321
+p-value of test                       :    0.88
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334441
+  j =  1                              :        599997358
+  j =  2                              :             1321
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1314
+p-value of test                       :    0.91
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334434
+  j =  1                              :        599997372
+  j =  2                              :             1314
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:23.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1419
+p-value of test                       :    0.07
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334539
+  j =  1                              :        599997162
+  j =  2                              :             1419
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:25.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5515
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4488
+p-value of test                       :    0.01
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7219
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4328
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4154
+p-value of test                       :    0.9973
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7210
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:00.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7227
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7468
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:15.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7188
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.06
+p-value of test                       :    0.09
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.56
+p-value of test                       :    0.16
+
+Test on the Nm values of W_{n,i}(mNP1):    1.21
+p-value of test                       :    0.26
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     912
+p-value of test                       :    0.35
+
+Stat. AD (mNP2)                       :    2.55
+p-value of test                       :    0.05
+
+Stat. AD after spacings (mNP2-S)      :    1.59
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.58
+p-value of test                       :    0.67
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.94
+p-value of test                       :    0.39
+
+Test on the Nm values of W_{n,i}(mNP1):    0.40
+p-value of test                       :    0.85
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     608
+p-value of test                       :    0.38
+
+Stat. AD (mNP2)                       :    0.42
+p-value of test                       :    0.83
+
+Stat. AD after spacings (mNP2-S)      :    1.59
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.91
+p-value of test                       :    0.40
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.82
+p-value of test                       :    0.46
+
+Test on the Nm values of W_{n,i}(mNP1):    0.77
+p-value of test                       :    0.50
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     295
+p-value of test                       :    0.60
+
+Stat. AD (mNP2)                       :    0.68
+p-value of test                       :    0.57
+
+Stat. AD after spacings (mNP2-S)      :    0.63
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.61
+p-value of test                       :    0.63
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.58
+p-value of test                       :    0.02
+
+Test on the Nm values of W_{n,i}(mNP1):    0.44
+p-value of test                       :    0.81
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     159
+p-value of test                       :    0.24
+
+Stat. AD (mNP2)                       :    0.36
+p-value of test                       :    0.89
+
+Stat. AD after spacings (mNP2-S)      :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    3.90
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   13.09
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   15.57
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   24.53
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   57.57
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   55.74
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   59.94
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   42.26
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  239.65
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  433.97
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1417.11
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7079.51
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.68
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   24.85
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   61.90
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:04:17.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    4.02
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  128.54
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5131.07
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45973
+p-value of test                       :    0.33
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869973
+  j =  1                              :        399908059
+  j =  2                              :            45963
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:36.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45800
+p-value of test                       :    0.64
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869800
+  j =  1                              :        399908402
+  j =  2                              :            45796
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:48.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.025
+p-value of test                       :    0.94
+
+Anderson-Darling statistic = A2       :    0.98
+p-value of test                       :    0.37
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :   0.086
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    1.63
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:31.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.066
+p-value of test                       :    0.74
+
+Kolmogorov-Smirnov- statistic = D-    :   0.073
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.90
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :   0.079
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.00
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.096
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.046
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:29.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :   0.057
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.37
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.057
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.36e-4
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    : 6.86e-5
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.43e-4
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    : 1.14e-4
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    1.55
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.85
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:00:36.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.70
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   0.042
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   62.70
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   64.08
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   76.76
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   43.17
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   38.02
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   36.57
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   38.86
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:02:39.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   48.85
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :   0.092
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.72
+p-value of test                       :    0.54
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   37.83
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.28
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.86
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.48
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.32
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.36
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :   0.097
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    2.38
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  114.27
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17567.36
+p-value of test                       :    0.23
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   37.11
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   22.66
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   18.11
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   15.81
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.70
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   35.40
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   33.85
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.34
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   25.93
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   18.27
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  146.31
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  184.08
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  528.82
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  145.17
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   60.10
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  176.10
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  157.33
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  514.13
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  127.05
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   59.13
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  411.70
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  407.33
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5104.32
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  377.75
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  196.48
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  348.80
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  377.62
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4956.05
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  445.79
+p-value of test                       :  9.2e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  191.26
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   13.08
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.60
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    6.08
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.61
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.067
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    1.53
+p-value of test                       :    0.17
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.45
+p-value of test                       :    0.93
+
+Sample variance                       :    0.63
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.46
+p-value of test                       :    0.79
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.59
+p-value of test                       :    0.28
+
+Sample variance                       :    0.61
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 3.06e-3
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    :   0.013
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.68
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.017
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    : 5.67e-3
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    1.25
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.36
+p-value of test                       :    0.31
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.93
+p-value of test                       :    0.27
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.66
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  208.50
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.57
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  212.91
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.059
+p-value of test                       :    0.90
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10120.05
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.053
+p-value of test                       :    0.91
+
+Anderson-Darling statistic = A2       :    1.12
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9810.19
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    2.13
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.56
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.021
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    1.18
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5027.29
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.21
+p-value of test                       :    0.99
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4889.41
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4135.26
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4151.88
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11710.85
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11926.45
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   53.98
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Total number of bits:  7999969503
+
+Normal statistic for number of bits   :   -0.24
+p-value of test                       :    0.60
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   55.07
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Total number of bits:  8000023413
+
+Normal statistic for number of bits   :    0.19
+p-value of test                       :    0.43
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.67
+p-value of test                       :    0.75
+
+Sample variance                       :    0.62
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.38
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    :   0.084
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    2.70
+p-value of test                       :    0.04
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.87
+p-value of test                       :    0.97
+
+Sample variance                       :    0.32
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:02:34.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.096
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.19
+p-value of test                       :    0.88
+
+Sample variance                       :    1.01
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.082
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.61
+p-value of test                       :    0.73
+
+Sample variance                       :    0.80
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.51
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:19:28.47
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1337.0305257154666 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_3 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_3
new file mode 100644
index 0000000000..16fc7ab064
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_3
@@ -0,0 +1,3807 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well512a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1359
+p-value of test                       :    0.55
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334479
+  j =  1                              :        599997282
+  j =  2                              :             1359
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1318
+p-value of test                       :    0.89
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334438
+  j =  1                              :        599997364
+  j =  2                              :             1318
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:28.58
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1379
+p-value of test                       :    0.35
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334499
+  j =  1                              :        599997242
+  j =  2                              :             1379
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:32.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1360
+p-value of test                       :    0.54
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334480
+  j =  1                              :        599997280
+  j =  2                              :             1360
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:30.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1305
+p-value of test                       :    0.94
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334425
+  j =  1                              :        599997390
+  j =  2                              :             1305
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1319
+p-value of test                       :    0.89
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334439
+  j =  1                              :        599997362
+  j =  2                              :             1319
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1315
+p-value of test                       :    0.91
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334435
+  j =  1                              :        599997370
+  j =  2                              :             1315
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:40.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:55.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1412
+p-value of test                       :    0.10
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334532
+  j =  1                              :        599997176
+  j =  2                              :             1412
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:28.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1349
+p-value of test                       :    0.65
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334469
+  j =  1                              :        599997302
+  j =  2                              :             1349
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:26.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5491
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:26.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4331
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7321
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4169
+p-value of test                       :    0.9947
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4303
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:29.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7273
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:00.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7272
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:05.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7282
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7341
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:42.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.92
+p-value of test                       :    0.40
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.40
+p-value of test                       :    0.20
+
+Test on the Nm values of W_{n,i}(mNP1):    0.54
+p-value of test                       :    0.70
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     931
+p-value of test                       :    0.15
+
+Stat. AD (mNP2)                       :    1.13
+p-value of test                       :    0.29
+
+Stat. AD after spacings (mNP2-S)      :    1.58
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:03:23.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.51
+p-value of test                       :    0.73
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.68
+p-value of test                       :    0.57
+
+Test on the Nm values of W_{n,i}(mNP1):    1.74
+p-value of test                       :    0.13
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     573
+p-value of test                       :    0.86
+
+Stat. AD (mNP2)                       :    0.65
+p-value of test                       :    0.60
+
+Stat. AD after spacings (mNP2-S)      :    4.63
+p-value of test                       :  4.3e-3
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.82
+p-value of test                       :    0.46
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.26
+p-value of test                       :    0.24
+
+Test on the Nm values of W_{n,i}(mNP1):    0.96
+p-value of test                       :    0.38
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     321
+p-value of test                       :    0.12
+
+Stat. AD (mNP2)                       :    0.63
+p-value of test                       :    0.62
+
+Stat. AD after spacings (mNP2-S)      :    0.58
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:03:07.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.86
+p-value of test                       :    0.43
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.34
+p-value of test                       :    0.22
+
+Test on the Nm values of W_{n,i}(mNP1):    0.65
+p-value of test                       :    0.60
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     144
+p-value of test                       :    0.67
+
+Stat. AD (mNP2)                       :    1.31
+p-value of test                       :    0.23
+
+Stat. AD after spacings (mNP2-S)      :    0.79
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   12.74
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.38
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   27.89
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   21.01
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   51.66
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   62.96
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   59.41
+p-value of test                       :    0.29
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   64.98
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  254.17
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  468.03
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1438.79
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6973.51
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:03:07.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.014
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.55
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    2.36
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   46.99
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.022
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   72.49
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    3.61
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  132.61
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5145.71
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45840
+p-value of test                       :    0.57
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869840
+  j =  1                              :        399908323
+  j =  2                              :            45834
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45833
+p-value of test                       :    0.58
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869833
+  j =  1                              :        399908341
+  j =  2                              :            45819
+  j =  3                              :                7
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:45.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.71
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.013
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:27.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.38
+p-value of test                       :    0.87
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.054
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    1.54
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.020
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.60
+p-value of test                       :    0.15
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.092
+p-value of test                       :    0.67
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.90
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    0.90
+p-value of test                       :    0.41
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.077
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :   0.096
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.22
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.042
+p-value of test                       :    0.84
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.16
+
+Anderson-Darling statistic = A2       :    0.86
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.33
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :   0.066
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    1.89
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.24e-4
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    : 6.55e-5
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.26e-4
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    : 1.80e-4
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.52
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    2.00
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.15
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.65
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      : -8.00e-3
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.61
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   59.00
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   64.91
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   26.91
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   30.06
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   33.23
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   28.76
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:34.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :   0.099
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.69
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   42.36
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.097
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.83
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   34.95
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  : 9.41e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  : 9.41e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  146.99
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:03.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.21
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.40
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17652.01
+p-value of test                       :    0.12
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   31.66
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   36.23
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   23.96
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   22.44
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   18.08
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   28.88
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.12
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   34.25
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   20.52
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    5.60
+p-value of test                       :    0.9955
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  150.32
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  140.95
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  470.27
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  157.92
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   95.47
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  157.35
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  133.54
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  467.42
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.66
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   80.65
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  366.81
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  374.43
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5040.16
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  337.03
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  147.16
+p-value of test                       :    0.9980
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  376.66
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  379.69
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4961.81
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  314.00
+p-value of test                       :    0.9928
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  167.63
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.21
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -446.00
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.90
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -446.10
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :   0.088
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.27
+p-value of test                       :    0.96
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.24
+p-value of test                       :    0.59
+
+Sample variance                       :    1.05
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.69
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.60
+p-value of test                       :    0.27
+
+Sample variance                       :    0.62
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.97e-3
+p-value of test                       :    0.67
+
+Kolmogorov-Smirnov- statistic = D-    :   0.011
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.81e-3
+p-value of test                       :    0.60
+
+Kolmogorov-Smirnov- statistic = D-    : 9.67e-3
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.07
+p-value of test                       :    0.26
+
+-----------------------------------------------
+Global longest run of 1               :   30.00
+p-value of test                       :    0.90
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   15.08
+p-value of test                       :    0.06
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  201.30
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.87
+p-value of test                       :    0.43
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  181.72
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.72
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.24
+p-value of test                       :    0.98
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9999.96
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.24
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    2.74
+p-value of test                       :    0.04
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10035.57
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.38
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.35
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.24
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.99
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    1.77
+p-value of test                       :    0.13
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5074.74
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.42
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :   0.019
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    2.82
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4672.48
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 3991.98
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4148.82
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11855.60
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11927.04
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   90.04
+p-value of test                       :  1.5e-3
+
+
+-----------------------------------------------
+Total number of bits:  8000044224
+
+Normal statistic for number of bits   :    0.35
+p-value of test                       :    0.36
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   60.62
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Total number of bits:  8000126325
+
+Normal statistic for number of bits   :    1.00
+p-value of test                       :    0.16
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :   0.065
+p-value of test                       :    0.89
+
+Anderson-Darling statistic = A2       :    0.29
+p-value of test                       :    0.94
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.45
+p-value of test                       :    0.67
+
+Sample variance                       :    0.78
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.96
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.20
+p-value of test                       :    0.42
+
+Sample variance                       :    1.16
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:36.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    1.31
+p-value of test                       :    0.23
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.09
+p-value of test                       :    0.86
+
+Sample variance                       :    0.51
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.91
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.28
+p-value of test                       :    0.39
+
+Sample variance                       :    0.84
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.77
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:11:55.15
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 68  MatrixRank, L=1000, r=0          eps  
+ 69  MatrixRank, L=1000, r=26         eps  
+ 70  MatrixRank, L=5000               eps  
+ 71  MatrixRank, L=5000               eps  
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1354.1771220999 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_4 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_4
new file mode 100644
index 0000000000..5ac1aaea92
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_4
@@ -0,0 +1,3806 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well1024a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.24
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1420
+p-value of test                       :    0.07
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334540
+  j =  1                              :        599997160
+  j =  2                              :             1420
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:13.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1391
+p-value of test                       :    0.24
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334511
+  j =  1                              :        599997218
+  j =  2                              :             1391
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:08.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1387
+p-value of test                       :    0.27
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334507
+  j =  1                              :        599997226
+  j =  2                              :             1387
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1370
+p-value of test                       :    0.44
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334490
+  j =  1                              :        599997260
+  j =  2                              :             1370
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:25.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1436
+p-value of test                       :    0.03
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334556
+  j =  1                              :        599997128
+  j =  2                              :             1436
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:21.74
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1402
+p-value of test                       :    0.16
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334522
+  j =  1                              :        599997196
+  j =  2                              :             1402
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1462
+p-value of test                       :  4.6e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334582
+  j =  1                              :        599997076
+  j =  2                              :             1462
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:26.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1324
+p-value of test                       :    0.86
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334444
+  j =  1                              :        599997352
+  j =  2                              :             1324
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1285
+p-value of test                       :    0.98
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334405
+  j =  1                              :        599997430
+  j =  2                              :             1285
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1465
+p-value of test                       :  3.6e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334585
+  j =  1                              :        599997070
+  j =  2                              :             1465
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:36.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5534
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4344
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7285
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4301
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4411
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7405
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:01.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7463
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:54.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7190
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:07.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7395
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:18.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.67
+p-value of test                       :    0.14
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.92
+p-value of test                       :    0.40
+
+Test on the Nm values of W_{n,i}(mNP1):    0.52
+p-value of test                       :    0.73
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     904
+p-value of test                       :    0.45
+
+Stat. AD (mNP2)                       :    1.07
+p-value of test                       :    0.32
+
+Stat. AD after spacings (mNP2-S)      :    3.03
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.92
+p-value of test                       :    0.10
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.31
+p-value of test                       :    0.93
+
+Test on the Nm values of W_{n,i}(mNP1):    0.52
+p-value of test                       :    0.73
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     607
+p-value of test                       :    0.39
+
+Stat. AD (mNP2)                       :    0.50
+p-value of test                       :    0.74
+
+Stat. AD after spacings (mNP2-S)      :    2.06
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.68
+p-value of test                       :    0.57
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.26
+p-value of test                       :    0.25
+
+Test on the Nm values of W_{n,i}(mNP1):    0.48
+p-value of test                       :    0.76
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     311
+p-value of test                       :    0.27
+
+Stat. AD (mNP2)                       :    0.97
+p-value of test                       :    0.37
+
+Stat. AD after spacings (mNP2-S)      :    0.81
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.46
+p-value of test                       :    0.78
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.54
+p-value of test                       :    0.70
+
+Test on the Nm values of W_{n,i}(mNP1):    0.49
+p-value of test                       :    0.75
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     157
+p-value of test                       :    0.29
+
+Stat. AD (mNP2)                       :    1.05
+p-value of test                       :    0.33
+
+Stat. AD after spacings (mNP2-S)      :    0.98
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    7.85
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    3.60
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   24.68
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   16.12
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   55.34
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   44.36
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   49.39
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   43.06
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  211.88
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  392.34
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1414.76
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6924.29
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:03:07.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :   0.100
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.29
+p-value of test                       :    0.94
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   25.36
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.71
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   61.34
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:04:12.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.98
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  120.49
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5191.74
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45841
+p-value of test                       :    0.57
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869841
+  j =  1                              :        399908323
+  j =  2                              :            45831
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46065
+p-value of test                       :    0.19
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870065
+  j =  1                              :        399907874
+  j =  2                              :            46057
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:44.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.098
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.66
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    : 5.70e-3
+p-value of test                       :    0.9929
+
+Anderson-Darling statistic = A2       :    2.62
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:26.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.038
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.27
+
+Kolmogorov-Smirnov- statistic = D-    :   0.055
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.46
+p-value of test                       :    0.79
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.60
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    :   0.051
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    1.79
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :   0.080
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    2.85
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.56e-4
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    : 3.61e-5
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.52e-4
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    : 1.32e-4
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.42
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    3.50
+p-value of test                       :  2.3e-4    *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.76
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.48
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   78.65
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   64.75
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   57.65
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   27.75
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   42.63
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   38.83
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   27.94
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.023
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.32
+p-value of test                       :    0.11
+
+Anderson-Darling statistic = A2       :    1.47
+p-value of test                       :    0.18
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   52.75
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.028
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.35
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.50
+p-value of test                       :    0.18
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   52.77
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.31
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.07
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:42.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :   0.097
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  118.26
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.061
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    1.83
+p-value of test                       :    0.12
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17136.91
+p-value of test                       :    0.94
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   21.30
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   20.03
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   30.29
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   21.53
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   11.32
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   32.11
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.60
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   17.36
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   17.01
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   10.59
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  159.41
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  141.54
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  467.88
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  137.85
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   89.59
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  155.53
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  154.59
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  496.74
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  163.95
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   76.94
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  384.64
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  411.65
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4875.00
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  376.35
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  202.33
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  418.19
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  375.50
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5006.83
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  422.97
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  214.87
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    8.88
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -444.91
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    5.39
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -444.96
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :   0.081
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.94
+p-value of test                       :    0.83
+
+Sample variance                       :    1.01
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.079
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.00
+p-value of test                       :    0.36
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.86
+p-value of test                       :    0.81
+
+Sample variance                       :    0.93
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 4.53e-3
+p-value of test                       :    0.84
+
+Kolmogorov-Smirnov- statistic = D-    :   0.012
+p-value of test                       :    0.29
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.02e-3
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    : 7.97e-3
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   14.78
+p-value of test                       :    0.06
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    7.90
+p-value of test                       :    0.44
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  192.99
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:47.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  206.93
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :   0.077
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.92
+p-value of test                       :    0.40
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9842.94
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.76
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10053.10
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.65
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.39
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.16
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.80
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4857.01
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    2.01
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4742.79
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4009.77
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4025.10
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11737.09
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11826.52
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   63.28
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+Total number of bits:  7999901868
+
+Normal statistic for number of bits   :   -0.78
+p-value of test                       :    0.78
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   54.34
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Total number of bits:  7999949598
+
+Normal statistic for number of bits   :   -0.40
+p-value of test                       :    0.65
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.61
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.29
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.13
+p-value of test                       :    0.45
+
+Sample variance                       :    0.81
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.42
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    1.62
+p-value of test                       :    0.15
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.27
+p-value of test                       :    0.90
+
+Sample variance                       :    0.75
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :   0.034
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.36
+p-value of test                       :    0.91
+
+Sample variance                       :    1.33
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.064
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.63
+p-value of test                       :    0.62
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.84
+p-value of test                       :    0.20
+
+Sample variance                       :    0.91
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.25
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:10:36.64
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 56  SampleCorr, k = 2               2.3e-4
+ 70  MatrixRank, L=5000               eps  
+ 71  MatrixRank, L=5000               eps  
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1358.3289427190834 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_5 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_5
new file mode 100644
index 0000000000..bfcda63564
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_5
@@ -0,0 +1,3804 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :  6.2e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1380
+p-value of test                       :    0.34
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334500
+  j =  1                              :        599997240
+  j =  2                              :             1380
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:13.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1334
+p-value of test                       :    0.79
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334454
+  j =  1                              :        599997332
+  j =  2                              :             1334
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1363
+p-value of test                       :    0.51
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334483
+  j =  1                              :        599997274
+  j =  2                              :             1363
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:29.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1277
+p-value of test                       :    0.9911
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334397
+  j =  1                              :        599997446
+  j =  2                              :             1277
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1374
+p-value of test                       :    0.40
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334494
+  j =  1                              :        599997252
+  j =  2                              :             1374
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:56.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1358
+p-value of test                       :    0.56
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334478
+  j =  1                              :        599997284
+  j =  2                              :             1358
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:45.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1380
+p-value of test                       :    0.34
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334500
+  j =  1                              :        599997240
+  j =  2                              :             1380
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:18.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1333
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334453
+  j =  1                              :        599997334
+  j =  2                              :             1333
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:32.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1432
+p-value of test                       :    0.04
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334552
+  j =  1                              :        599997136
+  j =  2                              :             1432
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:35.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5416
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:25.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4243
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7315
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4288
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4344
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7396
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7251
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:54.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7358
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:59.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7369
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.87
+p-value of test                       :    0.43
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.46
+p-value of test                       :    0.78
+
+Test on the Nm values of W_{n,i}(mNP1):    2.52
+p-value of test                       :    0.05
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     839
+p-value of test                       :    0.98
+
+Stat. AD (mNP2)                       :    0.76
+p-value of test                       :    0.51
+
+Stat. AD after spacings (mNP2-S)      :    2.06
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    3.06
+p-value of test                       :    0.03
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.26
+p-value of test                       :    0.97
+
+Test on the Nm values of W_{n,i}(mNP1):    1.49
+p-value of test                       :    0.18
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     621
+p-value of test                       :    0.20
+
+Stat. AD (mNP2)                       :    0.58
+p-value of test                       :    0.66
+
+Stat. AD after spacings (mNP2-S)      :    2.20
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.73
+p-value of test                       :    0.04
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.53
+p-value of test                       :    0.72
+
+Test on the Nm values of W_{n,i}(mNP1):    0.78
+p-value of test                       :    0.49
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     303
+p-value of test                       :    0.44
+
+Stat. AD (mNP2)                       :    0.91
+p-value of test                       :    0.41
+
+Stat. AD after spacings (mNP2-S)      :    0.76
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.44
+p-value of test                       :    0.80
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.75
+p-value of test                       :    0.51
+
+Test on the Nm values of W_{n,i}(mNP1):    0.88
+p-value of test                       :    0.43
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     155
+p-value of test                       :    0.35
+
+Stat. AD (mNP2)                       :    0.19
+p-value of test                       :    0.9925
+
+Stat. AD after spacings (mNP2-S)      :    1.70
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.04
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    3.88
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   18.21
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   15.71
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   63.31
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   60.92
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   48.05
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   73.98
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  242.51
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  481.45
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1475.96
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6987.95
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :    0.38
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   30.65
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.41
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :   0.062
+p-value of test                       :    0.89
+
+Anderson-Darling statistic = A2       :    2.37
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   39.59
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:04:02.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.26
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  100.82
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5067.95
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45979
+p-value of test                       :    0.32
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869979
+  j =  1                              :        399908045
+  j =  2                              :            45973
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:17.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46218
+p-value of test                       :    0.06
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870218
+  j =  1                              :        399907566
+  j =  2                              :            46214
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:32.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.019
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.12
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.082
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :   0.064
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :   0.067
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    0.76
+p-value of test                       :    0.51
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.098
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.10
+
+Anderson-Darling statistic = A2       :    1.10
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.34
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.57
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.53
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.069
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.54
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.97
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.070
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    1.53
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.099
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.042
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.31
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.66e-4
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    : 7.05e-5
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.21e-4
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    : 1.72e-4
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.67
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -2.15
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.17
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   62.12
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   48.67
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   73.28
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   34.33
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   30.64
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   26.70
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   19.34
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.74
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   42.44
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.077
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.64
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   47.08
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.88
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.47
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    5.71
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.010
+p-value of test                       :    0.9949
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.40
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    2.55
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  151.89
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.81
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17364.37
+p-value of test                       :    0.64
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   43.10
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   36.43
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   25.39
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   30.94
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   15.14
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   42.35
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   29.93
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   25.82
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   14.97
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   16.05
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  154.08
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  171.32
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  464.57
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  112.27
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   67.77
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  148.69
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  133.69
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  458.08
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  135.77
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :  124.64
+p-value of test                       :  2.1e-4    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  432.63
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  405.71
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4825.00
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  369.97
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  202.46
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  379.96
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  391.78
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4975.04
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  405.98
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  198.05
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    8.85
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.80
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   17.02
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -403.12
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 5.23e-3
+p-value of test                       :    0.9945
+
+Kolmogorov-Smirnov- statistic = D-    :    0.50
+p-value of test                       :  3.9e-3
+
+Anderson-Darling statistic = A2       :    3.80
+p-value of test                       :    0.01
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    2.66
+p-value of test                       :  3.9e-3
+
+Sample variance                       :    0.78
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.059
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.51
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.85
+p-value of test                       :    0.80
+
+Sample variance                       :    1.33
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.017
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    : 7.82e-3
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    1.50
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 5.85e-3
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :   0.011
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    6.87
+p-value of test                       :    0.55
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.81
+p-value of test                       :    0.16
+
+-----------------------------------------------
+Global longest run of 1               :   30.00
+p-value of test                       :    0.90
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  227.87
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :   0.051
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    1.41
+p-value of test                       :    0.20
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  169.60
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:02:45.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.99
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.25
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10213.62
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.97
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10005.36
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.28
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.90
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.58
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:05:04.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    1.34
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4806.11
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :   0.080
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.26
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4777.81
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4011.25
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4087.74
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11923.85
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11790.47
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   62.77
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Total number of bits:  7999998744
+
+Normal statistic for number of bits   : -9.93e-3
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   56.15
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Total number of bits:  8000165136
+
+Normal statistic for number of bits   :    1.31
+p-value of test                       :    0.10
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.74
+p-value of test                       :    0.77
+
+Sample variance                       :    1.37
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.52
+p-value of test                       :    0.70
+
+Sample variance                       :    0.77
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    0.87
+p-value of test                       :    0.43
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.66
+p-value of test                       :    0.25
+
+Sample variance                       :    0.56
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :   0.052
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    1.30
+p-value of test                       :    0.23
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.55
+p-value of test                       :    0.94
+
+Sample variance                       :    1.53
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.71
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:13:42.18
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 77  RandomWalk1 C (L=1000, r=20)    2.1e-4
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1387.1398675355167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_6 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_6
new file mode 100644
index 0000000000..f8e08a33b9
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_6
@@ -0,0 +1,3804 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937c
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.49
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :  1.9e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1351
+p-value of test                       :    0.63
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334471
+  j =  1                              :        599997298
+  j =  2                              :             1351
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1320
+p-value of test                       :    0.88
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334440
+  j =  1                              :        599997360
+  j =  2                              :             1320
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:16.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1384
+p-value of test                       :    0.30
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334504
+  j =  1                              :        599997232
+  j =  2                              :             1384
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:35.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1348
+p-value of test                       :    0.66
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334468
+  j =  1                              :        599997304
+  j =  2                              :             1348
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:42.91
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1328
+p-value of test                       :    0.83
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334448
+  j =  1                              :        599997344
+  j =  2                              :             1328
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:36.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1348
+p-value of test                       :    0.66
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334468
+  j =  1                              :        599997304
+  j =  2                              :             1348
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:33.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1410
+p-value of test                       :    0.11
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334530
+  j =  1                              :        599997180
+  j =  2                              :             1410
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:45.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1380
+p-value of test                       :    0.34
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334500
+  j =  1                              :        599997240
+  j =  2                              :             1380
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:47.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1373
+p-value of test                       :    0.41
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334493
+  j =  1                              :        599997254
+  j =  2                              :             1373
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1303
+p-value of test                       :    0.95
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334423
+  j =  1                              :        599997394
+  j =  2                              :             1303
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:53.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5438
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4296
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7215
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:09.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4312
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4263
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7413
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7382
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:00.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7266
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:04.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7230
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:26.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.77
+p-value of test                       :    0.50
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.35
+p-value of test                       :    0.06
+
+Test on the Nm values of W_{n,i}(mNP1):    2.25
+p-value of test                       :    0.07
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     864
+p-value of test                       :    0.88
+
+Stat. AD (mNP2)                       :    3.12
+p-value of test                       :    0.02
+
+Stat. AD after spacings (mNP2-S)      :    0.50
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.41
+p-value of test                       :    0.84
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.94
+p-value of test                       :    0.10
+
+Test on the Nm values of W_{n,i}(mNP1):    1.81
+p-value of test                       :    0.12
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     577
+p-value of test                       :    0.82
+
+Stat. AD (mNP2)                       :    0.38
+p-value of test                       :    0.86
+
+Stat. AD after spacings (mNP2-S)      :    0.64
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.37
+p-value of test                       :    0.21
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.14
+p-value of test                       :    0.29
+
+Test on the Nm values of W_{n,i}(mNP1):    0.47
+p-value of test                       :    0.78
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     301
+p-value of test                       :    0.48
+
+Stat. AD (mNP2)                       :    1.54
+p-value of test                       :    0.17
+
+Stat. AD after spacings (mNP2-S)      :    1.52
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.81
+p-value of test                       :    0.47
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.41
+p-value of test                       :    0.83
+
+Test on the Nm values of W_{n,i}(mNP1):    1.13
+p-value of test                       :    0.30
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     134
+p-value of test                       :    0.90
+
+Stat. AD (mNP2)                       :    0.25
+p-value of test                       :    0.97
+
+Stat. AD after spacings (mNP2-S)      :    1.97
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    1.31
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   19.73
+p-value of test                       :  6.2e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   19.07
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   13.00
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   65.15
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   52.33
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   48.91
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   55.15
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  211.34
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  463.29
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1320.58
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7157.94
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    1.12
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   35.49
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.31
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.022
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.53
+p-value of test                       :    0.17
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   42.48
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:04:02.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    3.81
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  125.17
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4870.21
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45971
+p-value of test                       :    0.34
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869971
+  j =  1                              :        399908064
+  j =  2                              :            45959
+  j =  3                              :                6
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:25.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45872
+p-value of test                       :    0.51
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869872
+  j =  1                              :        399908261
+  j =  2                              :            45862
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:31.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.93
+p-value of test                       :    0.40
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    1.16
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :   0.030
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    2.54
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 2.99e+6
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :   0.085
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.89
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :   0.071
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.52
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.08
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.076
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.079
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:30.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.60
+
+Kolmogorov-Smirnov- statistic = D-    :   0.077
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.22
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.73e-4
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    : 1.47e-4
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    1.26
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.75e-4
+p-value of test                       :    0.30
+
+Kolmogorov-Smirnov- statistic = D-    : 2.31e-5
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    0.12
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.73
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.92
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.05
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   52.88
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.77
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   69.57
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   49.58
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   35.03
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.34
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   28.85
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   35.84
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :   0.090
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   33.62
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :   10.69
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.76
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.32
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    5.34
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  124.85
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17323.57
+p-value of test                       :    0.71
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   28.19
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   26.23
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   17.83
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   30.34
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   15.27
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   27.83
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   17.55
+p-value of test                       :    0.9939
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   16.28
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   17.80
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    7.61
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  140.47
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  119.56
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  507.62
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  159.73
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   79.13
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  115.69
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  132.27
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  491.19
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  158.09
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   63.63
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  360.50
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  375.84
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4790.75
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  363.59
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  230.71
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  391.32
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  392.61
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5130.56
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  294.19
+p-value of test                       :    0.9995    *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  182.88
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    9.61
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.76
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   24.79
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -403.01
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.31
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.085
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.51
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.76
+p-value of test                       :    0.77
+
+Sample variance                       :    0.60
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.092
+p-value of test                       :    0.54
+
+Sample variance                       :    1.51
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.06e-3
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :   0.013
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    : 9.13e-3
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    3.55
+p-value of test                       :    0.90
+
+-----------------------------------------------
+Global longest run of 1               :   30.00
+p-value of test                       :    0.90
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   15.77
+p-value of test                       :    0.05
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.66
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  196.66
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  191.15
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9940.18
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.060
+p-value of test                       :    0.90
+
+Kolmogorov-Smirnov- statistic = D-    :    0.49
+p-value of test                       :  5.4e-3
+
+Anderson-Darling statistic = A2       :    3.78
+p-value of test                       :    0.01
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10312.44
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.45
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.12
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.34
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:05:03.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4852.64
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :   0.099
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.68
+p-value of test                       :    0.57
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4829.38
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 3973.04
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 3928.71
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11948.10
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11729.91
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   60.34
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Total number of bits:  8000009034
+
+Normal statistic for number of bits   :   0.071
+p-value of test                       :    0.47
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   46.75
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Total number of bits:  8000021178
+
+Normal statistic for number of bits   :    0.17
+p-value of test                       :    0.43
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.79
+p-value of test                       :    0.22
+
+Sample variance                       :    2.01
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.029
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.38
+p-value of test                       :    0.04
+
+Anderson-Darling statistic = A2       :    2.76
+p-value of test                       :    0.04
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    2.17
+p-value of test                       :    0.01
+
+Sample variance                       :    0.65
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :   0.027
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.03
+p-value of test                       :    0.34
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.30
+p-value of test                       :    0.90
+
+Sample variance                       :    0.73
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.49
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.56
+p-value of test                       :    0.29
+
+Sample variance                       :    1.22
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.23
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:11:23.13
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 79  RandomWalk1 R (L=10000, r=15)   0.9995 
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1385.9744426398668 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_7 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_7
new file mode 100644
index 0000000000..81573d0d21
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_7
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1360
+p-value of test                       :    0.54
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334480
+  j =  1                              :        599997280
+  j =  2                              :             1360
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:17.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1344
+p-value of test                       :    0.70
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334464
+  j =  1                              :        599997312
+  j =  2                              :             1344
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:17.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1379
+p-value of test                       :    0.35
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334499
+  j =  1                              :        599997242
+  j =  2                              :             1379
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:23.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1414
+p-value of test                       :    0.09
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334534
+  j =  1                              :        599997172
+  j =  2                              :             1414
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.24
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1402
+p-value of test                       :    0.16
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334522
+  j =  1                              :        599997196
+  j =  2                              :             1402
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1345
+p-value of test                       :    0.69
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334465
+  j =  1                              :        599997310
+  j =  2                              :             1345
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:12.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1341
+p-value of test                       :    0.73
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334461
+  j =  1                              :        599997318
+  j =  2                              :             1341
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:09.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1347
+p-value of test                       :    0.67
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334467
+  j =  1                              :        599997306
+  j =  2                              :             1347
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:54.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:25.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1408
+p-value of test                       :    0.12
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334528
+  j =  1                              :        599997184
+  j =  2                              :             1408
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:01.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5393
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4350
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7246
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4438
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4382
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:30.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7422
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7374
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:59.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7249
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:06.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7280
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:28.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.47
+p-value of test                       :    0.78
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.71
+p-value of test                       :    0.55
+
+Test on the Nm values of W_{n,i}(mNP1):    0.56
+p-value of test                       :    0.69
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     916
+p-value of test                       :    0.30
+
+Stat. AD (mNP2)                       :    0.59
+p-value of test                       :    0.65
+
+Stat. AD after spacings (mNP2-S)      :    0.87
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.67
+p-value of test                       :    0.14
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.38
+p-value of test                       :    0.86
+
+Test on the Nm values of W_{n,i}(mNP1):    3.61
+p-value of test                       :    0.01
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     676
+p-value of test                       :  1.2e-3
+
+Stat. AD (mNP2)                       :    0.94
+p-value of test                       :    0.39
+
+Stat. AD after spacings (mNP2-S)      :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.36
+p-value of test                       :    0.88
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.49
+p-value of test                       :    0.18
+
+Test on the Nm values of W_{n,i}(mNP1):    0.97
+p-value of test                       :    0.37
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     284
+p-value of test                       :    0.81
+
+Stat. AD (mNP2)                       :    0.73
+p-value of test                       :    0.54
+
+Stat. AD after spacings (mNP2-S)      :    0.46
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.45
+p-value of test                       :    0.79
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.70
+p-value of test                       :    0.14
+
+Test on the Nm values of W_{n,i}(mNP1):    1.20
+p-value of test                       :    0.27
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     132
+p-value of test                       :    0.93
+
+Stat. AD (mNP2)                       :    0.28
+p-value of test                       :    0.95
+
+Stat. AD after spacings (mNP2-S)      :    0.50
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:03:25.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   11.13
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:01:14.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.19
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :    9.17
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   14.62
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   47.66
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   71.86
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   61.49
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   51.37
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  235.27
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  459.22
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1462.49
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7002.64
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:03:09.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.63
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   24.98
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.38
+p-value of test                       :    0.04
+
+Anderson-Darling statistic = A2       :    2.77
+p-value of test                       :    0.04
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   89.23
+p-value of test                       :  8.5e-3
+
+-----------------------------------------------
+CPU time used                    :  00:04:06.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    1.16
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  107.71
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5076.36
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45918
+p-value of test                       :    0.43
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869918
+  j =  1                              :        399908170
+  j =  2                              :            45906
+  j =  3                              :                6
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45407
+p-value of test                       :    0.99
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869407
+  j =  1                              :        399909188
+  j =  2                              :            45403
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:37.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.014
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.053
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :   0.076
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.38
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.42
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:07.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.057
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.05
+p-value of test                       :    0.33
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.39
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.098
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.52
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.084
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :   0.072
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :   0.085
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.87e-5
+p-value of test                       :    0.78
+
+Kolmogorov-Smirnov- statistic = D-    : 2.94e-4
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    2.25
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.94e-4
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    : 8.14e-5
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    2.24
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.42
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   0.021
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.12
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -2.07
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   68.55
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   75.27
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   50.42
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   32.02
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.81
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   31.37
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   22.20
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   40.39
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.098
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   45.28
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.70
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.36
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.58
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.075
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.61
+
+Anderson-Darling statistic = A2       :    1.34
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  127.63
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.051
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    :    0.47
+p-value of test                       :  7.1e-3
+
+Anderson-Darling statistic = A2       :    2.89
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17802.22
+p-value of test                       :    0.02
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   41.68
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   33.82
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.03
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   21.48
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   23.70
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   46.96
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   51.92
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   23.85
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   15.80
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   26.79
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  131.60
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  142.49
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  482.51
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  149.59
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   66.23
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  133.88
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  166.02
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  474.51
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  121.47
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :  110.83
+p-value of test                       :  3.6e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  353.26
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  365.40
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4905.45
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  410.15
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  220.82
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  408.50
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  387.22
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5245.83
+p-value of test                       :  7.6e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  319.40
+p-value of test                       :    0.99
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  183.15
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.85
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.61
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    9.73
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -348.16
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.096
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    2.39
+p-value of test                       :    0.06
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.48
+p-value of test                       :    0.93
+
+Sample variance                       :    1.90
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :   0.093
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.93
+p-value of test                       :    0.40
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.94
+p-value of test                       :    0.83
+
+Sample variance                       :    0.53
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.014
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    : 4.64e-3
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.25e-3
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    : 7.01e-3
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.37
+p-value of test                       :    0.18
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    6.13
+p-value of test                       :    0.63
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.60
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.57
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.97
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  193.61
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  224.51
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.65
+p-value of test                       :    0.60
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9935.01
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.076
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10095.73
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.17
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.057
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.016
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:05:07.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.42
+p-value of test                       :    0.02
+
+Anderson-Darling statistic = A2       :    1.52
+p-value of test                       :    0.17
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4996.60
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4939.53
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4106.04
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4044.42
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11704.68
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11967.80
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   52.58
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Total number of bits:  8000055867
+
+Normal statistic for number of bits   :    0.44
+p-value of test                       :    0.33
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   57.35
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Total number of bits:  7999978341
+
+Normal statistic for number of bits   :   -0.17
+p-value of test                       :    0.57
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    1.29
+p-value of test                       :    0.24
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.83
+p-value of test                       :    0.80
+
+Sample variance                       :    0.26
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:02:45.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.77
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.46
+p-value of test                       :    0.68
+
+Sample variance                       :    0.80
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.53
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.11
+p-value of test                       :    0.54
+
+Sample variance                       :    0.82
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.49
+p-value of test                       :  4.7e-3
+
+Kolmogorov-Smirnov- statistic = D-    :   0.066
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    3.65
+p-value of test                       :    0.01
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -2.36
+p-value of test                       :    0.9909
+
+Sample variance                       :    1.81
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.11
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:17:30.27
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1382.4792521782833 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_8 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_8
new file mode 100644
index 0000000000..042d209bfc
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_8
@@ -0,0 +1,3804 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497b
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1367
+p-value of test                       :    0.47
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334487
+  j =  1                              :        599997266
+  j =  2                              :             1367
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:17.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1394
+p-value of test                       :    0.21
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334514
+  j =  1                              :        599997212
+  j =  2                              :             1394
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:19.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1347
+p-value of test                       :    0.67
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334467
+  j =  1                              :        599997306
+  j =  2                              :             1347
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:53.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1375
+p-value of test                       :    0.39
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334495
+  j =  1                              :        599997250
+  j =  2                              :             1375
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:44.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1410
+p-value of test                       :    0.11
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334530
+  j =  1                              :        599997180
+  j =  2                              :             1410
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:31.99
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1420
+p-value of test                       :    0.07
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334540
+  j =  1                              :        599997160
+  j =  2                              :             1420
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:05.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1357
+p-value of test                       :    0.57
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334477
+  j =  1                              :        599997286
+  j =  2                              :             1357
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:43.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1332
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334452
+  j =  1                              :        599997336
+  j =  2                              :             1332
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:39.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1290
+p-value of test                       :    0.98
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334410
+  j =  1                              :        599997420
+  j =  2                              :             1290
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1295
+p-value of test                       :    0.97
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334415
+  j =  1                              :        599997410
+  j =  2                              :             1295
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:04.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5478
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:27.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4573
+p-value of test                       :  1.9e-4    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7342
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4284
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4338
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7496
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7320
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:01.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7290
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:06.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7179
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:36.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.51
+p-value of test                       :    0.74
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.77
+p-value of test                       :    0.50
+
+Test on the Nm values of W_{n,i}(mNP1):    0.83
+p-value of test                       :    0.46
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     896
+p-value of test                       :    0.54
+
+Stat. AD (mNP2)                       :    0.55
+p-value of test                       :    0.69
+
+Stat. AD after spacings (mNP2-S)      :    2.82
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.39
+p-value of test                       :    0.06
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.50
+p-value of test                       :    0.75
+
+Test on the Nm values of W_{n,i}(mNP1):    2.08
+p-value of test                       :    0.08
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     574
+p-value of test                       :    0.85
+
+Stat. AD (mNP2)                       :    0.78
+p-value of test                       :    0.49
+
+Stat. AD after spacings (mNP2-S)      :    0.58
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.26
+p-value of test                       :    0.96
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.45
+p-value of test                       :    0.19
+
+Test on the Nm values of W_{n,i}(mNP1):    0.37
+p-value of test                       :    0.88
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     297
+p-value of test                       :    0.55
+
+Stat. AD (mNP2)                       :    1.10
+p-value of test                       :    0.31
+
+Stat. AD after spacings (mNP2-S)      :    0.67
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.34
+p-value of test                       :    0.90
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.61
+p-value of test                       :    0.63
+
+Test on the Nm values of W_{n,i}(mNP1):    1.14
+p-value of test                       :    0.29
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     134
+p-value of test                       :    0.90
+
+Stat. AD (mNP2)                       :    1.42
+p-value of test                       :    0.20
+
+Stat. AD after spacings (mNP2-S)      :    0.88
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:03:23.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    9.36
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.67
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   23.66
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   13.62
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   58.90
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   49.51
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   64.98
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   60.28
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  259.99
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  425.54
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1418.24
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:03:29.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6835.94
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   32.81
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    : 1.58e-3
+p-value of test                       :    0.9984
+
+Anderson-Darling statistic = A2       :    2.82
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   38.69
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:04:08.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    2.47
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:14.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :   97.05
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4996.02
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45834
+p-value of test                       :    0.58
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869834
+  j =  1                              :        399908336
+  j =  2                              :            45826
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45984
+p-value of test                       :    0.31
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869984
+  j =  1                              :        399908038
+  j =  2                              :            45972
+  j =  3                              :                6
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:12.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.086
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.050
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.018
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.27
+p-value of test                       :    0.24
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.084
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :   0.099
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.30
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :   0.082
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.067
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.13
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.025
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.32
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :   0.058
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    0.65
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.52
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.21
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 4.62e-5
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    : 3.03e-4
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    3.00
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.36e-4
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    : 7.68e-5
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    1.34
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.23
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.12
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.50
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.62
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.00
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   51.09
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   81.17
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   40.63
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   52.00
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   27.47
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   32.05
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.080
+p-value of test                       :    0.84
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.42
+p-value of test                       :    0.82
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   44.08
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    1.25
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   33.20
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.73
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :   10.37
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.04
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.21
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.093
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    1.13
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  120.36
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17464.80
+p-value of test                       :    0.42
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   35.67
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   32.14
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   28.28
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   26.69
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.26
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   33.31
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   33.59
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   24.19
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   25.15
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   11.21
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  173.57
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.33
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  500.31
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  141.20
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   55.13
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  153.76
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.92
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  554.61
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.61
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   71.25
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  349.81
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  351.18
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4872.11
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  387.05
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  218.17
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  393.09
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  419.42
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5053.80
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  321.70
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  173.17
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   13.22
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.70
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   14.75
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.91
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.80e-3
+p-value of test                       :    0.9905
+
+Kolmogorov-Smirnov- statistic = D-    :    0.39
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    2.23
+p-value of test                       :    0.07
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.91
+p-value of test                       :    0.03
+
+Sample variance                       :    1.43
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.05
+
+Anderson-Darling statistic = A2       :    1.54
+p-value of test                       :    0.17
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.77
+p-value of test                       :    0.22
+
+Sample variance                       :    1.50
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:04.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.18e-3
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    : 7.37e-3
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.22
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.019
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    : 8.79e-3
+p-value of test                       :    0.53
+
+Anderson-Darling statistic = A2       :    1.51
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    8.08
+p-value of test                       :    0.43
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    5.09
+p-value of test                       :    0.75
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    0.63
+p-value of test                       :    0.62
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  188.63
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:02:39.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  189.12
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10098.41
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    0.70
+p-value of test                       :    0.55
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9864.25
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.29
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.78
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.96
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4930.52
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.061
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.89
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4830.96
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4136.98
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4129.07
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11802.32
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11807.12
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   68.52
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Total number of bits:  7999965123
+
+Normal statistic for number of bits   :   -0.28
+p-value of test                       :    0.61
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   51.24
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Total number of bits:  7999812477
+
+Normal statistic for number of bits   :   -1.48
+p-value of test                       :    0.93
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.30
+p-value of test                       :    0.38
+
+Sample variance                       :    0.65
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.075
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.46
+p-value of test                       :  8.9e-3
+
+Anderson-Darling statistic = A2       :    2.68
+p-value of test                       :    0.04
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.89
+p-value of test                       :    0.03
+
+Sample variance                       :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.042
+p-value of test                       :    0.94
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.68
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.85
+p-value of test                       :    0.80
+
+Sample variance                       :    0.71
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.64
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.029
+p-value of test                       :    0.51
+
+Sample variance                       :    0.44
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.02
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:13:26.34
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 14  BirthdaySpacings, t = 3         1.9e-4
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1477.9368014822332 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_9 b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_9
new file mode 100644
index 0000000000..c937529bd8
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_1/tu_9
@@ -0,0 +1,3802 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.ISAACRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ./stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1372
+p-value of test                       :    0.42
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334492
+  j =  1                              :        599997256
+  j =  2                              :             1372
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:03:53.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1366
+p-value of test                       :    0.48
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334486
+  j =  1                              :        599997268
+  j =  2                              :             1366
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:20.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1311
+p-value of test                       :    0.92
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334431
+  j =  1                              :        599997378
+  j =  2                              :             1311
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:19.83
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1346
+p-value of test                       :    0.68
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334466
+  j =  1                              :        599997308
+  j =  2                              :             1346
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:34.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1325
+p-value of test                       :    0.85
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334445
+  j =  1                              :        599997350
+  j =  2                              :             1325
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:30.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1352
+p-value of test                       :    0.62
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334472
+  j =  1                              :        599997296
+  j =  2                              :             1352
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:30.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1383
+p-value of test                       :    0.31
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334503
+  j =  1                              :        599997234
+  j =  2                              :             1383
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1362
+p-value of test                       :    0.52
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334482
+  j =  1                              :        599997276
+  j =  2                              :             1362
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:21.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1403
+p-value of test                       :    0.15
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334523
+  j =  1                              :        599997194
+  j =  2                              :             1403
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:24.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1316
+p-value of test                       :    0.90
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334436
+  j =  1                              :        599997368
+  j =  2                              :             1316
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:33.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5382
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:27.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4342
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7369
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4267
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4322
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7370
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7307
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7286
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:05.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7279
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:43.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.73
+p-value of test                       :    0.13
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.35
+p-value of test                       :    0.89
+
+Test on the Nm values of W_{n,i}(mNP1):    0.62
+p-value of test                       :    0.63
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     901
+p-value of test                       :    0.49
+
+Stat. AD (mNP2)                       :    0.65
+p-value of test                       :    0.60
+
+Stat. AD after spacings (mNP2-S)      :    1.18
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.29
+p-value of test                       :    0.23
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.71
+p-value of test                       :    0.04
+
+Test on the Nm values of W_{n,i}(mNP1):    1.05
+p-value of test                       :    0.33
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     625
+p-value of test                       :    0.16
+
+Stat. AD (mNP2)                       :    1.09
+p-value of test                       :    0.31
+
+Stat. AD after spacings (mNP2-S)      :    2.03
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.66
+p-value of test                       :    0.59
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.31
+p-value of test                       :    0.23
+
+Test on the Nm values of W_{n,i}(mNP1):    0.35
+p-value of test                       :    0.90
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     291
+p-value of test                       :    0.69
+
+Stat. AD (mNP2)                       :    0.55
+p-value of test                       :    0.70
+
+Stat. AD after spacings (mNP2-S)      :    0.63
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.97
+p-value of test                       :    0.37
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.08
+p-value of test                       :    0.32
+
+Test on the Nm values of W_{n,i}(mNP1):    1.11
+p-value of test                       :    0.30
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     141
+p-value of test                       :    0.75
+
+Stat. AD (mNP2)                       :    1.20
+p-value of test                       :    0.27
+
+Stat. AD after spacings (mNP2-S)      :    1.48
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:03:23.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    2.57
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    2.13
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   20.64
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   27.26
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   71.32
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   49.62
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   39.61
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   58.34
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  212.90
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  423.15
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1417.79
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7051.18
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.048
+p-value of test                       :    0.94
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.21
+
+Anderson-Darling statistic = A2       :    1.19
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   40.38
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.089
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.33
+p-value of test                       :    0.09
+
+Anderson-Darling statistic = A2       :    2.20
+p-value of test                       :    0.07
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   84.56
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:04:13.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :   10.87
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  149.44
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4928.58
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45961
+p-value of test                       :    0.35
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869961
+  j =  1                              :        399908081
+  j =  2                              :            45955
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:34.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46224
+p-value of test                       :    0.05
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870224
+  j =  1                              :        399907556
+  j =  2                              :            46216
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:51.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.089
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :   0.070
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.042
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:24.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.041
+p-value of test                       :    0.88
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.87
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :   0.032
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    1.45
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.017
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.57
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.066
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.03
+
+Anderson-Darling statistic = A2       :    1.75
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.056
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.16
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :   0.075
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.42
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.022
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.59e-5
+p-value of test                       :    0.69
+
+Kolmogorov-Smirnov- statistic = D-    : 1.93e-4
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 3.61e-5
+p-value of test                       :    0.95
+
+Kolmogorov-Smirnov- statistic = D-    : 2.62e-4
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    2.12
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   0.039
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.17
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.91
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.28
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   78.24
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   79.68
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   78.44
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   27.21
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   37.89
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   20.56
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   22.88
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:02:39.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   38.94
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   35.01
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.78
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.72
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    4.54
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.59
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    2.55
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  159.65
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.54
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17552.41
+p-value of test                       :    0.26
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   34.71
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   30.01
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   35.36
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   32.12
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   25.95
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   24.84
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   43.56
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   33.11
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   36.15
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    9.63
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  115.15
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  127.96
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  512.87
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  116.63
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   57.59
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  159.05
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  135.08
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  500.42
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  121.42
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   72.44
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  359.13
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  369.42
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5006.15
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  389.03
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  185.96
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  382.08
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  380.27
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5041.99
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  423.64
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  230.31
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.09
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -1.81
+p-value of test                       :    0.96
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.87
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -1.16
+p-value of test                       :    0.88
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.42
+p-value of test                       :    0.34
+
+Sample variance                       :    0.61
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.96
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.20
+p-value of test                       :    0.42
+
+Sample variance                       :    0.95
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.91e-3
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    : 6.37e-3
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    : 2.46e-3
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    0.78
+p-value of test                       :    0.9993    *****
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.85
+p-value of test                       :    0.16
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    1.18
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  175.15
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.059
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    1.21
+p-value of test                       :    0.26
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  172.28
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.50
+p-value of test                       :  3.7e-3
+
+Anderson-Darling statistic = A2       :    2.43
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10154.73
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9967.06
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:01:08.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.74
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      : -2.80e-3
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.26
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:05:12.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    1.40
+p-value of test                       :    0.20
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4765.56
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.90
+p-value of test                       :    0.41
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4813.41
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4131.76
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4094.39
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :12084.34
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11638.80
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   60.56
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Total number of bits:  7999919499
+
+Normal statistic for number of bits   :   -0.64
+p-value of test                       :    0.74
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   71.69
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Total number of bits:  8000141367
+
+Normal statistic for number of bits   :    1.12
+p-value of test                       :    0.13
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.79
+p-value of test                       :    0.78
+
+Sample variance                       :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.082
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.86
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.57
+p-value of test                       :    0.72
+
+Sample variance                       :    1.13
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:37.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   0.029
+p-value of test                       :    0.49
+
+Sample variance                       :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.79
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.55
+p-value of test                       :    0.71
+
+Sample variance                       :    1.13
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.38
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:23:21.40
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 86  LongestHeadRun, r = 0           0.9993 
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1357.4324548405 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_1 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_1
new file mode 100644
index 0000000000..d6c69916a7
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_1
@@ -0,0 +1,3879 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.JDKRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.99e+9
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.9969
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :        0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795333120
+  j =  1                              :        600000000
+  j =  2                              :                0
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:40.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1306
+p-value of test                       :    0.94
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334426
+  j =  1                              :        599997388
+  j =  2                              :             1306
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :        0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795333120
+  j =  1                              :        600000000
+  j =  2                              :                0
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:31.99
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1369
+p-value of test                       :    0.45
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334489
+  j =  1                              :        599997262
+  j =  2                              :             1369
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:19.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341582
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674702
+  j =  1                              :              178
+  j =  2                              :        154974898
+  j =  3                              :         96683342
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:03:53.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1344
+p-value of test                       :    0.70
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334464
+  j =  1                              :        599997312
+  j =  2                              :             1344
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:00.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341375
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674495
+  j =  1                              :              385
+  j =  2                              :        154975105
+  j =  3                              :         96683135
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:48.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1275
+p-value of test                       :    0.9923
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334395
+  j =  1                              :        599997450
+  j =  2                              :             1275
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:12.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         : 348341178
+p-value of test                       :   eps      *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131941143674298
+  j =  1                              :              582
+  j =  2                              :        154975302
+  j =  3                              :         96682938
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:45.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1325
+p-value of test                       :    0.85
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334445
+  j =  1                              :        599997350
+  j =  2                              :             1325
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:48.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 : 11931429
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:15.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 201419736
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 4285944
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:00.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 396240529
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:36.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 : 313506243
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 85305678
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :  743608
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:05.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 595343120
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:51.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 : 5161744
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         : 1072.10
+p-value of test                       :   eps      *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  659.39
+p-value of test                       :1.6e-288    *****
+
+Test on the Nm values of W_{n,i}(mNP1):  685.89
+p-value of test                       :4.9e-300    *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  714.74
+p-value of test                       :   eps      *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  714.74
+p-value of test                       :   eps      *****
+
+Test on the Nm values of W_{n,i}(mNP1):15894.16
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:14:47.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../probdist/gofs.c  on line  462
+*********  gofs_AndersonDarling:   N <= 0
+*********  WARNING in file  ../../probdist/fbar.c  on line  499
+*********  fbar_AndersonDarling:   N < 1
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  357.37
+p-value of test                       :3.2e-157    *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  357.37
+p-value of test                       :3.2e-157    *****
+
+Test on the Nm values of W_{n,i}(mNP1): 7905.81
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :       0
+p-value of test                       : 1 - eps1    *****
+
+-----------------------------------------------
+CPU time used                    :  00:26:35.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+*********  WARNING in file  ../../testu01/snpair.c  on line  294
+*********  res->NumClose > 50000
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :  178.68
+p-value of test                       : 1.8e-79    *****
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :  178.68
+p-value of test                       : 1.8e-79    *****
+
+Test on the Nm values of W_{n,i}(mNP1): 5360.52
+p-value of test                       :   eps      *****
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  > 250000     *****
+p-value of test                       :   eps      *****
+
+Stat. AD (mNP2)                       : 8.93e+6
+p-value of test                       :   eps      *****
+
+Stat. AD after spacings (mNP2-S)      : 8.93e+6
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:03.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  : 5673.94
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    9.44
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :87575.57
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   21.65
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  : 2.45e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  : 3203.42
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   45.90
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   50.41
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  : 2.07e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  410.41
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1.90e+6
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7006.74
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.39
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :    0.48
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.56
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   29.53
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.098
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    1.19
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   71.83
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:04:05.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :  289.84
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :24864.07
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 1.85e+6
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 5.80e+6
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         : 305495062
+p-value of test                       :   eps      *****
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743471319062
+  j =  1                              :          9455393
+  j =  2                              :         13752518
+  j =  3                              :         11160341
+  j =  4                              :         14999848
+  j =  5                              :         35033422
+
+-----------------------------------------------
+CPU time used                    :  00:03:47.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    34439
+p-value of test                       : 1 - eps1    *****
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165858439
+  j =  1                              :        399931123
+  j =  2                              :            34437
+  j =  3                              :                1
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.37
+p-value of test                       :  7.8e-6    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 1.76e-3
+p-value of test                       :    0.9981
+
+Anderson-Darling statistic = A2       :   12.40
+p-value of test                       :  1.1e-6    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 3.99e+6
+p-value of test                       : 1 -  1.4e-6    *****
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.04e-4
+p-value of test                       :    0.9994    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.91
+p-value of test                       : 2.6e-42    *****
+
+Anderson-Darling statistic = A2       :  114.39
+p-value of test                       : 1.9e-51    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.78e-3
+p-value of test                       :    0.9917
+
+Kolmogorov-Smirnov- statistic = D-    :    0.49
+p-value of test                       :  1.6e-7    *****
+
+Anderson-Darling statistic = A2       :   14.63
+p-value of test                       :  1.1e-7    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.01e+6
+p-value of test                       :  8.7e-8    *****
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.80
+p-value of test                       : 3.3e-21    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :   25.49
+p-value of test                       : 1.6e-12    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.27
+
+Kolmogorov-Smirnov- statistic = D-    :   0.084
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.62
+p-value of test                       :  2.4e-8    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    8.89
+p-value of test                       :  4.7e-5    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.33e-3
+p-value of test                       :    0.9986
+
+Kolmogorov-Smirnov- statistic = D-    :    0.51
+p-value of test                       :  1.2e-5    *****
+
+Anderson-Darling statistic = A2       :   13.91
+p-value of test                       :  2.4e-7    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.01e+6
+p-value of test                       :  3.7e-8    *****
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    1.00
+p-value of test                       :1.4e-112    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 3.78e-7
+p-value of test                       : 1 -  3.8e-7    *****
+
+Anderson-Darling statistic = A2       :  256.94
+p-value of test                       :1.6e-113    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :  9.8e-3
+
+Kolmogorov-Smirnov- statistic = D-    :    0.61
+p-value of test                       : 6.7e-15    *****
+
+Anderson-Darling statistic = A2       :   17.86
+p-value of test                       :  4.0e-9    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    1.00
+p-value of test                       : 3.3e-74    *****
+
+Kolmogorov-Smirnov- statistic = D-    : 1.17e-4
+p-value of test                       :    0.9999    *****
+
+Anderson-Darling statistic = A2       :  153.69
+p-value of test                       : 1.4e-68    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.98
+p-value of test                       : 2.7e-33    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.012
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :   62.61
+p-value of test                       : 7.9e-29    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.79e-4
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    : 2.29e-4
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    1.80
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.71e-4
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    : 1.09e-4
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.13
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   0.050
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   87.22
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.28
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :32751.90
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   74.73
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   58.90
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :15620.09
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :  229.60
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   35.57
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :29102.31
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:38.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.43e-3
+p-value of test                       :    0.9909
+
+Kolmogorov-Smirnov- statistic = D-    :    0.46
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    5.28
+p-value of test                       :  2.3e-3
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   72.38
+p-value of test                       :  1.3e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.37
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    : 9.67e-3
+p-value of test                       :    0.99
+
+Anderson-Darling statistic = A2       :    1.48
+p-value of test                       :    0.18
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   27.48
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.93
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.22
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.59
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    3.07
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :    0.33
+p-value of test                       :    0.09
+
+Anderson-Darling statistic = A2       :    2.22
+p-value of test                       :    0.07
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  142.63
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.51
+p-value of test                       :    0.17
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17586.45
+p-value of test                       :    0.20
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :  731.75
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :  613.67
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :  470.86
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :  497.14
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :  241.78
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:45.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   41.61
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   46.65
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   40.10
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   20.87
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.21
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:45.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  176.68
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  175.78
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  518.47
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  146.81
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   68.73
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  165.33
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  136.92
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  520.66
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  144.45
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   61.87
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  338.25
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  372.87
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5019.31
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  341.04
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  213.59
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  376.11
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  432.22
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4846.93
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  385.02
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  251.40
+p-value of test                       :  8.0e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   12.84
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    0.13
+p-value of test                       :    0.45
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.10
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    1.13
+p-value of test                       :    0.13
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.30
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.31
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.96
+p-value of test                       :    0.17
+
+Sample variance                       :    0.64
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.29
+p-value of test                       :    0.62
+
+Sample variance                       :    1.24
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.047
+p-value of test                       :  1.6e-8    *****
+
+Kolmogorov-Smirnov- statistic = D-    :   0.047
+p-value of test                       :  1.6e-8    *****
+
+Anderson-Darling statistic = A2       :   31.93
+p-value of test                       : 2.4e-15    *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.99e-3
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    : 6.03e-3
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.27
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  : 1279.06
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+Global longest run of 1               :   23.00
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.49
+p-value of test                       :    0.18
+
+-----------------------------------------------
+Global longest run of 1               :   30.00
+p-value of test                       :    0.90
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.030
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.45
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    2.71
+p-value of test                       :    0.04
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  242.04
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  183.66
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.77e-5
+p-value of test                       : 1 -  2.8e-5    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    1.00
+p-value of test                       : 2.1e-27    *****
+
+Anderson-Darling statistic = A2       :   68.96
+p-value of test                       : 1.3e-31    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :11688.07
+p-value of test                       : 4.7e-30    *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    1.62
+p-value of test                       :    0.15
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9810.51
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.34
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.60
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:04:56.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.000
+p-value of test                       : 1 - eps1    *****
+
+Kolmogorov-Smirnov- statistic = D-    :    1.00
+p-value of test                       :   eps      *****
+
+Anderson-Darling statistic = A2       :  357.37
+p-value of test                       :3.2e-157    *****
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  :73974.96
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4939.11
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  :35751.40
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4380.13
+p-value of test                       :  2.2e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  : 4.71e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :12037.64
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     : 4347.89
+p-value of test                       :   eps      *****
+
+
+-----------------------------------------------
+Total number of bits:  7999997259
+
+Normal statistic for number of bits   :  -0.022
+p-value of test                       :    0.51
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   47.80
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Total number of bits:  7999968846
+
+Normal statistic for number of bits   :   -0.25
+p-value of test                       :    0.60
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.44
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :    0.44
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    3.09
+p-value of test                       :    0.03
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.061
+p-value of test                       :    0.52
+
+Sample variance                       : 9.51e-3
+p-value of test                       : 1 -  1.3e-8    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    :    0.71
+p-value of test                       :  7.8e-6    *****
+
+Anderson-Darling statistic = A2       :    5.78
+p-value of test                       :  1.3e-3
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.85
+p-value of test                       :    0.03
+
+Sample variance                       : 7.92e-4
+p-value of test                       : 1 - 1.8e-13    *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :   0.027
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.11
+p-value of test                       :    0.87
+
+Sample variance                       :    0.82
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    1.04
+p-value of test                       :    0.33
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.83
+p-value of test                       :    0.80
+
+Sample variance                       :    1.50
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.16
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  155
+ Total CPU time:   04:55:08.24
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+  1  SerialOver, r = 0                eps  
+  3  CollisionOver, t = 2           1 - eps1
+  5  CollisionOver, t = 3           1 - eps1
+  7  CollisionOver, t = 7             eps  
+  9  CollisionOver, t = 14            eps  
+ 11  CollisionOver, t = 21            eps  
+ 13  BirthdaySpacings, t = 2          eps  
+ 14  BirthdaySpacings, t = 3          eps  
+ 15  BirthdaySpacings, t = 4          eps  
+ 16  BirthdaySpacings, t = 7          eps  
+ 17  BirthdaySpacings, t = 7          eps  
+ 18  BirthdaySpacings, t = 8          eps  
+ 19  BirthdaySpacings, t = 8          eps  
+ 20  BirthdaySpacings, t = 16         eps  
+ 21  BirthdaySpacings, t = 16         eps  
+ 22  ClosePairs NP, t = 3             eps  
+ 22  ClosePairs mNP, t = 3         1.6e-288
+ 22  ClosePairs mNP1, t = 3        4.9e-300
+ 22  ClosePairs mNP2, t = 3           eps  
+ 22  ClosePairs NJumps, t = 3       1 - eps1
+ 23  ClosePairs NP, t = 5             eps  
+ 23  ClosePairs mNP, t = 5            eps  
+ 23  ClosePairs mNP1, t = 5           eps  
+ 23  ClosePairs NJumps, t = 5       1 - eps1
+ 24  ClosePairs NP, t = 9          3.2e-157
+ 24  ClosePairs mNP, t = 9         3.2e-157
+ 24  ClosePairs mNP1, t = 9           eps  
+ 24  ClosePairs NJumps, t = 9       1 - eps1
+ 25  ClosePairs NP, t = 16          1.8e-79
+ 25  ClosePairs mNP, t = 16         1.8e-79
+ 25  ClosePairs mNP1, t = 16          eps  
+ 25  ClosePairs mNP2, t = 16          eps  
+ 25  ClosePairs NJumps, t = 16        eps  
+ 25  ClosePairs mNP2S, t = 16         eps  
+ 26  SimpPoker, r = 0                 eps  
+ 28  SimpPoker, r = 0                 eps  
+ 30  CouponCollector, r = 0           eps  
+ 31  CouponCollector, r = 10          eps  
+ 34  Gap, r = 0                       eps  
+ 36  Gap, r = 0                       eps  
+ 40  Permutation, t = 3               eps  
+ 41  Permutation, t = 5               eps  
+ 42  Permutation, t = 7               eps  
+ 43  Permutation, t = 10              eps  
+ 44  CollisionPermut, r = 0           eps  
+ 45  CollisionPermut, r = 10        1 - eps1
+ 46  MaxOft, t = 8                  1 -  1.4e-6
+ 46  MaxOft AD, t = 8               1.9e-51
+ 47  MaxOft, t = 16                  8.7e-8
+ 47  MaxOft AD, t = 16              1.6e-12
+ 48  MaxOft AD, t = 24               4.7e-5
+ 49  MaxOft, t = 32                  3.7e-8
+ 49  MaxOft AD, t = 32             1.6e-113
+ 50  SampleProd, t = 8               4.0e-9
+ 51  SampleProd, t = 16             1.4e-68
+ 52  SampleProd, t = 24             7.9e-29
+ 57  AppearanceSpacings, r = 0        eps  
+ 59  WeightDistrib, r = 0             eps  
+ 62  WeightDistrib, r = 0             eps  
+ 63  WeightDistrib, r = 10            eps  
+ 65  SumCollector                     eps  
+ 74  RandomWalk1 H (L=50, r=0)        eps  
+ 74  RandomWalk1 M (L=50, r=0)        eps  
+ 74  RandomWalk1 J (L=50, r=0)        eps  
+ 74  RandomWalk1 R (L=50, r=0)        eps  
+ 74  RandomWalk1 C (L=50, r=0)        eps  
+ 84  Fourier3, r = 0                2.4e-15
+ 86  LongestHeadRun, r = 0            eps  
+ 86  LongestHeadRun, r = 0          1 - eps1
+ 90  HammingWeight2, r = 0          4.7e-30
+ 95  HammingIndep, L=30, r=0          eps  
+ 97  HammingIndep, L=300, r=0         eps  
+ 99  HammingIndep, L=1200, r=0        eps  
+ 101  Run of bits, r = 0               eps  
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1430.9592693660836 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_10 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_10
new file mode 100644
index 0000000000..19d9917ffa
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_10
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.MersenneTwister64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1386
+p-value of test                       :    0.28
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334506
+  j =  1                              :        599997228
+  j =  2                              :             1386
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:00.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1351
+p-value of test                       :    0.63
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334471
+  j =  1                              :        599997298
+  j =  2                              :             1351
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:08.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1347
+p-value of test                       :    0.67
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334467
+  j =  1                              :        599997306
+  j =  2                              :             1347
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:24.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1356
+p-value of test                       :    0.58
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334476
+  j =  1                              :        599997288
+  j =  2                              :             1356
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:55.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1401
+p-value of test                       :    0.16
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334521
+  j =  1                              :        599997198
+  j =  2                              :             1401
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:21.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1397
+p-value of test                       :    0.19
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334517
+  j =  1                              :        599997206
+  j =  2                              :             1397
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:01.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1376
+p-value of test                       :    0.38
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334496
+  j =  1                              :        599997248
+  j =  2                              :             1376
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:12.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1402
+p-value of test                       :    0.16
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334522
+  j =  1                              :        599997196
+  j =  2                              :             1402
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:13.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1334
+p-value of test                       :    0.79
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334454
+  j =  1                              :        599997332
+  j =  2                              :             1334
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:55.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1319
+p-value of test                       :    0.89
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334439
+  j =  1                              :        599997362
+  j =  2                              :             1319
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:21.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5459
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:16.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4278
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7232
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4376
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4374
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7293
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:18.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7239
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:02.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7409
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:06.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7302
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:39.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.79
+p-value of test                       :    0.49
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.97
+p-value of test                       :    0.37
+
+Test on the Nm values of W_{n,i}(mNP1):    0.96
+p-value of test                       :    0.38
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     946
+p-value of test                       :    0.07
+
+Stat. AD (mNP2)                       :    0.91
+p-value of test                       :    0.41
+
+Stat. AD after spacings (mNP2-S)      :    0.45
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:03:25.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.68
+p-value of test                       :    0.57
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.81
+p-value of test                       :    0.47
+
+Test on the Nm values of W_{n,i}(mNP1):    1.01
+p-value of test                       :    0.35
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     647
+p-value of test                       :    0.03
+
+Stat. AD (mNP2)                       :    0.26
+p-value of test                       :    0.96
+
+Stat. AD after spacings (mNP2-S)      :    0.22
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.58
+p-value of test                       :    0.67
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.88
+p-value of test                       :    0.11
+
+Test on the Nm values of W_{n,i}(mNP1):    0.22
+p-value of test                       :    0.99
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     286
+p-value of test                       :    0.78
+
+Stat. AD (mNP2)                       :    0.56
+p-value of test                       :    0.69
+
+Stat. AD after spacings (mNP2-S)      :    0.42
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.75
+p-value of test                       :    0.51
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.79
+p-value of test                       :    0.48
+
+Test on the Nm values of W_{n,i}(mNP1):    0.51
+p-value of test                       :    0.74
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     143
+p-value of test                       :    0.70
+
+Stat. AD (mNP2)                       :    0.60
+p-value of test                       :    0.65
+
+Stat. AD after spacings (mNP2-S)      :    0.66
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:03:25.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.49
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.71
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   23.94
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   11.84
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   64.18
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   67.99
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   51.19
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   69.14
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  252.38
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  430.36
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1340.06
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:03:15.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7145.03
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   33.16
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :   0.088
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.85
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   55.63
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:04:10.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    2.76
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  115.14
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5182.60
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45712
+p-value of test                       :    0.78
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869712
+  j =  1                              :        399908580
+  j =  2                              :            45704
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46004
+p-value of test                       :    0.28
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870004
+  j =  1                              :        399907995
+  j =  2                              :            45998
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:45.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.24
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.39
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.079
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:28.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :   0.056
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.025
+p-value of test                       :    0.95
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.42
+p-value of test                       :    0.20
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.24
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.034
+p-value of test                       :    0.94
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.83
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :   0.029
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    2.07
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :   0.083
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.076
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.063
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    1.40
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.05e-4
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    : 2.81e-4
+p-value of test                       :    0.04
+
+Anderson-Darling statistic = A2       :    2.12
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.96e-4
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    : 4.33e-5
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.85
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    0.88
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.91
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   0.062
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.41
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   65.02
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   81.72
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   59.58
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   42.45
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   37.39
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   27.68
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   27.62
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.095
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   43.58
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.91e-3
+p-value of test                       :    0.9970
+
+Kolmogorov-Smirnov- statistic = D-    :    0.48
+p-value of test                       :  6.1e-3
+
+Anderson-Darling statistic = A2       :    4.85
+p-value of test                       :  3.6e-3
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   72.46
+p-value of test                       :  1.3e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.01
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    7.50
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.44
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.60
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.042
+p-value of test                       :    0.94
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    1.13
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  149.70
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :   0.051
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17225.30
+p-value of test                       :    0.86
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   36.06
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   28.54
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.40
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   30.77
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   11.47
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   35.79
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   44.06
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   20.71
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   18.04
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   28.28
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  120.83
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  161.88
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  546.91
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.67
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   90.31
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  140.83
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  177.56
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  462.07
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  157.20
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   68.10
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  439.44
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  375.68
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4941.04
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  345.31
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  237.28
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  365.35
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  320.35
+p-value of test                       :    0.9921
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5113.80
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  337.70
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  181.16
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   15.54
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.67
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   18.69
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.57
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.072
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    2.39
+p-value of test                       :    0.06
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.63
+p-value of test                       :    0.05
+
+Sample variance                       :    1.05
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.049
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    1.12
+p-value of test                       :    0.30
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.22
+p-value of test                       :    0.89
+
+Sample variance                       :    1.16
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.54e-3
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    : 3.13e-3
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    0.28
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    : 7.31e-3
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   13.41
+p-value of test                       :    0.10
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.47
+p-value of test                       :    0.18
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :   0.057
+p-value of test                       :    0.91
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.60
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  181.14
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  205.91
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :   0.047
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    1.55
+p-value of test                       :    0.17
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9781.15
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.36
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :   0.075
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.18
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9854.01
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.93
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.32
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:05:09.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.96
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4858.50
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4905.77
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4402.57
+p-value of test                       :  1.0e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4244.84
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11594.50
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11608.69
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   52.58
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Total number of bits:  8000184720
+
+Normal statistic for number of bits   :    1.46
+p-value of test                       :    0.07
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   78.34
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Total number of bits:  7999824351
+
+Normal statistic for number of bits   :   -1.39
+p-value of test                       :    0.92
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.11
+p-value of test                       :    0.54
+
+Sample variance                       :    1.84
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.84
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.30
+p-value of test                       :    0.62
+
+Sample variance                       :    0.59
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.052
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.02
+p-value of test                       :    0.15
+
+Sample variance                       :    0.80
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.012
+p-value of test                       :    0.99
+
+Anderson-Darling statistic = A2       :    1.79
+p-value of test                       :    0.12
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.87
+p-value of test                       :    0.97
+
+Sample variance                       :    0.88
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.86
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:33:56.00
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1378.9582808451835 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_11 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_11
new file mode 100644
index 0000000000..737267e0b8
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_11
@@ -0,0 +1,3795 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.SplitMix64
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:30.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1348
+p-value of test                       :    0.66
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334468
+  j =  1                              :        599997304
+  j =  2                              :             1348
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.83
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1316
+p-value of test                       :    0.90
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334436
+  j =  1                              :        599997368
+  j =  2                              :             1316
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:02.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1375
+p-value of test                       :    0.39
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334495
+  j =  1                              :        599997250
+  j =  2                              :             1375
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:52.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:21.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1330
+p-value of test                       :    0.82
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334450
+  j =  1                              :        599997340
+  j =  2                              :             1330
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:13.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1386
+p-value of test                       :    0.28
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334506
+  j =  1                              :        599997228
+  j =  2                              :             1386
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:41.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1408
+p-value of test                       :    0.12
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334528
+  j =  1                              :        599997184
+  j =  2                              :             1408
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:15.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1325
+p-value of test                       :    0.85
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334445
+  j =  1                              :        599997350
+  j =  2                              :             1325
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:28.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1449
+p-value of test                       :    0.01
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334569
+  j =  1                              :        599997102
+  j =  2                              :             1449
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:48.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1266
+p-value of test                       :    0.9963
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334386
+  j =  1                              :        599997468
+  j =  2                              :             1266
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:28.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5403
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:17.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4308
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7367
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:55.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4354
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4292
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7333
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7429
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:06.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7342
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7306
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:48.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.08
+p-value of test                       :    0.08
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.48
+p-value of test                       :    0.76
+
+Test on the Nm values of W_{n,i}(mNP1):    1.67
+p-value of test                       :    0.14
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     907
+p-value of test                       :    0.41
+
+Stat. AD (mNP2)                       :    0.86
+p-value of test                       :    0.44
+
+Stat. AD after spacings (mNP2-S)      :    0.98
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.52
+p-value of test                       :    0.72
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.40
+p-value of test                       :    0.85
+
+Test on the Nm values of W_{n,i}(mNP1):    0.41
+p-value of test                       :    0.84
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     585
+p-value of test                       :    0.72
+
+Stat. AD (mNP2)                       :    1.40
+p-value of test                       :    0.20
+
+Stat. AD after spacings (mNP2-S)      :    0.46
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.52
+p-value of test                       :    0.72
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    2.25
+p-value of test                       :    0.07
+
+Test on the Nm values of W_{n,i}(mNP1):    0.91
+p-value of test                       :    0.41
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     297
+p-value of test                       :    0.55
+
+Stat. AD (mNP2)                       :    0.59
+p-value of test                       :    0.66
+
+Stat. AD after spacings (mNP2-S)      :    1.52
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.32
+p-value of test                       :    0.92
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.57
+p-value of test                       :    0.02
+
+Test on the Nm values of W_{n,i}(mNP1):    2.05
+p-value of test                       :    0.09
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     174
+p-value of test                       :    0.03
+
+Stat. AD (mNP2)                       :    0.31
+p-value of test                       :    0.93
+
+Stat. AD after spacings (mNP2-S)      :    0.63
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:03:42.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    3.29
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    2.36
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   19.18
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   17.32
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   46.54
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   50.12
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   62.39
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   39.31
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  258.10
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  412.07
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:03:15.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1401.15
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7054.89
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.90
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   32.75
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.89
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   56.58
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    3.29
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  133.81
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5209.18
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46239
+p-value of test                       :    0.05
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870239
+  j =  1                              :        399907525
+  j =  2                              :            46233
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46030
+p-value of test                       :    0.24
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870030
+  j =  1                              :        399907945
+  j =  2                              :            46020
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:00.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.040
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    1.07
+p-value of test                       :    0.32
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.083
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :   0.070
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:34.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.091
+p-value of test                       :    0.57
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.026
+p-value of test                       :    0.94
+
+Anderson-Darling statistic = A2       :    1.58
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:22.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.016
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    1.50
+p-value of test                       :    0.18
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:38.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :   0.027
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    1.66
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.030
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    0.87
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.07e-4
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    : 6.36e-5
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.19
+p-value of test                       :    0.9936
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.19e-5
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    : 1.58e-4
+p-value of test                       :    0.37
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    1.66
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.25
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.22
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.61
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   65.72
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   63.01
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   86.04
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   27.47
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   24.01
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   42.06
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   29.88
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.29
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   34.99
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.36
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   29.95
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.79
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.18
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.78
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.92
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.045
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :    0.49
+p-value of test                       :  5.4e-3
+
+Anderson-Darling statistic = A2       :    4.11
+p-value of test                       :  8.1e-3
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  171.34
+p-value of test                       :  8.8e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:03.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.85
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17309.72
+p-value of test                       :    0.74
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   41.85
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.57
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   16.43
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   27.26
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   12.03
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   32.33
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   42.17
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   50.38
+p-value of test                       :  1.9e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   32.08
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   29.99
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  157.30
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  116.19
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  503.68
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  137.61
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   77.65
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:04.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  156.19
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.36
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  443.25
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  137.32
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   83.31
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:03.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  378.92
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  391.55
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4930.06
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  405.44
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  190.63
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  370.86
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  422.60
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5002.32
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  362.00
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  210.73
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    8.46
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -1.03
+p-value of test                       :    0.85
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.19
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   0.083
+p-value of test                       :    0.47
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.100
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.42
+p-value of test                       :    0.66
+
+Sample variance                       :    2.15
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.10
+p-value of test                       :    0.54
+
+Sample variance                       :    0.80
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.30
+
+Kolmogorov-Smirnov- statistic = D-    : 4.04e-3
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 5.86e-3
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :   0.013
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    7.15
+p-value of test                       :    0.52
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.91
+p-value of test                       :    0.27
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.74
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  203.57
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.47
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  209.08
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    1.34
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9939.55
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :   0.054
+p-value of test                       :    0.91
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.86
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9917.62
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.069
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.62
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.74
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:05:19.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.094
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.52
+p-value of test                       :    0.72
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4950.40
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.063
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.70
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4995.77
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 3853.98
+p-value of test                       :    0.9984
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4144.92
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :12073.00
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11865.24
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   69.85
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Total number of bits:  8000241450
+
+Normal statistic for number of bits   :    1.91
+p-value of test                       :    0.03
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   56.84
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+Total number of bits:  8000027064
+
+Normal statistic for number of bits   :    0.21
+p-value of test                       :    0.42
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    1.31
+p-value of test                       :    0.23
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.17
+p-value of test                       :    0.88
+
+Sample variance                       :    1.87
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.046
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :    0.42
+p-value of test                       :    0.02
+
+Anderson-Darling statistic = A2       :    1.72
+p-value of test                       :    0.13
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.49
+p-value of test                       :    0.07
+
+Sample variance                       :    0.89
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.91
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   0.046
+p-value of test                       :    0.48
+
+Sample variance                       :    0.52
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.092
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.65
+p-value of test                       :    0.60
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.74
+p-value of test                       :    0.77
+
+Sample variance                       :    1.19
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:45.63
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:40:08.06
+
+ All tests were passed
+
+
+
+# 
+# Test duration: 1348.5244657400833 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_12 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_12
new file mode 100644
index 0000000000..21fd51aaf8
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_12
@@ -0,0 +1,3795 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.XorShift1024Star
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1412
+p-value of test                       :    0.10
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334532
+  j =  1                              :        599997176
+  j =  2                              :             1412
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:11.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1458
+p-value of test                       :  6.2e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334578
+  j =  1                              :        599997084
+  j =  2                              :             1458
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:46.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1342
+p-value of test                       :    0.72
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334462
+  j =  1                              :        599997316
+  j =  2                              :             1342
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:59.83
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1368
+p-value of test                       :    0.46
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334488
+  j =  1                              :        599997264
+  j =  2                              :             1368
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:08.66
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1390
+p-value of test                       :    0.25
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334510
+  j =  1                              :        599997220
+  j =  2                              :             1390
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:14.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1325
+p-value of test                       :    0.85
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334445
+  j =  1                              :        599997350
+  j =  2                              :             1325
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:14.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1345
+p-value of test                       :    0.69
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334465
+  j =  1                              :        599997310
+  j =  2                              :             1345
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:24.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1366
+p-value of test                       :    0.48
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334486
+  j =  1                              :        599997268
+  j =  2                              :             1366
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:58.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1360
+p-value of test                       :    0.54
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334480
+  j =  1                              :        599997280
+  j =  2                              :             1360
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:36.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1312
+p-value of test                       :    0.92
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334432
+  j =  1                              :        599997376
+  j =  2                              :             1312
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:31.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5438
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:13.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4305
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7182
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:54.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4318
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4380
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7218
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:18.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7305
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:10.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7208
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7303
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:47.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.63
+p-value of test                       :    0.15
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.24
+p-value of test                       :    0.25
+
+Test on the Nm values of W_{n,i}(mNP1):    0.57
+p-value of test                       :    0.68
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     876
+p-value of test                       :    0.78
+
+Stat. AD (mNP2)                       :    1.28
+p-value of test                       :    0.24
+
+Stat. AD after spacings (mNP2-S)      :    1.03
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.24
+p-value of test                       :    0.97
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.21
+p-value of test                       :    0.99
+
+Test on the Nm values of W_{n,i}(mNP1):    0.25
+p-value of test                       :    0.97
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     609
+p-value of test                       :    0.36
+
+Stat. AD (mNP2)                       :    0.46
+p-value of test                       :    0.79
+
+Stat. AD after spacings (mNP2-S)      :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.61
+p-value of test                       :    0.63
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.59
+p-value of test                       :    0.16
+
+Test on the Nm values of W_{n,i}(mNP1):    0.29
+p-value of test                       :    0.95
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     308
+p-value of test                       :    0.33
+
+Stat. AD (mNP2)                       :    1.30
+p-value of test                       :    0.23
+
+Stat. AD after spacings (mNP2-S)      :    0.60
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.37
+p-value of test                       :    0.87
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.12
+p-value of test                       :    0.30
+
+Test on the Nm values of W_{n,i}(mNP1):    0.58
+p-value of test                       :    0.67
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     152
+p-value of test                       :    0.45
+
+Stat. AD (mNP2)                       :    0.90
+p-value of test                       :    0.41
+
+Stat. AD after spacings (mNP2-S)      :    1.00
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.21
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.19
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   29.13
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   21.07
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   33.58
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   71.38
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   62.58
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   37.08
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  209.79
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  456.72
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1420.10
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7099.60
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.43
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.40
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   22.24
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.42
+p-value of test                       :    0.83
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   55.29
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:04:16.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    1.47
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :   92.40
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4954.71
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46106
+p-value of test                       :    0.15
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870106
+  j =  1                              :        399907792
+  j =  2                              :            46098
+  j =  3                              :                4
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:40.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46076
+p-value of test                       :    0.18
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870076
+  j =  1                              :        399907851
+  j =  2                              :            46070
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:57.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.047
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    1.00
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.087
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :   0.076
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:37.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.046
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.92
+p-value of test                       :    0.10
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.076
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :   0.090
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.20
+p-value of test                       :    0.9911
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.68
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:37.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.022
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    : 6.00e-3
+p-value of test                       :    0.9933
+
+Anderson-Darling statistic = A2       :    1.39
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :   0.082
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :   0.089
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :   0.056
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.33
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.33e-5
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    : 1.56e-4
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.10e-4
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    : 8.75e-5
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    1.42
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.97
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.61
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   0.058
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -2.03
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   53.34
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   72.55
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   60.68
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   41.80
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   40.63
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   31.06
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   15.80
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.82
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   44.26
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   35.26
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.92
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.44
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    8.44
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.075
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.52
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.83
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  121.26
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.34
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17261.57
+p-value of test                       :    0.82
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   36.31
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   40.17
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   17.01
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   25.86
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    8.85
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   40.36
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   32.71
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   30.92
+p-value of test                       :    0.19
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   30.46
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   20.38
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  152.34
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  146.64
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  485.96
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  119.14
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   89.54
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  158.32
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  148.11
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  528.27
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  147.90
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   58.15
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  385.21
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  414.46
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4899.73
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  387.27
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  167.62
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  388.74
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  417.69
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4995.52
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  346.93
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  252.49
+p-value of test                       :  7.0e-3
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   14.40
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.82
+p-value of test                       :    0.80
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.34
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.48
+p-value of test                       :    0.68
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    1.05
+p-value of test                       :    0.33
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.62
+p-value of test                       :    0.73
+
+Sample variance                       :    1.75
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.82
+p-value of test                       :    0.79
+
+Sample variance                       :    1.82
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.55e-3
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :   0.014
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    1.27
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.018
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    : 5.28e-3
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    1.31
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    3.99
+p-value of test                       :    0.86
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   11.72
+p-value of test                       :    0.16
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.71
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  203.54
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.34
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  205.45
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.60
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9987.48
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9948.67
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.24
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.61
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.49
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:05:22.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.053
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.34
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4781.51
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :   0.089
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.66
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4835.39
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4176.19
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4150.42
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11905.77
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11957.74
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   42.15
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Total number of bits:  8000092179
+
+Normal statistic for number of bits   :    0.73
+p-value of test                       :    0.23
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   54.85
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Total number of bits:  7999985307
+
+Normal statistic for number of bits   :   -0.12
+p-value of test                       :    0.55
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.31
+p-value of test                       :    0.38
+
+Sample variance                       :    1.00
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.74
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.38
+p-value of test                       :    0.35
+
+Sample variance                       :    1.40
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:02:34.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.48
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.54
+p-value of test                       :    0.71
+
+Sample variance                       :    0.70
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :   0.033
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.26
+p-value of test                       :    0.25
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.43
+p-value of test                       :    0.92
+
+Sample variance                       :    0.78
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.52
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:42:45.25
+
+ All tests were passed
+
+
+
+# 
+# Test duration: 1362.1442987804169 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_13 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_13
new file mode 100644
index 0000000000..5f00b96426
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_13
@@ -0,0 +1,3795 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source64.TwoCmres (Cmres: [0xedce446814d3b3d9L, 33, 330658535] + Cmres: [0xc5b3cf786c806df7L, 33, 331932042])
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1370
+p-value of test                       :    0.44
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334490
+  j =  1                              :        599997260
+  j =  2                              :             1370
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:36.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1361
+p-value of test                       :    0.53
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334481
+  j =  1                              :        599997278
+  j =  2                              :             1361
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:03.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1339
+p-value of test                       :    0.75
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334459
+  j =  1                              :        599997322
+  j =  2                              :             1339
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:55.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1368
+p-value of test                       :    0.46
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334488
+  j =  1                              :        599997264
+  j =  2                              :             1368
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:38.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1376
+p-value of test                       :    0.38
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334496
+  j =  1                              :        599997248
+  j =  2                              :             1376
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:14.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1407
+p-value of test                       :    0.13
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334527
+  j =  1                              :        599997186
+  j =  2                              :             1407
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:27.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:00.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1411
+p-value of test                       :    0.11
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334531
+  j =  1                              :        599997178
+  j =  2                              :             1411
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:32.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1414
+p-value of test                       :    0.09
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334534
+  j =  1                              :        599997172
+  j =  2                              :             1414
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:59.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1344
+p-value of test                       :    0.70
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334464
+  j =  1                              :        599997312
+  j =  2                              :             1344
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:32.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5376
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4141
+p-value of test                       :    0.9986
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7327
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4375
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4444
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7440
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7403
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7415
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:23.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7333
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:49.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.14
+p-value of test                       :    0.29
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.74
+p-value of test                       :    0.52
+
+Test on the Nm values of W_{n,i}(mNP1):    0.98
+p-value of test                       :    0.37
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     915
+p-value of test                       :    0.31
+
+Stat. AD (mNP2)                       :    0.91
+p-value of test                       :    0.41
+
+Stat. AD after spacings (mNP2-S)      :    0.70
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.96
+p-value of test                       :    0.38
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.92
+p-value of test                       :    0.40
+
+Test on the Nm values of W_{n,i}(mNP1):    0.40
+p-value of test                       :    0.85
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     591
+p-value of test                       :    0.63
+
+Stat. AD (mNP2)                       :    0.94
+p-value of test                       :    0.39
+
+Stat. AD after spacings (mNP2-S)      :    1.24
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.17
+p-value of test                       :    0.08
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.96
+p-value of test                       :    0.38
+
+Test on the Nm values of W_{n,i}(mNP1):    0.35
+p-value of test                       :    0.90
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     301
+p-value of test                       :    0.48
+
+Stat. AD (mNP2)                       :    3.46
+p-value of test                       :    0.02
+
+Stat. AD after spacings (mNP2-S)      :    0.74
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.09
+p-value of test                       :    0.31
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.38
+p-value of test                       :    0.21
+
+Test on the Nm values of W_{n,i}(mNP1):    0.29
+p-value of test                       :    0.94
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     146
+p-value of test                       :    0.61
+
+Stat. AD (mNP2)                       :    1.13
+p-value of test                       :    0.29
+
+Stat. AD after spacings (mNP2-S)      :    1.20
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:03:31.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    9.83
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    2.31
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   25.18
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   10.90
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   46.40
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   60.02
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   69.29
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   46.23
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:02:03.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  230.74
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  376.76
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:03:09.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1422.55
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7056.36
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.59
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    2.88
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   15.90
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.70
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   63.06
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    4.11
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  133.69
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4988.80
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46190
+p-value of test                       :    0.07
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870190
+  j =  1                              :        399907622
+  j =  2                              :            46186
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:31.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45758
+p-value of test                       :    0.71
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869758
+  j =  1                              :        399908485
+  j =  2                              :            45756
+  j =  3                              :                1
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:53.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    : 1.74e-3
+p-value of test                       :    0.9981
+
+Anderson-Darling statistic = A2       :    2.06
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 3.99e+6
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.019
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :  8.4e-3
+
+Anderson-Darling statistic = A2       :    3.74
+p-value of test                       :    0.01
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:35.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.082
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.21
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.35
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.070
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    :   0.089
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    2.57
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.057
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.96
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    1.27
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.069
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.18
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.93
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.045
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    2.07
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.67e-4
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    : 1.21e-4
+p-value of test                       :    0.56
+
+Anderson-Darling statistic = A2       :    0.80
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:00:37.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.23e-4
+p-value of test                       :    0.14
+
+Kolmogorov-Smirnov- statistic = D-    : 6.14e-5
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    1.34
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.33
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.47
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      : 7.83e-3
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   53.16
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   51.17
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   58.01
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   21.25
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   32.95
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   39.82
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   22.47
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.054
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   49.66
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.025
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    1.16
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   51.62
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    3.38
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    6.63
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.76
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.47
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.60
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.30
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.70
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  129.71
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:04.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.32
+p-value of test                       :    0.23
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17205.51
+p-value of test                       :    0.89
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   58.48
+p-value of test                       :    0.01
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   35.23
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   28.30
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   19.01
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   17.04
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   39.42
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   24.57
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   24.13
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   12.97
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   27.28
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  123.28
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  156.61
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  440.09
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.23
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   79.06
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  158.33
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  127.01
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  464.02
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  114.99
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   72.06
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  359.92
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  352.58
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5000.61
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  413.63
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  228.10
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  379.37
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  392.10
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5051.38
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  369.27
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  213.46
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:54.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   12.16
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.56
+p-value of test                       :    0.71
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   11.81
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    1.32
+p-value of test                       :    0.09
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.40
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    : 1.65e-3
+p-value of test                       :    0.9983
+
+Anderson-Darling statistic = A2       :    3.75
+p-value of test                       :    0.01
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -2.84
+p-value of test                       :    0.9978
+
+Sample variance                       :    1.30
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.72
+p-value of test                       :    0.54
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.28
+p-value of test                       :    0.39
+
+Sample variance                       :    1.48
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.13e-3
+p-value of test                       :    0.66
+
+Kolmogorov-Smirnov- statistic = D-    :   0.014
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 3.30e-3
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :   0.017
+p-value of test                       :    0.08
+
+Anderson-Darling statistic = A2       :    1.71
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.28
+p-value of test                       :    0.25
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    5.72
+p-value of test                       :    0.68
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.80
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  211.44
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.84
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  193.08
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9917.27
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.61
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9925.58
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.41
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.38
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.57
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:05:17.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    1.68
+p-value of test                       :    0.14
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4769.49
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.61
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4881.40
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4244.56
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4211.82
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11877.53
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11824.54
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   59.51
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Total number of bits:  7999828746
+
+Normal statistic for number of bits   :   -1.35
+p-value of test                       :    0.91
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   52.52
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Total number of bits:  8000052000
+
+Normal statistic for number of bits   :    0.41
+p-value of test                       :    0.34
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.77
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.51
+p-value of test                       :    0.69
+
+Sample variance                       :    0.64
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.094
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    1.79
+p-value of test                       :    0.12
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.66
+p-value of test                       :    0.95
+
+Sample variance                       :    0.78
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.47
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.22
+p-value of test                       :    0.41
+
+Sample variance                       :    0.57
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.85
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   0.082
+p-value of test                       :    0.47
+
+Sample variance                       :    1.11
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.36
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:42:42.13
+
+ All tests were passed
+
+
+
+# 
+# Test duration: 1356.9071999774167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_2 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_2
new file mode 100644
index 0000000000..11cdb900fe
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_2
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.MersenneTwister
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.67
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1369
+p-value of test                       :    0.45
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334489
+  j =  1                              :        599997262
+  j =  2                              :             1369
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:01.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1373
+p-value of test                       :    0.41
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334493
+  j =  1                              :        599997254
+  j =  2                              :             1373
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:21.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1354
+p-value of test                       :    0.60
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334474
+  j =  1                              :        599997292
+  j =  2                              :             1354
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:36.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1400
+p-value of test                       :    0.17
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334520
+  j =  1                              :        599997200
+  j =  2                              :             1400
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:23.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1283
+p-value of test                       :    0.99
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334403
+  j =  1                              :        599997434
+  j =  2                              :             1283
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:27.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1399
+p-value of test                       :    0.18
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334519
+  j =  1                              :        599997202
+  j =  2                              :             1399
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:27.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1378
+p-value of test                       :    0.36
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334498
+  j =  1                              :        599997244
+  j =  2                              :             1378
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:43.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1427
+p-value of test                       :    0.05
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334547
+  j =  1                              :        599997146
+  j =  2                              :             1427
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:17.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1403
+p-value of test                       :    0.15
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334523
+  j =  1                              :        599997194
+  j =  2                              :             1403
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:20.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1259
+p-value of test                       :    0.9979
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334379
+  j =  1                              :        599997482
+  j =  2                              :             1259
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:01.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5443
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:18.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4355
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7312
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4410
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4318
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7250
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:17.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7428
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:12.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7268
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7248
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:43.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.49
+p-value of test                       :    0.75
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.32
+p-value of test                       :    0.92
+
+Test on the Nm values of W_{n,i}(mNP1):    1.01
+p-value of test                       :    0.35
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     941
+p-value of test                       :    0.09
+
+Stat. AD (mNP2)                       :    0.52
+p-value of test                       :    0.73
+
+Stat. AD after spacings (mNP2-S)      :    1.94
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:03:31.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.43
+p-value of test                       :    0.82
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.78
+p-value of test                       :    0.01
+
+Test on the Nm values of W_{n,i}(mNP1):    1.23
+p-value of test                       :    0.26
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     621
+p-value of test                       :    0.20
+
+Stat. AD (mNP2)                       :    2.82
+p-value of test                       :    0.03
+
+Stat. AD after spacings (mNP2-S)      :    0.85
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.71
+p-value of test                       :    0.54
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.90
+p-value of test                       :    0.41
+
+Test on the Nm values of W_{n,i}(mNP1):    1.01
+p-value of test                       :    0.35
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     279
+p-value of test                       :    0.88
+
+Stat. AD (mNP2)                       :    0.43
+p-value of test                       :    0.82
+
+Stat. AD after spacings (mNP2-S)      :    1.97
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.53
+p-value of test                       :    0.71
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.46
+p-value of test                       :    0.78
+
+Test on the Nm values of W_{n,i}(mNP1):    0.55
+p-value of test                       :    0.69
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     146
+p-value of test                       :    0.61
+
+Stat. AD (mNP2)                       :    1.54
+p-value of test                       :    0.17
+
+Stat. AD after spacings (mNP2-S)      :    0.18
+p-value of test                       :    0.9946
+
+-----------------------------------------------
+CPU time used                    :  00:03:19.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    8.55
+p-value of test                       :    0.29
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.09
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   10.92
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   12.63
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   45.17
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   58.93
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:02.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   63.69
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   56.06
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  245.21
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  406.91
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1478.34
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7029.22
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.45
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.48
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   23.66
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.42
+p-value of test                       :    0.02
+
+Anderson-Darling statistic = A2       :    1.92
+p-value of test                       :    0.10
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   69.42
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    3.12
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  115.68
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4941.88
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45922
+p-value of test                       :    0.42
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869922
+  j =  1                              :        399908161
+  j =  2                              :            45912
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45485
+p-value of test                       :    0.97
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869485
+  j =  1                              :        399909035
+  j =  2                              :            45475
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:43.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.067
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :   0.064
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:27.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.044
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.066
+p-value of test                       :    0.73
+
+Anderson-Darling statistic = A2       :    2.08
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:10.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.086
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.015
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    1.75
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.088
+p-value of test                       :    0.69
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    1.15
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.13
+
+Anderson-Darling statistic = A2       :    1.66
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.093
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.93
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.044
+p-value of test                       :    0.90
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    0.87
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.091
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.19e-4
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    : 3.41e-5
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.25e-4
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    : 8.73e-5
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    1.27
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.79
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:00:38.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.18
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.43
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   55.91
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   54.53
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   63.48
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   28.72
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   43.65
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.71
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   26.44
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    : 6.85e-3
+p-value of test                       :    0.9927
+
+Anderson-Darling statistic = A2       :    1.97
+p-value of test                       :    0.10
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   26.18
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.64
+
+Anderson-Darling statistic = A2       :    0.85
+p-value of test                       :    0.44
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   30.14
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.30
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.38
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    0.66
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.25
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  138.86
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :   0.091
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.25
+p-value of test                       :    0.97
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17356.71
+p-value of test                       :    0.65
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   44.08
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   26.05
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   15.35
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   20.84
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   22.38
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   25.16
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   32.23
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   29.73
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   14.61
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   27.42
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  146.80
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  136.73
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  505.13
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  142.38
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   76.79
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  170.66
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  121.85
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  451.52
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  144.44
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   74.50
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  397.90
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  347.57
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4899.86
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  378.36
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  196.15
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  369.01
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  370.06
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4939.69
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  386.04
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  216.47
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   17.05
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.71
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    6.30
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.72
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.44
+p-value of test                       :    0.67
+
+Sample variance                       :    0.47
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.50
+p-value of test                       :    0.74
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.022
+p-value of test                       :    0.51
+
+Sample variance                       :    0.64
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.020
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    : 9.81e-3
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.020
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    : 8.30e-3
+p-value of test                       :    0.57
+
+Anderson-Darling statistic = A2       :    1.36
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    5.93
+p-value of test                       :    0.65
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   12.56
+p-value of test                       :    0.13
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.100
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.42
+p-value of test                       :    0.02
+
+Anderson-Darling statistic = A2       :    1.91
+p-value of test                       :    0.10
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  221.78
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.54
+p-value of test                       :    0.70
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  193.27
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9886.36
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :   0.047
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.66
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9875.89
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.66
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.95
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.69
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:05:13.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.19
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4867.92
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4959.03
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4043.58
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4097.80
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11605.55
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11752.46
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   49.81
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Total number of bits:  8000064369
+
+Normal statistic for number of bits   :    0.51
+p-value of test                       :    0.31
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   46.50
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Total number of bits:  7999938513
+
+Normal statistic for number of bits   :   -0.49
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.087
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.51
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.74
+p-value of test                       :    0.23
+
+Sample variance                       :    1.24
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:57.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.043
+p-value of test                       :    0.94
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.03
+p-value of test                       :    0.85
+
+Sample variance                       :    0.81
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:30.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.00
+p-value of test                       :    0.16
+
+Sample variance                       :    0.50
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.53
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.21
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.17
+p-value of test                       :    0.43
+
+Sample variance                       :    1.45
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.81
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:37:38.79
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1375.9153346867167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_3 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_3
new file mode 100644
index 0000000000..8ca22c4c68
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_3
@@ -0,0 +1,3808 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well512a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.91
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:17.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1277
+p-value of test                       :    0.9911
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334397
+  j =  1                              :        599997446
+  j =  2                              :             1277
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:16.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1356
+p-value of test                       :    0.58
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334476
+  j =  1                              :        599997288
+  j =  2                              :             1356
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:01.99
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1387
+p-value of test                       :    0.27
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334507
+  j =  1                              :        599997226
+  j =  2                              :             1387
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:14.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1389
+p-value of test                       :    0.25
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334509
+  j =  1                              :        599997222
+  j =  2                              :             1389
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:17.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1352
+p-value of test                       :    0.62
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334472
+  j =  1                              :        599997296
+  j =  2                              :             1352
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:26.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1367
+p-value of test                       :    0.47
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334487
+  j =  1                              :        599997266
+  j =  2                              :             1367
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:57.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1431
+p-value of test                       :    0.04
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334551
+  j =  1                              :        599997138
+  j =  2                              :             1431
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:57.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1391
+p-value of test                       :    0.24
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334511
+  j =  1                              :        599997218
+  j =  2                              :             1391
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:34.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1386
+p-value of test                       :    0.28
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334506
+  j =  1                              :        599997228
+  j =  2                              :             1386
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:44.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1349
+p-value of test                       :    0.65
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334469
+  j =  1                              :        599997302
+  j =  2                              :             1349
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:27.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5409
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:13.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4331
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7273
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:54.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4122
+p-value of test                       :    0.9995    *****
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4286
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7230
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7360
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7403
+p-value of test                       :    0.16
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:08.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7460
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:29.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.46
+p-value of test                       :    0.78
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.47
+p-value of test                       :    0.18
+
+Test on the Nm values of W_{n,i}(mNP1):    0.63
+p-value of test                       :    0.62
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     868
+p-value of test                       :    0.85
+
+Stat. AD (mNP2)                       :    0.60
+p-value of test                       :    0.65
+
+Stat. AD after spacings (mNP2-S)      :    1.11
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:03:27.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.50
+p-value of test                       :    0.18
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.33
+p-value of test                       :    0.91
+
+Test on the Nm values of W_{n,i}(mNP1):    3.58
+p-value of test                       :    0.01
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     549
+p-value of test                       :    0.98
+
+Stat. AD (mNP2)                       :    0.84
+p-value of test                       :    0.46
+
+Stat. AD after spacings (mNP2-S)      :    1.13
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.32
+p-value of test                       :    0.92
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.32
+p-value of test                       :    0.92
+
+Test on the Nm values of W_{n,i}(mNP1):    0.60
+p-value of test                       :    0.65
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     318
+p-value of test                       :    0.16
+
+Stat. AD (mNP2)                       :    0.63
+p-value of test                       :    0.62
+
+Stat. AD after spacings (mNP2-S)      :    0.28
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.65
+p-value of test                       :    0.60
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.81
+p-value of test                       :    0.46
+
+Test on the Nm values of W_{n,i}(mNP1):    0.86
+p-value of test                       :    0.44
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     155
+p-value of test                       :    0.35
+
+Stat. AD (mNP2)                       :    0.55
+p-value of test                       :    0.69
+
+Stat. AD after spacings (mNP2-S)      :    1.83
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.82
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.53
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   20.07
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :    8.60
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   44.57
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   44.56
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   64.40
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   52.21
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  253.43
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  440.09
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1418.95
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7224.84
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.47
+p-value of test                       :    0.07
+
+Anderson-Darling statistic = A2       :    1.05
+p-value of test                       :    0.33
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   37.91
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   69.38
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:03:59.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    1.92
+p-value of test                       :    0.86
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  136.60
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5003.09
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45869
+p-value of test                       :    0.52
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869869
+  j =  1                              :        399908262
+  j =  2                              :            45869
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:34.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46179
+p-value of test                       :    0.08
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870179
+  j =  1                              :        399907649
+  j =  2                              :            46165
+  j =  3                              :                7
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:47.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.059
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.98
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:22.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.039
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.42
+p-value of test                       :    0.83
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.096
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :   0.054
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:07.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.30
+
+Kolmogorov-Smirnov- statistic = D-    :   0.095
+p-value of test                       :    0.66
+
+Anderson-Darling statistic = A2       :    0.95
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.48
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.054
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.85
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.061
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :   0.037
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    2.04
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.12
+
+Kolmogorov-Smirnov- statistic = D-    :   0.050
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:02:10.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.50e-4
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    : 1.04e-4
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.12e-4
+p-value of test                       :    0.61
+
+Kolmogorov-Smirnov- statistic = D-    : 1.70e-4
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.014
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.56
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.48
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.98
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   83.09
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   72.46
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   65.85
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   36.54
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.21
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   36.00
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   24.68
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:02:37.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :   0.035
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    1.23
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   31.77
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.46
+p-value of test                       :  8.7e-3
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.67
+
+Anderson-Darling statistic = A2       :    1.58
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   31.11
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  : 9.41e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  : 9.41e+5
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.44
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :   0.068
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    3.70
+p-value of test                       :    0.01
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :   93.70
+p-value of test                       :    0.9931
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.053
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.68
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17609.71
+p-value of test                       :    0.17
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   36.66
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   34.18
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   21.68
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   35.34
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   22.95
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   35.61
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   43.85
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   35.22
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   13.68
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   25.00
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  143.34
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  149.00
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  474.10
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  154.35
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   65.37
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:02.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  141.14
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.20
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  474.44
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  139.23
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   86.57
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  359.71
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  377.22
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4915.97
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  355.90
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  240.90
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  438.15
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  366.02
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4948.94
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  367.64
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  168.26
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:52.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   11.11
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -446.06
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.08
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -446.03
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.43
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :   0.031
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    4.20
+p-value of test                       :  7.3e-3
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -2.72
+p-value of test                       :    0.9968
+
+Sample variance                       :    0.66
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    : 9.28e-3
+p-value of test                       :    0.99
+
+Anderson-Darling statistic = A2       :    1.85
+p-value of test                       :    0.11
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.90
+p-value of test                       :    0.97
+
+Sample variance                       :    0.92
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.37
+
+Kolmogorov-Smirnov- statistic = D-    : 8.49e-3
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.013
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    : 6.01e-3
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    6.56
+p-value of test                       :    0.59
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    7.68
+p-value of test                       :    0.46
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.078
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.17
+p-value of test                       :    0.28
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  173.33
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.96
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  187.11
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    :   0.036
+p-value of test                       :    0.95
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9822.82
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.24
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.48
+
+Anderson-Darling statistic = A2       :    0.94
+p-value of test                       :    0.39
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9954.22
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:01:11.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.50
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.94
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    2.10
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:05:11.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.76
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4882.62
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.50
+p-value of test                       :  4.2e-3
+
+Anderson-Darling statistic = A2       :    2.99
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5072.21
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4264.78
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4058.38
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11823.23
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11752.74
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   41.14
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Total number of bits:  7999950150
+
+Normal statistic for number of bits   :   -0.39
+p-value of test                       :    0.65
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   55.11
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Total number of bits:  7999810113
+
+Normal statistic for number of bits   :   -1.50
+p-value of test                       :    0.93
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.23
+p-value of test                       :    0.98
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.17
+p-value of test                       :    0.43
+
+Sample variance                       :    1.06
+p-value of test                       :    0.39
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.35
+p-value of test                       :    0.64
+
+Sample variance                       :    0.60
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.100
+p-value of test                       :    0.77
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    0.33
+p-value of test                       :    0.92
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.42
+p-value of test                       :    0.34
+
+Sample variance                       :    1.47
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.47
+
+Anderson-Darling statistic = A2       :    0.57
+p-value of test                       :    0.68
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.40
+p-value of test                       :    0.65
+
+Sample variance                       :    0.84
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.14
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:32:32.93
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 16  BirthdaySpacings, t = 7         0.9995 
+ 68  MatrixRank, L=1000, r=0          eps  
+ 69  MatrixRank, L=1000, r=26         eps  
+ 70  MatrixRank, L=5000               eps  
+ 71  MatrixRank, L=5000               eps  
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1381.6155634380166 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_4 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_4
new file mode 100644
index 0000000000..7db11e7a79
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_4
@@ -0,0 +1,3805 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well1024a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:37.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1332
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334452
+  j =  1                              :        599997336
+  j =  2                              :             1332
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:29.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1365
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334485
+  j =  1                              :        599997270
+  j =  2                              :             1365
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:02.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1324
+p-value of test                       :    0.86
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334444
+  j =  1                              :        599997352
+  j =  2                              :             1324
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:39.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1414
+p-value of test                       :    0.09
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334534
+  j =  1                              :        599997172
+  j =  2                              :             1414
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:55.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1333
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334453
+  j =  1                              :        599997334
+  j =  2                              :             1333
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:11.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1390
+p-value of test                       :    0.25
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334510
+  j =  1                              :        599997220
+  j =  2                              :             1390
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:08.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1395
+p-value of test                       :    0.21
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334515
+  j =  1                              :        599997210
+  j =  2                              :             1395
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:44.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1377
+p-value of test                       :    0.37
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334497
+  j =  1                              :        599997246
+  j =  2                              :             1377
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:38.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1340
+p-value of test                       :    0.74
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334460
+  j =  1                              :        599997320
+  j =  2                              :             1340
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:53.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1365
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334485
+  j =  1                              :        599997270
+  j =  2                              :             1365
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:40.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5306
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:18.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4322
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7252
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4384
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4336
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7399
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:22.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7392
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:07.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7330
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:19.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7420
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:37.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.65
+p-value of test                       :    0.61
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.66
+p-value of test                       :    0.59
+
+Test on the Nm values of W_{n,i}(mNP1):    0.52
+p-value of test                       :    0.72
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     913
+p-value of test                       :    0.34
+
+Stat. AD (mNP2)                       :    1.17
+p-value of test                       :    0.28
+
+Stat. AD after spacings (mNP2-S)      :    0.82
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.51
+p-value of test                       :    0.74
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.05
+p-value of test                       :    0.33
+
+Test on the Nm values of W_{n,i}(mNP1):    1.29
+p-value of test                       :    0.24
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     625
+p-value of test                       :    0.16
+
+Stat. AD (mNP2)                       :    0.61
+p-value of test                       :    0.64
+
+Stat. AD after spacings (mNP2-S)      :    1.50
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.15
+p-value of test                       :    0.9987
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.53
+p-value of test                       :    0.71
+
+Test on the Nm values of W_{n,i}(mNP1):    1.95
+p-value of test                       :    0.10
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     348
+p-value of test                       :  3.6e-3
+
+Stat. AD (mNP2)                       :    0.39
+p-value of test                       :    0.86
+
+Stat. AD after spacings (mNP2-S)      :    1.91
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.77
+p-value of test                       :    0.13
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.83
+p-value of test                       :    0.01
+
+Test on the Nm values of W_{n,i}(mNP1):    2.84
+p-value of test                       :    0.03
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     132
+p-value of test                       :    0.93
+
+Stat. AD (mNP2)                       :    1.13
+p-value of test                       :    0.30
+
+Stat. AD after spacings (mNP2-S)      :    0.52
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:03:22.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   10.17
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    8.69
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   26.29
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   17.41
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   65.38
+p-value of test                       :    0.14
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   59.57
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   55.74
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   76.56
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  231.68
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  395.34
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1392.08
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6841.00
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.39
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   24.06
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    1.04
+p-value of test                       :    0.34
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   74.33
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.53
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  107.33
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4823.98
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45927
+p-value of test                       :    0.41
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869927
+  j =  1                              :        399908149
+  j =  2                              :            45921
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:21.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45978
+p-value of test                       :    0.32
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869978
+  j =  1                              :        399908047
+  j =  2                              :            45972
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:51.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.055
+p-value of test                       :    0.75
+
+Anderson-Darling statistic = A2       :    1.88
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.030
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    :   0.077
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.77
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:24.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :   0.069
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    1.12
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.033
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.10
+
+Anderson-Darling statistic = A2       :    1.98
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:12.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :   0.043
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.88
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.091
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.77
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.089
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:31.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.060
+p-value of test                       :    0.83
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :   0.027
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.66e-4
+p-value of test                       :    0.06
+
+Kolmogorov-Smirnov- statistic = D-    : 8.68e-5
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    1.03
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.52e-4
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    : 1.23e-4
+p-value of test                       :    0.54
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    0.98
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:00:36.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.58
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:00:37.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.50
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.69
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   66.61
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   73.68
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   70.84
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   41.75
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   31.37
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   39.04
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   33.29
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.35
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.068
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    1.09
+p-value of test                       :    0.31
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   28.73
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.43
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    1.83
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   25.89
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.98
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    2.19
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :  518.64
+p-value of test                       :   eps      *****
+
+-----------------------------------------------
+CPU time used                    :  00:00:42.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.43
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :   0.088
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    3.82
+p-value of test                       :    0.01
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :   98.65
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.41
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    2.73
+p-value of test                       :    0.04
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17113.64
+p-value of test                       :    0.96
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   30.51
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   38.27
+p-value of test                       :    0.32
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   18.20
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   31.47
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   14.09
+p-value of test                       :    0.66
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   24.31
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   33.73
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   29.15
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   25.86
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   25.06
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  141.98
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  132.64
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  468.08
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  146.55
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   55.20
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  190.44
+p-value of test                       :  7.9e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  180.93
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  544.22
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  122.54
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   71.38
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:00.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  386.02
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  435.87
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4910.00
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  379.21
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  216.85
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  377.26
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  375.11
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5102.92
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  373.40
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  201.66
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   11.12
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -444.82
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   13.42
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -445.00
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:00.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.079
+p-value of test                       :    0.84
+
+Anderson-Darling statistic = A2       :    1.24
+p-value of test                       :    0.25
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.51
+p-value of test                       :    0.93
+
+Sample variance                       :    1.23
+p-value of test                       :    0.27
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.068
+p-value of test                       :    0.88
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.05
+
+Anderson-Darling statistic = A2       :    1.82
+p-value of test                       :    0.12
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.48
+p-value of test                       :    0.07
+
+Sample variance                       :    0.99
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.011
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    : 7.57e-3
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.30
+
+Kolmogorov-Smirnov- statistic = D-    :   0.011
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    2.97
+p-value of test                       :    0.94
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    4.06
+p-value of test                       :    0.85
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:45.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.63
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  187.83
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.30
+p-value of test                       :    0.13
+
+Kolmogorov-Smirnov- statistic = D-    :   0.029
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  171.12
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.54
+
+Anderson-Darling statistic = A2       :    0.96
+p-value of test                       :    0.38
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9895.77
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.016
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.44
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    2.92
+p-value of test                       :    0.03
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10315.95
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.93
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.13
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.72
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:05:10.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.37
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.022
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.89
+p-value of test                       :    0.11
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4720.54
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4973.27
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4115.03
+p-value of test                       :    0.51
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4148.65
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11952.23
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11588.41
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   53.25
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+Total number of bits:  8000043543
+
+Normal statistic for number of bits   :    0.34
+p-value of test                       :    0.37
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   41.84
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Total number of bits:  8000115444
+
+Normal statistic for number of bits   :    0.91
+p-value of test                       :    0.18
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.30
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.83
+p-value of test                       :    0.20
+
+Sample variance                       :    1.31
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.023
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.34
+p-value of test                       :    0.08
+
+Anderson-Darling statistic = A2       :    2.01
+p-value of test                       :    0.09
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.92
+p-value of test                       :    0.03
+
+Sample variance                       :    0.88
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.38
+p-value of test                       :    0.04
+
+Kolmogorov-Smirnov- statistic = D-    :   0.089
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    2.23
+p-value of test                       :    0.07
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.77
+p-value of test                       :    0.96
+
+Sample variance                       :    0.48
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.074
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.40
+p-value of test                       :    0.85
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.51
+p-value of test                       :    0.30
+
+Sample variance                       :    0.70
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.63
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:31:13.92
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 70  MatrixRank, L=5000               eps  
+ 71  MatrixRank, L=5000               eps  
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1384.6186665864166 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_5 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_5
new file mode 100644
index 0000000000..c20bdfb0d0
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_5
@@ -0,0 +1,3804 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:32.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:17.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:48.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1345
+p-value of test                       :    0.69
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334465
+  j =  1                              :        599997310
+  j =  2                              :             1345
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:01.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1355
+p-value of test                       :    0.59
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334475
+  j =  1                              :        599997290
+  j =  2                              :             1355
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:26.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1377
+p-value of test                       :    0.37
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334497
+  j =  1                              :        599997246
+  j =  2                              :             1377
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:59.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1370
+p-value of test                       :    0.44
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334490
+  j =  1                              :        599997260
+  j =  2                              :             1370
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:28.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1484
+p-value of test                       :  7.2e-4    *****
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334604
+  j =  1                              :        599997032
+  j =  2                              :             1484
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:34.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1393
+p-value of test                       :    0.22
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334513
+  j =  1                              :        599997214
+  j =  2                              :             1393
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:03.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1379
+p-value of test                       :    0.35
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334499
+  j =  1                              :        599997242
+  j =  2                              :             1379
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:52.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1341
+p-value of test                       :    0.73
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334461
+  j =  1                              :        599997318
+  j =  2                              :             1341
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:00.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5519
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:15.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4281
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7350
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:58.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4319
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4419
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7242
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:14.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7230
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:08.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7355
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:04.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7355
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:29.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.46
+p-value of test                       :    0.79
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.06
+p-value of test                       :    0.32
+
+Test on the Nm values of W_{n,i}(mNP1):    2.33
+p-value of test                       :    0.06
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     925
+p-value of test                       :    0.21
+
+Stat. AD (mNP2)                       :    1.19
+p-value of test                       :    0.27
+
+Stat. AD after spacings (mNP2-S)      :    2.17
+p-value of test                       :    0.07
+
+-----------------------------------------------
+CPU time used                    :  00:03:15.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.55
+p-value of test                       :    0.70
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.96
+p-value of test                       :    0.38
+
+Test on the Nm values of W_{n,i}(mNP1):    0.57
+p-value of test                       :    0.68
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     610
+p-value of test                       :    0.35
+
+Stat. AD (mNP2)                       :    2.00
+p-value of test                       :    0.09
+
+Stat. AD after spacings (mNP2-S)      :    5.47
+p-value of test                       :  1.7e-3
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.03
+p-value of test                       :    0.34
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.32
+p-value of test                       :    0.23
+
+Test on the Nm values of W_{n,i}(mNP1):    1.11
+p-value of test                       :    0.31
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     310
+p-value of test                       :    0.29
+
+Stat. AD (mNP2)                       :    0.73
+p-value of test                       :    0.53
+
+Stat. AD after spacings (mNP2-S)      :    0.88
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.68
+p-value of test                       :    0.14
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.57
+p-value of test                       :    0.66
+
+Test on the Nm values of W_{n,i}(mNP1):    0.35
+p-value of test                       :    0.89
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     142
+p-value of test                       :    0.73
+
+Stat. AD (mNP2)                       :    0.75
+p-value of test                       :    0.52
+
+Stat. AD after spacings (mNP2-S)      :    0.91
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.27
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   13.77
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   19.41
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   16.93
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   56.07
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   33.64
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   43.91
+p-value of test                       :    0.83
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   55.73
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  238.61
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:02:04.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  434.17
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1535.35
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:03:04.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7149.34
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :    0.36
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   27.59
+p-value of test                       :    0.59
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :   0.025
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.41
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   46.36
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:04:04.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    4.62
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  148.74
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 4987.66
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45473
+p-value of test                       :    0.97
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869473
+  j =  1                              :        399909057
+  j =  2                              :            45467
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45876
+p-value of test                       :    0.51
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869876
+  j =  1                              :        399908251
+  j =  2                              :            45870
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:47.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.41
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.21
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.080
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :   0.047
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.32
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :   0.047
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    1.56
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.46
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.30
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.56
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.07
+
+Kolmogorov-Smirnov- statistic = D-    :   0.045
+p-value of test                       :    0.90
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.054
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.046
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.38
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.095
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.52
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.17
+
+Anderson-Darling statistic = A2       :    1.36
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.36
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.33e-5
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    : 1.14e-4
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.17e-4
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    : 7.27e-5
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    1.45
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.52
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.13
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.44
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.12
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.01
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   61.44
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   74.42
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   51.46
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   38.22
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   30.61
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   56.40
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   45.13
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:02:39.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.80
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   40.78
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.28
+p-value of test                       :    0.17
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.29
+
+Anderson-Darling statistic = A2       :    1.26
+p-value of test                       :    0.25
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   35.06
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.95
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.84
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.059
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.77
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.54
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  115.28
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.087
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.32
+p-value of test                       :    0.10
+
+Anderson-Darling statistic = A2       :    1.63
+p-value of test                       :    0.15
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17705.02
+p-value of test                       :    0.07
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   42.84
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   32.37
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   16.73
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   19.68
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   20.33
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   40.80
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   25.02
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   24.59
+p-value of test                       :    0.49
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   24.23
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   12.67
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  163.36
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  139.90
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  513.73
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  124.83
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   65.28
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  144.59
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  162.54
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  477.91
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  141.41
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   54.13
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  365.51
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  380.09
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4942.23
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  375.51
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  177.70
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  370.83
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  382.60
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5132.18
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  404.30
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  215.64
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    3.90
+p-value of test                       :    0.99
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.59
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    5.17
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.82
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.095
+p-value of test                       :    0.78
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.59
+p-value of test                       :    0.28
+
+Sample variance                       :    1.66
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.087
+p-value of test                       :    0.81
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.96
+p-value of test                       :    0.83
+
+Sample variance                       :    0.46
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.014
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    : 8.15e-3
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 9.77e-3
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :   0.012
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.59
+p-value of test                       :    0.30
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    4.23
+p-value of test                       :    0.84
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.61
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.82
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  191.72
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:02:47.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  197.56
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.45
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.56
+
+Anderson-Darling statistic = A2       :    2.10
+p-value of test                       :    0.08
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9852.49
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.39
+
+Anderson-Darling statistic = A2       :    0.93
+p-value of test                       :    0.39
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9916.86
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    1.27
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.03
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.91
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:05:08.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.046
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :    0.46
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    2.41
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5070.55
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.072
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.46
+p-value of test                       :    0.78
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4952.53
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.92
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4144.23
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4151.51
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11684.02
+p-value of test                       :    0.82
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11665.44
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   41.52
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+Total number of bits:  7999988892
+
+Normal statistic for number of bits   :  -0.088
+p-value of test                       :    0.53
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   52.70
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Total number of bits:  7999829385
+
+Normal statistic for number of bits   :   -1.35
+p-value of test                       :    0.91
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.45
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.21
+p-value of test                       :    0.42
+
+Sample variance                       :    0.33
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:02:40.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.072
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.49
+p-value of test                       :    0.31
+
+Sample variance                       :    1.11
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.33
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.063
+p-value of test                       :    0.89
+
+Anderson-Darling statistic = A2       :    1.00
+p-value of test                       :    0.36
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.10
+p-value of test                       :    0.86
+
+Sample variance                       :    0.78
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.59
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.30
+p-value of test                       :    0.62
+
+Sample variance                       :    0.78
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:25.39
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:28:59.73
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+  9  CollisionOver, t = 14           7.2e-4
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1403.27206816705 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_6 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_6
new file mode 100644
index 0000000000..878eb4a4d4
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_6
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well19937c
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.21
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:13.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1378
+p-value of test                       :    0.36
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334498
+  j =  1                              :        599997244
+  j =  2                              :             1378
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:24.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1332
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334452
+  j =  1                              :        599997336
+  j =  2                              :             1332
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:16.08
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1350
+p-value of test                       :    0.64
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334470
+  j =  1                              :        599997300
+  j =  2                              :             1350
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:24.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1333
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334453
+  j =  1                              :        599997334
+  j =  2                              :             1333
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:37.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1357
+p-value of test                       :    0.57
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334477
+  j =  1                              :        599997286
+  j =  2                              :             1357
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:28.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1395
+p-value of test                       :    0.21
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334515
+  j =  1                              :        599997210
+  j =  2                              :             1395
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:07.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1322
+p-value of test                       :    0.87
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334442
+  j =  1                              :        599997356
+  j =  2                              :             1322
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:23.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1354
+p-value of test                       :    0.60
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334474
+  j =  1                              :        599997292
+  j =  2                              :             1354
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:50.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1362
+p-value of test                       :    0.52
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334482
+  j =  1                              :        599997276
+  j =  2                              :             1362
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:20.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1323
+p-value of test                       :    0.87
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334443
+  j =  1                              :        599997354
+  j =  2                              :             1323
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:45.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5478
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4315
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7331
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:58.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4275
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4381
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7400
+p-value of test                       :    0.17
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:08.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7318
+p-value of test                       :    0.50
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7297
+p-value of test                       :    0.60
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:55.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7365
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:17.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.22
+p-value of test                       :    0.98
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.74
+p-value of test                       :    0.52
+
+Test on the Nm values of W_{n,i}(mNP1):    0.31
+p-value of test                       :    0.93
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     935
+p-value of test                       :    0.13
+
+Stat. AD (mNP2)                       :    0.70
+p-value of test                       :    0.56
+
+Stat. AD after spacings (mNP2-S)      :    0.51
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:03:21.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.86
+p-value of test                       :    0.44
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.63
+p-value of test                       :    0.01
+
+Test on the Nm values of W_{n,i}(mNP1):    0.63
+p-value of test                       :    0.62
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     638
+p-value of test                       :    0.06
+
+Stat. AD (mNP2)                       :    0.57
+p-value of test                       :    0.68
+
+Stat. AD after spacings (mNP2-S)      :    0.81
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.73
+p-value of test                       :    0.53
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.81
+p-value of test                       :    0.47
+
+Test on the Nm values of W_{n,i}(mNP1):    1.84
+p-value of test                       :    0.11
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     299
+p-value of test                       :    0.51
+
+Stat. AD (mNP2)                       :    0.50
+p-value of test                       :    0.74
+
+Stat. AD after spacings (mNP2-S)      :    3.16
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    2.31
+p-value of test                       :    0.06
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    3.36
+p-value of test                       :    0.02
+
+Test on the Nm values of W_{n,i}(mNP1):    0.46
+p-value of test                       :    0.79
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     151
+p-value of test                       :    0.48
+
+Stat. AD (mNP2)                       :    0.86
+p-value of test                       :    0.44
+
+Stat. AD after spacings (mNP2-S)      :    0.79
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    8.17
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:12.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.51
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   11.53
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:14.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   28.08
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   53.84
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   61.12
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   45.10
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   60.61
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  217.08
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:02:01.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  438.55
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1338.89
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 6958.20
+p-value of test                       :    0.77
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.61
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.33
+p-value of test                       :    0.91
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   25.99
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.33
+p-value of test                       :    0.91
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   55.39
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.42
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    7.66
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:09.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  126.26
+p-value of test                       :    0.31
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5067.59
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45450
+p-value of test                       :    0.98
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869450
+  j =  1                              :        399909106
+  j =  2                              :            45438
+  j =  3                              :                6
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:11.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45863
+p-value of test                       :    0.53
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869863
+  j =  1                              :        399908279
+  j =  2                              :            45853
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:19.43
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.047
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    1.07
+p-value of test                       :    0.32
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.092
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    0.34
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.042
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    1.48
+p-value of test                       :    0.18
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :   0.033
+p-value of test                       :    0.92
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :   0.064
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.26
+p-value of test                       :    0.96
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :   0.061
+p-value of test                       :    0.83
+
+Anderson-Darling statistic = A2       :    0.96
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.00
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :   0.075
+p-value of test                       :    0.76
+
+Anderson-Darling statistic = A2       :    0.43
+p-value of test                       :    0.82
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.55
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    1.03
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.057
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :   0.086
+p-value of test                       :    0.53
+
+Anderson-Darling statistic = A2       :    0.35
+p-value of test                       :    0.89
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.26e-3
+p-value of test                       :    0.9987
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.12
+
+Anderson-Darling statistic = A2       :    1.56
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.054
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.99e-4
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    : 1.66e-4
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.03e-4
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    : 1.39e-4
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.011
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.18
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:00:30.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.18
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -1.01
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   47.51
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   49.54
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   54.64
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   40.64
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   38.18
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   39.80
+p-value of test                       :    0.35
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   35.61
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:40.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :    0.21
+p-value of test                       :    0.37
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   46.48
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.63
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.86
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   41.17
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.42
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    1.82
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.18
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.82
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :   0.054
+p-value of test                       :    0.91
+
+Anderson-Darling statistic = A2       :    1.98
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  102.54
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.097
+p-value of test                       :    0.78
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.51
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17613.40
+p-value of test                       :    0.16
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   46.98
+p-value of test                       :    0.10
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   40.26
+p-value of test                       :    0.25
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   34.88
+p-value of test                       :    0.09
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   15.74
+p-value of test                       :    0.90
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   26.21
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   27.65
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   50.39
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   22.19
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   24.54
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   15.23
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  158.88
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  143.62
+p-value of test                       :    0.54
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  457.02
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  154.91
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   85.09
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  136.38
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  155.91
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  506.36
+p-value of test                       :    0.41
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  123.27
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   64.95
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  393.90
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  367.86
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4987.98
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  371.78
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  214.92
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  331.15
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  335.38
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5146.31
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  380.51
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  192.40
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    6.02
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.97
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   11.00
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -402.90
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:07.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.094
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.51
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.76
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.36
+p-value of test                       :    0.36
+
+Sample variance                       :    1.84
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.34
+p-value of test                       :    0.08
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.24
+p-value of test                       :    0.25
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.03
+p-value of test                       :    0.85
+
+Sample variance                       :    1.09
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:03.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.28e-3
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :   0.017
+p-value of test                       :    0.09
+
+Anderson-Darling statistic = A2       :    1.33
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.015
+p-value of test                       :    0.15
+
+Kolmogorov-Smirnov- statistic = D-    : 6.81e-3
+p-value of test                       :    0.68
+
+Anderson-Darling statistic = A2       :    0.85
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    6.29
+p-value of test                       :    0.61
+
+-----------------------------------------------
+Global longest run of 1               :   34.00
+p-value of test                       :    0.25
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:37.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    2.37
+p-value of test                       :    0.97
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.31
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    :   0.023
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.59
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  170.45
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  212.16
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:39.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.59
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10101.95
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:05.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10009.89
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.26
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.35
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.85
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:04:57.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4940.17
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.23
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    1.06
+p-value of test                       :    0.32
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4870.80
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4011.65
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4144.90
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:39.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11929.46
+p-value of test                       :    0.25
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11978.81
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   52.16
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+Total number of bits:  7999882446
+
+Normal statistic for number of bits   :   -0.93
+p-value of test                       :    0.82
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   55.18
+p-value of test                       :    0.43
+
+
+-----------------------------------------------
+Total number of bits:  8000017542
+
+Normal statistic for number of bits   :    0.14
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.56
+
+Kolmogorov-Smirnov- statistic = D-    :   0.091
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.89
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.53
+p-value of test                       :    0.70
+
+Sample variance                       :    1.03
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.67
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.38
+p-value of test                       :    0.87
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.14
+p-value of test                       :    0.55
+
+Sample variance                       :    0.84
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.27
+p-value of test                       :    0.20
+
+Kolmogorov-Smirnov- statistic = D-    :   0.026
+p-value of test                       :    0.97
+
+Anderson-Darling statistic = A2       :    1.47
+p-value of test                       :    0.19
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.62
+p-value of test                       :    0.95
+
+Sample variance                       :    1.00
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.15
+p-value of test                       :    0.58
+
+Anderson-Darling statistic = A2       :    0.24
+p-value of test                       :    0.97
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.028
+p-value of test                       :    0.51
+
+Sample variance                       :    0.99
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:02:50.19
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:24:54.87
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1410.44223989785 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_7 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_7
new file mode 100644
index 0000000000..578285c73f
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_7
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497a
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.16
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1463
+p-value of test                       :  4.2e-3
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334583
+  j =  1                              :        599997074
+  j =  2                              :             1463
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:34.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1409
+p-value of test                       :    0.12
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334529
+  j =  1                              :        599997182
+  j =  2                              :             1409
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1322
+p-value of test                       :    0.87
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334442
+  j =  1                              :        599997356
+  j =  2                              :             1322
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:59.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1347
+p-value of test                       :    0.67
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334467
+  j =  1                              :        599997306
+  j =  2                              :             1347
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:56.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1394
+p-value of test                       :    0.21
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334514
+  j =  1                              :        599997212
+  j =  2                              :             1394
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:43.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1419
+p-value of test                       :    0.07
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334539
+  j =  1                              :        599997162
+  j =  2                              :             1419
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:53.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:04.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1351
+p-value of test                       :    0.63
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334471
+  j =  1                              :        599997298
+  j =  2                              :             1351
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:17.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1362
+p-value of test                       :    0.52
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334482
+  j =  1                              :        599997276
+  j =  2                              :             1362
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:46.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1333
+p-value of test                       :    0.80
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334453
+  j =  1                              :        599997334
+  j =  2                              :             1333
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:31.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5545
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:18.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4447
+p-value of test                       :    0.05
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7271
+p-value of test                       :    0.71
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:56.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4237
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.46
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4341
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7233
+p-value of test                       :    0.84
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:11.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7303
+p-value of test                       :    0.57
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:01.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7504
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:03.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7366
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:19.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.91
+p-value of test                       :    0.41
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.69
+p-value of test                       :    0.57
+
+Test on the Nm values of W_{n,i}(mNP1):    2.14
+p-value of test                       :    0.08
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     835
+p-value of test                       :    0.99
+
+Stat. AD (mNP2)                       :    0.57
+p-value of test                       :    0.68
+
+Stat. AD after spacings (mNP2-S)      :    1.37
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:03:27.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.21
+p-value of test                       :    0.26
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.09
+p-value of test                       :    0.31
+
+Test on the Nm values of W_{n,i}(mNP1):    0.29
+p-value of test                       :    0.95
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     597
+p-value of test                       :    0.54
+
+Stat. AD (mNP2)                       :    0.23
+p-value of test                       :    0.98
+
+Stat. AD after spacings (mNP2-S)      :    3.62
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.23
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.56
+p-value of test                       :    0.68
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.91
+p-value of test                       :    0.40
+
+Test on the Nm values of W_{n,i}(mNP1):    4.52
+p-value of test                       :  4.9e-3
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     335
+p-value of test                       :    0.02
+
+Stat. AD (mNP2)                       :    1.23
+p-value of test                       :    0.26
+
+Stat. AD after spacings (mNP2-S)      :    0.64
+p-value of test                       :    0.61
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.07
+p-value of test                       :    0.32
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.07
+p-value of test                       :    0.32
+
+Test on the Nm values of W_{n,i}(mNP1):    1.42
+p-value of test                       :    0.20
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     171
+p-value of test                       :    0.05
+
+Stat. AD (mNP2)                       :    0.42
+p-value of test                       :    0.83
+
+Stat. AD after spacings (mNP2-S)      :    0.93
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:03:16.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :   11.35
+p-value of test                       :    0.12
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    6.73
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   23.90
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.38
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   11.32
+p-value of test                       :    0.88
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   39.95
+p-value of test                       :    0.92
+
+-----------------------------------------------
+CPU time used                    :  00:01:34.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   54.58
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   61.94
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   64.26
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:01:51.17
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  240.81
+p-value of test                       :    0.33
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  430.91
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1405.96
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7316.07
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:02:59.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.82
+p-value of test                       :    0.46
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   35.34
+p-value of test                       :    0.23
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   60.73
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:03:58.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.48
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:06.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  137.98
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:57.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5047.24
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45505
+p-value of test                       :    0.96
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869505
+  j =  1                              :        399908993
+  j =  2                              :            45499
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45747
+p-value of test                       :    0.73
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869747
+  j =  1                              :        399908508
+  j =  2                              :            45743
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.072
+p-value of test                       :    0.63
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.79
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.38
+
+Kolmogorov-Smirnov- statistic = D-    :   0.091
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.32
+
+Kolmogorov-Smirnov- statistic = D-    :   0.041
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :   0.073
+p-value of test                       :    0.69
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.69
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:58.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.050
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.78
+p-value of test                       :    0.50
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :   0.080
+p-value of test                       :    0.74
+
+Anderson-Darling statistic = A2       :    0.23
+p-value of test                       :    0.98
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :   0.026
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.85
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.47
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.059
+p-value of test                       :    0.73
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.090
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    1.03
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.068
+p-value of test                       :    0.80
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.86
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 5.97e-5
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    : 2.80e-4
+p-value of test                       :    0.04
+
+Anderson-Darling statistic = A2       :    2.51
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 8.58e-5
+p-value of test                       :    0.74
+
+Kolmogorov-Smirnov- statistic = D-    : 1.68e-4
+p-value of test                       :    0.32
+
+Anderson-Darling statistic = A2       :    0.58
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :    1.74
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:00:32.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    2.14
+p-value of test                       :    0.02
+
+-----------------------------------------------
+CPU time used                    :  00:00:33.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.092
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.80
+p-value of test                       :    0.21
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   71.74
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   90.33
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   48.81
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   42.78
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   52.08
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   33.44
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:31.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   29.00
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:02:40.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.12
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   42.45
+p-value of test                       :    0.37
+
+-----------------------------------------------
+CPU time used                    :  00:01:29.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.074
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.20
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   48.43
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    4.78
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:24.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.94
+p-value of test                       :    0.11
+
+-----------------------------------------------
+CPU time used                    :  00:02:28.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.080
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.13
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :   0.075
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.50
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.45
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  136.23
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.68
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.31
+
+Anderson-Darling statistic = A2       :    0.48
+p-value of test                       :    0.76
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17501.38
+p-value of test                       :    0.35
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   34.12
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.79
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   21.72
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   41.05
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   12.10
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   22.04
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   32.16
+p-value of test                       :    0.61
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   50.56
+p-value of test                       :  1.8e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   18.27
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   12.78
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  152.02
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  181.97
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  519.63
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  141.81
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   74.80
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  144.39
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  197.55
+p-value of test                       :  2.9e-3
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  465.25
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  122.60
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   81.43
+p-value of test                       :    0.26
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  414.20
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  398.71
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5003.61
+p-value of test                       :    0.48
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  359.15
+p-value of test                       :    0.75
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  201.46
+p-value of test                       :    0.46
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  391.92
+p-value of test                       :    0.38
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  359.57
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4967.25
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  387.09
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  182.59
+p-value of test                       :    0.81
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.35
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.33
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.96
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   16.35
+p-value of test                       :    0.18
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.82
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :    0.28
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    0.84
+p-value of test                       :    0.45
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.59
+p-value of test                       :    0.28
+
+Sample variance                       :    0.40
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.21
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.25
+
+Anderson-Darling statistic = A2       :    0.97
+p-value of test                       :    0.37
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.11
+p-value of test                       :    0.55
+
+Sample variance                       :    1.67
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.017
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    : 5.19e-3
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    1.08
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.012
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    : 6.56e-3
+p-value of test                       :    0.70
+
+Anderson-Darling statistic = A2       :    0.83
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   12.38
+p-value of test                       :    0.13
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    7.16
+p-value of test                       :    0.52
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.076
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.74
+p-value of test                       :    0.52
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  216.65
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:43.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.32
+p-value of test                       :    0.10
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.46
+
+Anderson-Darling statistic = A2       :    1.20
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  182.18
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.070
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.47
+
+Anderson-Darling statistic = A2       :    0.36
+p-value of test                       :    0.88
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10083.83
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.049
+p-value of test                       :    0.92
+
+Kolmogorov-Smirnov- statistic = D-    :    0.45
+p-value of test                       :    0.01
+
+Anderson-Darling statistic = A2       :    2.54
+p-value of test                       :    0.05
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10246.08
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:01:08.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.17
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.18
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.11
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:05:04.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.62
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    0.46
+p-value of test                       :    0.78
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4902.35
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.41
+p-value of test                       :    0.02
+
+Kolmogorov-Smirnov- statistic = D-    :   0.029
+p-value of test                       :    0.96
+
+Anderson-Darling statistic = A2       :    1.99
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4717.73
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4014.73
+p-value of test                       :    0.87
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4036.77
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:01:38.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11743.66
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11528.01
+p-value of test                       :    0.97
+
+-----------------------------------------------
+CPU time used                    :  00:01:50.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000001
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   54.99
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Total number of bits:  8000006256
+
+Normal statistic for number of bits   :   0.049
+p-value of test                       :    0.48
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   56.92
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+Total number of bits:  7999841760
+
+Normal statistic for number of bits   :   -1.25
+p-value of test                       :    0.89
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.22
+p-value of test                       :    0.33
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.34
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.12
+p-value of test                       :    0.55
+
+Sample variance                       :    0.24
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.27
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    1.02
+p-value of test                       :    0.34
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.12
+p-value of test                       :    0.55
+
+Sample variance                       :    1.45
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.42
+
+Kolmogorov-Smirnov- statistic = D-    :    0.37
+p-value of test                       :    0.05
+
+Anderson-Darling statistic = A2       :    1.97
+p-value of test                       :    0.10
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.00
+p-value of test                       :    0.16
+
+Sample variance                       :    1.87
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.096
+p-value of test                       :    0.78
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.23
+
+Anderson-Darling statistic = A2       :    0.81
+p-value of test                       :    0.47
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.83
+p-value of test                       :    0.20
+
+Sample variance                       :    0.79
+p-value of test                       :    0.63
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.73
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:27:26.19
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1409.7938617277 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_8 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_8
new file mode 100644
index 0000000000..6b3e08486b
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_8
@@ -0,0 +1,3803 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.Well44497b
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1372
+p-value of test                       :    0.42
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334492
+  j =  1                              :        599997256
+  j =  2                              :             1372
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:34.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1414
+p-value of test                       :    0.09
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334534
+  j =  1                              :        599997172
+  j =  2                              :             1414
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:20.98
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1388
+p-value of test                       :    0.26
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334508
+  j =  1                              :        599997224
+  j =  2                              :             1388
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:21.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:22.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1396
+p-value of test                       :    0.20
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334516
+  j =  1                              :        599997208
+  j =  2                              :             1396
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:26.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1381
+p-value of test                       :    0.33
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334501
+  j =  1                              :        599997238
+  j =  2                              :             1381
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:34.63
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1427
+p-value of test                       :    0.05
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334547
+  j =  1                              :        599997146
+  j =  2                              :             1427
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:31.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1432
+p-value of test                       :    0.04
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334552
+  j =  1                              :        599997136
+  j =  2                              :             1432
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:08.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1337
+p-value of test                       :    0.76
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334457
+  j =  1                              :        599997326
+  j =  2                              :             1337
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:51.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1417
+p-value of test                       :    0.08
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334537
+  j =  1                              :        599997166
+  j =  2                              :             1417
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:31.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5552
+p-value of test                       :    0.04
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:18.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4328
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:20.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7099
+p-value of test                       :    0.9949
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4470
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:53.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4366
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7214
+p-value of test                       :    0.89
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:03.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7235
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:51.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7238
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:59.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7369
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:17.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.79
+p-value of test                       :    0.12
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.13
+p-value of test                       :    0.29
+
+Test on the Nm values of W_{n,i}(mNP1):    0.72
+p-value of test                       :    0.54
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     896
+p-value of test                       :    0.54
+
+Stat. AD (mNP2)                       :    0.67
+p-value of test                       :    0.58
+
+Stat. AD after spacings (mNP2-S)      :    1.48
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.57
+p-value of test                       :    0.68
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.72
+p-value of test                       :    0.13
+
+Test on the Nm values of W_{n,i}(mNP1):    0.86
+p-value of test                       :    0.44
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     574
+p-value of test                       :    0.85
+
+Stat. AD (mNP2)                       :    0.23
+p-value of test                       :    0.98
+
+Stat. AD after spacings (mNP2-S)      :    0.67
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:02:07.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.51
+p-value of test                       :    0.18
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    1.76
+p-value of test                       :    0.13
+
+Test on the Nm values of W_{n,i}(mNP1):    0.68
+p-value of test                       :    0.57
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     289
+p-value of test                       :    0.73
+
+Stat. AD (mNP2)                       :    2.22
+p-value of test                       :    0.07
+
+Stat. AD after spacings (mNP2-S)      :    0.58
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    1.30
+p-value of test                       :    0.23
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.89
+p-value of test                       :    0.41
+
+Test on the Nm values of W_{n,i}(mNP1):    2.42
+p-value of test                       :    0.05
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     159
+p-value of test                       :    0.24
+
+Stat. AD (mNP2)                       :    0.73
+p-value of test                       :    0.53
+
+Stat. AD after spacings (mNP2-S)      :    2.54
+p-value of test                       :    0.05
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.40
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    4.24
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:01:14.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    5.14
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.84
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   17.77
+p-value of test                       :    0.47
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   20.80
+p-value of test                       :    0.29
+
+-----------------------------------------------
+CPU time used                    :  00:01:26.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   74.97
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:01:36.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   57.74
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   49.70
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:01:49.32
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   51.54
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  262.47
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  517.57
+p-value of test                       :  3.5e-3
+
+-----------------------------------------------
+CPU time used                    :  00:02:49.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1448.34
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7050.85
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:02:54.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.43
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.61
+
+Anderson-Darling statistic = A2       :    0.46
+p-value of test                       :    0.78
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   25.40
+p-value of test                       :    0.71
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.54
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.63
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   57.96
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:03:57.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    0.65
+p-value of test                       :    0.99
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  117.15
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:58.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5076.65
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:27.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.62e+6
+p-value of test                       :    0.99
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:09.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46082
+p-value of test                       :    0.17
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870082
+  j =  1                              :        399907838
+  j =  2                              :            46078
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45984
+p-value of test                       :    0.31
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869984
+  j =  1                              :        399908035
+  j =  2                              :            45978
+  j =  3                              :                3
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:29.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.35
+
+Kolmogorov-Smirnov- statistic = D-    :   0.050
+p-value of test                       :    0.79
+
+Anderson-Darling statistic = A2       :    0.60
+p-value of test                       :    0.65
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    : 5.64e-3
+p-value of test                       :    0.9930
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.06
+
+Anderson-Darling statistic = A2       :    2.26
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:11.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.063
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.05
+
+Anderson-Darling statistic = A2       :    1.73
+p-value of test                       :    0.13
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.28
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:02.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.076
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.13
+p-value of test                       :    0.49
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.24
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:26.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.09
+
+Kolmogorov-Smirnov- statistic = D-    :   0.017
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    2.03
+p-value of test                       :    0.09
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.97
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.095
+p-value of test                       :    0.65
+
+Anderson-Darling statistic = A2       :    0.66
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:42.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.36
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.44
+
+Anderson-Darling statistic = A2       :    0.73
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.087
+p-value of test                       :    0.70
+
+Kolmogorov-Smirnov- statistic = D-    :   0.074
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.17
+p-value of test                       :    0.9959
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.022
+p-value of test                       :    0.97
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.18
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:02:12.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.84e-4
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    : 8.03e-5
+p-value of test                       :    0.77
+
+Anderson-Darling statistic = A2       :    0.91
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 4.84e-5
+p-value of test                       :    0.91
+
+Kolmogorov-Smirnov- statistic = D-    : 2.22e-4
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    0.90
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.69
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.46
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:00:30.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    0.42
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:00:29.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.65
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.53
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:59.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   69.78
+p-value of test                       :    0.38
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   60.00
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :  100.93
+p-value of test                       :  4.7e-3
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   35.88
+p-value of test                       :    0.52
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   29.55
+p-value of test                       :    0.80
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.03
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   24.07
+p-value of test                       :    0.95
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   29.62
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:33.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.29
+p-value of test                       :    0.16
+
+Kolmogorov-Smirnov- statistic = D-    :   0.073
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.11
+p-value of test                       :    0.30
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   27.84
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :   0.076
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.69
+p-value of test                       :    0.57
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   32.78
+p-value of test                       :    0.78
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    0.29
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    8.67
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.04
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.65
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    1.48
+p-value of test                       :    0.48
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.072
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :    0.22
+p-value of test                       :    0.34
+
+Anderson-Darling statistic = A2       :    0.86
+p-value of test                       :    0.43
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  151.08
+p-value of test                       :    0.10
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.033
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.16
+
+Anderson-Darling statistic = A2       :    1.57
+p-value of test                       :    0.16
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17739.36
+p-value of test                       :    0.05
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:53.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   49.25
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   31.48
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   18.58
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   24.15
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   23.22
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   30.51
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   29.45
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   23.87
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   35.68
+p-value of test                       :    0.06
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   30.57
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.12
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  141.57
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  144.57
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  451.64
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  139.70
+p-value of test                       :    0.40
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   56.85
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  172.26
+p-value of test                       :    0.07
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  155.56
+p-value of test                       :    0.28
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  517.47
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  108.78
+p-value of test                       :    0.96
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   89.51
+p-value of test                       :    0.11
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:56.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  387.76
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  361.29
+p-value of test                       :    0.79
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4975.37
+p-value of test                       :    0.59
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  356.95
+p-value of test                       :    0.78
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  203.48
+p-value of test                       :    0.42
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  399.21
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  345.51
+p-value of test                       :    0.92
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4993.88
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  399.09
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  214.19
+p-value of test                       :    0.23
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:48.52
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :    7.55
+p-value of test                       :    0.82
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.75
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   16.88
+p-value of test                       :    0.15
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  : -347.06
+p-value of test                       : 1 - eps1    *****
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:19.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.24
+p-value of test                       :    0.26
+
+Kolmogorov-Smirnov- statistic = D-    :   0.095
+p-value of test                       :    0.78
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.48
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.85
+p-value of test                       :    0.80
+
+Sample variance                       :    1.01
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:00:55.21
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    :   0.072
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    0.45
+p-value of test                       :    0.80
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.60
+p-value of test                       :    0.73
+
+Sample variance                       :    0.65
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:00:57.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 6.40e-3
+p-value of test                       :    0.71
+
+Kolmogorov-Smirnov- statistic = D-    :   0.015
+p-value of test                       :    0.16
+
+Anderson-Darling statistic = A2       :    0.49
+p-value of test                       :    0.75
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 3.65e-3
+p-value of test                       :    0.89
+
+Kolmogorov-Smirnov- statistic = D-    :   0.012
+p-value of test                       :    0.33
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.62
+
+-----------------------------------------------
+CPU time used                    :  00:00:46.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.90
+p-value of test                       :    0.21
+
+-----------------------------------------------
+Global longest run of 1               :   33.00
+p-value of test                       :    0.44
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    4.75
+p-value of test                       :    0.78
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.29
+
+Kolmogorov-Smirnov- statistic = D-    :   0.086
+p-value of test                       :    0.82
+
+Anderson-Darling statistic = A2       :    0.51
+p-value of test                       :    0.73
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  185.75
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.44
+p-value of test                       :    0.01
+
+Kolmogorov-Smirnov- statistic = D-    :   0.019
+p-value of test                       :    0.98
+
+Anderson-Darling statistic = A2       :    2.35
+p-value of test                       :    0.06
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  160.42
+p-value of test                       :    0.98
+
+-----------------------------------------------
+CPU time used                    :  00:02:41.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.28
+
+Anderson-Darling statistic = A2       :    0.77
+p-value of test                       :    0.50
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10014.18
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:01:04.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.045
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.27
+
+Anderson-Darling statistic = A2       :    1.20
+p-value of test                       :    0.27
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10198.51
+p-value of test                       :    0.08
+
+-----------------------------------------------
+CPU time used                    :  00:01:08.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.46
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:20.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :  -0.091
+p-value of test                       :    0.54
+
+-----------------------------------------------
+CPU time used                    :  00:01:15.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.70
+p-value of test                       :    0.76
+
+-----------------------------------------------
+CPU time used                    :  00:04:56.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.47
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.29
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.61
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4907.24
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:02:05.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.092
+p-value of test                       :    0.79
+
+Kolmogorov-Smirnov- statistic = D-    :    0.31
+p-value of test                       :    0.13
+
+Anderson-Darling statistic = A2       :    1.01
+p-value of test                       :    0.35
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4972.12
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:02:11.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4131.61
+p-value of test                       :    0.43
+
+-----------------------------------------------
+CPU time used                    :  00:01:33.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4079.85
+p-value of test                       :    0.66
+
+-----------------------------------------------
+CPU time used                    :  00:01:40.11
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11798.86
+p-value of test                       :    0.57
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11822.81
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:01:48.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   50.27
+p-value of test                       :    0.62
+
+
+-----------------------------------------------
+Total number of bits:  8000056467
+
+Normal statistic for number of bits   :    0.45
+p-value of test                       :    0.33
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:16.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   53.12
+p-value of test                       :    0.51
+
+
+-----------------------------------------------
+Total number of bits:  8000011632
+
+Normal statistic for number of bits   :   0.092
+p-value of test                       :    0.46
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.17
+p-value of test                       :    0.49
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.71
+
+Anderson-Darling statistic = A2       :    0.64
+p-value of test                       :    0.60
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.95
+p-value of test                       :    0.83
+
+Sample variance                       :    1.22
+p-value of test                       :    0.28
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.085
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.26
+p-value of test                       :    0.22
+
+Anderson-Darling statistic = A2       :    0.67
+p-value of test                       :    0.58
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.56
+p-value of test                       :    0.29
+
+Sample variance                       :    1.15
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:02:27.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.18
+p-value of test                       :    0.48
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.63
+p-value of test                       :    0.62
+
+Tests on the sum of all N observations
+Standardized normal statistic         :  -0.034
+p-value of test                       :    0.51
+
+Sample variance                       :    1.80
+p-value of test                       :    0.06
+
+-----------------------------------------------
+CPU time used                    :  00:02:46.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :   0.071
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.24
+p-value of test                       :    0.89
+
+Sample variance                       :    0.84
+p-value of test                       :    0.58
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.25
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:25:49.73
+ The following tests gave p-values outside [0.001, 0.9990]:
+ (eps  means a value < 1.0e-300):
+ (eps1 means a value < 1.0e-15):
+
+       Test                          p-value
+ ----------------------------------------------
+ 80  LinearComp, r = 0              1 - eps1
+ 81  LinearComp, r = 29             1 - eps1
+ ----------------------------------------------
+ All other tests were passed
+
+
+
+# 
+# Test duration: 1414.8500183813167 minutes
+# 
diff --git a/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_9 b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_9
new file mode 100644
index 0000000000..33219026ef
--- /dev/null
+++ b/src/site/resources/txt/userguide/rng/stress/tu/run_2/tu_9
@@ -0,0 +1,3795 @@
+# 
+# RNG: org.apache.commons.math4.rng.internal.source32.ISAACRandom
+# 
+# Java: 1.8.0_66
+# Runtime: 1.8.0_66-b17
+# JVM: Java HotSpot(TM) 64-Bit Server VM 25.66-b17
+# OS: Linux 3.16.0-4-amd64 amd64
+# 
+# Analyzer: ../stdin2testu01 BigCrush 
+# 
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+                 Starting BigCrush
+                 Version: TestU01 1.2.3
+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  0,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.34
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.28
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_SerialOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 22,   d =  256,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =           16777216
+       Expected number per cell =   59.604645
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0083558402,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 16711680
+Value of the statistic                : 1.67e+7
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:14.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1352
+p-value of test                       :    0.62
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334472
+  j =  1                              :        599997296
+  j =  2                              :             1352
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:41.87
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  9,   d = 2097152,   t =  2,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1343
+p-value of test                       :    0.71
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334463
+  j =  1                              :        599997314
+  j =  2                              :             1343
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:53.44
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1364
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334484
+  j =  1                              :        599997272
+  j =  2                              :             1364
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:33.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 16,   d = 16384,   t =  3,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1379
+p-value of test                       :    0.35
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334499
+  j =  1                              :        599997242
+  j =  2                              :             1379
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:46.66
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1365
+p-value of test                       :    0.50
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334485
+  j =  1                              :        599997270
+  j =  2                              :             1365
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:29.80
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 24,   d =   64,   t =  7,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1353
+p-value of test                       :    0.61
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334473
+  j =  1                              :        599997294
+  j =  2                              :             1353
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:05:34.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1396
+p-value of test                       :    0.20
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334516
+  j =  1                              :        599997208
+  j =  2                              :             1396
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:07:28.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 27,   d =    8,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1315
+p-value of test                       :    0.91
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334435
+  j =  1                              :        599997370
+  j =  2                              :             1315
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:34.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r =  0,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1345
+p-value of test                       :    0.69
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334465
+  j =  1                              :        599997310
+  j =  2                              :             1345
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:08:04.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test smarsa_CollisionOver calling smultin_MultinomialOver
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_MultinomialOver test:
+-----------------------------------------------
+   N = 30,  n = 20000000,  r = 28,   d =    4,   t = 21,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellSerial
+       Number of cells = d^t =      4398046511104
+       Expected number per cell =  1 /  219902.33
+       EColl = n^2 / (2k) =  45.47473509
+       Hashing =   TRUE
+
+       Collision test
+
+       CollisionOver:   density = n / k =  1 /  219902.33
+       Expected number of collisions = Mu =      45.47
+
+
+-----------------------------------------------
+Results of CollisionOver test:
+
+POISSON approximation                 :
+Expected number of collisions = N*Mu  :     1364.24
+Observed number of collisions         :     1329
+p-value of test                       :    0.83
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :  131940795334449
+  j =  1                              :        599997342
+  j =  2                              :             1329
+  j =  3                              :                0
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:06:44.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 100,  n = 10000000,  r =  0,    d = 2147483648,    t = 2,    p = 1
+
+
+      Number of cells = d^t = 4611686018427387904
+      Lambda = Poisson mean =      54.2101
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    5421.01
+Total observed number                 :    5483
+p-value of test                       :    0.20
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:13.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 2097152,    t = 3,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4367
+p-value of test                       :    0.33
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:18.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 65536,    t = 4,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7487
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:55.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4314
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:56.09
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  7,    d = 512,    t = 7,    p = 1
+
+
+      Number of cells = d^t = 9223372036854775808
+      Lambda = Poisson mean =     216.8404
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    4336.81
+Total observed number                 :    4460
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:00.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 14,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7412
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:23.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 22,    d = 256,    t = 8,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7257
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:04:08.48
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r =  0,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7235
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:08.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_BirthdaySpacings test:
+-----------------------------------------------
+   N = 20,  n = 30000000,  r = 26,    d = 16,    t = 16,    p = 1
+
+
+      Number of cells = d^t = 18446744073709551616
+      Lambda = Poisson mean =     365.9182
+
+
+----------------------------------------------------
+Total expected number = N*Lambda      :    7318.36
+Total observed number                 :    7364
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+CPU time used                    :  00:05:34.94
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 30,  n = 6000000,  r =  0,  t = 3,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.45
+p-value of test                       :    0.80
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.70
+p-value of test                       :    0.55
+
+Test on the Nm values of W_{n,i}(mNP1):    1.50
+p-value of test                       :    0.18
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     900
+Number of jumps of Y                  :     945
+p-value of test                       :    0.07
+
+Stat. AD (mNP2)                       :    0.73
+p-value of test                       :    0.53
+
+Stat. AD after spacings (mNP2-S)      :    2.76
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:03:18.22
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 20,  n = 4000000,  r =  0,  t = 5,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.71
+p-value of test                       :    0.55
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.55
+p-value of test                       :    0.69
+
+Test on the Nm values of W_{n,i}(mNP1):    0.22
+p-value of test                       :    0.98
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     600
+Number of jumps of Y                  :     603
+p-value of test                       :    0.46
+
+Stat. AD (mNP2)                       :    0.62
+p-value of test                       :    0.63
+
+Stat. AD after spacings (mNP2-S)      :    1.03
+p-value of test                       :    0.34
+
+-----------------------------------------------
+CPU time used                    :  00:02:19.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N = 10,  n = 3000000,  r =  0,  t = 9,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.89
+p-value of test                       :    0.42
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.30
+p-value of test                       :    0.94
+
+Test on the Nm values of W_{n,i}(mNP1):    0.38
+p-value of test                       :    0.87
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     300
+Number of jumps of Y                  :     309
+p-value of test                       :    0.31
+
+Stat. AD (mNP2)                       :    1.08
+p-value of test                       :    0.32
+
+Stat. AD after spacings (mNP2-S)      :    0.27
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:03:06.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+snpair_ClosePairs test:
+-----------------------------------------------
+   N =  5,  n = 2000000,  r =  0,  t = 16,  p = 0,  m = 30,  Torus =  TRUE
+
+
+---------------------------------------
+Test based on the 2 nearest points (NP):
+
+Stat. AD on the N values (NP)         :    0.54
+p-value of test                       :    0.70
+
+
+A2 test based on the spacings between the
+   successive jump times of process Y_n(t):
+
+A2 test on the values of A2 (m-NP)    :    0.22
+p-value of test                       :    0.98
+
+Test on the Nm values of W_{n,i}(mNP1):    0.42
+p-value of test                       :    0.83
+
+Test on the jump times of Y
+   (superposition of Yn):
+
+Expected number of jumps of Y = mN    :     150
+Number of jumps of Y                  :     158
+p-value of test                       :    0.27
+
+Stat. AD (mNP2)                       :    0.36
+p-value of test                       :    0.89
+
+Stat. AD after spacings (mNP2-S)      :    0.90
+p-value of test                       :    0.41
+
+-----------------------------------------------
+CPU time used                    :  00:03:20.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r =  0,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    2.81
+p-value of test                       :    0.90
+
+-----------------------------------------------
+CPU time used                    :  00:01:17.25
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 400000000,  r = 27,   d =    8,   k =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    7
+Chi-square statistic                  :    8.39
+p-value of test                       :    0.30
+
+-----------------------------------------------
+CPU time used                    :  00:01:28.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   10.15
+p-value of test                       :    0.93
+
+-----------------------------------------------
+CPU time used                    :  00:01:21.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_SimpPoker test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   d =   32,   k =   32
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   18
+Chi-square statistic                  :   30.20
+p-value of test                       :    0.04
+
+-----------------------------------------------
+CPU time used                    :  00:01:30.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r =  0,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   52.49
+p-value of test                       :    0.53
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 10,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   57.24
+p-value of test                       :    0.36
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.71
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 20,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   48.85
+p-value of test                       :    0.67
+
+-----------------------------------------------
+CPU time used                    :  00:01:56.02
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_CouponCollector test:
+-----------------------------------------------
+   N =  1,  n = 200000000,  r = 27,   d =    8
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   54
+Chi-square statistic                  :   58.34
+p-value of test                       :    0.32
+
+-----------------------------------------------
+CPU time used                    :  00:01:55.97
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   Alpha =        0,   Beta  =   0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  232
+Chi-square statistic                  :  241.87
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:08.56
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 300000000,  r = 25,   Alpha =        0,   Beta  =  0.03125
+
+
+-----------------------------------------------
+Number of degrees of freedom          :  434
+Chi-square statistic                  :  467.55
+p-value of test                       :    0.13
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.19
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   Alpha =        0,   Beta  = 0.0078125
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 1437
+Chi-square statistic                  : 1389.30
+p-value of test                       :    0.81
+
+-----------------------------------------------
+CPU time used                    :  00:03:17.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Gap test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   Alpha =        0,   Beta  = 0.000976562
+
+
+-----------------------------------------------
+Number of degrees of freedom          : 7046
+Chi-square statistic                  : 7152.32
+p-value of test                       :    0.18
+
+-----------------------------------------------
+CPU time used                    :  00:03:14.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N =  5,  n = 1000000000,  r =  0,   Up = FALSE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.51
+
+Kolmogorov-Smirnov- statistic = D-    :    0.23
+p-value of test                       :    0.52
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.83
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   30
+Chi-square statistic                  :   30.06
+p-value of test                       :    0.46
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_Run test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 15,   Up =  TRUE
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.23
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.62
+
+Anderson-Darling statistic = A2       :    0.75
+p-value of test                       :    0.51
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   60
+Chi-square statistic                  :   50.83
+p-value of test                       :    0.79
+
+-----------------------------------------------
+CPU time used                    :  00:04:15.30
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  3,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                  6
+       Expected number per cell =  1.6666667e+08
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  2.5000002e-09,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :    5
+Value of the statistic                :    5.36
+p-value of test                       :    0.37
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:13.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r =  5,   t =  5,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =                120
+       Expected number per cell =   8333333.3
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.9500005e-08,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          :  119
+Value of the statistic                :  148.67
+p-value of test                       :    0.03
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.50
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  5,   t =  7,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =               5040
+       Expected number per cell =   99206.349
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =  5.0390004e-06,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 5039
+Value of the statistic                : 5077.91
+p-value of test                       :    0.35
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:25.72
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_Permutation calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r = 10,   t = 10,
+       Sparse =  FALSE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =            3628800
+       Expected number per cell =    137.7866
+       Hashing =  FALSE
+
+   For Delta > -1, we use the ChiSquare approximation
+   Correction factor of the ChiSquare: 
+       Delta =     1,    Mu =   0.0036287993,    Sigma =          1
+
+-----------------------------------------------
+Test Results for Delta =   1.0000
+
+Number of degrees of freedom          : 3628799
+Value of the statistic                : 3.63e+6
+p-value of test                       :    0.63
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:08.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r =  0,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    46025
+p-value of test                       :    0.25
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165870025
+  j =  1                              :        399907952
+  j =  2                              :            46021
+  j =  3                              :                2
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:24.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+Test sknuth_CollisionPermut calling smultin_Multinomial
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smultin_Multinomial test:
+-----------------------------------------------
+   N = 20,  n = 20000000,  r = 10,   t = 14,
+       Sparse =   TRUE
+
+       GenerCell = smultin_GenerCellPermut
+       Number of cells = t! =        87178291200
+       Expected number per cell =  1 /  4358.9146
+       EColl = n^2 / (2k) =   2294.14912
+       Hashing =   TRUE
+
+       Collision test,    Mu =      2293.9736,    Sigma =    47.8841
+
+-----------------------------------------------
+Test Results for Collisions
+
+For the total number of collisions, we use
+      the Poisson approximation:
+Expected number of collisions = N*Mu  :    45879.47
+Observed number of collisions         :    45274
+p-value of test                       :    0.9977
+
+
+-----------------------------
+Total number of cells containing j balls
+
+  j =  0                              :    1743165869274
+  j =  1                              :        399909457
+  j =  2                              :            45264
+  j =  3                              :                5
+  j =  4                              :                0
+  j =  5                              :                0
+
+-----------------------------------------------
+CPU time used                    :  00:04:46.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   d = 100000,   t =  8
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.079
+p-value of test                       :    0.58
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.42
+
+Anderson-Darling statistic = A2       :    0.39
+p-value of test                       :    0.85
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 3999960
+Chi-square statistic                  : 4.00e+6
+p-value of test                       :    0.39
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.075
+p-value of test                       :    0.61
+
+Kolmogorov-Smirnov- statistic = D-    :   0.096
+p-value of test                       :    0.45
+
+Anderson-Darling statistic = A2       :    0.61
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:30.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 30,  n = 10000000,  r =  0,   d = 100000,   t = 16
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.052
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.19
+p-value of test                       :    0.09
+
+Anderson-Darling statistic = A2       :    1.52
+p-value of test                       :    0.17
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 2999970
+Chi-square statistic                  : 3.00e+6
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.047
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :   0.098
+p-value of test                       :    0.53
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:03:13.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 24
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :   0.053
+p-value of test                       :    0.86
+
+Anderson-Darling statistic = A2       :    1.70
+p-value of test                       :    0.14
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.95
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.11
+p-value of test                       :    0.59
+
+Kolmogorov-Smirnov- statistic = D-    :   0.050
+p-value of test                       :    0.88
+
+Anderson-Darling statistic = A2       :    0.38
+p-value of test                       :    0.87
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:35.10
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sknuth_MaxOft test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   d = 100000,   t = 32
+
+      Number of categories = 100000
+      Expected number per category  = 100.00
+
+
+-----------------------------------------------
+Test results for chi2 with 99999 degrees of freedom:
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.077
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.43
+
+Anderson-Darling statistic = A2       :    0.29
+p-value of test                       :    0.94
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 1999980
+Chi-square statistic                  : 2.00e+6
+p-value of test                       :    0.45
+
+
+-----------------------------------------------
+Test results for Anderson-Darling:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.19
+p-value of test                       :    0.21
+
+Kolmogorov-Smirnov- statistic = D-    :   0.068
+p-value of test                       :    0.80
+
+Anderson-Darling statistic = A2       :    0.37
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:55.53
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 40,  n = 10000000,  r =  0,   t = 8
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.095
+p-value of test                       :    0.45
+
+Kolmogorov-Smirnov- statistic = D-    :    0.10
+p-value of test                       :    0.41
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.55
+
+-----------------------------------------------
+CPU time used                    :  00:02:36.64
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 16
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.16
+p-value of test                       :    0.31
+
+Kolmogorov-Smirnov- statistic = D-    :    0.12
+p-value of test                       :    0.54
+
+Anderson-Darling statistic = A2       :    0.41
+p-value of test                       :    0.84
+
+-----------------------------------------------
+CPU time used                    :  00:01:46.75
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleProd test:
+-----------------------------------------------
+   N = 20,  n = 10000000,  r =  0,   t = 24
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.44
+
+Kolmogorov-Smirnov- statistic = D-    :   0.050
+p-value of test                       :    0.87
+
+Anderson-Darling statistic = A2       :    0.53
+p-value of test                       :    0.72
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.47
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r =  0
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 7.26e-5
+p-value of test                       :    0.81
+
+Kolmogorov-Smirnov- statistic = D-    : 3.69e-4
+p-value of test                       :  4.3e-3
+
+Anderson-Darling statistic = A2       :    3.78
+p-value of test                       :    0.01
+
+-----------------------------------------------
+CPU time used                    :  00:00:34.62
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleMean test:
+-----------------------------------------------
+   N = 20000000,  n = 30,  r = 10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 1.54e-4
+p-value of test                       :    0.39
+
+Kolmogorov-Smirnov- statistic = D-    : 6.33e-5
+p-value of test                       :    0.85
+
+Anderson-Darling statistic = A2       :    0.56
+p-value of test                       :    0.69
+
+-----------------------------------------------
+CPU time used                    :  00:00:35.39
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 1
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.39
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.89
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SampleCorr test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   k = 2
+
+
+-----------------------------------------------
+Normal statistic                      :    1.87
+p-value of test                       :    0.03
+
+-----------------------------------------------
+CPU time used                    :  00:00:31.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 0,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :    0.48
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:02:00.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_AppearanceSpacings test:
+-----------------------------------------------
+   N =  1,   Q = 10000000,   K = 1000000000,   r = 27,   s = 3,   L = 15
+
+   Sequences of n = (K + Q)L =  15150000000 bits
+   Q = 10000000 initialization blocks
+   K = 1000000000 blocks for the test
+   the blocks have L = 15 bits
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.36
+p-value of test                       :    0.64
+
+-----------------------------------------------
+CPU time used                    :  00:02:06.79
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   52.10
+p-value of test                       :    0.91
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.59
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 20,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   60.53
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.86
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 28,  k = 256,  Alpha =      0,  Beta =   0.25
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   67
+Chi-square statistic                  :   76.52
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:43.68
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r =  0,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   38.44
+p-value of test                       :    0.40
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.78
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 10,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   40.60
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.60
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_WeightDistrib test:
+-----------------------------------------------
+   N =  1,  n = 20000000,  r = 26,  k = 256,  Alpha =      0,  Beta = 0.0625
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   37
+Chi-square statistic                  :   33.07
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+svaria_SumCollector test:
+-----------------------------------------------
+   N =  1,  n = 500000000,  r =  0,   g = 10
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   29
+Chi-square statistic                  :   18.09
+p-value of test                       :    0.94
+
+-----------------------------------------------
+CPU time used                    :  00:02:48.57
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r =  0,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.20
+p-value of test                       :    0.40
+
+Kolmogorov-Smirnov- statistic = D-    :    0.24
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.71
+p-value of test                       :    0.54
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   35.45
+p-value of test                       :    0.68
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.14
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N = 10,  n = 1000000,  r = 25,    s = 5,    L = 30,    k = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.25
+p-value of test                       :    0.25
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.48
+
+Anderson-Darling statistic = A2       :    0.62
+p-value of test                       :    0.62
+
+Test on the sum of all N observations
+Number of degrees of freedom          :   40
+Chi-square statistic                  :   36.06
+p-value of test                       :    0.65
+
+-----------------------------------------------
+CPU time used                    :  00:01:24.34
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r =  0,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    5.22
+p-value of test                       :    0.16
+
+-----------------------------------------------
+CPU time used                    :  00:02:09.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 5000,  r = 26,    s = 4,    L = 1000,    k = 1000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    3
+Chi-square statistic                  :    6.40
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:21.96
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r = 15,    s = 15,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    3.18
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:32.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_MatrixRank test:
+-----------------------------------------------
+   N =  1,  n = 80,  r =  0,    s = 30,    L = 5000,    k = 5000
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    2
+Chi-square statistic                  :    2.36
+p-value of test                       :    0.31
+
+-----------------------------------------------
+CPU time used                    :  00:01:18.29
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_Savir2 test:
+-----------------------------------------------
+   N = 10,  n = 10000000,  r = 10,    m = 1048576,    t = 30
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.75
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.55
+
+Anderson-Darling statistic = A2       :    0.23
+p-value of test                       :    0.98
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  130
+Chi-square statistic                  :  131.93
+p-value of test                       :    0.44
+
+-----------------------------------------------
+CPU time used                    :  00:01:03.67
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+smarsa_GCD test:
+-----------------------------------------------
+   N = 10,  n = 50000000,  r =  0,   s = 30
+
+
+-----------------------------------------------
+Test results for GCD values:
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.40
+p-value of test                       :    0.03
+
+Kolmogorov-Smirnov- statistic = D-    :    0.11
+p-value of test                       :    0.72
+
+Anderson-Darling statistic = A2       :    1.43
+p-value of test                       :    0.19
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 17430
+Chi-square statistic                  :17200.10
+p-value of test                       :    0.89
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:54.73
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r =  0,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   23.59
+p-value of test                       :    0.94
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   29.68
+p-value of test                       :    0.72
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   28.16
+p-value of test                       :    0.30
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   10.32
+p-value of test                       :    0.9931
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :    9.45
+p-value of test                       :    0.93
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:53.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 25,   s = 5,   L0 =   50,   L1 =   50
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :   36
+ChiSquare statistic                   :   30.21
+p-value of test                       :    0.74
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :   35
+ChiSquare statistic                   :   28.80
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :   25
+ChiSquare statistic                   :   17.10
+p-value of test                       :    0.88
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :   24
+ChiSquare statistic                   :   18.00
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   17
+ChiSquare statistic                   :   12.65
+p-value of test                       :    0.76
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:51.93
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  184.50
+p-value of test                       :    0.02
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  165.64
+p-value of test                       :    0.13
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  480.36
+p-value of test                       :    0.73
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  134.40
+p-value of test                       :    0.52
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   72.39
+p-value of test                       :    0.53
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:01.90
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 20,   s = 10,   L0 = 1000,   L1 = 1000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  138.68
+p-value of test                       :    0.65
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  146
+ChiSquare statistic                   :  151.53
+p-value of test                       :    0.36
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          :  500
+ChiSquare statistic                   :  470.12
+p-value of test                       :    0.83
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  136
+ChiSquare statistic                   :  155.73
+p-value of test                       :    0.12
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :   74
+ChiSquare statistic                   :   83.20
+p-value of test                       :    0.22
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:58.51
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r =  0,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  423.50
+p-value of test                       :    0.08
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  370.68
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 4914.73
+p-value of test                       :    0.80
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  362.75
+p-value of test                       :    0.70
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  192.31
+p-value of test                       :    0.64
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+swalk_RandomWalk1 test:
+-----------------------------------------------
+   N =  1,  n = 1000000,  r = 15,   s = 15,   L0 = 10000,   L1 = 10000
+
+
+
+-----------------------------------------------
+Test on the values of the Statistic H
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  347.15
+p-value of test                       :    0.91
+
+
+-----------------------------------------------
+Test on the values of the Statistic M
+
+Number of degrees of freedom          :  384
+ChiSquare statistic                   :  385.27
+p-value of test                       :    0.47
+
+
+-----------------------------------------------
+Test on the values of the Statistic J
+
+Number of degrees of freedom          : 5000
+ChiSquare statistic                   : 5014.44
+p-value of test                       :    0.44
+
+
+-----------------------------------------------
+Test on the values of the Statistic R
+
+Number of degrees of freedom          :  378
+ChiSquare statistic                   :  394.08
+p-value of test                       :    0.27
+
+
+-----------------------------------------------
+Test on the values of the Statistic C
+
+Number of degrees of freedom          :  200
+ChiSquare statistic                   :  196.57
+p-value of test                       :    0.56
+
+
+-----------------------------------------------
+CPU time used                    :  00:00:50.88
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r =  0,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   10.46
+p-value of test                       :    0.58
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :    0.83
+p-value of test                       :    0.20
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LinearComp test:
+-----------------------------------------------
+   N =  1,  n = 400020,  r = 29,    s = 1
+
+
+
+-----------------------------------------------
+Number of degrees of freedom          :   12
+Chi2 statistic for size of jumps      :   17.30
+p-value of test                       :    0.14
+
+
+-----------------------------------------------
+Normal statistic for number of jumps  :   -0.72
+p-value of test                       :    0.76
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:02:23.15
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r =  0,   s =   30,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.087
+p-value of test                       :    0.82
+
+Kolmogorov-Smirnov- statistic = D-    :    0.25
+p-value of test                       :    0.24
+
+Anderson-Darling statistic = A2       :    0.68
+p-value of test                       :    0.57
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.72
+p-value of test                       :    0.24
+
+Sample variance                       :    1.32
+p-value of test                       :    0.22
+
+-----------------------------------------------
+CPU time used                    :  00:00:54.77
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+scomp_LempelZiv test:
+-----------------------------------------------
+   N = 10,  n = 134217728,  r = 15,   s =   15,   k =   27
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.15
+p-value of test                       :    0.57
+
+Kolmogorov-Smirnov- statistic = D-    :    0.18
+p-value of test                       :    0.47
+
+Anderson-Darling statistic = A2       :    0.44
+p-value of test                       :    0.81
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   0.092
+p-value of test                       :    0.46
+
+Sample variance                       :    1.36
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:00:59.61
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r =  0,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 2.95e-3
+p-value of test                       :    0.93
+
+Kolmogorov-Smirnov- statistic = D-    :   0.013
+p-value of test                       :    0.26
+
+Anderson-Darling statistic = A2       :    0.70
+p-value of test                       :    0.56
+
+-----------------------------------------------
+CPU time used                    :  00:00:49.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sspectral_Fourier3 test:
+-----------------------------------------------
+   N = 100000,  n = 16384,  r = 27,   s =    3,   k =   14
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    : 4.02e-3
+p-value of test                       :    0.87
+
+Kolmogorov-Smirnov- statistic = D-    :   0.011
+p-value of test                       :    0.35
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+-----------------------------------------------
+CPU time used                    :  00:00:47.18
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r =  0,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :   10.49
+p-value of test                       :    0.23
+
+-----------------------------------------------
+Global longest run of 1               :   31.00
+p-value of test                       :    0.69
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:41.85
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_LongestHeadRun test:
+-----------------------------------------------
+   N =  1,  n = 1000,  r = 27,   s = 3,   L = 10000020
+
+
+-----------------------------------------------
+Number of degrees of freedom          :    8
+Chi-square statistic                  :    9.48
+p-value of test                       :    0.30
+
+-----------------------------------------------
+Global longest run of 1               :   32.00
+p-value of test                       :    0.50
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:44.76
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r =  0,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.31
+p-value of test                       :    0.11
+
+Kolmogorov-Smirnov- statistic = D-    :   0.048
+p-value of test                       :    0.93
+
+Anderson-Darling statistic = A2       :    1.70
+p-value of test                       :    0.14
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  166.90
+p-value of test                       :    0.96
+
+-----------------------------------------------
+CPU time used                    :  00:03:01.70
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_PeriodsInStrings test:
+-----------------------------------------------
+   N = 10,  n = 500000000,  r = 20,   s =   10
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.032
+p-value of test                       :    0.96
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.55
+p-value of test                       :    0.69
+
+Test on the sum of all N observations
+Number of degrees of freedom          :  200
+Chi-square statistic                  :  219.08
+p-value of test                       :    0.17
+
+-----------------------------------------------
+CPU time used                    :  00:03:05.31
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r =  0,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.10
+p-value of test                       :    0.76
+
+Kolmogorov-Smirnov- statistic = D-    :    0.32
+p-value of test                       :    0.11
+
+Anderson-Darling statistic = A2       :    0.99
+p-value of test                       :    0.36
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  :10100.33
+p-value of test                       :    0.24
+
+-----------------------------------------------
+CPU time used                    :  00:01:07.82
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingWeight2 test:
+-----------------------------------------------
+   N = 10,  n = 1000000000,  r = 27,   s = 3,   L = 1000000
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.26
+p-value of test                       :    0.22
+
+Kolmogorov-Smirnov- statistic = D-    :    0.20
+p-value of test                       :    0.40
+
+Anderson-Darling statistic = A2       :    0.79
+p-value of test                       :    0.49
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 10000
+Chi-square statistic                  : 9925.20
+p-value of test                       :    0.70
+
+-----------------------------------------------
+CPU time used                    :  00:01:10.27
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 1000000000,  r = 10,   s = 10,   L = 30
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.26
+p-value of test                       :    0.60
+
+-----------------------------------------------
+CPU time used                    :  00:01:23.95
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 300
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.65
+p-value of test                       :    0.74
+
+-----------------------------------------------
+CPU time used                    :  00:01:19.06
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingCorr test:
+-----------------------------------------------
+   N =  1,  n = 100000000,  r = 10,   s = 10,   L = 1200
+
+
+
+-----------------------------------------------
+Normal statistic                      :   -0.62
+p-value of test                       :    0.73
+
+-----------------------------------------------
+CPU time used                    :  00:05:14.55
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r =  0,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.073
+p-value of test                       :    0.86
+
+Kolmogorov-Smirnov- statistic = D-    :    0.29
+p-value of test                       :    0.15
+
+Anderson-Darling statistic = A2       :    0.65
+p-value of test                       :    0.60
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 4953.29
+p-value of test                       :    0.26
+
+-----------------------------------------------
+CPU time used                    :  00:02:16.05
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N = 10,  n = 30000000,  r = 27,   s = 3,   L = 30,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.016
+p-value of test                       :    0.98
+
+Kolmogorov-Smirnov- statistic = D-    :    0.30
+p-value of test                       :    0.14
+
+Anderson-Darling statistic = A2       :    1.14
+p-value of test                       :    0.29
+
+Test on the sum of all N observations
+Number of degrees of freedom          : 4890
+Chi-square statistic                  : 5025.17
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:02:15.81
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r =  0,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4024.32
+p-value of test                       :    0.85
+
+-----------------------------------------------
+CPU time used                    :  00:01:35.54
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 30000000,  r = 26,   s = 4,   L = 300,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 4117
+Chi-square statistic                  : 4239.73
+p-value of test                       :    0.09
+
+-----------------------------------------------
+CPU time used                    :  00:01:42.07
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r =  0,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11956.93
+p-value of test                       :    0.20
+
+-----------------------------------------------
+CPU time used                    :  00:01:47.36
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_HammingIndep test:
+-----------------------------------------------
+   N =  1,  n = 10000000,  r = 25,   s = 5,   L = 1200,   d = 0
+
+
+
+Counters with expected numbers >= 10
+-----------------------------------------------
+Number of degrees of freedom          : 11825
+Chi-square statistic                  :11489.97
+p-value of test                       :    0.99
+
+-----------------------------------------------
+CPU time used                    :  00:01:52.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r =  0,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   48.52
+p-value of test                       :    0.68
+
+
+-----------------------------------------------
+Total number of bits:  7999909185
+
+Normal statistic for number of bits   :   -0.72
+p-value of test                       :    0.76
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.26
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_Run test:
+-----------------------------------------------
+   N =  1,  n = 2000000000,  r = 27,   s =    3
+
+
+-----------------------------------------------
+Total number of 1 runs:  2000000000
+
+Number of degrees of freedom          :   54
+Chi2 statistic for number of runs     :   59.41
+p-value of test                       :    0.29
+
+
+-----------------------------------------------
+Total number of bits:  7999827633
+
+Normal statistic for number of bits   :   -1.36
+p-value of test                       :    0.91
+
+
+
+-----------------------------------------------
+CPU time used                    :  00:01:22.04
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r =  0,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :   0.075
+p-value of test                       :    0.85
+
+Kolmogorov-Smirnov- statistic = D-    :    0.27
+p-value of test                       :    0.19
+
+Anderson-Darling statistic = A2       :    0.89
+p-value of test                       :    0.42
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    1.20
+p-value of test                       :    0.11
+
+Sample variance                       :    1.38
+p-value of test                       :    0.19
+
+-----------------------------------------------
+CPU time used                    :  00:02:52.37
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r =  0,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.13
+p-value of test                       :    0.65
+
+Kolmogorov-Smirnov- statistic = D-    :    0.16
+p-value of test                       :    0.54
+
+Anderson-Darling statistic = A2       :    0.38
+p-value of test                       :    0.86
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -0.12
+p-value of test                       :    0.55
+
+Sample variance                       :    0.92
+p-value of test                       :    0.50
+
+-----------------------------------------------
+CPU time used                    :  00:02:51.20
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000030,  r = 27,   s = 3,   d = 1
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.14
+p-value of test                       :    0.64
+
+Kolmogorov-Smirnov- statistic = D-    :    0.17
+p-value of test                       :    0.50
+
+Anderson-Darling statistic = A2       :    0.31
+p-value of test                       :    0.93
+
+Tests on the sum of all N observations
+Standardized normal statistic         :    0.27
+p-value of test                       :    0.40
+
+Sample variance                       :    0.98
+p-value of test                       :    0.45
+
+-----------------------------------------------
+CPU time used                    :  00:02:44.45
+
+Generator state:
+N/A
+
+
+
+***********************************************************
+HOST = gaianss, Linux
+
+stdin
+
+
+sstring_AutoCor test:
+-----------------------------------------------
+   N = 10,  n = 1000000029,  r = 27,   s = 3,   d = 3
+
+
+-----------------------------------------------
+
+Kolmogorov-Smirnov+ statistic = D+    :    0.37
+p-value of test                       :    0.05
+
+Kolmogorov-Smirnov- statistic = D-    :    0.14
+p-value of test                       :    0.60
+
+Anderson-Darling statistic = A2       :    1.67
+p-value of test                       :    0.14
+
+Tests on the sum of all N observations
+Standardized normal statistic         :   -1.00
+p-value of test                       :    0.84
+
+Sample variance                       :    1.47
+p-value of test                       :    0.15
+
+-----------------------------------------------
+CPU time used                    :  00:02:22.68
+
+Generator state:
+N/A
+
+
+
+
+========= Summary results of BigCrush =========
+
+ Version:          TestU01 1.2.3
+ Generator:        stdin
+ Number of statistics:  160
+ Total CPU time:   04:39:25.77
+
+ All tests were passed
+
+
+
+# 
+# Test duration: 1382.9497930410835 minutes
+# 
diff --git a/src/site/site.xml b/src/site/site.xml
index b6e0f7a041..22fefe6b70 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -76,6 +76,7 @@
       <item name="Filters"                 href="/userguide/filter.html"/>
       <item name="Machine Learning"        href="/userguide/ml.html"/>
       <item name="Exceptions"              href="/userguide/exceptions.html"/>
+      <item name="Random Number Generators" href="/userguide/rng.html"/>
     </menu>
     
     <head>
diff --git a/src/site/xdoc/userguide/index.xml b/src/site/xdoc/userguide/index.xml
index 81bdd226f4..d874581cae 100644
--- a/src/site/xdoc/userguide/index.xml
+++ b/src/site/xdoc/userguide/index.xml
@@ -183,6 +183,13 @@
             <li><a href="exceptions.html#a19.4_Features">19.4 Features</a></li>
           </ul>
         </li>
+        <li><a href="rng.html">20. Random Number Generators</a>
+          <ul>
+           <li><a href="rng.html#a20.1_Overview">20.1 Overview</a></li>
+           <li><a href="rng.html#a20.2_Performance">20.2 Performance</a></li>
+           <li><a href="rng.html#a20.3_Quality">20.3 Quality</a></li>
+          </ul>
+        </li>
         </ul>
       </section>
     
diff --git a/src/test/java/org/apache/commons/math4/rng/Providers32ParametricTest.java b/src/test/java/org/apache/commons/math4/rng/Providers32ParametricTest.java
new file mode 100644
index 0000000000..0dc28b1321
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/Providers32ParametricTest.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+import java.util.Arrays;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+/**
+ * Tests which all 32-bits based generators must pass.
+ */
+@RunWith(value=Parameterized.class)
+public class Providers32ParametricTest {
+    /** RNG under test. */
+    private final UniformRandomProvider generator;
+
+    /**
+     * Initializes generator instance.
+     *
+     * @param rng RNG to be tested.
+     */
+    public Providers32ParametricTest(ProvidersList.Data data) {
+        final RandomSource source = data.getSource();
+        final Object seed = data.getSeed();
+        final Object[] args = data.getArgs();
+        generator = RandomSource.create(source, seed, args);
+    }
+
+    @Parameters(name = "{index}: data={0}")
+    public static Iterable<ProvidersList.Data[]> getList() {
+        return ProvidersList.list32();
+    }
+
+
+    @Test
+    public void testNextBytesChunks() {
+        final int[] chunkSizes = { 4, 8, 12, 16 };
+        final int[] chunks = { 1, 2, 3, 4, 5 };
+        for (int chunkSize : chunkSizes) {
+            for (int numChunks : chunks) {
+                ProvidersCommonParametricTest.checkNextBytesChunks(generator,
+                                                                   chunkSize,
+                                                                   numChunks);
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/Providers64ParametricTest.java b/src/test/java/org/apache/commons/math4/rng/Providers64ParametricTest.java
new file mode 100644
index 0000000000..dcacf58af4
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/Providers64ParametricTest.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+import java.util.Arrays;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+/**
+ * Tests which all 64-bits based generators must pass.
+ */
+@RunWith(value=Parameterized.class)
+public class Providers64ParametricTest {
+    /** RNG under test. */
+    private final UniformRandomProvider generator;
+
+    /**
+     * Initializes generator instance.
+     *
+     * @param rng RNG to be tested.
+     */
+    public Providers64ParametricTest(ProvidersList.Data data) {
+        final RandomSource source = data.getSource();
+        final Object seed = data.getSeed();
+        final Object[] args = data.getArgs();
+        generator = RandomSource.create(source, seed, args);
+    }
+
+    @Parameters(name = "{index}: data={0}")
+    public static Iterable<ProvidersList.Data[]> getList() {
+        return ProvidersList.list64();
+    }
+
+
+    @Test
+    public void testNextBytesChunks() {
+        final int[] chunkSizes = { 8, 16, 24 };
+        final int[] chunks = { 1, 2, 3, 4, 5 };
+        for (int chunkSize : chunkSizes) {
+            for (int numChunks : chunks) {
+                ProvidersCommonParametricTest.checkNextBytesChunks(generator,
+                                                                   chunkSize,
+                                                                   numChunks);
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/ProvidersCommonParametricTest.java b/src/test/java/org/apache/commons/math4/rng/ProvidersCommonParametricTest.java
new file mode 100644
index 0000000000..2e1e8f21b4
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/ProvidersCommonParametricTest.java
@@ -0,0 +1,667 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.concurrent.Callable;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ByteArrayInputStream;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.Assume;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.exception.MathIllegalArgumentException;
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.UniformRealDistribution;
+import org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest;
+import org.apache.commons.math4.stat.inference.ChiSquareTest;
+import org.apache.commons.math4.util.FastMath;
+import org.apache.commons.math4.rng.internal.util.NumberFactory;
+
+/**
+ * Test for tests which all generators must pass.
+ */
+@RunWith(value=Parameterized.class)
+public class ProvidersCommonParametricTest {
+    /** RNG under test. */
+    private final UniformRandomProvider generator;
+    /** RNG specifier. */
+    private final RandomSource originalSource;
+    /** Seed (constructor's first parameter). */
+    private final Object originalSeed;
+    /** Constructor's additional parameters. */
+    private final Object[] originalArgs;
+
+    /**
+     * Initializes generator instance.
+     *
+     * @param rng RNG to be tested.
+     */
+    public ProvidersCommonParametricTest(ProvidersList.Data data) {
+        originalSource = data.getSource();
+        originalSeed = data.getSeed();
+        originalArgs = data.getArgs();
+        generator = RandomSource.create(originalSource, originalSeed, originalArgs);
+    }
+
+    @Parameters(name = "{index}: data={0}")
+    public static Iterable<ProvidersList.Data[]> getList() {
+        return ProvidersList.list();
+    }
+
+
+    // Precondition tests
+
+    @Test(expected=MathIllegalArgumentException.class)
+    public void testPreconditionNextInt1() {
+        generator.nextInt(-1);
+    }
+
+    @Test(expected=MathIllegalArgumentException.class)
+    public void testPreconditionNextInt2() {
+        generator.nextInt(0);
+    }
+
+    @Test(expected=MathIllegalArgumentException.class)
+    public void testPreconditionNextLong1() {
+        generator.nextLong(-1);
+    }
+
+    @Test(expected=MathIllegalArgumentException.class)
+    public void testPreconditionNextLong2() {
+        generator.nextLong(0);
+    }
+
+    @Test(expected=OutOfRangeException.class)
+    public void testPreconditionNextBytes1() {
+        final int size = 10;
+        final int num = 1;
+        final byte[] buf = new byte[size];
+        generator.nextBytes(buf, -1, num);
+    }
+    @Test(expected=OutOfRangeException.class)
+    public void testPreconditionNextBytes2() {
+        final int size = 10;
+        final byte[] buf = new byte[size];
+        generator.nextBytes(buf, size, 0);
+    }
+    @Test(expected=OutOfRangeException.class)
+    public void testPreconditionNextBytes3() {
+        final int size = 10;
+        final int offset = 2;
+        final byte[] buf = new byte[size];
+        generator.nextBytes(buf, offset, size - offset + 1);
+    }
+    @Test(expected=OutOfRangeException.class)
+    public void testPreconditionNextBytes4() {
+        final int size = 10;
+        final int offset = 1;
+        final byte[] buf = new byte[size];
+        generator.nextBytes(buf, offset, -1);
+    }
+
+
+    // Uniformity tests
+ 
+    @Test
+    public void testUniformNextBytesFullBuffer() {
+        // Value chosen to exercise all the code lines in the
+        // "nextBytes" methods.
+        final int size = 23;
+        final byte[] buffer = new byte[size];
+
+        final Runnable nextMethod = new Runnable() {
+            @Override
+            public void run() {
+                generator.nextBytes(buffer);
+            }
+        };
+
+        final double smallAlpha = 1e-3;
+        Assert.assertTrue(isUniformNextBytes(buffer, 0, size, nextMethod, smallAlpha));
+    }
+
+    @Test
+    public void testUniformNextBytesPartialBuffer() {
+        final int totalSize = 1234;
+        final int offset = 567;
+        final int size = 89;
+
+        final byte[] buffer = new byte[totalSize];
+
+        final Runnable nextMethod = new Runnable() {
+            @Override
+            public void run() {
+                generator.nextBytes(buffer, offset, size);
+            }
+        };
+
+        // Test should pass for the part of the buffer where values are put.
+        final double smallAlpha = 1e-3;
+        Assert.assertTrue("Test can fail randomly due to sampling error with probability " + smallAlpha,
+                          isUniformNextBytes(buffer, offset, offset + size, nextMethod, smallAlpha));
+
+        // Test must fail for the parts of the buffer where no values are put.
+        final double largeAlpha = 0.5;
+        Assert.assertFalse(isUniformNextBytes(buffer, 0, offset, nextMethod, largeAlpha));
+        Assert.assertFalse(isUniformNextBytes(buffer, offset + size, buffer.length, nextMethod, largeAlpha));
+    }
+
+    @Test
+    public void testUniformNextIntegerInRange() {
+        checkNextIntegerInRange(4, 1000);
+        checkNextIntegerInRange(10, 1000);
+        checkNextIntegerInRange(12, 1000);
+        checkNextIntegerInRange(31, 1000);
+        checkNextIntegerInRange(32, 1000);
+        checkNextIntegerInRange(2016128993, 1000);
+        checkNextIntegerInRange(1834691456, 1000);
+        checkNextIntegerInRange(869657561, 1000);
+        checkNextIntegerInRange(1570504788, 1000);
+    }
+
+    @Test
+    public void testUniformNextLongInRange() {
+        checkNextLongInRange(4, 1000);
+        checkNextLongInRange(11, 1000);
+        checkNextLongInRange(19, 1000);
+        checkNextLongInRange(31, 1000);
+        checkNextLongInRange(32, 1000);
+
+        final long q = Long.MAX_VALUE / 4;
+        checkNextLongInRange(q, 1000);
+        checkNextLongInRange(2 * q, 1000);
+        checkNextLongInRange(3 * q, 1000);
+    }
+
+    @Test
+    public void testUniformNextFloat() {
+        final double[] sample = new double[1000];
+        for (int i = 0; i < sample.length; i++) {
+            sample[i] = generator.nextFloat();
+        }
+        final RealDistribution uniformDistribution = new UniformRealDistribution(0, 1);
+        final KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();
+        Assert.assertFalse(generator.toString(),
+                           ks.kolmogorovSmirnovTest(uniformDistribution, sample, 0.01));
+    }
+
+    @Test
+    public void testUniformNextDouble() {
+        final double[] sample = new double[1000];
+        for (int i = 0; i < sample.length; i++) {
+            sample[i] = generator.nextDouble();
+        }
+        final RealDistribution uniformDistribution = new UniformRealDistribution(0, 1);
+        final KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();
+        Assert.assertFalse(generator.toString(),
+                           ks.kolmogorovSmirnovTest(uniformDistribution, sample, 0.01));
+    }
+
+    @Test
+    public void testUniformNextIntRandomWalk() {
+        final Callable<Boolean> nextMethod = new Callable<Boolean>() {
+            @Override
+            public Boolean call() throws Exception {
+                return generator.nextInt() >= 0;
+            }
+        };
+
+        checkRandomWalk(1000, nextMethod);
+    }
+
+    @Test
+    public void testUniformNextLongRandomWalk() {
+        final Callable<Boolean> nextMethod = new Callable<Boolean>() {
+            @Override
+            public Boolean call() throws Exception {
+                return generator.nextLong() >= 0;
+            }
+        };
+
+        checkRandomWalk(1000, nextMethod);
+    }
+
+    @Test
+    public void testUniformNextBooleanRandomWalk() {
+        final Callable<Boolean> nextMethod = new Callable<Boolean>() {
+            @Override
+            public Boolean call() throws Exception {
+                return generator.nextBoolean();
+            }
+        };
+
+        checkRandomWalk(1000, nextMethod);
+    }
+
+    // Seeding tests.
+
+    @Test(expected=MathUnsupportedOperationException.class)
+    public void testUnsupportedSeedType() {
+        final byte seed = 123;
+        RandomSource.create(originalSource, seed, originalArgs);
+    }
+
+    @Test
+    public void testAllSeedTypes() {
+        final Integer intSeed = -12131415;
+        final Long longSeed = -1213141516171819L;
+        final int[] intArraySeed = new int[] { 0, 11, -22, 33, -44, 55, -66, 77, -88, 99 };
+        final long[] longArraySeed = new long[] { 11111L, -222222L, 3333333L, -44444444L };
+
+        final Object[] seeds = new Object[] { intSeed, longSeed, intArraySeed, longArraySeed };
+
+        int nonNativeSeedCount = 0;
+        int seedCount = 0;
+        for (Object s : seeds) {
+            ++seedCount;
+            if (!(originalSource.isNativeSeed(s))) {
+                ++nonNativeSeedCount;
+            }
+
+            Assert.assertNotEquals(intSeed, originalSeed);
+            RandomSource.create(originalSource, s, originalArgs);
+        }
+
+        Assert.assertEquals(4, seedCount);
+        Assert.assertEquals(3, nonNativeSeedCount);
+    }
+
+    // State save and restore tests.
+
+    @Test
+    public void testStateSettable() {
+        // Should be fairly large in order to ensure that all the internal
+        // state is away from its initial settings.
+        final int n = 10000;
+
+        // Save.
+        final RandomSource.State state = RandomSource.saveState(generator);
+        // Store some values.
+        final List<Number> listOrig = makeList(n);
+        // Discard a few more.
+        final List<Number> listDiscard = makeList(n);
+        Assert.assertTrue(listDiscard.size() != 0);
+        Assert.assertFalse(listOrig.equals(listDiscard));
+        // Reset.
+        RandomSource.restoreState(generator, state);
+        // Replay.
+        final List<Number> listReplay = makeList(n);
+        Assert.assertFalse(listOrig == listReplay);
+        // Check that the restored state is the same as the orginal.
+        Assert.assertTrue(listOrig.equals(listReplay));
+    }
+
+    @Test
+    public void testSerializedState()
+        throws IOException,
+               ClassNotFoundException {
+        // Large "n" is not necessary here as we only test the serialization.
+        final int n = 100;
+
+        // Save and serialize.
+        final RandomSource.State stateOrig = RandomSource.saveState(generator);
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(bos);
+        oos.writeObject(stateOrig);
+
+        // Store some values.
+        final List<Number> listOrig = makeList(n);
+
+        // Discard a few more.
+        final List<Number> listDiscard = makeList(n);
+        Assert.assertTrue(listDiscard.size() != 0);
+        Assert.assertFalse(listOrig.equals(listDiscard));
+
+        // Retrieve from serialized stream.
+        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
+        ObjectInputStream ois = new ObjectInputStream(bis);
+        final RandomSource.State stateNew = (RandomSource.State) ois.readObject();
+
+        Assert.assertTrue(stateOrig != stateNew);
+
+        // Reset.
+        RandomSource.restoreState(generator, stateNew);
+
+        // Replay.
+        final List<Number> listReplay = makeList(n);
+        Assert.assertFalse(listOrig == listReplay);
+
+        // Check that the serialized data recreated the orginal state.
+        Assert.assertTrue(listOrig.equals(listReplay));
+    }
+
+    @Test(expected=ClassCastException.class)
+    public void testStateWrongClass() {
+        // Try to restore with an invalid state.
+        RandomSource.restoreState(generator, new RandomSource.State() {});
+    }
+
+    @Test(expected=InsufficientDataException.class)
+    public void testStateWrongSize() {
+        // We don't know what is the state of "java.lang.Random": skipping.
+        Assume.assumeTrue(generator.toString().indexOf("JDKRandom") == -1);
+
+        final RandomSource.State state = RandomSource.saveState(new DummyGenerator());
+        // Try to restore with an invalid state (wrong size).
+        RandomSource.restoreState(generator, state);
+    }
+
+    ///// Support methods below.
+
+    /**
+     * Populates a list with random numbers.
+     *
+     * @param n Loop counter.
+     * @return a list containing {@code 11 * n} random numbers.
+     */
+    private List<Number> makeList(int n) {
+        final List<Number> list = new ArrayList<Number>();
+
+        for (int i = 0; i < n; i++) {
+            // Append 11 values.
+            list.add(generator.nextInt());
+            list.add(generator.nextInt(21));
+            list.add(generator.nextInt(436));
+            list.add(generator.nextLong());
+            list.add(generator.nextLong(157894));
+            list.add(generator.nextLong(5745833));
+            list.add(generator.nextFloat());
+            list.add(generator.nextFloat());
+            list.add(generator.nextDouble());
+            list.add(generator.nextDouble());
+            list.add(generator.nextDouble());
+        }
+
+        return list;
+    }
+
+    /**
+     * Checks that the generator values can be placed into 256 bins with
+     * approximately equal number of counts.
+     * Test allows to select only part of the buffer for performong the
+     * statistics.
+     *
+     * @param buffer Buffer to be filled.
+     * @param first First element (included) of {@code buffer} range for
+     * which statistics must be taken into account.
+     * @param last Last element (excluded) of {@code buffer} range for
+     * which statistics must be taken into account.
+     * for which statistics must be taken into account.
+     * @param nextMethod Method that fills the given {@code buffer}.
+     * @param alpha Probability for chi-square test.
+     * @return {@code true} if the distribution is uniform.
+     */
+    private boolean isUniformNextBytes(byte[] buffer,
+                                       int first,
+                                       int last,
+                                       Runnable nextMethod,
+                                       double alpha) {
+        final int sampleSize = 100000;
+
+        // Number of possible values.
+        final int byteRange = 256;
+        // To transform a byte value into its bin index.
+        final int byteRangeOffset = 128;
+
+        // Bins.
+        final long[] count = new long[byteRange];
+        final double[] expected = new double[byteRange];
+
+        for (int i = 0; i < byteRange; i++) {
+            expected[i] = sampleSize / (double) byteRange;
+        }
+
+        try {
+            for (int k = 0; k < sampleSize; k++) {
+                nextMethod.run();
+
+                for (int i = first; i < last; i++) {
+                    final byte b = buffer[i];
+                    ++count[b + byteRangeOffset];
+                }
+            }
+        } catch (Exception e) {
+            // Should never happen.
+            throw new RuntimeException("Unexpected");
+        }
+
+        final boolean reject = new ChiSquareTest().chiSquareTest(expected, count, alpha);
+        return !reject;
+    }
+
+    /**
+     * Checks that the generator values can be placed into 2 bins with
+     * approximately equal number of counts.
+     * The test uses the expectation from a fixed-step "random walk".
+     *
+     * @param nextMethod Method that returns {@code true} if the generated
+     * values are to be placed in the first bin, {@code false} if it must
+     * go to the second bin.
+     */
+    private void checkRandomWalk(int sampleSize,
+                                 Callable<Boolean> nextMethod) {
+        int walk = 0;
+
+        try {
+            for (int k = 0; k < sampleSize; ++k) {
+                if (nextMethod.call()) {
+                    ++walk;
+                } else {
+                    --walk;
+                }
+            }
+        } catch (Exception e) {
+            // Should never happen.
+            throw new RuntimeException("Unexpected");
+        }
+
+        final double actual = FastMath.abs(walk);
+        final double max = FastMath.sqrt(sampleSize) * 2.576;
+        Assert.assertTrue(generator + ": Walked too far astray: " + actual +
+                          " > " + max +
+                          " (test will fail randomly about 1 in 100 times)",
+                          actual < max);
+    }
+
+    /**
+     * Tests uniformity of the distribution produced by the {@code nextInt(int)}.
+     *
+     * @param max Upper bound.
+     * @param sampleSize Number of random values generated.
+     */
+    private void checkNextIntegerInRange(final int max,
+                                         int sampleSize) {
+        final Callable<Integer> nextMethod = new Callable<Integer>() {
+            @Override
+            public Integer call() throws Exception {
+                return generator.nextInt(max);
+            }
+        };
+
+        checkNextInRange(max, sampleSize, nextMethod);
+    }
+
+    /**
+     * Tests uniformity of the distribution produced by the {@code nextLong(long)}.
+     *
+     * @param max Upper bound.
+     * @param sampleSize Number of random values generated.
+     */
+    private void checkNextLongInRange(final long max,
+                                      int sampleSize) {
+        final Callable<Long> nextMethod = new Callable<Long>() {
+            @Override
+            public Long call() throws Exception {
+                return generator.nextLong(max);
+            }
+        };
+
+        checkNextInRange(max, sampleSize, nextMethod);
+    }
+
+    /**
+     * Tests uniformity of the distribution produced by the given
+     * {@code nextMethod}.
+     * It performs a chi-square test of homogeneity of the observed
+     * distribution with the expected uniform distribution.
+     * Tests are performed at the 1% level and an average failure rate
+     * higher than 2% (i.e. more than 20 null hypothesis rejections)
+     * causes the test case to fail.
+     *
+     * @param max Upper bound.
+     * @param nextMethod method to call (either "nextInt(max)"
+     * @param sampleSize Number of random values generated.
+     */
+    private <T extends Number> void checkNextInRange(T max,
+                                                     int sampleSize,
+                                                     Callable<T> nextMethod) {
+        final ChiSquareTest testStatistic = new ChiSquareTest();
+        final int numTests = 1000;
+        final long n = max.longValue();
+
+        // Set up bins.
+        long[] binUpperBounds;
+        if (n < 32) {
+            binUpperBounds = new long[(int) n];
+            for (int k = 0; k < n; k++) {
+                binUpperBounds[k] = k + 1;
+            }
+        } else {
+            final int numBins = 10;
+            binUpperBounds = new long[numBins];
+            final long step = n / numBins;
+            for (int k = 0; k < numBins; k++) {
+                binUpperBounds[k] = (k + 1) * step;
+            }
+        }
+
+        // Run the tests.
+        int numFailures = 0;
+
+        final int binCount = binUpperBounds.length;
+        final long[] observed = new long[binCount];
+        final double[] expected = new double[binCount];
+
+        long previousUpperBound = 0;
+        for (int k = 0; k < binCount; k++) {
+            final long range = binUpperBounds[k] - previousUpperBound;
+            expected[k] = sampleSize * (range / (double) n);
+            previousUpperBound = binUpperBounds[k];
+        }
+
+        try {
+            for (int i = 0; i < numTests; i++) {
+                Arrays.fill(observed, 0);
+                for (int j = 0; j < sampleSize; j++) {
+                    final long value = nextMethod.call().longValue();
+                    Assert.assertTrue("Range", (value >= 0) && (value < n));
+
+                    for (int k = 0; k < binCount; k++) {
+                        if (value < binUpperBounds[k]) {
+                            ++observed[k];
+                            break;
+                        }
+                    }
+                }
+            }
+        } catch (Exception e) {
+            // Should never happen.
+            throw new RuntimeException("Unexpected");
+        }
+
+        if (testStatistic.chiSquareTest(expected, observed) < 0.01) {
+            ++numFailures;
+        }
+
+        if ((double) numFailures / (double) numTests > 0.02) {
+            Assert.fail(generator + ": Too many failures for n = " + n +
+                        " (" + numFailures + " out of " + numTests + " tests failed)");
+        }
+    }
+
+    /**
+     * @param rng Generator.
+     * @param chunkSize Size of the small buffer.
+     * @param numChunks Number of chunks that make the large buffer.
+     */
+    static void checkNextBytesChunks(UniformRandomProvider rng,
+                                     int chunkSize,
+                                     int numChunks) {
+        final byte[] b1 = new byte[chunkSize * numChunks];
+        final byte[] b2 = new byte[chunkSize];
+
+        final RandomSource.State state = RandomSource.saveState(rng);
+
+        // Generate the chunks in a single call.
+        rng.nextBytes(b1);
+
+        // Reset to previous state.
+        RandomSource.restoreState(rng, state);
+
+        // Generate the chunks in consecutive calls.
+        for (int i = 0; i < numChunks; i++) {
+            rng.nextBytes(b2);
+        }
+
+        // Store last "chunkSize" bytes of b1 into b3.
+        final byte[] b3 = new byte[chunkSize];
+        System.arraycopy(b1, b1.length - b3.length, b3, 0, b3.length);
+
+        // Sequence of calls must be the same.
+        Assert.assertArrayEquals("chunkSize=" + chunkSize + " numChunks=" + numChunks,
+                                 b2, b3);
+    }
+}
+
+/**
+ * Dummy class for checking that restoring fails when an invalid state is used.
+ */
+class DummyGenerator extends org.apache.commons.math4.rng.internal.source32.IntProvider {
+    /** State. */
+    private int state;
+
+    /** {@inheritDoc} */
+    @Override
+    public int next() {
+        return 4; // https://www.xkcd.com/221/
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected byte[] getStateInternal() {
+        return NumberFactory.makeByteArray(state);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected void setStateInternal(byte[] s) {
+        state = NumberFactory.makeInt(s);
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/ProvidersList.java b/src/test/java/org/apache/commons/math4/rng/ProvidersList.java
new file mode 100644
index 0000000000..4a09ed2885
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/ProvidersList.java
@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
+
+/**
+ * The purpose of this class is to provide the list of all generators
+ * implemented in the library.
+ * The list must be updated with each new RNG implementation.
+ *
+ * @see #list()
+ * @see #list32()
+ * @see #list64()
+ */
+public class ProvidersList {
+    /** List of all RNGs implemented in the library. */
+    private static final List<Data[]> LIST = new ArrayList<>();
+    /** List of 32-bits based RNGs. */
+    private static final List<Data[]> LIST32 = new ArrayList<>();
+    /** List of 64-bits based RNGs. */
+    private static final List<Data[]> LIST64 = new ArrayList<>();
+
+    static {
+        try {
+            // "int"-based RNGs.
+            add(LIST32, RandomSource.JDK, -122333444455555L);
+            add(LIST32, RandomSource.MT, new int[] { -123, -234, -345 });
+            add(LIST32, RandomSource.WELL_512_A, new int[] { -23, -34, -45 });
+            add(LIST32, RandomSource.WELL_1024_A, new int[] { -1234, -2345, -3456 });
+            add(LIST32, RandomSource.WELL_19937_A, new int[] { -2123, -3234, -4345 });
+            add(LIST32, RandomSource.WELL_19937_C, new int[] { -123, -234, -345, -456 });
+            add(LIST32, RandomSource.WELL_44497_A, new int[] { -12345, -23456, -34567 });
+            add(LIST32, RandomSource.WELL_44497_B, new int[] { 123, 234, 345 });
+            add(LIST32, RandomSource.ISAAC, new int[] { 123, -234, 345, -456 });
+            // ... add more here.
+
+            // "long"-based RNGs.
+            add(LIST64, RandomSource.SPLIT_MIX_64, -988777666655555L);
+            add(LIST64, RandomSource.XOR_SHIFT_1024_S, new long[] { 123456L, 234567L, -345678L });
+            add(LIST64, RandomSource.TWO_CMRES, 55443322);
+            add(LIST64, RandomSource.TWO_CMRES_SELECT, -987654321, 5, 8);
+            add(LIST64, RandomSource.MT_64, new long[] { 1234567L, 2345678L, -3456789L });
+            // ... add more here.
+
+            // Do not modify the remaining statements.
+            // Complete list.
+            LIST.addAll(LIST32);
+            LIST.addAll(LIST64);
+        } catch (Exception e) {
+            System.err.println("Unexpected exception while creating the list of generators: " + e);
+            e.printStackTrace(System.err);
+            throw e;
+        }
+    }
+
+    /**
+     * Class contains only static methods.
+     */
+    private ProvidersList() {}
+
+    /**
+     * Helper to statisfy Junit requirement that each parameter set contains
+     * the same number of objects.
+     */
+    private static void add(List<Data[]> list,
+                            RandomSource source,
+                            Object ... data) {
+        final RandomSource rng = source;
+        final Object seed = data.length > 0 ? data[0] : null;
+        final Object[] args = data.length > 1 ? Arrays.copyOfRange(data, 1, data.length) : null;
+
+        list.add(new Data[] { new Data(rng, seed, args) });
+    }
+
+    /**
+     * Subclasses that are "parametric" tests can forward the call to
+     * the "@Parameters"-annotated method to this method.
+     *
+     * @return the list of all generators.
+     */
+    public static Iterable<Data[]> list() {
+        return Collections.unmodifiableList(LIST);
+    }
+
+    /**
+     * Subclasses that are "parametric" tests can forward the call to
+     * the "@Parameters"-annotated method to this method.
+     *
+     * @return the list of 32-bits based generators.
+     */
+    public static Iterable<Data[]> list32() {
+        return Collections.unmodifiableList(LIST32);
+    }
+
+    /**
+     * Subclasses that are "parametric" tests can forward the call to
+     * the "@Parameters"-annotated method to this method.
+     *
+     * @return the list of 32-bits based generators.
+     */
+    public static Iterable<Data[]> list64() {
+        return Collections.unmodifiableList(LIST64);
+    }
+
+    /**
+     * Helper.
+     * Better not to mix Junit assumptions of the usage of "Object[]".
+     */
+    public static class Data {
+        private final RandomSource source;
+        private final Object seed;
+        private final Object[] args;
+
+        public Data(RandomSource source,
+                    Object seed,
+                    Object[] args) {
+            this.source = source;
+            this.seed = seed;
+            this.args = args;
+        }
+
+        public RandomSource getSource() {
+            return source;
+        }
+
+        public Object getSeed() {
+            return seed;
+        }
+
+        public Object[] getArgs() {
+            return args == null ? null : Arrays.copyOf(args, args.length);
+        }
+
+        @Override
+        public String toString() {
+            return source.toString() + " seed=" + seed + " args=" + Arrays.toString(args);
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/ISAACRandomTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/ISAACRandomTest.java
new file mode 100644
index 0000000000..d7d63410d2
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/ISAACRandomTest.java
@@ -0,0 +1,389 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public final class ISAACRandomTest {
+    private static final int[] SEED_1 = {
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
+    };
+
+    private static final int[] SEED_2 = {
+        0x61b12894, 0x4a43da95, 0x03e4d8c5, 0xd92e174f, 0xe8998d71, 0x0ecaaa89, 0xaba8a61d, 0xcfd457fc,
+        0xbf25f0a7, 0xe05b20a9, 0xdc744513, 0x9a3eb193, 0x1b69542b, 0xedb0890d, 0xca6b233d, 0xfcabf357,
+        0x297e95f0, 0x1a6c456f, 0x0e3738b0, 0x1c0517f2, 0xcfd105bd, 0x3b7c39eb, 0x141804e9, 0x8a13a0d1,
+        0x3e57cf5c, 0x35471206, 0x00115ef6, 0x3424ec23, 0x2a6a63a7, 0x4cecb3e8, 0xecb4d341, 0x63d25ac1,
+        0x8b68eafd, 0x0eca65b4, 0xd8354668, 0xb37b1ff8, 0x82e80ce3, 0x4c212f9c, 0x58d82d5f, 0x47f36348,
+        0x5bd88987, 0xf77ac66e, 0x75ff93ee, 0xef763453, 0x9705f8b6, 0x64e44649, 0x84f03338, 0x902120e9,
+        0x5350212e, 0x34f466f8, 0x97f96d0e, 0x7f1db8f0, 0x15879833, 0xefee14b4, 0xda25520a, 0x81c0dd7c,
+        0xa20bb729, 0x2fd76844, 0x1b522548, 0xf394565d, 0xabff5f1b, 0x38eaf2e7, 0x364a6ccf, 0x8ed5e169,
+        0xe76aae18, 0x0e4c0b62, 0x68356792, 0x8bc4aa83, 0x31546e69, 0xa6d04441, 0x2abef1df, 0xa40a164e,
+        0x8a8d00ba, 0x32b38dba, 0x6f66a7c6, 0x493b0c84, 0xd86846f0, 0x50d50178, 0x26a7e67c, 0x97802153,
+        0xf35f4ad3, 0x4b54b54e, 0x35bcaef1, 0xc3ed09d6, 0xc127bc55, 0xb2e34ea4, 0x8d674133, 0xed82f03d,
+        0xa8443b28, 0x30bf4bd9, 0x6748419c, 0x155eb313, 0xb17c85da, 0xcd0d8014, 0xf1e95740, 0x5e769ed2,
+        0xf8fa5819, 0x3bd0d93a, 0xa46eaf3f, 0x90f5ae2c, 0x912aa83d, 0x66995d3d, 0x8359b2a9, 0x64534b93,
+        0x1fa38094, 0x89fde50c, 0xef925ef5, 0x4edf2287, 0xc6e82b2b, 0x99812c32, 0x53f6fe01, 0xf104263f,
+        0xbc5d8b8e, 0x6f23f102, 0xb6cc174d, 0xb47b2421, 0xdb083f26, 0xd67a1f25, 0x4f4b0c50, 0x86fca924,
+        0x442036ba, 0x0d7dba08, 0xf6d89c1e, 0x65c9e28e, 0xd689fafc, 0x47f7ae9b, 0x3cb86674, 0x798dc4ce,
+        0x62a2d235, 0x73912420, 0x276ef9b4, 0x50deb689, 0x40b6b744, 0x84d79856, 0x86e5f0c6, 0x835a552b,
+        0xeb73ff95, 0xe428e392, 0x1d60bf15, 0x9ad09e35, 0x783e60ae, 0xb42feb61, 0x028a0343, 0x90febcfc,
+        0xdffb01c8, 0x1087ab1e, 0x84d8a8f9, 0xe5433763, 0x897548cc, 0xb4075ece, 0xd0a5a727, 0x0a84da19,
+        0x0f33964b, 0x5634a097, 0xb7cbac77, 0xe50340eb, 0x93f0ce63, 0x0c743ed4, 0xf6f6f015, 0x30f74cca,
+        0xbb0306a7, 0x3d037943, 0x22f2979e, 0x3591b2c3, 0x9a772e24, 0x5c5812fa, 0x9e733c8a, 0xaae1c943,
+        0xd0b7d924, 0x56b9c463, 0xfaedb557, 0x139b7aa5, 0xe173f123, 0x2d0686a2, 0x03cd0bef, 0x4f47c01e,
+        0x4cf9fb83, 0xba9d433e, 0x95a620d5, 0x62b67429, 0xe836067d, 0x606bc5f7, 0x36af81e2, 0xae0b8b30,
+        0x38ffe5fa, 0xb548228b, 0xc2a25bcb, 0x4ba139ee, 0xab214ad7, 0x66ef4f50, 0x5f8787fa, 0xcb5982b1,
+        0xdbb48ff8, 0x14eaa914, 0xe0874168, 0x3e578246, 0x488c1c11, 0x982039a2, 0xde096b35, 0xa420fb41,
+        0x197a1b67, 0x16eabc59, 0x0e689585, 0x24db72b7, 0xf89878c3, 0x04a5e854, 0x3346da02, 0xb4bb6a04,
+        0x278a0dd4, 0x7bb6e224, 0x92e219c3, 0x595f8a33, 0xedd87ae6, 0xa313cc9f, 0x385c1d3a, 0x0a8b1db5,
+        0xb192379d, 0x3a0be0eb, 0xb8ba269b, 0x1f0c62a5, 0x56307342, 0x8fc9ac94, 0xec91a232, 0xa7b8d3db,
+        0xfbf43a60, 0xa773463e, 0x72d5a4d1, 0x8ddf1755, 0x27da39bb, 0xa8d4668a, 0xd2f3bbfc, 0xa188d6af,
+        0x82ed668e, 0xb45f0032, 0xcdfd4ca0, 0x14e5a80d, 0x456594bc, 0x68efcdd5, 0x7dbf1f9d, 0x74599699,
+        0xfc8639e8, 0x4139e791, 0x9c06921a, 0xc5121d36, 0xd15b9425, 0x0670dca7, 0xbc60c353, 0xaa49e487,
+        0xa7cb5854, 0xd06ddbdb, 0xcb4be0d2, 0x8391ab98, 0xc750d7bf, 0x365340b1, 0x264677c7, 0xb76075a4
+    };
+
+    /**
+     * The output sequence generated by reference ISAAC algorithm in C language.
+     * For initial seeding is used SEED_1 data array.
+     * 1024 signed 32-bit integers in hexadecimal representation.
+     */
+    private static final int[] EXPECTED_SEQUENCE_1 = {
+        0x182600f3, 0x300b4a8d, 0x301b6622, 0xb08acd21, 0x296fd679, 0x995206e9, 0xb3ffa8b5, 0x0fc99c24,
+        0x5f071faf, 0x52251def, 0x894f41c2, 0xcc4c9afb, 0x96c33f74, 0x347cb71d, 0xc90f8fbd, 0xa658f57a,
+        0xc5c29e18, 0x6249fa29, 0xbae16ffa, 0x25c871bd, 0xf4c75e24, 0x5ab3eab9, 0xac450b8f, 0x1629cfa4,
+        0x0016e86f, 0xf27c4d0d, 0x67648b17, 0x05c04fce, 0x44d3ff79, 0xc6acd20f, 0x472fd994, 0x842131c4,
+        0xead4a900, 0xc01eda0d, 0x9e604c7b, 0xfb8a0e99, 0x02e17b6f, 0xe8b4f627, 0xc7041eae, 0x42d19cd7,
+        0xa358eb94, 0x19ca2158, 0x6be6ce81, 0x4b90a4de, 0x26f0774d, 0x4e83930a, 0x2492d476, 0xb97ffabe,
+        0x675cc8ae, 0x4cfdd254, 0x5d3c00ea, 0x7bba5ead, 0x6f461810, 0xbef63eea, 0x72eb767b, 0xed6e963b,
+        0xb026016d, 0x17cb7ebf, 0xa7dc6e56, 0xf460bdf1, 0x1ffe0e04, 0x902b347d, 0x02c0d8ab, 0x98cb3f8b,
+        0x6f359a39, 0x9521825f, 0x9026d97e, 0xde342516, 0x890a740c, 0x0f2969e4, 0x2e7ea9ed, 0x394b8a4f,
+        0x1bdf1fd0, 0x15d565b4, 0xbaf0406d, 0x4dac20db, 0x03359832, 0xe34802d5, 0xcc5fff02, 0x0935ad6e,
+        0x7c53c9b2, 0xb10b5d29, 0x4fbb94be, 0xd7e48546, 0xb7cfa23c, 0x7f081c9a, 0xe099baf1, 0x9c7dc323,
+        0xb831ad14, 0x5b563101, 0xfa55319b, 0x060ded54, 0xc5418124, 0x765f0dba, 0x1ad3d9d5, 0x3f07ec49,
+        0xdd5e06c6, 0xc230e2ac, 0xc6ba1971, 0x9cc17bcc, 0x10b22a22, 0x7dfc8c7f, 0xb3310333, 0x205530ee,
+        0xdbf38a8f, 0x003a02f5, 0x007e96a3, 0x36658201, 0x08dfd64f, 0x6275acf3, 0x3d29669b, 0x6b2f4538,
+        0xb0cc336b, 0x1d3043eb, 0x1ad1d764, 0x4c655b84, 0x7a725bb2, 0xb3fc5c66, 0x80b4b915, 0xb2cbd9e4,
+        0x2992dfc6, 0xdf8be548, 0xb310d06e, 0x436385c6, 0x44d6e893, 0x44c4d79d, 0xe3bb2064, 0xe41ea465,
+        0x3ff4cc70, 0x9d21ac42, 0x672c3725, 0xa43a1d02, 0xfd84b19b, 0x5b6fb132, 0x4af40896, 0xe15000a6,
+        0x7cab12f6, 0x8b8e753c, 0xfb253454, 0x359ac366, 0x67822b45, 0x290a1140, 0xade6e428, 0x6095efcb,
+        0x99d8d9e6, 0xa5b5981d, 0x332c95d6, 0xaf5cfcab, 0x161f5ca6, 0x1844cee2, 0xffb8ab5c, 0x82fccaeb,
+        0x49ecf97a, 0x7a60fabd, 0xf9585a3a, 0x4eb6bd32, 0x3b347002, 0xf4930dba, 0x5d21d51e, 0x64e8e3f4,
+        0x52801fa8, 0x71ce907c, 0x872783a4, 0x0761dc80, 0x5c509848, 0x41ba2adc, 0x7e2f5520, 0x85c5eec2,
+        0x368d3d00, 0x5fc7c5f3, 0xb849d785, 0xd95f25b3, 0x79801fd5, 0xbf2443d6, 0x360d41cd, 0x651b11c0,
+        0x801a89ca, 0x8b9e6b94, 0xfde283c4, 0xcc5e6974, 0x2b2f4c09, 0x8b2160a8, 0xdbf57f01, 0x76aa1c4e,
+        0x11f0831a, 0x54713d17, 0xc99a2639, 0x4c373e7a, 0x09e6e57f, 0x71f63b07, 0x7be3f02e, 0x2c907ade,
+        0xe5f489f6, 0x0b0cd6da, 0xb566e14c, 0x0f955969, 0xa0e5710b, 0x80d8c2de, 0x9971e496, 0xc7efbc2f,
+        0x97a48e53, 0x2d845c0d, 0xe1194b0e, 0xad2ba480, 0xd5253552, 0xca890b31, 0x60060afb, 0x89dae927,
+        0x565e2229, 0x43abc21c, 0x03dd14a5, 0xbbadd184, 0x9e979702, 0x2f659883, 0xf313adec, 0x621bd7ca,
+        0xb6470834, 0x4c3901c6, 0x32028bb8, 0x9ded8244, 0x66907654, 0x0a06b272, 0x4a8ec630, 0x4207d36f,
+        0x3e7a8b49, 0x13871be7, 0xbf7af48e, 0x3de0df39, 0x0e864542, 0x8c090a23, 0xaf90e49e, 0x97661c5e,
+        0x365aa66c, 0x0073e342, 0x9c8ac447, 0x6f57e7ce, 0xd5be7ffa, 0x89651d84, 0x53f78eaa, 0x8173dc04,
+        0xd70b1e10, 0x43c1a57b, 0x10c8a5ab, 0xed6abd62, 0x2f840e43, 0x4873d91e, 0x49f413fc, 0x5d89a1c1,
+        0xd3a388fc, 0x96c59cf4, 0x456f1edd, 0x3dd20023, 0xa264e933, 0xd32956e5, 0xd91aa738, 0xe76dd339,
+        0x7a68710f, 0x6554abda, 0x90c10757, 0x0b5e435f, 0xaf7d1fb8, 0x01913fd3, 0x6a158d10, 0xb8f6fd4a,
+        0xc2b9aa36, 0x96da2655, 0xfe1e42d5, 0x56e6cd21, 0xd5b2d750, 0x7229ea81, 0x5de87abb, 0xb6b9d766,
+        0x1e16614c, 0x3b708f99, 0x5cf824cd, 0xa4ca0cf1, 0x62d31911, 0x7cdd662f, 0xcb9e1563, 0x79ae4c10,
+        0x080c79ec, 0x18080c8e, 0x4a0a283c, 0x3dde9f39, 0x09c36f90, 0xad567643, 0x08294766, 0xb4415f7d,
+        0x5597ec0f, 0x78ffa568, 0x8bace62e, 0x4188bfcd, 0xc87c8006, 0xafa92a6d, 0x50fc8194, 0xcae8deba,
+        0x33f6d7b1, 0x53245b79, 0x61119a5a, 0x7e315aeb, 0xe75b41c9, 0xd2a93b51, 0xec46b0b6, 0x1ed3ff4e,
+        0x5d023e65, 0xadf6bc23, 0xf7f58f7b, 0xe4f3a26a, 0x0c571a7d, 0xed35e5ee, 0xeadebeac, 0x30bcc764,
+        0x66f1e0ab, 0x826dfa89, 0x0d9c7e7e, 0xe7e26581, 0xd5990dfb, 0x02c9b944, 0x4112d96c, 0x3ff1e524,
+        0xc35e4580, 0xfdfef62d, 0xb83f957a, 0xbfc7f7cc, 0xb510ce0e, 0xcd7411a7, 0x04db4e13, 0x76904b6d,
+        0x08607f04, 0x3718d597, 0x46c0a6f5, 0x8406b137, 0x309bfb78, 0xf7d3f39f, 0x8c2f0d55, 0xc613f157,
+        0x127dd430, 0x72c9137d, 0x68a39358, 0x07c28cd1, 0x848f520a, 0xdd2dc1d5, 0x9388b13b, 0x28e7cb78,
+        0x03fb88f4, 0xb0b84e7b, 0x14c8009b, 0x884d6825, 0x21c171ec, 0x0809e494, 0x6a107589, 0x12595a19,
+        0x0bb3263f, 0x4d8fae82, 0x2a98121a, 0xb00960ba, 0x6708a2bc, 0x35a124b5, 0xbccaaeed, 0x294d37e5,
+        0xd405ded8, 0x9f39e2d9, 0x21835c4d, 0xe89b1a3b, 0x7364944b, 0xbd2e5024, 0x6a123f57, 0x34105a8c,
+        0x5ad0d3b0, 0xcc033ce3, 0xd51f093d, 0x56a001e3, 0x01a9bd70, 0x8891b3db, 0x13add922, 0x3d77d9a2,
+        0x0e7e0e67, 0xd73f72d4, 0x917bdec2, 0xa37f63ff, 0x23d74f4e, 0x3a6ce389, 0x0606cf9f, 0xde11ed34,
+        0x70cc94ae, 0xcb0eee4a, 0x13edc0cb, 0xfe29661c, 0xdb6dbe96, 0xb388d96c, 0x33bc405d, 0xa6d12101,
+        0x2f36fa86, 0x7ded386f, 0xe6344451, 0xcd57c7f7, 0x1b0dcdc1, 0xcd49ebdb, 0x9e8a51da, 0x12a0594b,
+        0x60d4d5f8, 0x91c8d925, 0xe43d0fbb, 0x5d2a542f, 0x451e7ec8, 0x2b36505c, 0x37c0ed05, 0x2364a1aa,
+        0x814bc24c, 0xe3a662d9, 0xf2b5cc05, 0xb8b0ccfc, 0xb058bafb, 0x3aea3dec, 0x0d028684, 0x64af0fef,
+        0x210f3925, 0xb67ec13a, 0x97166d14, 0xf7e1cdd0, 0x5adb60e7, 0xd5295ebc, 0x28833522, 0x60eda8da,
+        0x7bc76811, 0xac9fe69d, 0x30ab93ec, 0x03696614, 0x15e3a5b9, 0xecc5dc91, 0x1d3b8e97, 0x7275e277,
+        0x538e1f4e, 0x6cb167db, 0xa7a2f402, 0x2db35dfe, 0xa8bcc22d, 0xd8c58a6a, 0x6a529b0b, 0x0fd43963,
+        0xafc17a97, 0x943c3c74, 0x95138769, 0x6f4e0772, 0xb143b688, 0x3b18e752, 0x69d2e4ae, 0x8107c9ff,
+        0xcdbc62e2, 0x5781414f, 0x8b87437e, 0xa70e1101, 0x91dabc65, 0x4e232cd0, 0x229749b5, 0xd7386806,
+        0xb3c3f24b, 0x60dc5207, 0x0bdb9c30, 0x1a70e7e9, 0xf37c71d5, 0x44b89b08, 0xb4d2f976, 0xb40e27bc,
+        0xffdf8a80, 0x9c411a2a, 0xd0f7b37d, 0xef53cec4, 0xeca4d58a, 0x0b923200, 0xcf22e064, 0x8ebfa303,
+        0xf7cf814c, 0x32ae2a2b, 0xb5e13dae, 0xc998f9ff, 0x349947b0, 0x29cf72ce, 0x17e38f85, 0xf3b26129,
+        0xd45d6d81, 0x09b3ce98, 0x860536b8, 0xe5792e1b, 0x12ad6419, 0xf5f71c69, 0xcbc8b7c2, 0x8f651659,
+        0xa0cc74f3, 0xd78cb99e, 0x51c08d83, 0x29f55449, 0x002ed713, 0x38a824f3, 0x57161df6, 0x7452e319,
+        0x25890e2e, 0xc7442433, 0x4a5f6355, 0x6a83e1e0, 0x823cedb6, 0xf1d444eb, 0x88381097, 0x5de3743e,
+        0x46ca4f9a, 0xd8370487, 0xedec154a, 0x433f1afb, 0xf5fad54f, 0x98db2fb4, 0xe448e96d, 0xf650e4c8,
+        0x4bb5af29, 0x9d855e89, 0xc54cd95b, 0x46d95ca5, 0xef73fbf0, 0xf943f672, 0x86ba527f, 0x9d8d1908,
+        0xf3310c92, 0x05340e15, 0x07cffad9, 0x21e2547e, 0x8c17eff0, 0xd32be060, 0x8aba3ffb, 0x94d40125,
+        0xc5a87748, 0x824c2009, 0x73c0e762, 0xcdfec2af, 0x0e6c51b3, 0xa86f875e, 0xbc6172c7, 0xf7f395f1,
+        0x3f7579b3, 0x7aa114ed, 0x165b1015, 0xd531161a, 0xe36ef5bb, 0xdc153e5f, 0x1d0cb81b, 0xceffc147,
+        0x6079e4ce, 0xc3142d8f, 0xa617a083, 0xb54fed6f, 0xc3c7be2c, 0x02614abf, 0x6fb5ce56, 0xd21e796c,
+        0x2d0985de, 0xe9f84163, 0xc1a71e3c, 0x2887d96f, 0x57c4c925, 0x05efe294, 0x88157153, 0x9a30c4e8,
+        0x8854a0a1, 0x02503f7d, 0x0cd6ef81, 0x1da4f25a, 0xe8fa3860, 0x32e39273, 0x4c8652d6, 0x9ab3a42f,
+        0x9ead7f70, 0x836d8003, 0x6cbe7935, 0x721502dd, 0x5a48755c, 0x07497cae, 0xde462f4d, 0x92f57ea7,
+        0x1fe26ce0, 0x27c82282, 0xd6ec2f2b, 0x80c6e402, 0xce86fdfc, 0x52649d6c, 0xc798f047, 0x45bae606,
+        0x891aec49, 0x66c97340, 0x9ca45e1c, 0x4286619c, 0xf5f9cc3b, 0x4e823ad3, 0xc0d5d42a, 0xaee19096,
+        0x3d469303, 0xfe4cb380, 0xc9cd808c, 0x37a97df6, 0x308f751f, 0x276df0b4, 0xe5fbb9c7, 0x97ca2070,
+        0x88412761, 0x2ce5d3d5, 0xd7b43abe, 0xa30519ad, 0x26414ff3, 0xc5bde908, 0x275ead3a, 0x26ceb003,
+        0xbf1bd691, 0x037464c0, 0xe24124c0, 0x81d4cc5f, 0x484525e4, 0x1c3a4524, 0x9e7e4f04, 0xe1279bff,
+        0x6dd1943a, 0x403dae08, 0x82846526, 0xd5683858, 0x29322d0d, 0xa949bea2, 0x74096ae7, 0x85a13f85,
+        0x68235b9d, 0x8ef4bce6, 0x142a6e85, 0xdad1b22a, 0xb7546681, 0x959e234e, 0xfd8650d8, 0x3e730fa8,
+        0x56f55a71, 0xd20adf03, 0x7cdc78a2, 0x19047c79, 0x253b1d7a, 0x4389a84a, 0x0aeb8165, 0x9c15db3b,
+        0xaafef5a7, 0xbe8b06b2, 0xb5fe87c0, 0xe2a4ef71, 0xd9d711f9, 0xecfcf20b, 0x80fac4c2, 0xbbb8abc4,
+        0x239e3b0a, 0x858129a6, 0xd97cd348, 0x8a30738a, 0xc5b71937, 0xd649a428, 0x18c1ef9a, 0x75c08a36,
+        0xc921f94e, 0xdf9afa29, 0x040f7074, 0x72f5972f, 0x84ef01da, 0x2cb7b77f, 0x867027d7, 0x9ce0199d,
+        0x71865c4c, 0x7a36af93, 0x6c48ddd8, 0x19b48fd0, 0x75f4e9e2, 0x0084cfe5, 0x63bfd4d8, 0x9783cdee,
+        0x64f2632c, 0xf1b20eaf, 0xcc8bfa2d, 0x39ddf25a, 0x740e0066, 0x9ddb477f, 0x12b2cfb6, 0xd067fce5,
+        0x1a4b6a53, 0x001cdb95, 0x12c06908, 0x531ac6bf, 0x513c1764, 0xf7476978, 0x1be79937, 0x8a8dfaa3,
+        0x70a1660e, 0xfb737b1a, 0x3f28ee63, 0xc1a51375, 0x84bd6dd6, 0xe4a51d21, 0xeafed133, 0x22ae0582,
+        0x4d678f26, 0xf854b522, 0x31907d62, 0x4b55dd99, 0x04d3658a, 0x19c1e69c, 0xc6112fdd, 0xc66699fd,
+        0xa0eabe6b, 0x3724d4dc, 0x0d28fe52, 0x46819e2e, 0x96f703ac, 0x21182ca3, 0x2e7b022f, 0x31860f13,
+        0x1956b1e5, 0xe1322228, 0x08063a85, 0x1d964589, 0x94d90481, 0x53c078f3, 0x5afb43ae, 0x1e3437f7,
+        0x877eb7b4, 0x5d67133c, 0xa385cb2c, 0xb82f2703, 0xef05ee06, 0x931dd7e2, 0x10d210aa, 0xe21339cc,
+        0x479c3a22, 0x613b67b2, 0x33c5321c, 0xa5f48ac4, 0xba5590c8, 0xeb244925, 0xd0ef3cc9, 0xd8c423fb,
+        0x15cfcc5c, 0x1feb2e4f, 0x36ec0ea3, 0xdbef7d9f, 0xd5ec6bf4, 0x3d3dff8a, 0x1e04a7f7, 0x8766bb54,
+        0x9a1d7745, 0xc79a1749, 0xb8d2486d, 0x582e3014, 0xa82427f5, 0x65dfa427, 0xbc5654c1, 0xbd086f26,
+        0x0451516d, 0xff4cfc35, 0x81f2864d, 0x31860f05, 0xd0638e1a, 0xb059261d, 0x3d1e9150, 0x21e2a51c,
+        0x82d53d12, 0x1010b275, 0x786b2908, 0x4d3cfbda, 0x94a302f4, 0x95c85eaa, 0xd7e1c7be, 0x82ac484f,
+        0xd24daa9a, 0x70055204, 0xbf27ef0d, 0x740ebb34, 0x47a1ff2f, 0x037e5e95, 0x3362d8d3, 0xb08c9e58,
+        0x7036b9a5, 0x3354197a, 0x326c9f12, 0xab99166e, 0x6c5d388b, 0xb222a768, 0x1bf121c5, 0x2ef76080,
+        0xb0658121, 0x8331bdd3, 0x64b5cd35, 0xc3c7fbe4, 0x576e7d5e, 0x1cbdc1b2, 0x5c54b675, 0xbffd76e3,
+        0x2ad7b53f, 0xe596de29, 0xc2d972db, 0xf1c92f34, 0x6af3ded6, 0xec317d66, 0x6a17bed5, 0x27750e9e,
+        0x8d950cb3, 0xb07688cc, 0x17a6ddd8, 0x5bf140e0, 0xed8713e0, 0x05890caa, 0xf66e4d73, 0x5ea0347f,
+        0xf535f2f5, 0x240c70f3, 0x5e922192, 0x8e59f944, 0x3185f7a7, 0x852dd342, 0x58c8e53b, 0x760071c5,
+        0xadb76f78, 0x185ab80c, 0x9d84df28, 0x4d2056da, 0x69bebccc, 0xa9fcb5f8, 0xb9d3ac81, 0xcc374aac,
+        0xc04e1ee9, 0x72634634, 0xb3bbf485, 0x1eb91de5, 0x5e8de602, 0x211cd561, 0xb03404e6, 0x051f3a53,
+        0xb263569c, 0x96cbc54f, 0x9eaf58e6, 0x32e9f0f2, 0x370f1cd9, 0x15bf840d, 0x1dbd5d06, 0xb04d214d,
+        0x6d1697ee, 0xc4b6fce1, 0x1b95f82d, 0x46979ca6, 0x0354cfc8, 0xd5950d3d, 0x10db605d, 0x18af3572,
+        0x990ec7a8, 0x2a0fe87f, 0x7937dbb8, 0xee376c86, 0xcc9f9070, 0xc953caa8, 0xd5c7c2ed, 0xee4f752e,
+        0x84f302f7, 0x1e08a48e, 0x44a5da35, 0x0fab83e2, 0xbb7cb9df, 0x2590afe1, 0xfef026aa, 0x83dbd643,
+        0xbe916d11, 0x27f7fba9, 0x82135d43, 0x6c5fa2a4, 0xe1e1370e, 0x51534581, 0x4cd9def3, 0xd94b4990,
+        0x74772379, 0x59264a1d, 0xc1dcdd8e, 0xed4ef1e9, 0xf29d901a, 0x68ecd0ad, 0x9ac31f92, 0x839a285e,
+        0x46447122, 0xc0e56c6e, 0xb09a4b83, 0xa9500b90, 0xda83c4e5, 0x4175b2f8, 0xeb4ddb4a, 0x236c6f2e,
+        0xeeb57a32, 0x2626e708, 0xa9d35265, 0x6ab3e9ab, 0xf12fcc1f, 0x1c317c43, 0x66c34fb3, 0xe17e58a0,
+        0x0295d4a1, 0x40cd40f9, 0x72700bb0, 0xd591e61e, 0x3e96b29b, 0xb50d5db3, 0xa3715dcc, 0x3405bcb4,
+        0x0e034d65, 0x210a4a2b, 0x7c302f2c, 0x24e8bef6, 0xa5135147, 0x0607ef80, 0x01f86c8f, 0x2c792c8a,
+        0x6ab73133, 0x6f436006, 0x09bf22a6, 0x1fde4622, 0x9841bd1c, 0xb23a7ad7, 0xdad579a4, 0x431229e9,
+        0xfa5dcb2d, 0x7da4f790, 0xa9b2c914, 0xcd191ced, 0x7a05e4aa, 0x73af1889, 0x192667b3, 0x538d4540,
+        0xacdbca81, 0x6b9d9e90, 0xc0462bba, 0xfcf5a7b9, 0x7b5c2904, 0x41a83c83, 0x7e69828f, 0x328a3bab,
+        0xdcd0f182, 0x1d113bcd, 0x1fb5c81c, 0x2d52afa0, 0x2d0c6111, 0x2a02ce14, 0x3fcd2c15, 0x54d574f9,
+        0xde57e605, 0x85dbb53d, 0xfc7cc003, 0x769c74d9, 0x6f834a4f, 0x79b3b87e, 0xe3d7c853, 0xa83e14b2,
+        0x3b1fc1ad, 0xb7dc2988, 0xb60ed652, 0xda3e3d1a, 0x5f2f680c, 0xb46e08da, 0x589b77da, 0xcef68535,
+        0x1c05d7a6, 0x24572da1, 0x939b02a5, 0xccd08d13, 0xdfa22970, 0xdff7581b, 0x2d5fade6, 0x5cfd3389,
+        0xce26cbb1, 0x376d7fd0, 0x02811e2e, 0xcc8030ab, 0xa7a4c9dc, 0x81db0ca7, 0x15a1bcef, 0x2045c6b5,
+        0x52c2f563, 0x6c829737, 0xb4f3384f, 0xb14d2f2b, 0xe102e00a, 0xba359973, 0x6045dd8b, 0xd0a5e531,
+        0xd679300f, 0xaabec63e, 0x526ad900, 0x95224f33, 0x723d6d44, 0x83584ad4, 0xa14ed869, 0x727bb03a,
+        0xdde37025, 0xb29d6587, 0xc3f3971d, 0x725933c2, 0x68f3eda4, 0xf73e9fdc, 0x944afd04, 0xa4c5e05f,
+        0x477f70ae, 0xffebfc90, 0xc21cff70, 0x84c68e32, 0xe82a3d6b, 0xba243867, 0x511c142f, 0x2062b8ac,
+        0x274a119f, 0x772afba2, 0x88a3974d, 0x205cf0de, 0xe45d5a2a, 0x1745056b, 0x2c8138f5, 0x982938a7,
+        0xfb265af9, 0x700c2cdf, 0x93e549b4, 0xb8abd353, 0xd74073e8, 0x289caf2a, 0x63e802e9, 0xc2f9adb7
+    };
+
+    /**
+     * The output sequence generated by reference ISAAC algorithm in C language.
+     * For initial seeding is used SEED_2 data array.
+     * 1024 signed 32-bit integers in hexadecimal representation.
+     */
+    private static final int[] EXPECTED_SEQUENCE_2 = {
+        0x67ae8a37, 0xa78322ea, 0xb9394933, 0x61f6e3c5, 0xbea576f1, 0xbb958f18, 0x12ce6479, 0xc593d5de,
+        0xdef281a0, 0x8435bb62, 0xf20b44db, 0x8a98479a, 0xbf2b8b66, 0x1080265e, 0xf0f8f12f, 0x021fa7f3,
+        0x81d2ed59, 0xb224a5f8, 0x0c1ff346, 0x92007ea8, 0x8fd1ce43, 0xeced69f5, 0x651fe09a, 0x45cf2c3e,
+        0x449b2b1e, 0x4f136be5, 0x8240cc97, 0xca979afa, 0x33b6a857, 0x7300f4f3, 0x79755d71, 0xcf11dd62,
+        0x916b7e04, 0x02076c0e, 0x9b4e3e68, 0x04836ed5, 0xf1b492c6, 0x887ef90c, 0x091b68f6, 0xaf7f0d3b,
+        0x89d7e5c1, 0x2b28fff7, 0xe6280e4f, 0x6681a805, 0xcb270bbb, 0x8e037463, 0x31a125f7, 0x0ba3c135,
+        0x7c2e8b3e, 0x6e21e06e, 0xc8b336ba, 0x08d677c3, 0x469fd05c, 0x71528649, 0x2024c602, 0x000e4f99,
+        0xb03395b1, 0x0a12d960, 0x68b15274, 0x7c415c07, 0x047c739b, 0x46658905, 0x45512a3c, 0x7f4cd2ff,
+        0x3d4d4ef6, 0xd7016dad, 0x6074bbf0, 0xbeaa55eb, 0xc519d326, 0x3ad349fd, 0x2fec4649, 0x14fa40ae,
+        0x96b51341, 0x2bf08ef1, 0xd1d374e4, 0x44168b14, 0xb01bee9b, 0x0b3f4332, 0xc799b9da, 0x76fc7dbd,
+        0x8c368a57, 0xe4cd2cad, 0xeeb0318a, 0xc2152908, 0x2b707a0e, 0x73457464, 0xc08e92a0, 0xfcdfca5b,
+        0x1320ed43, 0x333b77b9, 0x2e70948a, 0xa77d94f7, 0xbc1fb9fa, 0xa8ad15a1, 0x3c47b0f4, 0x867c4a8f,
+        0xb85784e0, 0x8a854e80, 0x456c8700, 0xc28f3a01, 0x415da6aa, 0x1315c6d8, 0x70a4ca70, 0xfdea940e,
+        0x686fbdc9, 0xda649eba, 0x661196f7, 0x795b5d27, 0xe10c78fa, 0x2fd89cf3, 0x61e850da, 0x00c49764,
+        0xee51d841, 0x00c18025, 0xdea163b3, 0x8b1b2080, 0x6abdd683, 0xe560c731, 0xc661b3e0, 0x23a3ff08,
+        0xa7579919, 0xfa443cba, 0x480bd220, 0x0a11740b, 0xb4b327c7, 0x831a0840, 0xb7c50ff3, 0x4266dff1,
+        0x835d0665, 0x52593038, 0x3917fb8e, 0x88c3b400, 0x05fb8823, 0xc9eaa89f, 0x6957fd17, 0x8dbcb8fe,
+        0xdec10c3c, 0x918d5fd8, 0x6af8619a, 0x8f472255, 0xc2f757b7, 0x9d62e804, 0x45e0e276, 0x482597d3,
+        0x06190214, 0x172b8501, 0xe91d7b8c, 0x4ee985fc, 0x3ecbf47a, 0xbbae5d98, 0x1f0bbdeb, 0x0d38208e,
+        0x6d4cb3e3, 0xa70050c4, 0xf0db408e, 0xddb6f1a7, 0x4bc4bc61, 0x90e1c1db, 0x203770dc, 0x39959247,
+        0xe2e0376a, 0xf70a8521, 0x81c759b2, 0x24d9915b, 0x09cc2ec3, 0x0fd0bff9, 0x58875636, 0xee78837e,
+        0x025a7eee, 0x4226859f, 0x85e21806, 0x9c1328bd, 0x0522fda0, 0x585441aa, 0x366f9ea0, 0xeb70934f,
+        0x0e394c41, 0xfa801419, 0x2b6d4c3e, 0xb09775fe, 0x3f0184ae, 0x3ace3518, 0xf80bf893, 0x9754753b,
+        0x78c46b93, 0x281e1918, 0x0dfcc5ee, 0xc0401601, 0xf8b11ce9, 0x9f799306, 0xb65c4232, 0x12ee4f73,
+        0xade72a42, 0x0ce54d71, 0xa6780e69, 0xe73bd8f9, 0xc245228f, 0x5fa2ed1a, 0x11627d1d, 0x2617ea2f,
+        0xd7404db6, 0x228fb877, 0xc5379535, 0xfe00008d, 0xc5f1491e, 0x1a3bdb0e, 0x9a90cc98, 0xa0abe3f5,
+        0xac7a0d18, 0x87bb3538, 0xa224baf7, 0xf2496ca4, 0x6a5b9bd6, 0x9a7da8d8, 0x72419677, 0xa36aec4d,
+        0x2a08ac0d, 0xfc4d7b21, 0x25f2aad0, 0x4f7146d4, 0xb4a603bd, 0x194e9792, 0x8f60cf1c, 0xed8ae037,
+        0xa47f90b1, 0x5eec55a3, 0x326c33d4, 0x6f79168f, 0xbcfc27fa, 0xd9e76d04, 0x79430e33, 0xd0c3b727,
+        0xd4bb06af, 0x8805066b, 0xaaef1130, 0x04958fef, 0x2e3270f4, 0xf5a8ffe8, 0x2a089c72, 0xff411bfc,
+        0xd6ed9552, 0x6253f5ef, 0x0c836c2f, 0xb79471b0, 0x127d177c, 0xf901cefa, 0xff75dc46, 0xde79ec4f,
+        0xe9f1f182, 0x9d28d8cd, 0xfcc98a94, 0x227670c2, 0x46b7c48c, 0x8fd77dcb, 0x60bc6d66, 0xe775322d,
+        0x0def2251, 0xf3dd14cb, 0x6c3f3468, 0x87696244, 0x10cca0be, 0x1d7fa716, 0x955b963b, 0xe53b6074,
+        0x77af9ec4, 0xfc856100, 0x91a06dc7, 0x8d55e3f1, 0xf8c805a3, 0xf3a1cb7a, 0xbcd51c6d, 0x301fdcdf,
+        0xdbcbcc54, 0x8b85fe57, 0x946d707e, 0x388a2ed4, 0xc4b93a5b, 0xd48631d2, 0xae2b4f28, 0x5b731392,
+        0xdf6e621e, 0xc4590c30, 0xa3a23cd5, 0xbfce9899, 0x4620cff9, 0x966c8c3f, 0x7a302556, 0x3fe549fa,
+        0x67533e77, 0x80250302, 0xcd899fe7, 0x694e77ea, 0x0879525d, 0xab6675e4, 0x763f8b35, 0x7684e6a1,
+        0x8fa35070, 0xe9fccaf1, 0x2d7195b7, 0x85b45186, 0xab799317, 0x2c84bd2c, 0xf8354c09, 0x02d96875,
+        0x8fdcc390, 0xf6af5aec, 0x2a584739, 0x8a1ba7e9, 0xea46f9b2, 0x98acd24f, 0xfc8a3a24, 0xa496eff9,
+        0x625c30ea, 0xc6ea0535, 0x3ed3b5d6, 0xffcd675d, 0x0b1719f6, 0x1b1c4e7b, 0x3206a672, 0x62fc1851,
+        0xa6a4c781, 0x78bbdbbe, 0x06c1c8ce, 0x5747c340, 0xfff7ab9c, 0xebaf9370, 0xf7b185a8, 0xf8309f84,
+        0xfa1601de, 0xf9fc8780, 0x59c2f8bd, 0xe74fcd5b, 0xf115f57f, 0xddda3332, 0x2ee56568, 0xa2243659,
+        0x9d6d578f, 0xbb507574, 0x95d44e0e, 0xdbdf2bc3, 0x0dc1b750, 0xc6a24241, 0x207d7115, 0xc337d024,
+        0x3817ef9a, 0xe9f12ccf, 0x4d67fc7d, 0x3da57a2b, 0x000e09a5, 0xe739c5a2, 0x7b7e1613, 0x23d576fe,
+        0x6941a210, 0x57521190, 0xdc4359c0, 0xd8eed2f8, 0x7862904f, 0xfc179a41, 0xeee2716e, 0x362cf76a,
+        0x0a087072, 0x3e6e2fa9, 0xaf2a0efb, 0x221d513f, 0xf054d856, 0xc3297367, 0x1c0998c8, 0xa664172f,
+        0xe2637c8e, 0xc17ac7d4, 0x0e041f43, 0x0d9c0ae4, 0x9346dacf, 0x7fb2a015, 0xe92276c2, 0x21478bfe,
+        0x119e2d0c, 0x5f76aeaf, 0xbe21aaec, 0x63174d5f, 0x13b796c3, 0x0fa0eba1, 0xe2f7277a, 0x3f555b42,
+        0x0215c7e4, 0x96266efa, 0x2953a4d1, 0xadfc171a, 0x396234a7, 0x560c0279, 0xefa6d2c6, 0xf48d9b5a,
+        0x4131c7b1, 0x9e302f70, 0x637c9f23, 0x22637330, 0x09927e76, 0x0898d1d6, 0x1b797274, 0x9ad491a2,
+        0xa2df3627, 0x012c3ed0, 0xc19c09d7, 0xa2fdaf56, 0x5b91f8fd, 0x3b7c49c9, 0x25694d29, 0xd7b42e9c,
+        0xa7be0053, 0xa91f1761, 0xd89e8b2a, 0x67846097, 0x76bd4006, 0xb8eb0712, 0x859bf877, 0xca42d70c,
+        0x24e80a69, 0xd92bc598, 0x55498c1e, 0x86deba8b, 0xf7c340b7, 0xa36caa12, 0x0631ddec, 0xc0146fe8,
+        0x2f959ef3, 0xf8400f0c, 0x58f676a0, 0x4ae4fe13, 0x9c4af056, 0x9e6f19d6, 0x12a9eb69, 0x1aeed54e,
+        0x34c91114, 0x97128045, 0x920d1f59, 0xffe7fbaa, 0x2db4a671, 0x6e6ff7aa, 0xd40d46bd, 0x1578f939,
+        0x15c5cbc6, 0xff356fd0, 0xd5d1680c, 0x5b11d14d, 0xe75541c0, 0x0fe2e2ba, 0x3ad55308, 0x8f036a69,
+        0xa9bfc3cd, 0x87685338, 0x510092b4, 0x1f66622a, 0x996337b2, 0xc531891f, 0x98371a93, 0xd9630100,
+        0x513ff133, 0xcf8381da, 0xed12e8e9, 0xe3ce7c7b, 0x8f731ab5, 0x511ba7c2, 0x9d754e87, 0x244603ac,
+        0xfd9985e1, 0xc1581765, 0x84e50a12, 0xa0ab0034, 0x63ee60c2, 0xdf5ab248, 0x09b42202, 0xca87f896,
+        0xca6ae5f0, 0xa569d829, 0x977cf29b, 0xd56a2a2f, 0x85ad1532, 0xfa2a131a, 0x00784081, 0x81f0e466,
+        0xebd340d3, 0xc37ad0e4, 0xd0aa6d7a, 0x36d2551f, 0xd6ff8448, 0xc7b89445, 0xa43421ad, 0x3be75400,
+        0x557a61ef, 0x0f519b14, 0x56503579, 0x1c8d164d, 0x0dcef35b, 0x3d9f1f2a, 0x56d056f2, 0x5d8fd4ec,
+        0xa481a350, 0x7cadd9c0, 0x70375ce2, 0x83263d2a, 0x5826ea3b, 0xfa523ce7, 0x50c9438b, 0x74fca95d,
+        0x62967ef5, 0x11fd6429, 0xcbb8e28c, 0x67fb9e81, 0xdc9e1147, 0xa29672f7, 0x1cf310f7, 0xb1e1d8e6,
+        0x3f862ff3, 0x6ade0327, 0xa92f3686, 0xed79f165, 0x359e1620, 0x36c68936, 0xe46fe521, 0x0c5e36b0,
+        0x6d9d9cdb, 0xc095eecd, 0x566dd305, 0x6d96cd36, 0x5d115a80, 0x2a9489a8, 0xdd067488, 0x73acf831,
+        0x7392c0f0, 0x30707838, 0x92826042, 0x67c54548, 0xf830434d, 0xebe67854, 0xaefc9a41, 0xcabf703f,
+        0x5242c77f, 0x1f3867a9, 0x48174739, 0x8657c39e, 0xa11247e2, 0xb4e6624d, 0xc7ffe78a, 0x1e11a841,
+        0x6690244b, 0x8dcc9292, 0x5ce4dcc4, 0xebcba02d, 0x2ef6503d, 0x4fb880bc, 0xb949a759, 0x7bb18a1e,
+        0x5973d2e8, 0x577ad8a6, 0xa9d4992e, 0x1a248a0c, 0xcc4450ed, 0x7e0178d3, 0xe98a8f3f, 0x209fb330,
+        0xf7bf40fc, 0x632231b3, 0x7055fdaf, 0x7719e655, 0xf8d49413, 0xc200aa04, 0x8a41183a, 0xdfa217c1,
+        0xcd0c165d, 0x08fec61c, 0xef608048, 0xe19fae2c, 0xedc6f3ea, 0x859a69f9, 0x5f96c76d, 0x571aec69,
+        0x9cfe7fa4, 0x692baf70, 0xbb143cb4, 0xe8968678, 0xfcb77411, 0x02d3268d, 0xcdc3daa3, 0x514e78e9,
+        0xa231a480, 0x8ac10400, 0xe19a2ca1, 0xfa790fe1, 0x808fec9c, 0xe4760960, 0x62e9d051, 0x5c4b006b,
+        0x22eb9703, 0x426b5907, 0xfa1cd338, 0xa3b4811a, 0xad6185c1, 0x349efbc0, 0xeee28d42, 0x02531fc5,
+        0xd11b2c4d, 0x5b3bf865, 0xf4823687, 0x4f92b6b7, 0xfb641c60, 0x0c526fa9, 0x42438de8, 0xd5cbf7a0,
+        0x54ad0d1f, 0xb4e63f09, 0x666285eb, 0xe7ec0275, 0x57e7225a, 0xafe6b0e3, 0x17431cd7, 0x33bc9204,
+        0x8a9cbdde, 0x94d8fe7d, 0xc943f36c, 0x1348c3c6, 0x43cf9b8c, 0x5a84ae20, 0x6d372dea, 0xdb0b3c92,
+        0xf0f2a72d, 0x473a1fe7, 0x062416df, 0x0a12c61c, 0x3680c102, 0x8d0189db, 0x0824325f, 0xffb97ead,
+        0x0d8d353f, 0x4a4e6ec2, 0x76243bb7, 0xdabfbeee, 0xcd8410d7, 0xa30f17c3, 0x2b59ceef, 0xda27f7c0,
+        0x791d813b, 0xc0516741, 0xb363e4ff, 0x31ddbfb7, 0x49db1590, 0xd843513c, 0x8d317a75, 0xb24387df,
+        0x63fd4066, 0xa0fce498, 0x7b42de97, 0x30eddc0c, 0x071ad222, 0x3a9054c4, 0x5ce35298, 0x375be64b,
+        0x10af32c8, 0xa999ade1, 0xfa9f4d31, 0xfbe24a2a, 0x4c92714b, 0xcce3056a, 0xa81d616a, 0x3bb49213,
+        0x72fd2b0e, 0x1b46d17e, 0x92159bc7, 0x7462e172, 0x4fdc3e05, 0xf309c063, 0x9133532c, 0xe62d9341,
+        0x681a4871, 0xb1598525, 0x498ca388, 0x96a7ea81, 0x791c8a85, 0x2a33a1e2, 0x1e6abc87, 0xb21a4878,
+        0x65fac53b, 0x59162ae1, 0x22858a30, 0x40f4e569, 0xe5cb0023, 0x626cd2a0, 0xfe6d8fc8, 0xbb7ed7c3,
+        0x9a557393, 0xd0ff5e60, 0x2a20ed9b, 0x4eaafb5a, 0xbe9425bd, 0x63620ce1, 0x31ea24ed, 0x082e426a,
+        0x7ff35a73, 0xa67fbaa9, 0xd2e3c5b9, 0x1a90e96a, 0x71f19184, 0xb836b88b, 0xe51fa187, 0x42576438,
+        0x58d28776, 0x47bd92a3, 0x09816862, 0x295138ef, 0x23ab2bb1, 0xd7c584e0, 0x1793062f, 0xcc47e852,
+        0xc2eb9703, 0xe6812d93, 0xa4aa4d2e, 0x7f635b79, 0xa7407b29, 0x9724c087, 0x406e08ce, 0x6bf1d8b7,
+        0x9ef5b815, 0xf2c6f094, 0x86269ca2, 0x17fdaa4f, 0x9b645b61, 0x701bbbeb, 0x8de7bcb7, 0xd468266a,
+        0x48df44ae, 0x570b08ca, 0x7a5ba43b, 0xfc927312, 0x3461a3dd, 0x0ffe5943, 0x87060375, 0x8d8afed7,
+        0x83d20387, 0x77eabb51, 0xf86d045b, 0x71a47537, 0xa4485ea8, 0xfd2b6ac3, 0xb4ba1fcf, 0x31dcee82,
+        0x8b41cdf6, 0xeacde42b, 0x02de5fbb, 0xb6311aa8, 0x1596ee5d, 0x355cc39d, 0xbe1a87c1, 0x01e1df07,
+        0xfe413d46, 0x5e5e13ab, 0x30233fd6, 0x99449292, 0x34955dcc, 0x1f37d394, 0xd43639bd, 0x65c98eee,
+        0x67b85593, 0x1660b2a1, 0xfd86e9a0, 0x33bb6e5a, 0xdd5892fb, 0xa6832091, 0xd077d216, 0x353bfe9a,
+        0xb4a10726, 0xca1a536e, 0xed8af6c1, 0x41d167d1, 0x5f554941, 0x93f4032a, 0x83d83ae5, 0xc8866a05,
+        0xc36d1e1f, 0x95a082c5, 0xd85e6cad, 0x302bc384, 0x41fb8717, 0x61221cc8, 0xce9a44cd, 0x2884ec21,
+        0x9712152d, 0x419e4939, 0x32367b47, 0x238ee432, 0xd27f0b8e, 0xa3eaed24, 0x1eefd0a9, 0xf38a2400,
+        0x72c0d4b2, 0x8bdbdec1, 0x563a2b59, 0x0d50177b, 0xb01576ef, 0x7dd9f33e, 0x7905c120, 0x461712d6,
+        0x78265e93, 0x54a91f0b, 0xb88eb9c0, 0x9d8997af, 0xcb1d1296, 0xfa0a3a77, 0x5bb26dd9, 0xf6da78df,
+        0x53b8e80c, 0xc55cdaf6, 0x871a3971, 0x0bd8d322, 0xfa9e0a9c, 0x95949e0e, 0xe94f0edb, 0x15e06b25,
+        0x8b3e34cc, 0x980261a9, 0x3a8fe440, 0xc72330aa, 0xbff5c8b6, 0x486a08e6, 0x6b3f0668, 0x53c90761,
+        0x1dc2374b, 0xba623bb6, 0x720d9fff, 0x8454fada, 0x29f09563, 0x6512330e, 0x84370042, 0xda55c14b,
+        0xe6397b27, 0xdb03bcc7, 0xd6e27986, 0x483ad4f2, 0xe0e2c39a, 0x459e6792, 0x03c120ec, 0x13df7847,
+        0xc3ee77e1, 0xbcee7cd4, 0xdb3734ec, 0x0e19ebb2, 0x1501517a, 0x815190f7, 0xea30ba2c, 0xed58523c,
+        0x9dc64c08, 0x58d8753f, 0x1fa771c5, 0x7721fb09, 0xc64d1f60, 0xf407dc18, 0x6fdb1e33, 0x89abccb8,
+        0x2fab8715, 0xd8ee352e, 0x41bfa764, 0xda0267ee, 0x65794080, 0xe3095d65, 0x08e2148b, 0x173103b5,
+        0x55673978, 0x8d76b213, 0x6ed42e4b, 0xbe589395, 0xcf4c4d8a, 0xd331b237, 0x0af2f4cb, 0x202be7fa,
+        0x2e87bc27, 0x140a95df, 0xa0d1ef7e, 0x1031da30, 0x630f3ea6, 0x0e3b0991, 0xba7c0462, 0xca8a192c,
+        0x668417e2, 0x2c6e8ec5, 0x3f2e4372, 0x310927e9, 0xa87b5f4e, 0x21e3f285, 0x66aab4be, 0x96804f73,
+        0x097c363b, 0x76445811, 0xaf92fb77, 0x660010b7, 0x3ff5abbb, 0xdaa505d0, 0x17dc3488, 0x45dac66a,
+        0xa834d6eb, 0xacf0641f, 0x05576174, 0x28bf1858, 0x08829e92, 0xd3c5d530, 0x6acd00b2, 0xf36c0645,
+        0x4385cae7, 0x93b11f88, 0x3dfe1da7, 0x2d5df9d8, 0xd51d498f, 0x1d122b84, 0x2ca7619f, 0x670fba3a,
+        0xa59f3019, 0xd25ade01, 0x43ef2f88, 0x05cf6af4, 0x6fc3b5e0, 0x305a309e, 0xb7bce57b, 0x49c55693,
+        0xd59bd6d0, 0xdf13274c, 0xa5640917, 0xb8e88520, 0xf81fb865, 0x245967cf, 0x64420112, 0x97720fd0,
+        0x0ef913f8, 0x9fcf14f4, 0x99a86a60, 0x150ae075, 0x1b4be51e, 0x12fe7368, 0x23781feb, 0x3657b0c3,
+        0x90f84f92, 0x082f626d, 0xf057cef1, 0xf04fc2c1, 0x8767f311, 0x240ab838, 0x160564c0, 0x96f4460d,
+        0x2c7e5c83, 0xb44e6da1, 0x43f86ae1, 0xe3afdf03, 0x34173462, 0x197d8030, 0xb02d6ae7, 0x0cec076c,
+        0x0fb9d05e, 0x1fa74d99, 0x03f9636e, 0x03afa44d, 0x79ceb46c, 0x8b9e3158, 0xad87d846, 0xaf794612,
+        0xdd00ae31, 0xde8d63de, 0x229c5e66, 0x2df46e14, 0x3cbb35d1, 0x9832a55b, 0xaff3c01c, 0xaf4cc2be,
+        0x05095c2b, 0xee6be44f, 0x7b9bd378, 0x09a5f11f, 0xfddc340a, 0x010da0fa, 0x60874e63, 0x9f03a38b,
+        0xddfe1c05, 0x8dadcc16, 0x6df97114, 0xe0779adc, 0x8de82987, 0x83cca69c, 0x38b19e7c, 0xebc30d07,
+        0xb36f46cc, 0xee4d1453, 0x7522c310, 0x3a43d376, 0xab400f15, 0x4fedfa99, 0x02e7323e, 0x4c57f680,
+        0xe4190ae5, 0x6a5bba49, 0xd3c223d8, 0x1b87ab96, 0xaef4795f, 0xf457cd2d, 0x2bae8689, 0xa229c48f,
+        0x41bd5e74, 0x25cb3da8, 0xfd47e4d0, 0x0a241ffc, 0x16c0dba7, 0x6f1469fd, 0x810c16da, 0x66a7b33c,
+        0xe6c9e001, 0x9ccefde6, 0xd24f7adc, 0x1bcc8980, 0x37084252, 0xb779d5cd, 0x52e456d0, 0x313ba4de,
+        0xffb09943, 0x0e9d4e1f, 0x5a3c51ac, 0x6f055f04, 0xb2ac9a26, 0xb7fac64f, 0x27cc0c8d, 0x342bbac3
+    };
+
+    @Test
+    public void testReference1() {
+        final ISAACRandom isaacRandom = new ISAACRandom(SEED_1);
+
+        final int[] actualSequence = getActualSequence(isaacRandom);
+        Assert.assertArrayEquals(EXPECTED_SEQUENCE_1, actualSequence);
+    }
+
+    @Test
+    public void testReference2() {
+        final ISAACRandom isaacRandom = new ISAACRandom(SEED_2);
+
+        final int[] actualSequence = getActualSequence(isaacRandom);
+        Assert.assertArrayEquals(EXPECTED_SEQUENCE_2, actualSequence);
+    }
+
+    private int[] getActualSequence(ISAACRandom isaacRandom) {
+        final int[] actualSequence = new int[1024];
+        for (int i = 0; i < actualSequence.length; i++) {
+            actualSequence[i] = isaacRandom.nextInt();
+        }
+        return actualSequence;
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/JDKRandomTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/JDKRandomTest.java
new file mode 100644
index 0000000000..6550563573
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/JDKRandomTest.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import java.util.Random;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class JDKRandomTest {
+    @Test
+    public void testReferenceCode() {
+        final long refSeed = -1357111213L;
+        final JDKRandom rng = new JDKRandom(refSeed);
+        final Random jdk = new Random(refSeed);
+
+        // This is a trivial test since "JDKRandom" delegates to "Random".
+
+        final int numRepeats = 1000;
+        for (int r = 0; r < numRepeats; r++) {
+            Assert.assertEquals(r + " nextInt", jdk.nextInt(), rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/MersenneTwisterTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/MersenneTwisterTest.java
new file mode 100644
index 0000000000..e806fc7090
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/MersenneTwisterTest.java
@@ -0,0 +1,240 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class MersenneTwisterTest {
+    @Test
+    public void testMakotoNishimura() {
+        final MersenneTwister rng = new MersenneTwister(new int[] { 0x123, 0x234, 0x345, 0x456 });
+
+        /*
+         * Data from
+         *   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.out
+         * converted to hexadecimal.
+         */
+        final int[] refInt = {
+            0x3fa23623, 0x38fa935f, 0x1c72dc38, 0xf4cf2f5f, 0xfc110f5c, 
+            0xc75677aa, 0xc802152f, 0xd9155da, 0x304aacd1, 0x9a73f337, 
+            0x989a7a43, 0xc1483a50, 0x268c922d, 0x582fa6ba, 0xfd0cc411, 
+            0x44267b5e, 0xe64aeede, 0xbffce512, 0x69b7263d, 0x43df2416, 
+            0x54c06fe4, 0x4bb1636f, 0xaa772159, 0x692b9302, 0xe6f6290f, 
+            0xec59faf1, 0x453050b, 0x8e18c8c2, 0x9afc3045, 0xc0f8369c, 
+            0xa6784b64, 0x2b3baca5, 0x241c69b2, 0x102b153e, 0x2aa0204a, 
+            0xc4937ab0, 0x4edada28, 0xfc1a4165, 0x5327669e, 0xdeaa3938, 
+            0x7d45d251, 0xde57ac80, 0xafdc0e1a, 0x630eea2f, 0xac9709be, 
+            0x8d4b2277, 0x3bd93aca, 0x85eff969, 0x7dd7008b, 0xc0f5f7ef, 
+            0xf354dbb7, 0xd19a749, 0x9245ad51, 0xdd1bbe7b, 0x31ce56ca, 
+            0x8fc36f3b, 0xa307eaa6, 0x2d16123c, 0x81a710e8, 0x6fb0ece0, 
+            0xa4a8ed5d, 0xf81025ee, 0xc7bdb7cc, 0xacbd297, 0xc2e69738, 
+            0x2e414667, 0x8436773b, 0xb2eb0184, 0x6f458090, 0x7f2c9350, 
+            0x213f68e, 0x470b7a6d, 0xb8e983ba, 0xadd68783, 0x3c580a4a, 
+            0x8239e155, 0xfdc2c299, 0xacd2d0b2, 0xe39381d6, 0xb4a5ad7e, 
+            0x4c6c3bdd, 0x1908bf3a, 0x8aaa5fe5, 0xa3674b65, 0x4c2d0c3f, 
+            0xdf2ba5a5, 0x1032fcf8, 0x9c8a9da2, 0x989f1b17, 0xb62684e4, 
+            0xfc56810e, 0x4937dc5d, 0xd6502fba, 0x403fad7e, 0x8ecf04fa, 
+            0x6e622af6, 0xb3a12932, 0x7735265b, 0xb3397c02, 0x3e92651e, 
+            0x58bca8af, 0xd02046e6, 0x6394b11, 0x91ed9821, 0xb75225a3, 
+            0xe6cf1b38, 0x35297ffe, 0xeaa2f3af, 0x8740f423, 0x9cf755ec, 
+            0x3e71ab47, 0x9b3f3b19, 0xa17cb981, 0x745c768b, 0xc5fa06c, 
+            0xa9ddfe32, 0x27fb2a2d, 0x83c11cc4, 0x1be0b4bd, 0xfadc6d9, 
+            0xd4c4cf4b, 0x3e2019a7, 0xe6489797, 0x5746fcb5, 0xa468a4c8, 
+            0xe1f303c8, 0x892aba04, 0xb92617d6, 0x79af91, 0xa6719544, 
+            0x2123c124, 0x250f6867, 0x4ed30865, 0x32e1592c, 0x28f2364b, 
+            0x56bb6094, 0x39162749, 0x6b68d894, 0x3ce35fee, 0xcfc8dc4f, 
+            0x71602f12, 0xdc9ae288, 0xf8ef2ed7, 0x6b06d07a, 0x216e06f0, 
+            0xdec994b2, 0xbb3a7736, 0x5c9957e9, 0xc8bca92a, 0x2a6955f6, 
+            0x93876aff, 0xfac9a03, 0xefc4f05, 0xb1a05dc2, 0x6bae0207, 
+            0x39c9d223, 0xd25d4245, 0xa3194800, 0xb20d013e, 0x6249fe2f, 
+            0x837f9243, 0xb5af74d1, 0xda4d5e81, 0xbb17131c, 0x9e8e92bc, 
+            0x631fa28c, 0x6c4862df, 0x188d56e3, 0xe7b5f3c2, 0x8be50cef, 
+            0x3c846d8b, 0x47bd5cf0, 0x816608b6, 0x99263fac, 0x3082b3dd, 
+            0x41e2e09e, 0x554d804b, 0xd25a3b7, 0xfcf0b24b, 0xf91f82af, 
+            0x9b6ad24b, 0xb83703f9, 0x10d431ab, 0x675e6dc2, 0x52f58561, 
+            0x3badef9a, 0x31592d6b, 0x70748fc3, 0xea8cd203, 0x9cdde8aa, 
+            0xe8c41002, 0x696ec53, 0x91e8d6be, 0xdd90041f, 0xc4fb23f3, 
+            0xdee5fd0f, 0xb65694ac, 0x38dba6c3, 0x9a6226c2, 0x4380bf2d, 
+            0xe23c29cf, 0xa62df7dd, 0x3a8a7f47, 0xcef7d974, 0x3341ae98, 
+            0x9fcced1f, 0x89117a75, 0x2697345b, 0xdec75a6, 0x243febfb, 
+            0xdbe6ab5d, 0x6e41602c, 0x5fded1ce, 0xec854a95, 0xa0839470, 
+            0xa9fc1f3c, 0xeb51cb9, 0xd58d7944, 0xc6767655, 0xf096123e, 
+            0x3c60b5b2, 0x38abc388, 0xec0546a8, 0x974f331d, 0xb68e0fe, 
+            0x9e7008a7, 0xc3496c73, 0xae81ba8c, 0x499065db, 0x727d51f3, 
+            0xd2c437c1, 0x5b879655, 0x822f5cf7, 0xc3525dae, 0x198a3598, 
+            0x8dc3afd0, 0xf1fb2ace, 0xe9470165, 0xa2d922ee, 0x3d634c3, 
+            0xdfdafa3a, 0x323cb60d, 0xa8142cc2, 0x8fedaffd, 0x3c344d7e, 
+            0x6da7d412, 0x8faa6de0, 0x91b26b9, 0xcfb90648, 0xf4811a08, 
+            0xaa091e50, 0x3472e158, 0x6a650e2e, 0xa3cf7e2f, 0x50c01ec0, 
+            0xc2c67020, 0x87402425, 0xb2e34cb9, 0xbd87d91b, 0x3563a6d3, 
+            0x339cf74e, 0xffcc2cf9, 0x5537400, 0x57ae171b, 0xf5396a89, 
+            0xbed9b927, 0xaaea3a07, 0x92add60c, 0xd6cec30b, 0x85729ab0, 
+            0xc5326ca8, 0x7b83f953, 0xa43ff0cf, 0xe0eea920, 0x65de4954, 
+            0xff454bcb, 0xa3af3b3a, 0xa8d5900a, 0x19d5c121, 0xbd4a89ac, 
+            0x19084ae, 0x98130311, 0xaeba10a, 0xe80fa57c, 0x72ed83fd, 
+            0x4fb367f3, 0xcc63dc6a, 0xc3372454, 0x6a37e254, 0xfe2da32c, 
+            0x6fda8ee3, 0xffaf02b4, 0xc027d10e, 0x6709f3e9, 0xf27c7cfe, 
+            0xaaefc51f, 0x446a04a8, 0x120d944c, 0x6723ed43, 0x72ab3b17, 
+            0x465e7e94, 0x5d910b0f, 0xbd96427, 0x216d0655, 0x7d9b8ad4, 
+            0xa14a22ac, 0xcd90160a, 0xdb3f890b, 0x2d37dcc3, 0x34b8c67f, 
+            0x1cfd3624, 0x69ca4cc3, 0xe756cff2, 0x9d122b27, 0x46667c33, 
+            0x59ee9c5c, 0xbd7b82d1, 0x5f0576e1, 0x499ef4c9, 0x1370277c, 
+            0x8954bac1, 0x37da5236, 0xa02eb689, 0xbe47fedc, 0x776ea717, 
+            0x6cb476ac, 0xa47b4a6a, 0x999efe, 0x5b639436, 0xf650de88, 
+            0x4e8fd98, 0x191216d2, 0xceaed09b, 0x204794eb, 0xd2c25028, 
+            0x87bd221d, 0xc68852c5, 0xbfaafd1e, 0xf534182b, 0xfaa3297f, 
+            0x80e14a8d, 0xc204c912, 0x84449c0d, 0xb184ee7d, 0xf3f7b53, 
+            0xaa6e3294, 0xb89cbf37, 0x992ad523, 0x6efb1e90, 0xad46858f, 
+            0xa217c69e, 0x3b8123f6, 0x9651ad17, 0x8f4c0a9a, 0xf76fc20, 
+            0x7c62f8c3, 0x6da9dc30, 0x70dd3d5d, 0x96ae2e55, 0x58c655e4, 
+            0xaa853035, 0x48e81ea, 0x87002693, 0x2c667e97, 0x9a2f4d5b, 
+            0x52933a95, 0x3f72a82, 0x6c6d501a, 0x713505ec, 0x7d0f9784, 
+            0x6aebb0b6, 0x107a7e37, 0x15773151, 0xf90a74da, 0x2377363c, 
+            0xa8de6de, 0xa6e5d5a2, 0x5dca95f2, 0x5c53d917, 0x168ec0cf, 
+            0x570dfc18, 0x4288fe6b, 0xb9833a27, 0xdd1e7904, 0x315a4474, 
+            0xd5631e5f, 0x7213cfd6, 0x249938a9, 0xff052817, 0x718eb33c, 
+            0x2b4dec3, 0xc4964842, 0x469f5baa, 0xd941297a, 0xe9dded03, 
+            0x60fac145, 0xdb37f217, 0x39cd8ee4, 0x452c33d1, 0x5abe9be8, 
+            0x1af69e0d, 0x5b0bd6d7, 0x319ecd5f, 0x3bcd235c, 0x3fdbfa77, 
+            0xac550eb4, 0x3a0a346c, 0xf39919d4, 0x6e1f71ee, 0xe832ed0e, 
+            0x84c9d733, 0x60a2537d, 0xabbdd4b3, 0xd598dffd, 0xd13c8592, 
+            0x32a03cc7, 0x336e5faf, 0x2f8e590a, 0xaaeec5d4, 0xa8295b34, 
+            0xc30ce8ca, 0xee4c5501, 0xc77d054, 0x6b982f24, 0x678195, 
+            0xa849138f, 0x2f3dd18e, 0xfe23a88a, 0x2e47871d, 0xe263d69f, 
+            0xaa1419fe, 0xa2b0fa92, 0x3fe37d3d, 0x4f37161e, 0x4cd9b682, 
+            0xc65860f6, 0x77e4edc3, 0x4c71a18, 0x36fb25b8, 0x451411f4, 
+            0x635fecf1, 0x92b03a64, 0x9b7fd167, 0x171906d3, 0xc76604e6, 
+            0x59257d37, 0xf444dead, 0xbc26a68d, 0xd225e427, 0xf675b085, 
+            0x1aa04db0, 0x7f683b77, 0xd79d3278, 0x308425a0, 0x4504d28a, 
+            0xde9ae465, 0x64275e5a, 0xbd910789, 0xd13421f7, 0x84ce54b4, 
+            0x3c166b93, 0x1d040e83, 0x337c6ae7, 0xbe1630aa, 0x3e9a6e14, 
+            0xe125a856, 0xffce8ca5, 0x324f5b19, 0x5050a29f, 0xa878afad, 
+            0x2c6ee4b4, 0x7a891b36, 0xfdeda343, 0x8e420be9, 0xb1a90f55, 
+            0x1aa82dfc, 0x7bd87288, 0x497d36dd, 0xefca266c, 0x536338b5, 
+            0xbb314af9, 0x99c64a66, 0xe230edff, 0x35b07a32, 0xac172bc3, 
+            0x66890dcd, 0xc8b7e513, 0x9f14818d, 0x38f45e55, 0xe39d2420, 
+            0x41e7b802, 0xe7d097d7, 0x87bde5db, 0xa3b40719, 0x6903a4f1, 
+            0x8fe17270, 0xa00bc9ad, 0xfcbd3397, 0x458ad6f3, 0xfb3f1663, 
+            0xb7b4fe23, 0xec0fda7a, 0x6324016b, 0x7c6c5059, 0xf81c1522, 
+            0x957286ba, 0x5e27c862, 0x2dbb10a2, 0x39db5731, 0x1d567daa, 
+            0x55ee48f2, 0x4e5e0742, 0xc27142ca, 0xcbacae9e, 0x5d1a105a, 
+            0xb37e6bbc, 0x4457de32, 0xc2731190, 0x51f2e26b, 0x616f5ec8, 
+            0x4c524088, 0x84eb772e, 0x18fe5f9c, 0xc27be658, 0x25f0b8e, 
+            0x61d91e60, 0x65599112, 0x839a9784, 0x9942f04b, 0x907c8596, 
+            0x2e824b62, 0xa1d696d8, 0xca1de87f, 0x9b97e72, 0x89a8b34e, 
+            0x6edda0f8, 0x21202673, 0x10b55868, 0x5fa7c76b, 0xa1b56faf, 
+            0x670e4131, 0xd8f5502e, 0x25233991, 0xe43445a3, 0xfed6a20a, 
+            0xd19733f7, 0x8bb5db5b, 0x90e132fc, 0x25e17e90, 0xe697ac65, 
+            0x302fda43, 0xb7064f65, 0xff3caaf3, 0x7cc369c7, 0x789d0230, 
+            0x5d7fe246, 0xcbfd430c, 0xf66fcdee, 0xb3d37457, 0xc24547aa, 
+            0xac23da09, 0xbddb1df4, 0xfdd7d1fb, 0x4b8987b3, 0x3cf260e1, 
+            0x30a24d85, 0x375fb86c, 0xb287e74a, 0xc8f1b360, 0xd70e2779, 
+            0x784fa37b, 0x7477485, 0xa787685e, 0x541fbaf2, 0x49d05a21, 
+            0x46bcecac, 0xbc1c4443, 0x85b0917e, 0x693c3ac2, 0x10a30d08, 
+            0xff192733, 0x61d88012, 0xe2474eaf, 0xcbb899, 0x62b8b3a, 
+            0x5ff1fcdb, 0x20dde01f, 0x94a3ef59, 0x4e75b597, 0xea677d68, 
+            0xf9b9c06b, 0x1b9ee46c, 0xaf1a479a, 0x6e9a7611, 0x9c9284f6, 
+            0x348a296, 0xe3e3b5ab, 0x2ce8b80a, 0xf11a7efc, 0x4bf1a59c, 
+            0x4301a8f0, 0x57c6a80, 0x7ebd7550, 0x1963d609, 0x17064918, 
+            0x9a5e486f, 0x767ada6e, 0xf379835d, 0x817d0eed, 0xc8a9fc9f, 
+            0xd6c0e87d, 0x8dc9a94f, 0xacf56951, 0xdd8bd5ee, 0xdd248898, 
+            0x9e286bc3, 0xced01226, 0xb88ffe3c, 0xea662cad, 0x9ab07c59, 
+            0x13032ac1, 0xbb873d74, 0x32e0776e, 0x89b5f90, 0xe09d5b09, 
+            0x2ea60da1, 0x80cfe80b, 0x21fa1ce2, 0x706dc2f1, 0xd96e10, 
+            0x84f75f04, 0x5fa97783, 0xea2b6877, 0xe9c417ed, 0x807f00ac, 
+            0x802442e, 0x19a90570, 0x72ae16ca, 0x107e4fa1, 0xbb6135e, 
+            0xd775a370, 0x5ff6f941, 0x6a707d8a, 0x32be82f8, 0xe02e92e3, 
+            0xadf9e5ba, 0xc88902f1, 0xb38bd032, 0xdeae3543, 0x9d8b53e4, 
+            0xe138fc67, 0x4565a728, 0xc45115d, 0xab6dfd67, 0xd0d19d8a, 
+            0xb77c9c49, 0xcef31821, 0x683e0485, 0xa35e3a23, 0x12d6a276, 
+            0x62f81a9c, 0xa10fe92, 0x38fb7c97, 0xed7c6de5, 0x21c46edb, 
+            0x3babb813, 0x488587af, 0xaff84a55, 0xe48cce39, 0xe5098cad, 
+            0x9310cf58, 0xece52930, 0xc21bcc91, 0x540108c4, 0x4f44bcdb, 
+            0x898a9365, 0xba470a57, 0xd7f15ff8, 0xe473ab14, 0xe76833ff, 
+            0x89997b1b, 0x9e7f7c54, 0x5673fcd9, 0xd289f943, 0xbdeb72e2, 
+            0x490d3961, 0x4302a415, 0xa7aa0c1, 0xb35bde2f, 0xa6b2690f, 
+            0xd9acf25b, 0x9950b7e, 0x71621b83, 0x653f519c, 0x43a66e3d, 
+            0x1da1d26a, 0xc4db0a37, 0xf1d8513e, 0xd6c9840b, 0xf39e866b, 
+            0x197fe72c, 0x11196229, 0x311007b0, 0x61028494, 0xdf40c6a7, 
+            0x9a54746c, 0xfa75ce2e, 0x3bf7309, 0xc33d7966, 0xeda6af60, 
+            0xa6672387, 0x72411b87, 0x9a211f11, 0x51f56dc7, 0x53a684e0, 
+            0x397541a, 0xe33486f2, 0xb4186699, 0x9bbf1cb2, 0x1f86e0f1, 
+            0xa459fea9, 0xc729c354, 0x9c466f44, 0x10479afe, 0xef53e2d2, 
+            0xb8769c4a, 0x60a7fa28, 0x8b551da9, 0x6b17bf70, 0x4b0a4a73, 
+            0xfcd67534, 0x7f77d788, 0xb422f68f, 0xf8ccf23c, 0x1ad3e613, 
+            0xc33054e4, 0x24c8f64a, 0xa135d8b9, 0x5799da51, 0x4ff771cb, 
+            0x15430a3f, 0x46db7ec8, 0x87d4c88f, 0x694bb4c8, 0xa6a5ff3b, 
+            0x37255c0, 0xac77403c, 0x49a7a6d5, 0x61326bcb, 0xea1febca, 
+            0x19905ce4, 0x6c208616, 0x88601b2b, 0xf5ecddc0, 0xec8475d1, 
+            0xd3853b52, 0x3d21610b, 0x53b3a29c, 0x77575565, 0x5825b57, 
+            0x89ebfb88, 0x8f3c2f00, 0xb32ead1a, 0xd44f8744, 0x63a692b2, 
+            0x69697bae, 0x6b7fe1c9, 0x325b5bf1, 0xb32e0e11, 0x54187523, 
+            0x4501dc49, 0x7eb3aed1, 0x6ab0eb88, 0x6b3e94bf, 0x2c2d293b, 
+            0x8f668ba5, 0x2db81bb2, 0x9e43c4ae, 0xda5b5b13, 0x81763a88, 
+            0x95b90733, 0x642b0bca, 0xdd1dd3a, 0x44d79c88, 0x95e327f, 
+            0x56abfd80, 0xd0f75ce3, 0x730607c6, 0x89a6fd0e, 0x7fc09cd8, 
+            0xb078f466, 0x184ba518, 0xaf1ff8e1, 0x99e25f5f, 0x201e00a3, 
+            0x8ba1ae03, 0x19a9942b, 0x2c1e6198, 0x737f2878, 0xc59a2b1c, 
+            0x7c4f8850, 0xf0409a77, 0x2da9101d, 0xd1aaf46f, 0x291c51af, 
+            0x4d234c8a, 0x68810c4a, 0xfa7e9b84, 0x75b5dcb8, 0x1fe8b9f, 
+            0xd4acb1ef, 0xbb6ff83b, 0x64805089, 0xf6763925, 0xb327edc3, 
+            0xd688dbca, 0x196cf19e, 0x2cf2b856, 0xda34c994, 0x7518948f, 
+            0x3170a8d1, 0x30f86e08, 0x681c6bac, 0x3bfddb0c, 0x5f168b17, 
+            0x4ae631b1, 0x3d105d00, 0x7116b018, 0xad06c9a1, 0x293be0e9, 
+            0x3dd73c5b, 0xbd5a98e8, 0x75536a9f, 0x818d1508, 0x40e9aa2e, 
+            0x68367be3, 0xaf51e5f2, 0x39b8ccc2, 0x6c67fb45, 0xb13771e2, 
+            0xe706549e, 0x42b7fc98, 0xedbd44eb, 0x622d9985, 0x85107f0a, 
+            0xcfc9061b, 0xd9e6d66b, 0xe011bb5e, 0x327eb11e, 0x407ecdd9, 
+            0x3afad29e, 0xab283ffb, 0xbe83d61e, 0xea3e7a46, 0x273b2541, 
+            0xda729e01, 0x81a62472, 0x8359eedb, 0xa4457261, 0x926ad13f, 
+            0xe7e0c4fe, 0x4d1da2d8, 0xa8b3aed0, 0xb658ec23, 0xf7e24a58, 
+            0x5d154e58, 0x9a2bf0ba, 0x2eb455b0, 0x50cb61f3, 0x1e095a2, 
+            0xe1de399f, 0xc71cbd35, 0x7cb90a7e, 0x356e4628, 0x280991f0, 
+            0xd26e64a1, 0xd6c9df5a, 0x3ef127a4, 0xcd2d747b, 0x595f8ee8, 
+            0xba946959, 0xd8ee7838, 0x10f24d0, 0x86b0eaec, 0x1d078587, 
+            0xfbf516ea, 0xdc2a79f8, 0x7015e404, 0xe9efdc2c, 0x16bca751, 
+            0xef7b9df7, 0x9227157f, 0xa31e6f81, 0x83b7e291, 0x7ee5c10b, 
+            0x1a196d7c, 0x23829142, 0x263fe2c2, 0x618461ac, 0xe8681ba5, 
+            0x258b3130, 0xd60cf96a, 0x14fadac6, 0x9d48a438, 0x8bfa6a79, 
+            0x8b920d34, 0x7e98a7fc, 0x88cc57d, 0x5af407f0, 0x15bc4713, 
+            0x23b64b00, 0x37f96d03, 0x5ac72f49, 0x65a9a89, 0x16724cac, 
+            0x503ea2fc, 0x4d548e23, 0x2d92d724, 0xdefe753f, 0x37a36c6a, 
+            0x70708d68, 0xbfe7aba8, 0x1f510c48, 0xb3a995e3, 0x1342df6d, 
+            0x7986ddb9, 0xf4630113, 0xa9f9b81d, 0xb1dca7ae, 0x70915ce7, 
+            0x780e2c35, 0xd1859a18, 0xf92e7d5a, 0xce573f6b, 0x9d79a6e9, 
+            0xbd7f3425, 0xacfd81c7, 0x8429a008, 0xf0da82bb, 0x6a5fb409, 
+            0xc567b073, 0x5371eda, 0xa417042a, 0x9d162579, 0xa8c0eb06, 
+            0xdb7a6342, 0xae0c5575, 0xe0e256a8, 0xa7de78a0, 0x12797538, 
+            0x8e154606, 0x93b23bf, 0x16f4562d, 0x47067058, 0x6db6dc93, 
+            0x33fc94d2, 0xae60549d, 0x4e1b4fcb, 0x7d4aff37, 0x59b050d1, 
+            0xd50b787e, 0x4700ba54, 0xc6848ba2, 0xbd8f6801, 0xd2f62909, 
+            0x289cde1e, 0xc5003778, 0xd973a07d, 0x38a099d8, 0xf8bedbdd, 
+            0x68e9601d, 0x1e86cf6d, 0x2899e89c, 0x229ab04a, 0x45b7a393, 
+            0xef508cd2, 0xa03448ed, 0x29b47253, 0x9f5a48ac, 0x43c89eec, 
+            0x75dfc10, 0x1c2c3184, 0x3ecca1e3, 0x3c5cc91e, 0xcf7cd58b, 
+            0xe014d295, 0xed503a24, 0xe452210e, 0x6fe3ac6f, 0xd99dca00, 
+            0x3ae4ac67, 0xd189afe0, 0xf3ba5df0, 0x84a10e38, 0x4a7b85e4, 
+            0x9d8b4bf7, 0xe83b5b67, 0x90106e3d, 0x534fbf99, 0xce3bcd2e, 
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            final int r = rng.nextInt();
+            Assert.assertEquals(refInt[i], r);
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well1024aTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well1024aTest.java
new file mode 100644
index 0000000000..68a191f41a
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well1024aTest.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well1024aTest {
+    @Test
+    public void testReferenceCode() {
+        final Well1024a rng = new Well1024a(new int[] {
+                740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+                -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000,
+                -595495729,  1047766204,  1875773301, -1637793284,  1379017098,   262792705,   191880010,  -251000180,
+                -1753047622,  -972355720,    90626881,  1644693418,  1503365577,   439653419,  1806361562,  1268823869
+            });
+
+        final int[] refInt = {
+            -1478749726,  -1645579484,  -2075363835,  -2063444174,  -1834148336,  -1769045872,    -40711346,   1717441026,
+            2130656771,    783441285,    570433609,   1560023451,    653233971,   1368672434,    -72036215,   1071111800,
+            933776492,     26114960,     49888778,   1808107515,   1092989296,    754848337,   1336994364,  -1987450448,
+            -691190146,  -1803870839,   1110716866,   1173269113,   -391000050,   2014216908,    180756301,   -382891013,
+            -1908154585,   1580737629,   1080267957,   -125532248,   2094530239,   2132964485,   -438596348,   -760299445,
+            1058181869,   2050816800,  -1534429037,    -62552782,    824524142,   -818590371,  -1857695907,   -684762866,
+            -156556543,   -902759995,   -880795194,  -1387351132,  -1263017515,    448006597,    201038266,   1929826313,
+            -455367306,    672963027,   2000073013,  -1546842042,    446341090,   1001696686,   -779919012,   -347722602,
+            -1342821677,   1639571150,   -835315755,   1505585376,    367004975,  -2035864404,  -1786623553,   1249724913,
+            182435312,   1444514513,   1815333708,   1333772382,    299664001,   -284691169,   2034403374,   1423310887,
+            -1319051884,   1557286441,   -445198266,   -251809030,   1602786123,    944036382,  -1020529634,    258344235,
+            685254367,   1838964943,   -156674528,   -979736602,   -538312836,    234643178,    211152102,   -635498640,
+            -1036733933,  -1347589147,   -565609042,  -1358714165,    508618483,   -786364693,   2071450261,   1206956772,
+            -678931458,    167690617,    144698821,   1719720781,   1575869280,  -1343221123,  -1766469944,    284991647,
+            -717305514,    892653651,  -1368347075,   -615701972,   -730369849,   1360396003,  -1869287623,   1778269052,
+            -586061545,   -699517114,     61530249,  -1860611767,   -519660852,   1841085925,   1555610093,   -399979337,
+            -790345742,    422355947,   2007965433,   2044952550,  -1712164595,   -102915702,   -693865324,  -1894042487,
+            -1285020072,   -215883074,     95833252,   1625818040,  -1055951680,    513067085,   1825246558,   -553461652,
+            -1923361799,  -1869480206,    567232636,  -1751727150,  -1832301399,   -108136455,  -1312244126,     14006795,
+            850221366,   -382389732,  -1741556188,  -1317464467,   1948314870,    753994471,   1028235947,    342494132,
+            -1862256693,    723808794,   -234257642,   1609928369,   -802733456,   1315831915,   1436072885,   1224767136,
+            2144557791,  -1839965886,    224821018,  -1461697757,  -1080386760,   1638573498,  -1188173812,   -325181523,
+            -1750676219,  -1780415850,    698793362,   -908352052,    299746482,   -161660934,   1938166833,    800297005,
+            56640033,  -1214932666,  -1248124842,   1822796868,   1777615881,   -718517774,   1908159957,   1733053281,
+            1851844331,   1283519375,  -1771494956,   2060179999,   1666129209,   1919453531,   -498145770,    697567008,
+            1855487148,  -1587163491,    565216434,  -1477877933,   -925662919,   -806492585,  -1201439047,  -1424534232,
+            1788616523,     69414717,    655893636,  -1175978556,     24787512,   -861550001,    439525754,   -190433174,
+            -383811606,   -508589783,   1441608687,    608181366,   1539467064,    925903122,    697209654,   1878283393,
+            -1967567432,  -1659677763,   -249658183,    847096354,    397741956,   -125334541,  -1286840731,   1016461908,
+            -997968592,   1795331475,   1856856501,  -1716726445,   -582181331,   -887091847,    426964855,   -609219941,
+            -1456232632,   -483467616,   1069260754,    972242064,  -1406786247,   1954194029,     52627891,   1212755081,
+            2117436668,    281073392,    741537353,   -483063506,   1850906286,   -244876135,   -270818140,   1817568823
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937aTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937aTest.java
new file mode 100644
index 0000000000..c86af888e6
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937aTest.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well19937aTest {
+    @Test
+    public void testReferenceCode() {
+        final int[] base = {
+            740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+            -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000,
+            -595495729,  1047766204,  1875773301, -1637793284,  1379017098,   262792705,   191880010,  -251000180,
+            -1753047622,  -972355720,    90626881,  1644693418,  1503365577,   439653419,  1806361562,  1268823869
+        };
+        final int[] init = new int[624];
+        for (int i = 0; i < init.length; ++i) {
+            init[i] = base[i % base.length] + i;
+        }
+
+        final Well19937a rng = new Well19937a(init);
+
+        final int[] refInt = {
+            -612874471,   -354976292,  -1838197125,  -1781560577,    278390997,   1214938280,  -1752615390,   -760835246,  -1712883765,   -241205782,   -145390202,    495649160,   -514388259,  -1271015916,  -1640000013,    849273623,
+            -549729394,  -1206917255,   -545909692,    811925434,  -1665729633,  -1525292882,   1416246482,   -153220826,   1148868872,   -326143196,   1724979062,   1790931148,  -1648679618,   -439051683,    112482777,  -1484051520,
+            -1881272572,  -1270447031,  -1216102401,   1579107248,  -1224395621,   2144411988,   -416216641,  -1529222361,   1628987080,    164445245,   1506928916,    928145916,   1436000427,    862025970,    560077705,  -1887251027,
+            -514360858,   1735094506,    475624879,   1755802355,    295448361,   -155399225,      3972415,   1368201076,   -465126094,  -1622687259,   -246099304,   1798631152,  -1937269102,  -1700560396,   -293352622,   -896632303,
+            -2088933220,   -194382452,   -480218162,  -1618517785,  -1925031481,   -150217434,   1678937261,   2130832364,   -485546678,  -1499224981,   1430390884,  -1895417302,    210514746,   1781140999,  -1940853105,  -1238099647,
+            485922557,   -103223212,    633481679,   -632946979,    695235541,  -1661735272,    277603567,   -958341538,    256982285,   1850270018,   -327388076,   -219053874,   1380560653,  -1221689980,   1335863752,   -545032383,
+            -575291735,  -1295623907,   -140058298,   1063302709,  -1290702617,   -790401546,   -170630961,  -1203114473,   1458063108,  -1212753301,   1546428514,   2112636413,  -1463028928,  -1812598032,   -883529486,   1131084094,
+            62042165,   2135819802,  -1192342739,     98361522,  -1341042205,   -475283063,  -1632033747,   1745196892,    168608689,   -914987039,    274428907,   -881357258,    167940012,  -1975737532,   -903960486,  -1370984244,
+            -589352935,   1783633514,   -570111010,     71495377,    194463285,  -1243905021,  -1398490898,    221691209,    -55728834,   -638916786,   -770622372,  -1911651810,   -295233027,    301467998,   2058638784,    681490183,
+            -1547865078,  -1668135684,   1299261826,   1649468635,    287995017,  -2076844852,   1193468826,   -853948258,    120082777,   1051829542,  -1288514343,   -159456430,    275748820,   -480127107,   -604943233,  -2138088332,
+            1202614819,   1427201263,  -1906344469,  -1230779533,   1690367192,    733159097,    794410312,  -1114452505,  -1601554413,    976747949,   1517787154,   2091780205,   1052078906,   1919282771,   -191013374,   1805397142,
+            736939268,  -1056272823,   -727464316,   -659459005,    797803875,  -1104633884,   1042342081,    -24514837,   1919469940,   1903722546,   -814157872,   1605407665,   -262351256,   -288949635,    729204844,  -1132605534,
+            745453338,    387915035,   1094173337,   2100279147,    156863702,   -257377544,   -719587984,  -1496015613,   1908993744,   2016957554,    918749666,   -135963651,  -1356808639,  -1711185741,   1472589240,   -398100149,
+            628791415,  -1381837652,  -1820702771,   -593586943,  -1456631279,  -1837975351,  -1394249972,   -556916726,    833231177,     43449750,   1029237092,  -2086437337,   -459463076,   -533031784,  -1739648287,  -1374722961,
+            2024908394,   1389678488,      2018558,  -1391707864,   -795935743,    904816957,    836583280,   1766194531,  -1374431014,   -904437876,   2030248636,   -265724199,   2056758426,   -810499837,    887193593,    -77811488,
+            1496312336,  -1874348275,   -456193866,  -2137130942,    868120387,     29025455,  -1999867716,   2001322335,   -579152815,   -390892056,   1592011837,   -306394879,     93636886,   -190879994,   1923358153,    269052141,
+            -396050253,   -987531729,    480350991,   1276744541,  -1445571957,   -957571005,  -2046270221,  -1715395752,   1113585628,  -1782113514,   -697560146,    835320000,   1014320959,  -2119834109,    460056841,  -1464772991,
+            -1282790418,  -2120806165,     86176097,   -731086307,    832497517,  -1876684928,    541008240,    551124479,   -450919132,    647860281,  -2115397586,    979247589,   1095559204,   1927958688,    169497703,   1999579054,
+            2019745038,   1656022059,  -1109662138,    375237154,   1450814436,    919988416,    849761266,   1457057327,   1771166577,  -1639880487,   -852488298,   1767063646,    657295386,   -585561879,    740792583,   1664558308,
+            -654749506,   1109275990,    182597559,   1106789745,  -1806628480,     25948116,   1748374299,    196057325,   -164213209,   1687024594,    782029276,   1879737947,  -1528219611,    412585737,   1190325629,   1985821911,
+            -1272945202,  -1238637137,    465818730,  -1537670961,   1131953615,    905623579,    609183424,   1138422991,   1522974699,    589719061,  -1310894604,    890952933,   -885204790,   -393535694,   1238408670,   1780660354,
+            677803525,  -1121509064,   1553148616,   1109165936,  -1450120385,   1525252521,  -1354897489,   -595402189,  -1274551767,   -869281409,   1788815975,   2020262116,   1124100185,   -400839020,    310574108,   1354413045,
+            -1310514485,   1895732085,    626639054,   1667355357,   2065637178,  -1889009143,   -440157749,   1762849463,  -1693853642,    -56602956,   -930874188,   -398470740,    778356402,  -2113156881,     42854964,   1844399604,
+            -2098310302,  -1812029757,   1441188713,    899579267,   1266994172,   1841370863,   -660740252,    -43254718,   1124500192,   1884907320,    879997211,   1775139845,  -1360112721,   1630490057,    362567879,   1113475029,
+            290319279,  -1209506867,    398146039,   -957742350,   1185761854,   1519676447,   -912689915,  -1117128973,   -305563462,  -1928033363,  -1766324543,   1702753492,   1696951912,  -1895072395,    932663591,   -566548128,
+            991675996,     56529814,    980735023,    718166662,   -650028466,   -886842051,   1857048587,   -569023569,  -1820572202,   -851452711,   -958700452,   -621825633,    -65649888,   -510143183,    761267599,  -1692108035,
+            1729071710,   1623630864,    -53498654,    267235687,    659201413,   1152882627,   -824194574,    356636960,   -502391121,   -538453360,     66115376,  -1633290370,  -1522088932,    268949070,    684499443,   -859474501,
+            1586764345,  -1515639709,    319695602,   -307025150,     69076508,   1050726785,  -1340930110,    552191600,   -207852941,   -273572993,   -539580440,    710343120,   1957076127,  -1107172811,   -561518280,  -1775022699,
+            1978792904,   1935531451,  -2084046304,   -419742902,   -737652926,    614022023,   1676952428,    769892939,  -1092786807,  -1117113223,   -266029995,   -350150999,    207738542,   1964896575,     48805284,   1736500159,
+            551289617,  -1847923501,   1856609505,   2007480480,   -681860219,  -1198106493,   1483591043,   -523895316,  -1814473078,  -1521087404,  -1348859926,   1298056897,   1813789478,    946683654,     79196400,   1766250931,
+            472737685,   1764634332,  -1844726079,   -130619045,   -508713868,  -1762537125,   1010108863,    170107098,   1705386380,  -1139681802,    183739097,   1662699401,   1842694501,   1714633805,     46208876,    616720693,
+            -252553427,   1986302230,   -103130254,   1943225981,    110746655,    553260552,   1588938073,  -1934623163,  -2144781332,  -2086217416,   1941265852,   -781953226,   1216234254,    605543697,   -710872598,   2048636577,
+            -1986927728,  -1007017623,   1243051501,   -614249563,  -2128221291,    581579813,   1173464240,  -1906830937,    261329601,  -1805974103,    769823490,   1858731164,   -561762071,    516417430,  -1221329437,   -825500715,
+            1091364656,   -993658663,  -1475434188,  -1070804384,  -1876492082,    899494424,    683486936,    878807455,     56642807,  -1268202879,   1379172046,  -1386869373,  -1158233876,   1759190552,   1597629789,   1411151497,
+            -1254268471,   1075936979,   -918778269,  -2132675184,    953140888,   1906982077,   1154200766,   -365384600,  -1142488826,    708535121,  -2134869964,  -1531201665,  -2100526761,   1268256467,   2071480803,    193135243,
+            1374158182,    989505347,   -933612202,  -2134839213,  -1302795271,  -2092029041,   1812014826,   2090855917,   2005348528,    606434393,    -60141386,     11156360,    539516285,   -122485034,   -893237911,   -978127424,
+            1509901816,   -451029719,    428544700,  -1622965963,  -1993611605,  -1989324583,   1104111587,   -795138585,   -899552401,  -2110167769,   -234502445,   1586963605,   -503778455,    529261062,    325327284,   -106186403,
+            65369563,  -1475700698,   -228624261,    715975009,   1099352363,  -1796883396,   1376542700,   -308942420,   -344940451,   -395389249,  -1562737166,   1869802677,   1273494710,   2075587668,   -789570273,   1563347596,
+            1142901755,   1676422422,  -1729157809,  -1399423717,  -1814262429,  -1809707284,   1393992342,   -570246212,   1065528749,   -781643849,   1218667301,  -1097949471,   1305629790,    901301039,   -704762030,    360582612,
+            1411910672,   1848068741,   -614500891,   -146889637,   -913903597,    723527277,   -147033328,   -199273155,    734997691,  -2072735286,   2129258691,  -1385074104,    931616624,   1065477319,  -1543474555,   -531410292,
+            -2123119121,  -1538464113,  -1153585193,   1559931968,   -654877011,    879865200,   1489681397,   1998864644,  -1964160144,    163671782,   -858364148,   -323324233,    801208648,    705864113,    436184243,    643773864,
+            2087594507,    134637265,   -749956494,  -1657343972,  -1828172168,    -27357303,  -1145161336,  -1192513644,    216148260,    611393153,    -13752671,   -358631090,  -1211920749,    593572064,    657629904,  -1445961088,
+            -250704995,   1797542707,  -2122311891,   -316774825,   -296303057,   -868002056,    -86697533,   2020588145,   1203427903,  -1371839056,    669531557,  -2031033836,   1323994690,     13703036,    785437772,  -1465821554,
+            -694756014,  -2131068154,  -1745448876,  -1095891733,    936594025,  -1119068454,    855423970,   1705079340,   -905640608,    162297141,   1336619311,   -344353769,    -92608588,  -1080573824,   2002293105,  -2088030765,
+            -1684198727,   -129054718,   -949437132,   -127983221,   -216664110,   1700146143,   -711174649,   1500113839,   1212236226,  -2017364219,  -1263597675,    511929344,   -323998524,  -2021313185,   1803000924,    927670608,
+            336267187,   1244256964,  -1665390108,    991395134,   -251232188,   1267445783,   1547951569,    740269916,   1776431169,   1687220659,    228229817,    271386089,   -682906779,   -438090344,   1190436796,   -744272540,
+            1879221151,   1145200306,  -1730983338,  -1119209309,     90826726,   1567861540,   1638852830,  -1645384932,   1566909531,   1088584561,   1030555565,  -1872052014,    720320695,   -885053674,   -321216789,    739907579,
+            368580703,   -443635520,   1232705619,  -1355949988,  -1047211249,  -1571429448,    599299852,   1036970439,   1513838571,    -51797291,    -26647565,  -1262878942,   -916262582,   1579082269,   -292007383,   1289013866,
+            -1612184284,   1451738668,    448608569,    476432992,  -1229609565,    786372409,    929928149,   -150100614,    448155944,  -1322320576,   -856549627,   1057443268,  -1536809554,    577508258,    584906122,    275295163,
+            -604262071,   -236043234,  -1866434954,  -2072447013,    646132876,    847562546,   -310005953,  -1104162658,    393261203,   -730102354,    440824482,   1654535035,  -1296359745,   1487359328,   -977776604,   -775827779,
+            -1298695106,    519080622,   1697162240,    227873031,   -371123123,   1273702312,  -1710063656,  -2138342344,   1139555478,   1531578907,  -1498880699,   1183507362,   1875307493,  -1649740413,   2135386504,   -962458407,
+            424161768,    504272962,    202204247,   1783466420,   2015579232,   -676642965,   2067456450,    914480415,   -620398841,   1880405399,   1406637142,   1951104977,    633496157,    224861869,    -58659291,    994942775,
+            -479000645,   1421449115,    100168104,    249754169,  -1219011494,   1736303638,    364013694,  -1750035055,   -479217141,   1652913106,  -2109452331,   1633842910,  -1547663337,    936627493,  -1152799743,    896955899,
+            -1407742850,   -523769014,    357161414,    872293304,    744895980,    720829676,   -240843156,   -111779524,   1292836315,  -1792141538,   1946959925,   1181751089,  -1120674052,   1185192575,  -1387002557,   1973209255,
+            -120887476,   -766577735,   -443913073,    786620227,    428564781,   -101232106,   -425959852,    198082021,   1173272226,  -1744840378,  -1621135606,  -1539498583,  -1101274572,     43399711,  -1256764602,   1201920787,
+            2049426139,    846545551,  -2121520873,  -1202939675,   -470425740,    321987390,   1862019060,   -951540342,   -894238318,   -430407175,  -1662746491,    656574776,   1580373777,   -431290218,   1645824323,  -1953526979,
+            -374682356,    474291752,   1071558425,    511038981,   -760598678,   -567797285,  -1176476266,   -268409005,  -2130644484,    -67970563,   1756046948,   1429860462,  -1130984739,   -124916495,  -1544436836,  -1863524031,
+            1024916487,  -1388636482,  -1573205065,    892628956,   1831270021,   1176430590,   1158914682,  -2006787098,  -1228130033,   1516111488,  -1499151347,    470546266,   1642603981,   1425140838,  -1823071475,  -1775267236,
+            -1009380612,    164746986,   1129677098,   1842642579,   -482342932,   -507480364,   1656012309,   1981601761,   -881042120,   -511987083,    342447017,    381192578,    983008095,    741012865,  -1877136350,   -199211983,
+            -452784912,   1929572576,  -1678291139,   -864375281,  -1610561247,  -1936356726,   -749553767,   -865893512,   -567081879,  -1303973729,   -939636958,   -622974563,    428284937,   1049237414,    852280765,     86648946,
+            -1353851401,  -1045422335,    898035731,  -1636093996,  -1083174191,    245046915,   -359768226,  -1028491655,   1051575118,   1774289451,   1839389415,  -1594053468,    736707953,   1873556950,    401186168,   -583669552,
+            -88375334,   2002752071,    264506453,  -1304812107,   -759203942,   -114958524,  -1878903503,    841613720,   1910863820,  -1738114003,    701455920,   1791058048,  -1850960547,   1672292671,   1172188809,    604848896,
+            -1607489375,    305370478,   -948153885,  -1971080100,  -1848966954,   -584538365,     39416319,  -1689119162,    944942598,   1777111075,   1534005553,   2022718432,    -25820385,      3077695,   -315950520,   1859184648,
+            -1397829266,  -1666371809,    858913807,   -610818620,   1554973298,    580023809,  -1662988256,   -408630026,   1316681876,    738204271,    942829881,   -758486983,    780345857,    667165037,  -2086803585,    789741324
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937cTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937cTest.java
new file mode 100644
index 0000000000..ebbf617376
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well19937cTest.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well19937cTest {
+    @Test
+    public void testReferenceCode() {
+        final int[] base = {
+            740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+            -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000,
+            -595495729,  1047766204,  1875773301, -1637793284,  1379017098,   262792705,   191880010,  -251000180,
+            -1753047622,  -972355720,    90626881,  1644693418,  1503365577,   439653419,  1806361562,  1268823869
+        };
+        final int[] init = new int[624];
+        for (int i = 0; i < init.length; ++i) {
+            init[i] = base[i % base.length] + i;
+        }
+
+        final Well19937c rng = new Well19937c(init);
+
+        final int[] refInt = {
+            2128528153,    327121884,    935445371,    -83026433,  -1041143083,   2084595880,  -1073535198,  -1678863790,   -523636021,  -1514837782,   -736786810,   1527711112,  -1051227939,    978703380,    410322163,   1727815703,
+            -648426354,    636056441,   1954420292,     17754810,   -958628705,  -1091307602,   1793078738,  -1680336346,   1792171272,    941973796,  -2066152330,  -1248758068,  -1061211586,    262020189,   1276960217,   -233886784,
+            1767509252,  -1811939255,   -406116097,   -742435920,  -1349799525,    240329556,   -332161345,   1488943143,   -332244280,   2093328957,    674753300,  -1930135556,    257111467,     63793650,  -1964335223,   1315849133,
+            -797349146,   1372022250,  -1451892049,  -1325138957,   -870401239,  -1294317369,     91490879,    386205044,   -704074702,  -1230679067,   1513674392,   -262996240,   1196007314,   1398903796,    803719762,  -1750926831,
+            -1268814180,   1233515404,   1498313934,   -970591257,    611113671,   -261632474,   1834097325,   1709440492,   -150396854,   2120561003,    -62645660,    479080234,   1535125050,   1823378695,  -1129289329,  -1095198399,
+            2092564733,     78836308,   -692015409,   1647147229,  -1847922219,   1838279320,   -848333841,  -1375151778,    920238861,   1512628290,   -749439404,    288851918,   -427218675,    679640964,    425700808,  -2077624511,
+            -1929434455,   -647176419,    650437190,  -1926749131,  -1564744729,    734494454,    108193743,    246246679,    810042628,   1952337771,   1089253730,  -1874275331,   1428419392,   -492969232,   1945270770,   -201265602,
+            -755490251,   -624426214,   -699605715,   -113446478,    809091299,  -1521531511,   1136505389,   -523660964,    132928433,   1926559713,  -1485314325,   -508322506,     46307756,  -1627479740,   -589386406,  -1855555892,
+            584299545,   1272841066,   -597242658,    925134545,   1102566453,   -753335037,     -9523218,  -1778632375,    568963646,    764338254,   1259944540,  -2000124642,   1307414525,   -151384482,    807294400,   1993749511,
+            -15503094,   -709471492,   2104830082,   1387684315,  -1929056119,    224254668,   -733550950,   -889466978,  -1987783335,   -437144026,    995905753,  -1021386158,  -1096313388,  -1014152835,  -1303258241,   1201884788,
+            -1845042397,   1421462511,    980805867,   2143771251,    481226968,   1790544569,    328448328,   1995857639,    -66668269,  -1411421267,   -222586606,    866950765,   -308713926,  -1048350893,    993222402,  -1139265642,
+            -871837948,   1145571913,    381928580,     35386691,   1640961123,  -1192981020,    775971009,    594246635,   1603197812,   -575106766,   2023682000,  -1636301903,   -718093720,  -1666421635,  -2146115988,    320593570,
+            287355418,    454400027,   1112753817,   1751196267,    782077910,  -1478447368,  -1007557264,   -862315517,  -2035355952,   2123515250,   -557641502,  -1789932035,    879640129,     44167603,    791148984,   1382939723,
+            -2135684233,   1825489580,    937345485,  -1839983359,  -1536880111,  -1472578359,   1548052748,  -1471535862,    -14508727,   1509621398,  -2134967452,   -787485401,    815341660,   -327905128,   1028096737,    866906991,
+            -1585990806,    859229080,    234806270,    998518056,  -1897890815,   -900923587,   1179856752,   1529572451,    620486106,   1119836556,   1661285564,   2097404633,  -1437490790,    265306115,   -984880135,   1326751968,
+            1280043536,    680210701,    155786166,   1550973250,   -325781949,   -597789777,     -1939780,   1345275487,   1930450001,    941449704,    669301309,    693651713,   -990721514,    582968326,    976132553,  -1892942099,
+            -1065070157,   -711990993,   -688974833,  -1026091683,   1115346827,  -1305730749,  -1733626381,   -364566696,    -21761572,    -37152746,   -262011730,   1302722752,  -1806313409,   -767072509,    764112137,   1671157377,
+            1837645038,  -1021606421,  -1781898911,   -232127459,   -310742675,  -1818095744,  -1128320656,   -705565953,   -354445532,   -523172807,   -433877202,    131904485,    -64292316,    381829280,    229820263,   1797992622,
+            1359665678,    978481451,   -885267130,  -1415988446,   -356533788,   -961419072,   1938703090,    708344111,    679299953,    744615129,   1328811158,   1257588574,    569216282,   -753296151,  -1519838713,   2016884452,
+            1062684606,   1561736790,   2028643511,  -1353001615,    886376832,   1466953172,   1664783899,   1290079981,    -57483993,  -1176112430,   1634916316,   1976304475,   1374136869,   -648738039,   1058175869,   -909000745,
+            -1526439218,    726626991,   2066596202,     64980943,    -26166577,   -885900005,  -1821546816,  -1103727665,    730606315,  -1324948459,   -696956940,  -1300869403,   1171578314,    797249074,  -1600611618,   1928247682,
+            307164165,  -1482476232,  -1886179640,   1306433392,   1945271359,  -1272113751,  -1285984081,  -2057145549,    795047465,   1262569087,  -1239828121,   1426641636,   -786371495,   2120199316,   1273690652,     74457589,
+            -1033394229,    338952565,     46122958,   1225741533,   2115308090,    678200841,  -1618264885,   -101162569,  -1628976330,  -1232839500,    468709044,   1876019116,     92723122,    233398255,   -554960844,     38494196,
+            -406437278,   2083528643,  -1106878615,   -340722557,  -2123964932,    223183343,    108918116,  -1014629054,   -901344544,   -838896840,  -1908460517,  -1763508731,   -926890833,   1703791049,   -667755577,   1694418389,
+            791641263,   1095689677,   1119202039,  -1419111438,  -2012259010,    188017439,  -1775110395,  -1971099661,  -1688113734,    131472813,   -776304959,   1511388884,   2080864872,  -1733824651,   1992147495,   1119828320,
+            1065336924,  -1357606762,    462963503,   1180719494,   -202678962,   -892646595,    605869323,   1144255663,    878462678,  -1051371303,    872374876,    631322271,   -172600544,  -1552071375,  -1939570033,    151973117,
+            1640861022,    310682640,     34192866,   2057773671,  -2004476027,  -1879238973,    582736114,    900581664,   -427390545,  -1232348528,   -535115984,   1321853054,     69386780,  -1729375922,   1418473715,   1022091451,
+            496799289,    -80757405,  -1903543310,  -1128846846,      1703964,   1984450945,    856753858,   -812919184,    775486323,  -1376056193,    638628840,    314243536,   1030626207,    644050997,     73923896,    362270613,
+            236584904,   1463240891,   -223614432,    435371594,   -751940030,   -124274553,  -1991092884,   1579624267,   1249632649,    157589625,   -345229739,   -366245207,  -1399995986,   1651729983,   1965074340,  -1108970305,
+            1163690769,   1732013523,  -1461252895,    669755552,   -476503675,   -264578685,    -32813949,    288222188,    -25734262,    106040916,   1654395626,   -365148479,   2014455846,  -2040447994,   1351639280,   -919975757,
+            -1970412139,    -47306532,    222377665,   -363434917,  -1091717516,   2090685531,  -1221091649,  -1729649190,  -1239406708,   1064945398,   -105437479,   -419675255,     74701669,    -12862899,   -498269844,   1566898997,
+            -1872838355,   1596887574,    485902962,    469225597,   -881763553,   1307841032,  -1642872487,   1388543045,    379792876,   1095683384,    840780732,   1934378038,   1851278350,  -1359389423,    130868458,   -313448799,
+            -663624816,   1031714153,   -608443411,   -205137499,  -1849464427,   1973593637,   1068741808,  -1420655961,   1188762305,    954044841,   -995454462,  -1818101092,  -1937201943,   -324541290,  -1520603933,    572873173,
+            -554764496,   1051557081,  -1245136076,   -985349536,    329320398,   1787901464,    -37803304,  -1759310177,  -1463492617,  -1861729663,   1251768782,    256937091,   -779036948,  -2049893864,   1256022877,   1228075657,
+            -1550195255,   -611319853,   1190797155,   2047604112,   -576077160,  -1532843331,  -1324899394,   -159729560,   -622525946,  -1080302767,   -236033484,   1895243903,   -410123689,  -1944154157,   -681781021,   1208453003,
+            579595878,   1303914051,   -145607082,   -131567277,  -1917288455,    894217359,   -175688726,  -1585480723,    663691440,  -1140068263,   -641711178,   1596080008,    629197693,    976422358,  -1570451095,    525923776,
+            895046136,   -504151767,   1602553020,  -1233054923,  -1798474837,  -1488857895,   1055782627,    261863143,   1879276655,    488240679,   1910982611,  -1919441259,    370435945,   1265230086,  -1293284428,  -1503576227,
+            2076963035,  -1379628250,   1157098875,   1984461153,  -1947837397,   1705880124,   1453607404,  -1233649748,   1479943773,   -863878721,   -862415630,   -736723275,    940306358,  -1596000684,  -1174889953,   -615723892,
+            -885006597,  -1796723178,   1844159055,   -188942309,   2107251811,  -1675486996,  -1009475178,   -859263556,   -431866963,     -9593673,  -1878920923,   -104853791,  -1535224994,    -69315537,    586690130,  -1292234796,
+            1378749456,   -301873019,   -319297563,   1677205851,    292450579,  -1289441171,   1788113680,   1907606333,   1464711611,  -1372023606,  -1978832445,  -1772259768,   1949124464,   1818322887,  -1138036603,   1249727628,
+            -1474866449,  -1868013169,  -1384567593,    717007936,    954189997,  -1900561040,    738470389,   -158973180,   1732860784,   1936031206,  -1133354740,  -1173166665,   1432976712,    852636081,   1732064691,  -1831788120,
+            1273933579,    455403217,   1988395890,    106493468,    506092152,   -610530423,   1698053512,   1311747476,   1969503012,  -1887461759,   1613543073,    903200334,   -737865837,    325656800,  -1234001200,   1492148864,
+            2009861533,   -368262605,   1091338541,   2076108119,   -961392337,   1835877112,    316250307,   -853333391,  -2125443777,    815363504,   -798707803,   -158146540,    690786114,   -530775684,   1203556940,   1611485582,
+            -1661412270,    -53184506,   2126287444,   -232222229,   1559486057,    283532250,   1202760418,    932144172,   1082594656,   -570104011,    413509167,   -995027177,   -996477516,      -540544,   -745537167,   -712135469,
+            -996294983,   -592787198,   1889840948,   1314628747,   -394266926,   -682316577,    456447239,   1728806063,   -396279614,    -43387643,   1915717013,   -861574144,  -1078710588,   -561401249,   1111464540,     63643984,
+            -1693870413,   -968369980,  -1053148188,    708799038,   1883537988,    373371671,   -156410415,  -1596483236,  -1846890431,    888692915,  -1025632583,  -1666477591,   -343066267,  -2059058792,    641501628,  -1744347292,
+            1648632991,   1743540146,   2020952406,    164014499,    990508262,   1706408228,  -1236471842,   -347116260,   1843634523,    827255665,    300519853,  -1265974830,   -547247177,   -583064554,  -1995437077,    689210107,
+            -93151393,    835365056,   1706367315,  -1605902756,    200954895,    431093688,   -277573364,   -928486713,   -552221973,    145432789,   1128919795,   1675095586,   1930359882,   1215849501,  -1447770583,    657776490,
+            1885869860,  -1629237204,   -868897479,  -1258169760,   1828140195,   -883850439,    463933909,   -347361158,   1478116648,    801176896,  -1501915899,   1017335748,  -1654508882,    123994786,   1588785290,    791166651,
+            -1523108535,    340411166,   -496474762,  -1189711141,     -7392628,   2045171250,  -1245366209,    834787230,  -1346883181,   2034209454,    737043362,    898803323,   1983089087,  -1845404320,      9585188,  -1180608323,
+            1665100606,   1949474222,   -211115008,   1151308295,  -2132174259,    913126312,  -2085061672,   1419864120,  -1134542954,    -53833957,   -246913211,    468382370,  -1759479323,   1136686211,   1307012488,  -2036299559,
+            -1346099736,    314743106,  -1683101865,   -947151948,   -234529696,  -2103334293,   -279256894,     -1484257,  -1053953017,   1801205399,    941594454,   -874119215,   -672865187,    762284205,  -1494975451,    486607927,
+            -898264389,  -1711861093,   -212572760,   2106484281,  -1610786470,   1352525590,   -837779586,   1568282001,   -593019125,  -1146260782,  -1595879979,   -640781858,   1107692311,   1547132709,  -1928385535,  -2057772805,
+            634887038,    329772618,    942136006,   -864405576,    501883884,   1537141484,  -1180626836,   1123055420,   1090885851,    421662750,   2033111605,   1710917425,  -1118058244,     74321279,    257328195,  -1199940697,
+            208625996,   -442341447,    808119183,   1166827075,   1177417517,  -1856155370,  -1464837036,    -60624923,  -1306220638,    -91104698,  -1434621430,    548899241,     37351476,   1478278431,  -1255061434,    248470035,
+            -104642597,  -1865169521,   1418373655,  -1660810523,  -2129015436,    154612798,    276575732,   1930338442,    179503250,   -929294855,    -39452027,  -1377657544,   1442322193,   1137511318,   -432158653,   -984801987,
+            743099148,  -1118893528,   -904123623,  -1273146363,  -1884800406,   -803169061,   1254123158,   -484252077,    317646844,    404246525,  -1230293916,   1121445742,    -19657507,    652967153,  -1055406692,   -468950719,
+            -1493532921,  -1447624258,  -1369679689,  -1517000228,   -145853307,   1518006526,   1591195514,  -1475557146,   -909722097,   2103182976,   -406830579,  -2124025254,  -1804819507,  -1357512858,    567321869,    409048156,
+            567805180,   1749009386,   1762759722,  -1770324077,   1271140844,    468219092,    955792405,   1911965665,   1876314424,   -718200715,  -1278883927,   1392281730,   -120519585,    851473793,    245054754,    -33369039,
+            -284877584,   -479534880,   -212346563,   -122017521,  -1461429983,   1331007370,   1788621721,   1739036536,   1446350953,  -1985448033,    685528610,  -1386434659,   1368233993,   2021786790,   1596478397,  -1716635278,
+            -2011083017,    171876097,   -311529197,    687812052,    377000657,  -1055547517,  -1499047842,  -1818434951,   -120863666,     33888043,  -1387509273,   -541540700,   1162597745,  -1331415338,   1931708792,   -850270000,
+            663845594,   1536495943,   -322924971,  -1380272203,    261190298,   -204874428,  -2104974031,    883819928,    155808204,  -1454446035,   1323388464,  -1696505728,   1549800285,   1018150463,  -1327715703,  -1582480640,
+            1013659809,  -1820360082,   1666498787,   1406120540,   -196541482,   1248470531,  -1250433281,    836375878,    177646854,  -1927020253,   2145878321,    689712096,   -596605921,    348283199,   1916993096,    481356808,
+            -339687826,   1219340319,    718895887,  -2007521340,  -1859185806,   2042164737,    -58146784,    742449142,   1930754708,    780832111,    715056441,  -1393886151,     -8150527,   -599607443,   -537300865,  -1212516084
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497aTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497aTest.java
new file mode 100644
index 0000000000..fa86f0beac
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497aTest.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well44497aTest {
+    @Test
+    public void testReferenceCode() {
+        final int[] base = {
+            740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+            -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000,
+            -595495729,  1047766204,  1875773301, -1637793284,  1379017098,   262792705,   191880010,  -251000180,
+            -1753047622,  -972355720,    90626881,  1644693418,  1503365577,   439653419,  1806361562,  1268823869
+        };
+        final int[] init = new int[1391];
+        for (int i = 0; i < init.length; ++i) {
+            init[i] = base[i % base.length] + i;
+        }
+
+        final Well44497a rng = new Well44497a(init);
+
+        final int[] refInt = {
+            -1464956854,  -1524360321,    986845646,   -182050548,   -818943186,  -1744848370,   1392434650,   -182648505,  -2026593838,   1254866610,   -410459761,  -1392048371,   -968730026,   1485793687,   -728749746,   -112685463,
+            275126404,  -1101838984,   1193096287,    443511615,   -510869213,    549869992,   1974458428,  -1217587840,   -335835016,  -2048974745,   1066947099,   -611611187,   1978925459,    688164478,   -463344808,     56995910,
+            699288809,    606392470,    117418673,   1948706703,   -485598135,    385841705,   1725261146,   -919553921,     70643668,   2128611684,   1720197347,    738706713,   1162026860,   -611442152,   1469145601,   2051653750,
+            609067755,  -1971782890,   -971114565,    776260144,   1619791127,  -1547233838,   1502505722,    913168193,   1761269649,     81782996,     62251540,   1519079156,   1239007000,    489633356,   -800433470,  -2107278046,
+            495320431,    269446836,  -2013306553,   1074614697,   1645125348,    584369930,   -405429577,   1211134012,  -2060113546,     -2047824,   -443978800,    271218497,  -1002185964,   1519315874,   -695096464,    -79101601,
+            -1521653608,    192426133,   1159511202,  -1354494985,   -477280535,    583522228,   -661741458,  -1251175621,   -369487281,  -2015449518,  -2102058930,   -645264919,   -925270025,  -1674575999,   1363844609,   -831732660,
+            -1668989157,  -1861246633,     83763283,  -1056074975,   -519054258,  -1546386261,   1691674654,   -885968657,  -1189571815,   2095154843,   1686743191,  -1859471265,   -261593938,   1721982136,   -491120252,   -949699153,
+            642525852,  -2005306625,  -1004765905,    742736856,   1653443876,    788423835,   1536155740,    879514143,  -1510757104,    115238646,     28600662,   1485490803,   1272460710,    523153480,   -766782926,   1332478031,
+            528775440,    302965264,  -2046891123,   1108139271,   1611601128,    550846467,   -439082190,   1244786747,    941120547,    -35568474,   1756370964,    304870369,   1902684028,   -408710726,   1673189520,   1180987663,
+            -1488131864,    158973303,    154514890,  -1387953397,   1453732833,  -1342263302,   -628153633,      4710424,    619931109,    721411332,  -2135645486,   1688696681,   -891749588,  -1641122924,   1397432310,   -865254619,
+            -1635468227,  -1827787970,  -1311416657,  -1022618057,   1411688086,  -1579840139,   -637954674,   2115653281,  -1155985079,  -1043532593,   -374286955,  -1825883832,   -227940643,   1688394137,   -524577925,   -983222470,
+            -1955769926,    626525757,  -2009760930,  -1855453635,   -676923169,    754966926,   -291202391,  -2126042921,  -1477304277,  -1409345382,  -1264640578,   -441993991,    -17611930,  -1576809974,   2137694350,   1299022733,
+            -762509116,  -1087399293,    819303572,    -14571174,   -719035481,  -1644675278,   1492736905,    -15038081,    974773023,   1087127339,   1790024863,  -1493135734,   1936273291,   -442361741,   1639666948,   1147532756,
+            174955156,  -1537685747,    187972574,    275303083,   1420277149,  -1375787574,   1873043153,     38164241,    653451946,    687758113,    899667071,   1722219976,   2146668333,    587401069,    -26582672,   2034645447,
+            1401801794,   1043291001,  -1277898614,   2116116828,   1445274301,    150534325,    469242183,   -937704471,    171074779,   -204638071,   1269913689,   -771734064,    -12280461,  -1182158859,   1704390140,   -263303749,
+            -848503723,  -1822849148,   -634064465,   1130988864,  -1515750310,   -908815400,   1487214333,    994482967,    853103628,   1711185413,   1520342001,   1067859186,   1693632130,   -603831333,    292236742,   -800655385,
+            -1467184928,    221125007,  -1697377800,   1293953144,   1730537111,   1073329737,    519625212,    689636032,   1127394154,  -1496469136,  -1214585810,    822152197,  -1572579275,   -527866383,   -996792678,  -2058452887,
+            -1133767559,    576275042,   1579109209,   -295089371,   1502267384,   -724281876,   -911879875,   1131096177,    333026744,   1238706603,   1067340063,   -745697708,   -973992204,   1560446744,   -664017057,   -616056490,
+            1099714049,    674159948,    383625825,   1411443110,   1862818263,  -1896254899,   1322476914,   -719144734,  -1540101945,    988154902,    781856577,   2013381051,  -2059071359,   -142073207,     60252832,   2052050421,
+            -666391497,    376633738,   1663011481,  -1706886481,  -1870003191,   1003819645,    898131216,    778824906,   -656875645,  -1730811011,  -1751653787,   2056079904,    231977636,   1831419220,   -465545074,  -1505266471,
+            1034419975,   -133864043,   1876779821,   1879792902,   -100100435,   -959264741,   -472668436,    203584096,    -46980157,  -1478047098,   -979669209,    809008494,   1279644171,   2055793632,   1385672419,  -1756428826,
+            -1790481031,  -2089665073,  -1608595011,    457322987,   1267418945,    -19541848,   -796352273,  -1049973752,     30940894,   -539710199,  -1097391703,   -779353550,  -1328320498,   -735447662,   -918513196,   1516945649,
+            1218919237,   -251287485,   1826366637,    353082340,    889839220,    399638904,  -1462573609,   -618450466,   1429903706,   2095548034,   1486594475,  -1053248922,     74346322,   -357998703,   1790710495,   -146359619,
+            1581657509,   -797737661,   -920778913,    608399665,    646679359,   1861775150,  -1014371223,    476735306,  -1577737028,    383018939,   1234592859,    344770283,   -472763155,    187217985,   1245828866,   1936329359,
+            61243025,  -1979390025,    903671173,    302699505,  -1677126111,  -1194113496,    835857595,    706998946,     70931462,   1374113464,  -1464459699,   -231081598,   1366205112,    396990527,  -1615015619,   -968458597,
+            457632575,     24361353,  -1120685182,   2101590608,   1654666456,  -1208442054,    579414359,   1078056578,    217408674,  -1560683025,    815178420,   1219326466,    450032327,    774403237,     54597342,   -664057229,
+            447132403,     50603973,    435640301,  -1224073863,  -1339908037,   1775470944,  -1378119263,  -1375189988,  -1287971162,     29816317,  -1313418882,  -1824967031,    443540716,     11064217,  -1463969487,   1967601549,
+            124474667,   1230898256,  -1741455555,    561643750,    933295231,   -923145874,    245538199,    289478386,    200552280,   -268887021,  -1598221376,   1236123270,    318325803,    773964550,    191670680,    158043961,
+            -762639146,   -416703928,   -721969492,   1664330785,   -584949010,   1509045840,  -2066001147,   1728613092,  -1103375821,  -1262079070,  -2034789427,   -418216342,   -546365126,   1235751589,   1639799329,   2085089663,
+            -697590049,  -2007054256,   -147701903,    209371702,  -1868450893,   1241065116,   1537364837,  -1035970557,    318040217,    150492098,   1841159805,   -491979749,  -1275490577,  -1759443566,   -697538216,  -1589624976,
+            -678703557,   -189067001,   1539472677,  -1396089831,    271512148,    180483983,    483714313,    703861378,   2122114992,   -600097045,    522009268,    160429181,   -744428886,   1541223403,  -1211039718,  -1167643980,
+            1551471162,   -816207368,  -1429258613,   1350901561,   1934120609,   -961643277,   -214772286,  -2128270227,  -1561239720,   1493926966,   1376671007,     94966082,    221846150,   -164351411,    -51309876,    497148497,
+            1233668542,    266257753,   -773473851,    953946385,    420815294,  -1390653175,   1834391782,      4704447,   -891751440,   -744104272,  -1082756642,   1431640408,  -1912055536,   -159789461,   -704946016,   1956368139,
+            642279822,   -374415338,   1562655802,   -272964020,   1071498305,    667364168,  -1546405154,    341389690,   1360662999,    377696332,   -437020076,  -1668574556,   1242655350,   -756555890,    645954261,   1914624235,
+            2134904445,   -247737098,    143667521,    -17668806,   1804148531,    414247300,   1030053929,  -1595215075,    887532426,    553113691,   1173830167,   -303724353,   -280418143,  -1143962122,  -1898518451,     36464746,
+            1189572700,  -1549967582,   1093341440,   -452303819,   -731023001,   1111173883,   1678013973,   -836458212,   -842956392,    212774049,   -845621791,    966282353,   -823130040,    700410571,    619075141,   -304785045,
+            -1816233676,  -1789653997,   -166914694,    690663021,   -669570330,   1098624444,   -987380984,    452844935,  -1089825546,   1221160503,   1217375341,    512281644,  -1106887134,   1665404458,  -1462594714,   -207498587,
+            -789271490,   -723469709,    512055365,   1445951882,   1692473633,   -996873493,   1445046730,    993087194,  -1666188562,   -897427329,   1008869698,   1236029718,   1499207233,   1704947182,  -1815799281,    686399988,
+            -475436580,   1588892458,    884859588,   -471913926,   -487416631,   1323960741,  -1257612174,   -468909314,  -1866654496,  -1417895838,   1707647971,    997140465,  -1358794225,   1929422460,   -605622778,  -1587468566,
+            469149623,   1121515927,    748484204,   1201983830,  -1906623591,     76398473,    261109068,   -796025669,  -1964466661,   1739898262,   -756850622,   1581369453,   1484675811,    484136467,   -705983890,  -1357931714,
+            548520423,    741992908,   1017931838,  -2078503520,   2097871343,    569233897,    -91903627,   1864053450,   -876129714,    336670307,  -1950420274,   -872316480,   -662220291,    275724295,    703565412,   1334248646,
+            -217559198,   1044090753,    743502488,  -1518545318,     20614180,   -768582053,    976522354,    -25129962,   -983639284,     71722595,   -119236393,    368844119,   -795808244,    696073964,   1379765302,    235083623,
+            666280330,  -1313689346,   -643870520,    534522699,   -250414377,  -1239276164,    159264592,  -1119503518,   1168161619,  -1366518946,  -1335653301,    248092140,   1390152547,   2051602724,  -1023547981,  -1479782621,
+            -1785785862,   1609789158,   -919124123,   1703200068,   -852553456,   1573706142,   -376011685,    305068766,  -1231775451,  -1536883494,   -125122369,   -896696968,    852651567,   -458154391,    747781704,   1173040469,
+            -1569200836,    312506093,  -1680530410,    117086271,    794587661,  -1231003908,  -1048955503,   2119305423,   1636729108,   -522378372,   1627421730,    545077470,  -1683264872,   1486496559,  -1793064672,   1908368749,
+            -1226052295,   1399248776,   -588193954,  -1289386125,    534647065,   2126245059,   -238362987,  -1244573058,  -1571832269,  -2052693379,   1494767731,   -528668449,   -980826491,   -151282847,  -1468523556,   1876349941,
+            -301654558,   1467960576,   -741720848,   -612158589,     92376910,    987915105,   1037689578,    793773489,  -1387669541,    349490139,    564784004,  -1161242130,    619703053,   2063233129,    190888106,     81845991,
+            -1482466066,    283234313,    114355492,  -1879406787,  -1283370924,  -1378903370,   -730141747,   1570738286,   -281348873,   2131743196,    795654462,   -497365688,    437612465,   1928618254,   1433118279,  -1801292119,
+            -2059248836,   -221673230,    163637697,   -411319468,    244353317,    786753178,    489172932,    464627154,   1258915212,   -229028334,   -994675463,   1931657329,   1784181437,    -97111947,   1728952452,  -1329133577,
+            -1606156362,   1341196121,   1679632329,   -796545286,  -1021125869,   1427825468,   -214986389,    250791528,   1029777000,     90661677,    602529506,   2068040879,   1483801763,      2332097,   -457467017,    672399614,
+            1542769193,   1781253216,  -1967165705,  -2052227925,  -1248173215,  -1676554121,    292413596,    209649573,   1750689340,   1946874730,   -832845570,   1774178655,   -450175610,   -431901779,    613330756,   1969434259,
+            1251099237,  -1320908513,    -50659188,    273178515,   -296290724,   1195998469,   1329813722,    759419114,   1003396150,   -274557619,   -548886303,  -2055397788,   -766678640,   -464045978,  -1835907569,   -169406709,
+            820751456,   1778613303,  -1582073956,  -1728391771,  -2075389498,  -1606584632,  -1702107251,    -15724560,     45610235,  -1967510298,   -671487775,  -1841110041,   -913365944,    869680052,   -798103472,  -1564096927,
+            -918899909,   -810066882,    428829752,  -1413487973,   -844240890,   1343914280,   -689285374,   1827745702,   -799686631,   1696465705,   -726159000,  -1381157526,   1649221296,   1791106481,  -1872852642,   -485685063,
+            1534949133,  -1611901907,   -581776031,    242740701,   -382394666,    668419384,    388297992,    748818886,    713804061,  -1783774172,  -1823401590,  -1009098384,   2071462929,   1154475522,   1309810666,  -1734475040,
+            1212095416,    988288210,  -1457428115,   1699730041,  -1804729443,  -1922824494,   1000076038,   -226555981,    131425181,  -1071582828,    357680377,   1574190179,    996651958,    965704429,    -47651768,    243931978,
+            808955117,   -652323633,    544967309,  -1199510217,    702795379,    997685748,   1593927308,   2119371055,   1451401230,    -41992913,   2033816081,  -1030495962,   1764010175,    457470691,  -2001190141,   -373358035,
+            -1950331268,  -1291674220,    642934467,  -1825725718,  -1555687487,   1664472129,    -24722338,   1899539596,     78519318,   1662555805,   1744711308,  -2142888582,  -1597853572,    118030659,   1596713428,    404304267,
+            -1350880388,    648702031,   1185458591,   1798138033,    819516445,  -1466759682,   -751277607,   -879817426,  -1931050435,   1465603177,  -1402344216,    768491239,  -1404853657,  -1915685264,  -1845859847,    313163207,
+            1239598382,   1988767047,   -555152530,  -1925665864,   -182399255,  -1392390808,     64861291,   -511875035,   1879964459,    918905020,   -840773616,    459610189,  -1522352470,  -1821396360,    977274705,    -60616465,
+            -1846727880,   1208592937,   -515359427,   1127607806,   -395032287,    491869604,   2053794084,    568321750,   1597027438,   1355613070,  -2069482724,   1899252555,    844726247,   -625112193,   1146099491,  -1037855139,
+            1203928737,   1875686061,    994108281,   1471873396,   2026801570,      4941446,  -1066074241,   -983738686,   2037429697,   -836521112,   -633388883,   1221918725,   2137035208,   -369891832,    372509548,   -110916409,
+            80517712,   -658056946,    727893428,  -1353651002,   -475459562,   -291323023,   1059377566,    591801919,   1018232602,   -348255729,   1863827426,    246032476,  -1026132864,  -1356383176,  -1224690998,    262442981,
+            1257773681,  -1738604660,     77131430,  -1320261233,     -2342727,  -1817187590,  -1883997191,   1367221809,  -1863623746,  -1132606249,    149024763,  -1228275128,   -578030399,    356914163,   2109691820,   -880313621
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497bTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497bTest.java
new file mode 100644
index 0000000000..b850be56e2
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well44497bTest.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well44497bTest {
+    @Test
+    public void testReferenceCode() {
+        final int[] base = {
+            740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+            -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000,
+            -595495729,  1047766204,  1875773301, -1637793284,  1379017098,   262792705,   191880010,  -251000180,
+            -1753047622,  -972355720,    90626881,  1644693418,  1503365577,   439653419,  1806361562,  1268823869
+        };
+        final int[] init = new int[1391];
+        for (int i = 0; i < init.length; ++i) {
+            init[i] = base[i % base.length] + i;
+        }
+
+        final Well44497b rng = new Well44497b(init);
+
+        final int[] refInt = {
+            -102003638,  -1254584449,    836441550,   1949705484,    653000494,   1579400718,    699652570,   -140738233,   1164288466,    419933874,    366568847,    780567309,   1867405910,   -350557801,   -964350642,  -1323492759,
+            191502468,    398676344,   1568976991,   1005053759,    199053603,     31083944,     74697788,  -1343941248,  -1205631880,  -1637961625,    361813531,  -1706096179,   -403340909,   1666226814,  -2034962600,   1237102662,
+            -1833248535,   1584255126,   1295661745,  -1753848945,   1208145993,    930278953,   -733716134,    192752767,   1692463060,   1727273316,   2122952931,   -809025255,   -992081044,   -895539688,   -419372543,  -1835478922,
+            2089629419,   1646590742,  -1261083717,  -1005462992,   1619627287,  -1437723182,   1619689210,   1319393089,  -1816963183,   -150214444,   -513482220,   1897815796,  -1861960936,  -1766444468,   2034653890,    585657634,
+            1867016559,    696942260,  -1536237241,   -527055447,  -1554805020,  -1063992566,   1024799415,   1782080572,  -1884276362,    129028272,   1427925968,  -1154222271,  -1383146732,  -1580532830,  -1907049616,   -104299169,
+            -1780913000,  -2090815339,  -1789809502,  -1521443849,   1226625769,   1126090676,  -2117094290,   -449575109,   -218982833,   -695554478,     35923022,   1386126825,    -95031305,   -168657023,    436674049,  -1137917876,
+            -2045134053,  -1025629865,    133144659,     64226081,  -1966942130,    700813483,    344058910,   -910646033,   -212789479,    740360859,  -1269028713,   1517763679,   -664178514,   -683718472,    -71951996,     86583727,
+            -1235669348,  -1426987265,   -166598353,    214190040,  -1436967644,    233824411,    710927452,  -1939548641,   -433607408,  -1075939594,  -1549702826,  -1310827917,   -640604762,   -696863672,  -1282162126,   -546470833,
+            -1516734192,   -513809904,   -458526835,    708926727,   -476643096,  -2108375037,     -2870478,  -1460116421,    436587555,   -948939610,   1891375124,   1944216545,    959034236,  -1267038790,  -1695098736,   1853748495,
+            1594424552,   1270099319,   1139585482,   1837434635,   -709909535,   -457524230,   -887118113,   -241703912,  -1888225819,   -751575804,   1122280146,   1194255209,    949350188,    892826516,   -791212042,   -151203035,
+            -859297731,  -1979039938,    323603119,  -1022065097,  -1804294506,   -385802891,  -2127523442,   -720380255,  -1315859127,    999649487,    335041941,  -1732821688,  -1833409827,    535715225,  -1285355653,   1206723386,
+            -1141619270,    759796285,  -1599504546,  -1988521411,   1056668895,   -852564594,   1056509609,  -1831687977,    754168875,  -1301144422,    922880446,  -1502666503,   -949791898,  -1043870198,  -1136941938,  -1649670259,
+            1342769348,   1692605059,   -132279148,  -1108038310,    -14355545,  -1611387086,   1651826569,    877600127,   1356160799,   -759125205,  -1300490081,   -414938486,   -201479285,   1958709363,   1513313540,  -1396836908,
+            1352702612,   1142506253,     52969438,   -365142357,  -1619054179,  -1368514102,   1470750417,  -1420830959,   -843909462,  -1679570143,   1447444607,    234551752,  -1507452115,  -1433234579,   -680890000,   -497305145,
+            860408898,    263376761,   1537070218,   -592353956,   1587852989,   1756653749,  -2081320633,  -1547020311,    723771611,   -883819383,   1899879513,   -268417584,   1058606451,   1665941493,  -1630340612,   -614737477,
+            891313237,   1368950660,  -1166187089,    296322368,  -1908770726,  -2120378408,   1245479677,   1879710487,  -1705947124,   1018371589,  -1715010575,  -1096078094,  -1749891454,   2130888667,    318647750,    554592231,
+            -489121568,  -1809605233,  -1697905160,   -953926536,  -2013960553,   -148884919,   1822739964,  -1466301760,    141999978,   1946526064,   1323036718,    864390149,  -2141665227,   1510602225,   1468408474,   1277039721,
+            -1368096647,    180965986,   2140852057,   -688071899,    819713016,   -154385940,  -1182972611,   1257224305,   1392607672,   1364245931,  -1768434401,    323522132,   -555278604,    474186520,  -1178901665,  -2137343658,
+            1636421121,   1398987084,   1276656225,   1013316006,   -955917865,  -1537149363,   -179145358,    342862050,   1172728007,    736300054,  -1114656959,  -1831840325,  -1882353535,   -442915191,  -1206488416,  -1818534411,
+            25312311,   2100297098,  -1562767719,   1762553519,  -1853194231,  -1152612739,  -2020055792,   -809572150,    848584579,   -535789699,   1817604709,   1343773216,   -602234204,   1739930964,   -833790834,    501215449,
+            -730104057,   1217783189,   -681773267,   -611951354,    978387629,  -1516811237,    974303980,  -1389665696,   2091099075,   -727528826,   2116026151,    271935854,    613242379,  -2100429856,    190004963,  -1629612570,
+            -1362888327,    175094223,   -917873219,  -2008308245,   -401946815,    504218792,  -1966525201,      4106248,    164895454,    226502921,    655865257,   -610528718,    189428750,   1055978898,     17603028,    591024369,
+            1127922501,  -1546639293,   1994174637,   -724136988,   -673919372,  -1665002120,   -612145705,   -793102882,  -1904763558,    757565058,  -2091240021,  -2123324826,  -1518702766,   -802889839,   -223045921,  -1509216579,
+            1195556261,   2079259971,   -903969953,  -1781800655,   1834950463,   -956531922,  -1152550807,  -1116052662,   -348802884,  -1395330117,    -91758501,    -19115285,   1926930669,  -1015793599,    545904386,   1617858191,
+            716963473,   1917089719,   -980914811,   -212646927,  -1634695647,  -1857924568,  -1462257477,   1273750178,   1060328454,   -361604424,    867932749,    451213698,    405780152,   1165233215,   1877230909,   2103114395,
+            1644330815,   1252998537,   1961603970,  -1533101488,   1790456024,    -38226118,  -1306744489,    713676418,  -1535871838,   1378109935,   -338185548,   1647669762,   -477465913,    203482277,  -1949756706,   -503326093,
+           -638704909,    320186309,  -1435581459,    907446649,    -77384645,    537368928,   -335347295,  -1912061924,    547819174,   -225549827,   1089455486,    463516297,   -240127764,    -85895271,   2053179697,   -287394931,
+            921878827,   -933362608,  -1178670275,  -1200942874,   -672571265,    574422382,   1441734039,  -1814493454,    165751640,   -176907245,  -1170992192,  -2123252090,  -1435971541,   1591853830,   -885477992,   -792847559,
+            1359875286,   1038392904,  -2027255124,    687291425,   -165513490,   1391146576,  -1387080955,    794663652,   -807189965,    667820962,   -545384499,  -1371368854,   -689031878,   1504805541,   -752825823,  -1920047745,
+            -1884874017,   -350566320,   -197152911,   -181743050,   -798415949,   -915922276,   1790690149,   -363997181,   1923116185,  -1326427198,  -1621079427,  -1997440997,   1798118127,  -2053110382,   -159879848,  -1286787216,
+            1046436411,   1832030471,   -389092059,     71686169,    -76025260,   1914270607,   1854169353,    872157826,  -1774323792,   -575165717,  -1919931724,   2051498109,  -1176174934,   -883578901,  -1253047270,  -1310573900,
+            245466682,  -1784824328,  -1319912821,   1377340217,   1364313761,   -408687373,    142333378,  -1952335763,  -1703126184,    316314678,   2030555423,    488640834,  -1783293306,   2116925005,   -428337460,    -42966447,
+            -476226114,   -325172903,  -1690748475,    852791569,     26490302,     85251337,  -1374975770,   -376283969,    982639600,    595119792,    376403422,   1574509912,  -1509664496,  -1901241749,    -59019104,    358566667,
+            341667214,    184541206,   -550950854,  -1897143732,   1595753537,  -1236127928,   2014297822,  -2033179270,   -669806121,  -1927596980,   1010735700,   -581795164,   1922398838,  -1456743538,  -1633813803,    323177707,
+            2002098813,  -2099067658,    277393729,   -671911622,   -384463053,   2028267908,    367391785,   1270052637,   -172839030,   -650486693,   -831800809,  -1255138113,   -137512799,   1904317942,     -8229811,    707361898,
+            -276859812,     50417442,   1487081728,   1577776181,   1994451303,   1237303035,   -602016235,  -1905218276,  -1895725672,   1172978849,    801129953,  -1819485071,   -587985848,  -2010386741,  -1645226427,   -850866837,
+            816998708,    357665811,   1955856762,   1617902189,  -1013761306,    146782652,    904185608,   -500146809,   2085848310,   1917713975,  -1823786899,   1994184748,    789196322,   1766857258,   1770685286,     58213029,
+            -1699628994,    346827379,  -1274423227,     -5079670,   -193099487,   1020296939,  -1795904054,  -1951053094,    -43782418,   -375403393,   1026761026,   -207269610,   1364563521,   1578793454,    457809423,   -534138380,
+            -1052938788,  -1897101526,   1449976516,   2052800058,  -1145169719,   1476303269,    370625650,   -325249282,      2165984,   1631432802,   1032336355,  -1292978191,  -1810172401,    725725820,  -1162678778,    702624490,
+            1387673527,    981825943,   -556408212,  -1108487850,  -1782136935,   1582316425,  -1752682164,    307235003,   1386486299,  -1343636074,   1936875586,  -1265279891,   -345847069,    928241171,    239050350,   1859358526,
+            -664776217,   -823267892,    346651710,   -867656288,  -1907921425,   1362445801,    541145461,   -192727350,   1649366606,    244694627,   -488180018,    214008256,   2032125437,  -1678591993,   -264593820,   1309017286,
+            -652451998,   1845366657,   -703990120,   -550186406,   -630285276,   1782372955,   1650564210,  -1127904234,  -1407983860,  -1119422877,  -1565976361,  -1913545385,    549841420,  -1410323732,  -1964467146,    228296551,
+            -421026422,   1929094398,   -266906424,    264810315,  -2008122665,  -1088278148,    141242192,   1871293282,    234634067,   1724159838,   1638271051,   -837713428,   -657941661,    168093988,    708605363,  -1881612509,
+            -1810496006,   -193495322,   1889982309,  -2050702012,   -693694192,  -1249780322,    718733403,    -76349730,   -188217051,    920912090,  -1814078273,   2013358456,  -1948845521,   -198407575,  -1248904632,   1182772565,
+            1236791612,  -1297489171,  -1958468586,   1437011007,    390460941,    113068796,   1247982993,   2102889679,  -1563524844,   -128174212,   -754095070,  -1461699362,    943615640,  -1013270737,    221253920,   1514140013,
+            1596946745,    674222984,    616356702,   1811224435,  -1764322023,  -1653707581,  -1702404459,    390678142,   -209506765,  -1398278531,   -117061517,   1625861343,    659048069,  -1490678943,    846536668,    210715637,
+            1855458786,   1727745280,   1086729456,   1109111683,   -985298098,  -1813777567,   -954599702,  -1522494031,   1166103515,   -191868965,  -1048777852,   -661271058,   1161457421,   1509090409,   -919753558,   -155431193,
+            -1774302994,   -366390263,   2090138916,   -693431491,  -1693888428,   1846774454,    925855693,    474383470,    208889079,    382195164,   -283005634,  -2095134392,    579927985,   1390765326,  -1766119865,    900457129,
+            -1503703236,    974952690,   -107714111,    381338452,   1187256613,   -860560742,    524103620,   1499506130,    197755276,   -790802926,   -406920967,  -1972219791,   -665721155,   -113336203,   1037154436,  -1185441801,
+            -745541706,   -546274471,   1988928457,  -1975403782,  -1167172845,    777779004,  -1560935061,   -140258712,  -1243598232,  -1394149587,   -785002782,    311842991,  -1025469277,   -605350463,  -1251538057,    537203966,
+            597777961,  -1845767072,  -1556349193,  -1491015509,  -1935936671,   2093498487,   1908270236,   -315396187,   1356362300,  -2025658518,    630119678,    276190559,    510123398,  -1266145363,   -170152124,   -151540077,
+            -477900187,   1895894303,   1870333068,  -1169891437,    353366620,   2111175941,   1691245786,   1318765802,    -90993610,    921309517,    118241505,    367005284,   1624861072,   2010785894,    865255951,   1717799691,
+            -80757664,   -644944841,    136999836,   -341686875,  -1908076090,  -1968934200,   -346397811,   -184213520,   -511811333,  -2118173466,  -1086490399,   1795322855,   -635494328,    415716276,    851044432,   -904636831,
+            -1972230341,    -64337858,    571177016,   1248814747,  -1351030778,    457872680,   1843549954,   1718960038,    815088665,   1812961065,    360686952,  -1356586646,   1657802416,   1776192945,   -786723490,   -342254407,
+            -236653811,    771014701,    906386785,   -308057635,   1907957462,    206000440,    -42143480,    900403654,   -917549795,   -310520796,  -1713627766,   2061136240,   -377977839,    891282946,   -821163030,    328143584,
+            1503793080,    551621842,  -2086273683,  -2070526343,     91195293,  -1654389038,  -1035734266,   -336619597,  -1220221027,  -1468468844,   2105626873,   -841372573,   -122707018,  -2013073683,    494461000,  -2054807734,
+            -67946259,   1914163407,   1941835405,  -1027244745,   -768123277,    419129844,   -275750260,   -171533009,     97756174,    -17651409,  -1578102255,    995291430,  -1587462977,    692904675,    951632643,   1882101293,
+            -1546298756,   2018418068,  -1790777661,   1542305514,  -1437624383,    469587009,  -1647853474,  -1318279028,    497228822,    726733469,   1693133452,  -2091185798,   -209017732,    126386499,   1056958932,  -2105494133,
+            754067324,     96463951,     83701151,   1101658289,   1485852701,    553783806,   1898769881,  -1072031442,   1438062141,   1992540265,   1152252136,   1019391719,   -175951257,     -6691216,    989789689,    968359367,
+            -1330392786,   1704963399,   -998432914,   -948060232,  -1921688855,   -975840920,   1360273515,   -872810459,     12676907,  -1908050756,    883609616,     65641549,   -200365398,   1386653304,  -1203665071,   1878689007,
+            426262328,    315375145,   1900325181,    703658494,   -765404895,   1070155172,   1399748900,   -804264234,  -1619419026,   1347225486,    230635292,   1093717835,     14020583,  -2107039873,   -968325341,  -1679158691,
+            1959784097,   1065690797,   1090615161,   1311445364,    865835426,    870016646,    574122879,   1842697922,  -1289210431,  -1914001560,   1672467629,   -900366331,  -1524066872,    136503816,  -1910431892,  -1431958329,
+            -830367152,  -1316233970,   -801974860,   1560669382,    -81784810,    401822577,   -949103202,    943897151,   -722666726,    -96825841,  -1092898846,    230567004,    -70355840,  -1398069192,   -312953142,   1475420133,
+            -622491023,   1661205388,    -19071322,      6024591,   1473041593,   2053897978,  -1346768903,   1484764721,  -1552461890,   1287146711,   1613069307,    902497864,  -1504480063,    375292915,   -836353108,   2047602411
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source32/Well512aTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well512aTest.java
new file mode 100644
index 0000000000..a1eb7cacc2
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source32/Well512aTest.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source32;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Well512aTest {
+    @Test
+    public void testReferenceCode() {
+        final Well512a rng = new Well512a(new int[] {
+                740849862,  1202665156,  -199039369,  -259008301,  -291878969, -1164428990, -1565918811,   491009864,
+                -1883086670,  1383450241,  1244617256,   689006653, -1576746370, -1307940314,  1421489086,  1742094000
+            });
+
+        final int[] refInt = {
+            1634813289,   1876773016,   -973836208,  -2130023652,  -1045460084,  -1834384857,   1691032973,    609714289,
+            2033920362,    555915483,      6680992,   1958127415,   1866469645,  -1471336965,   2049178762,   -192324811,
+            -2056050066,    810879705,   1405046309,   -781317118,   1012782311,  -1045081032,    728377508,   1473511660,
+            290489070,    326666761,   2018299979,  -1876688058,   1239968501,   1464625040,   2025151042,   -101397407,
+            1387902041,    210959839,   1366359326,   -476473433,    153180037,  -1607631523,   -506743495,     17888738,
+            313865008,   -340504498,    586684079,   1243699375,    753162229,   -646761694,   -739189655,   -210120185,
+            -1856358726,   -628255542,  -1812798197,   1416288088,   1077967722,   -846846208,   1379850409,   -580183344,
+            -1858959,    210859778,    295841424,   1492774865,  -1415543680,   -344870570,  -1942779197,   1549510646,
+            -389544849,    314254218,     11784988,  -1311757368,   1719514841,   -764610517,   1296788970,   -994707050,
+            783854563,    422654144,    387639079,   1219688425,   2144352572,   -834212874,  -1036550358,    935909479,
+            -568610842,   1327498837,   -588933178,   1910065754,    -40851599,   -182063170,   1302731458,    541311559,
+            -1647345522,    805224371,  -1721196679,   1518507830,   -952689880,   -433276260,    509675254,   -777259954,
+            1277810106,    284054896,    936042202,   2036836351,   1956412426,  -1186403024,    287795400,   2135311211,
+            720485927,   1500695024,   -281656583,  -1277937322,  -1628968482,   1242814831,  -2030700974,   1473867890,
+            440813549,  -1357033971,     28384076,   1602731216,   -641465746,   -609054347,    635938444,   1472898176,
+            1476894555,   -747974186,  -1590337055,   -884242108,   -389736197,  -2066984505,   1087103272,  -1236446290,
+            31657463,   1835715432,   -468439078,  -2132633204,   -434609235,    258308151,   1851926761,  -1630139159,
+            -1344617241,   1969204215,    619463174,   -174392624,    207475487,  -1619828078,   1327980298,    -83968178,
+            445951782,  -1786230541,      6279288,   -580982231,   1550645552,   2006533941,    275746007,    455676647,
+            2019637349,   1115547704,  -1313120106,   -516213449,     73752461,  -1382448112,    398589620,   1319888048,
+            -1595572334,   1566934536,  -1735685764,  -1509545339,   1458173912,   -549395819,   -618827040,   1516624531,
+            1900757187,  -1454200688,    965524719,    488355065,  -1869294316,   -810641680,  -2059428251,   1454656431,
+            1329120541,   -232185900,   -994996943,   1855980910,   -452077812,   1565630611,    759842266,   1241435187,
+            -1390456063,   1946400597,  -2032319771,    683667881,    905911106,   1983310786,    120010546,    526018017,
+            -1946881912,    205004987,  -1307250612,   2130980818,   2052864161,    189839787,   1789478047,    406168885,
+            -1145186347,      8507675,   1277188815,   1492619042,   2009819675,  -1627411598,   -851016743,  -1828234956,
+            1962622506,   2140398255,    236935165,   -337237772,   1263419111,    516775236,   -335741025,   1391328225,
+            455979249,  -1457534664,   -657606241,    485648133,   1762116343,   1194889600,    817834937,    321150162,
+            131159182,    290277758,  -1876924740,  -1770401129,   1291602973,  -1003642974,  -1580211929,   1520422021,
+            -399171579,    -24315308,    453805396,   -659197747,   -205656847,    466526550,   1444397201,   1178091401,
+            -1157268826,   -602394028,  -1370668795,   1614896435,   1699071659,   1864753793,   1888518358,  -1721244514,
+            1812776767,    668822227,   -297283057,   2130183333,  -1169618692,    912860240,  -2028253096,   1244694278
+        };
+
+        for (int i = 0; i < refInt.length; ++i) {
+            Assert.assertEquals(refInt[i], rng.nextInt());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64Test.java b/src/test/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64Test.java
new file mode 100644
index 0000000000..dd3ffca1fe
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source64/MersenneTwister64Test.java
@@ -0,0 +1,239 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class MersenneTwister64Test {
+    @Test
+    public void testMakotoNishimura() {
+        final MersenneTwister64 rng = new MersenneTwister64(new long[] { 0x12345L, 0x23456L, 0x34567L, 0x45678L });
+
+        /*
+         * Data from
+         *   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt19937-64.out.txt
+         * converted to hexadecimal.
+         */
+        final long[] refLong = {
+            0x64d79b552a559d7fL, 0x44a572665a6ee240L, 0xeb2bf6dc3d72135cL, 0xe3836981f9f82ea0L, 0x43a38212350ee392L, 
+            0xce77502bffcacf8bL, 0x5d8a82d90126f0e7L, 0xc0510c6f402c1e3cL, 0x48d895bf8b69f77bL, 0x8d9fbb371f1de07fL, 
+            0x1126b97be8c91ce2L, 0xf05e1c9dc2674be2L, 0xe4d5327a12874c1eL, 0x7c1951ea43a7500dL, 0xbba2bbfbecbc239aL, 
+            0xc5704350b17f0215L, 0x823a67c5f88337e7L, 0xd9bf140bfeb4c1a9L, 0x9fbe3cfcd1f08059L, 0xdc29309412e352b9L, 
+            0x5a0ff7908b1b3c57L, 0x46f39cb43b126c55L, 0x9648168491f3b126L, 0xdd3e72538fd39a1cL, 0xd65a3663fc9b0898L, 
+            0x421ee7823c2af2ebL, 0xcba3a4b69b6ed152L, 0x348399b7d2b8428L, 0xbdb750bf00c34a38L, 0xcf36d95eae514f52L, 
+            0x7b9231d5308d7534L, 0xb225e28cfc5aa663L, 0xa833f6d5c72448a4L, 0xdaa565f5815de899L, 0x4b051d1e4cc78eb8L, 
+            0x97fcd1b4d342e575L, 0xef6a48be001729c7L, 0x3982f1fa31afeab8L, 0xfdc570ba2fe979fbL, 0xb57697121dfdfe93L, 
+            0x96524e209b767c29L, 0x55aad0ebca994043L, 0xb22687b88856b63eL, 0xb313b667a4d999d6L, 0x7c7fa1bd6fd7deaL, 
+            0xee9f4c15c57e92aL, 0xc5fb71b8f4bf5f56L, 0xa251f93a4b335492L, 0xb9bad7f9e5b07befL, 0x62fc9ac35ccde7aaL, 
+            0x933792382b0218a3L, 0x7d497d2f7a15eaf8L, 0xb2f0624214f522a2L, 0xd9895bbb810ec3d6L, 0x22d91b683f251121L, 
+            0xc8fe9a347247affdL, 0x3462898a2ae7b001L, 0x468bc3a10a34890cL, 0x84ff6ce56552b185L, 0xed95ff232c511188L, 
+            0x4869be47a8137c83L, 0x934606951e6fcd81L, 0x1ab5e8e453bde710L, 0x6386b61b30fa1157L, 0x97f3a778e242d0cfL, 
+            0xd870d281b293af3dL, 0xc3a5f903a836fafdL, 0x88bd6a24d49cd77L, 0x4e38ddc2719162a5L, 0xf48286b4f22cad94L, 
+            0x80f6f650c337557L, 0x5e6daf6aae1ad59L, 0x7450f7229f336762L, 0xb75b43fb4c81784aL, 0xebd37a514f153148L, 
+            0xd4b3a39e0bc52c7L, 0x562f36fae610a2e1L, 0xe0e413e555bd736L, 0xd452549efe08402dL, 0xf2e2ff7be2c75e21L, 
+            0xf2385606c18aaf0dL, 0xdb609b507d8c6b8bL, 0x74ac5663c6c4f45bL, 0xd84c9a356858060L, 0x19d5b3643bc029b6L, 
+            0xdd8131e97ffc842L, 0xfa7303606bfffc05L, 0xf98c6d63ff48a16eL, 0x34df46aa2d610767L, 0x83490ef054537f7eL, 
+            0xe071f833e55ebfe6L, 0xd4b94537ed4a6aaL, 0x3cf85e4e333966fdL, 0xba15364649384016L, 0xc0e6bd623ca72405L, 
+            0xdae6e879b8eab74aL, 0xe4a41f17e70d3e0aL, 0x56e10c00dd580f70L, 0xa9a66bb41781d872L, 0x58e42dbdffe21573L, 
+            0x69450e1ce9674e6aL, 0x47fe345a350aa605L, 0xac958aa80455a5a4L, 0xbc1abca3fbeeb2f3L, 0x8f760d9228900a4L, 
+            0x9e1eb8a2dfec4387L, 0xe91bd1321f5fdc89L, 0xda11a24c514b9dc7L, 0xb1f63d976e0e639bL, 0x41c11098f6123861L, 
+            0x3d7736979f978f68L, 0x820685b38c926beL, 0xe8c3dcab075b112L, 0x5e37299d89089ba4L, 0xa1f735eb8235b32fL, 
+            0x2289d719e7b146eeL, 0x1c9c9d0284d96719L, 0x5f8b358546775be8L, 0x317e34c009a07a39L, 0xb16b073eb0ee0a19L, 
+            0x423b36fd459f2a66L, 0x5f45053666f3f84fL, 0x63e7074f03c73d92L, 0x22080cf23288e895L, 0xba4e71bf61dac16fL, 
+            0x9643b3707db2cfb5L, 0x98e2db6c665e7178L, 0xcbc57de0ef3eabb6L, 0x6239a2197582a8a8L, 0xf2ae968e55fda13dL, 
+            0x36e7ac11d1f3a617L, 0x508f0acb609bd756L, 0x6f42d435193a1ac2L, 0x2df2cab9d65e0b00L, 0x4584c1fde5f1ad55L, 
+            0x602c500bdc8317c2L, 0xc80d5b04f6337337L, 0x98abcf971892a773L, 0x5d33cf557e6c4475L, 0x5b5a78be74ccd40L, 
+            0x3ec2cce5290785f4L, 0x2eef1e9c4b36828bL, 0xdd274241a0ce8c55L, 0x3c4cb919b35c221cL, 0xc1fd68d779db9923L, 
+            0x7ff345b4eb7f3639L, 0x804d5881b2eefef3L, 0xa15f9c2826cb34dbL, 0x64822b68adefa772L, 0x761e92f8d279850dL, 
+            0xa5d049ab1061dba3L, 0x5f46fb02d10d2219L, 0xc1cdaa5f9ca79b19L, 0xdd713a74701ebe60L, 0x6b626ec963951798L, 
+            0x1d3ec8d78b96d16dL, 0xdb885d52960e7f34L, 0xe39849cf3ea178f8L, 0xc1e37acdf807130bL, 0x3645880ebf333913L, 
+            0x3af81a7bec346c22L, 0x871c563e94324804L, 0xac55fb5e2817db4cL, 0x35b04c42565ebe2L, 0x5094cafab11cbc3aL, 
+            0x94d40a57481346b5L, 0xf91a8492df723e3L, 0x126a70b84f779accL, 0x4409e9a5d5c3f133L, 0xb1655339864151efL, 
+            0x6564e506d11e9de1L, 0xd9a06f7b8860b488L, 0xd493e410b68b6c6L, 0x4e6fbf4b3b985a07L, 0x71c1b0ba9e52a2deL, 
+            0x5775784ad3cb99d9L, 0xbab84cec312107a6L, 0xd9066f5ccd59cf9eL, 0x8c656651dbb3ed84L, 0xa7448d0059484568L, 
+            0x2819237e5e8cb03aL, 0xd57eaf5239931b4bL, 0x6cd436fd5f7c1e73L, 0xf03b845f2a584931L, 0x8847b9f1f2d55b7aL, 
+            0xd49a38f8e59db8faL, 0xd5052cc47685dbfaL, 0x91e060fb399ecf2cL, 0x5748fbea12dd2869L, 0xd0cee85adb889226L, 
+            0xa35e9dfa5a64f56aL, 0x3118398bd0e3cbf0L, 0x5e650b9a3cb34308L, 0xf575ccbebf49b91cL, 0xb3f8dd73257c80e2L, 
+            0x13d7954e8294819bL, 0x90b57ccd00f1591dL, 0xa8b13ef52ca7e284L, 0xe482d24e5b239833L, 0xb0648475f2b4d63fL, 
+            0x847e8fc889e2389bL, 0xa8b501ee1fc59ba6L, 0x29702f6acba4379eL, 0xfaba9600f3d2cd0fL, 0x52ed7d9f45c6b578L, 
+            0xa02b167546d6e2d0L, 0x9a41cb166618a390L, 0x83d464d7349d9f3aL, 0x805485c9d2c70c6cL, 0x332f7ce3e077ecceL, 
+            0x1ead372c068ebb04L, 0xd6866c5b3b5eb82cL, 0x5b057c64bda94a33L, 0x11e1388f59653c66L, 0xffd2aca771c0abb8L, 
+            0x2fabdd0e8e8ba606L, 0xe974ffd57219e5e6L, 0x2b4e5c1e5f98e506L, 0xe7819b2cb44db4c0L, 0x6cbd78c408376520L, 
+            0x244285f39307f083L, 0xd152927f3a3af853L, 0x5b799885a8ba66e3L, 0x9300da64ea1a0644L, 0x67399bf8688a0cabL, 
+            0x47c301af4a94bb2L, 0x6750ecdf35c8471bL, 0x7598ae5c876d4080L, 0x269e0cf307467534L, 0x2ef4d8dcaedbc549L, 
+            0x2c6983c911c958afL, 0xb2fd7c07ae0bfa60L, 0x3220a56d67450e80L, 0x7385883420eb9f69L, 0xdb1fd2951f15b047L, 
+            0xf08b35df55977bcL, 0x42939b9f2e58127eL, 0x4d1d77e72414aa9aL, 0xfd8137f8b59bd084L, 0x167cc7f46a511504L, 
+            0x263de0c6b50290dL, 0x2a1c2feb488ffab8L, 0x1194815038360d85L, 0x36374630d0ecb4e8L, 0x609d38e22c59a974L, 
+            0xee23867f7c9b5f54L, 0x40e53a7804b0ef15L, 0x8f287f1a3be6e458L, 0xba7334b0f0af9e75L, 0x9f003e8e0e9c6c0L, 
+            0xc02dd0d35c42bc56L, 0x63dca83acd6be04aL, 0x9617b58a79fdd826L, 0x563d25e6f891bb33L, 0xe3c3d3f3f6d58588L, 
+            0x359977baa315b1b4L, 0xdf431301d9e6bc5L, 0x4074bb10d0003ca5L, 0xf440159140f2b453L, 0x3a6cc6e14820f5e2L, 
+            0x4b352bdacf3a37c4L, 0x9ef3b8df89ea4c29L, 0x8a1b2495a1414892L, 0x670b7f423f78b7c9L, 0x7513c7ccf6ee3c3aL, 
+            0x9ba96cb53c24408bL, 0x3316c3dc4ec859f0L, 0x501337e1a7f1e218L, 0x9a1544a6029c1eb5L, 0x9b43b15859c3e96fL, 
+            0x58011e22698bd4bL, 0x589b8eaea60d54a4L, 0x68ccb8c6cd7ec24dL, 0xe55beb5896455705L, 0xba6069cf90a8f1e2L, 
+            0x896a18c3eb90a6d6L, 0x870d3d80ae0b9323L, 0x48688d8b457f501bL, 0x8f1a8c1b84b3ba62L, 0xd1b7b64dc136f6b3L, 
+            0x3c6a7025428547e9L, 0x199bcc50a190fb6fL, 0xa5de0eed4bda0979L, 0x31041667821cddb5L, 0xe9df34e2678fb4e3L, 
+            0xdd7222eaee54e524L, 0xaae6488b26c7af56L, 0xe8a560dbbd2eb6b3L, 0xe37c99a7f5defceaL, 0x1572be8d78f3afacL, 
+            0xf69ffb64131633aeL, 0xa837ae34963616fbL, 0xaf0a9f03d137c170L, 0xd3e02b464018a48L, 0x11753aea03bb0ecdL, 
+            0x32d9cca610dceb34L, 0x2622bb6a6e7a11e3L, 0xdc99a44c515ec8b3L, 0xd7d720ad0a770b28L, 0xe322f742d6d051c2L, 
+            0x745f2b6e3ea9cd2bL, 0x951f21478e6b9662L, 0x227f21d8c0713385L, 0xcb729235e6876eeL, 0xd323b857d9721a53L, 
+            0xb2f5f599eb743346L, 0xefb30babe65a283L, 0x94c1190da321d470L, 0x117c63209fba9efeL, 0x738cf92baa4bc2cdL, 
+            0xc3bdd29b33277165L, 0xd78a2fab38f6dc46L, 0x35c44aafdefb91e2L, 0x321e26bf321fb60bL, 0x12db436288b37172L, 
+            0x158a2d49e51c261aL, 0xc9202ac8ba71c873L, 0xd02fa93dc97cc7b7L, 0x1f8bd11b747e901eL, 0xf7a17b2f74aa321cL, 
+            0x284d02d7552a3e90L, 0xeb86a8251533c574L, 0xb3fd774eaf4e77f8L, 0x31df2951c3ff37b1L, 0x86e38546195a69e7L, 
+            0x6737aaf165a1389aL, 0x2e2e925079feee0fL, 0xf7bd5a988596c1bbL, 0xccf835db6a10d2dfL, 0x6f42700f37c94701L, 
+            0xa6e86f7ba2779a5cL, 0xa43a4f7036d1ec2L, 0xd798bd6d52ad26daL, 0x218f6912af38b818L, 0xd48684f266f2e186L, 
+            0x8f675048b7b012e5L, 0xe5e469aac68eaf1dL, 0xe2740035697de79eL, 0xc22d6bd6d08baf1dL, 0x341774636bdc8f41L, 
+            0x7dfc6b73f7ba322bL, 0x7566343607bb525bL, 0xae94d116ccf1e74bL, 0x6ca1b59934cc2697L, 0x4c2fb1c45b749cedL, 
+            0x989999bbdd2ec893L, 0xcc4e27afa81bc8a8L, 0x6ddadf15ebf85830L, 0x38fa9cb2ce72bc16L, 0xacdaffe39db4bbdaL, 
+            0xbcc4682ebd095d93L, 0x483f539d354559adL, 0x45de92e997e2915cL, 0x7ec5c881c5344a55L, 0x9d1844fffa091545L, 
+            0xcd9b08d4dcda27baL, 0x1f7495a5f36c34ceL, 0x4f0fc9647d99afd7L, 0x5ac375ec59321cf2L, 0x5c07ce6df7e1d9a2L, 
+            0x49f211880d688b4cL, 0xf85fdd8ccad0867aL, 0x7d510164d8f197a8L, 0xc64108c5732cfa0eL, 0xb262d660d3a2c648L, 
+            0xd5d5614571dd2efaL, 0xec1a6d0dd5d5391L, 0xbf07d939d2535f02L, 0x35bce3021e51045L, 0x423ae115ec99d154L, 
+            0x22ea1d3abd893838L, 0x517fc1107eaa6a83L, 0xc5967cdf353aeac6L, 0x96ae2c3dff65ce6L, 0xab1b908b97dc911bL, 
+            0xf3d84c286f22611cL, 0x256823815030d8a2L, 0x3bd9b119887342e4L, 0x59926f3401f437d4L, 0x74edf41038d3986fL, 
+            0xe2b35bf615038253L, 0x4d09740a6b44db89L, 0xa37edaf089c0eeabL, 0x8263ba2c23e2d62dL, 0x8784aff57d390c3cL, 
+            0xfb49ab0635d66c3aL, 0xdeba73c2562bff1cL, 0xe2e6bf8cb6e29717L, 0xe70431c63d86e46L, 0x20d717e16aae6010L, 
+            0x31af57cdcf2cd36L, 0xd55fbeef1c5357feL, 0xd361d871f4e393feL, 0xb3416e718d32d214L, 0x7b351f93f909fc00L, 
+            0x16916de7b96a26bdL, 0x4fec1248b5dedb65L, 0xfae1aa9a62bfa096L, 0x92e7910a6b0084a9L, 0xd12bba8672e8aaa9L, 
+            0x316558d69efc8f6bL, 0xb0dde29eb96fee87L, 0x2125a2be5bf67eb3L, 0x5905903f46531fe4L, 0x2a9927e8175ff60fL, 
+            0x794376f2bb5d6d96L, 0xfa9f65d2b4848b12L, 0x2b92665a263a5091L, 0xabcaccfab8464c65L, 0x5b2fb2a46d1a0bdL, 
+            0xa879920d28c0d54cL, 0x50394088a8ea4953L, 0x61b0c87f0084129dL, 0x29ebcd1078d6e2b0L, 0x2440c652f6bacf89L, 
+            0xbd74d596cf4c8eb1L, 0xe4b009e5c334766bL, 0x7db26843cf72cb8L, 0x4171d5edd5468876L, 0x608d5c2c348c143cL, 
+            0xa19e0a2b81da6eb5L, 0xb65a7be9354c1390L, 0xf4f4c437cb9bb324L, 0xfc24806650c823bdL, 0x4c2331521e7f2966L, 
+            0x54f66e42eb73bafeL, 0xf06c11f3d2fe29aeL, 0x8ba8d0f28cbb0fcbL, 0xf3617850d1ae7976L, 0x96463b47cd9a7286L, 
+            0x8edc2133b35c3779L, 0xae43f70f181d9371L, 0xe7628d75c9a3c2e7L, 0x978499ba4193b333L, 0x99bb4bf79b0a46c1L, 
+            0x4c52676d7e4d0a58L, 0x2064ee3910693deeL, 0xfc43514d16633997L, 0x1bc1741ce05c4cceL, 0x6e9588d40f3396f6L, 
+            0x146fe816bb3a3708L, 0x2b3db8ee05eefa87L, 0x6ec21a91189ec0c0L, 0xa8a907b34108faf1L, 0x708b80912235684fL, 
+            0x2bc8ba70edfe680cL, 0x4d118826481266efL, 0x8f93a3a5de887175L, 0x3308e9133a950fe3L, 0x939ed8b0d7e91f87L, 
+            0x666beee64002b6b0L, 0xc8f129ec69ce7811L, 0xd57593c68ce93ea0L, 0x2d6a3e66edcc862L, 0xbe1d00d16a2271a6L, 
+            0x34fbeaf95e0c673fL, 0x9845ab59483a0e86L, 0x257d47d5abf88962L, 0x28af39f39319545bL, 0xe3fce03abd8171eeL, 
+            0xa4c5f606dccc96f1L, 0x4d414846267c4962L, 0x6ccf77f81d9dbf70L, 0x947bf43c729a71ecL, 0xfd656c39c4fa824cL, 
+            0x8f652cf2d1e04fd6L, 0x8cb11929a65b6aeeL, 0x94948f16a8064daL, 0x7434e703a4d03d5fL, 0x9361d3f63af4aa35L, 
+            0xa998c1eeec3fb422L, 0x51eb94754b5992a2L, 0x6e109c0347ef6979L, 0xe3c9738d67c582e2L, 0x9c735e3857ec57bfL, 
+            0xbe6415659e12c64bL, 0x73924584e31b9099L, 0x8f676821e60b0945L, 0x5614e3a695d5289dL, 0x7ecd448787517ebaL, 
+            0xc96db02038dbaf5bL, 0x69299ed774fa6c8L, 0xb4ace5a8ea16ac8L, 0xbf2f4f23a6c92295L, 0x90bdc4f1e931656cL, 
+            0x7cd5b0b95ac34d3aL, 0x2032bc59d3dc1710L, 0x702c1a0cd5609379L, 0x609d33abc01ff3feL, 0x8ae5d8f283b2748bL, 
+            0x2cf3778fa7eaae1dL, 0xe8a0d7b1919df9e3L, 0xe487894f6d602a0bL, 0x929858549609626aL, 0x46e540cd86bf46e7L, 
+            0xd1daf4382128d9eaL, 0xc47239c06b22ef75L, 0x8b7aad8ffea1b991L, 0xd6c1d2e315273fa0L, 0x2fda11cd74177e6bL, 
+            0x333cb0a145919fd7L, 0x5970b31a49f37b16L, 0x7890bc68793bb959L, 0x2a060f45a1719347L, 0xeb298f0264bf379dL, 
+            0xd7c4fd7921707400L, 0x374635e7713ed165L, 0xc60c008df0296d05L, 0xbf13739a8d3c7dbbL, 0xbfb945ef1cf94d1dL, 
+            0x75fe953c3a3a8315L, 0x9f83064f4150c02L, 0x6784a3b452055343L, 0x73ed26d185738f51L, 0x6c59094e8c998390L, 
+            0xeade93e19d60d4b5L, 0x8cf7cc8e62bc869dL, 0x22f85626f7f69298L, 0x6679c449ac22edc0L, 0x7017d0003e897435L, 
+            0x308fc450a6c62bf8L, 0x2578b45bc6f34cabL, 0xcbb936c9d253db39L, 0xc4e70e5bbc5e002cL, 0x29db6985be6c9459L, 
+            0x96afe876f5f6250cL, 0x829f766f138f95e6L, 0x4369632017c8fa0dL, 0xda90c817ca890a2L, 0x38d160dd675e2376L, 
+            0x20df15ad986408eaL, 0xd192623c3d9b3f41L, 0xd846f79123baf4aaL, 0x6cb058a0edfbf056L, 0x1b192f0be8dc77a7L, 
+            0x3a11b3dfcc81a441L, 0xe914410093ad7767L, 0x3126257e578bdf60L, 0xd5d5e470410cb6eaL, 0x4e1bf5d4209248aeL, 
+            0xe1e4c2924f35192eL, 0xac9944825cb7ef5eL, 0x8d2cbe6996eb3475L, 0x1bc05d2a079592d7L, 0x564a9f06755e71f3L, 
+            0x9bb767d68e9f2537L, 0xe4b045acf13978a2L, 0x4b7519cb9028ac83L, 0x9df655284198b85cL, 0xdc32ab4d421a2b61L, 
+            0x4c5d7f5323c1960cL, 0xe4273ff318f5c7b3L, 0xd73ef5ea88a3e99eL, 0xda2ffb6a863c850bL, 0x9555a4144e05ad82L, 
+            0x950104dc15092ebfL, 0x39d121a61f19dbfeL, 0xc6804e29d60d7814L, 0x7e98bec5ba17d58bL, 0x8b2c6b0e6c3b749aL, 
+            0x301a07c84aaccdbL, 0x93dee719932225a3L, 0x381611a50bac0ae1L, 0x572a8816f6e407b4L, 0x420efe85aa75232L, 
+            0xc1f53f78b9ffcf4dL, 0xbeda53bc95b96ec3L, 0x9f357114059c8eabL, 0xe38239260b584150L, 0xccbca17f4eed2ad0L, 
+            0x1528080b61f54198L, 0x5b8cdc4c40d49f30L, 0x1617db48eb6640d0L, 0x6fed27f88a516c99L, 0x37056e05b4724179L, 
+            0xec7bc122da9538d8L, 0x9fbfe01ca2c0fd57L, 0x2fc96b31dccafd9fL, 0xe26a72009daa1249L, 0xe9fb2e3998d16a25L, 
+            0x4a87dc39d24133aeL, 0xd5340e98fde806deL, 0x272b62b5dd0d7fe3L, 0xca4625581bf9dbe1L, 0x8677af77de374a90L, 
+            0x27dbec9e28f857edL, 0xb4aefc44d036612aL, 0xcf2e8ebdb0f6bb11L, 0x76023506c94e0532L, 0x864e72d4488c7a7aL, 
+            0xb81058fdac18fd3L, 0xdf93ee5b6674a0f4L, 0xdb30565511789d77L, 0xcf5fe22dc0375f30L, 0xa6e62e6e4edb4043L, 
+            0xbce383957a728669L, 0xfe4dd4e9633db2c6L, 0x24e68818b2a6d6cdL, 0x48a89c5424b4cdbL, 0x7fc7bc75bbbe5768L, 
+            0x79596343191e0ff2L, 0x5510b9cd8306839fL, 0xff2668b4eae7bb53L, 0xb4c03e6363c9e244L, 0xc9e3c0c1c015eb6fL, 
+            0x52531f5f898a744fL, 0x484005b2a805083L, 0x31673b70c6f23c53L, 0x5bffe158f323a7c2L, 0xc742bc0d0c55f125L, 
+            0xd95c32fe7e18379dL, 0xc1f2f613ee3c2e21L, 0x3217a43ff0daaa0eL, 0x3a9fa27258257e53L, 0x80b42af5a393bcf2L, 
+            0xb6967fd6a302f65eL, 0xfdc07bc592dbb125L, 0xcb83b8b9f64c3c3bL, 0x9cb572b041015355L, 0xc12dc512aedc530cL, 
+            0xc8db824276c083ceL, 0x86923b0e2903627fL, 0x1385cf2be22827cdL, 0x21b7616ced869ef1L, 0xc74d497d079901e6L, 
+            0x9e03c843bb13f658L, 0x915b89077a81ec7fL, 0x288a10b00768d244L, 0xd88eb6745a557569L, 0xb3c98071a3d13b20L, 
+            0x8f23aff44d352f03L, 0x2bf39ca10e45bdbbL, 0xf1bea47e2c68a4cL, 0xf8d5ab01c1ad6b55L, 0x679e0601953d1e31L, 
+            0xd793f3aacb3c520fL, 0x96fc350ccdb76eabL, 0x9fa0178362df447bL, 0xc11c63febf83598aL, 0x3aa88df3a1a71323L, 
+            0xab2f8338a09ca82aL, 0x32a2133050a71357L, 0xffecf97ca3ff65e1L, 0xfb6fd13318f5cb79L, 0x3acf76875acad366L, 
+            0xc577ffff529f74cfL, 0x368a90182031dd12L, 0xafbf2311ad656d52L, 0x80cd4f9f23fcafddL, 0x451717a061972d1fL, 
+            0xbbcbdae779cfbf3L, 0x133ca541293fd40dL, 0x6f241a21fc40b108L, 0x9adecbcf0c28110bL, 0xfab528d93bac6d3aL, 
+            0xf4ea3d459b0654aaL, 0x7e2e9ef35a5aafbaL, 0x28730469eded0fc7L, 0x3cbae97a12632fbeL, 0xded6960c0be007a8L, 
+            0x2a11758a7c52c43eL, 0x289de4875bda262dL, 0x6e13eea58caf3fa7L, 0x20c8ed0d5d673c1L, 0xdb4b3e7719d523b6L, 
+            0x49143c819d111fc3L, 0xe07479f9ddf45d8eL, 0x68f4654bcc07435bL, 0x513bd537af510064L, 0xcf956c3a3933ba38L, 
+            0x97e1eaa33f88eeccL, 0x18be860a2504a1c5L, 0x84408412fc0bf397L, 0xb6bdba7e154bdf7L, 0x1d8f8b446b544be6L, 
+            0x6f06b3dcdef17a03L, 0x30c6e14df59f8cefL, 0x1c97ba9910219cfL, 0x33ddcc087d1aeb5cL, 0xe31b94300cfbcbcfL, 
+            0xadeb8a98786bb28L, 0x3f69d5b0e3ec8f17L, 0x99f5a15f635296a6L, 0xce9fac7526862e86L, 0x3a88964201bd7524L, 
+            0xec94d643ea71be51L, 0xc4257084d97ab1c5L, 0xf369b10a73b4d382L, 0xac02bb473dbc5fd1L, 0x4fe73a86d95d7222L, 
+            0x858806616fe3d553L, 0x10680debcb0693e4L, 0xcaa9aac77c954093L, 0xf29c7530415d71e5L, 0xc32b319e09de9e48L, 
+            0x1c67107ed497ebc4L, 0x731da71593324021L, 0x49774770588c055aL, 0xf978dfdc28084220L, 0x58b3f2780b5a7ecL, 
+            0xe4ebf2ca21410715L, 0xd3841ed97708421fL, 0xdbc9401dc51eb4eL, 0xf47a96de499aa2e1L, 0x224da94d8542ba0cL, 
+            0xa3426a80b4dd0a4aL, 0x857caef48ef7e5b6L, 0x11356ad6ede44bf5L, 0x1a32471bd26acd7aL, 0x199396e31de7b358L, 
+            0xb7ca7950dbbb4a92L, 0x6ab23720409790a7L, 0x2abfdb93a3159d10L, 0x23913b403946c4a7L, 0xac7c9f339a822344L, 
+            0x12cffe9625cbe744L, 0x89558b98548b1946L, 0x77be65945c191139L, 0x3ba8d1fc701f4347L, 0xb143664560327f20L, 
+            0x48baccc3ef2081ffL, 0x450c379d24beb8e9L, 0x1990b609485db827L, 0x6c6a565d7129ccb4L, 0xf9724a82872bd619L, 
+            0xcfe629aa56717e20L, 0xfde48d87e844ec93L, 0xb32f79e5dc9ce4c1L, 0x7c9d88364238519fL, 0xe943aceba65150f9L, 
+            0x5301e8550cbdd076L, 0xabb8392364453b3cL, 0xdfb4b4a3cf84aa2dL, 0x269e45f7a6b48a42L, 0xd6783043ab383fcfL, 
+            0xe4ec475d296a69e5L, 0xe2e273ef65555361L, 0x6bd3084210a75af7L, 0xf2ebc493b909d8c7L, 0x4d20f3d435e9bc94L, 
+            0xa465e41c3c36d433L, 0xc1b259456f4341c0L, 0x260093703d6cf2ebL, 0xda68d9dea0aa9bdaL, 0x5662a12a210b2a47L, 
+            0x54675bd1a1b4b467L, 0x9dbd416302ec2468L, 0x3c7130a5032d823aL, 0xabfdef2d9a4fd92fL, 0xd4034e276021451fL, 
+            0x13834d3d0e43ab73L, 0xdc181442b438b2d6L, 0x1736ffb392c25e23L, 0x289b94003a946252L, 0x99705629b221ca37L, 
+            0xa7b22a5bb26775d6L, 0x2dc12f9f04435661L, 0xaadd48b556bc9e7cL, 0xf6992e8e94b68a49L, 0xd50420466c9456e3L, 
+            0xea8305ecdfb1266L, 0xfe0b1d7e4f0ef297L, 0x563de834c4e56a46L, 0xc62b8099b5b264c6L, 0xf6e76aeaf533c784L, 
+            0xd4680470b790968L, 0x288a50754707431eL, 0x8ad167ed38df547eL, 0x9052fed81a8ca4faL, 0x5975ac56f0548ef1L, 
+            0x588bf7d0130111aeL, 0x9ec02036a6688a24L, 0x8c9a454af9e09984L, 0x333ee6727bd12dcbL, 0x9847468f925dc38cL, 
+            0x446ed5203696abacL, 0x71fddf9ef5b5def6L, 0xd4d61614cc333541L, 0xd08a0694cd7f72a7L, 0x686cfe3ea1889281L, 
+            0xf039404e0dd3333fL, 0x52c620eb18b4246L, 0x4e4de47f86d84713L, 0xfe0450396b209851L, 0x99d6e893b01ed92bL, 
+            0xd94cf8705f8eba86L, 0x763451110c00291bL, 0xdf4f60b9aa45d064L, 0xf473d4bfd86ad526L, 0x41b9e3fa1a6dba94L, 
+            0xbaa7cdeb00796a4aL, 0xf668194c40626450L, 0xb894e0ae40a9c87fL, 0x5bc1eea8587d3ddbL, 0xc4c0ecb91bb50d75L, 
+            0x819fdfd17ff2917bL, 0x681484e54b6b12f7L, 0x2f510aa2f8977995L, 0x7d1582a293b8fa3dL, 0x3dad5a0f0da45470L, 
+            0x33c113aefb480520L, 0xbd524b2da7ce6c1fL, 0xe4cc051d00d8ddc0L, 0x2995950e206efa90L, 0x8b0e5dca588e3f50L, 
+            0xaabb3583f7f87082L, 0x75dbbecfa34cb4d6L, 0xf195977068849ae8L, 0x9223ca6fbb72767cL, 0xda7211029d59f04eL, 
+            0x18d9987c6566405cL, 0x57833aa39ef75a04L, 0xd1750e36481f654bL, 0xce2b66bc8796acbL, 0xc7e79aa76c96b057L, 
+            0x68f95b6b3c5cdc1dL, 0x2f5725cf5fc583aeL, 0x6b973013fd4484a6L, 0xaaeb2687f2d8bb96L, 0xad29cce061ba3934L, 
+            0xcb60dd1c437eb1d9L, 0x5cd6f46b78181bb4L, 0x1561cdc95ace24d9L, 0xbb774e6705806245L, 0xdc29c8df29b2e975L, 
+            0x6ee5ba502839dccdL, 0x670869bb64c60f69L, 0x8ca2931e927ae7L, 0x35cf6c0a27d8de77L, 0x94a3d86209af3920L, 
+            0x4095a276475df5b7L, 0x1119e4c257ccf7fbL, 0x33376166d9064fe8L, 0xd68c2399f968b905L, 0xb7bf2902f40fc101L, 
+            0x4ec18604cfd551e0L, 0xeb8e7fe1b6678e99L, 0xdcfe68fc0e042fa6L, 0xd2e58dfb1a8e3866L, 0xf4322bc57fb9a35aL, 
+            0xe0c665c8cf1fb49bL, 0x60de1f1050684297L, 0xf400c04cb00784cdL, 0xfc2a216f12016984L, 0xa808b477fd65fb4aL, 
+            0xd9b614adfcb5d0f1L, 0x50afdbc66e3efad2L, 0x82337b3f1764851cL, 0xdc98850eb93ef45eL, 0xe1c314bbc2c6af27L, 
+            0xd35614ba27e74a71L, 0xa5d592e04a31bb6fL, 0x3f143cd0bc243fbeL, 0x81641ac25408b21L, 0xd4166b32a26fc1c6L, 
+            0xccd088ee4d4a1f67L, 0x698c913d46c1ec99L, 0xf6b9086a5b986abL, 0x4a73c05ef72e3595L, 0x307aeeb350ab081L, 
+            0x43e20045bcb06b0eL, 0x3f58d1d6cd3aa0dcL, 0xd71cd7c996faba80L, 0x4431d8268eebfb71L, 0x254246df109e3dd5L, 
+            0xa7ca1449a238b06aL, 0x49b40e7b082493e7L, 0x45d80e6bd330d613L, 0xaf3d8a578b6d6232L, 0xa4b98341785262d1L, 
+            0xf4f1f424af963102L, 0xa84a986395146774L, 0x90da037fb61d5c88L, 0xb645534b2cf5b89fL, 0x3fdb3073310934b4L, 
+            0x1a0307d01f57f514L, 0x509c9b87a4a1e66cL, 0xbf320cf0888d8aa8L, 0x45a51f76c5f76892L, 0x23eb7a2b99a64402L, 
+            0x4c600e5675dd7757L, 0x4896757aa01a5c34L, 0xb808dbbda7a8a1daL, 0x762c21058ba50349L, 0x99b0a9d5deeebb37L, 
+            0xd6d98ef70a1e465dL, 0xb052f2c1163894f6L, 0xc55e73526f8bc8faL, 0xb31a0537f5b3b269L, 0xf09c1819c0c7f78aL, 
+            0xc36d4e2187e430f8L, 0xf141831a47299c7bL, 0x62f938047903ef34L, 0xf2a0dd678f92e0a5L, 0xc7fe6a53efaaa65L, 
+            0xcc539fcdcc466310L, 0x55199357cdc55491L, 0x6917fb45babb399eL, 0xb098da3c7b012b1aL, 0x54916438f426c41L, 
+            0x1a5ff3356d77d43bL, 0x74e71995e0aacf1aL, 0x6562a8da6b5e69eeL, 0xacbc2b8d1fb16ea8L, 0x400ea8e1f3f5535eL, 
+            0x2ea792dad3a4538fL, 0xf580fe481db60b5cL, 0xcb101198dd0aba9fL, 0x259acbe0461cb837L, 0x30033c3964b56a40L, 
+            0x6c15d4283eeb6fa6L, 0xdea7b626998ea3eeL, 0xdbb2e1b8c0c2abdbL, 0x3a856a6742b6edc2L, 0x777ed6b1683f48bL, 
+            0xde72fd7d6db3bb63L, 0xc8766969b599dc68L, 0xb39a5b76dce26160L, 0x97464948ce81d8a2L, 0xae20fda5af404ae6L, 
+            0xde1100c4f1ae3265L, 0x5a94d43bf60f574L, 0xc087a2116f52d0fcL, 0xfacb3be87e615d89L, 0xe184cb9fba7b0feL, 
+            0x824779bede6d84ffL, 0xa0852e96875da152L, 0x620046e8ba89baefL, 0x247c32c5f34b08ddL, 0x49294468356e7298L, 
+            0xaf6d6e0f8b5009ebL, 0x8c25bfcdb8abd77fL, 0x4f5464a1bc417e38L, 0x2df8fbe8993f8c9fL, 0x6540566281dd6d91L, 
+            0xb90690dcfb03a83L, 0xe270b7c7f8fab463L, 0x898ead41792a7f87L, 0xa1b1248822b7c292L, 0xfa2c0d61dd383eabL, 
+            0x5574c091830bd677L, 0x43640e20702986e5L, 0x622d0a1c860d0302L, 0x9528ea0051990eb9L, 0x28f057ef30af388fL, 
+            0x88320e974a2721a0L, 0x8a12cb33cdd88b60L, 0xd91a9763f991780dL, 0xdf22e332867c0e97L, 0xad95801b6c801f10L, 
+            0xb34e21d4afe2c4a0L, 0xd5465bf172494dd3L, 0x16594af34f1b5767L, 0xa675dceaee1591e6L, 0x53db891db5e1d768L, 
+            0x39a80f5d365c71afL, 0xdce01c73eac54372L, 0x1087fb03e5ce69e9L, 0x67cac3905594378L, 0x275d24c9aa1607f0L, 
+            0x9163a77a53e361b8L, 0x17d10f8254fa7f0bL, 0x49efeab6642e9e45L, 0x376e24839b1df1beL, 0xc46221cc408546fL, 
+            0x98eb5bb7001ebf5cL, 0xc6c4d56e3c9a78efL, 0x23c0723e123a899L, 0x145912ec44b57548L, 0x488a34fe824ff4c3L, 
+            0xac3bc6de9929c707L, 0x1dbac6e98813a70fL, 0xf566054941858266L, 0x18e0a3a2a8b8f2f1L, 0xcc6245a26564a399L, 
+            0x14416ca0e1a84a9aL, 0x4eaf095631a6e7bfL, 0xf2f89f104c9d0b8dL, 0x8fb278a5953e52d8L, 0x8fcee83a30a8be30L, 
+            0xb66850da1a0ceb33L, 0x5f37d31bad76f4dcL, 0xff4d956ffea8dea4L, 0x78c583b396635b3L, 0xad268fb5b1105028L, 
+            0xa480149a0dcbc5f4L, 0xb0e8d69c8b15c864L, 0x6ed49c46f19bb8eaL, 0x7f1871fdf321818dL, 0x1ec5816f5a9843eaL, 
+            0x77c8da91b5313675L, 0x4cdb66ad515e0717L, 0x2ec4712b0bfdfcd6L, 0x6c6f5767fff27330L, 0x71083b972d80c0cL, 
+            0x8d8325e82c4fdcdcL, 0xb47a658dad8e13a4L, 0x88710bf005fda027L, 0x69bd3edaf7111200L, 0xdccdd0c65c810ffL, 
+        };
+
+        for (int i = 0; i < refLong.length; ++i) {
+            Assert.assertEquals(refLong[i], rng.nextLong());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source64/SplitMix64Test.java b/src/test/java/org/apache/commons/math4/rng/internal/source64/SplitMix64Test.java
new file mode 100644
index 0000000000..d2d980f4f0
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source64/SplitMix64Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class SplitMix64Test {
+    @Test
+    public void testReferenceCode() {
+        final long refSeed = 0x1a2b3c4d5e6f7531L;
+        final SplitMix64 rng = new SplitMix64(refSeed);
+
+        final long[] refValues = {
+            0x4141302768c9e9d0L, 0x64df48c4eab51b1aL, 0x4e723b53dbd901b3L, 0xead8394409dd6454L,
+            0x3ef60e485b412a0aL, 0xb2a23aee63aecf38L, 0x6cc3b8933c4fa332L, 0x9c9e75e031e6fccbL,
+            0x0fddffb161c9f30fL, 0x2d1d75d4e75c12a3L, 0xcdcf9d2dde66da2eL, 0x278ba7d1d142cfecL,
+            0x4ca423e66072e606L, 0x8f2c3c46ebc70bb7L, 0xc9def3b1eeae3e21L, 0x8e06670cd3e98bceL,
+            0x2326dee7dd34747fL, 0x3c8fff64392bb3c1L, 0xfc6aa1ebe7916578L, 0x3191fb6113694e70L,
+            0x3453605f6544dac6L, 0x86cf93e5cdf81801L, 0x0d764d7e59f724dfL, 0xae1dfb943ebf8659L,
+            0x012de1babb3c4104L, 0xa5a818b8fc5aa503L, 0xb124ea2b701f4993L, 0x18e0374933d8c782L,
+            0x2af8df668d68ad55L, 0x76e56f59daa06243L, 0xf58c016f0f01e30fL, 0x8eeafa41683dbbf4L,
+            0x7bf121347c06677fL, 0x4fd0c88d25db5ccbL, 0x99af3be9ebe0a272L, 0x94f2b33b74d0bdcbL,
+            0x24b5d9d7a00a3140L, 0x79d983d781a34a3cL, 0x582e4a84d595f5ecL, 0x7316fe8b0f606d20L,
+        };
+
+        for (int i = 0; i < refValues.length; ++i) {
+            Assert.assertEquals(refValues[i], rng.nextLong());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source64/TwoCmresTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source64/TwoCmresTest.java
new file mode 100644
index 0000000000..8505e6bc64
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source64/TwoCmresTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.commons.math4.exception.InsufficientDataException;
+import org.apache.commons.math4.exception.DimensionMismatchException;
+
+public class TwoCmresTest {
+    @Test
+    public void testAsymmetric() {
+        final int index1 = 2;
+        final int index2 = 5;
+        final int seed = -123456789;
+
+        final TwoCmres rng1 = new TwoCmres(seed, index1, index2);
+        final TwoCmres rng2 = new TwoCmres(seed, index2, index1);
+
+        // Try a few values.
+        final int n = 1000;
+        for (int i = 0; i < n; i++) {
+            Assert.assertNotEquals("i=" + i, rng1.nextLong(), rng2.nextLong());
+        }
+    }
+
+    @Test
+    public void testSubcycleGeneratorsMustBeDifferent() {
+        final int max = TwoCmres.numberOfSubcycleGenerators();
+        for (int i = 0; i < max; i++) {
+            try {
+                new TwoCmres(-97845, i, i);
+                Assert.fail("Exception expected");
+            } catch (InsufficientDataException e) {
+                // Expected.
+            }
+        }
+    }
+}
+
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/source64/XorShift1024StarTest.java b/src/test/java/org/apache/commons/math4/rng/internal/source64/XorShift1024StarTest.java
new file mode 100644
index 0000000000..e9f2fa727a
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/source64/XorShift1024StarTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.source64;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class XorShift1024StarTest {
+    @Test
+    public void testReferenceCode() {
+        /*
+         * Data from running the executable compiled from the author's C code:
+         *   http://xorshift.di.unimi.it/xorshift1024star.c
+         */
+        final long[] refSeed = new long[] {
+            0x012de1babb3c4104L, 0xa5a818b8fc5aa503L, 0xb124ea2b701f4993L, 0x18e0374933d8c782L,
+            0x2af8df668d68ad55L, 0x76e56f59daa06243L, 0xf58c016f0f01e30fL, 0x8eeafa41683dbbf4L,
+            0x7bf121347c06677fL, 0x4fd0c88d25db5ccbL, 0x99af3be9ebe0a272L, 0x94f2b33b74d0bdcbL,
+            0x24b5d9d7a00a3140L, 0x79d983d781a34a3cL, 0x582e4a84d595f5ecL, 0x7316fe8b0f606d20L,
+        };
+
+        final XorShift1024Star rng = new XorShift1024Star(refSeed);
+
+        final long[] refValues = {
+            0xd85e9fc0855614cdL, 0xaf4965c9c1ac6a3dL, 0x067da398791111d8L, 0x2771c41db58d7644L,
+            0xf71a471e1ac2b03eL, 0x953449ae275f7409L, 0x8aa570c72de0af5eL, 0xae59db2acdae32beL,
+            0x3d46f316b8f97301L, 0x72dc8399b7a70957L, 0xf5624d788b3b6f4eL, 0xb7a79275f6c0e7b1L,
+            0xf79354208377d498L, 0x0e5d2f2ac2b4f28fL, 0x0f8f57edc8aa802fL, 0x5e918ea72ece0c36L,
+            0xeeb8dbdb00ac7a5aL, 0xf16f88dfef0d6047L, 0x1244c29e0e0d8d2dL, 0xaa94f1cc42691eb7L,
+            0xd06425dd329e5de5L, 0x968b1c2e016f159cL, 0x6aadff7055065295L, 0x3bce2efcb0d00876L,
+            0xb28d5b69ad8fb719L, 0x1e4040c451376920L, 0x6b0801a8a00de7d7L, 0x891ba2cbe2a4675bL,
+            0x6355008481852527L, 0x7a47bcd9960126f3L, 0x07f72fcd4ebe3580L, 0x4658b29c126840ccL,
+            0xdc7b36d3037c7539L, 0x9e30aab0410122e8L, 0x7215126e0fce932aL, 0xda63f12a489fc8deL,
+            0x769997671b2a0158L, 0xfa9cd84e0ffc174dL, 0x34df1cd959dca211L, 0xccea41a33ec1f763L,
+        };
+
+        for (int i = 0; i < refValues.length; ++i) {
+            Assert.assertEquals(refValues[i], rng.nextLong());
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/util/NumberFactoryTest.java b/src/test/java/org/apache/commons/math4/rng/internal/util/NumberFactoryTest.java
new file mode 100644
index 0000000000..ae9bc8d6b3
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/util/NumberFactoryTest.java
@@ -0,0 +1,164 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.commons.math4.exception.DimensionMismatchException;
+
+/**
+ * Tests for the {@link NumberFactory}.
+ */
+public class NumberFactoryTest {
+    /** sizeof(int). */
+    final int INT_SIZE = 4;
+    /** sizeof(long). */
+    final int LONG_SIZE = 8;
+
+    /** Test values. */
+    private static final long[] LONG_TEST_VALUES = new long[] {
+        0L,
+        1L,
+        -1L,
+        19337L,
+        1234567891011213L,
+        -11109876543211L,
+        Long.valueOf(Integer.MAX_VALUE),
+        Long.valueOf(Integer.MIN_VALUE),
+        Long.MAX_VALUE,
+        Long.MIN_VALUE,
+    };
+    /** Test values. */
+    private static final int[] INT_TEST_VALUES = new int[] {
+        0,
+        1,
+        -1,
+        19337,
+        1234567891,
+        -1110987656,
+        Integer.MAX_VALUE,
+        Integer.MIN_VALUE,
+    };
+
+    @Test
+    public void testMakeIntFromLong() {
+        for (long v : LONG_TEST_VALUES) {
+            final int vL = NumberFactory.extractLo(v);
+            final int vH = NumberFactory.extractHi(v);
+
+            final long actual = (((long) vH) << 32) | (vL & 0xffffffffL);
+            Assert.assertEquals(v, actual);
+        }
+    }
+
+    @Test
+    public void testLong2Long() {
+        for (long v : LONG_TEST_VALUES) {
+            final int vL = NumberFactory.extractLo(v);
+            final int vH = NumberFactory.extractHi(v);
+
+            Assert.assertEquals(v, NumberFactory.makeLong(vH, vL));
+        }
+    }
+
+    @Test
+    public void testLongFromByteArray2Long() {
+        for (long expected : LONG_TEST_VALUES) {
+            final byte[] b = NumberFactory.makeByteArray(expected);
+            Assert.assertEquals(expected, NumberFactory.makeLong(b));
+        }
+    }
+
+    @Test
+    public void testLongArrayFromByteArray2LongArray() {
+        final byte[] b = NumberFactory.makeByteArray(LONG_TEST_VALUES);
+        Assert.assertArrayEquals(LONG_TEST_VALUES,
+                                 NumberFactory.makeLongArray(b));
+    }
+
+    @Test
+    public void testIntFromByteArray2Int() {
+        for (int expected : INT_TEST_VALUES) {
+            final byte[] b = NumberFactory.makeByteArray(expected);
+            Assert.assertEquals(expected, NumberFactory.makeInt(b));
+        }
+    }
+
+    @Test
+    public void testIntArrayFromByteArray2IntArray() {
+        final byte[] b = NumberFactory.makeByteArray(INT_TEST_VALUES);
+        Assert.assertArrayEquals(INT_TEST_VALUES,
+                                 NumberFactory.makeIntArray(b));
+    }
+
+    @Test
+    public void testMakeIntPrecondition1() {
+        for (int i = 0; i <= 10; i++) {
+            try {
+                NumberFactory.makeInt(new byte[i]);
+                if (i != INT_SIZE) {
+                    Assert.fail("Exception expected");
+                }
+            } catch (DimensionMismatchException e) {
+                // Expected.
+            }
+        }
+    }
+
+    @Test
+    public void testMakeIntArrayPrecondition1() {
+        for (int i = 0; i <= 20; i++) {
+            try {
+                NumberFactory.makeIntArray(new byte[i]);
+                if (i != 0 && (i % INT_SIZE != 0)) {
+                    Assert.fail("Exception expected");
+                }
+            } catch (DimensionMismatchException e) {
+                // Expected.
+            }
+        }
+    }
+
+    @Test
+    public void testMakeLongPrecondition1() {
+        for (int i = 0; i <= 10; i++) {
+            try {
+                NumberFactory.makeLong(new byte[i]);
+                if (i != LONG_SIZE) {
+                    Assert.fail("Exception expected");
+                }
+            } catch (DimensionMismatchException e) {
+                // Expected.
+            }
+        }
+    }
+
+    @Test
+    public void testMakeLongArrayPrecondition1() {
+        for (int i = 0; i <= 20; i++) {
+            try {
+                NumberFactory.makeLongArray(new byte[i]);
+                if (i != 0 && (i % LONG_SIZE != 0)) {
+                    Assert.fail("Exception expected");
+                }
+            } catch (DimensionMismatchException e) {
+                // Expected.
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/rng/internal/util/SeedFactoryTest.java b/src/test/java/org/apache/commons/math4/rng/internal/util/SeedFactoryTest.java
new file mode 100644
index 0000000000..559f48412a
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/rng/internal/util/SeedFactoryTest.java
@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.rng.internal.util;
+
+import java.util.Map;
+import java.util.HashMap;
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Tests for {@link SeedFactory}.
+ */
+public class SeedFactoryTest {
+    @Test
+    public void testCreateLong() {
+        final Map<Long, Integer> values = new HashMap<>();
+
+        final int n = 100000;
+        for (int i = 0; i < n; i++) {
+            final long v = SeedFactory.createLong();
+
+            Integer count = values.get(v);
+            if (count == null) {
+                count = 0;
+            }
+            values.put(v, count + 1);
+        }
+
+        // Check that all seeds are different.
+        assertDifferentValues(values);
+    }
+
+    @Test
+    public void testCreateLongArray() {
+        final Map<Long, Integer> values = new HashMap<>();
+
+        final int n = 100000;
+        final long[] array = SeedFactory.createLongArray(n);
+        Assert.assertEquals(n, array.length);
+
+        for (long v : array) {
+            Integer count = values.get(v);
+            if (count == null) {
+                count = 0;
+            }
+            values.put(v, count + 1);
+        }
+
+        // Check that all seeds are different.
+        assertDifferentValues(values);
+    }
+
+    @Test
+    public void testCreateIntArray() {
+        final Map<Long, Integer> values = new HashMap<>();
+
+        for (int i = 0; i < 50000; i++) {
+            final int[] a = SeedFactory.createIntArray(2);
+            final long v = NumberFactory.makeLong(a[0], a[1]); 
+            Integer count = values.get(v);
+            if (count == null) {
+                count = 0;
+            }
+            values.put(v, count + 1);
+        }
+
+        // Check that all pairs in are different.
+        assertDifferentValues(values);
+    }
+
+    /**
+     * Asserts that all the keys in given {@code map} have their
+     * value equal to 1.
+     *
+     * @param map Map to counts.
+     */
+    private static <T> void assertDifferentValues(Map<T, Integer> map) {
+        final StringBuilder sb = new StringBuilder();
+
+        int duplicates = 0;
+        for (Map.Entry<T, Integer> entry : map.entrySet()) {
+            final int count = entry.getValue();
+            if (count <= 0) {
+                throw new IllegalStateException();
+            }
+
+            if (count > 1) {
+                duplicates += count - 1;
+                sb.append(entry.getKey() + ": " + count + "\n");
+            }
+        }
+
+        if (duplicates > 0) {
+            Assert.fail(duplicates + " duplicates\n" + sb);
+        }
+    }
+}
diff --git a/src/userguide/README b/src/userguide/README
index 9aa0238cd6..7ee72a0fbc 100644
--- a/src/userguide/README
+++ b/src/userguide/README
@@ -5,4 +5,17 @@ examples of use.
 In order to run one of the applications (a class that must contain a
 "main" method), you would type (in a shell console) a command similar
 to the following:
- $ mvn -q exec:java -Dexec.mainClass=org.apache.commons.math4.userguide.sofm.ChineseRingsClassifier
+ $ mvn -q exec:java \
+   -Dexec.mainClass=org.apache.commons.math4.userguide.sofm.ChineseRingsClassifier
+
+Alternatively, a "standalone" JAR can be created with the following
+command:
+ $ mvn -Dmainclass=org.apache.commons.math4.userguide.rng.RandomStressTester \
+       -Djarbasename=RandomStressTester \
+       clean compile assembly:single
+where the value of the "mainclass" argument is the fully-qualified name
+of the class whose "main" method will be the program's entry point, and
+the "jarbasename" argument is the basename of the JAR file to be created.
+Then, the application can be run with the following command:
+ $ java -jar RandomStressTester [args]
+where "[args]" is the list of arguments passed to the "main" method.
diff --git a/src/userguide/c/rng/stdin2testu01.c b/src/userguide/c/rng/stdin2testu01.c
new file mode 100644
index 0000000000..d1a4a6aa57
--- /dev/null
+++ b/src/userguide/c/rng/stdin2testu01.c
@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/*
+ * Utility for simple interfacing with the "TestU01" library:
+ *  http://simul.iro.umontreal.ca/testu01/tu01.html
+ *
+ * It reads from its standard input an infinite sequence of 32-bits
+ * integers and runs one of the test suites "SmallCrush", "Crush" or
+ * "BigCrush".
+ * "TestU01" writes its report to standard output.
+ */
+
+#include <stdint.h>
+#include <unistd.h>
+#include <string.h>
+
+#include <testu01/unif01.h>
+#include <testu01/bbattery.h>
+#include <testu01/util.h>
+
+#define TU_S "SmallCrush"
+#define TU_C "Crush"
+#define TU_B "BigCrush"
+#define BUFFER_LENGTH 256
+
+typedef struct {
+  unsigned long buffer[BUFFER_LENGTH];
+  uint32_t index;
+} StdinReader_state;
+
+unsigned long nextInt(void *par,
+                      void *sta) {
+  StdinReader_state *state = (StdinReader_state *) sta;
+  if (state->index >= BUFFER_LENGTH) {
+    /* Refill. */
+    fread(state->buffer, sizeof(unsigned long), BUFFER_LENGTH, stdin);
+    state->index = 0;
+  }
+
+  uint32_t random = state->buffer[state->index];
+  ++state->index; /* Next request. */
+
+  return random;
+}
+
+double nextDouble(void *par,
+                  void *sta) {
+  return nextInt(par, sta) / 4294967296.0;
+}
+
+
+static void dummy(void *sta) {
+  printf("N/A");
+
+  return;
+}
+
+unif01_Gen *createStdinReader(void) {
+   unif01_Gen *gen;
+   StdinReader_state *state;
+   size_t len;
+   char name[60];
+
+   state = util_Malloc(sizeof(StdinReader_state));
+
+   gen = util_Malloc(sizeof(unif01_Gen));
+   gen->state = state;
+   gen->param = NULL;
+   gen->Write = dummy;
+   gen->GetU01 = nextDouble;
+   gen->GetBits = nextInt;
+
+   strcpy(name, "stdin");
+   len = strlen(name);
+   gen->name = util_Calloc(len + 1, sizeof (char));
+   strncpy(gen->name, name, len);
+
+   // Read binary input.
+   freopen(NULL, "rb", stdin);
+   state->index = BUFFER_LENGTH;
+
+   return gen;
+}
+
+void deleteStdinReader(unif01_Gen *gen) {
+   gen->state = util_Free(gen->state);
+   gen->name = util_Free(gen->name);
+   util_Free(gen);
+}
+
+int main(int argc,
+         char **argv) {
+  unif01_Gen *gen = createStdinReader();
+  char *spec = argv[1];
+
+  if (argc < 2) {
+    printf("[ERROR] Specify test suite: '%s', '%s' or '%s'\n", TU_S, TU_C, TU_B);
+    exit(1);
+  } else if (strcmp(spec, TU_S) == 0) {
+    bbattery_SmallCrush(gen);
+  } else if (strcmp(spec, TU_C) == 0) {
+    bbattery_Crush(gen);
+  } else if (strcmp(spec, TU_B) == 0) {
+    bbattery_BigCrush(gen);
+  } else {
+    printf("[ERROR] Unknown specification: '%s'\n", spec);
+    exit(1);
+  }
+
+  deleteStdinReader(gen);
+  return 0;
+}
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/rng/GeneratorsList.java b/src/userguide/java/org/apache/commons/math4/userguide/rng/GeneratorsList.java
new file mode 100644
index 0000000000..043bce942a
--- /dev/null
+++ b/src/userguide/java/org/apache/commons/math4/userguide/rng/GeneratorsList.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.userguide.rng;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
+
+/**
+ * List of generators.
+ */
+public class GeneratorsList implements Iterable<UniformRandomProvider> {
+    /** List. */
+    private final List<UniformRandomProvider> list = new ArrayList<>();
+
+    /**
+     * Creates list.
+     */
+    public GeneratorsList() {
+        list.add(RandomSource.create(RandomSource.JDK));
+        list.add(RandomSource.create(RandomSource.MT));
+        list.add(RandomSource.create(RandomSource.WELL_512_A));
+        list.add(RandomSource.create(RandomSource.WELL_1024_A));
+        list.add(RandomSource.create(RandomSource.WELL_19937_A));
+        list.add(RandomSource.create(RandomSource.WELL_19937_C));
+        list.add(RandomSource.create(RandomSource.WELL_44497_A));
+        list.add(RandomSource.create(RandomSource.WELL_44497_B));
+        list.add(RandomSource.create(RandomSource.ISAAC));
+        list.add(RandomSource.create(RandomSource.MT_64));
+        list.add(RandomSource.create(RandomSource.SPLIT_MIX_64));
+        list.add(RandomSource.create(RandomSource.XOR_SHIFT_1024_S));
+        list.add(RandomSource.create(RandomSource.TWO_CMRES));
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public Iterator<UniformRandomProvider> iterator() {
+        return list.iterator();
+    }
+}
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/rng/RandomStressTester.java b/src/userguide/java/org/apache/commons/math4/userguide/rng/RandomStressTester.java
new file mode 100644
index 0000000000..e257b53a30
--- /dev/null
+++ b/src/userguide/java/org/apache/commons/math4/userguide/rng/RandomStressTester.java
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.userguide.rng;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.io.IOException;
+import java.io.File;
+import java.io.PrintWriter;
+import java.io.FileWriter;
+import java.io.DataOutputStream;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+import org.apache.commons.math4.rng.UniformRandomProvider;
+
+/**
+ * Class that can be used for testing a generator by piping the values
+ * returned by its {@link UniformRandomProvider#nextInt()} method to a
+ * program that reads {@code int} values from its standard input and
+ * writes an analysis report to standard output.
+ *
+ * <p>
+ *  The <a href="http://www.phy.duke.edu/~rgb/General/dieharder.php">
+ *  "dieharder"</a> test suite is such a software.
+ *  <br>
+ *  Example of command line, assuming that "examples.jar" specifies this
+ *  class as the "main" class (see {@link #main(String[]) main} method):
+ *  <pre><code>
+ *   $ java -jar examples.jar \
+ *     report/dh_ \
+ *     4 \
+ *     org.apache.commons.math4.userguide.rng.GeneratorsList \
+ *     /usr/bin/dieharder -a -g 200 -Y 1 -k 2
+ *  </code></pre>
+ * </p>
+ */
+public class RandomStressTester {
+    /** Comment prefix. */
+    private static final String C = "# ";
+    /** New line. */
+    private static final String N = "\n";
+    /** Command line. */
+    private final List<String> cmdLine;
+    /** Output prefix. */
+    private final String fileOutputPrefix;
+
+    /**
+     * Creates the application.
+     *
+     * @param cmd Command line.
+     * @param outputPrefix Output prefix for file reports.
+     */
+    private RandomStressTester(List<String> cmd,
+                               String outputPrefix) {
+        final File exec = new File(cmd.get(0));
+        if (!exec.exists() ||
+            !exec.canExecute()) {
+            throw new RuntimeException("Program is not executable: " + exec);
+        }
+
+        cmdLine = new ArrayList<String>(cmd);
+        fileOutputPrefix = outputPrefix;
+
+        final File reportDir = new File(fileOutputPrefix).getParentFile();
+        if (!reportDir.exists() ||
+            !reportDir.isDirectory() ||
+            !reportDir.canWrite()) {
+            throw new RuntimeException("Invalid output directory: " + reportDir);
+        }
+    }
+
+    /**
+     * Program's entry point.
+     *
+     * @param args Application's arguments.
+     * The order is as follows:
+     * <ul>
+     *  <li>Output prefix: Filename prefix where the output of the analysis will
+     *   written to.  The appended suffix is the index of the instance within the
+     *   list of generators to be tested.</li>
+     *  <li>Number of threads to use concurrently: One thread will process one of
+     *    the generators to be tested.</li>
+     *  <li>Name of a class that implements {@code Iterable<UniformRandomProvider>}
+     *   (and defines a default constructor): Each generator of the list will be
+     *   tested by one instance of the analyzer program</li>
+     *  <li>Path to the executable: this is the analyzer software that reads 32-bits
+     *   integers from stdin.</li>
+     *  <li>All remaining arguments are passed to the executable.</li>
+     * </ul>
+     */
+    public static void main(String[] args) throws Exception {
+        final String output = args[0];
+        final int numThreads = Integer.valueOf(args[1]);
+
+        final Iterable<UniformRandomProvider> rngList = createGeneratorsList(args[2]);
+
+        final List<String> cmdLine = new ArrayList<>();
+        cmdLine.addAll(Arrays.asList(Arrays.copyOfRange(args, 3, args.length)));
+
+        final RandomStressTester app = new RandomStressTester(cmdLine, output);
+        app.run(rngList, numThreads);
+    }
+
+    /**
+     * Creates the tasks and starts the processes.
+     *
+     * @param generators List of generators to be analyzed.
+     * @param numConcurrentTasks Number of concurrent tasks.
+     * Twice as many threads will be started: one thread for the RNG and one
+     * for the analyzer.
+     */
+    private void run(Iterable<UniformRandomProvider> generators,
+                     int numConcurrentTasks)
+        throws IOException {
+        // Parallel execution.
+        final ExecutorService service = Executors.newFixedThreadPool(numConcurrentTasks);
+
+        // Placeholder (output will be "null").
+        final List<Future<?>> execOutput = new ArrayList<Future<?>>();
+
+        // Run tasks.
+        int count = 0;
+        for (UniformRandomProvider rng : generators) {
+            final File output = new File(fileOutputPrefix + (++count));
+            final Runnable r = new Task(rng, output);
+            execOutput.add(service.submit(r));
+        }
+
+        // Wait for completion (ignoring return value).
+        try {
+            for (Future<?> f : execOutput) {
+                try {
+                    f.get();
+                } catch (ExecutionException e) {
+                    System.err.println(e.getCause().getMessage());
+                }
+            }
+        } catch (InterruptedException ignored) {}
+
+        // Terminate all threads.
+        service.shutdown();
+    }
+
+    /**
+     * Creates the list of generators to be tested.
+     *
+     * @param name Name of the class that contains the generators to be
+     * analyzed.
+     * @return the list of generators.
+     */
+    private static Iterable<UniformRandomProvider> createGeneratorsList(String name)
+        throws ClassNotFoundException,
+               InstantiationException,
+               IllegalAccessException {
+        return (Iterable<UniformRandomProvider>) Class.forName(name).newInstance();
+    }
+
+    /**
+     * Pipes random numbers to the standard input of an analyzer.
+     */
+    private class Task implements Runnable {
+        /** Directory for reports of the tester processes. */
+        private final File output;
+        /** RNG to be tested. */
+        private final UniformRandomProvider rng;
+
+        /**
+         * Creates the task.
+         *
+         * @param random RNG to be tested.
+         * @param report Report file.
+         */
+        public Task(UniformRandomProvider random,
+                    File report) {
+            rng = random;
+            output = report;
+        }
+
+        /** {@inheritDoc} */
+        @Override
+            public void run() {
+            try {
+                // Write header.
+                printHeader(output, rng);
+
+                // Start test suite.
+                final ProcessBuilder builder = new ProcessBuilder(cmdLine);
+                builder.redirectOutput(ProcessBuilder.Redirect.appendTo(output));
+                final Process testingProcess = builder.start();
+                final DataOutputStream sink = new DataOutputStream(testingProcess.getOutputStream());
+
+                final long startTime = System.nanoTime();
+
+                try {
+                    while (true) {
+                        sink.writeInt(rng.nextInt());
+                    }
+                } catch (IOException e) {
+                    // Hopefully getting here when the analyzing software terminates.
+                }
+
+                final long endTime = System.nanoTime();
+
+                // Write footer.
+                printFooter(output, endTime - startTime);
+
+            } catch (IOException e) {
+                throw new RuntimeException("Failed to start task: " + e.getMessage());
+            }
+        }
+    }
+
+    /**
+     * @param output File.
+     * @param rng Generator being tested.
+     * @param cmdLine
+     */
+    private void printHeader(File output,
+                             UniformRandomProvider rng)
+        throws IOException {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(C).append(N);
+        sb.append(C).append("RNG: ").append(rng.toString()).append(N);
+        sb.append(C).append(N);
+        sb.append(C).append("Java: ").append(System.getProperty("java.version")).append(N);
+        sb.append(C).append("Runtime: ").append(System.getProperty("java.runtime.version", "?")).append(N);
+        sb.append(C).append("JVM: ").append(System.getProperty("java.vm.name"))
+            .append(" ").append(System.getProperty("java.vm.version")).append(N);
+        sb.append(C).append("OS: ").append(System.getProperty("os.name"))
+            .append(" ").append(System.getProperty("os.version"))
+            .append(" ").append(System.getProperty("os.arch")).append(N);
+        sb.append(C).append(N);
+
+        sb.append(C).append("Analyzer: ");
+        for (String s : cmdLine) {
+            sb.append(s).append(" ");
+        }
+        sb.append(N);
+        sb.append(C).append(N);
+
+        final PrintWriter w = new PrintWriter(new FileWriter(output, true));
+        w.print(sb.toString());
+        w.close();
+    }
+
+    /**
+     * @param output File.
+     * @param nanoTime Duration of the run.
+     */
+    private void printFooter(File output,
+                             long nanoTime)
+        throws IOException {
+        final PrintWriter w = new PrintWriter(new FileWriter(output, true));
+        w.println(C);
+
+        final double duration = ((double) nanoTime) * 1e-9 / 60;
+        w.println(C + "Test duration: " + duration + " minutes");
+
+        w.println(C);
+        w.close();
+    }
+}
diff --git a/src/userguide/pom.xml b/src/userguide/pom.xml
index 2f8ac91876..4f3c88861c 100644
--- a/src/userguide/pom.xml
+++ b/src/userguide/pom.xml
@@ -45,6 +45,36 @@
 
   <build>
     <sourceDirectory>java</sourceDirectory>
+
+    <plugins>
+
+      <plugin>
+        <artifactId>maven-assembly-plugin</artifactId>
+        <configuration>
+          <archive>
+            <manifest>
+              <mainClass>${mainclass}</mainClass>
+            </manifest>
+          </archive>
+          <descriptorRefs>
+            <descriptorRef>jar-with-dependencies</descriptorRef>
+          </descriptorRefs>
+          <finalName>${jarbasename}</finalName>
+          <appendAssemblyId>false</appendAssemblyId>
+        </configuration>
+        <executions>
+          <execution>
+            <id>make-assembly</id> <!-- this is used for inheritance merges -->
+            <phase>package</phase> <!-- bind to the packaging phase -->
+            <goals>
+              <goal>single</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+
+   </plugins>
+
   </build>
   <reporting>
   </reporting>

From 6c94c16e46127c05fbf70b1fdeb0cd8c2ac98537 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 02:05:49 +0100
Subject: [PATCH 02/21] MATH-1158.

New "Sampler" interface and "createSampler" factory method defined in "RealDistribution" interface.

Default sampling implementation defined in "AbstractRealDistribution" (using the "inversion method").
Overridden in "NormalDistribution" (code copied from "BitsStreamGenerator") and "BetaDistribution".
---
 .../AbstractRealDistribution.java             |  29 +++-
 .../math4/distribution/BetaDistribution.java  | 143 +++++++++++-------
 .../distribution/NormalDistribution.java      |  42 +++++
 .../math4/distribution/RealDistribution.java  |  25 +++
 .../distribution/BetaDistributionTest.java    |  19 ++-
 .../ConstantRealDistributionTest.java         |   9 ++
 .../RealDistributionAbstractTest.java         |  24 +++
 7 files changed, 228 insertions(+), 63 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
index e43a0fa4b0..4afdb6d451 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
@@ -25,6 +25,7 @@
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -32,10 +33,18 @@
  * Default implementations are provided for some of the methods
  * that do not vary from distribution to distribution.
  *
+ * <p>
+ * This base class provides a default factory method for creating
+ * a {@link RealDistribution.Sampler sampler instance} that uses the
+ * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling">
+ * inversion method</a> for generating random samples that follow the
+ * distribution.
+ * </p>
+ *
  * @since 3.0
  */
 public abstract class AbstractRealDistribution
-implements RealDistribution, Serializable {
+    implements RealDistribution, Serializable {
     /** Default absolute accuracy for inverse cumulative computation. */
     public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
     /** Serializable version identifier */
@@ -45,12 +54,14 @@ public abstract class AbstractRealDistribution
      * RNG instance used to generate samples from the distribution.
      * @since 3.1
      */
+    @Deprecated
     protected final RandomGenerator random;
 
     /**
      * @param rng Random number generator.
      * @since 3.1
      */
+    @Deprecated
     protected AbstractRealDistribution(RandomGenerator rng) {
         random = rng;
     }
@@ -210,6 +221,7 @@ protected double getSolverAbsoluteAccuracy() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public void reseedRandomGenerator(long seed) {
         random.setSeed(seed);
     }
@@ -223,6 +235,7 @@ public void reseedRandomGenerator(long seed) {
      * </a>
      */
     @Override
+    @Deprecated
     public double sample() {
         return inverseCumulativeProbability(random.nextDouble());
     }
@@ -234,6 +247,7 @@ public double sample() {
      * {@link #sample()} in a loop.
      */
     @Override
+    @Deprecated
     public double[] sample(int sampleSize) {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
@@ -266,5 +280,16 @@ public double probability(double x) {
     public double logDensity(double x) {
         return FastMath.log(density(x));
     }
-}
 
+    /**{@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                return inverseCumulativeProbability(rng.nextDouble());
+            }
+        };
+    }
+}
diff --git a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
index c8440bd56f..3009abfe94 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
@@ -96,6 +97,7 @@ public BetaDistribution(double alpha, double beta, double inverseCumAccuracy) {
      * @param beta Second shape parameter (must be positive).
      * @since 3.3
      */
+    @Deprecated
     public BetaDistribution(RandomGenerator rng, double alpha, double beta) {
         this(rng, alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
@@ -111,6 +113,7 @@ public BetaDistribution(RandomGenerator rng, double alpha, double beta) {
      * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @since 3.1
      */
+    @Deprecated
     public BetaDistribution(RandomGenerator rng,
                             double alpha,
                             double beta,
@@ -267,69 +270,94 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc}
-    * <p>
-    * Sampling is performed using Cheng algorithms:
-    * </p>
-    * <p>
-    * R. C. H. Cheng, "Generating beta variates with nonintegral shape parameters.".
-    *                 Communications of the ACM, 21, 317–322, 1978.
-    * </p>
-    */
+    /**
+     * {@inheritDoc}
+     *
+     * Sampling is performed using Cheng's algorithm:
+     * <blockquote>
+     * <pre>
+     * R. C. H. Cheng,
+     * "Generating beta variates with nonintegral shape parameters",
+     * Communications of the ACM, 21, 317-322, 1978.
+     * </pre>
+     * </blockquote>
+     */
     @Override
-    public double sample() {
-        return ChengBetaSampler.sample(random, alpha, beta);
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new ChengBetaSampler(rng, alpha, beta);
     }
 
-    /** Utility class implementing Cheng's algorithms for beta distribution sampling.
-     * <p>
-     * R. C. H. Cheng, "Generating beta variates with nonintegral shape parameters.".
-     *                 Communications of the ACM, 21, 317–322, 1978.
-     * </p>
+    /**
+     * Utility class implementing Cheng's algorithms for beta distribution sampling.
+     *
+     * <blockquote>
+     * <pre>
+     * R. C. H. Cheng,
+     * "Generating beta variates with nonintegral shape parameters",
+     * Communications of the ACM, 21, 317-322, 1978.
+     * </pre>
+     * </blockquote>
+     *
      * @since 3.6
      */
-    private static final class ChengBetaSampler {
+    private static class ChengBetaSampler implements RealDistribution.Sampler {
+        /** RNG (uniform distribution. */
+        private final UniformRandomProvider rng;
+        /** First shape parameter. */
+        private final double alphaShape;
+        /** Second shape parameter. */
+        private final double betaShape;
 
         /**
-         * Returns one sample using Cheng's sampling algorithm.
-         * @param random random generator to use
-         * @param alpha distribution first shape parameter
-         * @param beta distribution second shape parameter
-         * @return sampled value
+         * Creates a sampler instance.
+         *
+         * @param rng Generator.
+         * @param alpha Distribution first shape parameter.
+         * @param beta Distribution second shape parameter.
          */
-        static double sample(RandomGenerator random, final double alpha, final double beta) {
-            final double a = FastMath.min(alpha, beta);
-            final double b = FastMath.max(alpha, beta);
+        ChengBetaSampler(UniformRandomProvider generator,
+                         double alpha,
+                         double beta) {
+            rng = generator;
+            alphaShape = alpha;
+            betaShape = beta;
+        }
+
+        /** {@inheritDoc} */
+        @Override
+        public double sample() {
+            final double a = FastMath.min(alphaShape, betaShape);
+            final double b = FastMath.max(alphaShape, betaShape);
 
             if (a > 1) {
-                return algorithmBB(random, alpha, a, b);
+                return algorithmBB(alphaShape, a, b);
             } else {
-                return algorithmBC(random, alpha, b, a);
+                return algorithmBC(alphaShape, b, a);
             }
         }
 
         /**
-         * Returns one sample using Cheng's BB algorithm, when both &alpha; and &beta; are greater than 1.
-         * @param random random generator to use
-         * @param a0 distribution first shape parameter (&alpha;)
-         * @param a min(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
-         * @param b max(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
-         * @return sampled value
+         * Computes one sample using Cheng's BB algorithm, when &alpha; and
+         * &beta; are both larger than 1.
+         *
+         * @param a0 First shape parameter (&alpha;).
+         * @param a Min(&alpha;, &beta;) where &alpha;, &beta; are the shape parameters.
+         * @param b Max(&alpha;, &beta;) where &alpha;, &beta; are the shape parameters.
+         * @return a random sample.
          */
-        private static double algorithmBB(RandomGenerator random,
-                                          final double a0,
-                                          final double a,
-                                          final double b) {
+        private double algorithmBB(double a0,
+                                   double a,
+                                   double b) {
             final double alpha = a + b;
-            final double beta = FastMath.sqrt((alpha - 2.) / (2. * a * b - alpha));
-            final double gamma = a + 1. / beta;
+            final double beta = FastMath.sqrt((alpha - 2) / (2 * a * b - alpha));
+            final double gamma = a + 1 / beta;
 
             double r;
             double w;
             double t;
             do {
-                final double u1 = random.nextDouble();
-                final double u2 = random.nextDouble();
+                final double u1 = rng.nextDouble();
+                final double u2 = rng.nextDouble();
                 final double v = beta * (FastMath.log(u1) - FastMath.log1p(-u1));
                 w = a * FastMath.exp(v);
                 final double z = u1 * u1 * u2;
@@ -346,31 +374,32 @@ private static double algorithmBB(RandomGenerator random,
             } while (r + alpha * (FastMath.log(alpha) - FastMath.log(b + w)) < t);
 
             w = FastMath.min(w, Double.MAX_VALUE);
+
             return Precision.equals(a, a0) ? w / (b + w) : b / (b + w);
         }
 
         /**
-         * Returns one sample using Cheng's BC algorithm, when at least one of &alpha; and &beta; is smaller than 1.
-         * @param random random generator to use
-         * @param a0 distribution first shape parameter (&alpha;)
-         * @param a max(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
-         * @param b min(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
-         * @return sampled value
+         * Computes one sample using Cheng's BC algorithm, when at least one
+         * of &alpha; and &beta; is smaller than 1.
+         *
+         * @param a0 First shape parameter (&alpha;).
+         * @param a Max(&alpha;, &beta;) where &alpha;, &beta; are the shape parameters.
+         * @param b min(&alpha;, &beta;) where &alpha;, &beta; are the shape parameters.
+         * @return a random sample.
          */
-        private static double algorithmBC(RandomGenerator random,
-                                          final double a0,
-                                          final double a,
-                                          final double b) {
+        private double algorithmBC(double a0,
+                                   double a,
+                                   double b) {
             final double alpha = a + b;
-            final double beta = 1. / b;
-            final double delta = 1. + a - b;
+            final double beta = 1 / b;
+            final double delta = 1 + a - b;
             final double k1 = delta * (0.0138889 + 0.0416667 * b) / (a * beta - 0.777778);
             final double k2 = 0.25 + (0.5 + 0.25 / delta) * b;
 
             double w;
-            for (;;) {
-                final double u1 = random.nextDouble();
-                final double u2 = random.nextDouble();
+            while (true) {
+                final double u1 = rng.nextDouble();
+                final double u2 = rng.nextDouble();
                 final double y = u1 * u2;
                 final double z = u1 * y;
                 if (u1 < 0.5) {
@@ -397,8 +426,8 @@ private static double algorithmBC(RandomGenerator random,
             }
 
             w = FastMath.min(w, Double.MAX_VALUE);
+
             return Precision.equals(a, a0) ? w / (b + w) : b / (b + w);
         }
-
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
index 52168672a2..01de515c25 100644
--- a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
@@ -23,6 +23,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Erf;
 import org.apache.commons.math4.util.FastMath;
 
@@ -116,6 +117,7 @@ public NormalDistribution(double mean, double sd, double inverseCumAccuracy)
      * @throws NotStrictlyPositiveException if {@code sd <= 0}.
      * @since 3.3
      */
+    @Deprecated
     public NormalDistribution(RandomGenerator rng, double mean, double sd)
         throws NotStrictlyPositiveException {
         this(rng, mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
@@ -131,6 +133,7 @@ public NormalDistribution(RandomGenerator rng, double mean, double sd)
      * @throws NotStrictlyPositiveException if {@code sd <= 0}.
      * @since 3.1
      */
+    @Deprecated
     public NormalDistribution(RandomGenerator rng,
                               double mean,
                               double sd,
@@ -291,7 +294,46 @@ public boolean isSupportConnected() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public double sample()  {
         return standardDeviation * random.nextGaussian() + mean;
     }
+
+    /** {@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** Next gaussian. */
+            private double nextGaussian = Double.NaN;
+
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                final double random;
+                if (Double.isNaN(nextGaussian)) {
+                    // Generate a pair of Gaussian numbers.
+
+                    final double x = rng.nextDouble();
+                    final double y = rng.nextDouble();
+                    final double alpha = 2 * FastMath.PI * x;
+                    final double r = FastMath.sqrt(-2 * FastMath.log(y));
+
+                    // Return the first element of the generated pair.
+                    random = r * FastMath.cos(alpha);
+
+                    // Keep second element of the pair for next invocation.
+                    nextGaussian = r * FastMath.sin(alpha);
+                } else {
+                    // Use the second element of the pair (generated at the
+                    // previous invocation).
+                    random = nextGaussian;
+
+                    // Both elements of the pair have been used.
+                    nextGaussian = Double.NaN;
+                }
+
+                return standardDeviation * random + mean;
+            }
+        };
+    }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
index 5ba3717104..f0e453aa6e 100644
--- a/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
@@ -18,6 +18,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Base interface for distributions on the reals.
@@ -164,6 +165,7 @@ public interface RealDistribution {
      *
      * @param seed the new seed
      */
+    @Deprecated
     void reseedRandomGenerator(long seed);
 
     /**
@@ -171,6 +173,7 @@ public interface RealDistribution {
      *
      * @return a random value.
      */
+    @Deprecated
     double sample();
 
     /**
@@ -181,5 +184,27 @@ public interface RealDistribution {
      * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
      * if {@code sampleSize} is not positive
      */
+    @Deprecated
     double[] sample(int sampleSize);
+
+    /**
+     * Creates a sampler.
+     *
+     * @param rng Generator of uniformly distributed numbers.
+     * @return a sampler that produces random numbers according this
+     * distribution.
+     */
+    Sampler createSampler(UniformRandomProvider rng);
+
+    /**
+     * Sampling functionality.
+     */
+    interface Sampler {
+        /**
+         * Generates a random value sampled from this distribution.
+         *
+         * @return a random value.
+         */
+        double sample();
+    }
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
index 632e99fcd7..d3e167d4bb 100644
--- a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
@@ -22,6 +22,8 @@
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well1024a;
 import org.apache.commons.math4.random.Well19937a;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.stat.StatUtils;
 import org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest;
 import org.apache.commons.math4.stat.inference.TestUtils;
@@ -340,13 +342,23 @@ public void testMomentsSampling() {
 
     @Test
     public void testGoodnessOfFit() {
-        RandomGenerator random = new Well19937a(0x237db1db907b089fl);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_A,
+                                                              123456789L);
+        final RandomGenerator random = new Well19937a(0x237db1db907b089fL);
+
         final int numSamples = 1000;
         final double level = 0.01;
         for (final double alpha : alphaBetas) {
             for (final double beta : alphaBetas) {
-                final BetaDistribution betaDistribution = new BetaDistribution(random, alpha, beta);
-                final double[] observed = betaDistribution.sample(numSamples);
+                final BetaDistribution betaDistribution = new BetaDistribution(alpha, beta);
+
+                final RealDistribution.Sampler sampler = betaDistribution.createSampler(rng);
+                final double[] observed = new double[numSamples];
+
+                for (int i = 0; i < numSamples; i++) {
+                    observed[i] = sampler.sample();
+                }
+
                 Assert.assertFalse("G goodness-of-fit test rejected null at alpha = " + level,
                                    gTest(betaDistribution, observed) < level);
                 Assert.assertFalse("KS goodness-of-fit test rejected null at alpha = " + level,
@@ -377,5 +389,4 @@ private double gTest(final RealDistribution expectedDistribution, final double[]
 
         return TestUtils.gTest(expected, observed);
     }
-
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
index 2d65447520..275d29a4b4 100644
--- a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
@@ -83,11 +83,20 @@ public void testMeanVariance() {
     }
 
     @Test
+    @Override
     public void testSampling() {
         ConstantRealDistribution dist = new ConstantRealDistribution(0);
         for (int i = 0; i < 10; i++) {
             Assert.assertEquals(0, dist.sample(), 0);
         }
+    }
 
+    @Test
+    @Override
+    public void testSampler() {
+        ConstantRealDistribution dist = new ConstantRealDistribution(0);
+        for (int i = 0; i < 10; i++) {
+            Assert.assertEquals(0, dist.sample(), 0);
+        }
     }
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
index 9fffeaf6a1..fa1542fbef 100644
--- a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
@@ -32,6 +32,7 @@
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.junit.After;
 import org.junit.Assert;
@@ -339,6 +340,29 @@ public void testSampling() {
         TestUtils.assertChiSquareAccept(expected, counts, 0.001);
     }
 
+
+    // New design
+    @Test
+    public void testSampler() {
+        final int sampleSize = 1000;
+        final RealDistribution.Sampler sampler =
+            distribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 123456789L));
+
+        final double[] sample = new double[sampleSize];
+        for (int i = 0; i < sampleSize; i++) {
+            sample[i] = sampler.sample();
+        }
+
+        final double[] quartiles = TestUtils.getDistributionQuartiles(distribution);
+        final double[] expected = {250, 250, 250, 250};
+        final long[] counts = new long[4];
+
+        for (int i = 0; i < sampleSize; i++) {
+            TestUtils.updateCounts(sample[i], counts, quartiles);
+        }
+        TestUtils.assertChiSquareAccept(expected, counts, 0.001);
+    }
+
     /**
      * Verify that density integrals match the distribution.
      * The (filtered, sorted) cumulativeTestPoints array is used to source

From 7530b4bdceef0ef37af252f0b97978554fb9b99f Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 04:14:57 +0100
Subject: [PATCH 03/21] MATH-1158.

Syntactic sugar.
---
 .../distribution/AbstractRealDistribution.java  | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
index 4afdb6d451..f584253f20 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
@@ -281,6 +281,23 @@ public double logDensity(double x) {
         return FastMath.log(density(x));
     }
 
+    /**
+     * Utility function for allocating an array and filling it with {@code n}
+     * samples generated by the given {@code sampler}.
+     *
+     * @param n Number of samples.
+     * @param sampler Sampler.
+     * @return an array of size {@code n}.
+     */
+    public static double[] sample(int n,
+                                  RealDistribution.Sampler sampler) {
+        final double[] samples = new double[n];
+        for (int i = 0; i < n; i++) {
+            samples[i] = sampler.sample();
+        }
+        return samples;
+    }
+
     /**{@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {

From a6eda3d8eff423ecb4901aa07339364732c02ddf Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 04:38:30 +0100
Subject: [PATCH 04/21] MATH-1158.

Utility method instead of explicit loop.
---
 .../math4/distribution/BetaDistributionTest.java   | 14 ++++++--------
 .../distribution/RealDistributionAbstractTest.java |  7 +------
 2 files changed, 7 insertions(+), 14 deletions(-)

diff --git a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
index d3e167d4bb..373271d0cc 100644
--- a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
@@ -321,12 +321,14 @@ public void testMoments() {
 
     @Test
     public void testMomentsSampling() {
-        RandomGenerator random = new Well1024a(0x7829862c82fec2dal);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_1024_A,
+                                                              123456789L);
         final int numSamples = 1000;
         for (final double alpha : alphaBetas) {
             for (final double beta : alphaBetas) {
-                final BetaDistribution betaDistribution = new BetaDistribution(random, alpha, beta);
-                final double[] observed = new BetaDistribution(alpha, beta).sample(numSamples);
+                final BetaDistribution betaDistribution = new BetaDistribution(alpha, beta);
+                final double[] observed = AbstractRealDistribution.sample(numSamples,
+                                                                          betaDistribution.createSampler(rng));
                 Arrays.sort(observed);
 
                 final String distribution = String.format("Beta(%.2f, %.2f)", alpha, beta);
@@ -353,11 +355,7 @@ public void testGoodnessOfFit() {
                 final BetaDistribution betaDistribution = new BetaDistribution(alpha, beta);
 
                 final RealDistribution.Sampler sampler = betaDistribution.createSampler(rng);
-                final double[] observed = new double[numSamples];
-
-                for (int i = 0; i < numSamples; i++) {
-                    observed[i] = sampler.sample();
-                }
+                final double[] observed = AbstractRealDistribution.sample(numSamples, sampler);
 
                 Assert.assertFalse("G goodness-of-fit test rejected null at alpha = " + level,
                                    gTest(betaDistribution, observed) < level);
diff --git a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
index fa1542fbef..61d01ffeb1 100644
--- a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
@@ -347,12 +347,7 @@ public void testSampler() {
         final int sampleSize = 1000;
         final RealDistribution.Sampler sampler =
             distribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 123456789L));
-
-        final double[] sample = new double[sampleSize];
-        for (int i = 0; i < sampleSize; i++) {
-            sample[i] = sampler.sample();
-        }
-
+        final double[] sample = AbstractRealDistribution.sample(sampleSize, sampler);
         final double[] quartiles = TestUtils.getDistributionQuartiles(distribution);
         final double[] expected = {250, 250, 250, 250};
         final long[] counts = new long[4];

From a5035d0e1cde068320984d789473e1140adefdc0 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 04:48:18 +0100
Subject: [PATCH 05/21] MATH-1158.

Sampler functionality defined in "EnumeratedDistribution".
Method "createSampler" overridden in "EnumeratedRealDistribution".
---
 .../distribution/EnumeratedDistribution.java  | 116 ++++++++++++++++++
 .../EnumeratedRealDistribution.java           |  20 +++
 .../EnumeratedRealDistributionTest.java       |   6 +-
 3 files changed, 140 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
index 8e1149f0db..40af6e4d00 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
@@ -31,6 +31,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.Pair;
 
@@ -59,6 +60,7 @@ public class EnumeratedDistribution<T> implements Serializable {
     /**
      * RNG instance used to generate samples from the distribution.
      */
+    @Deprecated
     protected final RandomGenerator random;
 
     /**
@@ -113,6 +115,7 @@ public EnumeratedDistribution(final List<Pair<T, Double>> pmf)
      * @throws NotANumberException if any of the probabilities are NaN.
      * @throws MathArithmeticException all of the probabilities are 0.
      */
+    @Deprecated
     public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf)
         throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {
         random = rng;
@@ -151,6 +154,7 @@ public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Doub
      *
      * @param seed the new seed
      */
+    @Deprecated
     public void reseedRandomGenerator(long seed) {
         random.setSeed(seed);
     }
@@ -205,6 +209,7 @@ public List<Pair<T, Double>> getPmf() {
      *
      * @return a random value.
      */
+    @Deprecated
     public T sample() {
         final double randomValue = random.nextDouble();
 
@@ -233,6 +238,7 @@ public T sample() {
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
+    @Deprecated
     public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
@@ -262,6 +268,7 @@ public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
      * @throws NullArgumentException if {@code array} is null
      */
+    @Deprecated
     public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
@@ -288,4 +295,113 @@ public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveExc
 
     }
 
+    /**
+     * Creates a {@link Sampler}.
+     *
+     * @param rng Random number generator.
+     */
+    public Sampler createSampler(final UniformRandomProvider rng) {
+        return new Sampler(rng);
+    }
+
+    /**
+     * Sampler functionality.
+     */
+    public class Sampler {
+        /** RNG. */
+        private final UniformRandomProvider random;
+
+        /**
+         * @param rng Random number generator.
+         */
+        Sampler(UniformRandomProvider rng) {
+            random = rng;
+        }
+
+        /**
+         * Generates a random value sampled from this distribution.
+         *
+         * @return a random value.
+         */
+        public T sample() {
+            final double randomValue = random.nextDouble();
+
+            int index = Arrays.binarySearch(cumulativeProbabilities, randomValue);
+            if (index < 0) {
+                index = -index - 1;
+            }
+
+            if (index >= 0 &&
+                index < probabilities.length &&
+                randomValue < cumulativeProbabilities[index]) {
+                return singletons.get(index);
+            }
+
+            // This should never happen, but it ensures we will return a correct
+            // object in case there is some floating point inequality problem
+            // wrt the cumulative probabilities.
+            return singletons.get(singletons.size() - 1);
+        }
+
+        /**
+         * Generates a random sample from the distribution.
+         *
+         * @param sampleSize the number of random values to generate.
+         * @return an array representing the random sample.
+         * @throws NotStrictlyPositiveException if {@code sampleSize} is not
+         * positive.
+         */
+        public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
+            if (sampleSize <= 0) {
+                throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+                                                       sampleSize);
+            }
+
+            final Object[] out = new Object[sampleSize];
+
+            for (int i = 0; i < sampleSize; i++) {
+                out[i] = sample();
+            }
+
+            return out;
+        }
+
+        /**
+         * Generates a random sample from the distribution.
+         * <p>
+         * If the requested samples fit in the specified array, it is returned
+         * therein. Otherwise, a new array is allocated with the runtime type of
+         * the specified array and the size of this collection.
+         *
+         * @param sampleSize the number of random values to generate.
+         * @param array the array to populate.
+         * @return an array representing the random sample.
+         * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
+         * @throws NullArgumentException if {@code array} is null
+         */
+        public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveException {
+            if (sampleSize <= 0) {
+                throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
+            }
+
+            if (array == null) {
+                throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
+            }
+
+            T[] out;
+            if (array.length < sampleSize) {
+                @SuppressWarnings("unchecked") // safe as both are of type T
+                final T[] unchecked = (T[]) Array.newInstance(array.getClass().getComponentType(), sampleSize);
+                out = unchecked;
+            } else {
+                out = array;
+            }
+
+            for (int i = 0; i < sampleSize; i++) {
+                out[i] = sample();
+            }
+
+            return out;
+        }
+    }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
index 688b3fda46..9e03b2bb79 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
@@ -30,6 +30,7 @@
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
 /**
@@ -93,6 +94,7 @@ public EnumeratedRealDistribution(final double[] singletons, final double[] prob
      * @throws NotANumberException if any of the probabilities are NaN.
      * @throws MathArithmeticException all of the probabilities are 0.
      */
+    @Deprecated
     public EnumeratedRealDistribution(final RandomGenerator rng,
                                     final double[] singletons, final double[] probabilities)
         throws DimensionMismatchException, NotPositiveException, MathArithmeticException,
@@ -111,6 +113,7 @@ public EnumeratedRealDistribution(final RandomGenerator rng,
      * @param data input dataset
      * @since 3.6
      */
+    @Deprecated
     public EnumeratedRealDistribution(final RandomGenerator rng, final double[] data) {
         super(rng);
         final Map<Double, Integer> dataMap = new HashMap<Double, Integer>();
@@ -319,7 +322,24 @@ public boolean isSupportConnected() {
      * {@inheritDoc}
      */
     @Override
+    @Deprecated
     public double sample() {
         return innerDistribution.sample();
     }
+
+    /** {@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** Delegate. */
+            private final EnumeratedDistribution<Double>.Sampler inner =
+                innerDistribution.createSampler(rng);
+
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                return inner.sample();
+            }
+        };
+    }
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
index f1cf6521d3..0300e5e14b 100644
--- a/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
@@ -30,6 +30,7 @@
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Pair;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -175,8 +176,9 @@ public void testIsSupportConnected() {
     @Test
     public void testSample() {
         final int n = 1000000;
-        testDistribution.reseedRandomGenerator(-334759360); // fixed seed
-        final double[] samples = testDistribution.sample(n);
+        final RealDistribution.Sampler sampler =
+            testDistribution.createSampler(RandomSource.create(RandomSource.WELL_1024_A, -123456789));
+        final double[] samples = AbstractRealDistribution.sample(n, sampler);
         Assert.assertEquals(n, samples.length);
         double sum = 0;
         double sumOfSquares = 0;

From dff43a0530a6fbd524e3af24795cf6b92142735c Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Fri, 11 Mar 2016 12:43:15 +0100
Subject: [PATCH 06/21] MATH-1158.

Use new sampler API.
---
 .../neuralnet/FeatureInitializerFactory.java  | 14 +++++++-------
 .../sofm/TravellingSalesmanSolver.java        | 19 ++++++++++---------
 2 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java b/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
index 1729e42533..9c36dd3947 100644
--- a/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
+++ b/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
@@ -21,7 +21,8 @@
 import org.apache.commons.math4.analysis.function.Constant;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
-import org.apache.commons.math4.random.RandomGenerator;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Creates functions that will select the initial values of a neuron's
@@ -45,10 +46,10 @@ private FeatureInitializerFactory() {}
      * @throws org.apache.commons.math4.exception.NumberIsTooLargeException
      * if {@code min >= max}.
      */
-    public static FeatureInitializer uniform(final RandomGenerator rng,
+    public static FeatureInitializer uniform(final UniformRandomProvider rng,
                                              final double min,
                                              final double max) {
-        return randomize(new UniformRealDistribution(rng, min, max),
+        return randomize(new UniformRealDistribution(min, max).createSampler(rng),
                          function(new Constant(0), 0, 0));
     }
 
@@ -64,8 +65,7 @@ public static FeatureInitializer uniform(final RandomGenerator rng,
      */
     public static FeatureInitializer uniform(final double min,
                                              final double max) {
-        return randomize(new UniformRealDistribution(min, max),
-                         function(new Constant(0), 0, 0));
+        return uniform(RandomSource.create(RandomSource.WELL_19937_C), min, max);
     }
 
     /**
@@ -98,12 +98,12 @@ public double value() {
     /**
      * Adds some amount of random data to the given initializer.
      *
-     * @param random Random variable distribution.
+     * @param random Random variable distribution sampler.
      * @param orig Original initializer.
      * @return an initializer whose {@link FeatureInitializer#value() value}
      * method will return {@code orig.value() + random.sample()}.
      */
-    public static FeatureInitializer randomize(final RealDistribution random,
+    public static FeatureInitializer randomize(final RealDistribution.Sampler random,
                                                final FeatureInitializer orig) {
         return new FeatureInitializer() {
             /** {@inheritDoc} */
diff --git a/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java b/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
index fea0f162ba..ebd4200da9 100644
--- a/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
+++ b/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
@@ -44,8 +44,8 @@
 import org.apache.commons.math4.ml.neuralnet.sofm.LearningFactorFunctionFactory;
 import org.apache.commons.math4.ml.neuralnet.sofm.NeighbourhoodSizeFunction;
 import org.apache.commons.math4.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well44497b;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -56,7 +56,7 @@
 public class TravellingSalesmanSolver {
     private static final long FIRST_NEURON_ID = 0;
     /** RNG. */
-    private final RandomGenerator random;
+    private final UniformRandomProvider random;
     /** Set of cities. */
     private final Set<City> cities = new HashSet<City>();
     /** SOFM. */
@@ -72,7 +72,7 @@ public class TravellingSalesmanSolver {
      */
     public TravellingSalesmanSolver(City[] cityList,
                                     double numNeuronsPerCity) {
-        this(cityList, numNeuronsPerCity, new Well44497b().nextLong());
+        this(cityList, numNeuronsPerCity, RandomSource.createLong());
     }
 
     /**
@@ -84,7 +84,7 @@ public TravellingSalesmanSolver(City[] cityList,
     public TravellingSalesmanSolver(City[] cityList,
                                     double numNeuronsPerCity,
                                     long seed) {
-        random = new Well44497b(seed);
+        random = RandomSource.create(RandomSource.WELL_1024_A, seed);
 
         // Make sure that each city will appear only once in the list.
         for (City city : cityList) {
@@ -338,12 +338,13 @@ private FeatureInitializer[] makeInitializers() {
         final UnivariateFunction f1 = FunctionUtils.add(h1, new Constant(centre[0]));
         final UnivariateFunction f2 = FunctionUtils.add(h2, new Constant(centre[1]));
 
-        final RealDistribution u
-            = new UniformRealDistribution(random, -0.05 * radius, 0.05 * radius);
+        final RealDistribution u = new UniformRealDistribution(-0.05 * radius, 0.05 * radius);
 
         return new FeatureInitializer[] {
-            FeatureInitializerFactory.randomize(u, FeatureInitializerFactory.function(f1, 0, 1)),
-            FeatureInitializerFactory.randomize(u, FeatureInitializerFactory.function(f2, 0, 1))
+            FeatureInitializerFactory.randomize(u.createSampler(random),
+                                                FeatureInitializerFactory.function(f1, 0, 1)),
+            FeatureInitializerFactory.randomize(u.createSampler(random),
+                                                FeatureInitializerFactory.function(f2, 0, 1))
         };
     }
 }

From 1d5f8faa87a410fdd1141ad82f270ac238293770 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 02:14:04 +0100
Subject: [PATCH 07/21] MATH-1158.

Method "createSampler" overridden in "UniformRealDistribution".
---
 .../distribution/UniformRealDistribution.java    | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
index 5a54a8b2f7..704aa97655 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
@@ -22,6 +22,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Implementation of the uniform real distribution.
@@ -83,6 +84,7 @@ public UniformRealDistribution(double lower, double upper)
      * @throws NumberIsTooLargeException if {@code lower >= upper}.
      * @since 3.1
      */
+    @Deprecated
     public UniformRealDistribution(RandomGenerator rng,
                                    double lower,
                                    double upper)
@@ -192,8 +194,22 @@ public boolean isSupportConnected() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public double sample()  {
         final double u = random.nextDouble();
         return u * upper + (1 - u) * lower;
     }
+
+    /** {@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                final double u = random.nextDouble();
+                return u * upper + (1 - u) * lower;
+            }
+        };
+    }
 }

From 82f4ce516c18ef5fb3096f6a90455fce90a5b290 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 02:31:13 +0100
Subject: [PATCH 08/21] MATH-1158.

Method "createSampler" overridden in "ConstantRealDistribution".
---
 .../ConstantRealDistribution.java             | 20 +++++++++++++++++++
 .../ConstantRealDistributionTest.java         |  5 +++--
 2 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
index 35854a4027..862fe7551d 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
@@ -18,6 +18,7 @@
 package org.apache.commons.math4.distribution;
 
 import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Implementation of the constant real distribution.
@@ -106,6 +107,7 @@ public boolean isSupportConnected() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public double sample()  {
         return value;
     }
@@ -115,5 +117,23 @@ public double sample()  {
      * @param seed (ignored)
      */
     @Override
+    @Deprecated
     public void reseedRandomGenerator(long seed) {}
+
+    /**
+     * {@inheritDoc}
+     *
+     * @param rng Not used: distribution contains a single value.
+     * @return the value of the distribution.
+     */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                return value;
+            }
+        };
+    }
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
index 275d29a4b4..211a6703ef 100644
--- a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
@@ -94,9 +94,10 @@ public void testSampling() {
     @Test
     @Override
     public void testSampler() {
-        ConstantRealDistribution dist = new ConstantRealDistribution(0);
+        final double value = 12.345;
+        final RealDistribution.Sampler sampler = new ConstantRealDistribution(value).createSampler(null);
         for (int i = 0; i < 10; i++) {
-            Assert.assertEquals(0, dist.sample(), 0);
+            Assert.assertEquals(value, sampler.sample(), 0);
         }
     }
 }

From 228b49fe2afea3376c4f30f80bdeb70d083a9206 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 02:38:42 +0100
Subject: [PATCH 09/21] MATH-1158.

Method "createSampler" overridden in "ParetoDistribution".
---
 .../math4/distribution/ParetoDistribution.java  | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
index 3f3fbb2294..bd074faa52 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
@@ -21,6 +21,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -117,6 +118,7 @@ public ParetoDistribution(double scale, double shape, double inverseCumAccuracy)
      * @param shape Shape parameter of this distribution.
      * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
      */
+    @Deprecated
     public ParetoDistribution(RandomGenerator rng, double scale, double shape)
         throws NotStrictlyPositiveException {
         this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
@@ -131,6 +133,7 @@ public ParetoDistribution(RandomGenerator rng, double scale, double shape)
      * @param inverseCumAccuracy Inverse cumulative probability accuracy.
      * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
      */
+    @Deprecated
     public ParetoDistribution(RandomGenerator rng,
                               double scale,
                               double shape,
@@ -295,8 +298,22 @@ public boolean isSupportConnected() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public double sample()  {
         final double n = random.nextDouble();
         return scale / FastMath.pow(n, 1 / shape);
     }
+
+    /** {@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                final double n = rng.nextDouble();
+                return scale / FastMath.pow(n, 1 / shape);
+            }
+        };
+    }
 }

From adfa016f3ef7ff262643e0f0a5a54d3ddb7d7e1d Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 03:12:06 +0100
Subject: [PATCH 10/21] MATH-1158.

Method "createSampler" overridden in "ExponentialDistribution".
---
 .../distribution/ExponentialDistribution.java | 59 +++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
index 95b24e70e1..133321e36c 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
@@ -21,6 +21,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.ResizableDoubleArray;
@@ -134,6 +135,7 @@ public ExponentialDistribution(double mean, double inverseCumAccuracy) {
      * @throws NotStrictlyPositiveException if {@code mean <= 0}.
      * @since 3.3
      */
+    @Deprecated
     public ExponentialDistribution(RandomGenerator rng, double mean)
         throws NotStrictlyPositiveException {
         this(rng, mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
@@ -150,6 +152,7 @@ public ExponentialDistribution(RandomGenerator rng, double mean)
      * @throws NotStrictlyPositiveException if {@code mean <= 0}.
      * @since 3.1
      */
+    @Deprecated
     public ExponentialDistribution(RandomGenerator rng,
                                    double mean,
                                    double inverseCumAccuracy)
@@ -243,6 +246,7 @@ public double inverseCumulativeProbability(double p) throws OutOfRangeException
      * @since 2.2
      */
     @Override
+    @Deprecated
     public double sample() {
         // Step 1:
         double a = 0;
@@ -345,4 +349,59 @@ public double getSupportUpperBound() {
     public boolean isSupportConnected() {
         return true;
     }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Sampling algorithm uses the
+     *  <a href="http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html">
+     *   inversion method</a> to generate exponentially distributed
+     *  random values from uniform deviates.
+     * </p>
+     */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                // Step 1:
+                double a = 0;
+                double u = rng.nextDouble();
+
+                // Step 2 and 3:
+                while (u < 0.5) {
+                    a += EXPONENTIAL_SA_QI[0];
+                    u *= 2;
+                }
+
+                // Step 4 (now u >= 0.5):
+                u += u - 1;
+
+                // Step 5:
+                if (u <= EXPONENTIAL_SA_QI[0]) {
+                    return mean * (a + u);
+                }
+
+                // Step 6:
+                int i = 0; // Should be 1, be we iterate before it in while using 0
+                double u2 = rng.nextDouble();
+                double umin = u2;
+
+                // Step 7 and 8:
+                do {
+                    ++i;
+                    u2 = rng.nextDouble();
+
+                    if (u2 < umin) {
+                        umin = u2;
+                    }
+
+                    // Step 8:
+                } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1
+
+                return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
+            }
+        };
+    }
 }

From f72b5e65c0c5210cc0be585959ae84fdbc87aced Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 03:12:31 +0100
Subject: [PATCH 11/21] MATH-1158.

Method "createSampler" overridden in "GammaDistribution".
---
 .../math4/distribution/GammaDistribution.java | 104 ++++++++++++++++++
 1 file changed, 104 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
index ac231e3673..2377df79b7 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
 
@@ -152,6 +153,7 @@ public GammaDistribution(double shape, double scale, double inverseCumAccuracy)
      * {@code scale <= 0}.
      * @since 3.3
      */
+    @Deprecated
     public GammaDistribution(RandomGenerator rng, double shape, double scale)
         throws NotStrictlyPositiveException {
         this(rng, shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
@@ -170,6 +172,7 @@ public GammaDistribution(RandomGenerator rng, double shape, double scale)
      * {@code scale <= 0}.
      * @since 3.1
      */
+    @Deprecated
     public GammaDistribution(RandomGenerator rng,
                              double shape,
                              double scale,
@@ -419,6 +422,7 @@ public boolean isSupportConnected() {
      * @return random value sampled from the Gamma(shape, scale) distribution
      */
     @Override
+    @Deprecated
     public double sample()  {
         if (shape < 1) {
             // [1]: p. 228, Algorithm GS
@@ -483,4 +487,104 @@ public double sample()  {
             }
         }
     }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * Sampling algorithms:
+     * <ul>
+     *  <li>
+     *   For {@code 0 < shape < 1}:
+     *   <blockquote>
+     *    Ahrens, J. H. and Dieter, U.,
+     *    <i>Computer methods for sampling from gamma, beta, Poisson and binomial distributions,</i>
+     *    Computing, 12, 223-246, 1974.
+     *   </blockquote>
+     *  </li>
+     *  <li>
+     *  For {@code shape >= 1}:
+     *   <blockquote>
+     *   Marsaglia and Tsang, <i>A Simple Method for Generating
+     *   Gamma Variables.</i> ACM Transactions on Mathematical Software,
+     *   Volume 26 Issue 3, September, 2000.
+     *   </blockquote>
+     *  </li>
+     * </ul>
+     * </p>
+     */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** Gaussian sampling. */
+            final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
+
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                if (shape < 1) {
+                    // [1]: p. 228, Algorithm GS
+
+                    while (true) {
+                        // Step 1:
+                        final double u = rng.nextDouble();
+                        final double bGS = 1 + shape / FastMath.E;
+                        final double p = bGS * u;
+
+                        if (p <= 1) {
+                            // Step 2:
+
+                            final double x = FastMath.pow(p, 1 / shape);
+                            final double u2 = rng.nextDouble();
+
+                            if (u2 > FastMath.exp(-x)) {
+                                // Reject
+                                continue;
+                            } else {
+                                return scale * x;
+                            }
+                        } else {
+                            // Step 3:
+
+                            final double x = -1 * FastMath.log((bGS - p) / shape);
+                            final double u2 = rng.nextDouble();
+
+                            if (u2 > FastMath.pow(x, shape - 1)) {
+                                // Reject
+                                continue;
+                            } else {
+                                return scale * x;
+                            }
+                        }
+                    }
+                }
+
+                // Now shape >= 1
+
+                final double d = shape - 0.333333333333333333;
+                final double c = 1 / (3 * FastMath.sqrt(d));
+
+                while (true) {
+                    final double x = gaussian.sample();
+                    final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
+
+                    if (v <= 0) {
+                        continue;
+                    }
+
+                    final double x2 = x * x;
+                    final double u = rng.nextDouble();
+
+                    // Squeeze
+                    if (u < 1 - 0.0331 * x2 * x2) {
+                        return scale * d * v;
+                    }
+
+                    if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
+                        return scale * d * v;
+                    }
+                }
+            }
+        };
+    }
 }

From 26d668f6d5a2f202ef7ff6a73ff3cbd7bbdf4b06 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 12 Mar 2016 03:12:54 +0100
Subject: [PATCH 12/21] MATH-1158.

Method "createSampler" overridden in "LogNormalDistribution".
---
 .../distribution/LogNormalDistribution.java   | 20 +++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
index 58504ee252..8bec045e4a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
@@ -22,6 +22,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Erf;
 import org.apache.commons.math4.util.FastMath;
 
@@ -143,6 +144,7 @@ public LogNormalDistribution(double scale, double shape, double inverseCumAccura
      * @throws NotStrictlyPositiveException if {@code shape <= 0}.
      * @since 3.3
      */
+    @Deprecated
     public LogNormalDistribution(RandomGenerator rng, double scale, double shape)
         throws NotStrictlyPositiveException {
         this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
@@ -158,6 +160,7 @@ public LogNormalDistribution(RandomGenerator rng, double scale, double shape)
      * @throws NotStrictlyPositiveException if {@code shape <= 0}.
      * @since 3.1
      */
+    @Deprecated
     public LogNormalDistribution(RandomGenerator rng,
                                  double scale,
                                  double shape,
@@ -345,8 +348,25 @@ public boolean isSupportConnected() {
 
     /** {@inheritDoc} */
     @Override
+    @Deprecated
     public double sample()  {
         final double n = random.nextGaussian();
         return FastMath.exp(scale + shape * n);
     }
+
+    /** {@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new RealDistribution.Sampler() {
+            /** Gaussian sampling. */
+            final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
+
+            /** {@inheritDoc} */
+            @Override
+            public double sample() {
+                final double n = random.nextGaussian();
+                return FastMath.exp(scale + shape * n);
+            }
+        };
+    }
 }

From 9867d9f2817fd6dd20d458022de3dda8c3b43b2f Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Wed, 16 Mar 2016 16:46:51 +0100
Subject: [PATCH 13/21] MATH-1158

Using the new sampler API.
Deprecate old API (including the now obsolete constructors).

Apart from the main focus of the issue (distribution classes), this change also had an impact on:
 * some of test classes that use random numbers (where the tolerance may have its value updated when it is highly sensitive on the RNG seed)
 * statistical inference tests that use a distribution but not the RNG (cf. MATH-1124) which now deprecated code passed to its contructor.
 * classes in package "o.a.c.m.random" that depend on some of the distributions
---
 .../AbstractRealDistribution.java             |  14 +--
 .../math4/distribution/BetaDistribution.java  |  55 +-------
 .../distribution/CauchyDistribution.java      |  61 ++-------
 .../distribution/ChiSquaredDistribution.java  |  47 +------
 .../ConstantRealDistribution.java             |   1 -
 .../distribution/EnumeratedDistribution.java  |  67 +++++-----
 .../EnumeratedRealDistribution.java           |  73 +++--------
 .../distribution/ExponentialDistribution.java |  58 +--------
 .../math4/distribution/FDistribution.java     |  65 +---------
 .../math4/distribution/GammaDistribution.java |  68 +---------
 .../distribution/GumbelDistribution.java      |  27 +---
 .../distribution/LaplaceDistribution.java     |  27 +---
 .../math4/distribution/LevyDistribution.java  |  31 +----
 .../distribution/LogNormalDistribution.java   |  66 +---------
 .../distribution/LogisticDistribution.java    |  30 +----
 .../distribution/NakagamiDistribution.java    |  46 ++-----
 .../distribution/NormalDistribution.java      |  67 +---------
 .../distribution/ParetoDistribution.java      |  60 +--------
 .../distribution/PoissonDistribution.java     |  16 +--
 .../math4/distribution/TDistribution.java     |  58 +--------
 .../distribution/TriangularDistribution.java  |  37 +-----
 .../distribution/UniformRealDistribution.java |  40 +-----
 .../distribution/WeibullDistribution.java     |  65 +---------
 .../math4/random/EmpiricalDistribution.java   |  40 ++++--
 .../math4/random/RandomDataGenerator.java     | 109 +++++++++++++---
 .../commons/math4/random/ValueServer.java     |   4 +-
 .../math4/stat/inference/ChiSquareTest.java   |   4 +-
 .../commons/math4/stat/inference/GTest.java   |   6 +-
 .../stat/inference/KolmogorovSmirnovTest.java |  42 ++++---
 .../stat/inference/MannWhitneyUTest.java      |   2 +-
 .../math4/stat/inference/OneWayAnova.java     |   4 +-
 .../commons/math4/stat/inference/TTest.java   |   6 +-
 .../inference/WilcoxonSignedRankTest.java     |   2 +-
 .../AkimaSplineInterpolatorTest.java          |  11 +-
 .../BicubicInterpolatingFunctionTest.java     |  11 +-
 .../BicubicInterpolatorTest.java              |  11 +-
 ...icubicSplineInterpolatingFunctionTest.java |  13 +-
 ...iecewiseBicubicSplineInterpolatorTest.java |  17 +--
 .../TricubicInterpolatingFunctionTest.java    |  13 +-
 .../AbstractRealDistributionTest.java         |   4 +-
 .../distribution/BetaDistributionTest.java    |   4 +-
 .../ConstantRealDistributionTest.java         |   9 --
 .../EnumeratedRealDistributionTest.java       |   4 +-
 .../distribution/LevyDistributionTest.java    |   3 +-
 .../RealDistributionAbstractTest.java         |  28 ++---
 .../math4/filter/KalmanFilterTest.java        |  10 +-
 .../LevenbergMarquardtOptimizerTest.java      |   2 +-
 .../RandomCirclePointGenerator.java           |  20 ++-
 .../RandomStraightLinePointGenerator.java     |  15 ++-
 .../random/EmpiricalDistributionTest.java     | 118 +++++++++++-------
 .../rank/PSquarePercentileTest.java           |   7 +-
 .../stat/descriptive/rank/PercentileTest.java |  27 ++--
 .../inference/KolmogorovSmirnovTestTest.java  |  33 ++---
 53 files changed, 490 insertions(+), 1168 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
index f584253f20..1f6c006f75 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
@@ -48,23 +48,15 @@ public abstract class AbstractRealDistribution
     /** Default absolute accuracy for inverse cumulative computation. */
     public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
     /** Serializable version identifier */
-    private static final long serialVersionUID = -38038050983108802L;
+    private static final long serialVersionUID = 20160311L;
 
     /**
      * RNG instance used to generate samples from the distribution.
      * @since 3.1
+     * XXX: hard-coded value to prevent "NullPointerException".
      */
     @Deprecated
-    protected final RandomGenerator random;
-
-    /**
-     * @param rng Random number generator.
-     * @since 3.1
-     */
-    @Deprecated
-    protected AbstractRealDistribution(RandomGenerator rng) {
-        random = rng;
-    }
+    protected final RandomGenerator random = new org.apache.commons.math4.random.Well19937c();
 
     /**
      * For a random variable {@code X} whose values are distributed according
diff --git a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
index 3009abfe94..0644eb128a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
@@ -18,8 +18,6 @@
 
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.special.Gamma;
@@ -39,7 +37,7 @@ public class BetaDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier. */
-    private static final long serialVersionUID = -1221965979403477668L;
+    private static final long serialVersionUID = 20160311L;
     /** First shape parameter. */
     private final double alpha;
     /** Second shape parameter. */
@@ -52,14 +50,7 @@ public class BetaDistribution extends AbstractRealDistribution {
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a new instance.
      *
      * @param alpha First shape parameter (must be positive).
      * @param beta Second shape parameter (must be positive).
@@ -69,57 +60,19 @@ public BetaDistribution(double alpha, double beta) {
     }
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a new instance.
      *
      * @param alpha First shape parameter (must be positive).
      * @param beta Second shape parameter (must be positive).
      * @param inverseCumAccuracy Maximum absolute error in inverse
      * cumulative probability estimates (defaults to
      * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @since 2.1
-     */
-    public BetaDistribution(double alpha, double beta, double inverseCumAccuracy) {
-        this(new Well19937c(), alpha, beta, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a &beta; distribution.
-     *
-     * @param rng Random number generator.
-     * @param alpha First shape parameter (must be positive).
-     * @param beta Second shape parameter (must be positive).
-     * @since 3.3
-     */
-    @Deprecated
-    public BetaDistribution(RandomGenerator rng, double alpha, double beta) {
-        this(rng, alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a &beta; distribution.
      *
-     * @param rng Random number generator.
-     * @param alpha First shape parameter (must be positive).
-     * @param beta Second shape parameter (must be positive).
-     * @param inverseCumAccuracy Maximum absolute error in inverse
-     * cumulative probability estimates (defaults to
-     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @since 3.1
      */
-    @Deprecated
-    public BetaDistribution(RandomGenerator rng,
-                            double alpha,
+    public BetaDistribution(double alpha,
                             double beta,
                             double inverseCumAccuracy) {
-        super(rng);
-
         this.alpha = alpha;
         this.beta = beta;
         z = Double.NaN;
diff --git a/src/main/java/org/apache/commons/math4/distribution/CauchyDistribution.java b/src/main/java/org/apache/commons/math4/distribution/CauchyDistribution.java
index 39870fb68a..a16cf22a02 100644
--- a/src/main/java/org/apache/commons/math4/distribution/CauchyDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/CauchyDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -37,7 +35,7 @@ public class CauchyDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier */
-    private static final long serialVersionUID = 8589540077390120676L;
+    private static final long serialVersionUID = 20160311L;
     /** The median of this distribution. */
     private final double median;
     /** The scale of this distribution. */
@@ -54,75 +52,30 @@ public CauchyDistribution() {
     }
 
     /**
-     * Creates a Cauchy distribution using the given median and scale.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param median Median for this distribution.
      * @param scale Scale parameter for this distribution.
-     */
-    public CauchyDistribution(double median, double scale) {
-        this(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a Cauchy distribution using the given median and scale.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param median Median for this distribution.
-     * @param scale Scale parameter for this distribution.
-     * @param inverseCumAccuracy Maximum absolute error in inverse
-     * cumulative probability estimates
-     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code scale <= 0}.
-     * @since 2.1
      */
-    public CauchyDistribution(double median, double scale,
-                              double inverseCumAccuracy) {
-        this(new Well19937c(), median, scale, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a Cauchy distribution.
-     *
-     * @param rng Random number generator.
-     * @param median Median for this distribution.
-     * @param scale Scale parameter for this distribution.
-     * @throws NotStrictlyPositiveException if {@code scale <= 0}.
-     * @since 3.3
-     */
-    public CauchyDistribution(RandomGenerator rng, double median, double scale) {
-        this(rng, median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+    public CauchyDistribution(double median,
+                              double scale) {
+        this(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
     /**
-     * Creates a Cauchy distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param median Median for this distribution.
      * @param scale Scale parameter for this distribution.
      * @param inverseCumAccuracy Maximum absolute error in inverse
      * cumulative probability estimates
      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code scale <= 0}.
-     * @since 3.1
      */
-    public CauchyDistribution(RandomGenerator rng,
-                              double median,
+    public CauchyDistribution(double median,
                               double scale,
                               double inverseCumAccuracy) {
-        super(rng);
         if (scale <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/ChiSquaredDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ChiSquaredDistribution.java
index b91754bbbe..afd35c0bf3 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ChiSquaredDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ChiSquaredDistribution.java
@@ -16,9 +16,6 @@
  */
 package org.apache.commons.math4.distribution;
 
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
-
 /**
  * Implementation of the chi-squared distribution.
  *
@@ -32,14 +29,14 @@ public class ChiSquaredDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier */
-    private static final long serialVersionUID = -8352658048349159782L;
+    private static final long serialVersionUID = 20160311L;
     /** Internal Gamma distribution. */
     private final GammaDistribution gamma;
     /** Inverse cumulative probability accuracy */
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Create a Chi-Squared distribution with the given degrees of freedom.
+     * Creates distribution with the given degrees of freedom.
      *
      * @param degreesOfFreedom Degrees of freedom.
      */
@@ -48,54 +45,18 @@ public ChiSquaredDistribution(double degreesOfFreedom) {
     }
 
     /**
-     * Create a Chi-Squared distribution with the given degrees of freedom and
+     * Creates a distribution with the given degrees of freedom and
      * inverse cumulative probability accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
      * @param degreesOfFreedom Degrees of freedom.
      * @param inverseCumAccuracy the maximum absolute error in inverse
      * cumulative probability estimates (defaults to
      * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
+     *
      * @since 2.1
      */
     public ChiSquaredDistribution(double degreesOfFreedom,
                                   double inverseCumAccuracy) {
-        this(new Well19937c(), degreesOfFreedom, inverseCumAccuracy);
-    }
-
-    /**
-     * Create a Chi-Squared distribution with the given degrees of freedom.
-     *
-     * @param rng Random number generator.
-     * @param degreesOfFreedom Degrees of freedom.
-     * @since 3.3
-     */
-    public ChiSquaredDistribution(RandomGenerator rng, double degreesOfFreedom) {
-        this(rng, degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Create a Chi-Squared distribution with the given degrees of freedom and
-     * inverse cumulative probability accuracy.
-     *
-     * @param rng Random number generator.
-     * @param degreesOfFreedom Degrees of freedom.
-     * @param inverseCumAccuracy the maximum absolute error in inverse
-     * cumulative probability estimates (defaults to
-     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @since 3.1
-     */
-    public ChiSquaredDistribution(RandomGenerator rng,
-                                  double degreesOfFreedom,
-                                  double inverseCumAccuracy) {
-        super(rng);
-
         gamma = new GammaDistribution(degreesOfFreedom / 2, 2);
         solverAbsoluteAccuracy = inverseCumAccuracy;
     }
diff --git a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
index 862fe7551d..a9b3383bc8 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
@@ -39,7 +39,6 @@ public class ConstantRealDistribution extends AbstractRealDistribution {
      * @param value the constant value of this distribution
      */
     public ConstantRealDistribution(double value) {
-        super(null);  // Avoid creating RandomGenerator
         this.value = value;
     }
 
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
index 40af6e4d00..fd339b271e 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
@@ -30,7 +30,6 @@
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.Pair;
@@ -61,7 +60,7 @@ public class EnumeratedDistribution<T> implements Serializable {
      * RNG instance used to generate samples from the distribution.
      */
     @Deprecated
-    protected final RandomGenerator random;
+    protected RandomGenerator random = null;
 
     /**
      * List of random variable values.
@@ -81,45 +80,57 @@ public class EnumeratedDistribution<T> implements Serializable {
     private final double[] cumulativeProbabilities;
 
     /**
-     * Create an enumerated distribution using the given probability mass function
-     * enumeration.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param pmf probability mass function enumerated as a list of <T, probability>
-     * pairs.
-     * @throws NotPositiveException if any of the probabilities are negative.
-     * @throws NotFiniteNumberException if any of the probabilities are infinite.
-     * @throws NotANumberException if any of the probabilities are NaN.
-     * @throws MathArithmeticException all of the probabilities are 0.
+     * XXX TODO: remove once "EnumeratedIntegerDistribution" has been changed.
      */
-    public EnumeratedDistribution(final List<Pair<T, Double>> pmf)
+    @Deprecated
+    public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf)
         throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {
-        this(new Well19937c(), pmf);
+        random = rng;
+        singletons = new ArrayList<T>(pmf.size());
+        final double[] probs = new double[pmf.size()];
+
+        for (int i = 0; i < pmf.size(); i++) {
+            final Pair<T, Double> sample = pmf.get(i);
+            singletons.add(sample.getKey());
+            final double p = sample.getValue();
+            if (p < 0) {
+                throw new NotPositiveException(sample.getValue());
+            }
+            if (Double.isInfinite(p)) {
+                throw new NotFiniteNumberException(p);
+            }
+            if (Double.isNaN(p)) {
+                throw new NotANumberException();
+            }
+            probs[i] = p;
+        }
+
+        probabilities = MathArrays.normalizeArray(probs, 1.0);
+
+        cumulativeProbabilities = new double[probabilities.length];
+        double sum = 0;
+        for (int i = 0; i < probabilities.length; i++) {
+            sum += probabilities[i];
+            cumulativeProbabilities[i] = sum;
+        }
     }
 
     /**
      * Create an enumerated distribution using the given random number generator
      * and probability mass function enumeration.
      *
-     * @param rng random number generator.
-     * @param pmf probability mass function enumerated as a list of <T, probability>
-     * pairs.
+     * @param pmf probability mass function enumerated as a list of
+     * {@code <T, probability>} pairs.
      * @throws NotPositiveException if any of the probabilities are negative.
      * @throws NotFiniteNumberException if any of the probabilities are infinite.
      * @throws NotANumberException if any of the probabilities are NaN.
      * @throws MathArithmeticException all of the probabilities are 0.
      */
-    @Deprecated
-    public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf)
-        throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {
-        random = rng;
-
+    public EnumeratedDistribution(final List<Pair<T, Double>> pmf)
+        throws NotPositiveException,
+               MathArithmeticException,
+               NotFiniteNumberException,
+               NotANumberException {
         singletons = new ArrayList<T>(pmf.size());
         final double[] probs = new double[pmf.size()];
 
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
index 9e03b2bb79..7cf834bd47 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
@@ -28,8 +28,6 @@
 import org.apache.commons.math4.exception.NotFiniteNumberException;
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
@@ -37,7 +35,7 @@
  * <p>Implementation of a real-valued {@link EnumeratedDistribution}.
  *
  * <p>Values with zero-probability are allowed but they do not extend the
- * support.<br/>
+ * support.<br>
  * Duplicate values are allowed. Probabilities of duplicate values are combined
  * when computing cumulative probabilities and statistics.</p>
  *
@@ -46,7 +44,7 @@
 public class EnumeratedRealDistribution extends AbstractRealDistribution {
 
     /** Serializable UID. */
-    private static final long serialVersionUID = 20130308L;
+    private static final long serialVersionUID = 20160311L;
 
     /**
      * {@link EnumeratedDistribution} (using the {@link Double} wrapper)
@@ -54,37 +52,10 @@ public class EnumeratedRealDistribution extends AbstractRealDistribution {
      */
     protected final EnumeratedDistribution<Double> innerDistribution;
 
-    /**
-     * Create a discrete real-valued distribution using the given probability mass function
-     * enumeration.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param singletons array of random variable values.
-     * @param probabilities array of probabilities.
-     * @throws DimensionMismatchException if
-     * {@code singletons.length != probabilities.length}
-     * @throws NotPositiveException if any of the probabilities are negative.
-     * @throws NotFiniteNumberException if any of the probabilities are infinite.
-     * @throws NotANumberException if any of the probabilities are NaN.
-     * @throws MathArithmeticException all of the probabilities are 0.
-     */
-    public EnumeratedRealDistribution(final double[] singletons, final double[] probabilities)
-    throws DimensionMismatchException, NotPositiveException, MathArithmeticException,
-           NotFiniteNumberException, NotANumberException {
-        this(new Well19937c(), singletons, probabilities);
-    }
-
     /**
      * Create a discrete real-valued distribution using the given random number generator
      * and probability mass function enumeration.
      *
-     * @param rng random number generator.
      * @param singletons array of random variable values.
      * @param probabilities array of probabilities.
      * @throws DimensionMismatchException if
@@ -94,28 +65,23 @@ public EnumeratedRealDistribution(final double[] singletons, final double[] prob
      * @throws NotANumberException if any of the probabilities are NaN.
      * @throws MathArithmeticException all of the probabilities are 0.
      */
-    @Deprecated
-    public EnumeratedRealDistribution(final RandomGenerator rng,
-                                    final double[] singletons, final double[] probabilities)
-        throws DimensionMismatchException, NotPositiveException, MathArithmeticException,
-               NotFiniteNumberException, NotANumberException {
-        super(rng);
-
-        innerDistribution = new EnumeratedDistribution<Double>(
-                rng, createDistribution(singletons, probabilities));
+    public EnumeratedRealDistribution(final double[] singletons,
+                                      final double[] probabilities)
+        throws DimensionMismatchException,
+               NotPositiveException,
+               MathArithmeticException,
+               NotFiniteNumberException,
+               NotANumberException {
+        innerDistribution = new EnumeratedDistribution<Double>(createDistribution(singletons, probabilities));
     }
 
     /**
-     * Create a discrete real-valued distribution from the input data.  Values are assigned
-     * mass based on their frequency.
+     * Creates a discrete real-valued distribution from the input data.
+     * Values are assigned mass based on their frequency.
      *
-     * @param rng random number generator used for sampling
      * @param data input dataset
-     * @since 3.6
      */
-    @Deprecated
-    public EnumeratedRealDistribution(final RandomGenerator rng, final double[] data) {
-        super(rng);
+    public EnumeratedRealDistribution(final double[] data) {
         final Map<Double, Integer> dataMap = new HashMap<Double, Integer>();
         for (double value : data) {
             Integer count = dataMap.get(value);
@@ -134,20 +100,9 @@ public EnumeratedRealDistribution(final RandomGenerator rng, final double[] data
             probabilities[index] = entry.getValue().intValue() / denom;
             index++;
         }
-        innerDistribution = new EnumeratedDistribution<Double>(rng, createDistribution(values, probabilities));
+        innerDistribution = new EnumeratedDistribution<Double>(createDistribution(values, probabilities));
     }
 
-    /**
-     * Create a discrete real-valued distribution from the input data.  Values are assigned
-     * mass based on their frequency.  For example, [0,1,1,2] as input creates a distribution
-     * with values 0, 1 and 2 having probability masses 0.25, 0.5 and 0.25 respectively,
-     *
-     * @param data input dataset
-     * @since 3.6
-     */
-    public EnumeratedRealDistribution(final double[] data) {
-        this(new Well19937c(), data);
-    }
     /**
      * Create the list of Pairs representing the distribution from singletons and probabilities.
      *
diff --git a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
index 133321e36c..1dbd6b1818 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
@@ -39,7 +37,7 @@ public class ExponentialDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier */
-    private static final long serialVersionUID = 2401296428283614780L;
+    private static final long serialVersionUID = 20160311L;
     /**
      * Used when generating Exponential samples.
      * Table containing the constants
@@ -91,14 +89,7 @@ public class ExponentialDistribution extends AbstractRealDistribution {
     }
 
     /**
-     * Create an exponential distribution with the given mean.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mean mean of this distribution.
      */
@@ -107,58 +98,19 @@ public ExponentialDistribution(double mean) {
     }
 
     /**
-     * Create an exponential distribution with the given mean.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mean Mean of this distribution.
      * @param inverseCumAccuracy Maximum absolute error in inverse
      * cumulative probability estimates (defaults to
      * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code mean <= 0}.
-     * @since 2.1
-     */
-    public ExponentialDistribution(double mean, double inverseCumAccuracy) {
-        this(new Well19937c(), mean, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates an exponential distribution.
-     *
-     * @param rng Random number generator.
-     * @param mean Mean of this distribution.
-     * @throws NotStrictlyPositiveException if {@code mean <= 0}.
-     * @since 3.3
-     */
-    @Deprecated
-    public ExponentialDistribution(RandomGenerator rng, double mean)
-        throws NotStrictlyPositiveException {
-        this(rng, mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates an exponential distribution.
      *
-     * @param rng Random number generator.
-     * @param mean Mean of this distribution.
-     * @param inverseCumAccuracy Maximum absolute error in inverse
-     * cumulative probability estimates (defaults to
-     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @throws NotStrictlyPositiveException if {@code mean <= 0}.
-     * @since 3.1
+     * @since 2.1
      */
-    @Deprecated
-    public ExponentialDistribution(RandomGenerator rng,
-                                   double mean,
+    public ExponentialDistribution(double mean,
                                    double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (mean <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/FDistribution.java b/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
index 907d20187f..bcde9aab2c 100644
--- a/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
@@ -19,8 +19,6 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.util.FastMath;
 
@@ -50,14 +48,7 @@ public class FDistribution extends AbstractRealDistribution {
     private boolean numericalVarianceIsCalculated = false;
 
     /**
-     * Creates an F distribution using the given degrees of freedom.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a using the given degrees of freedom.
      *
      * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
      * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
@@ -73,69 +64,19 @@ public FDistribution(double numeratorDegreesOfFreedom,
     }
 
     /**
-     * Creates an F distribution using the given degrees of freedom
-     * and inverse cumulative probability accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
      * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
      * @param inverseCumAccuracy the maximum absolute error in inverse
      * cumulative probability estimates.
-     * @throws NotStrictlyPositiveException if
-     * {@code numeratorDegreesOfFreedom <= 0} or
-     * {@code denominatorDegreesOfFreedom <= 0}.
-     * @since 2.1
-     */
-    public FDistribution(double numeratorDegreesOfFreedom,
-                         double denominatorDegreesOfFreedom,
-                         double inverseCumAccuracy)
-        throws NotStrictlyPositiveException {
-        this(new Well19937c(), numeratorDegreesOfFreedom,
-             denominatorDegreesOfFreedom, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates an F distribution.
-     *
-     * @param rng Random number generator.
-     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
-     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
      * @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0} or
      * {@code denominatorDegreesOfFreedom <= 0}.
-     * @since 3.3
      */
-    public FDistribution(RandomGenerator rng,
-                         double numeratorDegreesOfFreedom,
-                         double denominatorDegreesOfFreedom)
-        throws NotStrictlyPositiveException {
-        this(rng, numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates an F distribution.
-     *
-     * @param rng Random number generator.
-     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
-     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
-     * @param inverseCumAccuracy the maximum absolute error in inverse
-     * cumulative probability estimates.
-     * @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0} or
-     * {@code denominatorDegreesOfFreedom <= 0}.
-     * @since 3.1
-     */
-    public FDistribution(RandomGenerator rng,
-                         double numeratorDegreesOfFreedom,
+    public FDistribution(double numeratorDegreesOfFreedom,
                          double denominatorDegreesOfFreedom,
                          double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (numeratorDegreesOfFreedom <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,
                                                    numeratorDegreesOfFreedom);
diff --git a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
index 2377df79b7..c50c9742a3 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
@@ -18,8 +18,6 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
@@ -37,7 +35,7 @@ public class GammaDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20120524L;
+    private static final long serialVersionUID = 20160311L;
     /** The shape parameter. */
     private final double shape;
     /** The scale parameter. */
@@ -99,70 +97,21 @@ public class GammaDistribution extends AbstractRealDistribution {
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Creates a new gamma distribution with specified values of the shape and
-     * scale parameters.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param shape the shape parameter
-     * @param scale the scale parameter
-     * @throws NotStrictlyPositiveException if {@code shape <= 0} or
-     * {@code scale <= 0}.
-     */
-    public GammaDistribution(double shape, double scale) throws NotStrictlyPositiveException {
-        this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a new gamma distribution with specified values of the shape and
-     * scale parameters.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param shape the shape parameter
      * @param scale the scale parameter
-     * @param inverseCumAccuracy the maximum absolute error in inverse
-     * cumulative probability estimates (defaults to
-     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code shape <= 0} or
      * {@code scale <= 0}.
-     * @since 2.1
      */
-    public GammaDistribution(double shape, double scale, double inverseCumAccuracy)
+    public GammaDistribution(double shape, double scale)
         throws NotStrictlyPositiveException {
-        this(new Well19937c(), shape, scale, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a Gamma distribution.
-     *
-     * @param rng Random number generator.
-     * @param shape the shape parameter
-     * @param scale the scale parameter
-     * @throws NotStrictlyPositiveException if {@code shape <= 0} or
-     * {@code scale <= 0}.
-     * @since 3.3
-     */
-    @Deprecated
-    public GammaDistribution(RandomGenerator rng, double shape, double scale)
-        throws NotStrictlyPositiveException {
-        this(rng, shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+        this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
     /**
-     * Creates a Gamma distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param shape the shape parameter
      * @param scale the scale parameter
      * @param inverseCumAccuracy the maximum absolute error in inverse
@@ -170,16 +119,11 @@ public GammaDistribution(RandomGenerator rng, double shape, double scale)
      * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code shape <= 0} or
      * {@code scale <= 0}.
-     * @since 3.1
      */
-    @Deprecated
-    public GammaDistribution(RandomGenerator rng,
-                             double shape,
+    public GammaDistribution(double shape,
                              double scale,
                              double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (shape <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/GumbelDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GumbelDistribution.java
index 0aa3fb2386..be06d09acc 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GumbelDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GumbelDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
@@ -35,7 +33,7 @@
 public class GumbelDistribution extends AbstractRealDistribution {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20141003;
+    private static final long serialVersionUID = 20160311L;
 
     /**
      * Approximation of Euler's constant
@@ -49,34 +47,13 @@ public class GumbelDistribution extends AbstractRealDistribution {
     private final double beta;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mu location parameter
      * @param beta scale parameter (must be positive)
      * @throws NotStrictlyPositiveException if {@code beta <= 0}
      */
     public GumbelDistribution(double mu, double beta) {
-        this(new Well19937c(), mu, beta);
-    }
-
-    /**
-     * Build a new instance.
-     *
-     * @param rng Random number generator
-     * @param mu location parameter
-     * @param beta scale parameter (must be positive)
-     * @throws NotStrictlyPositiveException if {@code beta <= 0}
-     */
-    public GumbelDistribution(RandomGenerator rng, double mu, double beta) {
-        super(rng);
-
         if (beta <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, beta);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/LaplaceDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LaplaceDistribution.java
index 7e41a29a7c..c85618ba42 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LaplaceDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LaplaceDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -33,7 +31,7 @@
 public class LaplaceDistribution extends AbstractRealDistribution {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20141003;
+    private static final long serialVersionUID = 20160311L;
 
     /** The location parameter. */
     private final double mu;
@@ -41,34 +39,13 @@ public class LaplaceDistribution extends AbstractRealDistribution {
     private final double beta;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mu location parameter
      * @param beta scale parameter (must be positive)
      * @throws NotStrictlyPositiveException if {@code beta <= 0}
      */
     public LaplaceDistribution(double mu, double beta) {
-        this(new Well19937c(), mu, beta);
-    }
-
-    /**
-     * Build a new instance.
-     *
-     * @param rng Random number generator
-     * @param mu location parameter
-     * @param beta scale parameter (must be positive)
-     * @throws NotStrictlyPositiveException if {@code beta <= 0}
-     */
-    public LaplaceDistribution(RandomGenerator rng, double mu, double beta) {
-        super(rng);
-
         if (beta <= 0.0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_SCALE, beta);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/LevyDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LevyDistribution.java
index 5f55c83dd3..a8d5793677 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LevyDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LevyDistribution.java
@@ -17,8 +17,6 @@
 package org.apache.commons.math4.distribution;
 
 import org.apache.commons.math4.exception.OutOfRangeException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Erf;
 import org.apache.commons.math4.util.FastMath;
 
@@ -31,7 +29,7 @@
 public class LevyDistribution extends AbstractRealDistribution {
 
     /** Serializable UID. */
-    private static final long serialVersionUID = 20130314L;
+    private static final long serialVersionUID = 20630311L;
 
     /** Location parameter. */
     private final double mu;
@@ -43,33 +41,14 @@ public class LevyDistribution extends AbstractRealDistribution {
     private final double halfC;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
-     * @param mu location parameter
-     * @param c scale parameter
-     * @since 3.4
-     */
-    public LevyDistribution(final double mu, final double c) {
-        this(new Well19937c(), mu, c);
-    }
-
-    /**
-     * Creates a LevyDistribution.
-     * @param rng random generator to be used for sampling
      * @param mu location
      * @param c scale parameter
      */
-    public LevyDistribution(final RandomGenerator rng, final double mu, final double c) {
-        super(rng);
-        this.mu    = mu;
-        this.c     = c;
+    public LevyDistribution(final double mu, final double c) {
+        this.mu = mu;
+        this.c = c;
         this.halfC = 0.5 * c;
     }
 
diff --git a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
index 8bec045e4a..eafb90e8f2 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
@@ -20,8 +20,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Erf;
 import org.apache.commons.math4.util.FastMath;
@@ -78,96 +76,40 @@ public class LogNormalDistribution extends AbstractRealDistribution {
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Create a log-normal distribution, where the mean and standard deviation
+     * Creates a log-normal distribution, where the mean and standard deviation
      * of the {@link NormalDistribution normally distributed} natural
      * logarithm of the log-normal distribution are equal to zero and one
      * respectively. In other words, the scale of the returned distribution is
      * {@code 0}, while its shape is {@code 1}.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      */
     public LogNormalDistribution() {
         this(0, 1);
     }
 
-    /**
-     * Create a log-normal distribution using the specified scale and shape.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param scale the scale parameter of this distribution
-     * @param shape the shape parameter of this distribution
-     * @throws NotStrictlyPositiveException if {@code shape <= 0}.
-     */
-    public LogNormalDistribution(double scale, double shape)
-        throws NotStrictlyPositiveException {
-        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Create a log-normal distribution using the specified scale, shape and
-     * inverse cumulative distribution accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param scale the scale parameter of this distribution
-     * @param shape the shape parameter of this distribution
-     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
-     * @throws NotStrictlyPositiveException if {@code shape <= 0}.
-     */
-    public LogNormalDistribution(double scale, double shape, double inverseCumAccuracy)
-        throws NotStrictlyPositiveException {
-        this(new Well19937c(), scale, shape, inverseCumAccuracy);
-    }
-
     /**
      * Creates a log-normal distribution.
      *
-     * @param rng Random number generator.
      * @param scale Scale parameter of this distribution.
      * @param shape Shape parameter of this distribution.
      * @throws NotStrictlyPositiveException if {@code shape <= 0}.
-     * @since 3.3
      */
-    @Deprecated
-    public LogNormalDistribution(RandomGenerator rng, double scale, double shape)
+    public LogNormalDistribution(double scale, double shape)
         throws NotStrictlyPositiveException {
-        this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
     /**
      * Creates a log-normal distribution.
      *
-     * @param rng Random number generator.
      * @param scale Scale parameter of this distribution.
      * @param shape Shape parameter of this distribution.
      * @param inverseCumAccuracy Inverse cumulative probability accuracy.
      * @throws NotStrictlyPositiveException if {@code shape <= 0}.
-     * @since 3.1
      */
-    @Deprecated
-    public LogNormalDistribution(RandomGenerator rng,
-                                 double scale,
+    public LogNormalDistribution(double scale,
                                  double shape,
                                  double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (shape <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/LogisticDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LogisticDistribution.java
index 14c2a9887b..1c69804bd6 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LogisticDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LogisticDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
@@ -35,7 +33,7 @@
 public class LogisticDistribution extends AbstractRealDistribution {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20141003;
+    private static final long serialVersionUID = 20160311L;
 
     /** The location parameter. */
     private final double mu;
@@ -43,34 +41,14 @@ public class LogisticDistribution extends AbstractRealDistribution {
     private final double s;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mu location parameter
      * @param s scale parameter (must be positive)
      * @throws NotStrictlyPositiveException if {@code beta <= 0}
      */
-    public LogisticDistribution(double mu, double s) {
-        this(new Well19937c(), mu, s);
-    }
-
-    /**
-     * Build a new instance.
-     *
-     * @param rng Random number generator
-     * @param mu location parameter
-     * @param s scale parameter (must be positive)
-     * @throws NotStrictlyPositiveException if {@code beta <= 0}
-     */
-    public LogisticDistribution(RandomGenerator rng, double mu, double s) {
-        super(rng);
-
+    public LogisticDistribution(double mu,
+                                double s) {
         if (s <= 0.0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_SCALE, s);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/NakagamiDistribution.java b/src/main/java/org/apache/commons/math4/distribution/NakagamiDistribution.java
index fa8b0f5bc5..5f7e405a11 100644
--- a/src/main/java/org/apache/commons/math4/distribution/NakagamiDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/NakagamiDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
 
@@ -37,7 +35,7 @@ public class NakagamiDistribution extends AbstractRealDistribution {
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20141003;
+    private static final long serialVersionUID = 20160311L;
 
     /** The shape parameter. */
     private final double mu;
@@ -47,33 +45,20 @@ public class NakagamiDistribution extends AbstractRealDistribution {
     private final double inverseAbsoluteAccuracy;
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mu shape parameter
      * @param omega scale parameter (must be positive)
      * @throws NumberIsTooSmallException if {@code mu < 0.5}
      * @throws NotStrictlyPositiveException if {@code omega <= 0}
      */
-    public NakagamiDistribution(double mu, double omega) {
+    public NakagamiDistribution(double mu,
+                                double omega) {
         this(mu, omega, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
     /**
-     * Build a new instance.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mu shape parameter
      * @param omega scale parameter (must be positive)
@@ -82,24 +67,9 @@ public NakagamiDistribution(double mu, double omega) {
      * @throws NumberIsTooSmallException if {@code mu < 0.5}
      * @throws NotStrictlyPositiveException if {@code omega <= 0}
      */
-    public NakagamiDistribution(double mu, double omega, double inverseAbsoluteAccuracy) {
-        this(new Well19937c(), mu, omega, inverseAbsoluteAccuracy);
-    }
-
-    /**
-     * Build a new instance.
-     *
-     * @param rng Random number generator
-     * @param mu shape parameter
-     * @param omega scale parameter (must be positive)
-     * @param inverseAbsoluteAccuracy the maximum absolute error in inverse
-     * cumulative probability estimates (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @throws NumberIsTooSmallException if {@code mu < 0.5}
-     * @throws NotStrictlyPositiveException if {@code omega <= 0}
-     */
-    public NakagamiDistribution(RandomGenerator rng, double mu, double omega, double inverseAbsoluteAccuracy) {
-        super(rng);
-
+    public NakagamiDistribution(double mu,
+                                double omega,
+                                double inverseAbsoluteAccuracy) {
         if (mu < 0.5) {
             throw new NumberIsTooSmallException(mu, 0.5, true);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
index 01de515c25..a8330d5e75 100644
--- a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
@@ -21,8 +21,6 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Erf;
 import org.apache.commons.math4.util.FastMath;
@@ -55,92 +53,37 @@ public class NormalDistribution extends AbstractRealDistribution {
     /**
      * Create a normal distribution with mean equal to zero and standard
      * deviation equal to one.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      */
     public NormalDistribution() {
         this(0, 1);
     }
 
     /**
-     * Create a normal distribution using the given mean and standard deviation.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param mean Mean for this distribution.
      * @param sd Standard deviation for this distribution.
      * @throws NotStrictlyPositiveException if {@code sd <= 0}.
      */
-    public NormalDistribution(double mean, double sd)
+    public NormalDistribution(double mean,
+                              double sd)
         throws NotStrictlyPositiveException {
         this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
-    /**
-     * Create a normal distribution using the given mean, standard deviation and
-     * inverse cumulative distribution accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param mean Mean for this distribution.
-     * @param sd Standard deviation for this distribution.
-     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
-     * @throws NotStrictlyPositiveException if {@code sd <= 0}.
-     * @since 2.1
-     */
-    public NormalDistribution(double mean, double sd, double inverseCumAccuracy)
-        throws NotStrictlyPositiveException {
-        this(new Well19937c(), mean, sd, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a normal distribution.
-     *
-     * @param rng Random number generator.
-     * @param mean Mean for this distribution.
-     * @param sd Standard deviation for this distribution.
-     * @throws NotStrictlyPositiveException if {@code sd <= 0}.
-     * @since 3.3
-     */
-    @Deprecated
-    public NormalDistribution(RandomGenerator rng, double mean, double sd)
-        throws NotStrictlyPositiveException {
-        this(rng, mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
 
     /**
-     * Creates a normal distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param mean Mean for this distribution.
      * @param sd Standard deviation for this distribution.
      * @param inverseCumAccuracy Inverse cumulative probability accuracy.
      * @throws NotStrictlyPositiveException if {@code sd <= 0}.
-     * @since 3.1
      */
-    @Deprecated
-    public NormalDistribution(RandomGenerator rng,
-                              double mean,
+    public NormalDistribution(double mean,
                               double sd,
                               double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (sd <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
index bd074faa52..2174322316 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
@@ -19,8 +19,6 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
@@ -52,7 +50,7 @@ public class ParetoDistribution extends AbstractRealDistribution {
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20130424;
+    private static final long serialVersionUID = 20160311L;
 
     /** The scale parameter of this distribution. */
     private final double scale;
@@ -64,83 +62,37 @@ public class ParetoDistribution extends AbstractRealDistribution {
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Create a Pareto distribution with a scale of {@code 1} and a shape of {@code 1}.
+     * Creates a Pareto distribution with a scale of {@code 1} and a shape of {@code 1}.
      */
     public ParetoDistribution() {
         this(1, 1);
     }
 
     /**
-     * Create a Pareto distribution using the specified scale and shape.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a Pareto distribution.
      *
      * @param scale the scale parameter of this distribution
      * @param shape the shape parameter of this distribution
      * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
      */
-    public ParetoDistribution(double scale, double shape)
+    public ParetoDistribution(double scale,
+                              double shape)
         throws NotStrictlyPositiveException {
         this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
     }
 
-    /**
-     * Create a Pareto distribution using the specified scale, shape and
-     * inverse cumulative distribution accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param scale the scale parameter of this distribution
-     * @param shape the shape parameter of this distribution
-     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
-     * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
-     */
-    public ParetoDistribution(double scale, double shape, double inverseCumAccuracy)
-        throws NotStrictlyPositiveException {
-        this(new Well19937c(), scale, shape, inverseCumAccuracy);
-    }
-
     /**
      * Creates a Pareto distribution.
      *
-     * @param rng Random number generator.
-     * @param scale Scale parameter of this distribution.
-     * @param shape Shape parameter of this distribution.
-     * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
-     */
-    @Deprecated
-    public ParetoDistribution(RandomGenerator rng, double scale, double shape)
-        throws NotStrictlyPositiveException {
-        this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a Pareto distribution.
-     *
-     * @param rng Random number generator.
      * @param scale Scale parameter of this distribution.
      * @param shape Shape parameter of this distribution.
      * @param inverseCumAccuracy Inverse cumulative probability accuracy.
      * @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
      */
-    @Deprecated
-    public ParetoDistribution(RandomGenerator rng,
-                              double scale,
+    public ParetoDistribution(double scale,
                               double shape,
                               double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (scale <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
index 731a6ac370..6cb0129c04 100644
--- a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
@@ -24,6 +24,7 @@
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
+import org.apache.commons.math4.rng.RandomSource;
 
 /**
  * Implementation of the Poisson distribution.
@@ -47,7 +48,7 @@ public class PoissonDistribution extends AbstractIntegerDistribution {
     /** Distribution used to compute normal approximation. */
     private final NormalDistribution normal;
     /** Distribution needed for the {@link #sample()} method. */
-    private final ExponentialDistribution exponential;
+    private final RealDistribution.Sampler exponentialSampler;
     /** Mean of the distribution. */
     private final double mean;
 
@@ -130,10 +131,11 @@ public PoissonDistribution(RandomGenerator rng,
         this.maxIterations = maxIterations;
 
         // Use the same RNG instance as the parent class.
-        normal = new NormalDistribution(rng, p, FastMath.sqrt(p),
+        normal = new NormalDistribution(p, FastMath.sqrt(p),
                                         NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-        exponential = new ExponentialDistribution(rng, 1,
-                                                  ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+
+        // XXX TODO: RNG source should not be hard-coded.
+        exponentialSampler = new ExponentialDistribution(1).createSampler(RandomSource.create(RandomSource.WELL_19937_C));
     }
 
     /**
@@ -364,16 +366,16 @@ private long nextPoisson(double meanPoisson) {
                         continue;
                     }
                     y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
-                    final double e = exponential.sample();
+                    final double e = exponentialSampler.sample();
                     v = -e - (n * n / 2) + c1;
                 } else {
                     if (u > p1 + p2) {
                         y = lambda;
                         break;
                     } else {
-                        x = delta + (twolpd / delta) * exponential.sample();
+                        x = delta + (twolpd / delta) * exponentialSampler.sample();
                         y = FastMath.ceil(x);
-                        v = -exponential.sample() - delta * (x + 1) / twolpd;
+                        v = -exponentialSampler.sample() - delta * (x + 1) / twolpd;
                     }
                 }
                 a = x < 0 ? 1 : 0;
diff --git a/src/main/java/org/apache/commons/math4/distribution/TDistribution.java b/src/main/java/org/apache/commons/math4/distribution/TDistribution.java
index 302d476102..e51055626f 100644
--- a/src/main/java/org/apache/commons/math4/distribution/TDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/TDistribution.java
@@ -18,8 +18,6 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
@@ -37,7 +35,7 @@ public class TDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier */
-    private static final long serialVersionUID = -5852615386664158222L;
+    private static final long serialVersionUID = 20160311L;
     /** The degrees of freedom. */
     private final double degreesOfFreedom;
     /** Inverse cumulative probability accuracy. */
@@ -46,14 +44,7 @@ public class TDistribution extends AbstractRealDistribution {
     private final double factor;
 
     /**
-     * Create a t distribution using the given degrees of freedom.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param degreesOfFreedom Degrees of freedom.
      * @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
@@ -64,58 +55,17 @@ public TDistribution(double degreesOfFreedom)
     }
 
     /**
-     * Create a t distribution using the given degrees of freedom and the
-     * specified inverse cumulative probability absolute accuracy.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param degreesOfFreedom Degrees of freedom.
      * @param inverseCumAccuracy the maximum absolute error in inverse
      * cumulative probability estimates
      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
-     * @since 2.1
      */
-    public TDistribution(double degreesOfFreedom, double inverseCumAccuracy)
-        throws NotStrictlyPositiveException {
-        this(new Well19937c(), degreesOfFreedom, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a t distribution.
-     *
-     * @param rng Random number generator.
-     * @param degreesOfFreedom Degrees of freedom.
-     * @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
-     * @since 3.3
-     */
-    public TDistribution(RandomGenerator rng, double degreesOfFreedom)
-        throws NotStrictlyPositiveException {
-        this(rng, degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a t distribution.
-     *
-     * @param rng Random number generator.
-     * @param degreesOfFreedom Degrees of freedom.
-     * @param inverseCumAccuracy the maximum absolute error in inverse
-     * cumulative probability estimates
-     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
-     * @since 3.1
-     */
-    public TDistribution(RandomGenerator rng,
-                         double degreesOfFreedom,
+    public TDistribution(double degreesOfFreedom,
                          double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (degreesOfFreedom <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,
                                                    degreesOfFreedom);
diff --git a/src/main/java/org/apache/commons/math4/distribution/TriangularDistribution.java b/src/main/java/org/apache/commons/math4/distribution/TriangularDistribution.java
index 072f5c571b..4013c4769f 100644
--- a/src/main/java/org/apache/commons/math4/distribution/TriangularDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/TriangularDistribution.java
@@ -21,8 +21,6 @@
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -35,7 +33,7 @@
  */
 public class TriangularDistribution extends AbstractRealDistribution {
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20120112L;
+    private static final long serialVersionUID = 20160311L;
     /** Lower limit of this distribution (inclusive). */
     private final double a;
     /** Upper limit of this distribution (inclusive). */
@@ -46,31 +44,8 @@ public class TriangularDistribution extends AbstractRealDistribution {
     private final double solverAbsoluteAccuracy;
 
     /**
-     * Creates a triangular real distribution using the given lower limit,
-     * upper limit, and mode.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param a Lower limit of this distribution (inclusive).
-     * @param b Upper limit of this distribution (inclusive).
-     * @param c Mode of this distribution.
-     * @throws NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.
-     * @throws NumberIsTooSmallException if {@code c < a}.
-     */
-    public TriangularDistribution(double a, double c, double b)
-        throws NumberIsTooLargeException, NumberIsTooSmallException {
-        this(new Well19937c(), a, c, b);
-    }
-
-    /**
-     * Creates a triangular distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param a Lower limit of this distribution (inclusive).
      * @param b Upper limit of this distribution (inclusive).
      * @param c Mode of this distribution.
@@ -78,13 +53,11 @@ public TriangularDistribution(double a, double c, double b)
      * @throws NumberIsTooSmallException if {@code c < a}.
      * @since 3.1
      */
-    public TriangularDistribution(RandomGenerator rng,
-                                  double a,
+    public TriangularDistribution(double a,
                                   double c,
                                   double b)
-        throws NumberIsTooLargeException, NumberIsTooSmallException {
-        super(rng);
-
+        throws NumberIsTooLargeException,
+               NumberIsTooSmallException {
         if (a >= b) {
             throw new NumberIsTooLargeException(
                             LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
index 704aa97655..404cc02866 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
@@ -20,8 +20,6 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
@@ -34,7 +32,7 @@
  */
 public class UniformRealDistribution extends AbstractRealDistribution {
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20120109L;
+    private static final long serialVersionUID = 20160311L;
     /** Lower bound of this distribution (inclusive). */
     private final double lower;
     /** Upper bound of this distribution (exclusive). */
@@ -43,53 +41,21 @@ public class UniformRealDistribution extends AbstractRealDistribution {
     /**
      * Create a standard uniform real distribution with lower bound (inclusive)
      * equal to zero and upper bound (exclusive) equal to one.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      */
     public UniformRealDistribution() {
         this(0, 1);
     }
 
-    /**
-     * Create a uniform real distribution using the given lower and upper
-     * bounds.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param lower Lower bound of this distribution (inclusive).
-     * @param upper Upper bound of this distribution (exclusive).
-     * @throws NumberIsTooLargeException if {@code lower >= upper}.
-     */
-    public UniformRealDistribution(double lower, double upper)
-        throws NumberIsTooLargeException {
-        this(new Well19937c(), lower, upper);
-    }
-
     /**
      * Creates a uniform distribution.
      *
-     * @param rng Random number generator.
      * @param lower Lower bound of this distribution (inclusive).
      * @param upper Upper bound of this distribution (exclusive).
      * @throws NumberIsTooLargeException if {@code lower >= upper}.
-     * @since 3.1
      */
-    @Deprecated
-    public UniformRealDistribution(RandomGenerator rng,
-                                   double lower,
+    public UniformRealDistribution(double lower,
                                    double upper)
         throws NumberIsTooLargeException {
-        super(rng);
         if (lower >= upper) {
             throw new NumberIsTooLargeException(
                             LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
@@ -207,7 +173,7 @@ public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
             /** {@inheritDoc} */
             @Override
             public double sample() {
-                final double u = random.nextDouble();
+                final double u = rng.nextDouble();
                 return u * upper + (1 - u) * lower;
             }
         };
diff --git a/src/main/java/org/apache/commons/math4/distribution/WeibullDistribution.java b/src/main/java/org/apache/commons/math4/distribution/WeibullDistribution.java
index 893501ee37..844bf4a755 100644
--- a/src/main/java/org/apache/commons/math4/distribution/WeibullDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/WeibullDistribution.java
@@ -20,8 +20,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
 
@@ -33,7 +31,8 @@
  *
  * @see <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Weibull distribution (Wikipedia)</a>
  * @see <a href="http://mathworld.wolfram.com/WeibullDistribution.html">Weibull distribution (MathWorld)</a>
- * @since 1.1 (changed to concrete class in 3.0)
+ *
+ * @since 1.1
  */
 public class WeibullDistribution extends AbstractRealDistribution {
     /**
@@ -42,7 +41,7 @@ public class WeibullDistribution extends AbstractRealDistribution {
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 8589540077390120676L;
+    private static final long serialVersionUID = 20160311L;
     /** The shape parameter. */
     private final double shape;
     /** The scale parameter. */
@@ -59,15 +58,7 @@ public class WeibullDistribution extends AbstractRealDistribution {
     private boolean numericalVarianceIsCalculated = false;
 
     /**
-     * Create a Weibull distribution with the given shape and scale and a
-     * location equal to zero.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
+     * Creates a distribution.
      *
      * @param alpha Shape parameter.
      * @param beta Scale parameter.
@@ -80,63 +71,19 @@ public WeibullDistribution(double alpha, double beta)
     }
 
     /**
-     * Create a Weibull distribution with the given shape, scale and inverse
-     * cumulative probability accuracy and a location equal to zero.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param alpha Shape parameter.
-     * @param beta Scale parameter.
-     * @param inverseCumAccuracy Maximum absolute error in inverse
-     * cumulative probability estimates
-     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
-     * @throws NotStrictlyPositiveException if {@code alpha <= 0} or
-     * {@code beta <= 0}.
-     * @since 2.1
-     */
-    public WeibullDistribution(double alpha, double beta,
-                               double inverseCumAccuracy) {
-        this(new Well19937c(), alpha, beta, inverseCumAccuracy);
-    }
-
-    /**
-     * Creates a Weibull distribution.
-     *
-     * @param rng Random number generator.
-     * @param alpha Shape parameter.
-     * @param beta Scale parameter.
-     * @throws NotStrictlyPositiveException if {@code alpha <= 0} or {@code beta <= 0}.
-     * @since 3.3
-     */
-    public WeibullDistribution(RandomGenerator rng, double alpha, double beta)
-        throws NotStrictlyPositiveException {
-        this(rng, alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-    }
-
-    /**
-     * Creates a Weibull distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param alpha Shape parameter.
      * @param beta Scale parameter.
      * @param inverseCumAccuracy Maximum absolute error in inverse
      * cumulative probability estimates
      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
      * @throws NotStrictlyPositiveException if {@code alpha <= 0} or {@code beta <= 0}.
-     * @since 3.1
      */
-    public WeibullDistribution(RandomGenerator rng,
-                               double alpha,
+    public WeibullDistribution(double alpha,
                                double beta,
                                double inverseCumAccuracy)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (alpha <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE,
                                                    alpha);
diff --git a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java b/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
index 6d2722e133..926ad093c3 100644
--- a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
@@ -41,6 +41,8 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.stat.descriptive.StatisticalSummary;
 import org.apache.commons.math4.stat.descriptive.SummaryStatistics;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
@@ -112,6 +114,7 @@ public class EmpiricalDistribution extends AbstractRealDistribution {
     private static final long serialVersionUID = 5729073523949762654L;
 
     /** RandomDataGenerator instance to use in repeated calls to getNext() */
+    @Deprecated
     protected final RandomDataGenerator randomData;
 
     /** List of SummaryStatistics objects characterizing the bins */
@@ -152,8 +155,13 @@ public EmpiricalDistribution() {
      * @throws NotStrictlyPositiveException if {@code binCount <= 0}.
      */
     public EmpiricalDistribution(int binCount) {
-        this(binCount, new RandomDataGenerator());
-    }
+        if (binCount <= 0) {
+            throw new NotStrictlyPositiveException(binCount);
+        }
+        this.binCount = binCount;
+        binStats = new ArrayList<SummaryStatistics>();
+        randomData = null; // XXX remove
+     }
 
     /**
      * Creates a new EmpiricalDistribution with the specified bin count using the
@@ -164,8 +172,9 @@ public EmpiricalDistribution(int binCount) {
      * @throws NotStrictlyPositiveException if {@code binCount <= 0}.
      * @since 3.0
      */
+    @Deprecated
     public EmpiricalDistribution(int binCount, RandomGenerator generator) {
-        this(binCount, new RandomDataGenerator(generator));
+         this(binCount, new RandomDataGenerator(generator));
     }
 
     /**
@@ -175,8 +184,9 @@ public EmpiricalDistribution(int binCount, RandomGenerator generator) {
      * @param generator random data generator (may be null, resulting in default JDK generator)
      * @since 3.0
      */
+    @Deprecated
     public EmpiricalDistribution(RandomGenerator generator) {
-        this(DEFAULT_BIN_COUNT, generator);
+         this(DEFAULT_BIN_COUNT, generator);
     }
 
     /**
@@ -187,9 +197,9 @@ public EmpiricalDistribution(RandomGenerator generator) {
      * @param randomData Random data generator.
      * @throws NotStrictlyPositiveException if {@code binCount <= 0}.
      */
+    @Deprecated
     private EmpiricalDistribution(int binCount,
                                   RandomDataGenerator randomData) {
-        super(randomData.getRandomGenerator());
         if (binCount <= 0) {
             throw new NotStrictlyPositiveException(binCount);
         }
@@ -452,12 +462,11 @@ private int findBin(double value) {
      * @return the random value.
      * @throws MathIllegalStateException if the distribution has not been loaded
      */
+    @Deprecated
     public double getNextValue() throws MathIllegalStateException {
-
         if (!loaded) {
             throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
         }
-
         return sample();
     }
 
@@ -552,7 +561,9 @@ public boolean isLoaded() {
      *
      * @param seed random generator seed
      * @since 3.0
+     * XXX REMOVE
      */
+    @Deprecated
     public void reSeed(long seed) {
         randomData.reSeed(seed);
     }
@@ -736,10 +747,20 @@ public boolean isSupportConnected() {
      * @since 3.1
      */
     @Override
+    @Deprecated
     public void reseedRandomGenerator(long seed) {
         randomData.reSeed(seed);
     }
 
+    /**{@inheritDoc} */
+    @Override
+    public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        if (!loaded) {
+            throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
+        }
+        return super.createSampler(rng);
+    }
+
     /**
      * The probability of bin i.
      *
@@ -808,9 +829,8 @@ protected RealDistribution getKernel(SummaryStatistics bStats) {
         if (bStats.getN() == 1 || bStats.getVariance() == 0) {
             return new ConstantRealDistribution(bStats.getMean());
         } else {
-            return new NormalDistribution(randomData.getRandomGenerator(),
-                bStats.getMean(), bStats.getStandardDeviation(),
-                NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+            return new NormalDistribution(bStats.getMean(), bStats.getStandardDeviation(),
+                                          NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
         }
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java b/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
index 7488a5ff09..d66808dc89 100644
--- a/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
@@ -18,6 +18,9 @@
 package org.apache.commons.math4.random;
 
 import java.io.Serializable;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.io.ObjectInputStream;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.NoSuchProviderException;
@@ -46,6 +49,8 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 
 /**
@@ -115,8 +120,14 @@ public class RandomDataGenerator implements Serializable {
     private static final long serialVersionUID = -626730818244969716L;
 
     /** underlying random number generator */
+    @Deprecated
     private RandomGenerator rand = null;
 
+    /** Underlying random number generator. */
+    private transient UniformRandomProvider randomProvider = null;
+    /** Underlying source of randomness. */
+    private final RandomSource randomSource;
+
     /** underlying secure random number generator */
     private RandomGenerator secRand = null;
 
@@ -129,6 +140,7 @@ public class RandomDataGenerator implements Serializable {
      * The generator is initialized and seeded on first use.</p>
      */
     public RandomDataGenerator() {
+        randomSource = RandomSource.WELL_19937_C;
     }
 
     /**
@@ -138,8 +150,20 @@ public RandomDataGenerator() {
      * @param rand the source of (non-secure) random data
      * (may be null, resulting in the default generator)
      */
+    @Deprecated
     public RandomDataGenerator(RandomGenerator rand) {
         this.rand = rand;
+        randomSource = RandomSource.WELL_19937_C;
+    }
+
+    /**
+     * Creates a new instance.
+     *
+     * @param source Source of (non-secure) random data.
+     * If {@code null}, {@link RandomSource#WELL_19937_C} will be used.
+     */
+    public RandomDataGenerator(RandomSource source) {
+        randomSource = source == null ? RandomSource.WELL_19937_C : source;
     }
 
     /**
@@ -491,8 +515,7 @@ public double nextGaussian(double mu, double sigma) throws NotStrictlyPositiveEx
      * @throws NotStrictlyPositiveException if {@code mean <= 0}.
      */
     public double nextExponential(double mean) throws NotStrictlyPositiveException {
-        return new ExponentialDistribution(getRandomGenerator(), mean,
-                ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new ExponentialDistribution(mean, ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -518,8 +541,7 @@ public double nextExponential(double mean) throws NotStrictlyPositiveException {
      * {@code scale <= 0}.
      */
     public double nextGamma(double shape, double scale) throws NotStrictlyPositiveException {
-        return new GammaDistribution(getRandomGenerator(),shape, scale,
-                GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new GammaDistribution(shape, scale, GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -535,8 +557,7 @@ public double nextGamma(double shape, double scale) throws NotStrictlyPositiveEx
      * @throws NotPositiveException  if {@code numberOfSuccesses < 0}.
      */
     public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
-        return new HypergeometricDistribution(getRandomGenerator(),populationSize,
-                numberOfSuccesses, sampleSize).sample();
+        return new HypergeometricDistribution(getRandomGenerator(), populationSize, numberOfSuccesses, sampleSize).sample();
     }
 
     /**
@@ -561,8 +582,7 @@ public int nextPascal(int r, double p) throws NotStrictlyPositiveException, OutO
      * @throws NotStrictlyPositiveException if {@code df <= 0}
      */
     public double nextT(double df) throws NotStrictlyPositiveException {
-        return new TDistribution(getRandomGenerator(), df,
-                TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new TDistribution(df, TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -575,8 +595,7 @@ public double nextT(double df) throws NotStrictlyPositiveException {
      * {@code scale <= 0}.
      */
     public double nextWeibull(double shape, double scale) throws NotStrictlyPositiveException {
-        return new WeibullDistribution(getRandomGenerator(), shape, scale,
-                WeibullDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new WeibullDistribution(shape, scale, WeibullDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -600,8 +619,7 @@ public int nextZipf(int numberOfElements, double exponent) throws NotStrictlyPos
      * @return random value sampled from the beta(alpha, beta) distribution
      */
     public double nextBeta(double alpha, double beta) {
-        return new BetaDistribution(getRandomGenerator(), alpha, beta,
-                BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new BetaDistribution(alpha, beta, BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -623,8 +641,7 @@ public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) {
      * @return random value sampled from the Cauchy(median, scale) distribution
      */
     public double nextCauchy(double median, double scale) {
-        return new CauchyDistribution(getRandomGenerator(), median, scale,
-                CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new CauchyDistribution(median, scale, CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -634,8 +651,7 @@ public double nextCauchy(double median, double scale) {
      * @return random value sampled from the ChiSquare(df) distribution
      */
     public double nextChiSquare(double df) {
-        return new ChiSquaredDistribution(getRandomGenerator(), df,
-                ChiSquaredDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new ChiSquaredDistribution(df, ChiSquaredDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -648,8 +664,7 @@ public double nextChiSquare(double df) {
      * {@code numeratorDf <= 0} or {@code denominatorDf <= 0}.
      */
     public double nextF(double numeratorDf, double denominatorDf) throws NotStrictlyPositiveException {
-        return new FDistribution(getRandomGenerator(), numeratorDf, denominatorDf,
-                FDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
+        return new FDistribution(numeratorDf, denominatorDf, FDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -830,7 +845,8 @@ public Object[] nextSample(Collection<?> c, int k) throws NumberIsTooLargeExcept
      * @param seed the seed value to use
      */
     public void reSeed(long seed) {
-       getRandomGenerator().setSeed(seed);
+        randomProvider = RandomSource.create(randomSource, seed);
+        getRandomGenerator().setSeed(seed);
     }
 
     /**
@@ -861,7 +877,7 @@ public void reSeedSecure(long seed) {
      * {@code System.currentTimeMillis() + System.identityHashCode(this))}.
      */
     public void reSeed() {
-        getRandomGenerator().setSeed(System.currentTimeMillis() + System.identityHashCode(this));
+        reSeed(System.currentTimeMillis() + System.identityHashCode(this));
     }
 
     /**
@@ -896,6 +912,7 @@ public void setSecureAlgorithm(String algorithm, String provider)
      * @return the Random used to generate random data
      * @since 3.2
      */
+    @Deprecated
     public RandomGenerator getRandomGenerator() {
         if (rand == null) {
             initRan();
@@ -903,10 +920,24 @@ public RandomGenerator getRandomGenerator() {
         return rand;
     }
 
+    /**
+     * @return the generator used to generate non-secure random data.
+     *
+     * XXX TODO: method cannot be "private" because of its use in "ValueServer" in "DIGEST_MODE".
+     * "ValueServer" should be fixed to not use the internals of another class!
+     */
+    UniformRandomProvider getRandomProvider() {
+        if (randomProvider == null) {
+            randomProvider = RandomSource.create(randomSource);
+        }
+        return randomProvider;
+    }
+
     /**
      * Sets the default generator to a {@link Well19937c} generator seeded with
      * {@code System.currentTimeMillis() + System.identityHashCode(this))}.
      */
+    @Deprecated
     private void initRan() {
         rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
     }
@@ -928,4 +959,42 @@ private RandomGenerator getSecRan() {
         }
         return secRand;
     }
+
+    /**
+     * @param out Output stream.
+     * @throws IOException if an error occurs.
+     */
+    private void writeObject(ObjectOutputStream out)
+        throws IOException {
+        // Write non-transient fields.
+        out.defaultWriteObject();
+
+        if (randomProvider != null) {
+            // Save state of "randomProvider".
+            out.writeObject(RandomSource.saveState(randomProvider));
+        } else {
+            out.writeObject(null);
+        }
+   }
+
+    /**
+     * @param in Input stream.
+     * @throws IOException if an error occurs.
+     * @throws ClassNotFoundException if an error occurs.
+     */
+    private void readObject(ObjectInputStream in)
+        throws IOException,
+               ClassNotFoundException {
+        // Read non-transient fields.
+        in.defaultReadObject();
+
+        // Read "randomProvider" state (can be null).
+        final Object state = in.readObject();
+        if (state != null) {
+            // Recreate "randomProvider" from serialized info.
+            randomProvider = RandomSource.create(randomSource);
+            // And restore its state.
+            RandomSource.restoreState(randomProvider, (RandomSource.State) state);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/commons/math4/random/ValueServer.java b/src/main/java/org/apache/commons/math4/random/ValueServer.java
index de9118a13d..9e32035e74 100644
--- a/src/main/java/org/apache/commons/math4/random/ValueServer.java
+++ b/src/main/java/org/apache/commons/math4/random/ValueServer.java
@@ -202,7 +202,7 @@ public void computeDistribution() throws IOException, ZeroException, NullArgumen
      * @throws ZeroException if URL contains no data
      */
     public void computeDistribution(int binCount) throws NullArgumentException, IOException, ZeroException {
-        empiricalDistribution = new EmpiricalDistribution(binCount, randomData.getRandomGenerator());
+        empiricalDistribution = new EmpiricalDistribution(binCount);
         empiricalDistribution.load(valuesFileURL);
         mu = empiricalDistribution.getSampleStats().getMean();
         sigma = empiricalDistribution.getSampleStats().getStandardDeviation();
@@ -372,7 +372,7 @@ private double getNextDigest() throws MathIllegalStateException {
             (empiricalDistribution.getBinStats().size() == 0)) {
             throw new MathIllegalStateException(LocalizedFormats.DIGEST_NOT_INITIALIZED);
         }
-        return empiricalDistribution.getNextValue();
+        return empiricalDistribution.createSampler(randomData.getRandomProvider()).sample();
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/ChiSquareTest.java b/src/main/java/org/apache/commons/math4/stat/inference/ChiSquareTest.java
index fead59e018..add6c01ce7 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/ChiSquareTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/ChiSquareTest.java
@@ -157,7 +157,7 @@ public double chiSquareTest(final double[] expected, final long[] observed)
 
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
         final ChiSquaredDistribution distribution =
-            new ChiSquaredDistribution(null, expected.length - 1.0);
+            new ChiSquaredDistribution(expected.length - 1.0);
         return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));
     }
 
@@ -510,7 +510,7 @@ public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2
 
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
         final ChiSquaredDistribution distribution =
-                new ChiSquaredDistribution(null, (double) observed1.length - 1);
+                new ChiSquaredDistribution((double) observed1.length - 1);
         return 1 - distribution.cumulativeProbability(
                 chiSquareDataSetsComparison(observed1, observed2));
 
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/GTest.java b/src/main/java/org/apache/commons/math4/stat/inference/GTest.java
index 24958040e0..0ee009d299 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/GTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/GTest.java
@@ -154,7 +154,7 @@ public double gTest(final double[] expected, final long[] observed)
 
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
         final ChiSquaredDistribution distribution =
-                new ChiSquaredDistribution(null, expected.length - 1.0);
+                new ChiSquaredDistribution(expected.length - 1.0);
         return 1.0 - distribution.cumulativeProbability(g(expected, observed));
     }
 
@@ -185,7 +185,7 @@ public double gTestIntrinsic(final double[] expected, final long[] observed)
 
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
         final ChiSquaredDistribution distribution =
-                new ChiSquaredDistribution(null, expected.length - 2.0);
+                new ChiSquaredDistribution(expected.length - 2.0);
         return 1.0 - distribution.cumulativeProbability(g(expected, observed));
     }
 
@@ -475,7 +475,7 @@ public double gTestDataSetsComparison(final long[] observed1,
 
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
         final ChiSquaredDistribution distribution =
-                new ChiSquaredDistribution(null, (double) observed1.length - 1);
+                new ChiSquaredDistribution((double) observed1.length - 1);
         return 1 - distribution.cumulativeProbability(
                 gDataSetsComparison(observed1, observed2));
     }
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
index 04296a3014..b75de0e8ef 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
@@ -23,6 +23,7 @@
 
 import org.apache.commons.math4.distribution.EnumeratedRealDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.AbstractRealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.InsufficientDataException;
 import org.apache.commons.math4.exception.MathArithmeticException;
@@ -39,9 +40,8 @@
 import org.apache.commons.math4.linear.FieldMatrix;
 import org.apache.commons.math4.linear.MatrixUtils;
 import org.apache.commons.math4.linear.RealMatrix;
-import org.apache.commons.math4.random.JDKRandomGenerator;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
@@ -145,14 +145,14 @@ public class KolmogorovSmirnovTest {
     @Deprecated
     protected static final int MONTE_CARLO_ITERATIONS = 1000000;
 
-    /** Random data generator used by {@link #monteCarloP(double, int, int, boolean, int)} */
-    private final RandomGenerator rng;
+    @Deprecated
+    private final UniformRandomProvider rng;
 
     /**
      * Construct a KolmogorovSmirnovTest instance with a default random data generator.
      */
     public KolmogorovSmirnovTest() {
-        rng = new Well19937c();
+        rng = RandomSource.create(RandomSource.WELL_19937_C);
     }
 
     /**
@@ -163,8 +163,9 @@ public KolmogorovSmirnovTest() {
      * @param rng random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}
      */
     @Deprecated
-    public KolmogorovSmirnovTest(RandomGenerator rng) {
-        this.rng = rng;
+    public KolmogorovSmirnovTest(RandomSource source,
+                                 long seed) {
+        rng = RandomSource.create(source, seed);
     }
 
     /**
@@ -419,7 +420,7 @@ public double bootstrap(double[] x, double[] y, int iterations, boolean strict)
         final double[] combined = new double[xLength + yLength];
         System.arraycopy(x, 0, combined, 0, xLength);
         System.arraycopy(y, 0, combined, xLength, yLength);
-        final EnumeratedRealDistribution dist = new EnumeratedRealDistribution(rng, combined);
+        final RealDistribution.Sampler sampler = new EnumeratedRealDistribution(combined).createSampler(rng);
         final long d = integralKolmogorovSmirnovStatistic(x, y);
         int greaterCount = 0;
         int equalCount = 0;
@@ -427,8 +428,8 @@ public double bootstrap(double[] x, double[] y, int iterations, boolean strict)
         double[] curY;
         long curD;
         for (int i = 0; i < iterations; i++) {
-            curX = dist.sample(xLength);
-            curY = dist.sample(yLength);
+            curX = AbstractRealDistribution.sample(xLength, sampler);
+            curY = AbstractRealDistribution.sample(yLength, sampler);
             curD = integralKolmogorovSmirnovStatistic(curX, curY);
             if (curD > d) {
                 greaterCount++;
@@ -1041,7 +1042,7 @@ public double approximateP(double d, int n, int m) {
      * @param numberOfTrueValues number of {@code true} values the boolean array should finally have
      * @param rng random data generator
      */
-    static void fillBooleanArrayRandomlyWithFixedNumberTrueValues(final boolean[] b, final int numberOfTrueValues, final RandomGenerator rng) {
+    private static void fillBooleanArrayRandomlyWithFixedNumberTrueValues(final boolean[] b, final int numberOfTrueValues, final UniformRandomProvider rng) {
         Arrays.fill(b, true);
         for (int k = numberOfTrueValues; k < b.length; k++) {
             final int r = rng.nextInt(k + 1);
@@ -1154,16 +1155,16 @@ private static void fixTies(double[] x, double[] y) {
 
        // Add jitter using a fixed seed (so same arguments always give same results),
        // low-initialization-overhead generator
-       final RealDistribution dist =
-               new UniformRealDistribution(new JDKRandomGenerator(100), -minDelta, minDelta);
+       final RealDistribution.Sampler sampler =
+           new UniformRealDistribution(-minDelta, minDelta).createSampler(RandomSource.create(RandomSource.JDK, 100));
 
        // It is theoretically possible that jitter does not break ties, so repeat
        // until all ties are gone.  Bound the loop and throw MIE if bound is exceeded.
        int ct = 0;
        boolean ties = true;
        do {
-           jitter(x, dist);
-           jitter(y, dist);
+           jitter(x, sampler);
+           jitter(y, sampler);
            ties = hasTies(x, y);
            ct++;
        } while (ties && ct < 1000);
@@ -1202,13 +1203,16 @@ private static boolean hasTies(double[] x, double[] y) {
      * values are overwritten with the result of applying jitter.</p>
      *
      * @param data input/output data array - entries overwritten by the method
-     * @param dist probability distribution to sample for jitter values
+     * @param sampler probability distribution to sample for jitter values
      * @throws NullPointerException if either of the parameters is null
      */
-    private static void jitter(double[] data, RealDistribution dist) {
+    private static void jitter(double[] data, RealDistribution.Sampler sampler) {
         for (int i = 0; i < data.length; i++) {
-            data[i] += dist.sample();
+            final double d = sampler.sample();
+            System.out.println("d=" + d); // XXX
+            data[i] += d;
         }
+        System.out.println(); // XXX
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math4/stat/inference/MannWhitneyUTest.java
index 3fa34a36c0..44528163c0 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/MannWhitneyUTest.java
@@ -182,7 +182,7 @@ private double calculateAsymptoticPValue(final double Umin,
 
         // No try-catch or advertised exception because args are valid
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final NormalDistribution standardNormal = new NormalDistribution(null, 0, 1);
+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
         return 2 * standardNormal.cumulativeProbability(z);
     }
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/OneWayAnova.java b/src/main/java/org/apache/commons/math4/stat/inference/OneWayAnova.java
index 90f4e9680a..1befaa2dee 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/OneWayAnova.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/OneWayAnova.java
@@ -127,7 +127,7 @@ public double anovaPValue(final Collection<double[]> categoryData)
         final AnovaStats a = anovaStats(categoryData);
         // No try-catch or advertised exception because args are valid
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final FDistribution fdist = new FDistribution(null, a.dfbg, a.dfwg);
+        final FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);
         return 1.0 - fdist.cumulativeProbability(a.F);
 
     }
@@ -169,7 +169,7 @@ public double anovaPValue(final Collection<SummaryStatistics> categoryData,
 
         final AnovaStats a = anovaStats(categoryData, allowOneElementData);
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final FDistribution fdist = new FDistribution(null, a.dfbg, a.dfwg);
+        final FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);
         return 1.0 - fdist.cumulativeProbability(a.F);
 
     }
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/TTest.java b/src/main/java/org/apache/commons/math4/stat/inference/TTest.java
index 2168099ba8..577ac29d01 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/TTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/TTest.java
@@ -1058,7 +1058,7 @@ protected double tTest(final double m, final double mu,
 
         final double t = FastMath.abs(t(m, mu, v, n));
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final TDistribution distribution = new TDistribution(null, n - 1);
+        final TDistribution distribution = new TDistribution(n - 1);
         return 2.0 * distribution.cumulativeProbability(-t);
 
     }
@@ -1088,7 +1088,7 @@ protected double tTest(final double m1, final double m2,
         final double t = FastMath.abs(t(m1, m2, v1, v2, n1, n2));
         final double degreesOfFreedom = df(v1, v2, n1, n2);
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final TDistribution distribution = new TDistribution(null, degreesOfFreedom);
+        final TDistribution distribution = new TDistribution(degreesOfFreedom);
         return 2.0 * distribution.cumulativeProbability(-t);
 
     }
@@ -1118,7 +1118,7 @@ protected double homoscedasticTTest(double m1, double m2,
         final double t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));
         final double degreesOfFreedom = n1 + n2 - 2;
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final TDistribution distribution = new TDistribution(null, degreesOfFreedom);
+        final TDistribution distribution = new TDistribution(degreesOfFreedom);
         return 2.0 * distribution.cumulativeProbability(-t);
 
     }
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/WilcoxonSignedRankTest.java b/src/main/java/org/apache/commons/math4/stat/inference/WilcoxonSignedRankTest.java
index 2bd303ce70..537d1c4906 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/WilcoxonSignedRankTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/WilcoxonSignedRankTest.java
@@ -254,7 +254,7 @@ private double calculateAsymptoticPValue(final double Wmin, final int N) {
 
         // No try-catch or advertised exception because args are valid
         // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final NormalDistribution standardNormal = new NormalDistribution(null, 0, 1);
+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
         return 2*standardNormal.cumulativeProbability(z);
     }
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolatorTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolatorTest.java
index 15e4281fb4..9eeb33ace0 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolatorTest.java
@@ -20,13 +20,14 @@
 import static org.junit.Assert.assertTrue;
 
 import org.apache.commons.math4.analysis.UnivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.NonMonotonicSequenceException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
@@ -212,9 +213,9 @@ private void testInterpolation( double minimumX, double maximumX, int numberOfEl
             assertTrue( Precision.equals( expected, actual ) );
         }
 
-        final RandomGenerator rng = new Well19937c( 1234567L ); // "tol" depends on the seed.
-        final UniformRealDistribution distX =
-            new UniformRealDistribution( rng, xValues[0], xValues[xValues.length - 1] );
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234567L); // "tol" depends on the seed.
+        final RealDistribution.Sampler distX =
+            new UniformRealDistribution(xValues[0], xValues[xValues.length - 1]).createSampler(rng);
 
         double sumError = 0;
         for ( int i = 0; i < numberOfSamples; i++ )
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatingFunctionTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatingFunctionTest.java
index 0ec77aa42f..105cf70f70 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatingFunctionTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatingFunctionTest.java
@@ -17,12 +17,13 @@
 package org.apache.commons.math4.analysis.interpolation;
 
 import org.apache.commons.math4.analysis.BivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.OutOfRangeException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
@@ -360,9 +361,9 @@ private void testInterpolation(double minimumX,
             }
         }
 
-        final RandomGenerator rng = new Well19937c(1234567L);
-        final UniformRealDistribution distX = new UniformRealDistribution(rng, xValues[0], xValues[xValues.length - 1]);
-        final UniformRealDistribution distY = new UniformRealDistribution(rng, yValues[0], yValues[yValues.length - 1]);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234567L);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xValues[0], xValues[xValues.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yValues[0], yValues[yValues.length - 1]).createSampler(rng);
 
         double sumError = 0;
         for (int i = 0; i < numberOfSamples; i++) {
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatorTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatorTest.java
index 6a2a9d760e..f88ec55a85 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/BicubicInterpolatorTest.java
@@ -17,11 +17,12 @@
 package org.apache.commons.math4.analysis.interpolation;
 
 import org.apache.commons.math4.analysis.BivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -146,9 +147,9 @@ private void testInterpolation(int numSamples,
         final BicubicInterpolatingFunction p = interpolator.interpolate(xval, yval, zval);
         double x, y;
 
-        final RandomGenerator rng = new Well19937c();
-        final UniformRealDistribution distX = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]);
-        final UniformRealDistribution distY = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xval[0], xval[xval.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yval[0], yval[yval.length - 1]).createSampler(rng);
 
         int count = 0;
         while (true) {
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunctionTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunctionTest.java
index c6701b302c..48ff9a094b 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunctionTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunctionTest.java
@@ -17,13 +17,14 @@
 package org.apache.commons.math4.analysis.interpolation;
 
 import org.apache.commons.math4.analysis.BivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.InsufficientDataException;
 import org.apache.commons.math4.exception.NonMonotonicSequenceException;
 import org.apache.commons.math4.exception.NullArgumentException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
@@ -175,7 +176,7 @@ public void testParabaloid() {
         final double maximumY = 10;
         final int numberOfSamples = 100;
 
-        final double interpolationTolerance = 2e-14;
+        final double interpolationTolerance = 1e-13;
         final double maxTolerance = 6e-14;
 
         // Function values
@@ -250,9 +251,9 @@ private void testInterpolation(double minimumX,
             }
         }
 
-        final RandomGenerator rng = new Well19937c(1234567L);
-        final UniformRealDistribution distX = new UniformRealDistribution(rng, xValues[0], xValues[xValues.length - 1]);
-        final UniformRealDistribution distY = new UniformRealDistribution(rng, yValues[0], yValues[yValues.length - 1]);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234567L);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xValues[0], xValues[xValues.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yValues[0], yValues[yValues.length - 1]).createSampler(rng);
 
         double sumError = 0;
         for (int i = 0; i < numberOfSamples; i++) {
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatorTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatorTest.java
index 1645294d43..69bd8b4492 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/PiecewiseBicubicSplineInterpolatorTest.java
@@ -17,13 +17,14 @@
 package org.apache.commons.math4.analysis.interpolation;
 
 import org.apache.commons.math4.analysis.BivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.InsufficientDataException;
 import org.apache.commons.math4.exception.NonMonotonicSequenceException;
 import org.apache.commons.math4.exception.NullArgumentException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -157,9 +158,9 @@ public double value( double x, double y ) {
         BivariateFunction p = interpolator.interpolate(xval, yval, zval);
         double x, y;
 
-        final RandomGenerator rng = new Well19937c(1234567L); // "tol" depends on the seed.
-        final UniformRealDistribution distX = new UniformRealDistribution( rng, xval[0], xval[xval.length - 1] );
-        final UniformRealDistribution distY = new UniformRealDistribution( rng, yval[0], yval[yval.length - 1] );
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234567L);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xval[0], xval[xval.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yval[0], yval[yval.length - 1]).createSampler(rng);
 
         final int numSamples = 50;
         final double tol = 2e-14;
@@ -209,9 +210,9 @@ public double value( double x, double y ) {
         BivariateFunction p = interpolator.interpolate(xval, yval, zval);
         double x, y;
 
-        final RandomGenerator rng = new Well19937c(1234567L); // "tol" depends on the seed.
-        final UniformRealDistribution distX = new UniformRealDistribution( rng, xval[0], xval[xval.length - 1] );
-        final UniformRealDistribution distY = new UniformRealDistribution( rng, yval[0], yval[yval.length - 1] );
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234567L);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xval[0], xval[xval.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yval[0], yval[yval.length - 1]).createSampler(rng);
 
         final int numSamples = 50;
         final double tol = 5e-13;
diff --git a/src/test/java/org/apache/commons/math4/analysis/interpolation/TricubicInterpolatingFunctionTest.java b/src/test/java/org/apache/commons/math4/analysis/interpolation/TricubicInterpolatingFunctionTest.java
index 44f06a0516..deac81fac9 100644
--- a/src/test/java/org/apache/commons/math4/analysis/interpolation/TricubicInterpolatingFunctionTest.java
+++ b/src/test/java/org/apache/commons/math4/analysis/interpolation/TricubicInterpolatingFunctionTest.java
@@ -17,11 +17,12 @@
 package org.apache.commons.math4.analysis.interpolation;
 
 import org.apache.commons.math4.analysis.TrivariateFunction;
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
@@ -379,10 +380,10 @@ private void testInterpolation(double minimumX,
             }
         }
 
-        final RandomGenerator rng = new Well19937c(1234567L);
-        final UniformRealDistribution distX = new UniformRealDistribution(rng, xValues[0], xValues[xValues.length - 1]);
-        final UniformRealDistribution distY = new UniformRealDistribution(rng, yValues[0], yValues[yValues.length - 1]);
-        final UniformRealDistribution distZ = new UniformRealDistribution(rng, zValues[0], zValues[zValues.length - 1]);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1234568L);
+        final RealDistribution.Sampler distX = new UniformRealDistribution(xValues[0], xValues[xValues.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distY = new UniformRealDistribution(yValues[0], yValues[yValues.length - 1]).createSampler(rng);
+        final RealDistribution.Sampler distZ = new UniformRealDistribution(zValues[0], zValues[zValues.length - 1]).createSampler(rng);
 
         double sumError = 0;
         for (int i = 0; i < numberOfSamples; i++) {
diff --git a/src/test/java/org/apache/commons/math4/distribution/AbstractRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/AbstractRealDistributionTest.java
index cff0c0837b..449f4a6072 100644
--- a/src/test/java/org/apache/commons/math4/distribution/AbstractRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/AbstractRealDistributionTest.java
@@ -35,7 +35,7 @@ public void testContinuous() {
         final double x3 = 3.0;
         final double p12 = 0.5;
         final AbstractRealDistribution distribution;
-        distribution = new AbstractRealDistribution(null) {
+        distribution = new AbstractRealDistribution() {
             private static final long serialVersionUID = 1L;
 
             @Override
@@ -119,7 +119,7 @@ public void testDiscontinuous() {
         final double p12 = 1.0 / 3.0;
         final double p23 = 2.0 / 3.0;
         final AbstractRealDistribution distribution;
-        distribution = new AbstractRealDistribution(null) {
+        distribution = new AbstractRealDistribution() {
             private static final long serialVersionUID = 1L;
 
             @Override
diff --git a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
index 373271d0cc..51275036fb 100644
--- a/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/BetaDistributionTest.java
@@ -346,8 +346,6 @@ public void testMomentsSampling() {
     public void testGoodnessOfFit() {
         final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_A,
                                                               123456789L);
-        final RandomGenerator random = new Well19937a(0x237db1db907b089fL);
-
         final int numSamples = 1000;
         final double level = 0.01;
         for (final double alpha : alphaBetas) {
@@ -360,7 +358,7 @@ public void testGoodnessOfFit() {
                 Assert.assertFalse("G goodness-of-fit test rejected null at alpha = " + level,
                                    gTest(betaDistribution, observed) < level);
                 Assert.assertFalse("KS goodness-of-fit test rejected null at alpha = " + level,
-                                   new KolmogorovSmirnovTest(random).kolmogorovSmirnovTest(betaDistribution, observed) < level);
+                                   new KolmogorovSmirnovTest(RandomSource.JDK, 3448845623L).kolmogorovSmirnovTest(betaDistribution, observed) < level);
             }
         }
     }
diff --git a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
index 211a6703ef..a2c77060ef 100644
--- a/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/ConstantRealDistributionTest.java
@@ -82,15 +82,6 @@ public void testMeanVariance() {
         Assert.assertEquals(dist.getNumericalVariance(), 0, 0d);
     }
 
-    @Test
-    @Override
-    public void testSampling() {
-        ConstantRealDistribution dist = new ConstantRealDistribution(0);
-        for (int i = 0; i < 10; i++) {
-            Assert.assertEquals(0, dist.sample(), 0);
-        }
-    }
-
     @Test
     @Override
     public void testSampler() {
diff --git a/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
index 0300e5e14b..7cfebf7b72 100644
--- a/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/EnumeratedRealDistributionTest.java
@@ -30,6 +30,7 @@
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Pair;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
@@ -197,7 +198,8 @@ public void testIssue942() {
         List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();
         list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));
         list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));
-        Assert.assertEquals(1, new EnumeratedDistribution<Object>(list).sample(1).length);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_512_A);
+        Assert.assertEquals(1, new EnumeratedDistribution<Object>(list).createSampler(rng).sample(1).length);
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/math4/distribution/LevyDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/LevyDistributionTest.java
index d0af056d2d..659e41859c 100644
--- a/src/test/java/org/apache/commons/math4/distribution/LevyDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/LevyDistributionTest.java
@@ -17,7 +17,6 @@
 package org.apache.commons.math4.distribution;
 
 import org.apache.commons.math4.distribution.LevyDistribution;
-import org.apache.commons.math4.random.Well19937a;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
 import org.junit.Test;
@@ -41,7 +40,7 @@ public void testSupport() {
 
     @Override
     public LevyDistribution makeDistribution() {
-        return new LevyDistribution(new Well19937a(0xc5a5506bbb17e57al), 1.2, 0.4);
+        return new LevyDistribution(1.2, 0.4);
     }
 
     @Override
diff --git a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
index 61d01ffeb1..7d9db82c04 100644
--- a/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/RealDistributionAbstractTest.java
@@ -327,22 +327,6 @@ public void testIllegalArguments() {
      * Test sampling
      */
     @Test
-    public void testSampling() {
-        final int sampleSize = 1000;
-        distribution.reseedRandomGenerator(1000); // Use fixed seed
-        double[] sample = distribution.sample(sampleSize);
-        double[] quartiles = TestUtils.getDistributionQuartiles(distribution);
-        double[] expected = {250, 250, 250, 250};
-        long[] counts = new long[4];
-        for (int i = 0; i < sampleSize; i++) {
-            TestUtils.updateCounts(sample[i], counts, quartiles);
-        }
-        TestUtils.assertChiSquareAccept(expected, counts, 0.001);
-    }
-
-
-    // New design
-    @Test
     public void testSampler() {
         final int sampleSize = 1000;
         final RealDistribution.Sampler sampler =
@@ -403,16 +387,18 @@ public void testDistributionClone()
                ClassNotFoundException {
         // Construct a distribution and initialize its internal random
         // generator, using a fixed seed for deterministic results.
-        distribution.reseedRandomGenerator(123);
-        distribution.sample();
+        final long seed = 123;
+        RandomSource source = RandomSource.WELL_512_A;
+        RealDistribution.Sampler origSampler = distribution.createSampler(RandomSource.create(source, seed));
 
         // Clone the distribution.
         final RealDistribution cloned = deepClone();
+        RealDistribution.Sampler clonedSampler = cloned.createSampler(RandomSource.create(source, seed));
 
         // Make sure they still produce the same samples.
-        final double s1 = distribution.sample();
-        final double s2 = cloned.sample();
-        Assert.assertEquals(s1, s2, 0d);
+        Assert.assertEquals(origSampler.sample(),
+                            clonedSampler.sample(),
+                            0d);
     }
 
     //------------------ Getters / Setters for test instance data -----------
diff --git a/src/test/java/org/apache/commons/math4/filter/KalmanFilterTest.java b/src/test/java/org/apache/commons/math4/filter/KalmanFilterTest.java
index 99d73c5413..2db564de8a 100644
--- a/src/test/java/org/apache/commons/math4/filter/KalmanFilterTest.java
+++ b/src/test/java/org/apache/commons/math4/filter/KalmanFilterTest.java
@@ -14,6 +14,7 @@
 
 package org.apache.commons.math4.filter;
 
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.filter.DefaultMeasurementModel;
 import org.apache.commons.math4.filter.DefaultProcessModel;
@@ -26,9 +27,10 @@
 import org.apache.commons.math4.linear.MatrixUtils;
 import org.apache.commons.math4.linear.RealMatrix;
 import org.apache.commons.math4.linear.RealVector;
-import org.apache.commons.math4.random.JDKRandomGenerator;
 import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.random.JDKRandomGenerator;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Precision;
 import org.junit.Assert;
@@ -392,8 +394,8 @@ public void testCannonball() {
         final MeasurementModel mm = new DefaultMeasurementModel(H, R);
         final KalmanFilter filter = new KalmanFilter(pm, mm);
 
-        final RandomGenerator rng = new Well19937c(1000);
-        final NormalDistribution dist = new NormalDistribution(rng, 0, measurementNoise);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 1000);
+        final RealDistribution.Sampler dist = new NormalDistribution(0, measurementNoise).createSampler(rng);
 
         for (int i = 0; i < iterations; i++) {
             // get the "real" cannonball position
diff --git a/src/test/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java b/src/test/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
index 6198eb71cb..5c0ebd9330 100644
--- a/src/test/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
@@ -262,7 +262,7 @@ public void testCircleFitting2() {
         final double ySigma = 15;
         final double radius = 111.111;
         // The test is extremely sensitive to the seed.
-        final long seed = 59421061L;
+        final long seed = 59321761412L;
         final RandomCirclePointGenerator factory
             = new RandomCirclePointGenerator(xCenter, yCenter, radius,
                                              xSigma, ySigma,
diff --git a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
index 8bc8569471..59dd8afe08 100644
--- a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
+++ b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
@@ -20,8 +20,8 @@
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.geometry.euclidean.twod.Vector2D;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well44497b;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
@@ -30,11 +30,11 @@
  */
 public class RandomCirclePointGenerator {
     /** RNG for the x-coordinate of the center. */
-    private final RealDistribution cX;
+    private final RealDistribution.Sampler cX;
     /** RNG for the y-coordinate of the center. */
-    private final RealDistribution cY;
+    private final RealDistribution.Sampler cY;
     /** RNG for the parametric position of the point. */
-    private final RealDistribution tP;
+    private final RealDistribution.Sampler tP;
     /** Radius of the circle. */
     private final double radius;
 
@@ -52,13 +52,11 @@ public RandomCirclePointGenerator(double x,
                                       double xSigma,
                                       double ySigma,
                                       long seed) {
-        final RandomGenerator rng = new Well44497b(seed);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_44497_B, seed);
         this.radius = radius;
-        cX = new NormalDistribution(rng, x, xSigma,
-                                    NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-        cY = new NormalDistribution(rng, y, ySigma,
-                                    NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-        tP = new UniformRealDistribution(rng, 0, MathUtils.TWO_PI);
+        cX = new NormalDistribution(x, xSigma).createSampler(rng);
+        cY = new NormalDistribution(y, ySigma).createSampler(rng);
+        tP = new UniformRealDistribution(0, MathUtils.TWO_PI).createSampler(rng);
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
index 024f561a84..beff240a19 100644
--- a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
+++ b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
@@ -22,8 +22,8 @@
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well44497b;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 
 /**
  * Factory for generating a cloud of points that approximate a straight line.
@@ -34,9 +34,9 @@ public class RandomStraightLinePointGenerator {
     /** Intercept. */
     private final double intercept;
     /** RNG for the x-coordinate. */
-    private final RealDistribution x;
+    private final RealDistribution.Sampler x;
     /** RNG for the error on the y-coordinate. */
-    private final RealDistribution error;
+    private final RealDistribution.Sampler error;
 
     /**
      * The generator will create a cloud of points whose x-coordinates
@@ -61,12 +61,11 @@ public RandomStraightLinePointGenerator(double a,
                                             double lo,
                                             double hi,
                                             long seed) {
-        final RandomGenerator rng = new Well44497b(seed);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_44497_B, seed);
         slope = a;
         intercept = b;
-        error = new NormalDistribution(rng, 0, sigma,
-                                       NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-        x = new UniformRealDistribution(rng, lo, hi);
+        error = new NormalDistribution(0, sigma).createSampler(rng);
+        x = new UniformRealDistribution(lo, hi).createSampler(rng);
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/math4/random/EmpiricalDistributionTest.java b/src/test/java/org/apache/commons/math4/random/EmpiricalDistributionTest.java
index 4854979c01..3c0564fbef 100644
--- a/src/test/java/org/apache/commons/math4/random/EmpiricalDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/random/EmpiricalDistributionTest.java
@@ -36,8 +36,7 @@
 import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
-import org.apache.commons.math4.random.EmpiricalDistribution;
-import org.apache.commons.math4.random.RandomGenerator;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.stat.descriptive.SummaryStatistics;
 import org.apache.commons.math4.util.FastMath;
 import org.junit.Assert;
@@ -156,14 +155,27 @@ public void testNext() throws Exception {
     }
 
     /**
-      * Make sure exception thrown if digest getNext is attempted
-      * before loading empiricalDistribution.
+     * Make sure exception thrown if sampling is attempted
+     * before loading empiricalDistribution.
      */
     @Test
-    public void testNexFail() {
+    public void testNextFail1() {
         try {
-            empiricalDistribution.getNextValue();
-            empiricalDistribution2.getNextValue();
+            empiricalDistribution.createSampler(RandomSource.create(RandomSource.JDK)).sample();
+            Assert.fail("Expecting MathIllegalStateException");
+        } catch (MathIllegalStateException ex) {
+            // expected
+        }
+    }
+
+    /**
+     * Make sure exception thrown if sampling is attempted
+     * before loading empiricalDistribution.
+     */
+    @Test
+    public void testNextFail2() {
+        try {
+            empiricalDistribution2.createSampler(RandomSource.create(RandomSource.JDK)).sample();
             Assert.fail("Expecting MathIllegalStateException");
         } catch (MathIllegalStateException ex) {
             // expected
@@ -245,36 +257,38 @@ public void testGetBinUpperBounds() {
         TestUtils.assertEquals(expectedGeneratorUpperBounds, dist.getGeneratorUpperBounds(), tol);
     }
 
-    @Test
-    public void testGeneratorConfig() {
-        double[] testData = {0, 1, 2, 3, 4};
-        RandomGenerator generator = new RandomAdaptorTest.ConstantGenerator(0.5);
-
-        EmpiricalDistribution dist = new EmpiricalDistribution(5, generator);
-        dist.load(testData);
-        for (int i = 0; i < 5; i++) {
-            Assert.assertEquals(2.0, dist.getNextValue(), 0d);
-        }
-
-        // Verify no NPE with null generator argument
-        dist = new EmpiricalDistribution(5, (RandomGenerator) null);
-        dist.load(testData);
-        dist.getNextValue();
-    }
-
-    @Test
-    public void testReSeed() throws Exception {
-        empiricalDistribution.load(url);
-        empiricalDistribution.reSeed(100);
-        final double [] values = new double[10];
-        for (int i = 0; i < 10; i++) {
-            values[i] = empiricalDistribution.getNextValue();
-        }
-        empiricalDistribution.reSeed(100);
-        for (int i = 0; i < 10; i++) {
-            Assert.assertEquals(values[i],empiricalDistribution.getNextValue(), 0d);
-        }
-    }
+    // XXX REMOVE (test "embedded RNG" which is to be removed)
+//     @Test
+//     public void testGeneratorConfig() {
+//         double[] testData = {0, 1, 2, 3, 4};
+//         RandomGenerator generator = new RandomAdaptorTest.ConstantGenerator(0.5);
+
+//         EmpiricalDistribution dist = new EmpiricalDistribution(5, generator);
+//         dist.load(testData);
+//         for (int i = 0; i < 5; i++) {
+//             Assert.assertEquals(2.0, dist.getNextValue(), 0d);
+//         }
+
+//         // Verify no NPE with null generator argument
+//         dist = new EmpiricalDistribution(5, (RandomGenerator) null);
+//         dist.load(testData);
+//         dist.getNextValue();
+//     }
+
+    // XXX REMOVE (test "embedded RNG" which is to be removed)
+//     @Test
+//     public void testReSeed() throws Exception {
+//         empiricalDistribution.load(url);
+//         empiricalDistribution.reSeed(100);
+//         final double [] values = new double[10];
+//         for (int i = 0; i < 10; i++) {
+//             values[i] = empiricalDistribution.getNextValue();
+//         }
+//         empiricalDistribution.reSeed(100);
+//         for (int i = 0; i < 10; i++) {
+//             Assert.assertEquals(values[i],empiricalDistribution.getNextValue(), 0d);
+//         }
+//     }
 
     private void verifySame(EmpiricalDistribution d1, EmpiricalDistribution d2) {
         Assert.assertEquals(d1.isLoaded(), d2.isLoaded());
@@ -290,10 +304,11 @@ private void verifySame(EmpiricalDistribution d1, EmpiricalDistribution d2) {
 
     private void tstGen(double tolerance)throws Exception {
         empiricalDistribution.load(url);
-        empiricalDistribution.reSeed(1000);
+        RealDistribution.Sampler sampler
+            = empiricalDistribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         SummaryStatistics stats = new SummaryStatistics();
         for (int i = 1; i < 1000; i++) {
-            stats.addValue(empiricalDistribution.getNextValue());
+            stats.addValue(sampler.sample());
         }
         Assert.assertEquals("mean", 5.069831575018909, stats.getMean(),tolerance);
         Assert.assertEquals("std dev", 1.0173699343977738, stats.getStandardDeviation(),tolerance);
@@ -301,10 +316,11 @@ private void tstGen(double tolerance)throws Exception {
 
     private void tstDoubleGen(double tolerance)throws Exception {
         empiricalDistribution2.load(dataArray);
-        empiricalDistribution2.reSeed(1000);
+        RealDistribution.Sampler sampler
+            = empiricalDistribution2.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         SummaryStatistics stats = new SummaryStatistics();
         for (int i = 1; i < 1000; i++) {
-            stats.addValue(empiricalDistribution2.getNextValue());
+            stats.addValue(sampler.sample());
         }
         Assert.assertEquals("mean", 5.069831575018909, stats.getMean(), tolerance);
         Assert.assertEquals("std dev", 1.0173699343977738, stats.getStandardDeviation(), tolerance);
@@ -431,9 +447,10 @@ public void testSampleValuesRange() {
         }
         EmpiricalDistribution dist = new EmpiricalDistribution(10);
         dist.load(data);
-        dist.reseedRandomGenerator(1000);
+        RealDistribution.Sampler sampler
+            = dist.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         for (int i = 0; i < 1000; i++) {
-            final double dev = dist.sample();
+            final double dev = sampler.sample();
             Assert.assertTrue(dev < 1);
             Assert.assertTrue(dev > 0);
         }
@@ -447,9 +464,10 @@ public void testNoBinVariance() {
         final double[] data = {0, 0, 1, 1};
         EmpiricalDistribution dist = new EmpiricalDistribution(2);
         dist.load(data);
-        dist.reseedRandomGenerator(1000);
+        RealDistribution.Sampler sampler
+            = dist.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         for (int i = 0; i < 1000; i++) {
-            final double dev = dist.sample();
+            final double dev = sampler.sample();
             Assert.assertTrue(dev == 0 || dev == 1);
         }
         Assert.assertEquals(0.5, dist.cumulativeProbability(0), Double.MIN_VALUE);
@@ -489,10 +507,12 @@ public void testKernelOverrideConstant() {
         final EmpiricalDistribution dist = new ConstantKernelEmpiricalDistribution(5);
         final double[] data = {1d,2d,3d, 4d,5d,6d, 7d,8d,9d, 10d,11d,12d, 13d,14d,15d};
         dist.load(data);
+        RealDistribution.Sampler sampler
+            = dist.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         // Bin masses concentrated on 2, 5, 8, 11, 14 <- effectively discrete uniform distribution over these
         double[] values = {2d, 5d, 8d, 11d, 14d};
         for (int i = 0; i < 20; i++) {
-            Assert.assertTrue(Arrays.binarySearch(values, dist.sample()) >= 0);
+            Assert.assertTrue(Arrays.binarySearch(values, sampler.sample()) >= 0);
         }
         final double tol = 10E-12;
         Assert.assertEquals(0.0, dist.cumulativeProbability(1), tol);
@@ -515,11 +535,13 @@ public void testKernelOverrideUniform() {
         final EmpiricalDistribution dist = new UniformKernelEmpiricalDistribution(5);
         final double[] data = {1d,2d,3d, 4d,5d,6d, 7d,8d,9d, 10d,11d,12d, 13d,14d,15d};
         dist.load(data);
+        RealDistribution.Sampler sampler
+            = dist.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         // Kernels are uniform distributions on [1,3], [4,6], [7,9], [10,12], [13,15]
         final double bounds[] = {3d, 6d, 9d, 12d};
         final double tol = 10E-12;
         for (int i = 0; i < 20; i++) {
-            final double v = dist.sample();
+            final double v = sampler.sample();
             // Make sure v is not in the excluded range between bins - that is (bounds[i], bounds[i] + 1)
             for (int j = 0; j < bounds.length; j++) {
                 Assert.assertFalse(v > bounds[j] + tol && v < bounds[j] + 1 - tol);
@@ -566,7 +588,7 @@ public UniformKernelEmpiricalDistribution(int i) {
         }
         @Override
         protected RealDistribution getKernel(SummaryStatistics bStats) {
-            return new UniformRealDistribution(randomData.getRandomGenerator(), bStats.getMin(), bStats.getMax());
+            return new UniformRealDistribution(bStats.getMin(), bStats.getMax());
         }
     }
 }
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
index dfdcd4ece9..fdbf689f0b 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
@@ -32,6 +32,7 @@
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.stat.descriptive.StorelessUnivariateStatistic;
 import org.apache.commons.math4.stat.descriptive.StorelessUnivariateStatisticAbstractTest;
 import org.apache.commons.math4.stat.descriptive.UnivariateStatistic;
@@ -709,6 +710,8 @@ public void testPSQuaredEvalFuncWithPapersExampleData() throws IOException {
             VERY_LARGE = 10000000;
 
     private void doDistributionTest(RealDistribution distribution) {
+        final RealDistribution.Sampler sampler =
+            distribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         double data[];
 
         data = distribution.sample(VERY_LARGE);
@@ -754,8 +757,8 @@ private void doDistributionTest(RealDistribution distribution) {
      */
     @Test
     public void testDistribution() {
-        doDistributionTest(new NormalDistribution(randomGenerator, 4000, 50));
-        doDistributionTest(new LogNormalDistribution(randomGenerator,4000, 50));
+        doDistributionTest(new NormalDistribution(4000, 50));
+        doDistributionTest(new LogNormalDistribution(4000, 50));
         // doDistributionTest((new ExponentialDistribution(4000));
         // doDistributionTest(new GammaDistribution(5d,1d),0.1);
     }
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java
index 65a25b18ba..98b6f913d0 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PercentileTest.java
@@ -18,14 +18,16 @@
 
 import java.util.Arrays;
 
+import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.AbstractRealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.NotANumberException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.OutOfRangeException;
-import org.apache.commons.math4.random.JDKRandomGenerator;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.Well1024a;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.stat.descriptive.UnivariateStatistic;
 import org.apache.commons.math4.stat.descriptive.UnivariateStatisticAbstractTest;
 import org.apache.commons.math4.stat.descriptive.rank.Percentile.EstimationType;
@@ -587,22 +589,23 @@ public void testPercentileWithTechnique() {
 
     @Test
     public void testStoredVsDirect() {
-        final RandomGenerator rand= new JDKRandomGenerator();
-        rand.setSeed(Long.MAX_VALUE);
-        for (final int sampleSize:sampleSizes) {
-            final double[] data = new NormalDistribution(rand,4000, 50)
-                                .sample(sampleSize);
-            for (final double p:new double[] {50d,95d}) {
+        final RealDistribution.Sampler sampler =
+            new NormalDistribution(4000, 50).createSampler(RandomSource.create(RandomSource.JDK,
+                                                                               Long.MAX_VALUE));
+
+        for (final int sampleSize : sampleSizes) {
+            final double[] data = AbstractRealDistribution.sample(sampleSize, sampler);
+            for (final double p : new double[] { 50d, 95d }) {
                 for (final Percentile.EstimationType e : Percentile.EstimationType.values()) {
                     reset(p, e);
                     final Percentile pStoredData = getUnivariateStatistic();
                     pStoredData.setData(data);
-                    final double storedDataResult=pStoredData.evaluate();
+                    final double storedDataResult = pStoredData.evaluate();
                     pStoredData.setData(null);
                     final Percentile pDirect = getUnivariateStatistic();
-                    Assert.assertEquals("Sample="+sampleSize+",P="+p+" e="+e,
-                            storedDataResult,
-                            pDirect.evaluate(data),0d);
+                    Assert.assertEquals("Sample=" + sampleSize + ", P=" + p + " e=" + e,
+                                        storedDataResult,
+                                        pDirect.evaluate(data), 0d);
                 }
             }
         }
diff --git a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
index 5871fd30fa..0c9c0dd5d3 100644
--- a/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java
@@ -23,8 +23,8 @@
 import org.apache.commons.math4.TestUtils;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
@@ -318,7 +318,7 @@ public void testTwoSampleProductSizeOverflow() {
      */
     @Test
     public void testTwoSampleMonteCarlo() {
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
         final int sampleSize = 14;
         final double tol = .001;
         final double[] shortUniform = new double[sampleSize];
@@ -345,7 +345,7 @@ public void testTwoSampleMonteCarlo() {
 
     @Test
     public void testTwoSampleMonteCarloDifferentSampleSizes() {
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
         final int sampleSize1 = 14;
         final int sampleSize2 = 7;
         final double d = 0.3;
@@ -364,7 +364,7 @@ public void testTwoSampleMonteCarloDifferentSampleSizes() {
     public void testTwoSampleMonteCarloPerformance() {
         int numIterations = 100_000;
         int N = (int)Math.sqrt(KolmogorovSmirnovTest.LARGE_SAMPLE_PRODUCT);
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
         for (int n = 2; n <= N; ++n) {
             long startMillis = System.currentTimeMillis();
             int m = KolmogorovSmirnovTest.LARGE_SAMPLE_PRODUCT/n;
@@ -500,7 +500,7 @@ public void testDRounding() {
     public void testDRoundingMonteCarlo() {
         final double tol = 1e-2;
         final int iterations = 1000000;
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
 
         final double[] x = {0, 2, 3, 4, 5, 6, 7, 8, 9, 12};
         final double[] y = {1, 10, 11, 13, 14, 15, 16, 17, 18};
@@ -519,14 +519,17 @@ public void testDRoundingMonteCarlo() {
     }
 
     @Test
-    public void testFillBooleanArrayRandomlyWithFixedNumberTrueValues() {
+    public void testFillBooleanArrayRandomlyWithFixedNumberTrueValues() throws Exception {
+        Method method = KolmogorovSmirnovTest.class.getDeclaredMethod("fillBooleanArrayRandomlyWithFixedNumberTrueValues",
+                                                                      boolean[].class, Integer.TYPE, UniformRandomProvider.class);
+        method.setAccessible(true);
 
         final int[][] parameters = {{5, 1}, {5, 2}, {5, 3}, {5, 4}, {8, 1}, {8, 2}, {8, 3}, {8, 4}, {8, 5}, {8, 6}, {8, 7}};
 
         final double alpha = 0.001;
         final int numIterations = 1000000;
 
-        final RandomGenerator rng = new Well19937c(0);
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 0);
 
         for (final int[] parameter : parameters) {
 
@@ -537,7 +540,7 @@ public void testFillBooleanArrayRandomlyWithFixedNumberTrueValues() {
             final long[] counts = new long[1 << arraySize];
 
             for (int i = 0; i < numIterations; ++i) {
-                KolmogorovSmirnovTest.fillBooleanArrayRandomlyWithFixedNumberTrueValues(b, numberOfTrueValues, rng);
+                method.invoke(KolmogorovSmirnovTest.class, b, numberOfTrueValues, rng);
                 int x = 0;
                 for (int j = 0; j < arraySize; ++j) {
                     x = ((x << 1) | ((b[j])?1:0));
@@ -576,7 +579,7 @@ public void testFillBooleanArrayRandomlyWithFixedNumberTrueValues() {
     public void testBootstrapSmallSamplesWithTies() {
         final double[] x = {0, 2, 4, 6, 8, 8, 10, 15, 22, 30, 33, 36, 38};
         final double[] y = {9, 17, 20, 33, 40, 51, 60, 60, 72, 90, 101};
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(2000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 2000);
         Assert.assertEquals(0.0059, test.bootstrap(x, y, 10000, false), 1E-3);
     }
 
@@ -586,7 +589,7 @@ public void testBootstrapSmallSamplesWithTies() {
      */
     @Test
     public void testBootstrapLargeSamples() {
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
         Assert.assertEquals(0.0237, test.bootstrap(gaussian, gaussian2, 10000), 1E-2);
     }
 
@@ -599,7 +602,7 @@ public void testBootstrapLargeSamples() {
     public void testBootstrapRounding() {
         final double[] x = {2,4,6,8,9,10,11,12,13};
         final double[] y = {0,1,3,5,7};
-        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));
+        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(RandomSource.WELL_19937_C, 1000);
         Assert.assertEquals(0.06303, test.bootstrap(x, y, 10000, false), 1E-2);
     }
 
@@ -629,7 +632,7 @@ public void testFixTiesConsistency() throws Exception {
         final double[] fixedY = MathArrays.copyOf(y);
         checkFixTies(xP, yP);
         Assert.assertArrayEquals(fixedX, xP, 0);
-        Assert.assertArrayEquals(fixedY,  yP, 0);
+        Assert.assertArrayEquals(fixedY, yP, 0);
     }
 
     @Test
@@ -699,7 +702,7 @@ private void checkApproximateTable(int n, int m, double criticalValue, double al
      */
     private static void fixTies(double[] x, double[] y) throws Exception {
         Method method = KolmogorovSmirnovTest.class.getDeclaredMethod("fixTies",
-                                             double[].class, double[].class);
+                                                                      double[].class, double[].class);
         method.setAccessible(true);
         method.invoke(KolmogorovSmirnovTest.class, x, y);
     }
@@ -709,7 +712,7 @@ private static void fixTies(double[] x, double[] y) throws Exception {
      */
     private static boolean hasTies(double[] x, double[] y) throws Exception {
         Method method = KolmogorovSmirnovTest.class.getDeclaredMethod("hasTies",
-                                               double[].class, double[].class);
+                                                                      double[].class, double[].class);
         method.setAccessible(true);
         return (boolean) method.invoke(KolmogorovSmirnovTest.class, x, y);
     }

From 77c24aa92600598ee7994a1504b7bafc560b3809 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Thu, 17 Mar 2016 19:55:26 +0100
Subject: [PATCH 14/21] MATH-1158

Removed deprecated sampling API.
---
 .../AbstractRealDistribution.java             | 51 -----------
 .../math4/distribution/BetaDistribution.java  |  4 +-
 .../ConstantRealDistribution.java             | 15 ----
 .../distribution/EnumeratedDistribution.java  |  1 +
 .../EnumeratedRealDistribution.java           |  9 --
 .../distribution/ExponentialDistribution.java | 52 -----------
 .../math4/distribution/GammaDistribution.java | 84 +-----------------
 .../distribution/LogNormalDistribution.java   | 12 +--
 .../distribution/NormalDistribution.java      |  7 --
 .../distribution/ParetoDistribution.java      |  8 --
 .../math4/distribution/RealDistribution.java  | 27 ------
 .../distribution/UniformRealDistribution.java |  8 --
 .../math4/random/EmpiricalDistribution.java   | 88 -------------------
 .../stat/inference/KolmogorovSmirnovTest.java |  5 +-
 .../fitting/PolynomialCurveFitterTest.java    |  7 +-
 .../math4/fitting/SimpleCurveFitterTest.java  |  6 +-
 .../math4/linear/EigenDecompositionTest.java  |  6 +-
 .../linear/HessenbergTransformerTest.java     |  6 +-
 .../math4/linear/SchurTransformerTest.java    |  6 +-
 .../AggregateSummaryStatisticsTest.java       |  8 +-
 .../UnivariateStatisticAbstractTest.java      |  5 +-
 .../rank/PSquarePercentileTest.java           | 19 ++--
 .../commons/math4/util/MathUtilsTest.java     |  5 +-
 23 files changed, 55 insertions(+), 384 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
index 1f6c006f75..057dd8ad7b 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
@@ -20,11 +20,9 @@
 
 import org.apache.commons.math4.analysis.UnivariateFunction;
 import org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils;
-import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
@@ -50,14 +48,6 @@ public abstract class AbstractRealDistribution
     /** Serializable version identifier */
     private static final long serialVersionUID = 20160311L;
 
-    /**
-     * RNG instance used to generate samples from the distribution.
-     * @since 3.1
-     * XXX: hard-coded value to prevent "NullPointerException".
-     */
-    @Deprecated
-    protected final RandomGenerator random = new org.apache.commons.math4.random.Well19937c();
-
     /**
      * For a random variable {@code X} whose values are distributed according
      * to this distribution, this method returns {@code P(x0 < X <= x1)}.
@@ -211,47 +201,6 @@ protected double getSolverAbsoluteAccuracy() {
         return SOLVER_DEFAULT_ABSOLUTE_ACCURACY;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public void reseedRandomGenerator(long seed) {
-        random.setSeed(seed);
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * The default implementation uses the
-     * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling">
-     * inversion method.
-     * </a>
-     */
-    @Override
-    @Deprecated
-    public double sample() {
-        return inverseCumulativeProbability(random.nextDouble());
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * The default implementation generates the sample by calling
-     * {@link #sample()} in a loop.
-     */
-    @Override
-    @Deprecated
-    public double[] sample(int sampleSize) {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
-        }
-        double[] out = new double[sampleSize];
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-        return out;
-    }
-
     /**
      * {@inheritDoc}
      *
diff --git a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
index 0644eb128a..987e8ebb3b 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
@@ -254,7 +254,7 @@ public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
      * @since 3.6
      */
     private static class ChengBetaSampler implements RealDistribution.Sampler {
-        /** RNG (uniform distribution. */
+        /** RNG (uniform distribution). */
         private final UniformRandomProvider rng;
         /** First shape parameter. */
         private final double alphaShape;
@@ -264,7 +264,7 @@ private static class ChengBetaSampler implements RealDistribution.Sampler {
         /**
          * Creates a sampler instance.
          *
-         * @param rng Generator.
+         * @param generator RNG.
          * @param alpha Distribution first shape parameter.
          * @param beta Distribution second shape parameter.
          */
diff --git a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
index a9b3383bc8..a34179a41a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ConstantRealDistribution.java
@@ -104,21 +104,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public double sample()  {
-        return value;
-    }
-
-    /**
-     * Override with no-op (there is no generator).
-     * @param seed (ignored)
-     */
-    @Override
-    @Deprecated
-    public void reseedRandomGenerator(long seed) {}
-
     /**
      * {@inheritDoc}
      *
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
index fd339b271e..3f9acc8a74 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
@@ -310,6 +310,7 @@ public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveExc
      * Creates a {@link Sampler}.
      *
      * @param rng Random number generator.
+     * @return a new sampler instance.
      */
     public Sampler createSampler(final UniformRandomProvider rng) {
         return new Sampler(rng);
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
index 7cf834bd47..0e34f5a8f4 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
@@ -273,15 +273,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    @Deprecated
-    public double sample() {
-        return innerDistribution.sample();
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
diff --git a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
index 1dbd6b1818..9527aa00b8 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ExponentialDistribution.java
@@ -186,58 +186,6 @@ public double inverseCumulativeProbability(double p) throws OutOfRangeException
         return ret;
     }
 
-    /**
-     * {@inheritDoc}
-     *
-     * <p><strong>Algorithm Description</strong>: this implementation uses the
-     * <a href="http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html">
-     * Inversion Method</a> to generate exponentially distributed random values
-     * from uniform deviates.</p>
-     *
-     * @return a random value.
-     * @since 2.2
-     */
-    @Override
-    @Deprecated
-    public double sample() {
-        // Step 1:
-        double a = 0;
-        double u = random.nextDouble();
-
-        // Step 2 and 3:
-        while (u < 0.5) {
-            a += EXPONENTIAL_SA_QI[0];
-            u *= 2;
-        }
-
-        // Step 4 (now u >= 0.5):
-        u += u - 1;
-
-        // Step 5:
-        if (u <= EXPONENTIAL_SA_QI[0]) {
-            return mean * (a + u);
-        }
-
-        // Step 6:
-        int i = 0; // Should be 1, be we iterate before it in while using 0
-        double u2 = random.nextDouble();
-        double umin = u2;
-
-        // Step 7 and 8:
-        do {
-            ++i;
-            u2 = random.nextDouble();
-
-            if (u2 < umin) {
-                umin = u2;
-            }
-
-            // Step 8:
-        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1
-
-        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
-    }
-
     /** {@inheritDoc} */
     @Override
     protected double getSolverAbsoluteAccuracy() {
diff --git a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
index c50c9742a3..413493f31f 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GammaDistribution.java
@@ -350,88 +350,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /**
-     * <p>This implementation uses the following algorithms: </p>
-     *
-     * <p>For 0 < shape < 1: <br/>
-     * Ahrens, J. H. and Dieter, U., <i>Computer methods for
-     * sampling from gamma, beta, Poisson and binomial distributions.</i>
-     * Computing, 12, 223-246, 1974.</p>
-     *
-     * <p>For shape >= 1: <br/>
-     * Marsaglia and Tsang, <i>A Simple Method for Generating
-     * Gamma Variables.</i> ACM Transactions on Mathematical Software,
-     * Volume 26 Issue 3, September, 2000.</p>
-     *
-     * @return random value sampled from the Gamma(shape, scale) distribution
-     */
-    @Override
-    @Deprecated
-    public double sample()  {
-        if (shape < 1) {
-            // [1]: p. 228, Algorithm GS
-
-            while (true) {
-                // Step 1:
-                final double u = random.nextDouble();
-                final double bGS = 1 + shape / FastMath.E;
-                final double p = bGS * u;
-
-                if (p <= 1) {
-                    // Step 2:
-
-                    final double x = FastMath.pow(p, 1 / shape);
-                    final double u2 = random.nextDouble();
-
-                    if (u2 > FastMath.exp(-x)) {
-                        // Reject
-                        continue;
-                    } else {
-                        return scale * x;
-                    }
-                } else {
-                    // Step 3:
-
-                    final double x = -1 * FastMath.log((bGS - p) / shape);
-                    final double u2 = random.nextDouble();
-
-                    if (u2 > FastMath.pow(x, shape - 1)) {
-                        // Reject
-                        continue;
-                    } else {
-                        return scale * x;
-                    }
-                }
-            }
-        }
-
-        // Now shape >= 1
-
-        final double d = shape - 0.333333333333333333;
-        final double c = 1 / (3 * FastMath.sqrt(d));
-
-        while (true) {
-            final double x = random.nextGaussian();
-            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
-
-            if (v <= 0) {
-                continue;
-            }
-
-            final double x2 = x * x;
-            final double u = random.nextDouble();
-
-            // Squeeze
-            if (u < 1 - 0.0331 * x2 * x2) {
-                return scale * d * v;
-            }
-
-            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
-                return scale * d * v;
-            }
-        }
-    }
-
     /**
      * {@inheritDoc}
      *
@@ -461,7 +379,7 @@ public double sample()  {
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
         return new RealDistribution.Sampler() {
             /** Gaussian sampling. */
-            final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
+            private final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
 
             /** {@inheritDoc} */
             @Override
diff --git a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
index eafb90e8f2..6b155d51ec 100644
--- a/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/LogNormalDistribution.java
@@ -288,25 +288,17 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public double sample()  {
-        final double n = random.nextGaussian();
-        return FastMath.exp(scale + shape * n);
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
         return new RealDistribution.Sampler() {
             /** Gaussian sampling. */
-            final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
+            private final RealDistribution.Sampler gaussian = new NormalDistribution().createSampler(rng);
 
             /** {@inheritDoc} */
             @Override
             public double sample() {
-                final double n = random.nextGaussian();
+                final double n = gaussian.sample();
                 return FastMath.exp(scale + shape * n);
             }
         };
diff --git a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
index a8330d5e75..b8e919b1f9 100644
--- a/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/NormalDistribution.java
@@ -235,13 +235,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public double sample()  {
-        return standardDeviation * random.nextGaussian() + mean;
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
diff --git a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
index 2174322316..04427dacb2 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ParetoDistribution.java
@@ -248,14 +248,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public double sample()  {
-        final double n = random.nextDouble();
-        return scale / FastMath.pow(n, 1 / shape);
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
diff --git a/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
index f0e453aa6e..7ddc1fd226 100644
--- a/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/RealDistribution.java
@@ -160,33 +160,6 @@ public interface RealDistribution {
      */
     boolean isSupportConnected();
 
-    /**
-     * Reseed the random generator used to generate samples.
-     *
-     * @param seed the new seed
-     */
-    @Deprecated
-    void reseedRandomGenerator(long seed);
-
-    /**
-     * Generate a random value sampled from this distribution.
-     *
-     * @return a random value.
-     */
-    @Deprecated
-    double sample();
-
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate
-     * @return an array representing the random sample
-     * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
-     * if {@code sampleSize} is not positive
-     */
-    @Deprecated
-    double[] sample(int sampleSize);
-
     /**
      * Creates a sampler.
      *
diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
index 404cc02866..a7a1c4d9e5 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
@@ -158,14 +158,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    @Deprecated
-    public double sample()  {
-        final double u = random.nextDouble();
-        return u * upper + (1 - u) * lower;
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
diff --git a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java b/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
index 926ad093c3..fad5226af4 100644
--- a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
@@ -42,7 +42,6 @@
 import org.apache.commons.math4.stat.descriptive.StatisticalSummary;
 import org.apache.commons.math4.stat.descriptive.SummaryStatistics;
 import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
@@ -113,10 +112,6 @@ public class EmpiricalDistribution extends AbstractRealDistribution {
     /** Serializable version identifier */
     private static final long serialVersionUID = 5729073523949762654L;
 
-    /** RandomDataGenerator instance to use in repeated calls to getNext() */
-    @Deprecated
-    protected final RandomDataGenerator randomData;
-
     /** List of SummaryStatistics objects characterizing the bins */
     private final List<SummaryStatistics> binStats;
 
@@ -160,54 +155,8 @@ public EmpiricalDistribution(int binCount) {
         }
         this.binCount = binCount;
         binStats = new ArrayList<SummaryStatistics>();
-        randomData = null; // XXX remove
      }
 
-    /**
-     * Creates a new EmpiricalDistribution with the specified bin count using the
-     * provided {@link RandomGenerator} as the source of random data.
-     *
-     * @param binCount number of bins. Must be strictly positive.
-     * @param generator random data generator (may be null, resulting in default JDK generator)
-     * @throws NotStrictlyPositiveException if {@code binCount <= 0}.
-     * @since 3.0
-     */
-    @Deprecated
-    public EmpiricalDistribution(int binCount, RandomGenerator generator) {
-         this(binCount, new RandomDataGenerator(generator));
-    }
-
-    /**
-     * Creates a new EmpiricalDistribution with default bin count using the
-     * provided {@link RandomGenerator} as the source of random data.
-     *
-     * @param generator random data generator (may be null, resulting in default JDK generator)
-     * @since 3.0
-     */
-    @Deprecated
-    public EmpiricalDistribution(RandomGenerator generator) {
-         this(DEFAULT_BIN_COUNT, generator);
-    }
-
-    /**
-     * Private constructor to allow lazy initialisation of the RNG contained
-     * in the {@link #randomData} instance variable.
-     *
-     * @param binCount number of bins. Must be strictly positive.
-     * @param randomData Random data generator.
-     * @throws NotStrictlyPositiveException if {@code binCount <= 0}.
-     */
-    @Deprecated
-    private EmpiricalDistribution(int binCount,
-                                  RandomDataGenerator randomData) {
-        if (binCount <= 0) {
-            throw new NotStrictlyPositiveException(binCount);
-        }
-        this.binCount = binCount;
-        this.randomData = randomData;
-        binStats = new ArrayList<SummaryStatistics>();
-    }
-
     /**
      * Computes the empirical distribution from the provided
      * array of numbers.
@@ -455,21 +404,6 @@ private int findBin(double value) {
                 binCount - 1);
     }
 
-    /**
-     * Generates a random value from this distribution.
-     * <strong>Preconditions:</strong><ul>
-     * <li>the distribution must be loaded before invoking this method</li></ul>
-     * @return the random value.
-     * @throws MathIllegalStateException if the distribution has not been loaded
-     */
-    @Deprecated
-    public double getNextValue() throws MathIllegalStateException {
-        if (!loaded) {
-            throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
-        }
-        return sample();
-    }
-
     /**
      * Returns a {@link StatisticalSummary} describing this distribution.
      * <strong>Preconditions:</strong><ul>
@@ -556,18 +490,6 @@ public boolean isLoaded() {
         return loaded;
     }
 
-    /**
-     * Reseeds the random number generator used by {@link #getNextValue()}.
-     *
-     * @param seed random generator seed
-     * @since 3.0
-     * XXX REMOVE
-     */
-    @Deprecated
-    public void reSeed(long seed) {
-        randomData.reSeed(seed);
-    }
-
     // Distribution methods ---------------------------
 
     /**
@@ -742,16 +664,6 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /**
-     * {@inheritDoc}
-     * @since 3.1
-     */
-    @Override
-    @Deprecated
-    public void reseedRandomGenerator(long seed) {
-        randomData.reSeed(seed);
-    }
-
     /**{@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
index b75de0e8ef..79451dd55e 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java
@@ -160,7 +160,8 @@ public KolmogorovSmirnovTest() {
      * The #monteCarloP(double, int, int, boolean, int) that uses the generator supplied to this
      * constructor is deprecated as of version 3.6.
      *
-     * @param rng random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}
+     * @param source random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}
+     * @param seed Seed.
      */
     @Deprecated
     public KolmogorovSmirnovTest(RandomSource source,
@@ -1209,10 +1210,8 @@ private static boolean hasTies(double[] x, double[] y) {
     private static void jitter(double[] data, RealDistribution.Sampler sampler) {
         for (int i = 0; i < data.length; i++) {
             final double d = sampler.sample();
-            System.out.println("d=" + d); // XXX
             data[i] += d;
         }
-        System.out.println(); // XXX
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/math4/fitting/PolynomialCurveFitterTest.java b/src/test/java/org/apache/commons/math4/fitting/PolynomialCurveFitterTest.java
index 89ebc2b952..2b1e2d3f19 100644
--- a/src/test/java/org/apache/commons/math4/fitting/PolynomialCurveFitterTest.java
+++ b/src/test/java/org/apache/commons/math4/fitting/PolynomialCurveFitterTest.java
@@ -26,6 +26,7 @@
 import org.apache.commons.math4.fitting.PolynomialCurveFitter;
 import org.apache.commons.math4.fitting.WeightedObservedPoints;
 import org.apache.commons.math4.util.FastMath;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -35,9 +36,9 @@
 public class PolynomialCurveFitterTest {
     @Test
     public void testFit() {
-        final RealDistribution rng = new UniformRealDistribution(-100, 100);
-        rng.reseedRandomGenerator(64925784252L);
-
+        final RealDistribution.Sampler rng
+            = new UniformRealDistribution(-100, 100).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                       64925784252L));
         final double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2
         final PolynomialFunction f = new PolynomialFunction(coeff);
 
diff --git a/src/test/java/org/apache/commons/math4/fitting/SimpleCurveFitterTest.java b/src/test/java/org/apache/commons/math4/fitting/SimpleCurveFitterTest.java
index 01d28b2a3a..4a3867c513 100644
--- a/src/test/java/org/apache/commons/math4/fitting/SimpleCurveFitterTest.java
+++ b/src/test/java/org/apache/commons/math4/fitting/SimpleCurveFitterTest.java
@@ -25,6 +25,7 @@
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.fitting.SimpleCurveFitter;
 import org.apache.commons.math4.fitting.WeightedObservedPoints;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Test;
 
 /**
@@ -34,8 +35,9 @@ public class SimpleCurveFitterTest {
     @Test
     public void testPolynomialFit() {
         final Random randomizer = new Random(53882150042L);
-        final RealDistribution rng = new UniformRealDistribution(-100, 100);
-        rng.reseedRandomGenerator(64925784252L);
+        final RealDistribution.Sampler rng
+            = new UniformRealDistribution(-100, 100).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                       64925784253L));
 
         final double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2
         final PolynomialFunction f = new PolynomialFunction(coeff);
diff --git a/src/test/java/org/apache/commons/math4/linear/EigenDecompositionTest.java b/src/test/java/org/apache/commons/math4/linear/EigenDecompositionTest.java
index fba9e9089e..683954f656 100644
--- a/src/test/java/org/apache/commons/math4/linear/EigenDecompositionTest.java
+++ b/src/test/java/org/apache/commons/math4/linear/EigenDecompositionTest.java
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.Random;
 
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.exception.MathUnsupportedOperationException;
 import org.apache.commons.math4.linear.ArrayRealVector;
@@ -32,6 +33,7 @@
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.Precision;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -468,7 +470,9 @@ public void testMath1051() {
     public void testNormalDistributionUnsymmetricMatrix() {
         for (int run = 0; run < 100; run++) {
             Random r = new Random(System.currentTimeMillis());
-            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);
+            RealDistribution.Sampler dist 
+                = new NormalDistribution(0.0, r.nextDouble() * 5).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                                    64925784252L));
 
             // matrix size
             int size = r.nextInt(20) + 4;
diff --git a/src/test/java/org/apache/commons/math4/linear/HessenbergTransformerTest.java b/src/test/java/org/apache/commons/math4/linear/HessenbergTransformerTest.java
index 310f23de74..af6e837311 100644
--- a/src/test/java/org/apache/commons/math4/linear/HessenbergTransformerTest.java
+++ b/src/test/java/org/apache/commons/math4/linear/HessenbergTransformerTest.java
@@ -19,11 +19,13 @@
 
 import java.util.Random;
 
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.linear.HessenbergTransformer;
 import org.apache.commons.math4.linear.MatrixUtils;
 import org.apache.commons.math4.linear.NonSquareMatrixException;
 import org.apache.commons.math4.linear.RealMatrix;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Test;
 import org.junit.Assert;
 
@@ -112,7 +114,9 @@ public void testRandomData() {
     public void testRandomDataNormalDistribution() {
         for (int run = 0; run < 100; run++) {
             Random r = new Random(System.currentTimeMillis());
-            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);
+            RealDistribution.Sampler dist 
+                = new NormalDistribution(0.0, r.nextDouble() * 5).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                                    64925784252L));
 
             // matrix size
             int size = r.nextInt(20) + 4;
diff --git a/src/test/java/org/apache/commons/math4/linear/SchurTransformerTest.java b/src/test/java/org/apache/commons/math4/linear/SchurTransformerTest.java
index e0a5611a47..f2cf72ee0a 100644
--- a/src/test/java/org/apache/commons/math4/linear/SchurTransformerTest.java
+++ b/src/test/java/org/apache/commons/math4/linear/SchurTransformerTest.java
@@ -19,11 +19,13 @@
 
 import java.util.Random;
 
+import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.linear.MatrixUtils;
 import org.apache.commons.math4.linear.NonSquareMatrixException;
 import org.apache.commons.math4.linear.RealMatrix;
 import org.apache.commons.math4.linear.SchurTransformer;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Test;
 import org.junit.Assert;
 
@@ -116,7 +118,9 @@ public void testRandomData() {
     public void testRandomDataNormalDistribution() {
         for (int run = 0; run < 100; run++) {
             Random r = new Random(System.currentTimeMillis());
-            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);
+            RealDistribution.Sampler dist
+                = new NormalDistribution(0.0, r.nextDouble() * 5).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                                    64925784252L));
 
             // matrix size
             int size = r.nextInt(20) + 4;
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
index 5324ecf4f5..139a06023d 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
@@ -23,9 +23,11 @@
 import org.apache.commons.math4.TestUtils;
 import org.apache.commons.math4.distribution.IntegerDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.AbstractRealDistribution;
 import org.apache.commons.math4.distribution.UniformIntegerDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.util.Precision;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -281,9 +283,11 @@ protected static void assertEquals(StatisticalSummary expected, StatisticalSumma
      */
     private double[] generateSample() {
         final IntegerDistribution size = new UniformIntegerDistribution(10, 100);
-        final RealDistribution randomData = new UniformRealDistribution(-100, 100);
+        final RealDistribution.Sampler randomData
+            = new UniformRealDistribution(-100, 100).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                       64925784252L));;
         final int sampleSize = size.sample();
-        final double[] out = randomData.sample(sampleSize);
+        final double[] out = AbstractRealDistribution.sample(sampleSize, randomData);
         return out;
     }
 
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
index 6f12b1e185..cd5be562fa 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
@@ -27,6 +27,7 @@
 import org.apache.commons.math4.stat.descriptive.UnivariateStatistic;
 import org.apache.commons.math4.stat.descriptive.WeightedEvaluation;
 import org.apache.commons.math4.util.FastMath;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -187,7 +188,9 @@ public void testWeightedConsistency() {
         // Fill values array with random data from N(mu, sigma)
         // and fill valuesList with values from values array with
         // values[i] repeated weights[i] times, each i
-        final RealDistribution valueDist = new NormalDistribution(mu, sigma);
+        final RealDistribution.Sampler valueDist
+            = new NormalDistribution(mu, sigma).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                  64925784252L));
         List<Double> valuesList = new ArrayList<Double>();
         for (int i = 0; i < len; i++) {
             double value = valueDist.sample();
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
index fdbf689f0b..52cea33492 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentileTest.java
@@ -27,6 +27,7 @@
 import org.apache.commons.math4.distribution.LogNormalDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.AbstractRealDistribution;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.OutOfRangeException;
@@ -714,39 +715,39 @@ private void doDistributionTest(RealDistribution distribution) {
             distribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 1000));
         double data[];
 
-        data = distribution.sample(VERY_LARGE);
+        data = AbstractRealDistribution.sample(VERY_LARGE, sampler);
         doCalculatePercentile(50, data, 0.0001);
         doCalculatePercentile(95, data, 0.0001);
 
-        data = distribution.sample(LARGE);
+        data = AbstractRealDistribution.sample(LARGE, sampler);
         doCalculatePercentile(50, data, 0.001);
         doCalculatePercentile(95, data, 0.001);
 
-        data = distribution.sample(VERY_BIG);
+        data = AbstractRealDistribution.sample(VERY_BIG, sampler);
         doCalculatePercentile(50, data, 0.001);
         doCalculatePercentile(95, data, 0.001);
 
-        data = distribution.sample(BIG);
+        data = AbstractRealDistribution.sample(BIG, sampler);
         doCalculatePercentile(50, data, 0.001);
         doCalculatePercentile(95, data, 0.001);
 
-        data = distribution.sample(STANDARD);
+        data = AbstractRealDistribution.sample(STANDARD, sampler);
         doCalculatePercentile(50, data, 0.005);
         doCalculatePercentile(95, data, 0.005);
 
-        data = distribution.sample(MEDIUM);
+        data = AbstractRealDistribution.sample(MEDIUM, sampler);
         doCalculatePercentile(50, data, 0.005);
         doCalculatePercentile(95, data, 0.005);
 
-        data = distribution.sample(NOMINAL);
+        data = AbstractRealDistribution.sample(NOMINAL, sampler);
         doCalculatePercentile(50, data, 0.01);
         doCalculatePercentile(95, data, 0.01);
 
-        data = distribution.sample(SMALL);
+        data = AbstractRealDistribution.sample(SMALL, sampler);
         doCalculatePercentile(50, data, 0.01);
         doCalculatePercentile(95, data, 0.01);
 
-        data = distribution.sample(TINY);
+        data = AbstractRealDistribution.sample(TINY, sampler);
         doCalculatePercentile(50, data, 0.05);
         doCalculatePercentile(95, data, 0.05);
 
diff --git a/src/test/java/org/apache/commons/math4/util/MathUtilsTest.java b/src/test/java/org/apache/commons/math4/util/MathUtilsTest.java
index b9beee3693..8ce9a2d484 100644
--- a/src/test/java/org/apache/commons/math4/util/MathUtilsTest.java
+++ b/src/test/java/org/apache/commons/math4/util/MathUtilsTest.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.random.RandomDataGenerator;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 import org.junit.Assert;
@@ -100,7 +101,9 @@ public void testPermutedArrayHash() {
 
         // Generate 10 distinct random values
         for (int i = 0; i < 10; i++) {
-            final RealDistribution u = new UniformRealDistribution(i + 0.5, i + 0.75);
+            final RealDistribution.Sampler u
+                = new UniformRealDistribution(i + 0.5, i + 0.75).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                                   64925784252L));
             original[i] = u.sample();
         }
 

From ae2c81ad18f82278c5840d12ac22e572c3d31bf3 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 19 Mar 2016 23:47:21 +0100
Subject: [PATCH 15/21] MATH-1158

Removed deprecated sampling API (and constructors).
In this pass, the integer distributions have been updated.

Class "RandomDataGenerator" has been reverted to use the old RNG implementation (a wrapper is created whenever it must be passed to a distribution's "createSampler" method).
---
 .../AbstractIntegerDistribution.java          |  86 +++---
 .../distribution/BinomialDistribution.java    |  29 +-
 .../distribution/EnumeratedDistribution.java  | 150 +---------
 .../EnumeratedIntegerDistribution.java        |  93 ++-----
 .../distribution/GeometricDistribution.java   |  26 +-
 .../HypergeometricDistribution.java           |  39 +--
 .../distribution/IntegerDistribution.java     |  35 +--
 .../distribution/PascalDistribution.java      |  34 +--
 .../distribution/PoissonDistribution.java     | 258 +++++++-----------
 .../UniformIntegerDistribution.java           |  70 ++---
 .../math4/distribution/ZipfDistribution.java  |  66 ++---
 .../math4/random/RandomDataGenerator.java     | 163 +++++------
 .../math4/stat/inference/BinomialTest.java    |   3 +-
 .../apache/commons/math4/util/MathArrays.java |  22 +-
 .../apache/commons/math4/PerfTestUtils.java   |   6 +-
 .../AbstractIntegerDistributionTest.java      |   4 -
 .../EnumeratedIntegerDistributionTest.java    |   7 +-
 .../HypergeometricDistributionTest.java       |   4 +-
 .../IntegerDistributionAbstractTest.java      |   8 +-
 .../distribution/ZipfDistributionTest.java    |  38 +--
 .../math4/random/RandomDataGeneratorTest.java |  14 -
 .../AggregateSummaryStatisticsTest.java       |   8 +-
 .../UnivariateStatisticAbstractTest.java      |  10 +-
 .../commons/math4/util/MathArraysTest.java    |   7 +-
 .../math4/util/ResizableDoubleArrayTest.java  |   8 +-
 25 files changed, 387 insertions(+), 801 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
index 95d6f074ce..4612b58b04 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
@@ -19,11 +19,10 @@
 import java.io.Serializable;
 
 import org.apache.commons.math4.exception.MathInternalError;
-import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -33,23 +32,8 @@
  *
  */
 public abstract class AbstractIntegerDistribution implements IntegerDistribution, Serializable {
-
     /** Serializable version identifier */
-    private static final long serialVersionUID = -1146319659338487221L;
-
-    /**
-     * RNG instance used to generate samples from the distribution.
-     * @since 3.1
-     */
-    protected final RandomGenerator random;
-
-    /**
-     * @param rng Random number generator.
-     * @since 3.1
-     */
-    protected AbstractIntegerDistribution(RandomGenerator rng) {
-        random = rng;
-    }
+    private static final long serialVersionUID = 20160318L;
 
     /**
      * {@inheritDoc}
@@ -159,43 +143,6 @@ protected int solveInverseCumulativeProbability(final double p, int lower, int u
         return upper;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    public void reseedRandomGenerator(long seed) {
-        random.setSeed(seed);
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * The default implementation uses the
-     * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling">
-     * inversion method</a>.
-     */
-    @Override
-    public int sample() {
-        return inverseCumulativeProbability(random.nextDouble());
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * The default implementation generates the sample by calling
-     * {@link #sample()} in a loop.
-     */
-    @Override
-    public int[] sample(int sampleSize) {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(
-                    LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
-        }
-        int[] out = new int[sampleSize];
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-        return out;
-    }
-
     /**
      * Computes the cumulative probability function and checks for {@code NaN}
      * values returned. Throws {@code MathInternalError} if the value is
@@ -227,4 +174,33 @@ private double checkedCumulativeProbability(int argument)
     public double logProbability(int x) {
         return FastMath.log(probability(x));
     }
+
+    /**
+     * Utility function for allocating an array and filling it with {@code n}
+     * samples generated by the given {@code sampler}.
+     *
+     * @param n Number of samples.
+     * @param sampler Sampler.
+     * @return an array of size {@code n}.
+     */
+    public static int[] sample(int n,
+                               IntegerDistribution.Sampler sampler) {
+        final int[] samples = new int[n];
+        for (int i = 0; i < n; i++) {
+            samples[i] = sampler.sample();
+        }
+        return samples;
+    }
+
+    /**{@inheritDoc} */
+    @Override
+    public IntegerDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new IntegerDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public int sample() {
+                return inverseCumulativeProbability(rng.nextDouble());
+            }
+        };
+    }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/BinomialDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BinomialDistribution.java
index a9e94c6640..ffcc1b9823 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BinomialDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BinomialDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.util.FastMath;
 
@@ -38,41 +36,16 @@ public class BinomialDistribution extends AbstractIntegerDistribution {
     /** The probability of success. */
     private final double probabilityOfSuccess;
 
-    /**
-     * Create a binomial distribution with the given number of trials and
-     * probability of success.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param trials Number of trials.
-     * @param p Probability of success.
-     * @throws NotPositiveException if {@code trials < 0}.
-     * @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
-     */
-    public BinomialDistribution(int trials, double p) {
-        this(new Well19937c(), trials, p);
-    }
-
     /**
      * Creates a binomial distribution.
      *
-     * @param rng Random number generator.
      * @param trials Number of trials.
      * @param p Probability of success.
      * @throws NotPositiveException if {@code trials < 0}.
      * @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
-     * @since 3.1
      */
-    public BinomialDistribution(RandomGenerator rng,
-                                int trials,
+    public BinomialDistribution(int trials,
                                 double p) {
-        super(rng);
-
         if (trials < 0) {
             throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,
                                            trials);
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
index 3f9acc8a74..88ce03782d 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
@@ -29,7 +29,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.Pair;
@@ -52,69 +51,23 @@
  * @since 3.2
  */
 public class EnumeratedDistribution<T> implements Serializable {
-
     /** Serializable UID. */
-    private static final long serialVersionUID = 20123308L;
-
-    /**
-     * RNG instance used to generate samples from the distribution.
-     */
-    @Deprecated
-    protected RandomGenerator random = null;
-
+    private static final long serialVersionUID = 20160319L;
     /**
      * List of random variable values.
      */
     private final List<T> singletons;
-
     /**
      * Probabilities of respective random variable values. For i = 0, ..., singletons.size() - 1,
      * probability[i] is the probability that a random variable following this distribution takes
      * the value singletons[i].
      */
     private final double[] probabilities;
-
     /**
      * Cumulative probabilities, cached to speed up sampling.
      */
     private final double[] cumulativeProbabilities;
 
-    /**
-     * XXX TODO: remove once "EnumeratedIntegerDistribution" has been changed.
-     */
-    @Deprecated
-    public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf)
-        throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {
-        random = rng;
-        singletons = new ArrayList<T>(pmf.size());
-        final double[] probs = new double[pmf.size()];
-
-        for (int i = 0; i < pmf.size(); i++) {
-            final Pair<T, Double> sample = pmf.get(i);
-            singletons.add(sample.getKey());
-            final double p = sample.getValue();
-            if (p < 0) {
-                throw new NotPositiveException(sample.getValue());
-            }
-            if (Double.isInfinite(p)) {
-                throw new NotFiniteNumberException(p);
-            }
-            if (Double.isNaN(p)) {
-                throw new NotANumberException();
-            }
-            probs[i] = p;
-        }
-
-        probabilities = MathArrays.normalizeArray(probs, 1.0);
-
-        cumulativeProbabilities = new double[probabilities.length];
-        double sum = 0;
-        for (int i = 0; i < probabilities.length; i++) {
-            sum += probabilities[i];
-            cumulativeProbabilities[i] = sum;
-        }
-    }
-
     /**
      * Create an enumerated distribution using the given random number generator
      * and probability mass function enumeration.
@@ -160,16 +113,6 @@ public EnumeratedDistribution(final List<Pair<T, Double>> pmf)
         }
     }
 
-    /**
-     * Reseed the random generator used to generate samples.
-     *
-     * @param seed the new seed
-     */
-    @Deprecated
-    public void reseedRandomGenerator(long seed) {
-        random.setSeed(seed);
-    }
-
     /**
      * <p>For a random variable {@code X} whose values are distributed according to
      * this distribution, this method returns {@code P(X = x)}. In other words,
@@ -215,97 +158,6 @@ public List<Pair<T, Double>> getPmf() {
         return samples;
     }
 
-    /**
-     * Generate a random value sampled from this distribution.
-     *
-     * @return a random value.
-     */
-    @Deprecated
-    public T sample() {
-        final double randomValue = random.nextDouble();
-
-        int index = Arrays.binarySearch(cumulativeProbabilities, randomValue);
-        if (index < 0) {
-            index = -index-1;
-        }
-
-        if (index >= 0 &&
-            index < probabilities.length &&
-            randomValue < cumulativeProbabilities[index]) {
-            return singletons.get(index);
-        }
-
-        /* This should never happen, but it ensures we will return a correct
-         * object in case there is some floating point inequality problem
-         * wrt the cumulative probabilities. */
-        return singletons.get(singletons.size() - 1);
-    }
-
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
-    @Deprecated
-    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
-        }
-
-        final Object[] out = new Object[sampleSize];
-
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
-        return out;
-
-    }
-
-    /**
-     * Generate a random sample from the distribution.
-     * <p>
-     * If the requested samples fit in the specified array, it is returned
-     * therein. Otherwise, a new array is allocated with the runtime type of
-     * the specified array and the size of this collection.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @param array the array to populate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
-     * @throws NullArgumentException if {@code array} is null
-     */
-    @Deprecated
-    public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveException {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
-        }
-
-        if (array == null) {
-            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
-        }
-
-        T[] out;
-        if (array.length < sampleSize) {
-            @SuppressWarnings("unchecked") // safe as both are of type T
-            final T[] unchecked = (T[]) Array.newInstance(array.getClass().getComponentType(), sampleSize);
-            out = unchecked;
-        } else {
-            out = array;
-        }
-
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
-        return out;
-
-    }
-
     /**
      * Creates a {@link Sampler}.
      *
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
index af641406ff..e8f3ed6366 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
@@ -27,8 +27,7 @@
 import org.apache.commons.math4.exception.NotANumberException;
 import org.apache.commons.math4.exception.NotFiniteNumberException;
 import org.apache.commons.math4.exception.NotPositiveException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
 /**
@@ -42,10 +41,8 @@
  * @since 3.2
  */
 public class EnumeratedIntegerDistribution extends AbstractIntegerDistribution {
-
     /** Serializable UID. */
     private static final long serialVersionUID = 20130308L;
-
     /**
      * {@link EnumeratedDistribution} instance (using the {@link Integer} wrapper)
      * used to generate the pmf.
@@ -53,36 +50,8 @@ public class EnumeratedIntegerDistribution extends AbstractIntegerDistribution {
     protected final EnumeratedDistribution<Integer> innerDistribution;
 
     /**
-     * Create a discrete distribution using the given probability mass function
-     * definition.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param singletons array of random variable values.
-     * @param probabilities array of probabilities.
-     * @throws DimensionMismatchException if
-     * {@code singletons.length != probabilities.length}
-     * @throws NotPositiveException if any of the probabilities are negative.
-     * @throws NotFiniteNumberException if any of the probabilities are infinite.
-     * @throws NotANumberException if any of the probabilities are NaN.
-     * @throws MathArithmeticException all of the probabilities are 0.
-     */
-    public EnumeratedIntegerDistribution(final int[] singletons, final double[] probabilities)
-    throws DimensionMismatchException, NotPositiveException, MathArithmeticException,
-           NotFiniteNumberException, NotANumberException{
-        this(new Well19937c(), singletons, probabilities);
-    }
-
-    /**
-     * Create a discrete distribution using the given random number generator
-     * and probability mass function definition.
+     * Create a discrete distribution.
      *
-     * @param rng random number generator.
      * @param singletons array of random variable values.
      * @param probabilities array of probabilities.
      * @throws DimensionMismatchException if
@@ -92,25 +61,24 @@ public EnumeratedIntegerDistribution(final int[] singletons, final double[] prob
      * @throws NotANumberException if any of the probabilities are NaN.
      * @throws MathArithmeticException all of the probabilities are 0.
      */
-    public EnumeratedIntegerDistribution(final RandomGenerator rng,
-                                       final int[] singletons, final double[] probabilities)
-        throws DimensionMismatchException, NotPositiveException, MathArithmeticException,
-                NotFiniteNumberException, NotANumberException {
-        super(rng);
-        innerDistribution = new EnumeratedDistribution<Integer>(
-                rng, createDistribution(singletons, probabilities));
+    public EnumeratedIntegerDistribution(final int[] singletons,
+                                         final double[] probabilities)
+        throws DimensionMismatchException,
+               NotPositiveException,
+               MathArithmeticException,
+               NotFiniteNumberException,
+               NotANumberException {
+        innerDistribution = new EnumeratedDistribution<Integer>(createDistribution(singletons,
+                                                                                   probabilities));
     }
 
     /**
-     * Create a discrete integer-valued distribution from the input data.  Values are assigned
-     * mass based on their frequency.
+     * Create a discrete integer-valued distribution from the input data.
+     * Values are assigned mass based on their frequency.
      *
-     * @param rng random number generator used for sampling
      * @param data input dataset
-     * #since 3.6
      */
-    public EnumeratedIntegerDistribution(final RandomGenerator rng, final int[] data) {
-        super(rng);
+    public EnumeratedIntegerDistribution(final int[] data) {
         final Map<Integer, Integer> dataMap = new HashMap<Integer, Integer>();
         for (int value : data) {
             Integer count = dataMap.get(value);
@@ -129,19 +97,7 @@ public EnumeratedIntegerDistribution(final RandomGenerator rng, final int[] data
             probabilities[index] = entry.getValue().intValue() / denom;
             index++;
         }
-        innerDistribution = new EnumeratedDistribution<Integer>(rng, createDistribution(values, probabilities));
-    }
-
-    /**
-     * Create a discrete integer-valued distribution from the input data.  Values are assigned
-     * mass based on their frequency.  For example, [0,1,1,2] as input creates a distribution
-     * with values 0, 1 and 2 having probability masses 0.25, 0.5 and 0.25 respectively,
-     *
-     * @param data input dataset
-     * @since 3.6
-     */
-    public EnumeratedIntegerDistribution(final int[] data) {
-        this(new Well19937c(), data);
+        innerDistribution = new EnumeratedDistribution<Integer>(createDistribution(values, probabilities));
     }
 
     /**
@@ -162,7 +118,6 @@ private static List<Pair<Integer, Double>>  createDistribution(int[] singletons,
             samples.add(new Pair<Integer, Double>(singletons[i], probabilities[i]));
         }
         return samples;
-
     }
 
     /**
@@ -273,11 +228,19 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    /** {@inheritDoc} */
     @Override
-    public int sample() {
-        return innerDistribution.sample();
+    public IntegerDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new IntegerDistribution.Sampler() {
+            /** Delegate. */
+            private final EnumeratedDistribution<Integer>.Sampler inner =
+                innerDistribution.createSampler(rng);
+
+            /** {@inheritDoc} */
+            @Override
+            public int sample() {
+                return inner.sample();
+            }
+        };
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
index 55456cc3dc..4c3795338a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
@@ -18,8 +18,6 @@
 
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -32,7 +30,7 @@
 public class GeometricDistribution extends AbstractIntegerDistribution {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20130507L;
+    private static final long serialVersionUID = 20160318L;
     /** The probability of success. */
     private final double probabilityOfSuccess;
     /** {@code log(p)} where p is the probability of success. */
@@ -40,33 +38,13 @@ public class GeometricDistribution extends AbstractIntegerDistribution {
     /** {@code log(1 - p)} where p is the probability of success. */
     private final double log1mProbabilityOfSuccess;
 
-    /**
-     * Create a geometric distribution with the given probability of success.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param p probability of success.
-     * @throws OutOfRangeException if {@code p <= 0} or {@code p > 1}.
-     */
-    public GeometricDistribution(double p) {
-        this(new Well19937c(), p);
-    }
-
     /**
      * Creates a geometric distribution.
      *
-     * @param rng Random number generator.
      * @param p Probability of success.
      * @throws OutOfRangeException if {@code p <= 0} or {@code p > 1}.
      */
-    public GeometricDistribution(RandomGenerator rng, double p) {
-        super(rng);
-
+    public GeometricDistribution(double p) {
         if (p <= 0 || p > 1) {
             throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);
         }
diff --git a/src/main/java/org/apache/commons/math4/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math4/distribution/HypergeometricDistribution.java
index cf385f8a79..137738df64 100644
--- a/src/main/java/org/apache/commons/math4/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/HypergeometricDistribution.java
@@ -21,8 +21,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -33,7 +31,7 @@
  */
 public class HypergeometricDistribution extends AbstractIntegerDistribution {
     /** Serializable version identifier. */
-    private static final long serialVersionUID = -436928820673516179L;
+    private static final long serialVersionUID = 20160318L;
     /** The number of successes in the population. */
     private final int numberOfSuccesses;
     /** The population size. */
@@ -45,34 +43,9 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {
     /** Whether or not the numerical variance has been calculated */
     private boolean numericalVarianceIsCalculated = false;
 
-    /**
-     * Construct a new hypergeometric distribution with the specified population
-     * size, number of successes in the population, and sample size.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param populationSize Population size.
-     * @param numberOfSuccesses Number of successes in the population.
-     * @param sampleSize Sample size.
-     * @throws NotPositiveException if {@code numberOfSuccesses < 0}.
-     * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
-     * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
-     * or {@code sampleSize > populationSize}.
-     */
-    public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)
-    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
-        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);
-    }
-
     /**
      * Creates a new hypergeometric distribution.
      *
-     * @param rng Random number generator.
      * @param populationSize Population size.
      * @param numberOfSuccesses Number of successes in the population.
      * @param sampleSize Sample size.
@@ -80,15 +53,13 @@ public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int
      * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
      * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
      * or {@code sampleSize > populationSize}.
-     * @since 3.1
      */
-    public HypergeometricDistribution(RandomGenerator rng,
-                                      int populationSize,
+    public HypergeometricDistribution(int populationSize,
                                       int numberOfSuccesses,
                                       int sampleSize)
-    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
-        super(rng);
-
+    throws NotPositiveException,
+           NotStrictlyPositiveException,
+           NumberIsTooLargeException {
         if (populationSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,
                                                    populationSize);
diff --git a/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
index 2a3e90552a..aed97aba27 100644
--- a/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
@@ -18,6 +18,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Interface for distributions on the integers.
@@ -145,29 +146,23 @@ public interface IntegerDistribution {
     boolean isSupportConnected();
 
     /**
-     * Reseed the random generator used to generate samples.
+     * Creates a sampler.
      *
-     * @param seed the new seed
-     * @since 3.0
-     */
-    void reseedRandomGenerator(long seed);
-
-    /**
-     * Generate a random value sampled from this distribution.
-     *
-     * @return a random value
-     * @since 3.0
+     * @param rng Generator of uniformly distributed numbers.
+     * @return a sampler that produces random numbers according this
+     * distribution.
      */
-    int sample();
+    Sampler createSampler(UniformRandomProvider rng);
 
     /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate
-     * @return an array representing the random sample
-     * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
-     * if {@code sampleSize} is not positive
-     * @since 3.0
+     * Sampling functionality.
      */
-    int[] sample(int sampleSize);
+    interface Sampler {
+        /**
+         * Generates a random value sampled from this distribution.
+         *
+         * @return a random value.
+         */
+        int sample();
+    }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/PascalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/PascalDistribution.java
index f11d0bfd6c..b8f246443e 100644
--- a/src/main/java/org/apache/commons/math4/distribution/PascalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/PascalDistribution.java
@@ -19,8 +19,6 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
@@ -77,13 +75,6 @@ public class PascalDistribution extends AbstractIntegerDistribution {
     /**
      * Create a Pascal distribution with the given number of successes and
      * probability of success.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
      * @param r Number of successes.
      * @param p Probability of success.
@@ -91,29 +82,10 @@ public class PascalDistribution extends AbstractIntegerDistribution {
      * @throws OutOfRangeException if the probability of success is not in the
      * range {@code [0, 1]}.
      */
-    public PascalDistribution(int r, double p)
-        throws NotStrictlyPositiveException, OutOfRangeException {
-        this(new Well19937c(), r, p);
-    }
-
-    /**
-     * Create a Pascal distribution with the given number of successes and
-     * probability of success.
-     *
-     * @param rng Random number generator.
-     * @param r Number of successes.
-     * @param p Probability of success.
-     * @throws NotStrictlyPositiveException if the number of successes is not positive
-     * @throws OutOfRangeException if the probability of success is not in the
-     * range {@code [0, 1]}.
-     * @since 3.1
-     */
-    public PascalDistribution(RandomGenerator rng,
-                              int r,
+    public PascalDistribution(int r,
                               double p)
-        throws NotStrictlyPositiveException, OutOfRangeException {
-        super(rng);
-
+        throws NotStrictlyPositiveException,
+               OutOfRangeException {
         if (r <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,
                                                    r);
diff --git a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
index 6cb0129c04..49a08dae3a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
@@ -18,13 +18,11 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Implementation of the Poisson distribution.
@@ -47,8 +45,6 @@ public class PoissonDistribution extends AbstractIntegerDistribution {
     private static final long serialVersionUID = -3349935121172596109L;
     /** Distribution used to compute normal approximation. */
     private final NormalDistribution normal;
-    /** Distribution needed for the {@link #sample()} method. */
-    private final RealDistribution.Sampler exponentialSampler;
     /** Mean of the distribution. */
     private final double mean;
 
@@ -66,31 +62,18 @@ public class PoissonDistribution extends AbstractIntegerDistribution {
 
     /**
      * Creates a new Poisson distribution with specified mean.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
      * @param p the Poisson mean
      * @throws NotStrictlyPositiveException if {@code p <= 0}.
      */
-    public PoissonDistribution(double p) throws NotStrictlyPositiveException {
+    public PoissonDistribution(double p)
+        throws NotStrictlyPositiveException {
         this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);
     }
 
     /**
      * Creates a new Poisson distribution with specified mean, convergence
      * criterion and maximum number of iterations.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
      * @param p Poisson mean.
      * @param epsilon Convergence criterion for cumulative probabilities.
@@ -99,30 +82,10 @@ public PoissonDistribution(double p) throws NotStrictlyPositiveException {
      * @throws NotStrictlyPositiveException if {@code p <= 0}.
      * @since 2.1
      */
-    public PoissonDistribution(double p, double epsilon, int maxIterations)
-    throws NotStrictlyPositiveException {
-        this(new Well19937c(), p, epsilon, maxIterations);
-    }
-
-    /**
-     * Creates a new Poisson distribution with specified mean, convergence
-     * criterion and maximum number of iterations.
-     *
-     * @param rng Random number generator.
-     * @param p Poisson mean.
-     * @param epsilon Convergence criterion for cumulative probabilities.
-     * @param maxIterations the maximum number of iterations for cumulative
-     * probabilities.
-     * @throws NotStrictlyPositiveException if {@code p <= 0}.
-     * @since 3.1
-     */
-    public PoissonDistribution(RandomGenerator rng,
-                               double p,
+    public PoissonDistribution(double p,
                                double epsilon,
                                int maxIterations)
-    throws NotStrictlyPositiveException {
-        super(rng);
-
+        throws NotStrictlyPositiveException {
         if (p <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
         }
@@ -130,12 +93,8 @@ public PoissonDistribution(RandomGenerator rng,
         this.epsilon = epsilon;
         this.maxIterations = maxIterations;
 
-        // Use the same RNG instance as the parent class.
         normal = new NormalDistribution(p, FastMath.sqrt(p),
                                         NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
-
-        // XXX TODO: RNG source should not be hard-coded.
-        exponentialSampler = new ExponentialDistribution(1).createSampler(RandomSource.create(RandomSource.WELL_19937_C));
     }
 
     /**
@@ -148,7 +107,7 @@ public PoissonDistribution(RandomGenerator rng,
      * @since 2.1
      */
     public PoissonDistribution(double p, double epsilon)
-    throws NotStrictlyPositiveException {
+        throws NotStrictlyPositiveException {
         this(p, epsilon, DEFAULT_MAX_ITERATIONS);
     }
 
@@ -285,120 +244,113 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /**
-     * {@inheritDoc}
-     * <p>
-     * <strong>Algorithm Description</strong>:
-     * <ul>
-     *  <li>For small means, uses simulation of a Poisson process
-     *   using Uniform deviates, as described
-     *   <a href="http://mathaa.epfl.ch/cours/PMMI2001/interactive/rng7.htm"> here</a>.
-     *   The Poisson process (and hence value returned) is bounded by 1000 * mean.
-     *  </li>
-     *  <li>For large means, uses the rejection algorithm described in
-     *   <blockquote>
-     *    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i><br>
-     *    <strong>Computing</strong> vol. 26 pp. 197-207.<br>
-     *   </blockquote>
-     *  </li>
-     * </ul>
-     * </p>
-     *
-     * @return a random value.
-     * @since 2.2
-     */
+    /**{@inheritDoc} */
     @Override
-    public int sample() {
-        return (int) FastMath.min(nextPoisson(mean), Integer.MAX_VALUE);
-    }
-
-    /**
-     * @param meanPoisson Mean of the Poisson distribution.
-     * @return the next sample.
-     */
-    private long nextPoisson(double meanPoisson) {
-        final double pivot = 40.0d;
-        if (meanPoisson < pivot) {
-            double p = FastMath.exp(-meanPoisson);
-            long n = 0;
-            double r = 1.0d;
-            double rnd = 1.0d;
+    public IntegerDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new IntegerDistribution.Sampler() {
+            /** Exponential distribution. */
+            private final RealDistribution.Sampler exponentialSampler
+                = new ExponentialDistribution(1).createSampler(rng);
+            /** Gaussian distribution. */
+            private final RealDistribution.Sampler gaussianSampler
+                = new NormalDistribution().createSampler(rng);
 
-            while (n < 1000 * meanPoisson) {
-                rnd = random.nextDouble();
-                r *= rnd;
-                if (r >= p) {
-                    n++;
-                } else {
-                    return n;
-                }
+            /** {@inheritDoc} */
+            @Override
+            public int sample() {
+                return (int) FastMath.min(nextPoisson(mean),
+                                          Integer.MAX_VALUE);
             }
-            return n;
-        } else {
-            final double lambda = FastMath.floor(meanPoisson);
-            final double lambdaFractional = meanPoisson - lambda;
-            final double logLambda = FastMath.log(lambda);
-            final double logLambdaFactorial = CombinatoricsUtils.factorialLog((int) lambda);
-            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);
-            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
-            final double halfDelta = delta / 2;
-            final double twolpd = 2 * lambda + delta;
-            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / (8 * lambda));
-            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
-            final double aSum = a1 + a2 + 1;
-            final double p1 = a1 / aSum;
-            final double p2 = a2 / aSum;
-            final double c1 = 1 / (8 * lambda);
 
-            double x = 0;
-            double y = 0;
-            double v = 0;
-            int a = 0;
-            double t = 0;
-            double qr = 0;
-            double qa = 0;
-            for (;;) {
-                final double u = random.nextDouble();
-                if (u <= p1) {
-                    final double n = random.nextGaussian();
-                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
-                    if (x > delta || x < -lambda) {
-                        continue;
+            /**
+             * @param meanPoisson Mean of the Poisson distribution.
+             * @return the next sample.
+             */
+            private long nextPoisson(double meanPoisson) {
+                final double pivot = 40.0d;
+                if (meanPoisson < pivot) {
+                    double p = FastMath.exp(-meanPoisson);
+                    long n = 0;
+                    double r = 1.0d;
+                    double rnd = 1.0d;
+
+                    while (n < 1000 * meanPoisson) {
+                        rnd = rng.nextDouble();
+                        r *= rnd;
+                        if (r >= p) {
+                            n++;
+                        } else {
+                            return n;
+                        }
                     }
-                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
-                    final double e = exponentialSampler.sample();
-                    v = -e - (n * n / 2) + c1;
+                    return n;
                 } else {
-                    if (u > p1 + p2) {
-                        y = lambda;
-                        break;
-                    } else {
-                        x = delta + (twolpd / delta) * exponentialSampler.sample();
-                        y = FastMath.ceil(x);
-                        v = -exponentialSampler.sample() - delta * (x + 1) / twolpd;
+                    final double lambda = FastMath.floor(meanPoisson);
+                    final double lambdaFractional = meanPoisson - lambda;
+                    final double logLambda = FastMath.log(lambda);
+                    final double logLambdaFactorial = CombinatoricsUtils.factorialLog((int) lambda);
+                    final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);
+                    final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
+                    final double halfDelta = delta / 2;
+                    final double twolpd = 2 * lambda + delta;
+                    final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / (8 * lambda));
+                    final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
+                    final double aSum = a1 + a2 + 1;
+                    final double p1 = a1 / aSum;
+                    final double p2 = a2 / aSum;
+                    final double c1 = 1 / (8 * lambda);
+
+                    double x = 0;
+                    double y = 0;
+                    double v = 0;
+                    int a = 0;
+                    double t = 0;
+                    double qr = 0;
+                    double qa = 0;
+                    while (true) {
+                        final double u = rng.nextDouble();
+                        if (u <= p1) {
+                            final double n = gaussianSampler.sample();
+                            x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
+                            if (x > delta || x < -lambda) {
+                                continue;
+                            }
+                            y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
+                            final double e = exponentialSampler.sample();
+                            v = -e - (n * n / 2) + c1;
+                        } else {
+                            if (u > p1 + p2) {
+                                y = lambda;
+                                break;
+                            } else {
+                                x = delta + (twolpd / delta) * exponentialSampler.sample();
+                                y = FastMath.ceil(x);
+                                v = -exponentialSampler.sample() - delta * (x + 1) / twolpd;
+                            }
+                        }
+                        a = x < 0 ? 1 : 0;
+                        t = y * (y + 1) / (2 * lambda);
+                        if (v < -t && a == 0) {
+                            y = lambda + y;
+                            break;
+                        }
+                        qr = t * ((2 * y + 1) / (6 * lambda) - 1);
+                        qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
+                        if (v < qa) {
+                            y = lambda + y;
+                            break;
+                        }
+                        if (v > qr) {
+                            continue;
+                        }
+                        if (v < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
+                            y = lambda + y;
+                            break;
+                        }
                     }
-                }
-                a = x < 0 ? 1 : 0;
-                t = y * (y + 1) / (2 * lambda);
-                if (v < -t && a == 0) {
-                    y = lambda + y;
-                    break;
-                }
-                qr = t * ((2 * y + 1) / (6 * lambda) - 1);
-                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
-                if (v < qa) {
-                    y = lambda + y;
-                    break;
-                }
-                if (v > qr) {
-                    continue;
-                }
-                if (v < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
-                    y = lambda + y;
-                    break;
+                    return y2 + (long) y;
                 }
             }
-            return y2 + (long) y;
-        }
+        };
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
index 6cd21b0faa..d1489d30f3 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
@@ -19,8 +19,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Implementation of the uniform integer distribution.
@@ -32,7 +31,7 @@
  */
 public class UniformIntegerDistribution extends AbstractIntegerDistribution {
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20120109L;
+    private static final long serialVersionUID = 20160308L;
     /** Lower bound (inclusive) of this distribution. */
     private final int lower;
     /** Upper bound (inclusive) of this distribution. */
@@ -41,39 +40,14 @@ public class UniformIntegerDistribution extends AbstractIntegerDistribution {
     /**
      * Creates a new uniform integer distribution using the given lower and
      * upper bounds (both inclusive).
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
      * @param lower Lower bound (inclusive) of this distribution.
      * @param upper Upper bound (inclusive) of this distribution.
-     * @throws NumberIsTooLargeException if {@code lower >= upper}.
-     */
-    public UniformIntegerDistribution(int lower, int upper)
-        throws NumberIsTooLargeException {
-        this(new Well19937c(), lower, upper);
-    }
-
-    /**
-     * Creates a new uniform integer distribution using the given lower and
-     * upper bounds (both inclusive).
-     *
-     * @param rng Random number generator.
-     * @param lower Lower bound (inclusive) of this distribution.
-     * @param upper Upper bound (inclusive) of this distribution.
      * @throws NumberIsTooLargeException if {@code lower > upper}.
-     * @since 3.1
      */
-    public UniformIntegerDistribution(RandomGenerator rng,
-                                      int lower,
+    public UniformIntegerDistribution(int lower,
                                       int upper)
         throws NumberIsTooLargeException {
-        super(rng);
-
         if (lower > upper) {
             throw new NumberIsTooLargeException(
                             LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
@@ -165,24 +139,30 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
+    /**{@inheritDoc} */
     @Override
-    public int sample() {
-        final int max = (upper - lower) + 1;
-        if (max <= 0) {
-            // The range is too wide to fit in a positive int (larger
-            // than 2^31); as it covers more than half the integer range,
-            // we use a simple rejection method.
-            while (true) {
-                final int r = random.nextInt();
-                if (r >= lower &&
-                    r <= upper) {
-                    return r;
+    public IntegerDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new IntegerDistribution.Sampler() {
+            /** {@inheritDoc} */
+            @Override
+            public int sample() {
+                final int max = (upper - lower) + 1;
+                if (max <= 0) {
+                    // The range is too wide to fit in a positive int (larger
+                    // than 2^31); as it covers more than half the integer range,
+                    // we use a simple rejection method.
+                    while (true) {
+                        final int r = rng.nextInt();
+                        if (r >= lower &&
+                            r <= upper) {
+                            return r;
+                        }
+                    }
+                } else {
+                    // We can shift the range and directly generate a positive int.
+                    return lower + rng.nextInt(max);
                 }
             }
-        } else {
-            // We can shift the range and directly generate a positive int.
-            return lower + random.nextInt(max);
-        }
+        };
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
index 80da61d02c..82e9fb3bf6 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
@@ -19,8 +19,7 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
@@ -59,45 +58,18 @@ public class ZipfDistribution extends AbstractIntegerDistribution {
     private double numericalVariance = Double.NaN;
     /** Whether or not the numerical variance has been calculated */
     private boolean numericalVarianceIsCalculated = false;
-    /** The sampler to be used for the sample() method */
-    private transient ZipfRejectionInversionSampler sampler;
 
     /**
-     * Create a new Zipf distribution with the given number of elements and
-     * exponent.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param numberOfElements Number of elements.
-     * @param exponent Exponent.
-     * @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
-     * or {@code exponent <= 0}.
-     */
-    public ZipfDistribution(final int numberOfElements, final double exponent) {
-        this(new Well19937c(), numberOfElements, exponent);
-    }
-
-    /**
-     * Creates a Zipf distribution.
+     * Creates a distribution.
      *
-     * @param rng Random number generator.
      * @param numberOfElements Number of elements.
      * @param exponent Exponent.
      * @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
      * or {@code exponent <= 0}.
-     * @since 3.1
      */
-    public ZipfDistribution(RandomGenerator rng,
-                            int numberOfElements,
+    public ZipfDistribution(int numberOfElements,
                             double exponent)
         throws NotStrictlyPositiveException {
-        super(rng);
-
         if (numberOfElements <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
                                                    numberOfElements);
@@ -285,13 +257,20 @@ public boolean isSupportConnected() {
         return true;
     }
 
-    /** {@inheritDoc} */
+    /**{@inheritDoc} */
     @Override
-    public int sample() {
-        if (sampler == null) {
-            sampler = new ZipfRejectionInversionSampler(numberOfElements, exponent);
-        }
-        return sampler.sample(random);
+    public IntegerDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new IntegerDistribution.Sampler() {
+            /** Helper. */
+            private final ZipfRejectionInversionSampler sampler =
+                new ZipfRejectionInversionSampler(numberOfElements, exponent);
+
+            /** {@inheritDoc} */
+            @Override
+            public int sample() {
+                return sampler.sample(rng);
+            }
+        };
     }
 
     /**
@@ -318,8 +297,7 @@ public int sample() {
      *
      * @since 3.6
      */
-    static final class ZipfRejectionInversionSampler {
-
+    static class ZipfRejectionInversionSampler {
         /** Exponent parameter of the distribution. */
         private final double exponent;
         /** Number of elements. */
@@ -331,7 +309,7 @@ static final class ZipfRejectionInversionSampler {
         /** Constant equal to {@code 2 - hIntegralInverse(hIntegral(2.5) - h(2)}. */
         private final double s;
 
-        /** Simple constructor.
+        /**
          * @param numberOfElements number of elements
          * @param exponent exponent parameter of the distribution
          */
@@ -343,18 +321,18 @@ static final class ZipfRejectionInversionSampler {
             this.s = 2d - hIntegralInverse(hIntegral(2.5) - h(2));
         }
 
-        /** Generate one integral number in the range [1, numberOfElements].
+        /**
+         * Generates one integer in the range [1, numberOfElements].
+         *
          * @param random random generator to use
          * @return generated integral number in the range [1, numberOfElements]
          */
-        int sample(final RandomGenerator random) {
+        int sample(final UniformRandomProvider random) {
             while(true) {
-
                 final double u = hIntegralNumberOfElements + random.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
                 // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]
 
                 double x = hIntegralInverse(u);
-
                 int k = (int)(x + 0.5);
 
                 // Limit k to the range [1, numberOfElements]
diff --git a/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java b/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
index d66808dc89..e19b1368ab 100644
--- a/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/RandomDataGenerator.java
@@ -18,9 +18,6 @@
 package org.apache.commons.math4.random;
 
 import java.io.Serializable;
-import java.io.IOException;
-import java.io.ObjectOutputStream;
-import java.io.ObjectInputStream;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.NoSuchProviderException;
@@ -49,7 +46,6 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 
@@ -120,13 +116,7 @@ public class RandomDataGenerator implements Serializable {
     private static final long serialVersionUID = -626730818244969716L;
 
     /** underlying random number generator */
-    @Deprecated
-    private RandomGenerator rand = null;
-
-    /** Underlying random number generator. */
-    private transient UniformRandomProvider randomProvider = null;
-    /** Underlying source of randomness. */
-    private final RandomSource randomSource;
+    private RandomGenerator rand;
 
     /** underlying secure random number generator */
     private RandomGenerator secRand = null;
@@ -140,7 +130,7 @@ public class RandomDataGenerator implements Serializable {
      * The generator is initialized and seeded on first use.</p>
      */
     public RandomDataGenerator() {
-        randomSource = RandomSource.WELL_19937_C;
+        rand = new Well19937c();
     }
 
     /**
@@ -150,20 +140,8 @@ public RandomDataGenerator() {
      * @param rand the source of (non-secure) random data
      * (may be null, resulting in the default generator)
      */
-    @Deprecated
     public RandomDataGenerator(RandomGenerator rand) {
         this.rand = rand;
-        randomSource = RandomSource.WELL_19937_C;
-    }
-
-    /**
-     * Creates a new instance.
-     *
-     * @param source Source of (non-secure) random data.
-     * If {@code null}, {@link RandomSource#WELL_19937_C} will be used.
-     */
-    public RandomDataGenerator(RandomSource source) {
-        randomSource = source == null ? RandomSource.WELL_19937_C : source;
     }
 
     /**
@@ -235,7 +213,7 @@ public String nextHexString(int len) throws NotStrictlyPositiveException {
      * @throws NumberIsTooLargeException if {@code lower >= upper}
      */
     public int nextInt(final int lower, final int upper) throws NumberIsTooLargeException {
-        return new UniformIntegerDistribution(getRandomGenerator(), lower, upper).sample();
+        return new UniformIntegerDistribution(lower, upper).createSampler(getRandomProvider()).sample();
     }
 
     /** Generates a uniformly distributed random long integer between {@code lower}
@@ -400,7 +378,7 @@ public String nextSecureHexString(int len) throws NotStrictlyPositiveException {
      * @throws NumberIsTooLargeException if {@code lower >= upper}.
      */
     public int nextSecureInt(final int lower, final int upper) throws NumberIsTooLargeException {
-        return new UniformIntegerDistribution(getSecRan(), lower, upper).sample();
+        return new UniformIntegerDistribution(lower, upper).createSampler(getSecureRandomProvider()).sample();
     }
 
     /**
@@ -470,9 +448,9 @@ public long nextSecureLong(final long lower, final long upper) throws NumberIsTo
      * @throws NotStrictlyPositiveException if {@code mean <= 0}.
      */
     public long nextPoisson(double mean) throws NotStrictlyPositiveException {
-        return new PoissonDistribution(getRandomGenerator(), mean,
+        return new PoissonDistribution(mean,
                 PoissonDistribution.DEFAULT_EPSILON,
-                PoissonDistribution.DEFAULT_MAX_ITERATIONS).sample();
+                PoissonDistribution.DEFAULT_MAX_ITERATIONS).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -557,7 +535,7 @@ public double nextGamma(double shape, double scale) throws NotStrictlyPositiveEx
      * @throws NotPositiveException  if {@code numberOfSuccesses < 0}.
      */
     public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
-        return new HypergeometricDistribution(getRandomGenerator(), populationSize, numberOfSuccesses, sampleSize).sample();
+        return new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -571,7 +549,7 @@ public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sam
      * range {@code [0, 1]}.
      */
     public int nextPascal(int r, double p) throws NotStrictlyPositiveException, OutOfRangeException {
-        return new PascalDistribution(getRandomGenerator(), r, p).sample();
+        return new PascalDistribution(r, p).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -608,7 +586,7 @@ public double nextWeibull(double shape, double scale) throws NotStrictlyPositive
      * or {@code exponent <= 0}.
      */
     public int nextZipf(int numberOfElements, double exponent) throws NotStrictlyPositiveException {
-        return new ZipfDistribution(getRandomGenerator(), numberOfElements, exponent).sample();
+        return new ZipfDistribution(numberOfElements, exponent).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -630,7 +608,7 @@ public double nextBeta(double alpha, double beta) {
      * @return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution
      */
     public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) {
-        return new BinomialDistribution(getRandomGenerator(), numberOfTrials, probabilityOfSuccess).sample();
+        return new BinomialDistribution(numberOfTrials, probabilityOfSuccess).createSampler(getRandomProvider()).sample();
     }
 
     /**
@@ -764,7 +742,7 @@ public double nextUniform(double lower, double upper, boolean lowerInclusive)
      * <p>
      * Generated arrays represent permutations of {@code n} taken {@code k} at a
      * time.</p>
-     * This method calls {@link MathArrays#shuffle(int[],RandomGenerator)
+     * This method calls {@link MathArrays#shuffle(int[],UniformRandomProvider)
      * MathArrays.shuffle} in order to create a random shuffle of the set
      * of natural numbers {@code { 0, 1, ..., n - 1 }}.
      *
@@ -788,7 +766,7 @@ public int[] nextPermutation(int n, int k)
         }
 
         int[] index = MathArrays.natural(n);
-        MathArrays.shuffle(index, getRandomGenerator());
+        MathArrays.shuffle(index, getRandomProvider());
 
         // Return a new array containing the first "k" entries of "index".
         return MathArrays.copyOf(index, k);
@@ -845,7 +823,6 @@ public Object[] nextSample(Collection<?> c, int k) throws NumberIsTooLargeExcept
      * @param seed the seed value to use
      */
     public void reSeed(long seed) {
-        randomProvider = RandomSource.create(randomSource, seed);
         getRandomGenerator().setSeed(seed);
     }
 
@@ -912,7 +889,6 @@ public void setSecureAlgorithm(String algorithm, String provider)
      * @return the Random used to generate random data
      * @since 3.2
      */
-    @Deprecated
     public RandomGenerator getRandomGenerator() {
         if (rand == null) {
             initRan();
@@ -920,6 +896,77 @@ public RandomGenerator getRandomGenerator() {
         return rand;
     }
 
+    /**
+     * @param rng {@link RandomGenerator} instance.
+     * @return a {@link UniformRandomProvider} instance.
+     */
+    private UniformRandomProvider wrapRandomGenerator(final RandomGenerator rng) {
+        return new UniformRandomProvider() {
+            /** {@inheritDoc} */
+            @Override
+            public void nextBytes(byte[] bytes) {
+                rng.nextBytes(bytes);
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public void nextBytes(byte[] bytes,
+                                  int start,
+                                  int len) {
+                throw new MathInternalError();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public int nextInt() {
+                return rng.nextInt();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public int nextInt(int n) {
+                return rng.nextInt(n);
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public long nextLong() {
+                return rng.nextLong();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public long nextLong(long n) {
+                throw new MathInternalError();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public boolean nextBoolean() {
+                return rng.nextBoolean();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public float nextFloat() {
+                return rng.nextFloat();
+            }
+
+            /** {@inheritDoc} */
+            @Override
+            public double nextDouble() {
+                return rng.nextDouble();
+            }
+        };
+    }
+
+    /**
+     * @return the generator used to generate secure random data.
+     */
+    private UniformRandomProvider getSecureRandomProvider() {
+        return wrapRandomGenerator(getSecRan());
+    }
+
     /**
      * @return the generator used to generate non-secure random data.
      *
@@ -927,17 +974,13 @@ public RandomGenerator getRandomGenerator() {
      * "ValueServer" should be fixed to not use the internals of another class!
      */
     UniformRandomProvider getRandomProvider() {
-        if (randomProvider == null) {
-            randomProvider = RandomSource.create(randomSource);
-        }
-        return randomProvider;
+        return wrapRandomGenerator(getRandomGenerator());
     }
 
     /**
      * Sets the default generator to a {@link Well19937c} generator seeded with
      * {@code System.currentTimeMillis() + System.identityHashCode(this))}.
      */
-    @Deprecated
     private void initRan() {
         rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
     }
@@ -959,42 +1002,4 @@ private RandomGenerator getSecRan() {
         }
         return secRand;
     }
-
-    /**
-     * @param out Output stream.
-     * @throws IOException if an error occurs.
-     */
-    private void writeObject(ObjectOutputStream out)
-        throws IOException {
-        // Write non-transient fields.
-        out.defaultWriteObject();
-
-        if (randomProvider != null) {
-            // Save state of "randomProvider".
-            out.writeObject(RandomSource.saveState(randomProvider));
-        } else {
-            out.writeObject(null);
-        }
-   }
-
-    /**
-     * @param in Input stream.
-     * @throws IOException if an error occurs.
-     * @throws ClassNotFoundException if an error occurs.
-     */
-    private void readObject(ObjectInputStream in)
-        throws IOException,
-               ClassNotFoundException {
-        // Read non-transient fields.
-        in.defaultReadObject();
-
-        // Read "randomProvider" state (can be null).
-        final Object state = in.readObject();
-        if (state != null) {
-            // Recreate "randomProvider" from serialized info.
-            randomProvider = RandomSource.create(randomSource);
-            // And restore its state.
-            RandomSource.restoreState(randomProvider, (RandomSource.State) state);
-        }
-    }
 }
diff --git a/src/main/java/org/apache/commons/math4/stat/inference/BinomialTest.java b/src/main/java/org/apache/commons/math4/stat/inference/BinomialTest.java
index 7b6ca26eb4..d5003117cf 100644
--- a/src/main/java/org/apache/commons/math4/stat/inference/BinomialTest.java
+++ b/src/main/java/org/apache/commons/math4/stat/inference/BinomialTest.java
@@ -119,8 +119,7 @@ public double binomialTest(int numberOfTrials, int numberOfSuccesses, double pro
             throw new NullArgumentException();
         }
 
-        // pass a null rng to avoid unneeded overhead as we will not sample from this distribution
-        final BinomialDistribution distribution = new BinomialDistribution(null, numberOfTrials, probability);
+        final BinomialDistribution distribution = new BinomialDistribution(numberOfTrials, probability);
         switch (alternativeHypothesis) {
         case GREATER_THAN:
             return 1 - distribution.cumulativeProbability(numberOfSuccesses - 1);
diff --git a/src/main/java/org/apache/commons/math4/util/MathArrays.java b/src/main/java/org/apache/commons/math4/util/MathArrays.java
index c50f44c25c..bc629a0ebf 100644
--- a/src/main/java/org/apache/commons/math4/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math4/util/MathArrays.java
@@ -40,8 +40,8 @@
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Arrays utilities.
@@ -1578,7 +1578,7 @@ public enum Position {
      * The {@code start} and {@code pos} parameters select which portion
      * of the array is randomized and which is left untouched.
      *
-     * @see #shuffle(int[],int,Position,RandomGenerator)
+     * @see #shuffle(int[],int,Position,UniformRandomProvider)
      *
      * @param list Array whose entries will be shuffled (in-place).
      * @param start Index at which shuffling begins.
@@ -1589,7 +1589,7 @@ public enum Position {
     public static void shuffle(int[] list,
                                int start,
                                Position pos) {
-        shuffle(list, start, pos, new Well19937c());
+        shuffle(list, start, pos, RandomSource.create(RandomSource.WELL_19937_C));
     }
 
     /**
@@ -1609,7 +1609,7 @@ public static void shuffle(int[] list,
     public static void shuffle(int[] list,
                                int start,
                                Position pos,
-                               RandomGenerator rng) {
+                               UniformRandomProvider rng) {
         switch (pos) {
         case TAIL: {
             for (int i = list.length - 1; i >= start; i--) {
@@ -1618,7 +1618,7 @@ public static void shuffle(int[] list,
                     target = start;
                 } else {
                     // NumberIsTooLargeException cannot occur.
-                    target = new UniformIntegerDistribution(rng, start, i).sample();
+                    target = new UniformIntegerDistribution(start, i).createSampler(rng).sample();
                 }
                 final int temp = list[target];
                 list[target] = list[i];
@@ -1633,7 +1633,7 @@ public static void shuffle(int[] list,
                     target = start;
                 } else {
                     // NumberIsTooLargeException cannot occur.
-                    target = new UniformIntegerDistribution(rng, i, start).sample();
+                    target = new UniformIntegerDistribution(i, start).createSampler(rng).sample();
                 }
                 final int temp = list[target];
                 list[target] = list[i];
@@ -1649,25 +1649,25 @@ public static void shuffle(int[] list,
     /**
      * Shuffle the entries of the given array.
      *
-     * @see #shuffle(int[],int,Position,RandomGenerator)
+     * @see #shuffle(int[],int,Position,UniformRandomProvider)
      *
      * @param list Array whose entries will be shuffled (in-place).
      * @param rng Random number generator.
      */
     public static void shuffle(int[] list,
-                               RandomGenerator rng) {
+                               UniformRandomProvider rng) {
         shuffle(list, 0, Position.TAIL, rng);
     }
 
     /**
      * Shuffle the entries of the given array.
      *
-     * @see #shuffle(int[],int,Position,RandomGenerator)
+     * @see #shuffle(int[],int,Position,UniformRandomProvider)
      *
      * @param list Array whose entries will be shuffled (in-place).
      */
     public static void shuffle(int[] list) {
-        shuffle(list, new Well19937c());
+        shuffle(list, RandomSource.create(RandomSource.WELL_19937_C));
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/math4/PerfTestUtils.java b/src/test/java/org/apache/commons/math4/PerfTestUtils.java
index 2064f534a0..622502ecb1 100644
--- a/src/test/java/org/apache/commons/math4/PerfTestUtils.java
+++ b/src/test/java/org/apache/commons/math4/PerfTestUtils.java
@@ -22,8 +22,8 @@
 import java.util.concurrent.Callable;
 
 import org.apache.commons.math4.util.MathArrays;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
@@ -53,7 +53,7 @@ public class PerfTestUtils {
     /** Default number of code repeats for computing the average run time. */
     private static final int DEFAULT_REPEAT_STAT = 10000;
     /** RNG. */
-    private static RandomGenerator rng = new Well19937c();
+    private static UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C);
 
     /**
      * Timing.
diff --git a/src/test/java/org/apache/commons/math4/distribution/AbstractIntegerDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/AbstractIntegerDistributionTest.java
index e83403f4a7..32e597648e 100644
--- a/src/test/java/org/apache/commons/math4/distribution/AbstractIntegerDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/AbstractIntegerDistributionTest.java
@@ -83,10 +83,6 @@ class DiceDistribution extends AbstractIntegerDistribution {
 
         private final double p = 1d/6d;
 
-        public DiceDistribution() {
-            super(null);
-        }
-
         public double probability(int x) {
             if (x < 1 || x > 6) {
                 return 0;
diff --git a/src/test/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistributionTest.java
index 2a66f95546..d1f3afca7c 100644
--- a/src/test/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistributionTest.java
@@ -25,6 +25,7 @@
 import org.apache.commons.math4.exception.NotFiniteNumberException;
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.util.FastMath;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -157,8 +158,10 @@ public void testIsSupportConnected() {
     @Test
     public void testSample() {
         final int n = 1000000;
-        testDistribution.reseedRandomGenerator(-334759360); // fixed seed
-        final int[] samples = testDistribution.sample(n);
+        final IntegerDistribution.Sampler sampler
+            = testDistribution.createSampler(RandomSource.create(RandomSource.WELL_19937_C,
+                                                                 -334759360)); // fixed seed
+        final int[] samples = AbstractIntegerDistribution.sample(n, sampler);
         Assert.assertEquals(n, samples.length);
         double sum = 0;
         double sumOfSquares = 0;
diff --git a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
index b2d11f439d..e12c5b42cf 100644
--- a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
@@ -24,6 +24,7 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.util.Precision;
+import org.apache.commons.math4.rng.RandomSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -315,7 +316,8 @@ public void testMath1021() {
         final int N = 43130568;
         final int m = 42976365;
         final int n = 50;
-        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);
+        final IntegerDistribution.Sampler dist =
+            new HypergeometricDistribution(N, m, n).createSampler(RandomSource.create(RandomSource.WELL_512_A));
 
         for (int i = 0; i < 100; i++) {
             final int sample = dist.sample();
diff --git a/src/test/java/org/apache/commons/math4/distribution/IntegerDistributionAbstractTest.java b/src/test/java/org/apache/commons/math4/distribution/IntegerDistributionAbstractTest.java
index 8f09b13bcf..dbf8062e39 100644
--- a/src/test/java/org/apache/commons/math4/distribution/IntegerDistributionAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/IntegerDistributionAbstractTest.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.distribution.AbstractIntegerDistribution;
 import org.apache.commons.math4.distribution.IntegerDistribution;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.junit.After;
 import org.junit.Assert;
@@ -296,8 +297,11 @@ public void testSampling() {
         for (int i = 0; i < length; i++) {
             expectedCounts[i] = sampleSize * densityValues[i];
         }
-        distribution.reseedRandomGenerator(1000); // Use fixed seed
-        int[] sample = distribution.sample(sampleSize);
+        // Use fixed seed.
+        final IntegerDistribution.Sampler sampler =
+            distribution.createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                           1000));
+        int[] sample = AbstractIntegerDistribution.sample(sampleSize, sampler);
         for (int i = 0; i < sampleSize; i++) {
           for (int j = 0; j < length; j++) {
               if (sample[i] == densityPoints[j]) {
diff --git a/src/test/java/org/apache/commons/math4/distribution/ZipfDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/ZipfDistributionTest.java
index eeae81ff60..de23a26854 100644
--- a/src/test/java/org/apache/commons/math4/distribution/ZipfDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/ZipfDistributionTest.java
@@ -20,9 +20,7 @@
 import org.apache.commons.math4.TestUtils;
 import org.apache.commons.math4.distribution.ZipfDistribution.ZipfRejectionInversionSampler;
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
-import org.apache.commons.math4.random.AbstractRandomGenerator;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well1024a;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.junit.Assert;
 import org.junit.Ignore;
@@ -150,15 +148,18 @@ public void testSamplingExtended() {
                     weightSum += weights[i-1];
                 }
 
-                ZipfDistribution distribution = new ZipfDistribution(numPoints, exponent);
-                distribution.reseedRandomGenerator(6); // use fixed seed, the test is expected to fail for more than 50% of all seeds because each test case can fail with probability 0.001, the chance that all test cases do not fail is 0.999^(32*22) = 0.49442874426
+                // Use fixed seed, the test is expected to fail for more than 50% of all
+                // seeds because each test case can fail with probability 0.001, the chance
+                // that all test cases do not fail is 0.999^(32*22) = 0.49442874426
+                IntegerDistribution.Sampler distribution =
+                    new ZipfDistribution(numPoints, exponent).createSampler(RandomSource.create(RandomSource.WELL_19937_C, 6));
 
                 double[] expectedCounts = new double[numPoints];
                 long[] observedCounts = new long[numPoints];
                 for (int i = 0; i < numPoints; i++) {
                     expectedCounts[i] = sampleSize * (weights[i]/weightSum);
                 }
-                int[] sample = distribution.sample(sampleSize);
+                int[] sample = AbstractIntegerDistribution.sample(sampleSize, distribution);
                 for (int s : sample) {
                     observedCounts[s-1]++;
                 }
@@ -177,11 +178,11 @@ public void testSamplerHelper1() {
         };
         for (final double testValue : testValues) {
             final double expected = FastMath.log1p(testValue);
-            TestUtils.assertRelativelyEquals(expected, ZipfRejectionInversionSampler.helper1(testValue)*testValue, tol);
+            final double actual = ZipfRejectionInversionSampler.helper1(testValue) * testValue;
+            TestUtils.assertRelativelyEquals(expected, actual, tol);
         }
     }
 
-
     @Test
     public void testSamplerHelper1Minus1() {
         Assert.assertEquals(Double.POSITIVE_INFINITY, ZipfRejectionInversionSampler.helper1(-1d), 0d);
@@ -197,7 +198,8 @@ public void testSamplerHelper2() {
         };
         for (double testValue : testValues) {
             final double expected = FastMath.expm1(testValue);
-            TestUtils.assertRelativelyEquals(expected, ZipfRejectionInversionSampler.helper2(testValue)*testValue, tol);
+            final double actual = ZipfRejectionInversionSampler.helper2(testValue) * testValue;
+            TestUtils.assertRelativelyEquals(expected, actual, tol);
         }
     }
 
@@ -215,22 +217,8 @@ public void testSamplerPerformance() {
                 long start = System.currentTimeMillis();
                 final int[] randomNumberCounter = new int[1];
 
-                RandomGenerator randomGenerator  = new AbstractRandomGenerator() {
-
-                    private final RandomGenerator r = new Well1024a(0L);
-
-                    @Override
-                    public void setSeed(long seed) {
-                    }
-
-                    @Override
-                    public double nextDouble() {
-                        randomNumberCounter[0]+=1;
-                        return r.nextDouble();
-                    }
-                };
-
-                final ZipfDistribution distribution = new ZipfDistribution(randomGenerator, numPoints, exponent);
+                final IntegerDistribution.Sampler distribution =
+                    new ZipfDistribution(numPoints, exponent).createSampler(RandomSource.create(RandomSource.WELL_1024_A));
                 for (int i = 0; i < numGeneratedSamples; ++i) {
                     sum += distribution.sample();
                 }
diff --git a/src/test/java/org/apache/commons/math4/random/RandomDataGeneratorTest.java b/src/test/java/org/apache/commons/math4/random/RandomDataGeneratorTest.java
index 2982efb35e..d7c490666b 100644
--- a/src/test/java/org/apache/commons/math4/random/RandomDataGeneratorTest.java
+++ b/src/test/java/org/apache/commons/math4/random/RandomDataGeneratorTest.java
@@ -1209,18 +1209,4 @@ public void testNextZipf() {
         }
         TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);
     }
-
-    @Test
-    /**
-     * MATH-720
-     */
-    public void testReseed() {
-        PoissonDistribution x = new PoissonDistribution(3.0);
-        x.reseedRandomGenerator(0);
-        final double u = x.sample();
-        PoissonDistribution y = new PoissonDistribution(3.0);
-        y.reseedRandomGenerator(0);
-        Assert.assertEquals(u, y.sample(), 0);
-    }
-
 }
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
index 139a06023d..43ca593a21 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/AggregateSummaryStatisticsTest.java
@@ -282,7 +282,9 @@ protected static void assertEquals(StatisticalSummary expected, StatisticalSumma
      * @return array of random double values
      */
     private double[] generateSample() {
-        final IntegerDistribution size = new UniformIntegerDistribution(10, 100);
+        final IntegerDistribution.Sampler size =
+            new UniformIntegerDistribution(10, 100).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                      327652));
         final RealDistribution.Sampler randomData
             = new UniformRealDistribution(-100, 100).createSampler(RandomSource.create(RandomSource.WELL_512_A,
                                                                                        64925784252L));;
@@ -312,7 +314,9 @@ private double[][] generatePartition(double[] sample) {
             if (i == 4 || cur == length - 1) {
                 next = length - 1;
             } else {
-                next = (new UniformIntegerDistribution(cur, length - 1)).sample();
+                final IntegerDistribution.Sampler sampler =
+                    new UniformIntegerDistribution(cur, length - 1).createSampler(RandomSource.create(RandomSource.WELL_512_A));
+                next = sampler.sample();
             }
             final int subLength = next - cur + 1;
             out[i] = new double[subLength];
diff --git a/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java b/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
index cd5be562fa..38e844dd55 100644
--- a/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
+++ b/src/test/java/org/apache/commons/math4/stat/descriptive/UnivariateStatisticAbstractTest.java
@@ -179,7 +179,9 @@ public void testWeightedConsistency() {
 
         // Fill weights array with random int values between 1 and 5
         int[] intWeights = new int[len];
-        final IntegerDistribution weightDist = new UniformIntegerDistribution(1, 5);
+        final IntegerDistribution.Sampler weightDist =
+            new UniformIntegerDistribution(1, 5).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                   234878544L));
         for (int i = 0; i < len; i++) {
             intWeights[i] = weightDist.sample();
             weights[i] = intWeights[i];
@@ -188,9 +190,9 @@ public void testWeightedConsistency() {
         // Fill values array with random data from N(mu, sigma)
         // and fill valuesList with values from values array with
         // values[i] repeated weights[i] times, each i
-        final RealDistribution.Sampler valueDist
-            = new NormalDistribution(mu, sigma).createSampler(RandomSource.create(RandomSource.WELL_512_A,
-                                                                                  64925784252L));
+        final RealDistribution.Sampler valueDist =
+            new NormalDistribution(mu, sigma).createSampler(RandomSource.create(RandomSource.WELL_512_A,
+                                                                                64925784252L));
         List<Double> valuesList = new ArrayList<Double>();
         for (int i = 0; i < len; i++) {
             double value = valueDist.sample();
diff --git a/src/test/java/org/apache/commons/math4/util/MathArraysTest.java b/src/test/java/org/apache/commons/math4/util/MathArraysTest.java
index a6cc7649e4..e4862fa5e4 100644
--- a/src/test/java/org/apache/commons/math4/util/MathArraysTest.java
+++ b/src/test/java/org/apache/commons/math4/util/MathArraysTest.java
@@ -25,6 +25,7 @@
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NullArgumentException;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.random.Well1024a;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
@@ -1111,7 +1112,8 @@ public void testShuffleTail() {
         final int[] orig = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
         final int[] list = orig.clone();
         final int start = 4;
-        MathArrays.shuffle(list, start, MathArrays.Position.TAIL, new Well1024a(7654321L));
+        MathArrays.shuffle(list, start, MathArrays.Position.TAIL,
+                           RandomSource.create(RandomSource.WELL_19937_C, 7654321L));
 
         // Ensure that all entries below index "start" did not move.
         for (int i = 0; i < start; i++) {
@@ -1134,7 +1136,8 @@ public void testShuffleHead() {
         final int[] orig = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
         final int[] list = orig.clone();
         final int start = 4;
-        MathArrays.shuffle(list, start, MathArrays.Position.HEAD, new Well1024a(1234567L));
+        MathArrays.shuffle(list, start, MathArrays.Position.HEAD,
+                           RandomSource.create(RandomSource.WELL_19937_C, 1234567L));
 
         // Ensure that all entries above index "start" did not move.
         for (int i = start + 1; i < orig.length; i++) {
diff --git a/src/test/java/org/apache/commons/math4/util/ResizableDoubleArrayTest.java b/src/test/java/org/apache/commons/math4/util/ResizableDoubleArrayTest.java
index be897a5a70..bf87c3ba62 100644
--- a/src/test/java/org/apache/commons/math4/util/ResizableDoubleArrayTest.java
+++ b/src/test/java/org/apache/commons/math4/util/ResizableDoubleArrayTest.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.distribution.UniformIntegerDistribution;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.NullArgumentException;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.ResizableDoubleArray.ExpansionMode;
 import org.junit.After;
 import org.junit.Assert;
@@ -321,7 +322,8 @@ public void testWithInitialCapacity() {
         ResizableDoubleArray eDA2 = new ResizableDoubleArray(2);
         Assert.assertEquals("Initial number of elements should be 0", 0, eDA2.getNumElements());
 
-        final IntegerDistribution randomData = new UniformIntegerDistribution(100, 1000);
+        final IntegerDistribution.Sampler randomData =
+            new UniformIntegerDistribution(100, 1000).createSampler(RandomSource.create(RandomSource.WELL_19937_C));
         final int iterations = randomData.sample();
 
         for( int i = 0; i < iterations; i++) {
@@ -342,7 +344,9 @@ public void testWithInitialCapacityAndExpansionFactor() {
         ResizableDoubleArray eDA3 = new ResizableDoubleArray(3, 3.0, 3.5);
         Assert.assertEquals("Initial number of elements should be 0", 0, eDA3.getNumElements() );
 
-        final IntegerDistribution randomData = new UniformIntegerDistribution(100, 3000);
+        final IntegerDistribution.Sampler randomData =
+            new UniformIntegerDistribution(100, 3000).createSampler(RandomSource.create(RandomSource.WELL_19937_C));
+;
         final int iterations = randomData.sample();
 
         for( int i = 0; i < iterations; i++) {

From b577805347d56f1927615fad311868a3537a9cb6 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 26 Mar 2016 02:32:10 +0100
Subject: [PATCH 16/21] MATH-1343

Unnecessary recomputation.
---
 .../math4/distribution/BetaDistribution.java     | 16 +++-------------
 1 file changed, 3 insertions(+), 13 deletions(-)

diff --git a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
index 987e8ebb3b..abccb93048 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
@@ -42,10 +42,8 @@ public class BetaDistribution extends AbstractRealDistribution {
     private final double alpha;
     /** Second shape parameter. */
     private final double beta;
-    /** Normalizing factor used in density computations.
-     * updated whenever alpha or beta are changed.
-     */
-    private double z;
+    /** Normalizing factor used in density computations.*/
+    private final double z;
     /** Inverse cumulative probability accuracy. */
     private final double solverAbsoluteAccuracy;
 
@@ -75,7 +73,7 @@ public BetaDistribution(double alpha,
                             double inverseCumAccuracy) {
         this.alpha = alpha;
         this.beta = beta;
-        z = Double.NaN;
+        z = Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta);
         solverAbsoluteAccuracy = inverseCumAccuracy;
     }
 
@@ -97,13 +95,6 @@ public double getBeta() {
         return beta;
     }
 
-    /** Recompute the normalization factor. */
-    private void recomputeZ() {
-        if (Double.isNaN(z)) {
-            z = Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta);
-        }
-    }
-
     /** {@inheritDoc} */
     @Override
     public double density(double x) {
@@ -114,7 +105,6 @@ public double density(double x) {
     /** {@inheritDoc} **/
     @Override
     public double logDensity(double x) {
-        recomputeZ();
         if (x < 0 || x > 1) {
             return Double.NEGATIVE_INFINITY;
         } else if (x == 0) {

From e366894658914c0f2fb41cac003392b0dfa6e4b7 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Sat, 26 Mar 2016 13:00:08 +0100
Subject: [PATCH 17/21] MATH-1158

Adapt "examples" code to the new sampler API.
---
 .../userguide/ClusterAlgorithmComparison.java | 76 ++++++++++++-------
 .../userguide/RealDistributionComparison.java | 13 ++--
 .../math4/userguide/sofm/ChineseRings.java    | 20 +++--
 3 files changed, 66 insertions(+), 43 deletions(-)

diff --git a/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java b/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
index b85b2efefd..b33c3cf156 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
@@ -34,6 +34,8 @@
 import javax.swing.JComponent;
 import javax.swing.JLabel;
 
+import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.geometry.euclidean.twod.Vector2D;
 import org.apache.commons.math4.ml.clustering.CentroidCluster;
@@ -45,9 +47,9 @@
 import org.apache.commons.math4.ml.clustering.FuzzyKMeansClusterer;
 import org.apache.commons.math4.ml.clustering.KMeansPlusPlusClusterer;
 import org.apache.commons.math4.random.RandomAdaptor;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.random.SobolSequenceGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Pair;
 import org.apache.commons.math4.userguide.ExampleUtils.ExampleFrame;
@@ -59,12 +61,16 @@
  */
 public class ClusterAlgorithmComparison {
 
-    public static List<Vector2D> makeCircles(int samples, boolean shuffle, double noise, double factor, final RandomGenerator random) {
+    public static List<Vector2D> makeCircles(int samples,
+                                             boolean shuffle,
+                                             double noise,
+                                             double factor,
+                                             UniformRandomProvider rng) {
         if (factor < 0 || factor > 1) {
             throw new IllegalArgumentException();
         }
         
-        NormalDistribution dist = new NormalDistribution(random, 0.0, noise, 1e-9);
+        RealDistribution.Sampler dist = new NormalDistribution(0.0, noise).createSampler(rng);
 
         List<Vector2D> points = new ArrayList<Vector2D>();
         double range = 2.0 * FastMath.PI;
@@ -78,14 +84,18 @@ public static List<Vector2D> makeCircles(int samples, boolean shuffle, double no
         }
         
         if (shuffle) {
-            Collections.shuffle(points, new RandomAdaptor(random));
+            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
+            Collections.shuffle(points); // XXX temporary workaround
         }
 
         return points;
     }
 
-    public static List<Vector2D> makeMoons(int samples, boolean shuffle, double noise, RandomGenerator random) {
-        NormalDistribution dist = new NormalDistribution(random, 0.0, noise, 1e-9);
+    public static List<Vector2D> makeMoons(int samples,
+                                           boolean shuffle,
+                                           double noise,
+                                           UniformRandomProvider rng) {
+        RealDistribution.Sampler dist = new NormalDistribution(0.0, noise).createSampler(rng);
 
         int nSamplesOut = samples / 2;
         int nSamplesIn = samples - nSamplesOut;
@@ -105,23 +115,26 @@ public static List<Vector2D> makeMoons(int samples, boolean shuffle, double nois
         }
         
         if (shuffle) {
-            Collections.shuffle(points, new RandomAdaptor(random));
+            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
+            Collections.shuffle(points); // XXX temporary workaround
         }
 
         return points;
     }
 
-    public static List<Vector2D> makeBlobs(int samples, int centers, double clusterStd,
-                                           double min, double max, boolean shuffle, RandomGenerator random) {
+    public static List<Vector2D> makeBlobs(int samples,
+                                           int centers,
+                                           double clusterStd,
+                                           double min,
+                                           double max,
+                                           boolean shuffle,
+                                           UniformRandomProvider rng) {
+        RealDistribution.Sampler uniform = new UniformRealDistribution(min, max).createSampler(rng);
+        RealDistribution.Sampler gauss = new NormalDistribution(0.0, clusterStd).createSampler(rng);
 
-        NormalDistribution dist = new NormalDistribution(random, 0.0, clusterStd, 1e-9);
-
-        double range = max - min;
         Vector2D[] centerPoints = new Vector2D[centers];
         for (int i = 0; i < centers; i++) {
-            double x = random.nextDouble() * range + min;
-            double y = random.nextDouble() * range + min;
-            centerPoints[i] = new Vector2D(x, y);
+            centerPoints[i] = new Vector2D(uniform.sample(), uniform.sample());
         }
         
         int[] nSamplesPerCenter = new int[centers];
@@ -135,13 +148,13 @@ public static List<Vector2D> makeBlobs(int samples, int centers, double clusterS
         List<Vector2D> points = new ArrayList<Vector2D>();
         for (int i = 0; i < centers; i++) {
             for (int j = 0; j < nSamplesPerCenter[i]; j++) {
-                Vector2D point = new Vector2D(dist.sample(), dist.sample());
-                points.add(point.add(centerPoints[i]));
+                points.add(centerPoints[i].add(generateNoiseVector(gauss)));
             }
         }
         
         if (shuffle) {
-            Collections.shuffle(points, new RandomAdaptor(random));
+            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
+            Collections.shuffle(points); // XXX temporary workaround
         }
 
         return points;
@@ -162,11 +175,15 @@ public static List<Vector2D> makeRandom(int samples) {
         return points;
     }
 
-    public static Vector2D generateNoiseVector(NormalDistribution distribution) {
+    public static Vector2D generateNoiseVector(RealDistribution.Sampler distribution) {
         return new Vector2D(distribution.sample(), distribution.sample());
     }
     
-    public static List<DoublePoint> normalize(final List<Vector2D> input, double minX, double maxX, double minY, double maxY) {
+    public static List<DoublePoint> normalize(final List<Vector2D> input,
+                                              double minX,
+                                              double maxX,
+                                              double minY,
+                                              double maxY) {
         double rangeX = maxX - minX;
         double rangeY = maxY - minY;
         List<DoublePoint> points = new ArrayList<DoublePoint>();
@@ -190,7 +207,7 @@ public Display() {
             
             int nSamples = 1500;
             
-            RandomGenerator rng = new Well19937c(0);
+            UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 0);
             List<List<DoublePoint>> datasets = new ArrayList<List<DoublePoint>>();
 
             datasets.add(normalize(makeCircles(nSamples, true, 0.04, 0.5, rng), -1, 1, -1, 1));
@@ -200,11 +217,16 @@ public Display() {
 
             List<Pair<String, Clusterer<DoublePoint>>> algorithms = new ArrayList<Pair<String, Clusterer<DoublePoint>>>();
             
-            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("KMeans\n(k=2)", new KMeansPlusPlusClusterer<DoublePoint>(2)));            
-            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("KMeans\n(k=3)", new KMeansPlusPlusClusterer<DoublePoint>(3)));
-            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("FuzzyKMeans\n(k=3, fuzzy=2)", new FuzzyKMeansClusterer<DoublePoint>(3, 2)));
-            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("FuzzyKMeans\n(k=3, fuzzy=10)", new FuzzyKMeansClusterer<DoublePoint>(3, 10)));
-            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("DBSCAN\n(eps=.1, min=3)", new DBSCANClusterer<DoublePoint>(0.1, 3)));
+            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("KMeans\n(k=2)",
+                                                                    new KMeansPlusPlusClusterer<DoublePoint>(2)));
+            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("KMeans\n(k=3)",
+                                                                    new KMeansPlusPlusClusterer<DoublePoint>(3)));
+            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("FuzzyKMeans\n(k=3, fuzzy=2)",
+                                                                    new FuzzyKMeansClusterer<DoublePoint>(3, 2)));
+            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("FuzzyKMeans\n(k=3, fuzzy=10)",
+                                                                    new FuzzyKMeansClusterer<DoublePoint>(3, 10)));
+            algorithms.add(new Pair<String, Clusterer<DoublePoint>>("DBSCAN\n(eps=.1, min=3)",
+                                                                    new DBSCANClusterer<DoublePoint>(0.1, 3)));
             
             GridBagConstraints c = new GridBagConstraints();
             c.fill = GridBagConstraints.VERTICAL;
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/RealDistributionComparison.java b/src/userguide/java/org/apache/commons/math4/userguide/RealDistributionComparison.java
index 315659be6c..5d4e015b31 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/RealDistributionComparison.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/RealDistributionComparison.java
@@ -46,8 +46,6 @@
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.TDistribution;
 import org.apache.commons.math4.distribution.WeibullDistribution;
-import org.apache.commons.math4.random.MersenneTwister;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.userguide.ExampleUtils.ExampleFrame;
 
@@ -242,14 +240,13 @@ public Display() {
             container.add(comp, c);
 
             c.gridx++;
-            RandomGenerator rng = new MersenneTwister(0);
             comp = createComponent("Levy", 0, 3,
                                    new String[] { "c=0.5", "c=1", "c=2", "c=4", "c=8" },
-                                   new LevyDistribution(rng, 0, 0.5),
-                                   new LevyDistribution(rng, 0, 1),
-                                   new LevyDistribution(rng, 0, 2),
-                                   new LevyDistribution(rng, 0, 4),
-                                   new LevyDistribution(rng, 0, 8));
+                                   new LevyDistribution(0, 0.5),
+                                   new LevyDistribution(0, 1),
+                                   new LevyDistribution(0, 2),
+                                   new LevyDistribution(0, 4),
+                                   new LevyDistribution(0, 8));
             container.add(comp, c);
 
             c.gridy++;
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
index 77cc75a0b0..2c942a9bcd 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
@@ -20,6 +20,8 @@
 import org.apache.commons.math4.geometry.euclidean.threed.Vector3D;
 import org.apache.commons.math4.geometry.euclidean.threed.Rotation;
 import org.apache.commons.math4.random.UnitSphereRandomVectorGenerator;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 
@@ -57,11 +59,13 @@ public ChineseRings(Vector3D orientationRing1,
         final UnitSphereRandomVectorGenerator unit
             = new UnitSphereRandomVectorGenerator(2);
 
-        final RealDistribution radius1
+        final UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C);
+
+        final RealDistribution.Sampler radius1
             = new UniformRealDistribution(radiusRing1 - halfWidthRing1,
-                                          radiusRing1 + halfWidthRing1);
-        final RealDistribution widthRing1
-            = new UniformRealDistribution(-halfWidthRing1, halfWidthRing1);
+                                          radiusRing1 + halfWidthRing1).createSampler(rng);
+        final RealDistribution.Sampler widthRing1
+            = new UniformRealDistribution(-halfWidthRing1, halfWidthRing1).createSampler(rng);
 
         for (int i = 0; i < numPointsRing1; i++) {
             final double[] v = unit.nextVector();
@@ -72,11 +76,11 @@ public ChineseRings(Vector3D orientationRing1,
                                         widthRing1.sample());
         }
 
-        final RealDistribution radius2
+        final RealDistribution.Sampler radius2
             = new UniformRealDistribution(radiusRing2 - halfWidthRing2,
-                                          radiusRing2 + halfWidthRing2);
-        final RealDistribution widthRing2
-            = new UniformRealDistribution(-halfWidthRing2, halfWidthRing2);
+                                          radiusRing2 + halfWidthRing2).createSampler(rng);
+        final RealDistribution.Sampler widthRing2
+            = new UniformRealDistribution(-halfWidthRing2, halfWidthRing2).createSampler(rng);
 
         for (int i = 0; i < numPointsRing2; i++) {
             final double[] v = unit.nextVector();

From 3411f29e2377788cdaa5a4eeaddc53355f085a78 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Mon, 28 Mar 2016 03:25:05 +0200
Subject: [PATCH 18/21] MATH-1348

Subclass of "java.util.Random".
---
 .../math4/random/JDKRandomAdaptor.java        | 148 ++++++++++++++++++
 .../math4/random/JDKRandomAdaptorTest.java    | 113 +++++++++++++
 2 files changed, 261 insertions(+)
 create mode 100644 src/main/java/org/apache/commons/math4/random/JDKRandomAdaptor.java
 create mode 100644 src/test/java/org/apache/commons/math4/random/JDKRandomAdaptorTest.java

diff --git a/src/main/java/org/apache/commons/math4/random/JDKRandomAdaptor.java b/src/main/java/org/apache/commons/math4/random/JDKRandomAdaptor.java
new file mode 100644
index 0000000000..f3ab22eb3e
--- /dev/null
+++ b/src/main/java/org/apache/commons/math4/random/JDKRandomAdaptor.java
@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.random;
+
+import java.util.Random;
+import java.io.ObjectOutputStream;
+import java.io.IOException;
+import org.apache.commons.math4.exception.MathInternalError;
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.NormalDistribution;
+
+/**
+ * Extension of {@link java.util.Random} that delegates the number
+ * generation to a {@link UniformRandomProvider}.
+ *
+ * <p>
+ * This class allows usage of JDK utilities that take an instance
+ * of type {@code Random} as argument.
+ * <br>
+ * Other than for this specific purpose, usage of this class
+ * is best avoided; indeed, because of the following limitations:
+ * <ul>
+ *  <li>
+ *   {@code MathUnsupportedOperationException} will be raised if
+ *   serialization is attempted.
+ *  </li>
+ *  <li>
+ *   Reseeding is not supported.
+ *  </li>
+ * </ul>
+ * an instance of this class cannot be a substitute for an instance
+ * of the parent class if those functionalities are required.
+ * </p>
+ *
+ * @since 4.0
+ */
+public final class JDKRandomAdaptor extends Random {
+    /** Serial version identifier. */
+    private static final long serialVersionUID = 666L;
+    /** Delegate. */
+    private final transient UniformRandomProvider rng;
+    /** Cf. "nextGaussian()" method. */
+    private final transient RealDistribution.Sampler gauss;
+
+    /**
+     * Creates an adaptor.
+     *
+     * @param rng Generator.
+     */
+    public JDKRandomAdaptor(UniformRandomProvider rng) {
+        super(0L);
+
+        this.rng = rng;
+        gauss = new NormalDistribution().createSampler(rng);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public boolean nextBoolean() {
+        return rng.nextBoolean();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public void nextBytes(byte[] bytes) {
+        rng.nextBytes(bytes);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public double nextDouble() {
+        return rng.nextDouble();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public float nextFloat() {
+        return rng.nextFloat();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public double nextGaussian() {
+        return gauss.sample();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int nextInt() {
+        return rng.nextInt();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public int nextInt(int n) {
+        return rng.nextInt(n);
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    public long nextLong() {
+        return rng.nextLong();
+    }
+
+    /** {@inheritDoc} */
+    @Override
+    protected int next(int bits) {
+        // Should never happen: it means that some methods were not overridden.
+        throw new MathInternalError();
+    }
+
+    /**
+     * Seeding is not supported.
+     *
+     * @param seed Ignored.
+     */
+    @Override
+    public void setSeed(long seed) {
+        // Cannot throw because the constructor of "Random" calls it.
+        // throw new MathUnsupportedOperationException();
+    }
+
+    /**
+     * @param out Ignored.
+     * @throws IOException Ignored.
+     * @throws MathUnsupportedOperationException if called.
+     */
+    private void writeObject(ObjectOutputStream out)
+        throws IOException {
+        throw new MathUnsupportedOperationException();
+    }
+}
diff --git a/src/test/java/org/apache/commons/math4/random/JDKRandomAdaptorTest.java b/src/test/java/org/apache/commons/math4/random/JDKRandomAdaptorTest.java
new file mode 100644
index 0000000000..5ba68c7552
--- /dev/null
+++ b/src/test/java/org/apache/commons/math4/random/JDKRandomAdaptorTest.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math4.random;
+
+import java.util.Random;
+import org.apache.commons.math4.exception.MathUnsupportedOperationException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.math4.distribution.RealDistribution;
+import org.apache.commons.math4.distribution.NormalDistribution;
+import org.apache.commons.math4.TestUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Test cases for {@link JDKRandomAdaptor}.
+ */
+public class JDKRandomAdaptorTest {
+
+    @Test
+    public void testUniform() {
+        final RandomSource source = RandomSource.WELL_19937_C;
+        final long seed = RandomSource.createLong(); // Random seed.
+
+        final UniformRandomProvider reference = RandomSource.create(source, seed);
+        final Random random = new JDKRandomAdaptor(RandomSource.create(source, seed));
+
+        final int n = 3; // Check several times, reusing the same RNG.
+        for (int i = 0; i < n; i++) {
+            checkUniform(reference, random);
+        }
+    }
+
+    @Test
+    public void testGaussian() {
+        final RandomSource source = RandomSource.WELL_19937_C;
+        final long seed = RandomSource.createLong(); // Random seed.
+
+        final UniformRandomProvider reference = RandomSource.create(source, seed);
+        final RealDistribution.Sampler s = new NormalDistribution(0, 1).createSampler(reference);
+
+        final Random random = new JDKRandomAdaptor(RandomSource.create(source, seed));
+
+        final int n = 11; // Check several times, reusing the same RNG.
+        for (int i = 0; i < n; i++) {
+            Assert.assertEquals(s.sample(), random.nextGaussian(), 0);
+        }
+    }
+
+    @Test
+    public void testSeedIsIgnored() {
+        final RandomSource source = RandomSource.WELL_19937_C;
+        final long seed = RandomSource.createLong(); // Random seed.
+
+        Random random;
+
+        random = new JDKRandomAdaptor(RandomSource.create(source, seed));
+        final double withoutReseed = random.nextDouble();
+
+        // Same RNG.
+        random = new JDKRandomAdaptor(RandomSource.create(source, seed));
+        final long differentSeed = seed + 1;
+        random.setSeed(differentSeed); // Is seeding ignored?
+        final double withReseed = random.nextDouble();
+
+        Assert.assertEquals(withoutReseed, withReseed, 0);
+    }
+
+    @Test(expected=MathUnsupportedOperationException.class)
+    public void testSerializeIsNotSupported() {
+        TestUtils.serializeAndRecover(new JDKRandomAdaptor(RandomSource.create(RandomSource.WELL_512_A)));
+    }
+
+    /**
+     * Check uniform random generator.
+     *
+     * @param rand1 Reference generator.
+     * @param rand2 Generator under test.
+     */
+    private void checkUniform(UniformRandomProvider rand1,
+                              Random rand2) {
+        final int len = 11;
+        final byte[] bytes1 = new byte[len];
+        final byte[] bytes2 = new byte[len];
+        rand1.nextBytes(bytes1);
+        rand2.nextBytes(bytes2);
+        Assert.assertArrayEquals(bytes1, bytes2);
+
+        Assert.assertEquals(rand1.nextBoolean(), rand2.nextBoolean());
+
+        Assert.assertEquals(rand1.nextInt(), rand2.nextInt());
+        Assert.assertEquals(rand1.nextInt(len), rand2.nextInt(len));
+
+        Assert.assertEquals(rand1.nextLong(), rand2.nextLong());
+
+        Assert.assertEquals(rand1.nextDouble(), rand2.nextDouble(), 0);
+        Assert.assertEquals(rand1.nextFloat(), rand2.nextFloat(), 0);
+    }
+}

From 880b04814c564ea7a1bb8fe97c15b4735c67e8e9 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Mon, 28 Mar 2016 03:26:52 +0200
Subject: [PATCH 19/21] Example code updated.

Usage of "JDKRandomAdaptor".
---
 .../userguide/ClusterAlgorithmComparison.java    | 16 +++++++---------
 1 file changed, 7 insertions(+), 9 deletions(-)

diff --git a/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java b/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
index b33c3cf156..9dbd1c255f 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/ClusterAlgorithmComparison.java
@@ -46,7 +46,7 @@
 import org.apache.commons.math4.ml.clustering.DoublePoint;
 import org.apache.commons.math4.ml.clustering.FuzzyKMeansClusterer;
 import org.apache.commons.math4.ml.clustering.KMeansPlusPlusClusterer;
-import org.apache.commons.math4.random.RandomAdaptor;
+import org.apache.commons.math4.random.JDKRandomAdaptor;
 import org.apache.commons.math4.random.SobolSequenceGenerator;
 import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.rng.RandomSource;
@@ -84,8 +84,7 @@ public static List<Vector2D> makeCircles(int samples,
         }
         
         if (shuffle) {
-            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
-            Collections.shuffle(points); // XXX temporary workaround
+            Collections.shuffle(points, new JDKRandomAdaptor(rng));
         }
 
         return points;
@@ -115,8 +114,7 @@ public static List<Vector2D> makeMoons(int samples,
         }
         
         if (shuffle) {
-            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
-            Collections.shuffle(points); // XXX temporary workaround
+            Collections.shuffle(points, new JDKRandomAdaptor(rng));
         }
 
         return points;
@@ -153,8 +151,7 @@ public static List<Vector2D> makeBlobs(int samples,
         }
         
         if (shuffle) {
-            // Collections.shuffle(points, new RandomAdaptor(rng)); // XXX TODO
-            Collections.shuffle(points); // XXX temporary workaround
+            Collections.shuffle(points, new JDKRandomAdaptor(rng));
         }
 
         return points;
@@ -206,8 +203,9 @@ public Display() {
             setLayout(new GridBagLayout());
             
             int nSamples = 1500;
-            
-            UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, 0);
+
+            final long seed = RandomSource.createLong(); // Random seed.
+            UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_19937_C, seed);
             List<List<DoublePoint>> datasets = new ArrayList<List<DoublePoint>>();
 
             datasets.add(normalize(makeCircles(nSamples, true, 0.04, 0.5, rng), -1, 1, -1, 1));

From 3066a8085f86b743da14a161427c403a7038e8b0 Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Mon, 28 Mar 2016 13:45:42 +0200
Subject: [PATCH 20/21] MATH-1351

New sampling API for multivariate distributions (similar to changes performed for MATH-1158).

Unit test file renamed in accordance to the class being tested.
One failing test "@Ignore"d (see comments on the bug-tracking system).
---
 .../AbstractMultivariateRealDistribution.java |  44 +++----
 ...MixtureMultivariateNormalDistribution.java |  60 +++------
 .../MixtureMultivariateRealDistribution.java  | 124 +++++++++---------
 .../MultivariateNormalDistribution.java       |  73 ++++-------
 .../MultivariateRealDistribution.java         |  37 +++---
 ...reMultivariateNormalDistributionTest.java} |  68 +++-------
 .../MultivariateNormalDistributionTest.java   |   6 +-
 7 files changed, 163 insertions(+), 249 deletions(-)
 rename src/test/java/org/apache/commons/math4/distribution/{MultivariateNormalMixtureModelDistributionTest.java => MixtureMultivariateNormalDistributionTest.java} (84%)

diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
index 93e4b7bb4c..1c4adef05e 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Base class for multivariate probability distributions.
@@ -27,27 +27,16 @@
  */
 public abstract class AbstractMultivariateRealDistribution
     implements MultivariateRealDistribution {
-    /** RNG instance used to generate samples from the distribution. */
-    protected final RandomGenerator random;
     /** The number of dimensions or columns in the multivariate distribution. */
     private final int dimension;
 
     /**
-     * @param rng Random number generator.
      * @param n Number of dimensions.
      */
-    protected AbstractMultivariateRealDistribution(RandomGenerator rng,
-                                                   int n) {
-        random = rng;
+    protected AbstractMultivariateRealDistribution(int n) {
         dimension = n;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    public void reseedRandomGenerator(long seed) {
-        random.setSeed(seed);
-    }
-
     /** {@inheritDoc} */
     @Override
     public int getDimension() {
@@ -56,19 +45,28 @@ public int getDimension() {
 
     /** {@inheritDoc} */
     @Override
-    public abstract double[] sample();
+    public abstract Sampler createSampler(UniformRandomProvider rng);
 
-    /** {@inheritDoc} */
-    @Override
-    public double[][] sample(final int sampleSize) {
-        if (sampleSize <= 0) {
+    /**
+     * Utility function for creating {@code n} vectors generated by the
+     * given {@code sampler}.
+     *
+     * @param n Number of samples.
+     * @param sampler Sampler.
+     * @return an array of size {@code n} whose elements are random vectors
+     * sampled from this distribution.
+     */
+    public static double[][] sample(int n,
+                                    MultivariateRealDistribution.Sampler sampler) {
+        if (n <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                                                   sampleSize);
+                                                   n);
         }
-        final double[][] out = new double[sampleSize][dimension];
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+
+        final double[][] samples = new double[n][];
+        for (int i = 0; i < n; i++) {
+            samples[i] = sampler.sample();
         }
-        return out;
+        return samples;
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistribution.java
index d7cd4cdb10..e24a2ac68a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistribution.java
@@ -21,7 +21,6 @@
 
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.NotPositiveException;
-import org.apache.commons.math4.random.RandomGenerator;
 import org.apache.commons.math4.util.Pair;
 
 /**
@@ -33,63 +32,42 @@
  */
 public class MixtureMultivariateNormalDistribution
     extends MixtureMultivariateRealDistribution<MultivariateNormalDistribution> {
-
-    /**
-     * Creates a multivariate normal mixture distribution.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link org.apache.commons.math4.random.Well19937c Well19937c} as random
-     * generator to be used for sampling only (see {@link #sample()} and
-     * {@link #sample(int)}). In case no sampling is needed for the created
-     * distribution, it is advised to pass {@code null} as random generator via
-     * the appropriate constructors to avoid the additional initialisation
-     * overhead.
-     *
-     * @param weights Weights of each component.
-     * @param means Mean vector for each component.
-     * @param covariances Covariance matrix for each component.
-     */
-    public MixtureMultivariateNormalDistribution(double[] weights,
-                                                 double[][] means,
-                                                 double[][][] covariances) {
-        super(createComponents(weights, means, covariances));
-    }
-
     /**
      * Creates a mixture model from a list of distributions and their
      * associated weights.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link org.apache.commons.math4.random.Well19937c Well19937c} as random
-     * generator to be used for sampling only (see {@link #sample()} and
-     * {@link #sample(int)}). In case no sampling is needed for the created
-     * distribution, it is advised to pass {@code null} as random generator via
-     * the appropriate constructors to avoid the additional initialisation
-     * overhead.
      *
-     * @param components List of (weight, distribution) pairs from which to sample.
+     * @param components Distributions from which to sample.
+     * @throws NotPositiveException if any of the weights is negative.
+     * @throws DimensionMismatchException if not all components have the same
+     * number of variables.
      */
-    public MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>> components) {
+    public MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>> components)
+        throws NotPositiveException,
+               DimensionMismatchException {
         super(components);
     }
 
     /**
-     * Creates a mixture model from a list of distributions and their
-     * associated weights.
+     * Creates a multivariate normal mixture distribution.
      *
-     * @param rng Random number generator.
-     * @param components Distributions from which to sample.
+     * @param weights Weights of each component.
+     * @param means Mean vector for each component.
+     * @param covariances Covariance matrix for each component.
      * @throws NotPositiveException if any of the weights is negative.
      * @throws DimensionMismatchException if not all components have the same
      * number of variables.
      */
-    public MixtureMultivariateNormalDistribution(RandomGenerator rng,
-                                                 List<Pair<Double, MultivariateNormalDistribution>> components)
-        throws NotPositiveException, DimensionMismatchException {
-        super(rng, components);
+    public MixtureMultivariateNormalDistribution(double[] weights,
+                                                 double[][] means,
+                                                 double[][][] covariances)
+        throws NotPositiveException,
+               DimensionMismatchException {
+        this(createComponents(weights, means, covariances));
     }
 
     /**
+     * Creates components of the mixture model.
+     *
      * @param weights Weights of each component.
      * @param means Mean vector for each component.
      * @param covariances Covariance matrix for each component.
diff --git a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
index ce8c7d9610..4caee3f2be 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
@@ -23,8 +23,7 @@
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
 /**
@@ -45,33 +44,14 @@ public class MixtureMultivariateRealDistribution<T extends MultivariateRealDistr
     /**
      * Creates a mixture model from a list of distributions and their
      * associated weights.
-     * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
      *
-     * @param components List of (weight, distribution) pairs from which to sample.
-     */
-    public MixtureMultivariateRealDistribution(List<Pair<Double, T>> components) {
-        this(new Well19937c(), components);
-    }
-
-    /**
-     * Creates a mixture model from a list of distributions and their
-     * associated weights.
-     *
-     * @param rng Random number generator.
      * @param components Distributions from which to sample.
      * @throws NotPositiveException if any of the weights is negative.
      * @throws DimensionMismatchException if not all components have the same
      * number of variables.
      */
-    public MixtureMultivariateRealDistribution(RandomGenerator rng,
-                                               List<Pair<Double, T>> components) {
-        super(rng, components.get(0).getSecond().getDimension());
+    public MixtureMultivariateRealDistribution(List<Pair<Double, T>> components) {
+        super(components.get(0).getSecond().getDimension());
 
         final int numComp = components.size();
         final int dim = getDimension();
@@ -112,61 +92,75 @@ public double density(final double[] values) {
         return p;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    public double[] sample() {
-        // Sampled values.
-        double[] vals = null;
-
-        // Determine which component to sample from.
-        final double randomValue = random.nextDouble();
-        double sum = 0;
+    /**
+     * Gets the distributions that make up the mixture model.
+     *
+     * @return the component distributions and associated weights.
+     */
+    public List<Pair<Double, T>> getComponents() {
+        final List<Pair<Double, T>> list = new ArrayList<Pair<Double, T>>(weight.length);
 
         for (int i = 0; i < weight.length; i++) {
-            sum += weight[i];
-            if (randomValue <= sum) {
-                // pick model i
-                vals = distribution.get(i).sample();
-                break;
-            }
-        }
-
-        if (vals == null) {
-            // This should never happen, but it ensures we won't return a null in
-            // case the loop above has some floating point inequality problem on
-            // the final iteration.
-            vals = distribution.get(weight.length - 1).sample();
+            list.add(new Pair<Double, T>(weight[i], distribution.get(i)));
         }
 
-        return vals;
+        return list;
     }
 
     /** {@inheritDoc} */
     @Override
-    public void reseedRandomGenerator(long seed) {
-        // Seed needs to be propagated to underlying components
-        // in order to maintain consistency between runs.
-        super.reseedRandomGenerator(seed);
-
-        for (int i = 0; i < distribution.size(); i++) {
-            // Make each component's seed different in order to avoid
-            // using the same sequence of random numbers.
-            distribution.get(i).reseedRandomGenerator(i + 1 + seed);
-        }
+    public MultivariateRealDistribution.Sampler createSampler(UniformRandomProvider rng) {
+        return new MixtureSampler(rng);
     }
 
     /**
-     * Gets the distributions that make up the mixture model.
-     *
-     * @return the component distributions and associated weights.
+     * Sampler.
      */
-    public List<Pair<Double, T>> getComponents() {
-        final List<Pair<Double, T>> list = new ArrayList<Pair<Double, T>>(weight.length);
-
-        for (int i = 0; i < weight.length; i++) {
-            list.add(new Pair<Double, T>(weight[i], distribution.get(i)));
+    private class MixtureSampler implements MultivariateRealDistribution.Sampler {
+        /** RNG */
+        private final UniformRandomProvider rng;
+        /** Sampler for each of the distribution in the mixture. */
+        private final MultivariateRealDistribution.Sampler[] samplers;
+
+        /**
+         * @param generator RNG.
+         */
+        MixtureSampler(UniformRandomProvider generator) {
+            rng = generator;
+
+            samplers = new MultivariateRealDistribution.Sampler[weight.length];
+            for (int i = 0; i < weight.length; i++) {
+                samplers[i] = distribution.get(i).createSampler(rng);
+            }
         }
 
-        return list;
+        /** {@inheritDoc} */
+        @Override
+        public double[] sample() {
+            // Sampled values.
+            double[] vals = null;
+
+            // Determine which component to sample from.
+            final double randomValue = rng.nextDouble();
+            double sum = 0;
+
+            for (int i = 0; i < weight.length; i++) {
+                sum += weight[i];
+                if (randomValue <= sum) {
+                    // pick model i
+                    vals = samplers[i].sample();
+                    break;
+                }
+            }
+
+            if (vals == null) {
+                // This should never happen, but it ensures we won't return a null in
+                // case the loop above has some floating point inequality problem on
+                // the final iteration.
+                vals = samplers[weight.length - 1].sample();
+            }
+
+            return vals;
+        }
     }
 }
diff --git a/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
index 212fb2a29b..da270ad2be 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
@@ -22,8 +22,7 @@
 import org.apache.commons.math4.linear.NonPositiveDefiniteMatrixException;
 import org.apache.commons.math4.linear.RealMatrix;
 import org.apache.commons.math4.linear.SingularMatrixException;
-import org.apache.commons.math4.random.RandomGenerator;
-import org.apache.commons.math4.random.Well19937c;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 
@@ -53,44 +52,12 @@ public class MultivariateNormalDistribution
     /**
      * Creates a multivariate normal distribution with the given mean vector and
      * covariance matrix.
-     * <br/>
-     * The number of dimensions is equal to the length of the mean vector
-     * and to the number of rows and columns of the covariance matrix.
-     * It is frequently written as "p" in formulae.
      * <p>
-     * <b>Note:</b> this constructor will implicitly create an instance of
-     * {@link Well19937c} as random generator to be used for sampling only (see
-     * {@link #sample()} and {@link #sample(int)}). In case no sampling is
-     * needed for the created distribution, it is advised to pass {@code null}
-     * as random generator via the appropriate constructors to avoid the
-     * additional initialisation overhead.
-     *
-     * @param means Vector of means.
-     * @param covariances Covariance matrix.
-     * @throws DimensionMismatchException if the arrays length are
-     * inconsistent.
-     * @throws SingularMatrixException if the eigenvalue decomposition cannot
-     * be performed on the provided covariance matrix.
-     * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is
-     * negative.
-     */
-    public MultivariateNormalDistribution(final double[] means,
-                                          final double[][] covariances)
-        throws SingularMatrixException,
-               DimensionMismatchException,
-               NonPositiveDefiniteMatrixException {
-        this(new Well19937c(), means, covariances);
-    }
-
-    /**
-     * Creates a multivariate normal distribution with the given mean vector and
-     * covariance matrix.
-     * <br/>
      * The number of dimensions is equal to the length of the mean vector
      * and to the number of rows and columns of the covariance matrix.
      * It is frequently written as "p" in formulae.
+     * </p>
      *
-     * @param rng Random Number Generator.
      * @param means Vector of means.
      * @param covariances Covariance matrix.
      * @throws DimensionMismatchException if the arrays length are
@@ -100,13 +67,12 @@ public MultivariateNormalDistribution(final double[] means,
      * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is
      * negative.
      */
-    public MultivariateNormalDistribution(RandomGenerator rng,
-                                          final double[] means,
+    public MultivariateNormalDistribution(final double[] means,
                                           final double[][] covariances)
             throws SingularMatrixException,
                    DimensionMismatchException,
                    NonPositiveDefiniteMatrixException {
-        super(rng, means.length);
+        super(means.length);
 
         final int dim = means.length;
 
@@ -210,21 +176,30 @@ public double[] getStandardDeviations() {
 
     /** {@inheritDoc} */
     @Override
-    public double[] sample() {
-        final int dim = getDimension();
-        final double[] normalVals = new double[dim];
+    public MultivariateRealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
+        return new MultivariateRealDistribution.Sampler() {
+            /** Normal distribution. */
+            private final RealDistribution.Sampler gauss = new NormalDistribution().createSampler(rng);
 
-        for (int i = 0; i < dim; i++) {
-            normalVals[i] = random.nextGaussian();
-        }
+            /** {@inheritDoc} */
+            @Override
+            public double[] sample() {
+                final int dim = getDimension();
+                final double[] normalVals = new double[dim];
 
-        final double[] vals = samplingMatrix.operate(normalVals);
+                for (int i = 0; i < dim; i++) {
+                    normalVals[i] = gauss.sample();
+                }
 
-        for (int i = 0; i < dim; i++) {
-            vals[i] += means[i];
-        }
+                final double[] vals = samplingMatrix.operate(normalVals);
+
+                for (int i = 0; i < dim; i++) {
+                    vals[i] += means[i];
+                }
 
-        return vals;
+                return vals;
+            }
+        };
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
index d734d96891..eaaf35e5e2 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.distribution;
 
-import org.apache.commons.math4.exception.NotStrictlyPositiveException;
+import org.apache.commons.math4.rng.UniformRandomProvider;
 
 /**
  * Base interface for multivariate distributions on the reals.
@@ -41,13 +41,6 @@ public interface MultivariateRealDistribution {
      */
     double density(double[] x);
 
-    /**
-     * Reseeds the random generator used to generate samples.
-     *
-     * @param seed Seed with which to initialize the random number generator.
-     */
-    void reseedRandomGenerator(long seed);
-
     /**
      * Gets the number of random variables of the distribution.
      * It is the size of the array returned by the {@link #sample() sample}
@@ -58,21 +51,27 @@ public interface MultivariateRealDistribution {
     int getDimension();
 
     /**
-     * Generates a random value vector sampled from this distribution.
+     * Creates a sampler.
+     *
+     * @param rng Generator of uniformly distributed numbers.
+     * @return a sampler that produces random numbers according this
+     * distribution.
      *
-     * @return a random value vector.
+     * @since 4.0
      */
-    double[] sample();
+    Sampler createSampler(UniformRandomProvider rng);
 
     /**
-     * Generates a list of a random value vectors from the distribution.
-     *
-     * @param sampleSize the number of random vectors to generate.
-     * @return an array representing the random samples.
-     * @throws org.apache.commons.math4.exception.NotStrictlyPositiveException
-     * if {@code sampleSize} is not positive.
+     * Sampling functionality.
      *
-     * @see #sample()
+     * @since 4.0
      */
-    double[][] sample(int sampleSize) throws NotStrictlyPositiveException;
+    interface Sampler {
+        /**
+         * Generates a random value vector sampled from this distribution.
+         *
+         * @return a random value vector.
+         */
+        double[] sample();
+    }
 }
diff --git a/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalMixtureModelDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistributionTest.java
similarity index 84%
rename from src/test/java/org/apache/commons/math4/distribution/MultivariateNormalMixtureModelDistributionTest.java
rename to src/test/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistributionTest.java
index 8bed770001..c4d3a8fda1 100644
--- a/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalMixtureModelDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/MixtureMultivariateNormalDistributionTest.java
@@ -23,16 +23,16 @@
 import org.apache.commons.math4.distribution.MultivariateNormalDistribution;
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.NotPositiveException;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.util.Pair;
 import org.junit.Assert;
 import org.junit.Test;
+import org.junit.Ignore;
 
 /**
- * Test that demonstrates the use of {@link MixtureMultivariateRealDistribution}
- * in order to create a mixture model composed of {@link MultivariateNormalDistribution
- * normal distributions}.
+ * Test case {@link MixtureMultivariateNormalDistribution}.
  */
-public class MultivariateNormalMixtureModelDistributionTest {
+public class MixtureMultivariateNormalDistributionTest {
 
     @Test
     public void testNonUnitWeightSum() {
@@ -43,8 +43,8 @@ public void testNonUnitWeightSum() {
                                              { -1.1, 2.0 } },
                                            { { 3.5, 1.5 },
                                              { 1.5, 3.5 } } };
-        final MultivariateNormalMixtureModelDistribution d
-            = create(weights, means, covariances);
+        final MixtureMultivariateNormalDistribution d
+            = new MixtureMultivariateNormalDistribution(weights, means, covariances);
 
         final List<Pair<Double, MultivariateNormalDistribution>> comp = d.getComponents();
 
@@ -61,7 +61,7 @@ public void testWeightSumOverFlow() {
                                              { -1.1, 2.0 } },
                                            { { 3.5, 1.5 },
                                              { 1.5, 3.5 } } };
-        create(weights, means, covariances);
+        new MixtureMultivariateNormalDistribution(weights, means, covariances);
     }
 
     @Test(expected=NotPositiveException.class)
@@ -73,7 +73,7 @@ public void testPreconditionPositiveWeights() {
                                              { -1.1, 2.0 } },
                                            { { 3.5, 1.5 },
                                              { 1.5, 3.5 } } };
-        create(negativeWeights, means, covariances);
+        new MixtureMultivariateNormalDistribution(negativeWeights, means, covariances);
     }
 
     /**
@@ -88,8 +88,8 @@ public void testDensities() {
                                              { -1.1, 2.0 } },
                                            { { 3.5, 1.5 },
                                              { 1.5, 3.5 } } };
-        final MultivariateNormalMixtureModelDistribution d
-            = create(weights, means, covariances);
+        final MixtureMultivariateNormalDistribution d
+            = new MixtureMultivariateNormalDistribution(weights, means, covariances);
 
         // Test vectors
         final double[][] testValues = { { -1.5, 2 },
@@ -115,7 +115,7 @@ public void testDensities() {
     /**
      * Test the accuracy of sampling from the distribution.
      */
-    @Test
+    @Ignore@Test
     public void testSampling() {
         final double[] weights = { 0.3, 0.7 };
         final double[][] means = { { -1.5, 2.0 },
@@ -124,44 +124,23 @@ public void testSampling() {
                                              { -1.1, 2.0 } },
                                            { { 3.5, 1.5 },
                                              { 1.5, 3.5 } } };
-        final MultivariateNormalMixtureModelDistribution d
-            = create(weights, means, covariances);
-        d.reseedRandomGenerator(50);
+        final MixtureMultivariateNormalDistribution d =
+            new MixtureMultivariateNormalDistribution(weights, means, covariances);
+        final MultivariateRealDistribution.Sampler sampler =
+            d.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 50));
 
         final double[][] correctSamples = getCorrectSamples();
         final int n = correctSamples.length;
-        final double[][] samples = d.sample(n);
+        final double[][] samples = AbstractMultivariateRealDistribution.sample(n, sampler);
 
         for (int i = 0; i < n; i++) {
             for (int j = 0; j < samples[i].length; j++) {
-                Assert.assertEquals(correctSamples[i][j], samples[i][j], 1e-16);
+                Assert.assertEquals("sample[" + j + "]",
+                                    correctSamples[i][j], samples[i][j], 1e-16);
             }
         }
     }
 
-    /**
-     * Creates a mixture of Gaussian distributions.
-     *
-     * @param weights Weights.
-     * @param means Means.
-     * @param covariances Covariances.
-     * @return the mixture distribution.
-     */
-    private MultivariateNormalMixtureModelDistribution create(double[] weights,
-                                                              double[][] means,
-                                                              double[][][] covariances) {
-        final List<Pair<Double, MultivariateNormalDistribution>> mvns
-            = new ArrayList<Pair<Double, MultivariateNormalDistribution>>();
-
-        for (int i = 0; i < weights.length; i++) {
-            final MultivariateNormalDistribution dist
-                = new MultivariateNormalDistribution(means[i], covariances[i]);
-            mvns.add(new Pair<Double, MultivariateNormalDistribution>(weights[i], dist));
-        }
-
-        return new MultivariateNormalMixtureModelDistribution(mvns);
-    }
-
     /**
      * Values used in {@link #testSampling()}.
      */
@@ -287,14 +266,3 @@ private double[][] getCorrectSamples() {
         };
     }
 }
-
-/**
- * Class that implements a mixture of Gaussian ditributions.
- */
-class MultivariateNormalMixtureModelDistribution
-    extends MixtureMultivariateRealDistribution<MultivariateNormalDistribution> {
-
-    public MultivariateNormalMixtureModelDistribution(List<Pair<Double, MultivariateNormalDistribution>> components) {
-        super(components);
-    }
-}
diff --git a/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalDistributionTest.java
index 41d526cbd3..3e6d9ff6e8 100644
--- a/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/MultivariateNormalDistributionTest.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math4.distribution.MultivariateNormalDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.linear.RealMatrix;
+import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.stat.correlation.Covariance;
 
 import java.util.Random;
@@ -75,11 +76,12 @@ public void testSampling() {
         final double[][] sigma = { { 2, -1.1 },
                                    { -1.1, 2 } };
         final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);
-        d.reseedRandomGenerator(50);
+        final MultivariateRealDistribution.Sampler sampler =
+            d.createSampler(RandomSource.create(RandomSource.WELL_19937_C, 50));
 
         final int n = 500000;
+        final double[][] samples = AbstractMultivariateRealDistribution.sample(n, sampler);
 
-        final double[][] samples = d.sample(n);
         final int dim = d.getDimension();
         final double[] sampleMeans = new double[dim];
 

From 0880a21c56cec1a2442b5123c3845bfc99e83a7f Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Tue, 19 Apr 2016 00:27:32 +0200
Subject: [PATCH 21/21] MATH-1356

Handle special cases for which the computation would otherwise produce NaN.
Thanks to Thomas Lacroix for the report.
---
 .../distribution/SaddlePointExpansion.java    |  6 +++++
 .../HypergeometricDistributionTest.java       | 26 +++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java b/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
index 01b0f652ab..aea0e3c17b 100644
--- a/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
+++ b/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
@@ -159,6 +159,9 @@ static double getDeviancePart(double x, double mu) {
             }
             ret = s1;
         } else {
+            if (x == 0) {
+                return mu;
+            }
             ret = x * FastMath.log(x / mu) + mu - x;
         }
         return ret;
@@ -180,6 +183,9 @@ static double logBinomialProbability(int x, int n, double p, double q) {
             if (p < 0.1) {
                 ret = -getDeviancePart(n, n * q) - n * p;
             } else {
+                if (n == 0) {
+                    return 0;
+                }
                 ret = n * FastMath.log(q);
             }
         } else if (x == n) {
diff --git a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
index e12c5b42cf..7e7ce8cee6 100644
--- a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
@@ -311,6 +311,32 @@ public void testMath644() {
         Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0);
     }
 
+    @Test
+    public void testZeroTrial() {
+        final int n = 11; // population
+        final int m = 4;  // successes in population
+        final int s = 0;  // number of trials
+
+        final HypergeometricDistribution dist = new HypergeometricDistribution(n, m, 0);
+
+        for (int i = 1; i <= n; i++) {
+            final double p = dist.probability(i);
+            Assert.assertEquals("p=" + p, 0, p, 0d);
+        }
+    }
+
+    @Test
+    public void testMath1356() {
+        final int n = 11;  // population
+        final int m = 11;  // successes in population
+
+        for (int s = 0; s <= n; s++) {
+            final HypergeometricDistribution dist = new HypergeometricDistribution(n, m, s);
+            final double p = dist.probability(s);
+            Assert.assertEquals("p=" + p, 1, p, 0d);
+        }
+    }
+
     @Test
     public void testMath1021() {
         final int N = 43130568;
