From a6f963066692aabd04aad9114e6ea1ccb32cbb5c Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Sun, 2 Mar 2014 14:02:21 +0000
Subject: [PATCH] Fix checker seeing not old point

ConvergenceCheckers always saw previous.getPoint() to equal
current.getPoint() because the optimizers used the same array and did
not make a copy of the previous point. Fixed by using a new array for
each model evaluation and LSP.evaluate() now makes its own copy of the
state vector as well.

Path provided by Evan Ward.

JIRA: MATH-1103

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1573307 13f79535-47bb-0310-9956-ffa450edef68
---
 .../leastsquares/GaussNewtonOptimizer.java    |  8 ++---
 .../leastsquares/LeastSquaresFactory.java     |  3 +-
 .../LevenbergMarquardtOptimizer.java          |  4 +--
 ...ractLeastSquaresOptimizerAbstractTest.java | 33 +++++++++++++++++++
 .../fitting/leastsquares/EvaluationTest.java  | 18 ++++++++++
 5 files changed, 57 insertions(+), 9 deletions(-)

diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java
index 924085687e..c17c870c4e 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java
@@ -197,9 +197,7 @@ public Optimum optimize(final LeastSquaresProblem lsp) {
             throw new NullArgumentException();
         }
 
-        final int nC = lsp.getParameterSize();
-
-        final RealVector currentPoint = lsp.getStart();
+        RealVector currentPoint = lsp.getStart();
 
         // iterate until convergence is reached
         Evaluation current = null;
@@ -227,9 +225,7 @@ public Optimum optimize(final LeastSquaresProblem lsp) {
             // solve the linearized least squares problem
             final RealVector dX = this.decomposition.solve(weightedJacobian, currentResiduals);
             // update the estimated parameters
-            for (int i = 0; i < nC; ++i) {
-                currentPoint.setEntry(i, currentPoint.getEntry(i) + dX.getEntry(i));
-            }
+            currentPoint = currentPoint.add(dX);
         }
     }
 
diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java
index 0853d03558..16ac659c5d 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java
@@ -332,7 +332,8 @@ public Evaluation evaluate(final RealVector point) {
                     value.getFirst(),
                     value.getSecond(),
                     this.target,
-                    point);
+                    // copy so optimizer can change point without changing our instance
+                    point.copy());
         }
 
         /**
diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
index 1cd4e51f74..5f0527c33e 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
@@ -328,7 +328,7 @@ public Optimum optimize(final LeastSquaresProblem problem) {
         // Evaluate the function at the starting point and calculate its norm.
         evaluationCounter.incrementCount();
         //value will be reassigned in the loop
-        Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint, false));
+        Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));
         double[] currentResiduals = current.getResiduals().toArray();
         double currentCost = current.getCost();
 
@@ -445,7 +445,7 @@ public Optimum optimize(final LeastSquaresProblem problem) {
 
                 // Evaluate the function at x + p and calculate its norm.
                 evaluationCounter.incrementCount();
-                current = problem.evaluate(new ArrayRealVector(currentPoint,false));
+                current = problem.evaluate(new ArrayRealVector(currentPoint));
                 currentResiduals = current.getResiduals().toArray();
                 currentCost = current.getCost();
 
diff --git a/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java b/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java
index 9b4f18d0c7..256925902a 100644
--- a/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java
@@ -21,6 +21,7 @@
 import org.apache.commons.math3.exception.ConvergenceException;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer.Optimum;
+import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
 import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
 import org.apache.commons.math3.linear.Array2DRowRealMatrix;
 import org.apache.commons.math3.linear.ArrayRealVector;
@@ -28,6 +29,7 @@
 import org.apache.commons.math3.linear.DiagonalMatrix;
 import org.apache.commons.math3.linear.RealMatrix;
 import org.apache.commons.math3.linear.RealVector;
+import org.apache.commons.math3.optim.ConvergenceChecker;
 import org.apache.commons.math3.optim.SimpleVectorValueChecker;
 import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.util.Pair;
@@ -37,6 +39,10 @@
 import java.io.IOException;
 import java.util.Arrays;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.CoreMatchers.sameInstance;
+
 /**
  * Some of the unit tests are re-implementations of the MINPACK <a
  * href="http://www.netlib.org/minpack/ex/file17">file17</a> and <a
@@ -525,6 +531,33 @@ public void testHahn1() throws IOException {
         doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), optimizer, 1E-7, 1E-4);
     }
 
+    @Test
+    public void testPointCopy() {
+        LinearProblem problem = new LinearProblem(new double[][]{
+                {1, 0, 0},
+                {-1, 1, 0},
+                {0, -1, 1}
+        }, new double[]{1, 1, 1});
+        //mutable boolean
+        final boolean[] checked = {false};
+
+        final LeastSquaresBuilder builder = problem.getBuilder()
+                .checker(new ConvergenceChecker<Evaluation>() {
+                    public boolean converged(int iteration, Evaluation previous, Evaluation current) {
+                        Assert.assertThat(
+                                previous.getPoint(),
+                                not(sameInstance(current.getPoint())));
+                        Assert.assertArrayEquals(new double[3], previous.getPoint().toArray(), 0);
+                        Assert.assertArrayEquals(new double[] {1, 2, 3}, current.getPoint().toArray(), TOl);
+                        checked[0] = true;
+                        return true;
+                    }
+                });
+        Optimum optimum = optimizer.optimize(builder.build());
+
+        Assert.assertThat(checked[0], is(true));
+    }
+
     class LinearProblem {
         private final RealMatrix factors;
         private final double[] target;
diff --git a/src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTest.java b/src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTest.java
index 6a60008ec8..1878f76845 100644
--- a/src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTest.java
@@ -199,4 +199,22 @@ public void testComputeSigma() throws IOException {
                                 expected[i], actual, 1e-6 * expected[i]);
         }
     }
+
+    @Test
+    public void testEvaluateCopiesPoint() throws IOException {
+        //setup
+        StatisticalReferenceDataset dataset
+                = StatisticalReferenceDatasetFactory.createKirby2();
+        LeastSquaresProblem lsp = builder(dataset).build();
+        RealVector point = new ArrayRealVector(lsp.getParameterSize());
+
+        //action
+        Evaluation evaluation = lsp.evaluate(point);
+
+        //verify
+        Assert.assertNotSame(point, evaluation.getPoint());
+        point.setEntry(0, 1);
+        Assert.assertEquals(evaluation.getPoint().getEntry(0), 0, 0);
+    }
+
 }
