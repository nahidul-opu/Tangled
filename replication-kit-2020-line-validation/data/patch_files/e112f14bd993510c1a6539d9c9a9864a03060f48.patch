From e112f14bd993510c1a6539d9c9a9864a03060f48 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 3 Jan 2015 10:28:38 +0000
Subject: [PATCH] VALIDATOR-309 - UrlValidator does not validate uppercase URL
 schemes

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1649183 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  2 ++
 src/changes/changes.xml                       |  3 +++
 .../validator/routines/UrlValidator.java      | 27 +++++++++++--------
 .../validator/routines/UrlValidatorTest.java  | 20 +++++++++++++-
 4 files changed, 40 insertions(+), 12 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index b1f1363db..6f754c4b2 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -67,6 +67,8 @@ BUGS FROM PREVIOUS RELEASE
  * [VALIDATOR-347] - toLowerCase() method is Locale-sensitive and should not be
                      used
  * [VALIDATOR-348] - Update TLD list to latest version (Version 2014123000)
+ * [VALIDATOR-309] - UrlValidator does not validate uppercase URL schemes
+                     Thanks to Rashid Rashidov
 
 IMPROVEMENTS OVER PREVIOUS RELEASE
 ===================================
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 662051bfb..1a849ee04 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
   <release version="1.4.1" date="tba" description="1.4 Maintenance release">
+    <action issue="VALIDATOR-309" dev="sebb" type="fix" due-to="Rashid Rashidov">
+      UrlValidator does not validate uppercase URL schemes
+    </action>
     <action issue="VALIDATOR-343" dev="sebb" type="fix" due-to="Sam Cooley">
       Doc URL update for broken link
     </action>
diff --git a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
index 681be5f27..db18db492 100644
--- a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
@@ -17,9 +17,9 @@
 package org.apache.commons.validator.routines;
 
 import java.io.Serializable;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -101,6 +101,7 @@ public class UrlValidator implements Serializable {
     public static final long ALLOW_LOCAL_URLS = 1 << 3;
 
     // Drop numeric, and  "+-." for now
+    // TODO does not allow for optional userinfo
     private static final String AUTHORITY_CHARS_REGEX = "\\p{Alnum}\\-\\.";
 
     /**
@@ -128,7 +129,7 @@ public class UrlValidator implements Serializable {
     private static final int PARSE_URL_FRAGMENT = 9;
 
     /**
-     * Protocol (ie. http:, ftp:,https:).
+     * Protocol scheme (e.g. http, ftp, https).
      */
     private static final String SCHEME_REGEX = "^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*";
     private static final Pattern SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX);
@@ -167,7 +168,7 @@ public class UrlValidator implements Serializable {
     /**
      * The set of schemes that are allowed to be in a URL.
      */
-    private final Set allowedSchemes;
+    private final Set allowedSchemes; // Must be lower-case
 
     /**
      * Regular expressions used to manually validate authorities if IANA
@@ -178,7 +179,7 @@ public class UrlValidator implements Serializable {
     /**
      * If no schemes are provided, default to this set.
      */
-    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"};
+    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"}; // Must be lower-case
 
     /**
      * Singleton instance of this class with default schemes and options.
@@ -224,7 +225,7 @@ public UrlValidator(long options) {
 
     /**
      * Behavior of validation is modified by passing in options:
-     * @param schemes The set of valid schemes.
+     * @param schemes The set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param options The options should be set using the public constants declared in
      * this class.  To set multiple options you simply add them together.  For example,
      * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.
@@ -247,7 +248,7 @@ public UrlValidator(RegexValidator authorityValidator, long options) {
 
     /**
      * Customizable constructor. Validation behavior is modifed by passing in options.
-     * @param schemes the set of valid schemes
+     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param authorityValidator Regular expression validator used to validate the authority part
      * @param options Validation options. Set using the public constants of this class.
      * To set multiple options, simply add them together:
@@ -263,8 +264,10 @@ public UrlValidator(String[] schemes, RegexValidator authorityValidator, long op
             if (schemes == null) {
                 schemes = DEFAULT_SCHEMES;
             }
-            allowedSchemes = new HashSet();
-            allowedSchemes.addAll(Arrays.asList(schemes));
+            allowedSchemes = new HashSet(schemes.length);
+            for(int i=0; i < schemes.length; i++) {
+                allowedSchemes.add(schemes[i].toLowerCase(Locale.ENGLISH));
+            }
         }
 
         this.authorityValidator = authorityValidator;
@@ -327,8 +330,9 @@ public boolean isValid(String value) {
 
     /**
      * Validate scheme. If schemes[] was initialized to a non null,
-     * then only those scheme's are allowed.  Note this is slightly different
-     * than for the constructor.
+     * then only those schemes are allowed.
+     * Otherwise the default schemes are "http", "https", "ftp".
+     * Matching is case-blind.
      * @param scheme The scheme to validate.  A <code>null</code> value is considered
      * invalid.
      * @return true if valid.
@@ -338,11 +342,12 @@ protected boolean isValidScheme(String scheme) {
             return false;
         }
 
+        // TODO could be removed if external schemes were checked in the ctor before being stored
         if (!SCHEME_PATTERN.matcher(scheme).matches()) {
             return false;
         }
 
-        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
+        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
             return false;
         }
 
diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
index 8075bf0ff..6d6791ab8 100644
--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
@@ -55,7 +55,6 @@ public void testIsValidScheme() {
       if (printStatus) {
          System.out.print("\n testIsValidScheme() ");
       }
-      String[] schemes = {"http", "gopher"};
       //UrlValidator urlVal = new UrlValidator(schemes,false,false,false);
       UrlValidator urlVal = new UrlValidator(schemes, 0);
       for (int sIndex = 0; sIndex < testScheme.length; sIndex++) {
@@ -261,6 +260,17 @@ public void testValidator276() {
     }
 
     
+    public void testValidator309() {
+        UrlValidator urlValidator = new UrlValidator();
+        assertTrue(urlValidator.isValid("http://sample.ondemand.com/"));
+        assertTrue(urlValidator.isValid("hTtP://sample.ondemand.CoM/"));
+        assertTrue(urlValidator.isValid("httpS://SAMPLE.ONEMAND.COM/"));
+        urlValidator = new UrlValidator(new String[] {"HTTP","HTTPS"});
+        assertTrue(urlValidator.isValid("http://sample.ondemand.com/"));
+        assertTrue(urlValidator.isValid("hTtP://sample.ondemand.CoM/"));
+        assertTrue(urlValidator.isValid("httpS://SAMPLE.ONEMAND.COM/"));
+    }
+
    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {
       boolean carry = true;  //add 1 to lowest order part.
       boolean maxIndex = true;
@@ -399,9 +409,17 @@ public static void main(String[] argv) {
    int[] testPartsIndex = {0, 0, 0, 0, 0};
 
    //---------------- Test data for individual url parts ----------------
+   private final String[] schemes = {"http", "gopher", "g0-To+.",
+                                      "not_valid" // TODO this will need to be dropped if the ctor validates schemes
+                                    };
+
    ResultPair[] testScheme = {new ResultPair("http", true),
                             new ResultPair("ftp", false),
                             new ResultPair("httpd", false),
+                            new ResultPair("gopher", true),
+                            new ResultPair("g0-to+.", true),
+                            new ResultPair("not_valid", false), // underscore not allowed
+                            new ResultPair("HtTp", true),
                             new ResultPair("telnet", false)};
 
 
