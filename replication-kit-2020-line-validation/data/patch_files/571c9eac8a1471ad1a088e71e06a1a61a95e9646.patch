From 571c9eac8a1471ad1a088e71e06a1a61a95e9646 Mon Sep 17 00:00:00 2001
From: Rory Winston <rwinston@apache.org>
Date: Wed, 5 Mar 2008 09:25:48 +0000
Subject: [PATCH] Add missing patch (NET-73)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@633798 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/net/telnet/TelnetInputStream.java | 21 ++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
index 431da22d6..2efe1a124 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
@@ -106,14 +106,19 @@ void _start()
     // TelnetOutputStream writing through the telnet client at same time
     // as a processDo/Will/etc. command invoked from TelnetInputStream
     // tries to write.
-    private int __read() throws IOException
+    private int __read(boolean mayBlock) throws IOException
     {
         int ch;
 
 _loop:
         while (true)
         {
-            // Exit only when we reach end of stream.
+ 
+            // If there is no more data AND we were told not to block, just return -2. (More efficient than exception.)
+            if(!mayBlock && super.available() == 0)
+                return -2;
+        	
+            // Otherwise, exit only when we reach end of stream.
             if ((ch = super.read()) < 0)
                 return -1;
 
@@ -360,12 +365,13 @@ public int read() throws IOException
                         //__alreadyread = false;
                         __readIsWaiting = true;
                         int ch;
-
+                        boolean mayBlock = true;	// block on the first read only
+                        
                         do
                         {
                             try
                             {
-                                if ((ch = __read()) < 0)
+                                if ((ch = __read(mayBlock)) < 0)
                                     if(ch != -2)
                                         return (ch);
                             }
@@ -399,6 +405,11 @@ public int read() throws IOException
                                 if (__isClosed)
                                     return (-1);
                             }
+                            
+                            // Reads should not block on subsequent iterations. Potentially, this could happen if the 
+                            // remaining buffered socket data consists entirely of Telnet command sequence and no "user" data.
+                            mayBlock = false;
+                            
                         }
                         // Continue reading as long as there is data available and the queue is not full.
                         while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
@@ -544,7 +555,7 @@ public void run()
             {
                 try
                 {
-                    if ((ch = __read()) < 0)
+                    if ((ch = __read(true)) < 0)
                         break;
                 }
                 catch (InterruptedIOException e)
