From 407c3367d621c7215064f82d5aea331e7d753606 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Fri, 7 Feb 2014 10:31:22 +0000
Subject: [PATCH] OPENNLP-600 Reverted changes.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1565611 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tools/chunker/ChunkSampleTest.java        |  5 +-
 .../ChunkerDetailedFMeasureListenerTest.java  |  5 +-
 .../tools/chunker/ChunkerEvaluatorTest.java   |  9 ++--
 .../opennlp/tools/chunker/ChunkerMETest.java  |  3 +-
 .../formats/ad/ADChunkSampleStreamTest.java   |  3 +-
 .../formats/ad/ADNameSampleStreamTest.java    |  3 +-
 .../formats/ad/ADPOSSampleStreamTest.java     | 13 +++--
 .../formats/ad/ADParagraphStreamTest.java     |  3 +-
 .../ad/ADSentenceSampleStreamTest.java        |  3 +-
 .../DictionaryNameFinderEvaluatorTest.java    |  3 +-
 .../namefind/NameSampleDataStreamTest.java    |  7 ++-
 .../TokenNameFinderCrossValidatorTest.java    | 47 +++++++++----------
 .../tools/parser/ParseSampleStreamTest.java   |  3 +-
 .../SentenceDetectorFactoryTest.java          |  3 +-
 .../sentdetect/SentenceDetectorMETest.java    |  3 +-
 .../tools/tokenize/TokenizerFactoryTest.java  |  3 +-
 .../tools/tokenize/TokenizerTestUtil.java     |  3 +-
 17 files changed, 50 insertions(+), 69 deletions(-)

diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
index 789754538..85f043160 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
@@ -25,7 +25,6 @@
 import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.util.Arrays;
-import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -188,8 +187,8 @@ public void testRegions() throws IOException {
 	String encoding = "UTF-8";
 
 	DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-			new PlainTextByLineStream(new MockInputStreamFactory(in),
-					encoding), false);
+			new PlainTextByLineStream(new InputStreamReader(in,
+					encoding)), false);
 
 	ChunkSample cs1 = predictedSample.read();
 	String[] g1 = Span.spansToStrings(cs1.getPhrasesAsSpanList(), cs1.getSentence());
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
index 2d44babce..21b4b4d3e 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
@@ -26,7 +26,6 @@
 import java.util.Locale;
 
 import opennlp.tools.cmdline.chunker.ChunkerDetailedFMeasureListener;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -48,10 +47,10 @@ public void testEvaluator() throws IOException {
     try {
       DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
           new PlainTextByLineStream(
-              new MockInputStreamFactory(inPredicted), encoding), true);
+              new InputStreamReader(inPredicted, encoding)), true);
 
       DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-          new PlainTextByLineStream(new MockInputStreamFactory(inExpected),"UTF-8"), false);
+          new PlainTextByLineStream(new InputStreamReader(inExpected)), false);
 
       Chunker dummyChunker = new DummyChunker(predictedSample);
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
index 3b2d86b1d..0c2f72bcf 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
@@ -27,7 +27,6 @@
 import java.io.OutputStream;
 
 import opennlp.tools.cmdline.chunker.ChunkEvaluationErrorListener;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.eval.FMeasure;
 
@@ -59,10 +58,10 @@ public void testEvaluator() throws IOException {
 		String encoding = "UTF-8";
 
 		DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-				new PlainTextByLineStream(new MockInputStreamFactory(inPredicted), encoding), true);
+				new PlainTextByLineStream(new InputStreamReader(inPredicted, encoding)), true);
 		
 		DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-				new PlainTextByLineStream(new MockInputStreamFactory(inExpected),"UTF-8"), false);
+				new PlainTextByLineStream(new InputStreamReader(inExpected)), false);
 		
 		Chunker dummyChunker = new DummyChunker(predictedSample);
 		
@@ -91,11 +90,11 @@ public void testEvaluatorNoError() throws IOException {
     String encoding = "UTF-8";
 
     DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-        new PlainTextByLineStream(new  MockInputStreamFactory(inPredicted), encoding),
+        new PlainTextByLineStream(new InputStreamReader(inPredicted, encoding)),
         true);
 
     DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(inExpected), encoding),
+        new PlainTextByLineStream(new InputStreamReader(inExpected, encoding)),
         true);
 
     Chunker dummyChunker = new DummyChunker(predictedSample);
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
index 6c5e7f5d3..92a1ae549 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
@@ -26,7 +26,6 @@
 import java.util.List;
 
 import opennlp.tools.namefind.NameFinderME;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Sequence;
@@ -76,7 +75,7 @@ public void startup() throws IOException {
     String encoding = "UTF-8";
 
     ObjectStream<ChunkSample> sampleStream = new ChunkSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
+        new PlainTextByLineStream(new InputStreamReader(in, encoding)));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
index 055abc4f8..bac2e2e5b 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
@@ -26,7 +26,6 @@
 
 import opennlp.tools.chunker.ChunkSample;
 import opennlp.tools.formats.ad.ADChunkSampleStream;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Before;
@@ -72,7 +71,7 @@ public void setup() throws IOException {
 	.getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADChunkSampleStream stream = new ADChunkSampleStream(
-    	new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
+    	new PlainTextByLineStream(in, "UTF-8"));
 
     ChunkSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
index 41dfa347b..4fdc77ef2 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
@@ -26,7 +26,6 @@
 
 import opennlp.tools.formats.ad.ADNameSampleStream;
 import opennlp.tools.namefind.NameSample;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -118,7 +117,7 @@ public void setup() throws IOException {
         .getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADNameSampleStream stream = new ADNameSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"), true);
+        new PlainTextByLineStream(in, "UTF-8"), true);
 
     NameSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
index df9ce01a1..f5b7e379d 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
@@ -22,7 +22,6 @@
 import java.io.IOException;
 
 import opennlp.tools.postag.POSSample;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -34,8 +33,8 @@ public void testSimple() throws IOException {
     // add one sentence with expandME = includeFeats = false
     ADPOSSampleStream stream = new ADPOSSampleStream(
         new PlainTextByLineStream(
-           new MockInputStreamFactory( ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
+            ADParagraphStreamTest.class
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
             "UTF-8"), false, false);
 
     POSSample sample = stream.read();
@@ -59,9 +58,9 @@ public void testSimple() throws IOException {
   public void testExpandME() throws IOException {
     // add one sentence with expandME = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(
+        new PlainTextByLineStream(
             ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
             "UTF-8"), true, false);
 
     POSSample sample = stream.read();
@@ -88,9 +87,9 @@ public void testExpandME() throws IOException {
   public void testIncludeFeats() throws IOException {
     // add one sentence with includeFeats = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(
+        new PlainTextByLineStream(
             ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
             "UTF-8"), false, true);
 
     POSSample sample = stream.read();
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
index 1ca8a35e6..df2b9f20c 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
@@ -23,7 +23,6 @@
 import java.io.InputStream;
 
 import opennlp.tools.formats.ad.ADSentenceStream;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -68,6 +67,6 @@ public void testLeadingWithContraction() throws IOException {
   private static ADSentenceStream openData() throws IOException {
     InputStream in = ADParagraphStreamTest.class.getResourceAsStream("/opennlp/tools/formats/ad.sample");
     
-    return new ADSentenceStream(new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
+    return new ADSentenceStream(new PlainTextByLineStream(in, "UTF-8"));
   }
 }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
index 0e729541d..235f7bbea 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
@@ -26,7 +26,6 @@
 import java.util.List;
 
 import opennlp.tools.sentdetect.SentenceSample;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -57,7 +56,7 @@ public void setup() throws IOException {
         .getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADSentenceSampleStream stream = new ADSentenceSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"), true);
+        new PlainTextByLineStream(in, "UTF-8"), true);
 
     SentenceSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
index f8fff4352..b8d35250d 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
@@ -28,7 +28,6 @@
 
 import opennlp.tools.cmdline.namefind.NameEvaluationErrorListener;
 import opennlp.tools.dictionary.Dictionary;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -73,7 +72,7 @@ private static ObjectStream<NameSample> createSample() throws IOException,
             .toURI()));
 
     return new NameSampleDataStream(new PlainTextByLineStream(
-        new MockInputStreamFactory(sampleDataIn), "ISO-8859-1"));
+        sampleDataIn.getChannel(), "ISO-8859-1"));
   }
 
   /**
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
index ae1c24361..0bcdde327 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
@@ -32,7 +32,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.ObjectStreamUtils;
@@ -81,7 +80,7 @@ public void testWithoutNameTypes() throws Exception {
     String encoding = "ISO-8859-1";
 
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
+        new PlainTextByLineStream(new InputStreamReader(in, encoding)));
 
     NameSample ns = ds.read();
 
@@ -178,7 +177,7 @@ public void testWithNameTypes() throws Exception {
         "opennlp/tools/namefind/voa1.train");
 
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
+        new PlainTextByLineStream(new InputStreamReader(in)));
 
     Map<String, List<String>> names = new HashMap<String, List<String>>();
     Map<String, List<Span>> spans = new HashMap<String, List<Span>>();
@@ -342,7 +341,7 @@ public void testHtmlNameSampleParsing() throws IOException {
         "opennlp/tools/namefind/html1.train");
     
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
+        new PlainTextByLineStream(new InputStreamReader(in, "UTF-8")));
 
     NameSample ns = ds.read();
     
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
index 7ebd8646c..166fc8a73 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package opennlp.tools.namefind;
 
 import static org.junit.Assert.*;
@@ -23,15 +24,13 @@
 import java.io.FileInputStream;
 import java.util.Collections;
 import java.util.Map;
-import opennlp.tools.cmdline.MarkableFileInputStream;
-import opennlp.tools.cmdline.MarkableFileInputStreamFactory;
 
 import opennlp.tools.cmdline.namefind.NameEvaluationErrorListener;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
 import opennlp.tools.util.model.ModelType;
+import opennlp.tools.util.model.ModelUtil;
 
 import org.junit.Test;
 
@@ -39,65 +38,63 @@ public class TokenNameFinderCrossValidatorTest {
 
   private final String TYPE = null;
 
- // @Test
+  @Test
   /**
    * Test that reproduces jira OPENNLP-463
    */
   public void testWithNullResources() throws Exception {
 
     FileInputStream sampleDataIn = new FileInputStream(new File(getClass()
-            .getClassLoader()
-            .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
+        .getClassLoader()
+        .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
 
-//    ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-//            new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn), "ISO-8859-1"));
-    MarkableFileInputStreamFactory fac = new MarkableFileInputStreamFactory(new File(getClass().getClassLoader().getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-            new PlainTextByLineStream(fac, "ISO-8859-1"));
+        new PlainTextByLineStream(sampleDataIn.getChannel(), "ISO-8859-1"));
+
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(1));
-
+    
     mlParams.put(TrainingParameters.ALGORITHM_PARAM,
-            ModelType.MAXENT.toString());
+        ModelType.MAXENT.toString());
 
     TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en",
-            TYPE, mlParams, null, null);
+        TYPE, mlParams, null, null);
 
     cv.evaluate(sampleStream, 2);
 
     assertNotNull(cv.getFMeasure());
   }
-
- // @Test
+  
+  @Test
   /**
    * Test that tries to reproduce jira OPENNLP-466
    */
   public void testWithNameEvaluationErrorListener() throws Exception {
 
     FileInputStream sampleDataIn = new FileInputStream(new File(getClass()
-            .getClassLoader()
-            .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
-    MarkableFileInputStreamFactory fac = new MarkableFileInputStreamFactory(new File(getClass().getClassLoader().getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
+        .getClassLoader()
+        .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
+
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-            new PlainTextByLineStream(fac, "ISO-8859-1"));
+        new PlainTextByLineStream(sampleDataIn.getChannel(), "ISO-8859-1"));
 
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(1));
-
+    
     mlParams.put(TrainingParameters.ALGORITHM_PARAM,
-            ModelType.MAXENT.toString());
-
+        ModelType.MAXENT.toString());
+    
     ByteArrayOutputStream out = new ByteArrayOutputStream();
-    NameEvaluationErrorListener listener = new NameEvaluationErrorListener(out);
+    NameEvaluationErrorListener listener = new NameEvaluationErrorListener(out); 
 
     Map<String, Object> resources = Collections.emptyMap();
     TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en",
-            TYPE, mlParams, null, resources, listener);
+        TYPE, mlParams, null, resources, listener);
 
     cv.evaluate(sampleStream, 2);
-
+    
     assertTrue(out.size() > 0);
     assertNotNull(cv.getFMeasure());
   }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
index 41dbe58e2..cd60927e8 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
@@ -23,7 +23,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
@@ -37,7 +36,7 @@ static ObjectStream<Parse> createParseSampleStream() throws IOException {
     InputStream in = ParseSampleStreamTest.class.getResourceAsStream(
     "/opennlp/tools/parser/test.parse");
     
-    return new ParseSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
+    return new ParseSampleStream(new PlainTextByLineStream(new InputStreamReader(in, "UTF-8")));
   }
   
   @Test
diff --git a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
index 3ffda3c67..671b788eb 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
@@ -33,7 +33,6 @@
 import opennlp.tools.sentdetect.DummySentenceDetectorFactory.DummyEOSScanner;
 import opennlp.tools.sentdetect.DummySentenceDetectorFactory.DummySDContextGenerator;
 import opennlp.tools.sentdetect.lang.Factory;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
@@ -51,7 +50,7 @@ private static ObjectStream<SentenceSample> createSampleStream()
         .getResourceAsStream("opennlp/tools/sentdetect/Sentences.txt");
 
     return new SentenceSampleStream(new PlainTextByLineStream(
-        new MockInputStreamFactory(in),"UTF-8"));
+        new InputStreamReader(in)));
   }
 
   private static SentenceModel train(SentenceDetectorFactory factory)
diff --git a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
index fe05acd9f..f248f5bef 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
@@ -23,7 +23,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -48,7 +47,7 @@ public void testSentenceDetector() throws IOException {
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(0));
     
     SentenceModel sentdetectModel = SentenceDetectorME.train(
-        "en", new SentenceSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(in),"UTF-8")), true, null, mlParams);
+        "en", new SentenceSampleStream(new PlainTextByLineStream(new InputStreamReader(in))), true, null, mlParams);
     
     assertEquals("en", sentdetectModel.getLanguage());
     
diff --git a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
index 3939ef0af..33f2e5561 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
@@ -33,7 +33,6 @@
 import opennlp.tools.tokenize.DummyTokenizerFactory.DummyContextGenerator;
 import opennlp.tools.tokenize.DummyTokenizerFactory.DummyDictionary;
 import opennlp.tools.tokenize.lang.Factory;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
@@ -51,7 +50,7 @@ private static ObjectStream<TokenSample> createSampleStream()
         .getResourceAsStream("opennlp/tools/tokenize/token.train");
 
     return new TokenSampleStream(new PlainTextByLineStream(
-        new MockInputStreamFactory(in),"UTF-8"));
+        new InputStreamReader(in)));
   }
 
   private static TokenizerModel train(TokenizerFactory factory)
diff --git a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
index a4afb5102..c090ee5fd 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
@@ -25,7 +25,6 @@
 import java.util.List;
 
 import opennlp.tools.util.CollectionObjectStream;
-import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -68,7 +67,7 @@ static TokenizerModel createMaxentTokenModel() throws IOException {
         "/opennlp/tools/tokenize/token.train");
     
     ObjectStream<TokenSample> samples = new TokenSampleStream(
-        new PlainTextByLineStream(new MockInputStreamFactory(trainDataIn), "UTF-8"));
+        new PlainTextByLineStream(new InputStreamReader(trainDataIn, "UTF-8")));
     
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(100));
