From 6512f64a02c7d7c6b7c247a0f538e135132c9aae Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Tue, 8 Apr 2008 08:16:28 +0000
Subject: [PATCH] IO-160 FileSystemUtils.freeSpace fails on solaris - thanks to
 Mike Bristow for the patch

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@645787 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/io/FileSystemUtils.java    | 24 ++++++++++++-------
 .../commons/io/FileSystemUtilsTestCase.java   |  5 ++++
 2 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index d2c4653cf39..ddab67d523b 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -64,6 +64,10 @@ public class FileSystemUtils {
 
     /** The operating system flag. */
     private static final int OS;
+
+    /** The path to df */
+    private static String dfPath = "df";
+
     static {
         int os = OTHER;
         try {
@@ -76,9 +80,6 @@ public class FileSystemUtils {
             if (osName.indexOf("windows") != -1) {
                 os = WINDOWS;
             } else if (osName.indexOf("linux") != -1 ||
-                osName.indexOf("sun os") != -1 ||
-                osName.indexOf("sunos") != -1 ||
-                osName.indexOf("solaris") != -1 ||
                 osName.indexOf("mpe/ix") != -1 ||
                 osName.indexOf("freebsd") != -1 ||
                 osName.indexOf("irix") != -1 ||
@@ -86,6 +87,11 @@ public class FileSystemUtils {
                 osName.indexOf("unix") != -1 ||
                 osName.indexOf("mac os x") != -1) {
                 os = UNIX;
+            } else if (osName.indexOf("sun os") != -1 ||
+                osName.indexOf("sunos") != -1 ||
+                osName.indexOf("solaris") != -1) {
+                os = POSIX_UNIX;
+                dfPath = "/usr/xpg4/bin/df";
             } else if (osName.indexOf("hp-ux") != -1 ||
                 osName.indexOf("aix") != -1) {
                 os = POSIX_UNIX;
@@ -116,7 +122,7 @@ public FileSystemUtils() {
      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.
      * <p>
      * Note that some OS's are NOT currently supported, including OS/390,
-     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)
+     * OpenVMS. 
      * <pre>
      * FileSystemUtils.freeSpace("C:");       // Windows
      * FileSystemUtils.freeSpace("/volume");  // *nix
@@ -317,14 +323,14 @@ long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
             flags += "P";
         }
         String[] cmdAttribs = 
-            (flags.length() > 1 ? new String[] {"df", flags, path} : new String[] {"df", path});
+            (flags.length() > 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});
         
         // perform the command, asking for up to 3 lines (header, interesting, overflow)
         List<String> lines = performCommand(cmdAttribs, 3);
         if (lines.size() < 2) {
             // unknown problem, throw exception
             throw new IOException(
-                    "Command line 'df' did not return info as expected " +
+                    "Command line '" + dfPath + "' did not return info as expected " +
                     "for path '" + path + "'- response was " + lines);
         }
         String line2 = lines.get(1); // the line we're interested in
@@ -338,7 +344,7 @@ long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
                 tok = new StringTokenizer(line3, " ");
             } else {
                 throw new IOException(
-                        "Command line 'df' did not return data as expected " +
+                        "Command line '" + dfPath + "' did not return data as expected " +
                         "for path '" + path + "'- check path is valid");
             }
         } else {
@@ -364,14 +370,14 @@ long parseBytes(String freeSpace, String path) throws IOException {
             long bytes = Long.parseLong(freeSpace);
             if (bytes < 0) {
                 throw new IOException(
-                        "Command line 'df' did not find free space in response " +
+                        "Command line '" + dfPath + "' did not find free space in response " +
                         "for path '" + path + "'- check path is valid");
             }
             return bytes;
             
         } catch (NumberFormatException ex) {
             throw new IOException(
-                    "Command line 'df' did not return numeric data as expected " +
+                    "Command line '" + dfPath + "' did not return numeric data as expected " +
                     "for path '" + path + "'- check path is valid");
         }
     }
diff --git a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
index fe729f38b46..840bfbe81d3 100644
--- a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
+++ b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
@@ -68,8 +68,13 @@ public void testGetFreeSpace_String() throws Exception {
             // have to figure out unix block size
             String[] cmd = null;
             String osName = System.getProperty("os.name");
+            osName = osName.toLowerCase();
+
             if (osName.indexOf("hp-ux") >= 0 || osName.indexOf("aix") >= 0) {
                 cmd = new String[] {"df", "-P", "/"};
+            } else if (osName.indexOf("sunos") >= 0 || osName.indexOf("sun os") >= 0
+                       || osName.indexOf("solaris") >= 0) {
+                cmd = new String[] {"/usr/xpg4/bin/df", "-P", "/"};
             } else {
                 cmd = new String[] {"df", "/"};
             }
