From 12a69814b0195caa90628a8ffa70cb887fbcc00d Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Thu, 7 May 2015 16:33:19 +0200
Subject: [PATCH] Fixed equals/hashcode contract failure for Dfp.

JIRA: MATH-1118

Thanks to Cyrille Artho.
---
 src/changes/changes.xml                                |  3 +++
 src/main/java/org/apache/commons/math3/dfp/Dfp.java    |  2 +-
 .../java/org/apache/commons/math3/dfp/DfpTest.java     | 10 ++++++++++
 3 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4501eee60c..f8749e84ea 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -51,6 +51,9 @@ If the output is not quite correct, check for invisible trailing spaces!
   </properties>
   <body>
     <release version="3.6" date="XXXX-XX-XX" description="">
+      <action dev="luc" type="fix" issue="MATH-1218" >
+        Fixed equals/hashcode contract failure for Dfp.
+      </action>
       <action dev="luc" type="fix" issue="MATH-1223" >
        Fixed wrong splitting of huge number in extended accuracy algorithms.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index 19d79a819f..bc1545b4b6 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -922,7 +922,7 @@ public boolean equals(final Object other) {
      */
     @Override
     public int hashCode() {
-        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);
+        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);
     }
 
     /** Check if instance is not equal to x.
diff --git a/src/test/java/org/apache/commons/math3/dfp/DfpTest.java b/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
index 236dd7976f..49bee1a5c3 100644
--- a/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
+++ b/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
@@ -1650,4 +1650,14 @@ public void testSpecialConstructors() {
         Assert.assertTrue(field.newDfp("NaN").isNaN());
     }
 
+    @Test
+    public void testEqualsHashcodeContract() {
+        DfpField var1 = new DfpField(1);
+        Dfp var6 = var1.newDfp(-0.0d);
+        Dfp var5 = var1.newDfp(0L);
+
+        // Checks the contract:  equals-hashcode on var5 and var6
+        Assert.assertTrue(var5.equals(var6) ? var5.hashCode() == var6.hashCode() : true);
+    }
+
 }
