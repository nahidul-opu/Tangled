From f7a557a38ad44c819fb139203f99c188c0e92604 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Wed, 17 Apr 2013 18:12:48 +0000
Subject: [PATCH] [COLLECTIONS-444] Apply fix as suggested by John Vasileff.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1469016 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                             |  2 +-
 .../commons/collections4/list/SetUniqueList.java    | 13 ++++++-------
 .../collections4/list/SetUniqueListTest.java        |  1 -
 3 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 3d01a826b2..e69dda33e8 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -65,7 +65,7 @@
     <action issue="COLLECTIONS-396" dev="tn" type="add" due-to="Jeff Rodriguez">
       Added "LazyIteratorChain" iterator.
     </action>
-    <action issue="COLLECTIONS-444" dev="tn" type="fix" due-to="Thomas Vahrst">
+    <action issue="COLLECTIONS-444" dev="tn" type="fix" due-to="Thomas Vahrst, John Vasileff">
       SetUniqueList.set(int, E) now works correctly if the object to be inserted
       is already placed at the given position.
     </action>
diff --git a/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java b/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java
index f151a341f7..bd6e6c180a 100644
--- a/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java
+++ b/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java
@@ -214,7 +214,7 @@ public boolean addAll(final int index, final Collection<? extends E> coll) {
      * Sets the value at the specified index avoiding duplicates.
      * <p>
      * The object is set into the specified index. Afterwards, any previous
-     * duplicate is removed If the object is not already in the list then a
+     * duplicate is removed. If the object is not already in the list then a
      * normal set occurs. If it is present, then the old version is removed.
      * 
      * @param index
@@ -229,15 +229,14 @@ public E set(final int index, final E object) {
         final E removed = super.set(index, object);
 
         if (pos != -1 && pos != index) {
-            // the object is already in the uniq list
+            // the object is already in the unique list
             // (and it hasn't been swapped with itself)
             super.remove(pos); // remove the duplicate by index
-            set.remove(removed); // remove the item deleted by the set
-        } else if (pos == -1) {
-            set.add(object); // add the new item to the unique set
-            set.remove(removed); // remove the item deleted by the set
         }
-        
+
+        set.remove(removed); // remove the item deleted by the set
+        set.add(object); // add the new item to the unique set
+
         return removed; // return the item deleted by the set
     }
 
diff --git a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java
index 6f995d3da7..1ae473c719 100644
--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java
+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java
@@ -613,7 +613,6 @@ public void testSetCollections444() {
         assertTrue(lset.contains(obj2));
     }
 
-    @SuppressWarnings("serial")
     class SetUniqueList307 extends SetUniqueList<E> {
         /**
          * Generated serial version ID.
