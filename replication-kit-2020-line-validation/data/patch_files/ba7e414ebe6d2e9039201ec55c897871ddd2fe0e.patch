From ba7e414ebe6d2e9039201ec55c897871ddd2fe0e Mon Sep 17 00:00:00 2001
From: Ralph Goers <rgoers@apache.org>
Date: Tue, 2 Nov 2010 14:03:42 +0000
Subject: [PATCH] Fix VFS-315 and VFS-316. NullPointerExceptions in
 WebdavFileObject and adding preemptive authentication

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1030046 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs/provider/http/HttpClientFactory.java  |  7 +++++
 .../http/HttpFileSystemConfigBuilder.java     | 31 +++++++++++++++++--
 .../vfs/provider/webdav/WebdavFileObject.java | 10 +++++-
 .../provider/webdav/WebdavFileProvider.java   |  8 +++--
 src/changes/changes.xml                       |  6 ++++
 5 files changed, 56 insertions(+), 6 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
index 17598fa56a..adcbffd767 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
@@ -23,6 +23,7 @@
 import org.apache.commons.httpclient.HttpConnectionManager;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
+import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.httpclient.methods.HeadMethod;
 import org.apache.commons.vfs.FileSystemException;
 import org.apache.commons.vfs.FileSystemOptions;
@@ -109,6 +110,12 @@ public static HttpClient createConnection(HttpFileSystemConfigBuilder builder, S
 
                         client.getState().setProxyCredentials(null, proxyHost, proxyCreds);
                     }
+
+                    if (builder.isPreemptiveAuth(fileSystemOptions)) {
+	                    HttpClientParams httpClientParams = new HttpClientParams();
+	                    httpClientParams.setAuthenticationPreemptive(true);
+	                    client.setParams(httpClientParams);
+                    }
                 }
 
                 Cookie[] cookies = builder.getCookies(fileSystemOptions);
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
index f75d3b01cd..f9f3a91115 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
@@ -35,8 +35,10 @@ public class HttpFileSystemConfigBuilder extends FileSystemConfigBuilder
     private static final int DEFAULT_MAX_HOST_CONNECTIONS = 5;
 
     private static final int DEFAULT_MAX_CONNECTIONS = 50;
-
-    protected HttpFileSystemConfigBuilder(String prefix)
+    
+    private static final String OPTION_NAME__PREEMPTIVE_AUTHENTICATION = "preemptiveAuth";
+    
+	protected HttpFileSystemConfigBuilder(String prefix)
     {
         super(prefix);
     }
@@ -205,7 +207,30 @@ public int getMaxConnectionsPerHost(FileSystemOptions opts)
         return getInteger(opts, HttpConnectionManagerParams.MAX_HOST_CONNECTIONS, DEFAULT_MAX_HOST_CONNECTIONS);
     }
 
-    protected Class getConfigClass()
+    /**
+     * Determines if the FileSystemOptions indicate that preemptive 
+     * authentication is requested.
+     * @param opts The FileSystemOptions.
+     * @return true if preemptiveAuth is requested.
+     */
+    public boolean isPreemptiveAuth(FileSystemOptions opts) {
+		return getBoolean(opts, OPTION_NAME__PREEMPTIVE_AUTHENTICATION, Boolean.FALSE).booleanValue();
+	}
+
+    /**
+     * Sets the given value for preemptive HTTP authentication (using BASIC) on the
+     * given FileSystemOptions object.  Defaults to false if not set.  It may be 
+     * appropriate to set to true in cases when the resulting chattiness of the 
+     * conversation outweighs any architectural desire to use a stronger authentication
+     * scheme than basic/preemptive.
+     * @param opts The FileSystemOptions.
+     * @param preemptiveAuth the desired setting; true=enabled and false=disabled.
+     */
+	public void setPreemptiveAuth(FileSystemOptions opts, boolean preemptiveAuth) {
+		setParam(opts, OPTION_NAME__PREEMPTIVE_AUTHENTICATION, Boolean.valueOf(preemptiveAuth));
+	}
+
+	protected Class getConfigClass()
     {
         return HttpFileSystem.class;
     }
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileObject.java b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileObject.java
index 2899dacdcc..ce7ed810dc 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileObject.java
@@ -296,7 +296,15 @@ protected Map doGetAttributes() throws Exception
                 if (!attributes.containsKey(property.getName()))
                 {
                     property = getProperty(fileName, property.getName());
-                    attributes.put(property.getName().toString(), property.getValue());
+                    if (property != null)
+                    {
+                        Object name = property.getName();
+                        Object value = property.getValue();
+                        if (name != null && value != null)
+                        {
+                            attributes.put(name.toString(), value);
+                        }
+                    }
                 }
             }
             return attributes;
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
index 803c118063..4d511912e8 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
@@ -72,8 +72,12 @@ public WebdavFileProvider()
 
         setFileNameParser(WebdavFileNameParser.getInstance());
     }
-        /**
-     * Creates a {@link FileSystem}.
+    /**
+     * Creates a {@link FileSystem}.  If you're looking at this method and wondering how to 
+     * get a FileSystemOptions object bearing the proxy host and credentials configuration through 
+     * to this method so it's used for resolving a {@link FileObject} in the FileSystem, then be sure
+     * to use correct signature of the {@link FileSystemManager} resolveFile method.
+     * @see org.apache.commons.vfs.impl.DefaultFileSystemManager.resolveFile(FileObject, String, FileSystemOptions).
      */
     protected FileSystem doCreateFileSystem(final FileName name, final FileSystemOptions fileSystemOptions)
         throws FileSystemException
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b5d76f0c90..29ce22b7c9 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,12 @@
 
   <body>
     <release version="2.0" date="in SVN" description="">
+       <action dev="rgoers" type="fix" issue="VFS-315" due-to="David Hausladen">
+        Fix potential NullPointerException if the DavProperty is null or contains null values.
+      </action>
+       <action dev="rgoers" type="fix" issue="VFS-316" due-to="David Hausladen">
+        Add option for preemptive authentication for HTTP based protocols.
+      </action>
        <action dev="rgoers" type="fix" issue="VFS-322" due-to="Curtis Boyden">
         Allow tar files that contain files over 2GB in size.
       </action>
