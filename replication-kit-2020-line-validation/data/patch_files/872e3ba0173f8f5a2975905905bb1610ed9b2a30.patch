From 872e3ba0173f8f5a2975905905bb1610ed9b2a30 Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Tue, 2 Feb 2010 23:32:11 +0000
Subject: [PATCH] Port r755391 to 2.x branch - LANG-584 (LANG-369)
 ExceptionUtils uses mutable lock target

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/branches/LANG_2_X@905837 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/lang/exception/ExceptionUtils.java  | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/src/main/java/org/apache/commons/lang/exception/ExceptionUtils.java b/src/main/java/org/apache/commons/lang/exception/ExceptionUtils.java
index 7ae7d504394..4b2d209abaa 100644
--- a/src/main/java/org/apache/commons/lang/exception/ExceptionUtils.java
+++ b/src/main/java/org/apache/commons/lang/exception/ExceptionUtils.java
@@ -56,6 +56,9 @@ public class ExceptionUtils {
      */
     static final String WRAPPED_MARKER = " [wrapped] ";
 
+    // Lock object for CAUSE_METHOD_NAMES
+    private static final Object CAUSE_METHOD_NAMES_LOCK = new Object();
+    
     /**
      * <p>The names of methods commonly used to access a wrapped exception.</p>
      */
@@ -123,7 +126,7 @@ public static void addCauseMethodName(String methodName) {
         if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            
             List list = getCauseMethodNameList();
             if (list.add(methodName)) {
-                synchronized(CAUSE_METHOD_NAMES) {
+                synchronized(CAUSE_METHOD_NAMES_LOCK) {
                     CAUSE_METHOD_NAMES = toArray(list);
                 }
             }
@@ -142,7 +145,7 @@ public static void removeCauseMethodName(String methodName) {
         if (StringUtils.isNotEmpty(methodName)) {
             List list = getCauseMethodNameList();
             if (list.remove(methodName)) {
-                synchronized(CAUSE_METHOD_NAMES) {
+                synchronized(CAUSE_METHOD_NAMES_LOCK) {
                     CAUSE_METHOD_NAMES = toArray(list);
                 }
             }
@@ -222,7 +225,7 @@ private static String[] toArray(List list) {
      * @return {@link #CAUSE_METHOD_NAMES} as a List.
      */
     private static ArrayList getCauseMethodNameList() {
-        synchronized(CAUSE_METHOD_NAMES) {
+        synchronized(CAUSE_METHOD_NAMES_LOCK) {
             return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));
         }
     }
@@ -237,7 +240,7 @@ private static ArrayList getCauseMethodNameList() {
      * @since 2.1
      */
     public static boolean isCauseMethodName(String methodName) {
-        synchronized(CAUSE_METHOD_NAMES) {
+        synchronized(CAUSE_METHOD_NAMES_LOCK) {
             return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;
         }
     }
@@ -275,7 +278,7 @@ public static boolean isCauseMethodName(String methodName) {
      * @since 1.0
      */
     public static Throwable getCause(Throwable throwable) {
-        synchronized(CAUSE_METHOD_NAMES) {
+        synchronized(CAUSE_METHOD_NAMES_LOCK) {
             return getCause(throwable, CAUSE_METHOD_NAMES);
         }
     }
@@ -305,7 +308,7 @@ public static Throwable getCause(Throwable throwable, String[] methodNames) {
         Throwable cause = getCauseUsingWellKnownTypes(throwable);
         if (cause == null) {
             if (methodNames == null) {
-                synchronized(CAUSE_METHOD_NAMES) {
+                synchronized(CAUSE_METHOD_NAMES_LOCK) {
                     methodNames = CAUSE_METHOD_NAMES;
                 }
             }
@@ -468,7 +471,7 @@ public static boolean isNestedThrowable(Throwable throwable) {
         }
 
         Class cls = throwable.getClass();
-        synchronized(CAUSE_METHOD_NAMES) {
+        synchronized(CAUSE_METHOD_NAMES_LOCK) {
             for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {
                 try {
                     Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], null);
