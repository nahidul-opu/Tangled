From 5dd9e60cb226c571e13832023489e8bc366ce69c Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Wed, 11 Jun 2014 22:45:54 +0000
Subject: [PATCH] <action dev="ggregory" type="fix" issue="CODEC-187"
 due-to="Michael Tobias, Thomas Neidhart">Beider Morse Phonetic Matching
 producing incorrect tokens</action>

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1602044 13f79535-47bb-0310-9956-ffa450edef68
---
 NOTICE.txt                                    |  8 ++++++
 src/changes/changes.xml                       |  1 +
 .../codec/language/bm/BeiderMorseEncoder.java |  2 ++
 .../codec/language/bm/ash_approx_any.txt      |  2 +-
 .../codec/language/bm/ash_rules_any.txt       |  2 +-
 .../codec/language/bm/gen_approx_any.txt      |  8 +++---
 .../bm/PhoneticEngineRegressionTest.java      | 27 +++++++++++++------
 7 files changed, 36 insertions(+), 14 deletions(-)

diff --git a/NOTICE.txt b/NOTICE.txt
index c91239111c..1da9af50f6 100644
--- a/NOTICE.txt
+++ b/NOTICE.txt
@@ -7,3 +7,11 @@ The Apache Software Foundation (http://www.apache.org/).
 src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
 contains test data from http://aspell.net/test/orig/batch0.tab.
 Copyright (C) 2002 Kevin Atkinson (kevina@gnu.org)
+
+===============================================================================
+
+The content of package org.apache.commons.codec.language.bm has been translated
+from the original php source code available at http://stevemorse.org/phoneticinfo.htm
+with permission from the original authors.
+Original source copyright:
+Copyright (c) 2008 Alexander Beider & Stephen P. Morse.
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b0272221e6..8cda1b549b 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,7 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="1.10" date="DD Mmmm 2014" description="Feature and fix release."> 
+      <action dev="ggregory" type="fix" issue="CODEC-187" due-to="Michael Tobias, Thomas Neidhart">Beider Morse Phonetic Matching producing incorrect tokens</action>   
       <action dev="ggregory" type="fix" issue="CODEC-184" due-to="Cyrille Artho">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>   
       <action dev="ggregory" type="add" issue="CODEC-181" due-to="Ivan Martinez-Ortiz">Make possible to provide padding byte to BaseNCodec in constructor</action>   
       <action dev="ggregory" type="fix" issue="CODEC-180" due-to="Ville Skyttä">Fix Javadoc 1.8.0 errors</action>   
diff --git a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java
index 471d05d8e7..13f28aba62 100644
--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java
+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java
@@ -65,6 +65,8 @@
  * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by
  * splitting on pipe (<code>|</code>) and indexing under each of these alternatives.
  *
+ * @see <a href="http://stevemorse.org/phonetics/bmpm.htm">Beider-Morse Phonetic Matching</a>
+ * @see <a href="http://stevemorse.org/phoneticinfo.htm">Reference implementation</a>
  * @since 1.6
  * @version $Id$
  */
diff --git a/src/main/resources/org/apache/commons/codec/language/bm/ash_approx_any.txt b/src/main/resources/org/apache/commons/codec/language/bm/ash_approx_any.txt
index 3f4f4c98bb..4483a7d1a6 100644
--- a/src/main/resources/org/apache/commons/codec/language/bm/ash_approx_any.txt
+++ b/src/main/resources/org/apache/commons/codec/language/bm/ash_approx_any.txt
@@ -99,7 +99,7 @@
 "i"	""	"[aeou]"	"j"
 "y"	"[aáuiíoóeéê]"	""	"j"
 "y"	""	"[aeiíou]"	"j"
-"e"	""	"$"	"(e|E[$french])"
+"e"	""	"$"	"(e|E[french])"
 
 "ão"	""	""	"(au|an)" // Port
 "ãe"	""	""	"(aj|an)" // Port
diff --git a/src/main/resources/org/apache/commons/codec/language/bm/ash_rules_any.txt b/src/main/resources/org/apache/commons/codec/language/bm/ash_rules_any.txt
index 9960ada3b3..c55e18a7b6 100644
--- a/src/main/resources/org/apache/commons/codec/language/bm/ash_rules_any.txt
+++ b/src/main/resources/org/apache/commons/codec/language/bm/ash_rules_any.txt
@@ -84,7 +84,7 @@
 "cz" "" "" "tS" // Polish
     
 "cia" "" "[bcdgkpstwzż]" "(tSB[polish]|tsB)"
-"cia" "" "" "(tSa[$polish]|tsa)" 
+"cia" "" "" "(tSa[polish]|tsa)" 
 "cią" "" "[bp]" "(tSom[polish]|tsom)"
 "cią" "" "" "(tSon[polish]|tson)"
 "cię" "" "[bp]" "(tSem[polish]|tsem)"
diff --git a/src/main/resources/org/apache/commons/codec/language/bm/gen_approx_any.txt b/src/main/resources/org/apache/commons/codec/language/bm/gen_approx_any.txt
index 6627aacdb0..75bd1792d9 100644
--- a/src/main/resources/org/apache/commons/codec/language/bm/gen_approx_any.txt
+++ b/src/main/resources/org/apache/commons/codec/language/bm/gen_approx_any.txt
@@ -41,7 +41,7 @@
 "s" "" "$" "(s|[french])"
 "t" "[aeiouAEIOU]" "[^aeiouAEIOU]" "(t|[french])" // Petitjean
 "s" "[aeiouAEIOU]" "[^aeiouAEIOU]" "(s|[french])" // Groslot, Grosleau
-    //array("p" "[aeiouAEIOU]" "[^aeiouAEIOU]" "(p|[$french])" 
+    //array("p" "[aeiouAEIOU]" "[^aeiouAEIOU]" "(p|[french])" 
     
 "I" "[aeiouAEIBFOUQY]" "" "i"
 "I" "" "[^aeiouAEBFIOU]e" "(Q[german]|i|D[english])"  // "line"
@@ -86,7 +86,7 @@
 "E" "" "$" "i"
 "E" "[DaoiuAOIUQY]" "" "i"
 "E" "" "[aoAOQY]" "i"
-"E" "" "" "(i|Y[$german])"
+"E" "" "" "(i|Y[german])"
         
 "P" "" "" "(o|u)" 
     
@@ -94,14 +94,14 @@
 "O" "" "ts$" "o"
 "O" "" "$" "o"
 "O" "[oeiuQY]" "" "o"
-"O" "" "" "(o|Y[$german])"
+"O" "" "" "(o|Y[german])"
 "O" "" "" "o"
     
 "A" "" "[fklmnprst]$" "(a|o)"
 "A" "" "ts$" "(a|o)"
 "A" "" "$" "(a|o)"
 "A" "[oeiuQY]" "" "(a|o)"
-"A" "" "" "(a|o|Y[$german])"
+"A" "" "" "(a|o|Y[german])"
 "A" "" "" "(a|o)"
 
 "U" "" "$" "u"
diff --git a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java
index f26a67c0c8..9a5b7840bf 100644
--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java
+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java
@@ -40,7 +40,7 @@ public void testSolrGENERIC() {
         // concat is true, ruleType is EXACT
         args = new TreeMap<String, String>();
         args.put("nameType", "GENERIC");
-        assertEquals(encode(args, true, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, true, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
         args.put("ruleType", "EXACT");
         assertEquals(encode(args, true, "Angelo"), "anZelo|andZelo|angelo|anhelo|anjelo|anxelo");
         assertEquals(encode(args, true, "D'Angelo"), "(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)");
@@ -50,7 +50,7 @@ public void testSolrGENERIC() {
 
         // concat is false, ruleType is EXACT
         args = new TreeMap<String, String>();
-        assertEquals(encode(args, false, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, false, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
         args.put("ruleType", "EXACT");
         assertEquals(encode(args, false, "Angelo"), "anZelo|andZelo|angelo|anhelo|anjelo|anxelo");
         assertEquals(encode(args, false, "D'Angelo"), "(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)");
@@ -60,20 +60,20 @@ public void testSolrGENERIC() {
 
         // concat is true, ruleType is APPROX
         args = new TreeMap<String, String>();
-        assertEquals(encode(args, true, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, true, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
         args.put("ruleType", "APPROX");
-        assertEquals(encode(args, true, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
-        assertEquals(encode(args, true, "D'Angelo"), "(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)");
+        assertEquals(encode(args, true, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, true, "D'Angelo"), "(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)");
         args.put("languageSet", "italian,greek,spanish");
         assertEquals(encode(args, true, "Angelo"), "angilo|anxilo|anzilo|ongilo|onxilo|onzilo");
         assertEquals(encode(args, true, "1234"), "");
 
         // concat is false, ruleType is APPROX
         args = new TreeMap<String, String>();
-        assertEquals(encode(args, false, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, false, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
         args.put("ruleType", "APPROX");
-        assertEquals(encode(args, false, "Angelo"), "agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo");
-        assertEquals(encode(args, false, "D'Angelo"), "(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)");
+        assertEquals(encode(args, false, "Angelo"), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
+        assertEquals(encode(args, false, "D'Angelo"), "(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)");
         args.put("languageSet", "italian,greek,spanish");
         assertEquals(encode(args, false, "Angelo"), "angilo|anxilo|anzilo|ongilo|onxilo|onzilo");
         assertEquals(encode(args, false, "1234"), "");
@@ -177,6 +177,17 @@ public void testSolrSEPHARDIC() {
         assertEquals(encode(args, false, "1234"), "");
     }
 
+    @Test
+    public void testCompatibilityWithOriginalVersion() {
+        // see CODEC-187
+        // comparison: http://stevemorse.org/census/soundex.html
+
+        Map<String, String> args = new TreeMap<String, String>();
+        args.put("nameType", "GENERIC");
+        args.put("ruleType", "APPROX");
+        assertEquals(encode(args, true, "abram"), "Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom");
+    }
+
     /**
      * This code is similar in style to code found in Solr:
      * solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
