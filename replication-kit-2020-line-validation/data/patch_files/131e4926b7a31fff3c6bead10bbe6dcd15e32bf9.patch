From 131e4926b7a31fff3c6bead10bbe6dcd15e32bf9 Mon Sep 17 00:00:00 2001
From: Emanuel Freitas <ejsfreitas@gmail.com>
Date: Mon, 21 May 2018 08:43:53 -0600
Subject: [PATCH] [DBCP-484] Connection leak during XATransaction in high load.

---
 src/changes/changes.xml                             |  3 +++
 .../commons/dbcp2/managed/ManagedConnection.java    | 13 +++++++++++++
 2 files changed, 16 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d329d6712e..8ce59f58cf 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -61,6 +61,9 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="2.3.1" date="2018-MM-DD" description="This is a minor release, including bug fixes and enhancements.">
+      <action dev="ggregory" type="fix" issue="DBCP-484" due-to="Emanuel Freitas">
+        Connection leak during XATransaction in high load.
+      </action>
     </release>
     <release version="2.3.0" date="2018-05-12" description="This is a minor release, including bug fixes and enhancements.">
       <action dev="pschumacher" type="fix" issue="DBCP-476" due-to="Gary Evesson, Richard Cordova">
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
index a66a7a80f1..c50327ffbd 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
@@ -22,6 +22,8 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 /**
  * ManagedConnection is responsible for managing a database connection in a transactional environment
@@ -48,6 +50,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
     private final boolean accessToUnderlyingConnectionAllowed;
     private TransactionContext transactionContext;
     private boolean isSharedConnection;
+    private Lock lock;
 
     public ManagedConnection(final ObjectPool<C> pool,
             final TransactionRegistry transactionRegistry,
@@ -56,6 +59,7 @@ public ManagedConnection(final ObjectPool<C> pool,
         this.pool = pool;
         this.transactionRegistry = transactionRegistry;
         this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;
+        this.lock = new ReentrantLock();
         updateTransactionStatus();
     }
 
@@ -162,11 +166,18 @@ public void close() throws SQLException {
             try {
                 // Don't actually close the connection if in a transaction. The
                 // connection will be closed by the transactionComplete method.
+                //
+                // DBCP-484 we need to make sure setClosedInternal(true) being
+                // invoked if transactionContext is not null as this value will
+                // be modified by the transactionComplete method which could run
+                // in the different thread with the transaction calling back.
+                lock.lock();
                 if (transactionContext == null) {
                     super.close();
                 }
             } finally {
                 setClosedInternal(true);
+                lock.unlock();
             }
         }
     }
@@ -186,7 +197,9 @@ public void afterCompletion(final TransactionContext completedContext, final boo
     }
 
     protected void transactionComplete() {
+        lock.lock();
         transactionContext = null;
+        lock.unlock();
 
         // If we were using a shared connection, clear the reference now that
         // the transaction has completed
