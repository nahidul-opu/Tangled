From 0880a21c56cec1a2442b5123c3845bfc99e83a7f Mon Sep 17 00:00:00 2001
From: Gilles <erans@apache.org>
Date: Tue, 19 Apr 2016 00:27:32 +0200
Subject: [PATCH] MATH-1356

Handle special cases for which the computation would otherwise produce NaN.
Thanks to Thomas Lacroix for the report.
---
 .../distribution/SaddlePointExpansion.java    |  6 +++++
 .../HypergeometricDistributionTest.java       | 26 +++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java b/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
index 01b0f652ab..aea0e3c17b 100644
--- a/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
+++ b/src/main/java/org/apache/commons/math4/distribution/SaddlePointExpansion.java
@@ -159,6 +159,9 @@ static double getDeviancePart(double x, double mu) {
             }
             ret = s1;
         } else {
+            if (x == 0) {
+                return mu;
+            }
             ret = x * FastMath.log(x / mu) + mu - x;
         }
         return ret;
@@ -180,6 +183,9 @@ static double logBinomialProbability(int x, int n, double p, double q) {
             if (p < 0.1) {
                 ret = -getDeviancePart(n, n * q) - n * p;
             } else {
+                if (n == 0) {
+                    return 0;
+                }
                 ret = n * FastMath.log(q);
             }
         } else if (x == n) {
diff --git a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
index e12c5b42cf..7e7ce8cee6 100644
--- a/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
+++ b/src/test/java/org/apache/commons/math4/distribution/HypergeometricDistributionTest.java
@@ -311,6 +311,32 @@ public void testMath644() {
         Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0);
     }
 
+    @Test
+    public void testZeroTrial() {
+        final int n = 11; // population
+        final int m = 4;  // successes in population
+        final int s = 0;  // number of trials
+
+        final HypergeometricDistribution dist = new HypergeometricDistribution(n, m, 0);
+
+        for (int i = 1; i <= n; i++) {
+            final double p = dist.probability(i);
+            Assert.assertEquals("p=" + p, 0, p, 0d);
+        }
+    }
+
+    @Test
+    public void testMath1356() {
+        final int n = 11;  // population
+        final int m = 11;  // successes in population
+
+        for (int s = 0; s <= n; s++) {
+            final HypergeometricDistribution dist = new HypergeometricDistribution(n, m, s);
+            final double p = dist.probability(s);
+            Assert.assertEquals("p=" + p, 1, p, 0d);
+        }
+    }
+
     @Test
     public void testMath1021() {
         final int N = 43130568;
