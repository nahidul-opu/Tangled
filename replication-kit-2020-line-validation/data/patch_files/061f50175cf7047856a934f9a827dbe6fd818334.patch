From 061f50175cf7047856a934f9a827dbe6fd818334 Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Wed, 24 Mar 2010 22:11:51 +0000
Subject: [PATCH] Fixed an error in events handling in ODE solvers. In some
 rare cases, events occurring close to a step start were handled without
 truncating the step, making them appear as is they occurred close to the step
 end JIRA: MATH-358

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@927202 13f79535-47bb-0310-9956-ffa450edef68
---
 .../nonstiff/AdamsBashforthIntegrator.java    | 12 +++-
 .../ode/nonstiff/AdamsMoultonIntegrator.java  | 12 +++-
 .../EmbeddedRungeKuttaIntegrator.java         | 12 +++-
 .../ode/nonstiff/RungeKuttaIntegrator.java    | 11 +++-
 src/site/xdoc/changes.xml                     |  5 ++
 .../ClassicalRungeKuttaIntegratorTest.java    | 53 +++++++++++++++++
 .../DormandPrince853IntegratorTest.java       | 57 +++++++++++++++++++
 7 files changed, 154 insertions(+), 8 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
index 935bb8ba31..6ee9bd56cc 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
@@ -271,8 +271,16 @@ public double integrate(final FirstOrderDifferentialEquations equations,
                     if (manager.evaluateStep(interpolatorTmp)) {
                         final double dt = manager.getEventTime() - stepStart;
                         if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                            // rejecting the step would lead to a too small next step, we accept it
-                            loop = false;
+                            // we cannot simply truncate the step, reject the current computation
+                            // and let the loop compute another state with the truncated step.
+                            // it is so small (much probably exactly 0 due to limited accuracy)
+                            // that the code above would fail handling it.
+                            // So we set up an artificial 0 size step by copying states
+                            interpolator.storeTime(stepStart);
+                            System.arraycopy(y, 0, yTmp, 0, y0.length);
+                            hNew     = 0;
+                            stepSize = 0;
+                            loop     = false;
                         } else {
                             // reject the step to match exactly the next switch time
                             hNew = dt;
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
index 27ade7b075..e0e2f0d2c9 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
@@ -289,8 +289,16 @@ public double integrate(final FirstOrderDifferentialEquations equations,
                     if (manager.evaluateStep(interpolatorTmp)) {
                         final double dt = manager.getEventTime() - stepStart;
                         if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                            // rejecting the step would lead to a too small next step, we accept it
-                            loop = false;
+                            // we cannot simply truncate the step, reject the current computation
+                            // and let the loop compute another state with the truncated step.
+                            // it is so small (much probably exactly 0 due to limited accuracy)
+                            // that the code above would fail handling it.
+                            // So we set up an artificial 0 size step by copying states
+                            interpolator.storeTime(stepStart);
+                            System.arraycopy(y, 0, yTmp, 0, y0.length);
+                            hNew     = 0;
+                            stepSize = 0;
+                            loop     = false;
                         } else {
                             // reject the step to match exactly the next switch time
                             hNew = dt;
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 34b3dc1ca8..e03be9ed04 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -292,8 +292,16 @@ public double integrate(final FirstOrderDifferentialEquations equations,
           if (manager.evaluateStep(interpolator)) {
               final double dt = manager.getEventTime() - stepStart;
               if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // rejecting the step would lead to a too small next step, we accept it
-                  loop = false;
+                  // we cannot simply truncate the step, reject the current computation
+                  // and let the loop compute another state with the truncated step.
+                  // it is so small (much probably exactly 0 due to limited accuracy)
+                  // that the code above would fail handling it.
+                  // So we set up an artificial 0 size step by copying states
+                  interpolator.storeTime(stepStart);
+                  System.arraycopy(y, 0, yTmp, 0, y0.length);
+                  hNew     = 0;
+                  stepSize = 0;
+                  loop     = false;
               } else {
                   // reject the step to match exactly the next switch time
                   hNew = dt;
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
index 3227b98089..b61b0b1a4c 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -172,8 +172,15 @@ public double integrate(final FirstOrderDifferentialEquations equations,
         if (manager.evaluateStep(interpolator)) {
             final double dt = manager.getEventTime() - stepStart;
             if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                // rejecting the step would lead to a too small next step, we accept it
-                loop = false;
+                // we cannot simply truncate the step, reject the current computation
+                // and let the loop compute another state with the truncated step.
+                // it is so small (much probably exactly 0 due to limited accuracy)
+                // that the code above would fail handling it.
+                // So we set up an artificial 0 size step by copying states
+                interpolator.storeTime(stepStart);
+                System.arraycopy(y, 0, yTmp, 0, y0.length);
+                stepSize = 0;
+                loop     = false;
             } else {
                 // reject the step to match exactly the next switch time
                 stepSize = dt;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 9e086a708c..c7701c57af 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -90,6 +90,11 @@ The <action> type attribute can be add,update,fix,remove.
         used to solve Boundary Value Problems (BVP). There are no implementations (yet)
         of BVP solvers in the library.
       </action>
+      <action dev="luc" type="fix" issue="MATH-358" >
+        Fixed an error in events handling in ODE solvers. In some rare cases, events
+        occurring close to a step start were handled without truncating the step, making
+        them appear as is they occurred close to the step end
+      </action>
       <action dev="luc" type="fix" >
         Fixed a problem with getInterpolatedDerivatives returning zero derivatives when
         an ODE step handler is configured to not use interpolation. It now returns a
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
index 246d9b265f..dbfc006a85 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
@@ -41,6 +41,59 @@ public ClassicalRungeKuttaIntegratorTest(String name) {
     super(name);
   }
 
+  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
+      final double   t0     = 1878250320.0000029;
+      final double   tEvent = 1878250379.9999986;
+      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
+      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
+
+          public int getDimension() {
+              return k.length;
+          }
+
+          public void computeDerivatives(double t, double[] y, double[] yDot) {
+              for (int i = 0; i < y.length; ++i) {
+                  yDot[i] = k[i] * y[i];
+              }
+          }
+      };
+
+      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
+
+      double[] y0   = new double[k.length];
+      for (int i = 0; i < y0.length; ++i) {
+          y0[i] = i + 1;
+      }
+      double[] y    = new double[k.length];
+
+      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
+      Assert.assertEquals(tEvent, finalT, 5.0e-6);
+      for (int i = 0; i < y.length; ++i) {
+          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
+      }
+
+      integrator.addEventHandler(new EventHandler() {
+
+          public void resetState(double t, double[] y) {
+          }
+
+          public double g(double t, double[] y) {
+              return t - tEvent;
+          }
+
+          public int eventOccurred(double t, double[] y, boolean increasing) {
+              Assert.assertEquals(tEvent, t, 5.0e-6);
+              return CONTINUE;
+          }
+      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
+      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
+      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
+      for (int i = 0; i < y.length; ++i) {
+          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
+      }
+
+  }
+
   public void testSanityChecks() {
     try  {
       TestProblem1 pb = new TestProblem1();
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
index bb36cda31f..3ce842ac44 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
@@ -18,6 +18,7 @@
 package org.apache.commons.math.ode.nonstiff;
 
 import org.apache.commons.math.ode.DerivativeException;
+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
 import org.apache.commons.math.ode.IntegratorException;
 import org.apache.commons.math.ode.TestProblem1;
@@ -40,6 +41,62 @@ public DormandPrince853IntegratorTest(String name) {
     super(name);
   }
 
+  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
+      final double   t0     = 1878250320.0000029;
+      final double   tEvent = 1878250379.9999986;
+      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
+      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
+
+          public int getDimension() {
+              return k.length;
+          }
+
+          public void computeDerivatives(double t, double[] y, double[] yDot) {
+              for (int i = 0; i < y.length; ++i) {
+                  yDot[i] = k[i] * y[i];
+              }
+          }
+      };
+
+      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
+                                                                             1.0e-10, 1.0e-10);
+
+      double[] y0   = new double[k.length];
+      for (int i = 0; i < y0.length; ++i) {
+          y0[i] = i + 1;
+      }
+      double[] y    = new double[k.length];
+
+      integrator.setInitialStepSize(60.0);
+      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
+      Assert.assertEquals(tEvent, finalT, 5.0e-6);
+      for (int i = 0; i < y.length; ++i) {
+          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
+      }
+
+      integrator.setInitialStepSize(60.0);
+      integrator.addEventHandler(new EventHandler() {
+
+          public void resetState(double t, double[] y) {
+          }
+
+          public double g(double t, double[] y) {
+              return t - tEvent;
+          }
+
+          public int eventOccurred(double t, double[] y, boolean increasing) {
+              Assert.assertEquals(tEvent, t, 5.0e-6);
+              return CONTINUE;
+          }
+      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
+      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
+      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
+      for (int i = 0; i < y.length; ++i) {
+          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
+      }
+
+  }
+
   public void testDimensionCheck() {
     try  {
       TestProblem1 pb = new TestProblem1();
