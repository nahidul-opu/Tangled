From a39385a500fc0e8993d967a8025b931d3337ea04 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sun, 21 Apr 2013 21:32:41 +0000
Subject: [PATCH] IO-356 Fix infinite loop; check that buffer size is large
 enough to hold any character in the charset

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1470351 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/io/input/CharSequenceInputStream.java    | 12 +++++++++---
 .../io/input/CharSequenceInputStreamTest.java        | 11 ++++-------
 2 files changed, 13 insertions(+), 10 deletions(-)

diff --git a/src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java b/src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java
index ee2a14c05d2..ea7e68646be 100644
--- a/src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java
@@ -55,12 +55,18 @@ public class CharSequenceInputStream extends InputStream {
      * @param cs the input character sequence
      * @param charset the character set name to use
      * @param bufferSize the buffer size to use.
+     * @throws IllegalArgumentException if the buffer is not large enough to hold a complete character
      */
     public CharSequenceInputStream(final CharSequence cs, final Charset charset, final int bufferSize) {
         super();
         this.encoder = charset.newEncoder()
             .onMalformedInput(CodingErrorAction.REPLACE)
             .onUnmappableCharacter(CodingErrorAction.REPLACE);
+        // Ensure that buffer is long enough to hold a complete character
+        final float maxBytesPerChar = encoder.maxBytesPerChar();
+        if (bufferSize < maxBytesPerChar) {
+            throw new IllegalArgumentException("Buffer size " + bufferSize + " is less than maxBytesPerChar " + maxBytesPerChar);
+        }
         this.bbuf = ByteBuffer.allocate(bufferSize);
         this.bbuf.flip();
         this.cbuf = CharBuffer.wrap(cs);
@@ -73,6 +79,7 @@ public CharSequenceInputStream(final CharSequence cs, final Charset charset, fin
      * @param cs the input character sequence
      * @param charset the character set name to use
      * @param bufferSize the buffer size to use.
+     * @throws IllegalArgumentException if the buffer is not large enough to hold a complete character
      */
     public CharSequenceInputStream(final CharSequence cs, final String charset, final int bufferSize) {
         this(cs, Charset.forName(charset), bufferSize);
@@ -84,6 +91,7 @@ public CharSequenceInputStream(final CharSequence cs, final String charset, fina
      * 
      * @param cs the input character sequence
      * @param charset the character set name to use
+     * @throws IllegalArgumentException if the buffer is not large enough to hold a complete character
      */
     public CharSequenceInputStream(final CharSequence cs, final Charset charset) {
         this(cs, charset, BUFFER_SIZE);
@@ -95,6 +103,7 @@ public CharSequenceInputStream(final CharSequence cs, final Charset charset) {
      * 
      * @param cs the input character sequence
      * @param charset the character set name to use
+     * @throws IllegalArgumentException if the buffer is not large enough to hold a complete character
      */
     public CharSequenceInputStream(final CharSequence cs, final String charset) {
         this(cs, charset, BUFFER_SIZE);
@@ -112,9 +121,6 @@ private void fillBuffer() throws CharacterCodingException {
         if (result.isError()) {
             result.throwException();
         }
-//        if (result.isUnderflow()) {
-//            result.throwException();
-//        }
         this.bbuf.flip();
     }
     
diff --git a/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java b/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java
index e749e116cbc..8d64a6617ac 100644
--- a/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java
+++ b/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java
@@ -197,8 +197,8 @@ public void testIO_356_B10_D20_S0_UTF8() throws Exception {
         testIO_356(10, 20, 0, "UTF-8");
     }
 
-    private void testIO_356_Loop(final String csName) throws Exception {
-        for (int bufferSize = 1; bufferSize <= 10; bufferSize++) {
+    private void testIO_356_Loop(final String csName, final int maxBytesPerChar) throws Exception {
+        for (int bufferSize = maxBytesPerChar; bufferSize <= 10; bufferSize++) {
             for (int dataSize = 1; dataSize <= 20; dataSize++) {
                 testIO_356(bufferSize, dataSize, 0, csName);
             }
@@ -206,16 +206,13 @@ private void testIO_356_Loop(final String csName) throws Exception {
     }
 
     @Test
-    @Ignore
-    // Infinite loop
     public void testIO_356_Loop_UTF16() throws Exception {
-        testIO_356_Loop("UTF-16");
+        testIO_356_Loop("UTF-16", 4);
     }
 
     @Test
-    @Ignore
     public void testIO_356_Loop_UTF8() throws Exception {
-        testIO_356_Loop("UTF-8");
+        testIO_356_Loop("UTF-8", 4);
     }
 
     @Test
