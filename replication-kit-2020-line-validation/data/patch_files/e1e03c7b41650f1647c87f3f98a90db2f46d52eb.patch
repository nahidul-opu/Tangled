From e1e03c7b41650f1647c87f3f98a90db2f46d52eb Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <imario@apache.org>
Date: Mon, 14 May 2007 18:17:52 +0000
Subject: [PATCH] VFS-143: Fix memory leak in DelegateFileObject in it's
 handling of listeners - Thanks to Adam Heath for the patch!

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/vfs/trunk@537930 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs/provider/DelegateFileObject.java      |   8 +-
 .../commons/vfs/util/WeakRefFileListener.java | 111 ++++++++++++++++++
 2 files changed, 117 insertions(+), 2 deletions(-)
 create mode 100644 core/src/main/java/org/apache/commons/vfs/util/WeakRefFileListener.java

diff --git a/core/src/main/java/org/apache/commons/vfs/provider/DelegateFileObject.java b/core/src/main/java/org/apache/commons/vfs/provider/DelegateFileObject.java
index b065abf8de..86c422ece0 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/DelegateFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/DelegateFileObject.java
@@ -22,6 +22,7 @@
 import org.apache.commons.vfs.FileObject;
 import org.apache.commons.vfs.FileSystemException;
 import org.apache.commons.vfs.FileType;
+import org.apache.commons.vfs.util.WeakRefFileListener;
 
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -54,7 +55,7 @@ public DelegateFileObject(final FileName name,
         this.file = file;
         if (file != null)
         {
-            file.getFileSystem().addListener(file, this);
+			WeakRefFileListener.installListener(file, this);
         }
     }
 
@@ -80,7 +81,7 @@ public void setFile(final FileObject file) throws Exception
 
         if (file != null)
         {
-            file.getFileSystem().addListener(file, this);
+			WeakRefFileListener.installListener(file, this);
         }
         this.file = file;
         maybeTypeChanged(oldType);
@@ -296,6 +297,7 @@ protected OutputStream doGetOutputStream(boolean bAppend) throws Exception
      */
     public void fileCreated(final FileChangeEvent event) throws Exception
     {
+        if (event.getFile() != file) return;
         if (!ignoreEvent)
         {
             handleCreate(file.getType());
@@ -307,6 +309,7 @@ public void fileCreated(final FileChangeEvent event) throws Exception
      */
     public void fileDeleted(final FileChangeEvent event) throws Exception
     {
+        if (event.getFile() != file) return;
         if (!ignoreEvent)
         {
             handleDelete();
@@ -320,6 +323,7 @@ public void fileDeleted(final FileChangeEvent event) throws Exception
      */
     public void fileChanged(FileChangeEvent event) throws Exception
     {
+        if (event.getFile() != file) return;
         if (!ignoreEvent)
         {
             handleChanged();
diff --git a/core/src/main/java/org/apache/commons/vfs/util/WeakRefFileListener.java b/core/src/main/java/org/apache/commons/vfs/util/WeakRefFileListener.java
new file mode 100644
index 0000000000..92f29d7d0a
--- /dev/null
+++ b/core/src/main/java/org/apache/commons/vfs/util/WeakRefFileListener.java
@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs.util;
+
+import org.apache.commons.vfs.FileChangeEvent;
+import org.apache.commons.vfs.FileListener;
+import org.apache.commons.vfs.FileName;
+import org.apache.commons.vfs.FileObject;
+import org.apache.commons.vfs.FileSystem;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * Wrap a listener with a WeakReference.
+ *
+ * @author <a href="mailto:doogie@brainfood.com">Adam Heath</a>
+ * @version $Revision: 262 $ $Date: 2006-12-20T09:14:53.055649Z $
+ */
+public class WeakRefFileListener implements FileListener
+{
+	private final FileSystem fs;
+	private final FileName name;
+	private final WeakReference listener;
+
+	protected WeakRefFileListener(final FileObject file, final FileListener listener)
+	{
+		this.fs = file.getFileSystem();
+		this.name = file.getName();
+		this.listener = new WeakReference(listener);
+	}
+
+	/**
+	 * This will install the <code>listener<code> at the given <code>file</code>
+	 */
+	public static void installListener(final FileObject file, final FileListener listener)
+	{
+		WeakRefFileListener weakListener = new WeakRefFileListener(file, listener);
+		
+		file.getFileSystem().addListener(file, new WeakRefFileListener(file, weakListener));
+	}
+
+	/**
+	 * returns the wrapped listener. If it is gone, the WeakRefFileListener wrapper will
+	 * remove itself from the list of listeners.
+	 */
+	protected FileListener getListener() throws Exception
+	{
+		FileListener listener = (FileListener) this.listener.get();
+		if (listener == null)
+		{
+			FileObject file = fs.resolveFile(name);
+			file.getFileSystem().removeListener(file, this);
+		}
+		return listener;
+	}
+
+	/**
+	 * Called when a file is created.
+	 */
+	public void fileCreated(final FileChangeEvent event) throws Exception
+	{
+		FileListener listener = getListener();
+		if (listener == null)
+		{
+			return;
+		}
+		listener.fileCreated(event);
+	}
+
+	/**
+	 * Called when a file is deleted.
+	 */
+	public void fileDeleted(final FileChangeEvent event) throws Exception
+	{
+		FileListener listener = getListener();
+		if (listener == null)
+		{
+			return;
+		}
+		listener.fileDeleted(event);
+	}
+
+	/**
+	 * Called when a file is changed.
+	 * <p/>
+	 * This will only happen if you monitor the file using {@link org.apache.commons.vfs.FileMonitor}.
+	 */
+	public void fileChanged(FileChangeEvent event) throws Exception
+	{
+		FileListener listener = getListener();
+		if (listener == null)
+		{
+			return;
+		}
+		listener.fileChanged(event);
+	}
+}
