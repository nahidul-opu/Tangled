From c3b706ab8852c57446064031067dcbb92380502d Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Tue, 8 Apr 2008 10:27:39 +0000
Subject: [PATCH] IO-160 Make DF path final

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@645828 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/io/FileSystemUtils.java     | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index ddab67d523b..6d92eb19609 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -66,10 +66,11 @@ public class FileSystemUtils {
     private static final int OS;
 
     /** The path to df */
-    private static String dfPath = "df";
+    private static final String DF;
 
     static {
         int os = OTHER;
+        String dfPath = "df";
         try {
             String osName = System.getProperty("os.name");
             if (osName == null) {
@@ -103,6 +104,7 @@ public class FileSystemUtils {
             os = INIT_PROBLEM;
         }
         OS = os;
+        DF = dfPath;
     }
 
     /**
@@ -323,14 +325,14 @@ long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
             flags += "P";
         }
         String[] cmdAttribs = 
-            (flags.length() > 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});
+            (flags.length() > 1 ? new String[] {DF, flags, path} : new String[] {DF, path});
         
         // perform the command, asking for up to 3 lines (header, interesting, overflow)
         List<String> lines = performCommand(cmdAttribs, 3);
         if (lines.size() < 2) {
             // unknown problem, throw exception
             throw new IOException(
-                    "Command line '" + dfPath + "' did not return info as expected " +
+                    "Command line '" + DF + "' did not return info as expected " +
                     "for path '" + path + "'- response was " + lines);
         }
         String line2 = lines.get(1); // the line we're interested in
@@ -344,7 +346,7 @@ long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
                 tok = new StringTokenizer(line3, " ");
             } else {
                 throw new IOException(
-                        "Command line '" + dfPath + "' did not return data as expected " +
+                        "Command line '" + DF + "' did not return data as expected " +
                         "for path '" + path + "'- check path is valid");
             }
         } else {
@@ -370,14 +372,14 @@ long parseBytes(String freeSpace, String path) throws IOException {
             long bytes = Long.parseLong(freeSpace);
             if (bytes < 0) {
                 throw new IOException(
-                        "Command line '" + dfPath + "' did not find free space in response " +
+                        "Command line '" + DF + "' did not find free space in response " +
                         "for path '" + path + "'- check path is valid");
             }
             return bytes;
             
         } catch (NumberFormatException ex) {
             throw new IOException(
-                    "Command line '" + dfPath + "' did not return numeric data as expected " +
+                    "Command line '" + DF + "' did not return numeric data as expected " +
                     "for path '" + path + "'- check path is valid");
         }
     }
