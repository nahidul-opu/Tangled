From d464d82da3213f1b501064c881f650fbc1645ff0 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Tue, 8 Dec 2015 14:06:48 +0000
Subject: [PATCH] Verify that all properties are set when BasicDataSource
 instances are created from References.  JIRA: DBCP-452.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1718613 13f79535-47bb-0310-9956-ffa450edef68
---
 .../dbcp2/TestBasicDataSourceFactory.java     | 107 ++++++++++++------
 1 file changed, 75 insertions(+), 32 deletions(-)

diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
index 2a474f0b00..001093e7ef 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
@@ -21,9 +21,14 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import java.lang.management.ManagementFactory;
 import java.sql.Connection;
 import java.util.List;
+import java.util.Map.Entry;
 import java.util.Properties;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import javax.management.MBeanServer;
 import javax.naming.Reference;
 import javax.naming.StringRefAddr;
 
@@ -37,6 +42,8 @@
  */
 public class TestBasicDataSourceFactory {
 
+    private static AtomicInteger instanceCounter = new AtomicInteger(0);
+
     @Test
     public void testNoProperties() throws Exception {
         Properties properties = new Properties();
@@ -47,6 +54,61 @@ public void testNoProperties() throws Exception {
 
     @Test
     public void testProperties() throws Exception {
+        BasicDataSource ds = BasicDataSourceFactory.createDataSource(getTestProperties());
+        checkDataSourceProperties(ds);
+    }
+
+    @Test
+    public void testValidateProperties() throws Exception {
+        try {
+            StackMessageLog.lock();
+            StackMessageLog.clear();
+            final Reference ref = new Reference("javax.sql.DataSource",
+                                          BasicDataSourceFactory.class.getName(), null);
+            ref.add(new StringRefAddr("foo", "bar"));     // Unknown
+            ref.add(new StringRefAddr("maxWait", "100")); // Changed
+            ref.add(new StringRefAddr("driverClassName", "org.apache.commons.dbcp2.TesterDriver")); //OK
+            final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();
+            basicDataSourceFactory.getObjectInstance(ref, null, null, null);
+            final List<String> messages = StackMessageLog.getAll();
+            assertEquals(2,messages.size());
+            for (String message : messages) {
+                if (message.contains("maxWait")) {
+                    assertTrue(message.contains("use maxWaitMillis"));
+                } else {
+                    assertTrue(message.contains("foo"));
+                    assertTrue(message.contains("Ignoring unknown property"));
+                }
+            }
+        } finally {
+            StackMessageLog.clear();
+            StackMessageLog.unLock();
+        }
+    }
+
+    @Test
+    public void testAllProperties() throws Exception {
+        try {
+            StackMessageLog.lock();
+            StackMessageLog.clear();
+            final Reference ref = new Reference("javax.sql.DataSource",
+                                          BasicDataSourceFactory.class.getName(), null);
+            Properties properties = getTestProperties();
+            for (Entry<Object, Object> entry : properties.entrySet()) {
+                ref.add(new StringRefAddr((String) entry.getKey(), (String) entry.getValue()));
+            }
+            final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();
+            BasicDataSource ds = (BasicDataSource) basicDataSourceFactory.getObjectInstance(ref, null, null, null);
+            checkDataSourceProperties(ds);
+            final List<String> messages = StackMessageLog.getAll();
+            assertEquals(0,messages.size());
+        } finally {
+            StackMessageLog.clear();
+            StackMessageLog.unLock();
+        }
+    }
+
+    private Properties getTestProperties() {
         Properties properties = new Properties();
         properties.setProperty("driverClassName", "org.apache.commons.dbcp2.TesterDriver");
         properties.setProperty("url", "jdbc:apache:commons:testdriver");
@@ -72,7 +134,8 @@ public void testProperties() throws Exception {
         properties.setProperty("numTestsPerEvictionRun", "2");
         properties.setProperty("testWhileIdle", "true");
         properties.setProperty("accessToUnderlyingConnectionAllowed", "true");
-        properties.setProperty("removeAbandoned", "true");
+        properties.setProperty("removeAbandonedOnBorrow", "true");
+        properties.setProperty("removeAbandonedOnMaintenance", "true");
         properties.setProperty("removeAbandonedTimeout", "3000");
         properties.setProperty("logAbandoned", "true");
         properties.setProperty("abandonedUsageTracking", "true");
@@ -81,9 +144,11 @@ public void testProperties() throws Exception {
         properties.setProperty("lifo", "true");
         properties.setProperty("fastFailValidation", "true");
         properties.setProperty("disconnectionSqlCodes", "XXX,YYY");
+        properties.setProperty("jmxName", "org.apache.commons.dbcp2:name=test");
+        return properties;
+    }
 
-        BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties);
-
+    private void checkDataSourceProperties(BasicDataSource ds) throws Exception {
         assertEquals("org.apache.commons.dbcp2.TesterDriver", ds.getDriverClassName());
         assertEquals("jdbc:apache:commons:testdriver", ds.getUrl());
         assertEquals(10, ds.getMaxTotal());
@@ -111,8 +176,8 @@ public void testProperties() throws Exception {
         assertEquals(2, ds.getNumTestsPerEvictionRun());
         assertEquals(true, ds.getTestWhileIdle());
         assertEquals(true, ds.isAccessToUnderlyingConnectionAllowed());
-        assertEquals(false, ds.getRemoveAbandonedOnBorrow());
-        assertEquals(false, ds.getRemoveAbandonedOnMaintenance());
+        assertEquals(true, ds.getRemoveAbandonedOnBorrow());
+        assertEquals(true, ds.getRemoveAbandonedOnMaintenance());
         assertEquals(3000, ds.getRemoveAbandonedTimeout());
         assertEquals(true, ds.getLogAbandoned());
         assertEquals(true, ds.getAbandonedUsageTracking());
@@ -122,32 +187,10 @@ public void testProperties() throws Exception {
         assertEquals(true, ds.getFastFailValidation());
         assertTrue(ds.getDisconnectionSqlCodes().contains("XXX"));
         assertTrue(ds.getDisconnectionSqlCodes().contains("YYY"));
+        assertEquals("org.apache.commons.dbcp2:name=test", ds.getJmxName());
+
+        // Unregister so subsequent calls to getTestProperties can re-register
+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
+        mbs.unregisterMBean(ds.getRegisteredJmxName());
     }
-    
-    @Test
-    public void testValidateProperties() throws Exception {
-        try {
-            StackMessageLog.lock();
-            final Reference ref = new Reference("javax.sql.DataSource",
-                                          BasicDataSourceFactory.class.getName(), null);
-            ref.add(new StringRefAddr("foo", "bar"));     // Unknown
-            ref.add(new StringRefAddr("maxWait", "100")); // Changed
-            ref.add(new StringRefAddr("driverClassName", "org.apache.commons.dbcp2.TesterDriver")); //OK
-            final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();
-            basicDataSourceFactory.getObjectInstance(ref, null, null, null);
-            final List<String> messages = StackMessageLog.getAll();
-            assertEquals(2,messages.size());
-            for (String message : messages) {
-                if (message.contains("maxWait")) {
-                    assertTrue(message.contains("use maxWaitMillis"));
-                } else {
-                    assertTrue(message.contains("foo"));
-                    assertTrue(message.contains("Ignoring unknown property"));
-                }
-            }
-        } finally {
-            StackMessageLog.clear();
-            StackMessageLog.unLock();
-        }
-    }   
 }
