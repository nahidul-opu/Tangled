From cc8bdf1d13639d12d02170d40cc4890180bbabc5 Mon Sep 17 00:00:00 2001
From: nandorKollar <nandorKollar@users.noreply.github.com>
Date: Mon, 18 Jun 2018 09:47:25 +0200
Subject: [PATCH] PARQUET-952: Avro union with single type fails with 'is not a
 group' (#459)

---
 .../parquet/avro/AvroSchemaConverter.java     | 22 ++++++++-----
 .../apache/parquet/avro/TestReadWrite.java    | 31 +++++++++++++++++++
 2 files changed, 46 insertions(+), 7 deletions(-)

diff --git a/parquet-avro/src/main/java/org/apache/parquet/avro/AvroSchemaConverter.java b/parquet-avro/src/main/java/org/apache/parquet/avro/AvroSchemaConverter.java
index 70b6525f60..1bb12b9835 100644
--- a/parquet-avro/src/main/java/org/apache/parquet/avro/AvroSchemaConverter.java
+++ b/parquet-avro/src/main/java/org/apache/parquet/avro/AvroSchemaConverter.java
@@ -195,8 +195,11 @@ private Type convertField(String fieldName, Schema schema, Type.Repetition repet
 
   private Type convertUnion(String fieldName, Schema schema, Type.Repetition repetition) {
     List<Schema> nonNullSchemas = new ArrayList<Schema>(schema.getTypes().size());
+    // Found any schemas in the union? Required for the edge case, where the union contains only a single type.
+    boolean foundNullSchema = false;
     for (Schema childSchema : schema.getTypes()) {
       if (childSchema.getType().equals(Schema.Type.NULL)) {
+        foundNullSchema = true;
         if (Type.Repetition.REQUIRED == repetition) {
           repetition = Type.Repetition.OPTIONAL;
         }
@@ -211,16 +214,21 @@ private Type convertUnion(String fieldName, Schema schema, Type.Repetition repet
         throw new UnsupportedOperationException("Cannot convert Avro union of only nulls");
 
       case 1:
-        return convertField(fieldName, nonNullSchemas.get(0), repetition);
+        return foundNullSchema ? convertField(fieldName, nonNullSchemas.get(0), repetition) :
+          convertUnionToGroupType(fieldName, repetition, nonNullSchemas);
 
       default: // complex union type
-        List<Type> unionTypes = new ArrayList<Type>(nonNullSchemas.size());
-        int index = 0;
-        for (Schema childSchema : nonNullSchemas) {
-          unionTypes.add( convertField("member" + index++, childSchema, Type.Repetition.OPTIONAL));
-        }
-        return new GroupType(repetition, fieldName, unionTypes);
+        return convertUnionToGroupType(fieldName, repetition, nonNullSchemas);
+    }
+  }
+
+  private Type convertUnionToGroupType(String fieldName, Type.Repetition repetition, List<Schema> nonNullSchemas) {
+    List<Type> unionTypes = new ArrayList<Type>(nonNullSchemas.size());
+    int index = 0;
+    for (Schema childSchema : nonNullSchemas) {
+      unionTypes.add( convertField("member" + index++, childSchema, Type.Repetition.OPTIONAL));
     }
+    return new GroupType(repetition, fieldName, unionTypes);
   }
 
   private Type convertField(Schema.Field field) {
diff --git a/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java b/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java
index 4fa71ea986..2335e364c2 100644
--- a/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java
+++ b/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java
@@ -647,6 +647,37 @@ public void write(Map<String, Object> record) {
 
   }
 
+  @Test
+  public void testUnionWithSingleNonNullType() throws Exception {
+    Schema avroSchema = Schema.createRecord("SingleStringUnionRecord", null, null, false);
+    avroSchema.setFields(
+      Collections.singletonList(new Schema.Field("value",
+        Schema.createUnion(Schema.create(Schema.Type.STRING)), null, null)));
+
+    File tmp = File.createTempFile(getClass().getSimpleName(), ".tmp");
+    tmp.deleteOnExit();
+    tmp.delete();
+    Path file = new Path(tmp.getPath());
+
+    // Parquet writer
+    ParquetWriter parquetWriter = AvroParquetWriter.builder(file).withSchema(avroSchema)
+      .withConf(new Configuration())
+      .build();
+
+    GenericRecord record = new GenericRecordBuilder(avroSchema)
+      .set("value", "theValue")
+      .build();
+
+    parquetWriter.write(record);
+    parquetWriter.close();
+
+    AvroParquetReader<GenericRecord> reader = new AvroParquetReader<GenericRecord>(testConf, file);
+    GenericRecord nextRecord = reader.read();
+
+    assertNotNull(nextRecord);
+    assertEquals(str("theValue"), nextRecord.get("value"));
+  }
+
   /**
    * Return a String or Utf8 depending on whether compatibility is on
    */
