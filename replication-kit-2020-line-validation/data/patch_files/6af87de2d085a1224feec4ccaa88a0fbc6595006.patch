From 6af87de2d085a1224feec4ccaa88a0fbc6595006 Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Thu, 6 Dec 2007 07:30:32 +0000
Subject: [PATCH] SCXML-53 Wild card event name handling on transitions is not
 in line with WD

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/scxml/trunk@601639 13f79535-47bb-0310-9956-ffa450edef68
---
 .../scxml/semantics/SCXMLSemanticsImpl.java   | 51 +++++++++----------
 .../apache/commons/scxml/WildcardTest.java    |  2 +-
 .../commons/scxml/env/jexl/wildcard-01.xml    |  8 +--
 3 files changed, 28 insertions(+), 33 deletions(-)

diff --git a/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java b/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
index b4be968d6..39544b4b3 100644
--- a/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
+++ b/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
@@ -348,17 +348,8 @@ public void filterTransitionsSet(final Step step,
          */
         Set allEvents = new HashSet(step.getBeforeStatus().getEvents().size()
             + step.getExternalEvents().size());
-        //for now, we only match against event names
-        for (Iterator ei = step.getBeforeStatus().getEvents().iterator();
-                ei.hasNext();) {
-            TriggerEvent te = (TriggerEvent) ei.next();
-            allEvents.add(te.getName());
-        }
-        for (Iterator ei = step.getExternalEvents().iterator();
-                ei.hasNext();) {
-            TriggerEvent te = (TriggerEvent) ei.next();
-            allEvents.add(te.getName());
-        }
+        allEvents.addAll(step.getBeforeStatus().getEvents());
+        allEvents.addAll(step.getExternalEvents());
         // Finalize invokes, if applicable
         for (Iterator iter = scInstance.getInvokers().keySet().iterator();
                 iter.hasNext();) {
@@ -724,16 +715,13 @@ public void followTransitions(final Step step,
     public void processInvokes(final TriggerEvent[] events,
             final ErrorReporter errRep, final SCInstance scInstance)
     throws ModelException {
-        Set eventNames = new HashSet();
-        //for now, we only match against event names
-        for (int i = 0; i < events.length; i++) {
-            eventNames.add(events[i].getName());
-        }
+        Set allEvents = new HashSet();
+        allEvents.addAll(Arrays.asList(events));
         for (Iterator invokeIter = scInstance.getInvokers().entrySet().
                 iterator(); invokeIter.hasNext();) {
             Map.Entry iEntry = (Map.Entry) invokeIter.next();
             String parentId = ((TransitionTarget) iEntry.getKey()).getId();
-            if (!finalizeMatch(parentId, eventNames)) { // prevent cycles
+            if (!finalizeMatch(parentId, allEvents)) { // prevent cycles
                 Invoker inv = (Invoker) iEntry.getValue();
                 try {
                     inv.parentEvents(events);
@@ -840,20 +828,27 @@ public void initiateInvokes(final Step step, final ErrorReporter errRep,
      */
     protected boolean eventMatch(final String transEvent,
             final Set eventOccurrences) {
-        if (SCXMLHelper.isStringEmpty(transEvent)) {
+        if (SCXMLHelper.isStringEmpty(transEvent)) { // Eventless transition
             return true;
         } else {
-            String transEventDot = transEvent + "."; // prefix event support
+            String trimTransEvent = transEvent.trim();
             Iterator i = eventOccurrences.iterator();
             while (i.hasNext()) {
-                String evt = (String) i.next();
-                if (evt == null) {
+                TriggerEvent te = (TriggerEvent) i.next();
+                String event = te.getName();
+                if (event == null) {
                     continue; // Unnamed events
-                } else if (evt.equals("*")) {
-                    return true; // Wildcard
-                } else if (evt.equals(transEvent)
-                            || evt.startsWith(transEventDot)) {
-                    return true;
+                }
+                String trimEvent = event.trim();
+                if (trimEvent.equals(trimTransEvent)) {
+                    return true; // Match
+                } else if (te.getType() != TriggerEvent.CHANGE_EVENT
+                        && trimTransEvent.equals("*")) {
+                    return true; // Wildcard, skip gen'ed ones like .done etc.
+                } else if (trimTransEvent.endsWith(".*")
+                        && trimEvent.startsWith(trimTransEvent.substring(0,
+                                trimTransEvent.length()-1))) {
+                    return true; // Prefixed wildcard
                 }
             }
             return false;
@@ -875,10 +870,10 @@ protected boolean finalizeMatch(final String parentStateId,
         String prefix = parentStateId + ".invoke."; // invoke prefix
         Iterator i = eventOccurrences.iterator();
         while (i.hasNext()) {
-            String evt = (String) i.next();
+            String evt = ((TriggerEvent) i.next()).getName();
             if (evt == null) {
                 continue; // Unnamed events
-            } else if (evt.startsWith(prefix)) {
+            } else if (evt.trim().startsWith(prefix)) {
                 return true;
             }
         }
diff --git a/src/test/java/org/apache/commons/scxml/WildcardTest.java b/src/test/java/org/apache/commons/scxml/WildcardTest.java
index 9212528d2..00a045649 100644
--- a/src/test/java/org/apache/commons/scxml/WildcardTest.java
+++ b/src/test/java/org/apache/commons/scxml/WildcardTest.java
@@ -75,7 +75,7 @@ public void testWildcard01Sample() {
             assertEquals("state1", ((State)currentStates.iterator().
                 next()).getId());
             exec = SCXMLTestHelper.testExecutorSerializability(exec);
-            currentStates = SCXMLTestHelper.fireEvent(exec, "*");
+            currentStates = SCXMLTestHelper.fireEvent(exec, "foo.bar.baz");
             assertEquals(1, currentStates.size());
             assertEquals("state4", ((State)currentStates.iterator().
                 next()).getId());
diff --git a/src/test/java/org/apache/commons/scxml/env/jexl/wildcard-01.xml b/src/test/java/org/apache/commons/scxml/env/jexl/wildcard-01.xml
index a1a738eeb..77d68b137 100644
--- a/src/test/java/org/apache/commons/scxml/env/jexl/wildcard-01.xml
+++ b/src/test/java/org/apache/commons/scxml/env/jexl/wildcard-01.xml
@@ -22,11 +22,11 @@
            <onentry>
                <var name="switch" expr="4" />
            </onentry>
-           <!-- We'll match all the events using a wildcard (*),
+           <!-- We'll trigger 'foo.bar.baz' event,
                 and therefore, must end up in state4 -->
-           <transition event="foo.bar" cond="switch eq 2" target="state2"/>
-           <transition event="err.foo" cond="switch eq 3" target="state3"/>
-           <transition event="done.it" cond="switch eq 4" target="state4"/>
+           <transition event="*" cond="switch eq 2" target="state2"/>
+           <transition event="foo.*" cond="switch eq 3" target="state3"/>
+           <transition event="foo.bar.*" cond="switch eq 4" target="state4"/>
      </state>
      <state id="state2" final="true"/>
      <state id="state3" final="true"/>
