From d6c3900bd0c06e311af4902f3fb56c66486cd42d Mon Sep 17 00:00:00 2001
From: Emmanuel Bourg <ebourg@apache.org>
Date: Wed, 30 Apr 2008 11:01:58 +0000
Subject: [PATCH] Fixed a bug in ConfigurationDynaBean that prevented to work
 with indexed properties stored internally as arrays (CONFIGURATION-322)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/configuration2_experimental@652317 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration2/AbstractConfiguration.java |  6 +++
 .../beanutils/ConfigurationDynaBean.java      |  6 +--
 .../beanutils/TestConfigurationDynaBean.java  | 42 ++++++++++++++-----
 3 files changed, 40 insertions(+), 14 deletions(-)

diff --git a/src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java b/src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java
index 4bdc946c24..e69362d496 100644
--- a/src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java
@@ -21,6 +21,7 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -1149,6 +1150,11 @@ else if (value == null)
         {
             list = defaultValue;
         }
+        else if (value.getClass().isArray())
+        {
+            T[] array = (T[]) value;
+            return Arrays.asList(array);
+        }
         else
         {
             throw new ConversionException('\'' + key + "' doesn't map to a List object: " + value + ", a "
diff --git a/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java b/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
index 05014e4e0d..a6c838b8f1 100644
--- a/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
+++ b/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
@@ -166,7 +166,7 @@ public Object get(String name, int index)
         }
         catch (ConversionException e)
         {
-            throw new IllegalArgumentException("Property '" + name + "' is not indexed.");
+            throw new IllegalArgumentException("Property '" + name + "' is not indexed.", e);
         }
     }
 
@@ -210,7 +210,7 @@ else if (property instanceof List)
             }
             else if (property.getClass().isArray())
             {
-                Array.set(value, index, value);
+                Array.set(property, index, value);
             }
             else if (index == 0)
             {
@@ -223,7 +223,7 @@ else if (index == 0)
         }
         catch (ConversionException e)
         {
-            throw new IllegalArgumentException("Property '" + name + "' is not indexed.");
+            throw new IllegalArgumentException("Property '" + name + "' is not indexed.", e);
         }
     }
 
diff --git a/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java b/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
index 80e3e84aab..d9fe54db6f 100644
--- a/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
+++ b/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
@@ -18,12 +18,14 @@
 package org.apache.commons.configuration2.beanutils;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.apache.commons.beanutils.DynaProperty;
 import org.apache.commons.configuration2.Configuration;
+import org.apache.commons.configuration2.MapConfiguration;
 import org.apache.commons.configuration2.flat.BaseConfiguration;
 
 import junit.framework.AssertionFailedError;
@@ -50,7 +52,7 @@ public class TestConfigurationDynaBean extends TestCase
      * <code>getDynaProperties()</code>.  You should update this list
      * when new properties are added to TestBean.
      */
-    String[] properties = {
+    private String[] properties = {
             "booleanProperty",
             "booleanSecond",
             "doubleProperty",
@@ -67,7 +69,7 @@ public class TestConfigurationDynaBean extends TestCase
             "charProperty"
     };
 
-    Object[] values = {
+    private Object[] values = {
             Boolean.TRUE,
             Boolean.TRUE,
             new Double(Double.MAX_VALUE),
@@ -84,15 +86,15 @@ public class TestConfigurationDynaBean extends TestCase
             new Character(Character.MAX_VALUE)
     };
 
-    int[] intArray = {0, 10, 20, 30, 40};
-    boolean[] booleanArray = {true, false, true, false, true};
-    char[] charArray = {'a', 'b', 'c', 'd', 'e'};
-    byte[] byteArray = {0, 10, 20, 30, 40};
-    long[] longArray = {0, 10, 20, 30, 40};
-    short[] shortArray = {0, 10, 20, 30, 40};
-    float[] floatArray = {0, 10, 20, 30, 40};
-    double[] doubleArray = {0.0, 10.0, 20.0, 30.0, 40.0};
-    String[] stringArray = {"String 0", "String 1", "String 2", "String 3", "String 4"};
+    private int[] intArray = {0, 10, 20, 30, 40};
+    private boolean[] booleanArray = {true, false, true, false, true};
+    private char[] charArray = {'a', 'b', 'c', 'd', 'e'};
+    private byte[] byteArray = {0, 10, 20, 30, 40};
+    private long[] longArray = {0, 10, 20, 30, 40};
+    private short[] shortArray = {0, 10, 20, 30, 40};
+    private float[] floatArray = {0, 10, 20, 30, 40};
+    private double[] doubleArray = {0.0, 10.0, 20.0, 30.0, 40.0};
+    private String[] stringArray = {"String 0", "String 1", "String 2", "String 3", "String 4"};
 
 
     /**
@@ -556,6 +558,24 @@ public void testSetIndexedValues()
         assertEquals("Returned correct new value 4", "New Value 4", (String) value);
     }
 
+    /**
+     * Test the modification of a configuration property stored internally as an array.
+     */
+    public void testSetArrayValue()
+    {
+        MapConfiguration configuration = new MapConfiguration(new HashMap());
+        configuration.getMap().put("objectArray", new Object[] {"value1", "value2", "value3"});
+
+        ConfigurationDynaBean bean = new ConfigurationDynaBean(configuration);
+
+        bean.set("objectArray", 1, "New Value 1");
+        Object value = bean.get("objectArray", 1);
+
+        assertNotNull("Returned new value 1", value);
+        ObjectAssert.assertInstanceOf("Returned String new value 1", String.class,  value);
+        assertEquals("Returned correct new value 1", "New Value 1", (String) value);
+    }
+
     /**
      * Positive and negative tests on setMappedProperty valid arguments.
      */
