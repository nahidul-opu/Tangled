From a515e3a791afb0a2d290a349b9907757d99f993b Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Tue, 29 Apr 2014 20:35:15 +0000
Subject: [PATCH] [CONFIGURATION-573] ConfigurationNodeIteratorAttribute now
 supports namespaces.

Namespace prefixes are now handled when iterating over the attributes of a
node. Some common functionality was refactored into the base class.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1591091 13f79535-47bb-0310-9956-ffa450edef68
---
 .../ConfigurationNodeIteratorAttribute.java   | 18 ++++----
 .../xpath/ConfigurationNodeIteratorBase.java  | 35 ++++++++++++++
 .../ConfigurationNodeIteratorChildren.java    | 21 +--------
 .../TestConfigurationIteratorAttributes.java  | 46 +++++++++++++++++--
 4 files changed, 86 insertions(+), 34 deletions(-)

diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
index 71233ddc0c..01a73bf08d 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
@@ -17,13 +17,13 @@
 package org.apache.commons.configuration.tree.xpath;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.commons.jxpath.ri.QName;
 import org.apache.commons.jxpath.ri.model.NodePointer;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * A specialized node iterator implementation that deals with attribute nodes.
@@ -91,25 +91,25 @@ protected int size()
     private List<String> createAttributeDataList(
             ConfigurationNodePointer<T> parent, QName name)
     {
-        if (name.getPrefix() != null)
-        {
-            // namespace prefixes are not supported
-            return Collections.emptyList();
-        }
-
         List<String> result = new ArrayList<String>();
         if (!WILDCARD.equals(name.getName()))
         {
-            addAttributeData(parent, result, name.getName());
+            addAttributeData(parent, result, qualifiedName(name));
         }
         else
         {
             Set<String> names =
                     new LinkedHashSet<String>(parent.getNodeHandler()
                             .getAttributes(parent.getConfigurationNode()));
+            String prefix =
+                    (name.getPrefix() != null) ? prefixName(name.getPrefix(),
+                            null) : null;
             for (String n : names)
             {
-                addAttributeData(parent, result, n);
+                if (prefix == null || StringUtils.startsWith(n, prefix))
+                {
+                    addAttributeData(parent, result, n);
+                }
             }
         }
 
diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
index 407e19a086..35da018adf 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
@@ -17,8 +17,10 @@
 package org.apache.commons.configuration.tree.xpath;
 
 import org.apache.commons.configuration.tree.NodeHandler;
+import org.apache.commons.jxpath.ri.QName;
 import org.apache.commons.jxpath.ri.model.NodeIterator;
 import org.apache.commons.jxpath.ri.model.NodePointer;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>
@@ -36,6 +38,12 @@
  */
 abstract class ConfigurationNodeIteratorBase<T> implements NodeIterator
 {
+    /** Constant for the prefix separator. */
+    private static final String PREFIX_SEPARATOR = ":";
+
+    /** A format for constructing a node name with a namespace prefix. */
+    private static final String FMT_NAMESPACE = "%s" + PREFIX_SEPARATOR + "%s";
+
     /** Stores the parent node pointer. */
     private final ConfigurationNodePointer<T> parent;
 
@@ -187,4 +195,31 @@ protected int positionToIndex(int pos)
      * @return the number of elements
      */
     protected abstract int size();
+
+    /**
+     * Generates a qualified name with a namespace prefix.
+     *
+     * @param prefix the prefix
+     * @param name the name (may be <b>null</b>)
+     * @return the qualified name
+     */
+    protected static String prefixName(String prefix, String name)
+    {
+        return String.format(FMT_NAMESPACE, prefix,
+                StringUtils.defaultString(name));
+    }
+
+    /**
+     * Returns the qualified name from the given {@code QName}. If the name has
+     * no namespace, result is the simple name. Otherwise, the namespace prefix
+     * is added.
+     *
+     * @param name the {@code QName}
+     * @return the qualified name
+     */
+    protected static String qualifiedName(QName name)
+    {
+        return (name.getPrefix() == null) ? name.getName() : prefixName(
+                name.getPrefix(), name.getName());
+    }
 }
diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
index 926ee1a2d6..b035a6b0fc 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
@@ -38,11 +38,6 @@
 class ConfigurationNodeIteratorChildren<T> extends
         ConfigurationNodeIteratorBase<T>
 {
-    /** Constant for the prefix separator. */
-    private static final String PREFIX_SEPARATOR = ":";
-
-    /** A format for constructing a node name with a namespace prefix. */
-    private static final String FMT_NAMESPACE = "%s" + PREFIX_SEPARATOR + "%s";
 
     /** The list with the sub nodes to iterate over. */
     private final List<T> subNodes;
@@ -152,9 +147,7 @@ else if (test instanceof NodeTypeTest)
      */
     private List<T> createSubNodeListForName(T node, QName name)
     {
-        String compareName =
-                (name.getPrefix() == null) ? name.getName() : prefixName(
-                        name.getPrefix(), name.getName());
+        String compareName = qualifiedName(name);
         List<T> result = new ArrayList<T>();
         for (T child : getNodeHandler().getChildren(node))
         {
@@ -221,16 +214,4 @@ private int findStartIndex(List<T> children, T startNode)
         return -1;
     }
 
-    /**
-     * Generates a qualified name with a namespace prefix.
-     *
-     * @param prefix the prefix
-     * @param name the name
-     * @return the qualified name
-     */
-    private static String prefixName(String prefix, String name)
-    {
-        return String.format(FMT_NAMESPACE, prefix,
-                StringUtils.defaultString(name));
-    }
 }
diff --git a/src/test/java/org/apache/commons/configuration/tree/xpath/TestConfigurationIteratorAttributes.java b/src/test/java/org/apache/commons/configuration/tree/xpath/TestConfigurationIteratorAttributes.java
index c90d22b2ab..479127c10e 100644
--- a/src/test/java/org/apache/commons/configuration/tree/xpath/TestConfigurationIteratorAttributes.java
+++ b/src/test/java/org/apache/commons/configuration/tree/xpath/TestConfigurationIteratorAttributes.java
@@ -40,6 +40,12 @@ public class TestConfigurationIteratorAttributes extends AbstractXPathTest
     /** Constant for the name of another test attribute.*/
     private static final String TEST_ATTR = "test";
 
+    /** Constant for a namespace prefix. */
+    private static final String NAMESPACE = "commons";
+
+    /** Constant for an attribute with a namespace prefix. */
+    private static final String NS_ATTR = NAMESPACE + ":attr";
+
     /** Stores the node pointer of the test node.*/
     private ConfigurationNodePointer<ImmutableNode> pointer;
 
@@ -51,7 +57,9 @@ public void setUp() throws Exception
 
         // Adds further attributes to the test node
         ImmutableNode orgNode = root.getChildren().get(1);
-        ImmutableNode testNode = orgNode.setAttribute(TEST_ATTR, "yes");
+        ImmutableNode testNode =
+                orgNode.setAttribute(TEST_ATTR, "yes").setAttribute(NS_ATTR,
+                        "configuration");
         pointer =
                 new ConfigurationNodePointer<ImmutableNode>(testNode,
                         Locale.getDefault(), handler);
@@ -66,7 +74,7 @@ public void testIterateAllAttributes()
         ConfigurationNodeIteratorAttribute<ImmutableNode> it =
                 new ConfigurationNodeIteratorAttribute<ImmutableNode>(pointer,
                         new QName(null, "*"));
-        assertEquals("Wrong number of attributes", 2, iteratorSize(it));
+        assertEquals("Wrong number of attributes", 3, iteratorSize(it));
         List<NodePointer> attrs = iterationElements(it);
         Set<String> attrNames = new HashSet<String>();
         for (NodePointer np : attrs)
@@ -75,6 +83,7 @@ public void testIterateAllAttributes()
         }
         assertTrue("First attribute not found", attrNames.contains(ATTR_NAME));
         assertTrue("Second attribute not found", attrNames.contains(TEST_ATTR));
+        assertTrue("Namespace attribute not found", attrNames.contains(NS_ATTR));
     }
 
     /**
@@ -104,15 +113,42 @@ public void testIterateUnknownAttribute()
     }
 
     /**
-     * Tests iteration if a namespace is specified. This is not supported, so
-     * the iteration should be empty.
+     * Tests iteration if an unknown namespace is specified.
      */
     @Test
-    public void testIterateNamespace()
+    public void testIterateNamespaceUnknown()
     {
         ConfigurationNodeIteratorAttribute<ImmutableNode> it =
                 new ConfigurationNodeIteratorAttribute<ImmutableNode>(pointer,
                         new QName("test", "*"));
         assertEquals("Found attributes", 0, iteratorSize(it));
     }
+
+    /**
+     * Tests whether a specific attribute with a namespace can be selected.
+     */
+    @Test
+    public void testIterateNamespaceAttribute()
+    {
+        ConfigurationNodeIteratorAttribute<ImmutableNode> it =
+                new ConfigurationNodeIteratorAttribute<ImmutableNode>(pointer,
+                        new QName(NAMESPACE, "attr"));
+        assertEquals("Wrong number of attributes", 1, iteratorSize(it));
+        assertEquals("Wrong attribute", NS_ATTR, iterationElements(it).get(0)
+                .getName().getName());
+    }
+
+    /**
+     * Tests whether a wildcard can be used together with a namespace.
+     */
+    @Test
+    public void testIterateNamespaceWildcard()
+    {
+        ConfigurationNodeIteratorAttribute<ImmutableNode> it =
+                new ConfigurationNodeIteratorAttribute<ImmutableNode>(pointer,
+                        new QName(NAMESPACE, "*"));
+        assertEquals("Wrong number of attributes", 1, iteratorSize(it));
+        assertEquals("Wrong attribute", NS_ATTR, iterationElements(it).get(0)
+                .getName().getName());
+    }
 }
