From fdac1475918e93444b08a024d096b4ec39d6733d Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sun, 23 Oct 2011 12:15:13 +0000
Subject: [PATCH] TarArchiveOutputStream's getBytesWritten doesn't work. 
 COMPRESS-160

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1187874 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../archivers/tar/TarArchiveOutputStream.java | 18 ++++--
 .../tar/TarArchiveOutputStreamTest.java       | 57 +++++++++++++++++++
 3 files changed, 75 insertions(+), 4 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index e905a28364b..864bb95b67a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -68,6 +68,10 @@ The <action> type attribute can be add,update,fix,remove.
         ZipArchiveInputStream and ZipArchiveOutputStream could leak
         resources on some JDKs.
       </action> 
+      <action issue="COMPRESS-160" type="fix" date="2011-10-23">
+        TarArchiveOutputStream's getBytesWritten method didn't count
+        correctly.
+      </action> 
     </release>
     <release version="1.2" date="2011-07-31"
              description="Release 1.2 - a bugfix release, the last release expected to be compatible with Java 1.4">
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index 7b9cb5fa0d6..53d44502d0d 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -24,6 +24,7 @@
 import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ArchiveOutputStream;
 import org.apache.commons.compress.utils.ArchiveUtils;
+import org.apache.commons.compress.utils.CountingOutputStream;
 
 /**
  * The TarOutputStream writes a UNIX tar archive as an OutputStream.
@@ -84,9 +85,9 @@ public TarArchiveOutputStream(OutputStream os, int blockSize) {
      * @param recordSize the record size to use
      */
     public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {
-        out = os;
+        out = new CountingOutputStream(os);
 
-        this.buffer = new TarBuffer(os, blockSize, recordSize);
+        this.buffer = new TarBuffer(out, blockSize, recordSize);
         this.assemLen = 0;
         this.assemBuf = new byte[recordSize];
         this.recordBuf = new byte[recordSize];
@@ -104,6 +105,17 @@ public void setLongFileMode(int longFileMode) {
     }
 
 
+    @Deprecated
+    @Override
+    public int getCount() {
+        return (int) getBytesWritten();
+    }
+
+    @Override
+    public long getBytesWritten() {
+        return ((CountingOutputStream) out).getBytesWritten();
+    }
+
     /**
      * Ends the TAR archive without closing the underlying OutputStream.
      * 
@@ -324,8 +336,6 @@ public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
             numToWrite -= num;
             wOffset += num;
         }
-        
-        count(numToWrite);
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
new file mode 100644
index 00000000000..6241cde3bcd
--- /dev/null
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
@@ -0,0 +1,57 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.apache.commons.compress.archivers.tar;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+
+import org.apache.commons.compress.AbstractTestCase;
+import org.apache.commons.compress.archivers.ArchiveOutputStream;
+import org.apache.commons.compress.archivers.ArchiveStreamFactory;
+
+public class TarArchiveOutputStreamTest extends AbstractTestCase {
+
+    public void testCount() throws Exception {
+        File f = File.createTempFile("commons-compress-tarcount", ".tar");
+        f.deleteOnExit();
+        FileOutputStream fos = new FileOutputStream(f);
+
+        ArchiveOutputStream tarOut = new ArchiveStreamFactory()
+            .createArchiveOutputStream(ArchiveStreamFactory.TAR, fos);
+
+        File file1 = getFile("test1.xml");
+        TarArchiveEntry sEntry = new TarArchiveEntry(file1);
+        tarOut.putArchiveEntry(sEntry);
+
+        FileInputStream in = new FileInputStream(file1);
+        byte[] buf = new byte[8192];
+
+        int read = 0;
+        while ((read = in.read(buf)) > 0) {
+            tarOut.write(buf, 0, read);
+        }
+
+        in.close();
+        tarOut.closeArchiveEntry();
+        tarOut.close();
+
+        assertEquals(f.length(), tarOut.getBytesWritten());
+    }
+}
\ No newline at end of file
