From 00513a091d6cebf1ed4c5e2b6619dc36a4b5bbc6 Mon Sep 17 00:00:00 2001
From: Ralph Goers <rgoers@apache.org>
Date: Thu, 25 Nov 2010 21:31:30 +0000
Subject: [PATCH] Workaround for VFS-245 - equals(), hashcode() and compareTo()
 will return the same results regardless of the FileType changing

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1039191 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/AbstractFileName.java       | 97 +++++++++----------
 src/changes/changes.xml                       |  4 +
 2 files changed, 49 insertions(+), 52 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
index 0175d37b16..0a8919724d 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
@@ -42,8 +42,7 @@ public abstract class AbstractFileName implements FileName
     private String extension;
     private String decodedAbsPath;
 
-    private boolean calculateHashCode = true;
-    private int calculatedHashCode;
+    private String key = null;
 
     public AbstractFileName(final String scheme, final String absPath, FileType type)
     {
@@ -67,35 +66,27 @@ public AbstractFileName(final String scheme, final String absPath, FileType type
         }
     }
 
-    /**
-     * Returns the hashcode for this name.
-     * @return The hashCode.
-     */
     @Override
-    public int hashCode()
+    public boolean equals(Object o)
     {
-        if (calculateHashCode)
+        if (this == o)
         {
-            calculatedHashCode = getRootURI().hashCode() ^ getPath().hashCode();
-            calculateHashCode = false;
+            return true;
+        }
+        if (o == null || getClass() != o.getClass())
+        {
+            return false;
         }
-        return calculatedHashCode;
+
+        AbstractFileName that = (AbstractFileName) o;
+
+        return (getKey().equals(that.getKey()));
     }
 
-    /**
-     * Determines if this object is equal to another.
-     * @param obj The object to compare.
-     * @return true if equal, false if not.
-     */
     @Override
-    public boolean equals(final Object obj)
+    public int hashCode()
     {
-        if (!(obj instanceof AbstractFileName))
-        {
-            return false;
-        }
-        final AbstractFileName name = (AbstractFileName) obj;
-        return getRootURI().equals(name.getRootURI()) && getPath().equals(name.getPath());
+        return getKey().hashCode();
     }
 
     /**
@@ -107,21 +98,7 @@ public boolean equals(final Object obj)
     public int compareTo(FileName obj)
     {
         final AbstractFileName name = (AbstractFileName) obj;
-        int ret = getRootURI().compareTo(name.getRootURI());
-        if (ret != 0)
-        {
-            return ret;
-        }
-
-        // return absPath.compareTo(name.absPath);
-        try
-        {
-            return getPathDecoded().compareTo(name.getPathDecoded());
-        }
-        catch (FileSystemException e)
-        {
-            throw new RuntimeException(e.getMessage());
-        }
+        return getKey().compareTo(name.getKey());
     }
 
     /**
@@ -269,13 +246,41 @@ public String getURI()
     }
 
     protected String createURI()
+    {
+        return createURI(false, true);
+    }
+
+    /**
+     * Create a path that does not use the FileType since that field is not immutable.
+     * @return The key.
+     */
+    private String getKey()
+    {
+        if (key == null)
+        {
+            key = createURI(true, true);
+        }
+        return key;
+    }
+
+    /**
+     * returns a "friendly path", this is a path without a password.
+     * @return The "friendly" URI.
+     */
+    public String getFriendlyURI()
+    {
+        return createURI(false, false);
+    }
+
+    private String createURI(boolean useAbsolutePath, boolean usePassword)
     {
         final StringBuilder buffer = new StringBuilder();
-        appendRootUri(buffer, true);
-        buffer.append(getPath());
+        appendRootUri(buffer, usePassword);
+        buffer.append(useAbsolutePath ? absPath : getPath());
         return buffer.toString();
     }
 
+
     /**
      * Converts a file name to a relative name, relative to this file name.
      * @param name The FileName.
@@ -539,16 +544,4 @@ else if (scope != NameScope.FILE_SYSTEM)
 
         return true;
     }
-
-    /**
-     * returns a "friendly path", this is a path without a password.
-     * @return The "friendly" URI.
-     */
-    public String getFriendlyURI()
-    {
-        final StringBuilder buffer = new StringBuilder();
-        appendRootUri(buffer, false);
-        buffer.append(getPath());
-        return buffer.toString();
-    }
 }
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 984b846544..28a0b4ceb3 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="2.0" date="in SVN" description="">
+       <action issue="VFS-245" dev="rgoers" type="fix">
+        AbstractFileName is not immutable as it should be. equals(), hashcode() and compareTo() have been modified
+        to return the same results regardless of whether the FileType is changed. 
+      </action>
       <action issue="VFS-334" dev="sebb" type="fix" due-to="sebb">
         DefaultFileSystemConfigBuilder.getConfigClass() returns DefaultFileSystemConfigBuilder.class which is not a FileSystem
       </action>
