From f09035290b1cdcf54f40c331e8c84d925eb454b7 Mon Sep 17 00:00:00 2001
From: Bernd Eckenfels <ecki@apache.org>
Date: Wed, 23 Sep 2015 20:39:32 +0000
Subject: [PATCH] [VFS-480] Avoid leaks by startng SoftRefsReleaseThread more
 reliable.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1704932 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/vfs2/cache/SoftRefFilesCache.java | 37 ++++++++++---------
 src/changes/changes.xml                       |  3 ++
 2 files changed, 22 insertions(+), 18 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java b/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
index b86e2b4dd5..100abaf357 100644
--- a/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs2/cache/SoftRefFilesCache.java
@@ -55,8 +55,7 @@ public class SoftRefFilesCache extends AbstractFilesCache
           new HashMap<Reference<FileObject>, FileSystemAndNameKey>(100);
     private final ReferenceQueue<FileObject> refQueue = new ReferenceQueue<FileObject>();
 
-    private final AtomicReference<SoftRefReleaseThread> softRefReleaseThread =
-            new AtomicReference<SoftRefReleaseThread>();
+    private volatile SoftRefReleaseThread softRefReleaseThread = null; // @GuardedBy("lock")
 
     private final Lock lock = new ReentrantLock();
 
@@ -122,31 +121,33 @@ public SoftRefFilesCache()
 
     private void startThread()
     {
-        Thread thread;
-        SoftRefReleaseThread newThread;
-        do
+        // Double Checked Locking is allowed when volatile
+        if (softRefReleaseThread != null)
         {
-            newThread = null;
-            thread = softRefReleaseThread.get();
-            if (thread != null)
+            return;
+        }
+
+        synchronized (lock)
+        {
+            if (softRefReleaseThread == null)
             {
-                break;
+                softRefReleaseThread = new SoftRefReleaseThread();
+                softRefReleaseThread.start();
             }
-            newThread = new SoftRefReleaseThread();
-        } while (softRefReleaseThread.compareAndSet(null, newThread));
-        if (newThread != null)
-        {
-            newThread.start();
         }
     }
 
     private void endThread()
     {
-        final SoftRefReleaseThread thread = softRefReleaseThread.getAndSet(null);
-        if (thread != null)
+        synchronized (lock)
         {
-            thread.requestEnd = true;
-            thread.interrupt();
+            final SoftRefReleaseThread thread = softRefReleaseThread;
+            softRefReleaseThread = null;
+            if (thread != null)
+            {
+                thread.requestEnd = true;
+                thread.interrupt();
+            }
         }
     }
 
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 79056efea8..df85bba072 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -26,6 +26,9 @@
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
 <!--        [Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-480" dev="ecki" type="fix">
+        Make startup of SoftRefsFileCache cleaner thread work and less racy to avoid leaks.
+     </action>
       <action issue="VFS-549" dev="ecki" type="fix">
         Use File.seperator instead of getProperty("file.separator").
      </action>
