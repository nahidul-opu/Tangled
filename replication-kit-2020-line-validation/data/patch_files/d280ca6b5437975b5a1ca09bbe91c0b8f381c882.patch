From d280ca6b5437975b5a1ca09bbe91c0b8f381c882 Mon Sep 17 00:00:00 2001
From: Damjan Jovanovic <damjan@apache.org>
Date: Tue, 6 Sep 2016 17:16:48 +0000
Subject: [PATCH] IMAGING-172: Microsoft tags are not seen in MS Windows
 Properties/Details dialog

Null-terminate the XpString tag, and store it in the root directory where
Windows looks for it instead of the EXIF directory. Also deletes the
IPTC and XMP metadata which contains conflicting tags which Windows
uses instead when present.



git-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1759460 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../tiff/taginfos/TagInfoXpString.java        | 14 +++++-
 .../formats/jpeg/exif/MicrosoftTagTest.java   | 45 ++++++++++++++-----
 3 files changed, 49 insertions(+), 13 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4730adb0b..1caa08af1 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -46,6 +46,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
     <release version="1.0" date="TBA" description="First major release">
+      <action issue="IMAGING-172" dev="damjan" type="fix">
+        Microsoft tags are not seen in MS Windows Properties/Details dialog.
+      </action>
       <action issue="IMAGING-186" dev="britter" type="update" due-to="Ric Emery">
         Add sCAL support to PNG reading and writing.
       </action>
diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoXpString.java b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoXpString.java
index 25c05ca4d..0391ffb22 100644
--- a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoXpString.java
+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoXpString.java
@@ -43,7 +43,10 @@ public byte[] encodeValue(final FieldType fieldType, final Object value, final B
         }
         final String s = (String) value;
         try {
-            return s.getBytes("UTF-16LE");
+            final byte[] bytes = s.getBytes("UTF-16LE");
+            final byte[] paddedBytes = new byte[bytes.length + 2];
+            System.arraycopy(bytes, 0, paddedBytes, 0, bytes.length);
+            return paddedBytes;
         } catch (final UnsupportedEncodingException cannotHappen) {
             return null;
         }
@@ -55,7 +58,14 @@ public String getValue(final TiffField entry) throws ImageReadException {
             throw new ImageReadException("Text field not encoded as bytes.");
         }
         try {
-            return new String(entry.getByteArrayValue(), "UTF-16LE");
+            final byte[] bytes = entry.getByteArrayValue();
+            final int length;
+            if (bytes.length >= 2 && bytes[bytes.length - 1] == 0 && bytes[bytes.length - 2] == 0) {
+                length = bytes.length - 2;
+            } else {
+                length = bytes.length;
+            }
+            return new String(bytes, 0, length, "UTF-16LE");
         } catch (final UnsupportedEncodingException cannotHappen) {
             return null;
         }
diff --git a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
index 9232639a3..ca8fd9383 100644
--- a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
+++ b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
@@ -21,19 +21,27 @@
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 
 import org.apache.commons.imaging.ImageFormats;
+import org.apache.commons.imaging.ImageReadException;
+import org.apache.commons.imaging.ImageWriteException;
 import org.apache.commons.imaging.Imaging;
 import org.apache.commons.imaging.ImagingConstants;
 import org.apache.commons.imaging.common.ImageMetadata;
 import org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;
+import org.apache.commons.imaging.formats.jpeg.iptc.JpegIptcRewriter;
+import org.apache.commons.imaging.formats.jpeg.xmp.JpegXmpRewriter;
 import org.apache.commons.imaging.formats.tiff.TiffDirectory;
 import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;
 import org.apache.commons.imaging.formats.tiff.constants.MicrosoftTagConstants;
+import org.apache.commons.imaging.formats.tiff.constants.TiffTagConstants;
 import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
 import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
 import org.junit.Test;
@@ -48,11 +56,11 @@ public class MicrosoftTagTest extends ExifBaseTest {
     public void testWrite() throws Exception {
         final BufferedImage image = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB);
         final TiffOutputSet exifSet = new TiffOutputSet();
-        final TiffOutputDirectory exif = exifSet.getOrCreateExifDirectory();
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR, AUTHOR);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT, COMMENT);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT, SUBJECT);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPTITLE, TITLE);
+        final TiffOutputDirectory root = exifSet.getOrCreateRootDirectory();
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR, AUTHOR);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT, COMMENT);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT, SUBJECT);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPTITLE, TITLE);
         final Map<String, Object> params = new TreeMap<>();
         params.put(ImagingConstants.PARAM_KEY_EXIF, exifSet);
         final byte[] bytes = Imaging.writeImageToBytes(image, ImageFormats.TIFF, params);
@@ -69,17 +77,32 @@ private TiffImageMetadata toTiffMetadata(final ImageMetadata metadata) throws Ex
         }
     }
 
+    private byte[] cleanImage(File imageWithExif) throws ImageReadException, ImageWriteException, IOException {
+        // Windows doesn't show XP tags if same-meaning tags exist in IPTC or XMP. Remove them: 
+        final ByteArrayOutputStream noXmp = new ByteArrayOutputStream();
+        new JpegXmpRewriter().removeXmpXml(imageWithExif, noXmp);
+        final ByteArrayOutputStream noXmpNoIptc = new ByteArrayOutputStream();
+        new JpegIptcRewriter().removeIPTC(noXmp.toByteArray(), noXmpNoIptc);
+        return noXmpNoIptc.toByteArray();
+    }
+
     @Test
     public void testRewrite() throws Exception {
-        final File imageWithExif = getImageWithExifData();
+        final byte[] imageWithExif = cleanImage(getImageWithExifData());
+
         final TiffImageMetadata metadata = toTiffMetadata(Imaging.getMetadata(imageWithExif));
         final ExifRewriter rewriter = new ExifRewriter();
         final TiffOutputSet outputSet = metadata.getOutputSet();
-        final TiffOutputDirectory exif = outputSet.getOrCreateExifDirectory();
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR, AUTHOR);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT, COMMENT);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT, SUBJECT);
-        exif.add(MicrosoftTagConstants.EXIF_TAG_XPTITLE, TITLE);
+        final TiffOutputDirectory root = outputSet.getOrCreateRootDirectory();
+        
+        // In Windows these will also hide XP fields:
+        root.removeField(TiffTagConstants.TIFF_TAG_IMAGE_DESCRIPTION);
+        root.removeField(TiffTagConstants.TIFF_TAG_ARTIST);
+        
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR, AUTHOR);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT, COMMENT);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT, SUBJECT);
+        root.add(MicrosoftTagConstants.EXIF_TAG_XPTITLE, TITLE);
         final ByteArrayOutputStream baos = new ByteArrayOutputStream();
         rewriter.updateExifMetadataLossy(imageWithExif, baos, outputSet);
         checkFields(baos.toByteArray());
