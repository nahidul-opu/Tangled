From c2f5b0afe28af49f3b0360661545d52df70eac7e Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 20 Aug 2015 12:19:42 +0000
Subject: [PATCH] BCEL-249 Check for max Short seems wrong

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1696777 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  1 +
 .../bcel6/generic/BranchInstruction.java      |  2 +-
 .../apache/commons/bcel6/generic/GOTO.java    |  2 +-
 .../commons/bcel6/generic/Instruction.java    | 20 +++++++++++++++++++
 .../org/apache/commons/bcel6/generic/JSR.java |  2 +-
 .../apache/commons/bcel6/generic/PUSH.java    |  4 ++--
 6 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a44b280ff8..d49f7819fd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -63,6 +63,7 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="6.0" date="TBA" description="Major release with Java 7 and 8 support">
+      <action issue="BCEL-249" type="fix">Check for max Short seems wrong</action>
       <action issue="BCEL-127" type="update">Document that Instruction Factory returns singleton instances</action>
       <action issue="BCEL-198" type="update">better support for clone/copy methods</action>
       <action issue="BCEL-242" type="remove">Remove Serializable</action>
diff --git a/src/main/java/org/apache/commons/bcel6/generic/BranchInstruction.java b/src/main/java/org/apache/commons/bcel6/generic/BranchInstruction.java
index 67f149f4ae..99a56793f6 100644
--- a/src/main/java/org/apache/commons/bcel6/generic/BranchInstruction.java
+++ b/src/main/java/org/apache/commons/bcel6/generic/BranchInstruction.java
@@ -63,7 +63,7 @@ protected BranchInstruction(short opcode, InstructionHandle target) {
     public void dump( DataOutputStream out ) throws IOException {
         out.writeByte(opcode);
         index = getTargetOffset();
-        if (Math.abs(index) >= 32767) {
+        if (!isValidShort(index)) {
             throw new ClassGenException("Branch target offset too large for short: " + index);
         }
         out.writeShort(index); // May be negative, i.e., point backwards
diff --git a/src/main/java/org/apache/commons/bcel6/generic/GOTO.java b/src/main/java/org/apache/commons/bcel6/generic/GOTO.java
index baeace04aa..53a3e2c2ac 100644
--- a/src/main/java/org/apache/commons/bcel6/generic/GOTO.java
+++ b/src/main/java/org/apache/commons/bcel6/generic/GOTO.java
@@ -69,7 +69,7 @@ public void dump( DataOutputStream out ) throws IOException {
     protected int updatePosition( int offset, int max_offset ) {
         int i = getTargetOffset(); // Depending on old position value
         setGetPosition(getPosition() + offset); // Position may be shifted by preceding expansions
-        if (Math.abs(i) >= (32767 - max_offset)) { // to large for short (estimate)
+        if (Math.abs(i) >= (Short.MAX_VALUE - max_offset)) { // to large for short (estimate)
             opcode = org.apache.commons.bcel6.Constants.GOTO_W;
             short old_length = length;
             length = 5;
diff --git a/src/main/java/org/apache/commons/bcel6/generic/Instruction.java b/src/main/java/org/apache/commons/bcel6/generic/Instruction.java
index 180a3cdd2c..b2a0cab4fe 100644
--- a/src/main/java/org/apache/commons/bcel6/generic/Instruction.java
+++ b/src/main/java/org/apache/commons/bcel6/generic/Instruction.java
@@ -543,4 +543,24 @@ public boolean equals( Object that ) {
     public int hashCode() {
         return opcode;
     }
+
+    /**
+     * Check if the value can fit in a byte (signed)
+     * @param value the value to check
+     * @return true if the value is in range
+     * @since 6.0
+     */
+    public static boolean isValidByte(int value) {
+        return value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE;
+    }
+
+    /**
+     * Check if the value can fit in a short (signed)
+     * @param value the value to check
+     * @return true if the value is in range
+     * @since 6.0
+     */
+    public static boolean isValidShort(int value) {
+        return value >= Short.MIN_VALUE && value <= Short.MAX_VALUE;
+    }
 }
diff --git a/src/main/java/org/apache/commons/bcel6/generic/JSR.java b/src/main/java/org/apache/commons/bcel6/generic/JSR.java
index a8de670776..f27ba2a919 100644
--- a/src/main/java/org/apache/commons/bcel6/generic/JSR.java
+++ b/src/main/java/org/apache/commons/bcel6/generic/JSR.java
@@ -61,7 +61,7 @@ public void dump( DataOutputStream out ) throws IOException {
     protected int updatePosition( int offset, int max_offset ) {
         int i = getTargetOffset(); // Depending on old position value
         setGetPosition(getPosition() + offset); // Position may be shifted by preceding expansions
-        if (Math.abs(i) >= (32767 - max_offset)) { // to large for short (estimate)
+        if (Math.abs(i) >= (Short.MAX_VALUE - max_offset)) { // to large for short (estimate)
             opcode = org.apache.commons.bcel6.Constants.JSR_W;
             short old_length = length;
             length = 5;
diff --git a/src/main/java/org/apache/commons/bcel6/generic/PUSH.java b/src/main/java/org/apache/commons/bcel6/generic/PUSH.java
index 70831a8ddb..091e7f881d 100644
--- a/src/main/java/org/apache/commons/bcel6/generic/PUSH.java
+++ b/src/main/java/org/apache/commons/bcel6/generic/PUSH.java
@@ -39,9 +39,9 @@ public final class PUSH implements CompoundInstruction, VariableLengthInstructio
     public PUSH(ConstantPoolGen cp, int value) {
         if ((value >= -1) && (value <= 5)) {
             instruction = InstructionConstants.getInstruction(Constants.ICONST_0 + value);
-        } else if ((value >= -128) && (value <= 127)) {
+        } else if (Instruction.isValidByte(value)) {
             instruction = new BIPUSH((byte) value);
-        } else if ((value >= -32768) && (value <= 32767)) {
+        } else if (Instruction.isValidShort(value)) {
             instruction = new SIPUSH((short) value);
         } else {
             instruction = new LDC(cp.addInteger(value));
