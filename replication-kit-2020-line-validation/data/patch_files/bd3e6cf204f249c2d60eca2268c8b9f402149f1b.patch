From bd3e6cf204f249c2d60eca2268c8b9f402149f1b Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sun, 22 Apr 2018 17:44:25 +0200
Subject: [PATCH] COMPRESS-447 turn ArrayIndexOutOfBoundsExceptions into
 ZipExceptions

---
 src/changes/changes.xml                       |  5 ++++
 .../archivers/zip/ExtraFieldUtils.java        |  5 ++++
 .../archivers/zip/ExtraFieldUtilsTest.java    | 29 +++++++++++++++++++
 3 files changed, 39 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 31b2439ed78..e1d5ecc7970 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -55,6 +55,11 @@ The <action> type attribute can be add,update,fix,remove.
         Fixed some code examples.
         Github Pull Request #63.
       </action>
+      <action issue="COMPRESS-447" type="fix" date="2018-04-22">
+        Certain errors when parsing ZIP extra fields in corrupt
+        archives are now turned into ZipException, they used to
+        manifest as ArrayIndexOutOfBoundsException before.
+      </action>
     </release>
     <release version="1.16.1" date="2018-02-10"
              description="Release 1.16.1">
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
index 14691c4f891..b41dbb6ed0a 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
@@ -175,12 +175,17 @@ public static ZipExtraField[] parse(final byte[] data, final boolean local,
             }
             try {
                 final ZipExtraField ze = createExtraField(headerId);
+                try {
                 if (local) {
                     ze.parseFromLocalFileData(data, start + WORD, length);
                 } else {
                     ze.parseFromCentralDirectoryData(data, start + WORD,
                                                      length);
                 }
+                } catch (ArrayIndexOutOfBoundsException aiobe) {
+                    throw (ZipException) new ZipException("Failed to parse corrupt ZIP extra field of type "
+                        + Integer.toHexString(headerId.getValue())).initCause(aiobe);
+                }
                 v.add(ze);
             } catch (final InstantiationException | IllegalAccessException ie) {
                 throw (ZipException) new ZipException(ie.getMessage()).initCause(ie);
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
index 3803817b9d5..56b7d767a63 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
@@ -23,6 +23,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.util.zip.ZipException;
+
 /**
  * JUnit testcases for org.apache.commons.compress.archivers.zip.ExtraFieldUtils.
  *
@@ -93,6 +95,33 @@ public void testParse() throws Exception {
                          e.getMessage());
         }
     }
+
+    @Test
+    public void parseTurnsArrayIndexOutOfBoundsIntoZipException() throws Exception {
+        AsiExtraField f = new AsiExtraField();
+        f.setLinkedFile("foo");
+        byte[] l = f.getLocalFileDataData();
+        // manipulate size of path name to read 4 rather than 3
+        l[9] = 4;
+        // and fake CRC so we actually reach the AIOBE
+        l[0] = (byte) 0x52;
+        l[1] = (byte) 0x26;
+        l[2] = (byte) 0x18;
+        l[3] = (byte) 0x19;
+        byte[] d = new byte[4 + l.length];
+        System.arraycopy(f.getHeaderId().getBytes(), 0, d, 0, 2);
+        System.arraycopy(f.getLocalFileDataLength().getBytes(), 0, d, 2, 2);
+        System.arraycopy(l, 0, d, 4, l.length);
+        try {
+            ExtraFieldUtils.parse(d);
+            fail("data should be invalid");
+        } catch (final ZipException e) {
+            assertEquals("message",
+                         "Failed to parse corrupt ZIP extra field of type 756e",
+                         e.getMessage());
+        }
+    }
+
     @Test
     public void testParseCentral() throws Exception {
         final ZipExtraField[] ze = ExtraFieldUtils.parse(data,false);
