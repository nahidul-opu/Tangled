From 9657891d54264c1725ad2469d460ed192f6687c3 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 7 Jan 2010 11:26:05 +0000
Subject: [PATCH] Re-enable DBCP-318 debug to help track Java 1.5 failures with
 same symptoms

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@896848 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/dbcp/TestConnectionPool.java      | 46 +++++++++----------
 1 file changed, 23 insertions(+), 23 deletions(-)

diff --git a/src/test/org/apache/commons/dbcp/TestConnectionPool.java b/src/test/org/apache/commons/dbcp/TestConnectionPool.java
index dd155b0dc4..e93613f5d5 100644
--- a/src/test/org/apache/commons/dbcp/TestConnectionPool.java
+++ b/src/test/org/apache/commons/dbcp/TestConnectionPool.java
@@ -740,19 +740,19 @@ public void uncaughtException(Thread t, Throwable e) {
                     // Perform initial sanity check:
                     assertTrue("Expected some of the threads to fail",failed > 0);
 // DBCP-318 is now fixed, so disable extra debug
-//                    if (pts.length/2 != failed){
-//                        for (int i = 0; i < pts.length; i++) {
-//                            PoolTest pt = pts[i];
-//                            System.out.println(
-//                                    "StartupDelay: " + (pt.started-pt.created)
-//                                    + ". ConnectTime: " + (pt.connected > 0 ? Long.toString(pt.connected-pt.started) : "-")
-//                                    + ". Runtime: " + (pt.ended-pt.started)
-//                                    + ". Loops: " + pt.loops
-//                                    + ". State: " + pt.state
-//                                    + ". thrown: "+ pt.thrown
-//                                    );
-//                        }                        
-//                    }
+                    if (pts.length/2 != failed){
+                        for (int i = 0; i < pts.length; i++) {
+                            PoolTest pt = pts[i];
+                            System.out.println(
+                                    "StartupDelay: " + (pt.started-pt.created)
+                                    + ". ConnectTime: " + (pt.connected > 0 ? Long.toString(pt.connected-pt.started) : "-")
+                                    + ". Runtime: " + (pt.ended-pt.started)
+                                    + ". Loops: " + pt.loops
+                                    + ". State: " + pt.state
+                                    + ". thrown: "+ pt.thrown
+                                    );
+                        }                        
+                    }
                     assertEquals("WARNING: Expected half the threads to fail",pts.length/2,failed);
                 } else {
                     assertEquals("Did not expect any threads to fail",0,failed);
@@ -777,11 +777,11 @@ protected class PoolTest implements Runnable {
         private Throwable thrown;
 
         // Debug for DBCP-318
-//        private final long created; // When object was created
-//        private long started; // when thread started
-//        private long ended; // when thread ended
-//        private long connected; // when thread last connected
-//        private int loops = 0;
+        private final long created; // When object was created
+        private long started; // when thread started
+        private long ended; // when thread ended
+        private long connected; // when thread last connected
+        private int loops = 0;
 
         private final boolean stopOnException; // If true, don't rethrow Exception
         
@@ -797,7 +797,7 @@ public PoolTest(ThreadGroup threadGroup, int connHoldTime, boolean isStopOnExcep
             thread =
                 new Thread(threadGroup, this, "Thread+" + currentThreadCount++);
             thread.setDaemon(false);
-//            created = System.currentTimeMillis();
+            created = System.currentTimeMillis();
         }
 
         public void start(){
@@ -805,13 +805,13 @@ public void start(){
         }
 
         public void run() {
-//            started = System.currentTimeMillis();
+            started = System.currentTimeMillis();
             try {
                 while (isRun) {
-//                    loops++;
+                    loops++;
                     state = "Getting Connection";
                     Connection conn = getConnection();
-//                    connected = System.currentTimeMillis();
+                    connected = System.currentTimeMillis();
                     state = "Using Connection";
                     assertNotNull(conn);
                     PreparedStatement stmt =
@@ -837,7 +837,7 @@ public void run() {
                     throw new RuntimeException();
                 }
             } finally {
-//                ended = System.currentTimeMillis();                
+                ended = System.currentTimeMillis();                
             }
         }
 
