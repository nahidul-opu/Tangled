From 23d15f6cc39e71b31058272849c961fcca6adfe1 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 19 Sep 2014 18:08:41 +0000
Subject: [PATCH] COMPRESS-289 applies to PAX-headers as well

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1626290 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  7 ++++---
 .../archivers/tar/TarArchiveOutputStream.java  | 18 +++++++++++++++---
 .../tar/TarArchiveOutputStreamTest.java        |  2 +-
 3 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 497c9684886..5ebad516a73 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -64,9 +64,10 @@ The <action> type attribute can be add,update,fix,remove.
       </action>
       <action type="fix" date="2014-09-19" issue="COMPRESS-289"
               due-to="Bob Robertson">
-        Long-Name and -link entries in TAR archives always had the
-        current time as last modfication time, creating archives that
-        are different at a byte level each time an archive was built.
+        Long-Name and -link or PAX-header entries in TAR archives
+        always had the current time as last modfication time, creating
+        archives that are different at a byte level each time an
+        archive was built.
       </action>
     </release>
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index 077720a71cd..ecd364deaf9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -24,6 +24,7 @@
 import java.io.StringWriter;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import org.apache.commons.compress.archivers.ArchiveEntry;
@@ -297,7 +298,7 @@ && handleLongName(entry, linkName, paxHeaders, "linkpath",
         }
 
         if (paxHeaders.size() > 0) {
-            writePaxHeaders(entryName, paxHeaders);
+            writePaxHeaders(entry, entryName, paxHeaders);
         }
 
         entry.writeEntryHeader(recordBuf, encoding,
@@ -440,7 +441,8 @@ public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
-    void writePaxHeaders(String entryName,
+    void writePaxHeaders(TarArchiveEntry entry,
+                         String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
         if (name.length() >= TarConstants.NAMELEN) {
@@ -448,6 +450,7 @@ void writePaxHeaders(String entryName,
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+        transferModTime(entry, pex);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
@@ -662,7 +665,7 @@ private boolean handleLongName(TarArchiveEntry entry , String name,
                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);
 
                 longLinkEntry.setSize(len + 1); // +1 for NUL
-                longLinkEntry.setModTime(entry.getModTime());
+                transferModTime(entry, longLinkEntry);
                 putArchiveEntry(longLinkEntry);
                 write(encodedName.array(), encodedName.arrayOffset(), len);
                 write(0); // NUL terminator
@@ -675,4 +678,13 @@ private boolean handleLongName(TarArchiveEntry entry , String name,
         }
         return false;
     }
+
+    private void transferModTime(TarArchiveEntry from, TarArchiveEntry to) {
+        Date fromModTime = from.getModTime();
+        long fromModTimeSeconds = fromModTime.getTime() / 1000;
+        if (fromModTimeSeconds < 0 || fromModTimeSeconds > TarConstants.MAXSIZE) {
+            fromModTime = new Date(0);
+        }
+        to.setModTime(fromModTime);
+    }
 }
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
index f18f6a565a2..7de18ff58f5 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
@@ -188,7 +188,7 @@ public void testPaxHeadersWithLength101() throws Exception {
     private byte[] writePaxHeader(Map<String, String> m) throws Exception {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, "ASCII");
-        tos.writePaxHeaders("foo", m);
+        tos.writePaxHeaders(new TarArchiveEntry("x"), "foo", m);
 
         // add a dummy entry so data gets written
         TarArchiveEntry t = new TarArchiveEntry("foo");
