From d0af24cdff2aecc9c63affbb395759d8ab44aee4 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 7 Jan 2012 00:30:39 +0000
Subject: [PATCH] NET-422 FTP using HTTP proxy not working

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1228513 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   3 +
 .../java/examples/ftp/FTPClientExample.java   |  32 ++++-
 .../org/apache/commons/net/ftp/FTPClient.java |  12 +-
 .../apache/commons/net/ftp/FTPHTTPClient.java | 117 +++++++++++-------
 4 files changed, 113 insertions(+), 51 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 63885a2fb..6738107ba 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -59,6 +59,9 @@ The <action> type attribute can be add,update,fix,remove.
         <release version="3.1-SNAPSHOT" date="TBA" description="
 TBA
         ">
+            <action issue="NET-422" dev="sebb" type="fix" due-to="Tomas Mysik / Magnus Johansson">
+            FTP using HTTP proxy not working
+            </action>
             <action issue="NET-423" dev="sebb" type="fix" due-to="Jens Koch">
             FTPClient.storeFIle might fail when ControlKeepAliveTimeout is set (ditto for FTPCLient.retrieveFile)
             </action>
diff --git a/src/main/java/examples/ftp/FTPClientExample.java b/src/main/java/examples/ftp/FTPClientExample.java
index fd4782fd5..5025ed432 100644
--- a/src/main/java/examples/ftp/FTPClientExample.java
+++ b/src/main/java/examples/ftp/FTPClientExample.java
@@ -27,6 +27,7 @@
 import org.apache.commons.net.PrintCommandListener;
 import org.apache.commons.net.ftp.FTP;
 import org.apache.commons.net.ftp.FTPClient;
+import org.apache.commons.net.ftp.FTPHTTPClient;
 import org.apache.commons.net.ftp.FTPClientConfig;
 import org.apache.commons.net.ftp.FTPConnectionClosedException;
 import org.apache.commons.net.ftp.FTPFile;
@@ -66,6 +67,9 @@ public final class FTPClientExample
         "\t-t - list file details using MLST (remote is used as the pathname if provided)\n" +
         "\t-w msec - wait time for keep-alive reply (setControlKeepAliveReplyTimeout)\n" +
         "\t-T  all|valid|none - use one of the built-in TrustManager implementations (none = JVM default)\n" +
+        "\t-PrH server[:port] - HTTP Proxy host and optional port[80] \n" +
+        "\t-PrU user - HTTP Proxy server username\n" +
+        "\t-PrP password - HTTP Proxy server password\n" +
         "\t-# - add hash display during transfers\n";
 
     public static final void main(String[] args)
@@ -80,6 +84,10 @@ public static final void main(String[] args)
         String protocol = null; // SSL protocol
         String doCommand = null;
         String trustmgr = null;
+        String proxyHost = null;
+        int proxyPort = 80;
+        String proxyUser = null;
+        String proxyPassword = null;
 
         int base = 0;
         for (base = 0; base < args.length; base++)
@@ -138,6 +146,20 @@ else if (args[base].equals("-w")) {
             else if (args[base].equals("-T")) {
                 trustmgr = args[++base];
             }
+            else if (args[base].equals("-PrH")) {
+                proxyHost = args[++base]; 
+                String parts[] = proxyHost.split(":");
+                if (parts.length == 2){
+                    proxyHost=parts[0];
+                    proxyPort=Integer.parseInt(parts[1]);
+                }
+            }
+            else if (args[base].equals("-PrU")) {
+                proxyUser = args[++base];
+            }
+            else if (args[base].equals("-PrP")) {
+                proxyPassword = args[++base];
+            }
             else if (args[base].equals("-#")) {
                 printHash = true;
             }
@@ -175,7 +197,13 @@ else if (args[base].equals("-#")) {
 
         final FTPClient ftp;
         if (protocol == null ) {
-            ftp = new FTPClient();
+            if(proxyHost !=null) {
+                System.out.println("Using HTTP proxy server: " + proxyHost);
+                ftp = new FTPHTTPClient(proxyHost, proxyPort, proxyUser, proxyPassword);
+            }
+            else {
+                ftp = new FTPClient();
+            }
         } else {
             FTPSClient ftps;
             if (protocol.equals("true")) {
@@ -222,7 +250,7 @@ else if (args[base].equals("-#")) {
             } else {
                 ftp.connect(server);
             }
-            System.out.println("Connected to " + server + " on "+ftp.getRemotePort());
+            System.out.println("Connected to " + server + " on " + (port>0 ? port : ftp.getDefaultPort()));
 
             // After connection attempt, you should check the reply code to verify
             // success.
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index 522da96b4..eb1a68da4 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -470,7 +470,7 @@ private String __parsePathname(String reply)
     }
 
 
-    private void __parsePassiveModeReply(String reply)
+    protected void _parsePassiveModeReply(String reply)
     throws MalformedServerReplyException
     {
         java.util.regex.Matcher m = __PARMS_PAT.matcher(reply);
@@ -508,7 +508,7 @@ private void __parsePassiveModeReply(String reply)
         }
     }
 
-    private void __parseExtendedPassiveModeReply(String reply)
+    protected void _parseExtendedPassiveModeReply(String reply)
     throws MalformedServerReplyException
     {
         int port;
@@ -739,7 +739,7 @@ protected Socket _openDataConnection_(String command, String arg)
             boolean attemptEPSV = isUseEPSVwithIPv4() || isInet6Address;
             if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE)
             {
-                __parseExtendedPassiveModeReply(_replyLines.get(0));
+                _parseExtendedPassiveModeReply(_replyLines.get(0));
             }
             else
             {
@@ -750,7 +750,7 @@ protected Socket _openDataConnection_(String command, String arg)
                 if (pasv() != FTPReply.ENTERING_PASSIVE_MODE) {
                     return null;
                 }
-                __parsePassiveModeReply(_replyLines.get(0));
+                _parsePassiveModeReply(_replyLines.get(0));
             }
 
             socket = _socketFactory_.createSocket();
@@ -1174,7 +1174,7 @@ public boolean enterRemotePassiveMode() throws IOException
         }
 
         __dataConnectionMode = PASSIVE_REMOTE_DATA_CONNECTION_MODE;
-        __parsePassiveModeReply(_replyLines.get(0));
+        _parsePassiveModeReply(_replyLines.get(0));
 
         return true;
     }
@@ -2282,7 +2282,7 @@ public FTPFile[] mlistDir(String pathname, FTPFileFilter filter) throws IOExcept
      * @exception IOException  If an I/O error occurs while either sending a
      *      command to the server or receiving a reply from the server.
      ***/
-    private boolean restart(long offset) throws IOException
+    protected boolean restart(long offset) throws IOException
     {
         __restartOffset = 0;
         return FTPReply.isPositiveIntermediate(rest(Long.toString(offset)));
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
index 571e06b49..0c4adbb7c 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
@@ -23,6 +23,7 @@
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.net.Inet6Address;
 import java.net.Socket;
 import java.net.SocketException;
 import java.util.ArrayList;
@@ -33,7 +34,6 @@
 /**
  * Experimental attempt at FTP client that tunnels over an HTTP proxy connection.
  *
- * @author rory
  * @since 2.2
  */
 public class FTPHTTPClient extends FTPClient {
@@ -41,8 +41,6 @@ public class FTPHTTPClient extends FTPClient {
     private final int proxyPort;
     private final String proxyUsername;
     private final String proxyPassword;
-    private String host;
-    private int port;
 
     private final byte[] CRLF;
     private final Base64 base64 = new Base64();
@@ -66,22 +64,50 @@ public FTPHTTPClient(String proxyHost, int proxyPort) {
 
 
     @Override
-    protected Socket _openDataConnection_(int command, String arg)
+    protected Socket _openDataConnection_(int command, String arg) 
     throws IOException {
-        Socket socket = new Socket(host, port);
+        Socket socket;
+
+        //Force local passive mode, active mode not supported by through proxy
+        if (getDataConnectionMode() != PASSIVE_LOCAL_DATA_CONNECTION_MODE) {
+            enterLocalPassiveMode();
+        }
+
+        final boolean isInet6Address = getRemoteAddress() instanceof Inet6Address;
+        
+        boolean attemptEPSV = isUseEPSVwithIPv4() || isInet6Address;
+        if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE) {
+            _parseExtendedPassiveModeReply(_replyLines.get(0));
+        } else {
+            if (isInet6Address) {
+                return null; // Must use EPSV for IPV6
+            }
+            // If EPSV failed on IPV4, revert to PASV
+            if (pasv() != FTPReply.ENTERING_PASSIVE_MODE) {
+                return null;
+            }
+            _parsePassiveModeReply(_replyLines.get(0));
+        }
+
+        socket = new Socket(proxyHost, proxyPort);
         InputStream is = socket.getInputStream();
         OutputStream os = socket.getOutputStream();
+        tunnelHandshake(this.getPassiveHost(), this.getPassivePort(), is, os);
+        if ((getRestartOffset() > 0) && !restart(getRestartOffset())) {
+            socket.close();
+            return null;
+        }
 
-        tunnelHandshake(host, port, is, os);
+        if (!FTPReply.isPositivePreliminary(sendCommand(command, arg))) {
+            socket.close();
+            return null;
+        }
 
         return socket;
     }
 
     @Override
-    public void connect(String host, int port) throws SocketException,
-    IOException {
-        this.host = host;
-        this.port = port;
+    public void connect(String host, int port) throws SocketException, IOException {
 
         _socket_ = new Socket(proxyHost, proxyPort);
         _input_ = _socket_.getInputStream();
@@ -90,57 +116,62 @@ public void connect(String host, int port) throws SocketException,
             tunnelHandshake(host, port, _input_, _output_);
         }
         catch (Exception e) {
-            IOException ioe = new IOException("Could not connect to " + host);
+            IOException ioe = new IOException("Could not connect to " + host+ " using port " + port);
             ioe.initCause(e);
             throw ioe;
         }
+        super._connectAction_();
     }
 
     private void tunnelHandshake(String host, int port, InputStream input, OutputStream output) throws IOException,
     UnsupportedEncodingException {
         final String connectString = "CONNECT "  + host + ":" + port  + " HTTP/1.1";
+        final String hostString = "Host: " + host + ":" + port;
 
-        _output_.write(connectString.getBytes(getControlEncoding()));
-        _output_.write(CRLF);
+        output.write(connectString.getBytes("UTF-8"));
+        output.write(CRLF);
+        output.write(hostString.getBytes("UTF-8"));
+ 	    output.write(CRLF);
 
         if (proxyUsername != null && proxyPassword != null) {
+            final String auth = proxyUsername + ":" + proxyPassword;
             final String header = "Proxy-Authorization: Basic "
-                + base64.encode(proxyUsername + ":" + proxyPassword) + "\r\n";
-            _output_.write(header.getBytes("UTF-8"));
-            _output_.write(CRLF);
+                + base64.encodeToString(auth.getBytes("UTF-8"));
+            output.write(header.getBytes("UTF-8"));
+        }
+        output.write(CRLF);
 
-            List<String> response = new ArrayList<String>();
-            BufferedReader reader = new BufferedReader(
-                    new InputStreamReader(_input_));
+        List<String> response = new ArrayList<String>();
+        BufferedReader reader = new BufferedReader(
+                new InputStreamReader(input));
 
-            for (String line = reader.readLine(); line != null
-            && line.length() > 0; line = reader.readLine()) {
-                response.add(line);
-            }
+        for (String line = reader.readLine(); line != null
+        && line.length() > 0; line = reader.readLine()) {
+            response.add(line);
+        }
 
-            int size = response.size();
-            if (size == 0) {
-                throw new IOException("No response from proxy");
-            }
+        int size = response.size();
+        if (size == 0) {
+            throw new IOException("No response from proxy");
+        }
 
-            String code = null;
-            String resp = response.get(0);
-            if (resp.startsWith("HTTP/") && resp.length() >= 12) {
-                code = resp.substring(9, 12);
-            } else {
-                throw new IOException("Invalid response from proxy: " + resp);
-            }
+        String code = null;
+        String resp = response.get(0);
+        if (resp.startsWith("HTTP/") && resp.length() >= 12) {
+            code = resp.substring(9, 12);
+        } else {
+            throw new IOException("Invalid response from proxy: " + resp);
+        }
 
-            if (!"200".equals(code)) {
-                StringBuilder msg = new StringBuilder();
-                msg.append("HTTPTunnelConnector: connection failed\r\n");
-                msg.append("Response received from the proxy:\r\n");
-                for (String line : response) {
-                    msg.append(line);
-                    msg.append("\r\n");
-                }
-                throw new IOException(msg.toString());
+        if (!"200".equals(code)) {
+            StringBuilder msg = new StringBuilder();
+            msg.append("HTTPTunnelConnector: connection failed\r\n");
+            msg.append("Response received from the proxy:\r\n");
+            for (String line : response) {
+                msg.append(line);
+                msg.append("\r\n");
             }
+            throw new IOException(msg.toString());
         }
     }
 }
