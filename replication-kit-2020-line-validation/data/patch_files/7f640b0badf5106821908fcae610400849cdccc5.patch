From 7f640b0badf5106821908fcae610400849cdccc5 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Wed, 9 Jun 2010 18:40:35 +0000
Subject: [PATCH] FIX: Namespace rules not properly applied to parent projects
 (IVY-1186)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@953111 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../cache/DefaultRepositoryCacheManager.java  | 21 ++++---
 .../ivy/core/cache/ParserSettingsMonitor.java |  4 ++
 .../apache/ivy/core/settings/IvySettings.java |  5 +-
 .../parser/ModuleDescriptorParser.java        |  2 +-
 .../ivy/plugins/parser/ParserSettings.java    |  6 ++
 .../parser/m2/PomModuleDescriptorParser.java  |  4 +-
 .../ivy/plugins/parser/m2/PomReader.java      |  6 +-
 .../parser/xml/XmlModuleDescriptorParser.java |  2 +
 .../plugins/resolver/AbstractResolver.java    | 62 +++++++++++++++++++
 .../plugins/resolver/RepositoryResolver.java  |  2 +-
 .../apache/ivy/core/resolve/ResolveTest.java  | 48 ++++++++++++++
 .../parentPom/ivysettings-namespace.xml       | 43 +++++++++++++
 13 files changed, 193 insertions(+), 13 deletions(-)
 create mode 100644 test/repositories/parentPom/ivysettings-namespace.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index aad2ebc9d..4a79aeff7 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -126,6 +126,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Trace a message when a property file referenced from the settings doesn't exixts (IVY-1074)
 - IMPROVEMENT: use defaultconf in combination with defaultconfmapping (IVY-1135) (thanks to Jon Schneider)
 
+- FIX: Namespace rules not properly applied to parent projects (IVY-1186)
 - FIX: LatestVersionMatcher.needModuleDescriptor() does not honor custom statuses (IVY-1170) (thanks to Carl Quinn)
 - FIX: Proxy authentication could fail when using commons-httpclient 
 - FIX: Packager resolver always extracts all files from archives even when the packaging instructions contains include tags (IVY-1179) (thanks to Stefan De Boey)
diff --git a/src/java/org/apache/ivy/core/cache/DefaultRepositoryCacheManager.java b/src/java/org/apache/ivy/core/cache/DefaultRepositoryCacheManager.java
index d62331575..acf67ad0e 100644
--- a/src/java/org/apache/ivy/core/cache/DefaultRepositoryCacheManager.java
+++ b/src/java/org/apache/ivy/core/cache/DefaultRepositoryCacheManager.java
@@ -52,6 +52,7 @@
 import org.apache.ivy.plugins.repository.Resource;
 import org.apache.ivy.plugins.repository.ResourceDownloader;
 import org.apache.ivy.plugins.repository.ResourceHelper;
+import org.apache.ivy.plugins.resolver.AbstractResolver;
 import org.apache.ivy.plugins.resolver.DependencyResolver;
 import org.apache.ivy.plugins.resolver.util.ResolvedResource;
 import org.apache.ivy.util.Checks;
@@ -646,14 +647,16 @@ private ResolvedModuleRevision doFindModuleInCache(
     private class MyModuleDescriptorProvider implements ModuleDescriptorProvider {
         
         private final ModuleDescriptorParser mdParser;
+        private final ParserSettings settings;
 
-        public MyModuleDescriptorProvider(ModuleDescriptorParser mdParser) {
-            this.mdParser = mdParser;            
+        public MyModuleDescriptorProvider(ModuleDescriptorParser mdParser, ParserSettings settings) {
+            this.mdParser = mdParser;
+            this.settings = settings;
         }
         
         public ModuleDescriptor provideModule(ParserSettings ivySettings, 
                 File descriptorURL, boolean validate) throws ParseException, IOException {
-            return mdParser.parseDescriptor(ivySettings, descriptorURL.toURI().toURL(), validate);
+            return mdParser.parseDescriptor(settings, descriptorURL.toURI().toURL(), validate);
         }
     }
     
@@ -661,15 +664,15 @@ private ModuleDescriptor getMdFromCache(XmlModuleDescriptorParser mdParser,
             CacheMetadataOptions options, File ivyFile) 
             throws ParseException, IOException {
         ModuleDescriptorMemoryCache cache = getMemoryCache();
-        ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider(mdParser); 
+        ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider(mdParser, settings); 
         return cache.get(ivyFile, settings, options.isValidate(), mdProvider);
     }
 
     private ModuleDescriptor getStaledMd(ModuleDescriptorParser mdParser, 
-            CacheMetadataOptions options, File ivyFile) 
+            CacheMetadataOptions options, File ivyFile, ParserSettings parserSettings) 
             throws ParseException, IOException {
         ModuleDescriptorMemoryCache cache = getMemoryCache();
-        ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider(mdParser); 
+        ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider(mdParser, parserSettings); 
         return cache.getStale(ivyFile, settings, options.isValidate(), mdProvider);
     }
 
@@ -983,7 +986,11 @@ public ResolvedResource resolve(Artifact artifact) {
             try {
                 ModuleDescriptorParser parser = ModuleDescriptorParserRegistry
                         .getInstance().getParser(mdRef.getResource());
-                ModuleDescriptor md = getStaledMd(parser, options, report.getLocalFile()); 
+                ParserSettings parserSettings = settings;
+                if (resolver instanceof AbstractResolver) {
+                    parserSettings = ((AbstractResolver) resolver).getParserSettings();
+                }
+                ModuleDescriptor md = getStaledMd(parser, options, report.getLocalFile(), parserSettings); 
                 if (md == null) {
                     throw new IllegalStateException(
                         "module descriptor parser returned a null module descriptor, " 
diff --git a/src/java/org/apache/ivy/core/cache/ParserSettingsMonitor.java b/src/java/org/apache/ivy/core/cache/ParserSettingsMonitor.java
index 7f9f59f74..97691a297 100644
--- a/src/java/org/apache/ivy/core/cache/ParserSettingsMonitor.java
+++ b/src/java/org/apache/ivy/core/cache/ParserSettingsMonitor.java
@@ -131,6 +131,10 @@ public String getDefaultBranch(ModuleId moduleId) {
             return delegatedSettings.getDefaultBranch(moduleId);
         }
 
+        public Namespace getContextNamespace() {
+            return delegatedSettings.getContextNamespace();
+        }
+        
         public Map substitute(Map strings) {
             Map substituted = new LinkedHashMap();
             for (Iterator it = strings.entrySet().iterator(); it.hasNext();) {
diff --git a/src/java/org/apache/ivy/core/settings/IvySettings.java b/src/java/org/apache/ivy/core/settings/IvySettings.java
index 6a7c70926..63999c66d 100644
--- a/src/java/org/apache/ivy/core/settings/IvySettings.java
+++ b/src/java/org/apache/ivy/core/settings/IvySettings.java
@@ -1460,5 +1460,8 @@ private void validateAll(Collection values) {
         }
     }
 
-    
+    public Namespace getContextNamespace() {
+        return Namespace.SYSTEM_NAMESPACE;
+    }
+
 }
diff --git a/src/java/org/apache/ivy/plugins/parser/ModuleDescriptorParser.java b/src/java/org/apache/ivy/plugins/parser/ModuleDescriptorParser.java
index 456ddcab1..8f4d74443 100644
--- a/src/java/org/apache/ivy/plugins/parser/ModuleDescriptorParser.java
+++ b/src/java/org/apache/ivy/plugins/parser/ModuleDescriptorParser.java
@@ -34,7 +34,7 @@ public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descript
 
     public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descriptorURL,
             Resource res, boolean validate) throws ParseException, IOException;
-
+    
     /**
      * Convert a module descriptor to an ivy file. This method MUST close the given input stream
      * when job is finished
diff --git a/src/java/org/apache/ivy/plugins/parser/ParserSettings.java b/src/java/org/apache/ivy/plugins/parser/ParserSettings.java
index 954862b12..3819227ca 100644
--- a/src/java/org/apache/ivy/plugins/parser/ParserSettings.java
+++ b/src/java/org/apache/ivy/plugins/parser/ParserSettings.java
@@ -28,6 +28,7 @@
 import org.apache.ivy.plugins.conflict.ConflictManager;
 import org.apache.ivy.plugins.matcher.PatternMatcher;
 import org.apache.ivy.plugins.namespace.Namespace;
+import org.apache.ivy.plugins.namespace.NamespaceTransformer;
 import org.apache.ivy.plugins.resolver.DependencyResolver;
 
 public interface ParserSettings {
@@ -53,5 +54,10 @@ public interface ParserSettings {
     File resolveFile(String filename);
     
     String getDefaultBranch(ModuleId moduleId);
+    
+    /**
+     * Returns the namespace context in which the current descriptor is parsed.
+     */
+    Namespace getContextNamespace();
 
 }
diff --git a/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorParser.java b/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorParser.java
index ed6c43eaa..8f63fc03f 100644
--- a/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorParser.java
+++ b/src/java/org/apache/ivy/plugins/parser/m2/PomModuleDescriptorParser.java
@@ -41,6 +41,7 @@
 import org.apache.ivy.core.resolve.ResolveEngine;
 import org.apache.ivy.core.resolve.ResolveOptions;
 import org.apache.ivy.core.resolve.ResolvedModuleRevision;
+import org.apache.ivy.plugins.namespace.NameSpaceHelper;
 import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
 import org.apache.ivy.plugins.parser.ParserSettings;
 import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
@@ -114,7 +115,7 @@ public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descript
                                                                     this, res, ivySettings);
         
         try {           
-            PomReader domReader = new PomReader(res);            
+            PomReader domReader = new PomReader(descriptorURL, res);            
             domReader.setProperty("parent.version", domReader.getParentVersion());
             domReader.setProperty("parent.groupId", domReader.getParentGroupId());
             domReader.setProperty("project.parent.version", domReader.getParentVersion());
@@ -348,6 +349,7 @@ private ResolvedModuleRevision parseOtherPom(ParserSettings ivySettings,
             // TODO: Throw exception here?
             return null;
         } else {
+            dd = NameSpaceHelper.toSystem(dd, ivySettings.getContextNamespace());
             ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);
             return otherModule;
         }
diff --git a/src/java/org/apache/ivy/plugins/parser/m2/PomReader.java b/src/java/org/apache/ivy/plugins/parser/m2/PomReader.java
index ec1b6dd73..bc5df1dc3 100644
--- a/src/java/org/apache/ivy/plugins/parser/m2/PomReader.java
+++ b/src/java/org/apache/ivy/plugins/parser/m2/PomReader.java
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.LineNumberReader;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -37,6 +38,7 @@
 import org.apache.ivy.core.module.id.ModuleRevisionId;
 import org.apache.ivy.plugins.repository.Resource;
 import org.apache.ivy.util.XMLHelper;
+import org.apache.ivy.util.url.URLHandlerRegistry;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -87,8 +89,8 @@ public class PomReader {
     private final Element projectElement;
     private final Element parentElement;
     
-    public PomReader(Resource res) throws IOException, SAXException {
-        InputStream stream = new AddDTDFilterInputStream(res.openStream());
+    public PomReader(URL descriptorURL, Resource res) throws IOException, SAXException {
+        InputStream stream = new AddDTDFilterInputStream(URLHandlerRegistry.getDefault().openStream(descriptorURL));
         try {
             Document pomDomDoc = XMLHelper.parseToDom(stream, res, new EntityResolver() {
                 public InputSource resolveEntity(String publicId, String systemId) 
diff --git a/src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java b/src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java
index 0bb7ca652..b4e9db6ea 100644
--- a/src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java
+++ b/src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java
@@ -44,6 +44,7 @@
 import org.apache.ivy.plugins.conflict.ConflictManager;
 import org.apache.ivy.plugins.conflict.FixedConflictManager;
 import org.apache.ivy.plugins.matcher.PatternMatcher;
+import org.apache.ivy.plugins.namespace.NameSpaceHelper;
 import org.apache.ivy.plugins.namespace.Namespace;
 import org.apache.ivy.plugins.parser.AbstractModuleDescriptorParser;
 import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
@@ -572,6 +573,7 @@ protected ModuleDescriptor parseOtherIvyFile(String parentOrganisation,
                 // TODO: Throw exception here?
                 return null;
             } else {
+                dd = NameSpaceHelper.toSystem(dd, getSettings().getContextNamespace());
                 ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);
                 if (otherModule == null) {
                     throw new ParseException("Unable to find " + parentMrid.toString(), 0);
diff --git a/src/java/org/apache/ivy/plugins/resolver/AbstractResolver.java b/src/java/org/apache/ivy/plugins/resolver/AbstractResolver.java
index dc72738af..cdbf00369 100644
--- a/src/java/org/apache/ivy/plugins/resolver/AbstractResolver.java
+++ b/src/java/org/apache/ivy/plugins/resolver/AbstractResolver.java
@@ -25,11 +25,13 @@
 
 import org.apache.ivy.core.IvyContext;
 import org.apache.ivy.core.LogOptions;
+import org.apache.ivy.core.RelativeUrlResolver;
 import org.apache.ivy.core.cache.ArtifactOrigin;
 import org.apache.ivy.core.cache.CacheDownloadOptions;
 import org.apache.ivy.core.cache.CacheMetadataOptions;
 import org.apache.ivy.core.cache.DownloadListener;
 import org.apache.ivy.core.cache.RepositoryCacheManager;
+import org.apache.ivy.core.cache.ResolutionCacheManager;
 import org.apache.ivy.core.event.EventManager;
 import org.apache.ivy.core.event.download.EndArtifactDownloadEvent;
 import org.apache.ivy.core.event.download.NeedArtifactEvent;
@@ -37,7 +39,9 @@
 import org.apache.ivy.core.module.descriptor.Artifact;
 import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
 import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
+import org.apache.ivy.core.module.id.ModuleId;
 import org.apache.ivy.core.module.id.ModuleRevisionId;
+import org.apache.ivy.core.module.status.StatusManager;
 import org.apache.ivy.core.report.ArtifactDownloadReport;
 import org.apache.ivy.core.report.DownloadReport;
 import org.apache.ivy.core.report.DownloadStatus;
@@ -51,10 +55,13 @@
 import org.apache.ivy.core.search.OrganisationEntry;
 import org.apache.ivy.core.search.RevisionEntry;
 import org.apache.ivy.core.settings.Validatable;
+import org.apache.ivy.plugins.conflict.ConflictManager;
 import org.apache.ivy.plugins.latest.ArtifactInfo;
 import org.apache.ivy.plugins.latest.LatestStrategy;
+import org.apache.ivy.plugins.matcher.PatternMatcher;
 import org.apache.ivy.plugins.namespace.NameSpaceHelper;
 import org.apache.ivy.plugins.namespace.Namespace;
+import org.apache.ivy.plugins.parser.ParserSettings;
 import org.apache.ivy.plugins.resolver.ChainResolver.ResolvedModuleRevisionArtifactInfo;
 import org.apache.ivy.plugins.resolver.util.HasLatestStrategy;
 import org.apache.ivy.plugins.resolver.util.ResolvedResource;
@@ -107,6 +114,10 @@ public abstract class AbstractResolver
     public ResolverSettings getSettings() {
         return settings;
     }
+    
+    public ParserSettings getParserSettings() {
+        return new ResolverParserSettings();
+    }
 
     public void setSettings(ResolverSettings ivy) {
         settings = ivy;
@@ -551,4 +562,55 @@ private String describe(ResolvedModuleRevision rmr) {
             + rmr.getResolver().getName();
     }
 
+    private class ResolverParserSettings implements ParserSettings {
+
+        public ConflictManager getConflictManager(String name) {
+            return AbstractResolver.this.getSettings().getConflictManager(name);
+        }
+
+        public Namespace getContextNamespace() {
+            return AbstractResolver.this.getNamespace();
+        }
+
+        public String getDefaultBranch(ModuleId moduleId) {
+            return AbstractResolver.this.getSettings().getDefaultBranch(moduleId);
+        }
+
+        public PatternMatcher getMatcher(String matcherName) {
+            return AbstractResolver.this.getSettings().getMatcher(matcherName);
+        }
+
+        public Namespace getNamespace(String namespace) {
+            return AbstractResolver.this.getSettings().getNamespace(namespace);
+        }
+
+        public RelativeUrlResolver getRelativeUrlResolver() {
+            return AbstractResolver.this.getSettings().getRelativeUrlResolver();
+        }
+
+        public ResolutionCacheManager getResolutionCacheManager() {
+            return AbstractResolver.this.getSettings().getResolutionCacheManager();
+        }
+
+        public DependencyResolver getResolver(ModuleRevisionId mRevId) {
+            return AbstractResolver.this.getSettings().getResolver(mRevId);
+        }
+
+        public StatusManager getStatusManager() {
+            return AbstractResolver.this.getSettings().getStatusManager();
+        }
+
+        public File resolveFile(String filename) {
+            return AbstractResolver.this.getSettings().resolveFile(filename);
+        }
+
+        public Map substitute(Map strings) {
+            return AbstractResolver.this.getSettings().substitute(strings);
+        }
+
+        public String substitute(String value) {
+            return AbstractResolver.this.getSettings().substitute(value);
+        }
+        
+    }
 }
diff --git a/src/java/org/apache/ivy/plugins/resolver/RepositoryResolver.java b/src/java/org/apache/ivy/plugins/resolver/RepositoryResolver.java
index 45f9d4442..a79c709b6 100644
--- a/src/java/org/apache/ivy/plugins/resolver/RepositoryResolver.java
+++ b/src/java/org/apache/ivy/plugins/resolver/RepositoryResolver.java
@@ -101,7 +101,7 @@ protected ResolvedResource findResourceUsingPattern(ModuleRevisionId mrid, Strin
                                 ModuleDescriptorParserRegistry.getInstance().getParser(res);
                             ModuleDescriptor md = 
                                 parser.parseDescriptor(
-                                    getSettings(), temp.toURI().toURL(), res, false);
+                                    getParserSettings(), temp.toURI().toURL(), res, false);
                             revision = md.getRevision();
                             if ((revision == null) || (revision.length() == 0)) {
                                 revision = "working@" + name;
diff --git a/test/java/org/apache/ivy/core/resolve/ResolveTest.java b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
index 41d62b17f..5adf2cb0d 100644
--- a/test/java/org/apache/ivy/core/resolve/ResolveTest.java
+++ b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
@@ -4305,6 +4305,54 @@ public void testResolveMaven2ParentPomChainResolver() throws Exception {
             "test3", "jar", "jar").exists());
     }
     
+    public void testResolveMaven2ParentPomWithNamespace() throws Exception {
+        // Cfr IVY-1186
+        Ivy ivy = new Ivy();
+        ivy.configure(new File("test/repositories/parentPom/ivysettings-namespace.xml"));
+        
+        ResolveReport report = ivy.resolve(ModuleRevisionId.newInstance("org.apache.systemDm", "test", "1.0"),
+            getResolveOptions(new String[] {"*(public)"}), true);
+        assertNotNull(report);
+        ModuleDescriptor md = report.getModuleDescriptor();
+        assertNotNull(md);
+//        assertEquals(mrid, md.getModuleRevisionId());
+//        assertTrue(getResolvedIvyFileInCache(mrid).exists());
+
+        //test the report to make sure the right dependencies are listed
+        List dependencies = report.getDependencies();
+        assertEquals(3, dependencies.size()); // the test module + it's 2 dependencies
+
+        IvyNode ivyNode = (IvyNode) dependencies.get(0);
+        assertNotNull(ivyNode);
+        ModuleRevisionId mrid = ModuleRevisionId.newInstance("org.apache.systemDm", "test", "1.0");
+        assertEquals(mrid, ivyNode.getId());
+        // dependencies
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org.apache.systemDm", "test", "1.0")).exists());
+        assertTrue(getArchiveFileInCache(ivy, "org.apache.systemDm", "test", "1.0",
+            "test", "jar", "jar").exists());
+
+        ivyNode = (IvyNode) dependencies.get(1);
+        assertNotNull(ivyNode);
+        mrid = ModuleRevisionId.newInstance("org.apache.systemDm", "test2", "2.0");
+        assertEquals(mrid, ivyNode.getId());
+        // dependencies
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org.apache.systemDm", "test2", "2.0")).exists());
+        assertTrue(getArchiveFileInCache(ivy, "org.apache.systemDm", "test2", "2.0",
+            "test2", "jar", "jar").exists());
+        
+        ivyNode = (IvyNode) dependencies.get(2);
+        assertNotNull(ivyNode);
+        mrid = ModuleRevisionId.newInstance("org.apache.systemDm", "test3", "1.0");
+        assertEquals(mrid, ivyNode.getId());
+        // dependencies
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org.apache.systemDm", "test3", "1.0")).exists());
+        assertTrue(getArchiveFileInCache(ivy, "org.apache.systemDm", "test3", "1.0",
+            "test3", "jar", "jar").exists());
+    }
+
     public void testResolveMaven2ParentPomDualResolver() throws Exception {
         // test has a dependency on test2 but there is no version listed. test has a parent of parent(2.0) 
         // then parent2. Both parents have a dependencyManagement element for test2, and each list the version as
diff --git a/test/repositories/parentPom/ivysettings-namespace.xml b/test/repositories/parentPom/ivysettings-namespace.xml
new file mode 100644
index 000000000..329a4a41a
--- /dev/null
+++ b/test/repositories/parentPom/ivysettings-namespace.xml
@@ -0,0 +1,43 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
+<ivysettings>
+	<settings defaultCache="${ivy.basedir}/build/cache" defaultResolver="default" />
+	<resolvers>
+        <chain name="default">
+            <filesystem name="m2" m2compatible="true" namespace="test">
+                <ivy pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/[module]-[revision].pom"/>
+                <artifact pattern="${ivy.settings.dir}/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"/>
+            </filesystem>
+        </chain>
+	</resolvers>
+    <namespaces>
+       <namespace name="test">
+            <rule>
+                <fromsystem>
+                    <src org="(org\.apache).systemDm" module=".*" />
+                    <dest org="$o1.dm" module="$m0" />
+                </fromsystem>
+                <tosystem>
+                    <src org="(org\.apache)\.dm" module=".*" />
+                    <dest org="$o1.systemDm" module="$m0" />
+                </tosystem>
+            </rule>t
+        </namespace>
+    </namespaces>
+</ivysettings>
