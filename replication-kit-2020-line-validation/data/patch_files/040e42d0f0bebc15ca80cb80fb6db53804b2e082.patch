From 040e42d0f0bebc15ca80cb80fb6db53804b2e082 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 8 Aug 2013 16:18:45 +0000
Subject: [PATCH] COMPRESS-236 - CpioArchiveInputStream doesn't like Redline
 RPM's archives.  Patch by Andrew Duffy

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1511850 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                         |   7 ++++++-
 .../archivers/cpio/CpioArchiveEntry.java        |  16 ++++++++--------
 .../archivers/cpio/CpioArchiveInputStream.java  |  12 ++++++------
 .../compress/archivers/cpio/CpioUtil.java       |   8 ++++++++
 .../cpio/CpioArchiveInputStreamTest.java        |  14 ++++++++++++++
 src/test/resources/redline.cpio                 | Bin 0 -> 268 bytes
 6 files changed, 42 insertions(+), 15 deletions(-)
 create mode 100644 src/test/resources/redline.cpio

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 8d6e78560cd..91ff6a5a412 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -80,11 +80,16 @@ The <action> type attribute can be add,update,fix,remove.
               due-to="BELUGA BEHR">
         Readabilty patch to TarArchiveInputStream.
       </action>
-      <action type="update" date="2013-07-08" issue="COMPRESS-234"
+      <action type="update" date="2013-08-08" issue="COMPRESS-234"
               due-to="BELUGA BEHR">
         Performance improvements to TarArchiveInputStream, in
         particular to the skip method.
       </action>
+      <action type="fix" date="2013-08-08" issue="COMPRESS-236"
+              due-to="Andrew Duffy">
+        CpioArchiveInputStream failed to read archives created by
+        Redline RPM.
+      </action>
     </release>
     <release version="1.5" date="2013-03-14"
              description="Release 1.5">
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
index cd10b78ee0a..0dea7a978b4 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
@@ -596,7 +596,7 @@ public long getUID() {
      * @return TRUE if this entry is a block device.
      */
     public boolean isBlockDevice() {
-        return (this.mode & S_IFMT) == C_ISBLK;
+        return CpioUtil.fileType(mode) == C_ISBLK;
     }
 
     /**
@@ -605,7 +605,7 @@ public boolean isBlockDevice() {
      * @return TRUE if this entry is a character device.
      */
     public boolean isCharacterDevice() {
-        return (this.mode & S_IFMT) == C_ISCHR;
+        return CpioUtil.fileType(mode) == C_ISCHR;
     }
 
     /**
@@ -614,7 +614,7 @@ public boolean isCharacterDevice() {
      * @return TRUE if this entry is a directory.
      */
     public boolean isDirectory() {
-        return (this.mode & S_IFMT) == C_ISDIR;
+        return CpioUtil.fileType(mode) == C_ISDIR;
     }
 
     /**
@@ -623,7 +623,7 @@ public boolean isDirectory() {
      * @return TRUE if this entry is a network device.
      */
     public boolean isNetwork() {
-        return (this.mode & S_IFMT) == C_ISNWK;
+        return CpioUtil.fileType(mode) == C_ISNWK;
     }
 
     /**
@@ -632,7 +632,7 @@ public boolean isNetwork() {
      * @return TRUE if this entry is a pipe.
      */
     public boolean isPipe() {
-        return (this.mode & S_IFMT) == C_ISFIFO;
+        return CpioUtil.fileType(mode) == C_ISFIFO;
     }
 
     /**
@@ -641,7 +641,7 @@ public boolean isPipe() {
      * @return TRUE if this entry is a regular file.
      */
     public boolean isRegularFile() {
-        return (this.mode & S_IFMT) == C_ISREG;
+        return CpioUtil.fileType(mode) == C_ISREG;
     }
 
     /**
@@ -650,7 +650,7 @@ public boolean isRegularFile() {
      * @return TRUE if this entry is a socket.
      */
     public boolean isSocket() {
-        return (this.mode & S_IFMT) == C_ISSOCK;
+        return CpioUtil.fileType(mode) == C_ISSOCK;
     }
 
     /**
@@ -659,7 +659,7 @@ public boolean isSocket() {
      * @return TRUE if this entry is a symbolic link.
      */
     public boolean isSymbolicLink() {
-        return (this.mode & S_IFMT) == C_ISLNK;
+        return CpioUtil.fileType(mode) == C_ISLNK;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
index 3678dfdb70b..664d0e6db7f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
@@ -328,7 +328,7 @@ private CpioArchiveEntry readNewEntry(final boolean hasCrc)
 
         ret.setInode(readAsciiLong(8, 16));
         long mode = readAsciiLong(8, 16);
-        if (mode != 0){ // mode is initialised to 0
+        if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0
             ret.setMode(mode);
         }
         ret.setUID(readAsciiLong(8, 16));
@@ -344,7 +344,7 @@ private CpioArchiveEntry readNewEntry(final boolean hasCrc)
         ret.setChksum(readAsciiLong(8, 16));
         String name = readCString((int) namesize);
         ret.setName(name);
-        if (mode == 0 && !name.equals(CPIO_TRAILER)){
+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry name: "+name + " Occured at byte: " + getBytesRead());
         }
         skip(ret.getHeaderPadCount());
@@ -358,7 +358,7 @@ private CpioArchiveEntry readOldAsciiEntry() throws IOException {
         ret.setDevice(readAsciiLong(6, 8));
         ret.setInode(readAsciiLong(6, 8));
         final long mode = readAsciiLong(6, 8);
-        if (mode != 0) {
+        if (CpioUtil.fileType(mode) != 0) {
             ret.setMode(mode);
         }
         ret.setUID(readAsciiLong(6, 8));
@@ -370,7 +370,7 @@ private CpioArchiveEntry readOldAsciiEntry() throws IOException {
         ret.setSize(readAsciiLong(11, 8));
         final String name = readCString((int) namesize);
         ret.setName(name);
-        if (mode == 0 && !name.equals(CPIO_TRAILER)){
+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry: "+ name + " Occured at byte: " + getBytesRead());
         }
 
@@ -384,7 +384,7 @@ private CpioArchiveEntry readOldBinaryEntry(final boolean swapHalfWord)
         ret.setDevice(readBinaryLong(2, swapHalfWord));
         ret.setInode(readBinaryLong(2, swapHalfWord));
         final long mode = readBinaryLong(2, swapHalfWord);
-        if (mode != 0){
+        if (CpioUtil.fileType(mode) != 0){
             ret.setMode(mode);
         }
         ret.setUID(readBinaryLong(2, swapHalfWord));
@@ -396,7 +396,7 @@ private CpioArchiveEntry readOldBinaryEntry(final boolean swapHalfWord)
         ret.setSize(readBinaryLong(4, swapHalfWord));
         final String name = readCString((int) namesize);
         ret.setName(name);
-        if (mode == 0 && !name.equals(CPIO_TRAILER)){
+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry: "+name + "Occured at byte: " + getBytesRead());
         }
         skip(ret.getHeaderPadCount());
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
index e214826b20b..26b51fc48b9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
@@ -24,6 +24,14 @@
  * @Immutable
  */
 class CpioUtil {
+
+    /**
+     * Extracts the file type bits from a mode.
+     */
+    static long fileType(long mode) {
+        return mode & CpioConstants.S_IFMT;
+    }
+
     /**
      * Converts a byte array to a long. Halfwords can be swapped by setting
      * swapHalfWord=true.
diff --git a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java
index b87d004f1a4..e7112df4920 100644
--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java
@@ -45,4 +45,18 @@ public void testCpioUnarchive() throws Exception {
         in.close();
         assertEquals(result.toString(), expected.toString());
     }
+
+    public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {
+        CpioArchiveInputStream in =
+            new CpioArchiveInputStream(new FileInputStream(getFile("redline.cpio")));
+        CpioArchiveEntry entry= null;
+
+        int count = 0;
+        while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {
+            count++;
+        }
+        in.close();
+
+        assertEquals(count, 1);
+    }
 }
diff --git a/src/test/resources/redline.cpio b/src/test/resources/redline.cpio
new file mode 100644
index 0000000000000000000000000000000000000000..f754d73ab1a26d887abe17e31cd054ec917fddda
GIT binary patch
literal 268
zcmXpoH!wFaG=KmwZDE*b0_CGqhNgyTN#?0(Mo@`lC~XO)VdkLeGc<z<=;@c_7U*ZB
z=H%qZm**Gdr0A7YlrVUJ_zK}5z9P^y2=_p=;c*YlTr`@1dkm6b>O+DYJ$+n*6crU2
GfB*m)0y*&j

literal 0
HcmV?d00001

