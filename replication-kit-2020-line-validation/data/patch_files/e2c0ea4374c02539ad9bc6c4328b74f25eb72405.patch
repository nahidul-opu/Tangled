From e2c0ea4374c02539ad9bc6c4328b74f25eb72405 Mon Sep 17 00:00:00 2001
From: The Datalorax <datalorax@gmail.com>
Date: Tue, 28 Apr 2015 21:07:21 +0100
Subject: [PATCH] #LAN-1114 fixes bug in TypeUtils.equals(WildcardType, Type)
 where it was incorrectly returning true when the second argument was not a
 Wildcard type.

---
 .../org/apache/commons/lang3/reflect/TypeUtils.java   |  2 +-
 .../apache/commons/lang3/reflect/TypeUtilsTest.java   | 11 +++++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
index 1a750e97dfb..91313c6a473 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -1626,7 +1626,7 @@ private static boolean equals(final WildcardType w, final Type t) {
             return equals(getImplicitLowerBounds(w), getImplicitLowerBounds(other))
                 && equals(getImplicitUpperBounds(w), getImplicitUpperBounds(other));
         }
-        return true;
+        return false;
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
index 60c8b4897b5..56b23a2411a 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -97,6 +97,8 @@ public class Tester implements This<String, B> {
 
     public static Comparable<Long> longComparable;
 
+    public static Comparable<?> wildcardComparable;
+
     public static URI uri;
 
     public void dummyMethod(final List list0, final List<Object> list1, final List<?> list2,
@@ -722,6 +724,15 @@ public void testLowerBoundedWildcardType() {
        Assert.assertEquals(String.format("? super %s", iterableT0.getName()), lowerTypeVariable.toString());
     }
 
+    @Test
+    public void testLang1114() throws Exception {
+        final Type nonWildcardType = getClass().getDeclaredField("wildcardComparable").getGenericType();
+        final Type wildcardType = ((ParameterizedType)nonWildcardType).getActualTypeArguments()[0];
+
+        Assert.assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));
+        Assert.assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));
+    }
+
     @Test
     public void testGenericArrayType() throws Exception {
         final Type expected = getClass().getField("intWildcardComparable").getGenericType();
