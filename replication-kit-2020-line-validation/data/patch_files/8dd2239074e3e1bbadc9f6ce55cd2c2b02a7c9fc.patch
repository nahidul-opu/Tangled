From 8dd2239074e3e1bbadc9f6ce55cd2c2b02a7c9fc Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Thu, 28 Jan 2010 15:01:55 +0000
Subject: [PATCH] Fixed automatic step initialization in embedded Runge-Kutta
 integrators. The relative tolerance setting was never used, only the absolute
 tolerance was used. JIRA: MATH-338

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@904112 13f79535-47bb-0310-9956-ffa450edef68
---
 .../EmbeddedRungeKuttaIntegrator.java         | 19 ++++++++++---------
 src/site/xdoc/changes.xml                     |  5 +++++
 .../nonstiff/AdamsMoultonIntegratorTest.java  |  4 ++--
 .../DormandPrince853IntegratorTest.java       |  4 ++--
 .../nonstiff/HighamHall54IntegratorTest.java  |  2 +-
 .../HighamHall54StepInterpolatorTest.java     |  2 +-
 6 files changed, 21 insertions(+), 15 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 70b2a2b52a..1bbad3ec39 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode.nonstiff;
 
-import java.util.Arrays;
-
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.IntegratorException;
@@ -244,13 +242,16 @@ public double integrate(final FirstOrderDifferentialEquations equations,
         }
 
         if (firstTime) {
-          final double[] scale;
-          if (vecAbsoluteTolerance != null) {
-            scale = vecAbsoluteTolerance;
-          } else {
-            scale = new double[y0.length];
-            Arrays.fill(scale, scalAbsoluteTolerance);
-          }
+          final double[] scale = new double[y0.length];
+          if (vecAbsoluteTolerance == null) {
+              for (int i = 0; i < scale.length; ++i) {
+                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);
+              }
+            } else {
+              for (int i = 0; i < scale.length; ++i) {
+                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);
+              }
+            }
           hNew = initializeStep(equations, forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
           firstTime = false;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index f18bedf16c..c1a0ee33e9 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,11 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.1" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-338" due-to="Vincent Morand">
+        Fixed automatic step initialization in embedded Runge-Kutta integrators.
+        The relative tolerance setting was never used, only the absolute tolerance
+        was used.
+      </action>
       <action dev="psteitz" type="fix" issue="MATH-329">
         Fixed regression in Frequency.getPct(Object) introduced in 2.0. Cumulative
         percent was being returned for Object arguments in place of percent.
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
index 0355800ac7..20dd4249d0 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
@@ -145,9 +145,9 @@ public void polynomial() throws DerivativeException, IntegratorException {
             integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
                             pb.getFinalTime(), new double[pb.getDimension()]);
             if (nSteps < 4) {
-                assertTrue(integ.getEvaluations() > 150);
+                assertTrue(integ.getEvaluations() > 140);
             } else {
-                assertTrue(integ.getEvaluations() < 100);
+                assertTrue(integ.getEvaluations() < 90);
             }
         }
 
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
index 895cefff6c..bb36cda31f 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
@@ -147,8 +147,8 @@ public void testBackward()
       integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
                       pb.getFinalTime(), new double[pb.getDimension()]);
 
-      assertTrue(handler.getLastError() < 8.0e-8);
-      assertTrue(handler.getMaximalValueError() < 2.0e-7);
+      assertTrue(handler.getLastError() < 8.1e-8);
+      assertTrue(handler.getMaximalValueError() < 1.1e-7);
       assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);
       assertEquals("Dormand-Prince 8 (5, 3)", integ.getName());
   }
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java
index 0785d97546..56663c9a8d 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java
@@ -387,7 +387,7 @@ public void handleStep(StepInterpolator interpolator,
         maxError = error;
       }
       if (isLast) {
-        assertTrue(maxError < 4e-11);
+        assertTrue(maxError < 4.2e-11);
         assertTrue(nbSteps < 670);
       }
     }
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
index 9094b2a87a..a2645b7acd 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
@@ -49,7 +49,7 @@ public void derivativesConsistency()
     HighamHall54Integrator integ = new HighamHall54Integrator(minStep, maxStep,
                                                               scalAbsoluteTolerance,
                                                               scalRelativeTolerance);
-    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);
+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.1e-10);
   }
 
   @Test
