From 15b093448cebcaf28bf7384257bd9208cc18bb34 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Mon, 9 Jul 2007 20:34:27 +0000
Subject: [PATCH] CONFIGURATION-275: AbstractConfiguration.addProperty() now
 correctly deals with list and array properties if delimiter parsing is
 disabled

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@554757 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration/AbstractConfiguration.java  | 24 +++++-----
 ...estAbstractConfigurationBasicFeatures.java | 45 +++++++++++++++++++
 xdocs/changes.xml                             |  4 ++
 3 files changed, 62 insertions(+), 11 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/AbstractConfiguration.java b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
index 71e8d8a91a..b338ab5584 100644
--- a/src/java/org/apache/commons/configuration/AbstractConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
@@ -117,6 +117,13 @@ public abstract class AbstractConfiguration extends EventSource implements Confi
     /** end token */
     protected static final String END_TOKEN = "}";
 
+    /**
+     * Constant for the disabled list delimiter. This character is passed to the
+     * list parsing methods if delimiter parsing is disabled. So this character
+     * should not occur in string property values.
+     */
+    private static final char DISABLED_DELIMITER = '\0';
+
     /** The default value for listDelimiter */
     private static char defaultListDelimiter = ',';
 
@@ -381,17 +388,12 @@ public void addProperty(String key, Object value)
     {
         fireEvent(EVENT_ADD_PROPERTY, key, value, true);
 
-        if (!isDelimiterParsingDisabled())
-        {
-            Iterator it = PropertyConverter.toIterator(value, getListDelimiter());
-            while (it.hasNext())
-            {
-                addPropertyDirect(key, it.next());
-            }
-        }
-        else
+        Iterator it = PropertyConverter.toIterator(value,
+                isDelimiterParsingDisabled() ? DISABLED_DELIMITER
+                        : getListDelimiter());
+        while (it.hasNext())
         {
-            addPropertyDirect(key, value);
+            addPropertyDirect(key, it.next());
         }
 
         fireEvent(EVENT_ADD_PROPERTY, key, value, false);
@@ -399,7 +401,7 @@ public void addProperty(String key, Object value)
 
     /**
      * Adds a key/value pair to the Configuration. Override this method to
-     * provide write acces to underlying Configuration store.
+     * provide write access to underlying Configuration store.
      *
      * @param key key to use for mapping
      * @param value object to store
diff --git a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
index 62171a5a53..b7c501efc0 100644
--- a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
+++ b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.List;
 
 import org.apache.commons.collections.CollectionUtils;
 
@@ -78,6 +79,50 @@ public void testInterpolateEscape()
                 config.getString("mypath"));
     }
 
+    /**
+     * Tests adding list properties. The single elements of the list should be
+     * added.
+     */
+    public void testAddPropertyList()
+    {
+        checkAddListProperty(new TestConfigurationImpl(
+                new PropertiesConfiguration()));
+    }
+
+    /**
+     * Tests adding list properties when delimiter parsing is disabled.
+     */
+    public void testAddPropertyListNoDelimiterParsing()
+    {
+        AbstractConfiguration config = new TestConfigurationImpl(
+                new PropertiesConfiguration());
+        config.setDelimiterParsingDisabled(true);
+        checkAddListProperty(config);
+    }
+
+    /**
+     * Helper method for adding properties with multiple values.
+     *
+     * @param config the configuration to be used for testing
+     */
+    private void checkAddListProperty(AbstractConfiguration config)
+    {
+        config.addProperty("test", "value1");
+        Object[] lstValues1 = new Object[]
+        { "value2", "value3" };
+        Object[] lstValues2 = new Object[]
+        { "value4", "value5", "value6" };
+        config.addProperty("test", lstValues1);
+        config.addProperty("test", Arrays.asList(lstValues2));
+        List lst = config.getList("test");
+        assertEquals("Wrong number of list elements", 6, lst.size());
+        for (int i = 0; i < lst.size(); i++)
+        {
+            assertEquals("Wrong list element at " + i, "value" + (i + 1), lst
+                    .get(i));
+        }
+    }
+
     /**
      * A test configuration implementation. This implementation inherits
      * directly from AbstractConfiguration. For implementing the required
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 85b0ec1bb2..2f97127ed2 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-275">
+        AbstractConfiguration.addProperty() now correctly deals with list and
+        array properties if delimiter parsing is disabled.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-282">
         The default expression engine used by HierarchicalConfiguration
         instances is now lazily initialized. This avoids NullPointerExceptions
