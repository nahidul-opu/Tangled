From a1679107f7e8bfe4a55bdbe9c767bd89de7142e1 Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Tue, 4 Aug 2009 00:23:41 +0000
Subject: [PATCH] BEANUTILS-300 Fix NullPointerExceptions in LazyDynaList

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@800638 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/beanutils/LazyDynaList.java       | 20 ++++++++++++-------
 .../beanutils/LazyDynaListTestCase.java       | 10 ++++++++++
 2 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/src/java/org/apache/commons/beanutils/LazyDynaList.java b/src/java/org/apache/commons/beanutils/LazyDynaList.java
index 3079dc6e3..2174b5f98 100644
--- a/src/java/org/apache/commons/beanutils/LazyDynaList.java
+++ b/src/java/org/apache/commons/beanutils/LazyDynaList.java
@@ -503,7 +503,8 @@ public void setElementType(Class elementType) {
             throw new IllegalArgumentException("Element Type is missing");
         }
 
-        if (size() > 0) {
+        boolean changeType = (this.elementType != null && !this.elementType.equals(elementType));
+        if (changeType && size() > 0) {
             throw new IllegalStateException("Element Type cannot be reset");
         }
 
@@ -634,18 +635,17 @@ private DynaBean transform(Object element) {
             }
 
             // Get DynaClass (restore WrapDynaClass lost in serialization)
-            DynaClass dynaClass = (elementDynaClass == null) ? wrapDynaClass : elementDynaClass;
-            if (dynaClass == null) {
+            if (getDynaClass() == null) {
                 setElementType(elementType);
             }
                          
             // Create a new DynaBean            
             try {
-                dynaBean = dynaClass.newInstance();
+                dynaBean = getDynaClass().newInstance();
                 newDynaBeanType = dynaBean.getClass();
             } catch (Exception e) {
                 throw new IllegalArgumentException("Error creating DynaBean: " 
-                              + dynaClass.getClass().getName() 
+                              + getDynaClass().getClass().getName() 
                               + " - " + e);
             }
 
@@ -675,7 +675,7 @@ private DynaBean transform(Object element) {
 
         // Check the new element type, matches all the 
         // other elements in the List
-        if (newElementType != elementType) {
+        if (elementType != null && !newElementType.equals(elementType)) {
             throw new IllegalArgumentException("Element Type "  + newElementType 
                        + " doesn't match other elements " + elementType);
         }
@@ -683,5 +683,11 @@ private DynaBean transform(Object element) {
         return dynaBean;
         
     }
-    
+
+    /**
+     * Return the DynaClass.
+     */
+    private DynaClass getDynaClass() {
+        return (elementDynaClass == null ? wrapDynaClass : elementDynaClass);
+    }
 }
diff --git a/src/test/org/apache/commons/beanutils/LazyDynaListTestCase.java b/src/test/org/apache/commons/beanutils/LazyDynaListTestCase.java
index 2140fc801..b37faed7d 100644
--- a/src/test/org/apache/commons/beanutils/LazyDynaListTestCase.java
+++ b/src/test/org/apache/commons/beanutils/LazyDynaListTestCase.java
@@ -219,6 +219,13 @@ public void testCollection(LazyDynaList list, Class testClass, DynaClass testDyn
 
     }
 
+    /**
+     * Test adding a map to List with no type set.
+     */
+    public void testNullType() {
+        LazyDynaList lazyList = new LazyDynaList();
+        lazyList.add(new HashMap());
+    }
 
     /**
      * Test DynaBean Create
@@ -519,6 +526,9 @@ public void testSerializationPojo() {
         target = null;
         bean = null;
 
+        // Test BEANUTILS-300
+        result.add(null);
+
         // Confirm property value
         bean = (WrapDynaBean)result.get(0);
         assertEquals("post-serialize check", "value1", bean.get("stringProperty"));
