From b9d8c68e2f5f7f3a13773140a7ee4bf62972f17c Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Tue, 7 Jul 2009 09:19:46 +0000
Subject: [PATCH] fixed a bracketing issue due to inconsistent checks JIRA:
 MATH-280

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791766 13f79535-47bb-0310-9956-ffa450edef68
---
 .../solvers/UnivariateRealSolverUtils.java         |  6 +++---
 .../AbstractContinuousDistribution.java            |  2 +-
 src/site/xdoc/changes.xml                          |  3 +++
 .../solvers/UnivariateRealSolverUtilsTest.java     | 14 ++------------
 .../math/distribution/NormalDistributionTest.java  |  9 +++++++++
 5 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
index 5b76415e2a..e6398f6abd 100644
--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -131,7 +131,7 @@ public static double[] bracket(UnivariateRealFunction function,
      /**
      * This method attempts to find two values a and b satisfying <ul>
      * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
-     * <li> <code> f(a) * f(b) < 0 </code> </li>
+     * <li> <code> f(a) * f(b) <= 0 </code> </li>
      * </ul>
      * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
      * and <code>b</code> bracket a root of f.
@@ -141,7 +141,7 @@ public static double[] bracket(UnivariateRealFunction function,
      * function at <code>a</code> and <code>b</code> and keeps moving
      * the endpoints out by one unit each time through a loop that terminates 
      * when one of the following happens: <ul>
-     * <li> <code> f(a) * f(b) < 0 </code> --  success!</li>
+     * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
      * <li> <code> a = lower </code> and <code> b = upper</code> 
      * -- ConvergenceException </li>
      * <li> <code> maximumIterations</code> iterations elapse 
@@ -195,7 +195,7 @@ public static double[] bracket(UnivariateRealFunction function,
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
-        if (fa * fb >= 0.0 ) {
+        if (fa * fb > 0.0 ) {
             throw new ConvergenceException(
                       "number of iterations={0}, maximum iterations={1}, " +
                       "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
diff --git a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
index 808a573f1d..419fbfa372 100644
--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -65,7 +65,7 @@ public double inverseCumulativeProbability(final double p)
         }
 
         // by default, do simple root finding using bracketing and default solver.
-        // subclasses can overide if there is a better method.
+        // subclasses can override if there is a better method.
         UnivariateRealFunction rootFindingFunction =
             new UnivariateRealFunction() {
             public double value(double x) throws FunctionEvaluationException {
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 468db72824..e25385370b 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,9 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.0" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-280">
+        Fixed a bracketing issue in inverse cumulative probability computation
+      </action>
       <action dev="luc" type="add" issue="MATH-279" due-to="Michael Bjorkegren">
         Added a check for too few rows with respect to the number of predictors in linear regression
       </action>
diff --git a/src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java b/src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java
index 9afd18e585..e87094ff32 100644
--- a/src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java
+++ b/src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java
@@ -17,13 +17,12 @@
 
 package org.apache.commons.math.analysis.solvers;
 
-import org.apache.commons.math.ConvergenceException;
+import junit.framework.TestCase;
+
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.analysis.SinFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 
-import junit.framework.TestCase;
-
 /**
  * @version $Revision$ $Date$
  */
@@ -91,15 +90,6 @@ public void testBracketSin() throws MathException {
         assertTrue(sin.value(result[1]) > 0);
     }
     
-    public void testBracketCornerSolution() throws MathException {
-        try {
-            UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0); 
-            fail("Expecting ConvergenceException");
-        } catch (ConvergenceException ex) {
-            // expected
-        }
-    }
-    
     public void testBadParameters() throws MathException {
         try { // null function
             UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);
diff --git a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
index dd607f3f74..8f3433c069 100644
--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math.distribution;
 
+import org.apache.commons.math.MathException;
+
 /**
  * Test cases for NormalDistribution.
  * Extends ContinuousDistributionAbstractTest.  See class javadoc for
@@ -161,4 +163,11 @@ public void testExtremeValues() throws Exception {
             }
         } 
    }
+
+    public void testMath280() throws MathException {
+        NormalDistribution normal = new NormalDistributionImpl(0,1);
+        double result = normal.inverseCumulativeProbability(0.9772498680518209);
+        assertEquals(2.0, result, 1.0e-12);
+    }
+
 }
