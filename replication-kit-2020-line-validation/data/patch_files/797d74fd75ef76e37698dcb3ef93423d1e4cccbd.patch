From 797d74fd75ef76e37698dcb3ef93423d1e4cccbd Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 21 Jul 2011 03:49:35 +0000
Subject: [PATCH] deal with entries of a size between Integer.MAX_VALUE and 2 *
 Integer.MAX_VALUE (size is unsigned in ZIPs).  COMPRESS-129.  As pointed out
 by Sebb the solution is incomplete and a more complete resolution is not
 possible without requiring Java5.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1149029 13f79535-47bb-0310-9956-ffa450edef68
---
 .../archivers/zip/ZipArchiveInputStream.java  | 22 +++++++++++--------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index bdf930b5608..7e87827ff08 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -68,8 +68,8 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
     private ZipArchiveEntry current = null;
     private boolean closed = false;
     private boolean hitCentralDirectory = false;
-    private int readBytesOfEntry = 0, offsetInBuffer = 0;
-    private int bytesReadFromStream = 0;
+    private int offsetInBuffer = 0;
+    private long readBytesOfEntry = 0, bytesReadFromStream = 0;
     private int lengthOfLastRead = 0;
     private boolean hasDataDescriptor = false;
     private ByteArrayInputStream lastStoredEntry = null;
@@ -256,7 +256,7 @@ public int read(byte[] buffer, int start, int length) throws IOException {
                     return lastStoredEntry.read(buffer, start, length);
                 }
 
-                int csize = (int) current.getSize();
+                long csize = current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
@@ -272,7 +272,8 @@ public int read(byte[] buffer, int start, int length) throws IOException {
                     ? lengthOfLastRead - offsetInBuffer
                     : length;
                 if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
+                    // if it is smaller than toRead then it fits into an int
+                    toRead = (int) (csize - readBytesOfEntry);
                 }
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
@@ -417,16 +418,19 @@ private void closeEntry() throws IOException {
         } else {
             skip(Long.MAX_VALUE);
 
-            int inB;
+            long inB;
             if (current.getMethod() == ZipArchiveOutputStream.DEFLATED) {
                 inB = inf.getTotalIn();
             } else {
                 inB = readBytesOfEntry;
             }
-            int diff = 0;
+
+            // this is at most a single read() operation and can't
+            // exceed the range of int
+            int diff = (int) (bytesReadFromStream - inB);
 
             // Pushback any required bytes
-            if ((diff = bytesReadFromStream - inB) != 0) {
+            if (diff > 0) {
                 ((PushbackInputStream) in).unread(
                         buf,  lengthOfLastRead - diff, diff);
                 pushedBackBytes(diff);
@@ -438,8 +442,8 @@ private void closeEntry() throws IOException {
         }
 
         inf.reset();
-        readBytesOfEntry = offsetInBuffer = bytesReadFromStream =
-            lengthOfLastRead = 0;
+        readBytesOfEntry = bytesReadFromStream = 0L;
+        offsetInBuffer = lengthOfLastRead = 0;
         crc.reset();
         current = null;
         lastStoredEntry = null;
