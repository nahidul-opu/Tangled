From 1703abc2d8e6235f059aab5ecb34c0fe313114be Mon Sep 17 00:00:00 2001
From: Mark Giaconia <markg@apache.org>
Date: Tue, 4 Feb 2014 17:10:11 +0000
Subject: [PATCH] OPENNLP-600 Changed to MockInputStreamFactory everywhere
 except where a reader was being used in the PlainTextBylineStream constructor

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1564379 13f79535-47bb-0310-9956-ffa450edef68
---
 .../cmdline/MarkableFileInputStream.java      |  2 +-
 .../tools/cmdline/chunker/ChunkerMETool.java  | 20 +++--
 .../tools/cmdline/doccat/DoccatTool.java      | 25 ++++--
 .../cmdline/doccat/DoccatTrainerTool.java     |  2 +
 .../cmdline/namefind/TokenNameFinderTool.java | 27 +++----
 .../namefind/TokenNameFinderTrainerTool.java  |  2 -
 .../tools/cmdline/parser/ParserTool.java      | 65 ++++++++--------
 .../tools/cmdline/postag/POSTaggerTool.java   | 21 +++--
 .../sentdetect/SentenceDetectorTool.java      | 10 +--
 .../tokenizer/CommandLineTokenizer.java       | 35 +++++----
 .../tokenizer/DictionaryDetokenizerTool.java  | 10 ++-
 .../doccat/BagOfWordsFeatureGenerator.java    |  1 +
 .../tools/doccat/DocumentCategorizerME.java   |  3 -
 .../formats/BioNLP2004NameSampleStream.java   |  5 +-
 .../formats/ChunkerSampleStreamFactory.java   | 15 +++-
 .../formats/Conll02NameSampleStream.java      |  5 +-
 .../formats/Conll03NameSampleStream.java      |  5 +-
 .../formats/DocumentSampleStreamFactory.java  | 20 +++--
 .../formats/EvalitaNameSampleStream.java      |  5 +-
 .../formats/LeipzigDoccatSampleStream.java    |  3 +-
 .../formats/NameFinderCensus90NameStream.java | 55 ++++++++------
 .../formats/NameSampleDataStreamFactory.java  | 18 +++--
 .../formats/ParseSampleStreamFactory.java     | 15 +++-
 .../formats/SentenceSampleStreamFactory.java  | 13 +++-
 .../formats/TokenSampleStreamFactory.java     | 16 +++-
 .../formats/WordTagSampleStreamFactory.java   | 18 +++--
 .../tools/formats/ad/ADChunkSampleStream.java |  5 +-
 .../ad/ADChunkSampleStreamFactory.java        | 13 +++-
 .../tools/formats/ad/ADNameSampleStream.java  |  5 +-
 .../formats/ad/ADNameSampleStreamFactory.java | 12 ++-
 .../tools/formats/ad/ADPOSSampleStream.java   |  5 +-
 .../formats/ad/ADPOSSampleStreamFactory.java  | 13 +++-
 .../formats/ad/ADSentenceSampleStream.java    |  5 +-
 .../ad/ADSentenceSampleStreamFactory.java     | 13 +++-
 .../tools/namefind/NameFinderEventStream.java |  3 +-
 .../tools/namefind/RegexNameFinder.java       |  5 +-
 .../namefind/RegexNameFinderFactory.java      | 11 ++-
 .../parser/chunking/ParserEventStream.java    |  3 +-
 .../parser/treeinsert/ParserEventStream.java  |  3 +-
 .../java/opennlp/tools/util/BeamSearch.java   | 76 +++++++++++--------
 .../tools/util/InputStreamFactory.java        |  9 ++-
 .../tools/util/MockInputStreamFactory.java    | 42 ++++++++++
 .../tools/chunker/ChunkSampleTest.java        |  5 +-
 .../ChunkerDetailedFMeasureListenerTest.java  |  5 +-
 .../tools/chunker/ChunkerEvaluatorTest.java   |  9 ++-
 .../opennlp/tools/chunker/ChunkerMETest.java  |  3 +-
 .../formats/ad/ADChunkSampleStreamTest.java   |  3 +-
 .../formats/ad/ADNameSampleStreamTest.java    |  3 +-
 .../formats/ad/ADPOSSampleStreamTest.java     | 13 ++--
 .../formats/ad/ADParagraphStreamTest.java     |  3 +-
 .../ad/ADSentenceSampleStreamTest.java        |  3 +-
 .../DictionaryNameFinderEvaluatorTest.java    |  3 +-
 .../tools/namefind/NameFinderMETest.java      | 13 ++--
 .../namefind/NameSampleDataStreamTest.java    |  7 +-
 .../TokenNameFinderCrossValidatorTest.java    | 47 ++++++------
 .../tools/parser/ParseSampleStreamTest.java   |  3 +-
 .../SentenceDetectorFactoryTest.java          |  3 +-
 .../sentdetect/SentenceDetectorMETest.java    |  3 +-
 .../tools/tokenize/TokenizerFactoryTest.java  |  3 +-
 .../tools/tokenize/TokenizerTestUtil.java     |  3 +-
 60 files changed, 488 insertions(+), 283 deletions(-)
 create mode 100644 opennlp-tools/src/main/java/opennlp/tools/util/MockInputStreamFactory.java

diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java
index e672d4d5a..78862e389 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java
@@ -36,7 +36,7 @@ public class MarkableFileInputStream extends InputStream {
   MarkableFileInputStream(File file) throws FileNotFoundException {
     in = new FileInputStream(file);
   }
-  
+
   @Override
   public synchronized void mark(int readlimit) {
     try {
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerMETool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerMETool.java
index 21ea8fdbe..578ed9e41 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerMETool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerMETool.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.chunker;
 
 import java.io.File;
@@ -30,6 +29,7 @@
 import opennlp.tools.cmdline.PerformanceMonitor;
 import opennlp.tools.postag.POSSample;
 import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -38,7 +38,7 @@ public class ChunkerMETool extends BasicCmdLineTool {
   public String getShortDescription() {
     return "learnable chunker";
   }
-  
+
   public String getHelp() {
     return "Usage: " + CLI.CMD + " " + getName() + " model < sentences";
   }
@@ -51,13 +51,12 @@ public void run(String[] args) {
 
       ChunkerME chunker = new ChunkerME(model, ChunkerME.DEFAULT_BEAM_SIZE);
 
-      ObjectStream<String> lineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
-
-      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-      perfMon.start();
+      ObjectStream<String> lineStream = null;
+      PerformanceMonitor perfMon = null;
 
       try {
+        lineStream = new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+        perfMon = new PerformanceMonitor(System.err, "sent");
         String line;
         while ((line = lineStream.read()) != null) {
 
@@ -71,15 +70,14 @@ public void run(String[] args) {
           }
 
           String[] chunks = chunker.chunk(posSample.getSentence(),
-              posSample.getTags());
+                  posSample.getTags());
 
           System.out.println(new ChunkSample(posSample.getSentence(),
-              posSample.getTags(), chunks).nicePrint());
+                  posSample.getTags(), chunks).nicePrint());
 
           perfMon.incrementCounter();
         }
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTool.java
index 3d01418c0..3675939f3 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTool.java
@@ -14,12 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.doccat;
 
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 
 import opennlp.tools.cmdline.BasicCmdLineTool;
 import opennlp.tools.cmdline.CLI;
@@ -32,19 +30,23 @@
 import opennlp.tools.util.ParagraphStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.tokenize.WhitespaceTokenizer;
+import opennlp.tools.util.MockInputStreamFactory;
 
 public class DoccatTool extends BasicCmdLineTool {
 
+  @Override
   public String getShortDescription() {
     return "learnable document categorizer";
   }
-  
+
+  @Override
   public String getHelp() {
     return "Usage: " + CLI.CMD + " " + getName() + " model < documents";
   }
 
+  @Override
   public void run(String[] args) {
-    
+
     if (0 == args.length) {
       System.out.println(getHelp());
     } else {
@@ -53,13 +55,21 @@ public void run(String[] args) {
 
       DocumentCategorizerME doccat = new DocumentCategorizerME(model);
 
-      ObjectStream<String> documentStream = new ParagraphStream(
-          new PlainTextByLineStream(new InputStreamReader(System.in)));
+      //ObjectStream<String> documentStream = new ParagraphStream(
+            //  new PlainTextByLineStream(new InputStreamReader(System.in)));
+      /**
+       * moved initialization to the try block to catch new IOException
+       */
+      ObjectStream<String> documentStream;
+
+
 
       PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "doc");
       perfMon.start();
 
       try {
+        documentStream = new ParagraphStream(
+                new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8"));
         String document;
         while ((document = documentStream.read()) != null) {
           double prob[] = doccat.categorize(WhitespaceTokenizer.INSTANCE.tokenize(document));
@@ -70,8 +80,7 @@ public void run(String[] args) {
 
           perfMon.incrementCounter();
         }
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTrainerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTrainerTool.java
index 814078b0e..5906b27c0 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTrainerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTrainerTool.java
@@ -40,10 +40,12 @@ public DoccatTrainerTool() {
     super(DocumentSample.class, TrainerToolParams.class);
   }
 
+  @Override
   public String getShortDescription() {
     return "trainer for the learnable document categorizer";
   }
   
+  @Override
   public void run(String format, String[] args) {
     super.run(format, args);
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTool.java
index ef22b0ff1..dafd8ae75 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTool.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.namefind;
 
 import java.io.File;
@@ -33,6 +32,7 @@
 import opennlp.tools.namefind.TokenNameFinder;
 import opennlp.tools.namefind.TokenNameFinderModel;
 import opennlp.tools.tokenize.WhitespaceTokenizer;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -42,17 +42,17 @@ public final class TokenNameFinderTool extends BasicCmdLineTool {
   public String getShortDescription() {
     return "learnable name finder";
   }
-  
+
   public String getHelp() {
     return "Usage: " + CLI.CMD + " " + getName() + " model1 model2 ... modelN < sentences";
   }
-  
+
   public void run(String[] args) {
-    
+
     if (args.length == 0) {
       System.out.println(getHelp());
     } else {
-    
+
       NameFinderME nameFinders[] = new NameFinderME[args.length];
 
       for (int i = 0; i < nameFinders.length; i++) {
@@ -60,15 +60,17 @@ public void run(String[] args) {
         nameFinders[i] = new NameFinderME(model);
       }
 
-      ObjectStream<String> untokenizedLineStream =
-          new PlainTextByLineStream(new InputStreamReader(System.in));
-
+//      ObjectStream<String> untokenizedLineStream =
+//          new PlainTextByLineStream(new InputStreamReader(System.in));
+      ObjectStream<String> untokenizedLineStream;
       PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
       perfMon.start();
 
       try {
+        untokenizedLineStream =
+                new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
         String line;
-        while((line = untokenizedLineStream.read()) != null) {
+        while ((line = untokenizedLineStream.read()) != null) {
           String whitespaceTokenizerLine[] = WhitespaceTokenizer.INSTANCE.tokenize(line);
 
           // A new line indicates a new document,
@@ -89,17 +91,16 @@ public void run(String[] args) {
           // Simple way to drop intersecting spans, otherwise the
           // NameSample is invalid
           Span reducedNames[] = NameFinderME.dropOverlappingSpans(
-              names.toArray(new Span[names.size()]));
+                  names.toArray(new Span[names.size()]));
 
           NameSample nameSample = new NameSample(whitespaceTokenizerLine,
-              reducedNames, false);
+                  reducedNames, false);
 
           System.out.println(nameSample.toString());
 
           perfMon.incrementCounter();
         }
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
index 3d4a6386c..4eb966691 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
@@ -24,10 +24,8 @@
 import java.util.Map;
 
 import opennlp.tools.cmdline.AbstractTrainerTool;
-import opennlp.tools.cmdline.ArgumentParser.OptionalParameter;
 import opennlp.tools.cmdline.CmdLineUtil;
 import opennlp.tools.cmdline.TerminateToolException;
-import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
 import opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool.TrainerToolParams;
 import opennlp.tools.cmdline.params.TrainingToolParams;
 import opennlp.tools.namefind.NameSample;
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/parser/ParserTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/parser/ParserTool.java
index 0df7cedd1..c84a02106 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/parser/ParserTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/parser/ParserTool.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.parser;
 
 import java.io.File;
@@ -34,6 +33,7 @@
 import opennlp.tools.parser.Parse;
 import opennlp.tools.parser.ParserFactory;
 import opennlp.tools.parser.ParserModel;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -43,14 +43,13 @@ public final class ParserTool extends BasicCmdLineTool {
   public String getShortDescription() {
     return "performs full syntactic parsing";
   }
-  
+
   public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n] model < sentences \n" +
-        "-bs n: Use a beam size of n.\n" +
-        "-ap f: Advance outcomes in with at least f% of the probability mass.\n" + 
-        "-k n: Show the top n parses.  This will also display their log-probablities.";
+    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n] model < sentences \n"
+            + "-bs n: Use a beam size of n.\n"
+            + "-ap f: Advance outcomes in with at least f% of the probability mass.\n"
+            + "-k n: Show the top n parses.  This will also display their log-probablities.";
   }
-
   private static Pattern untokenizedParenPattern1 = Pattern.compile("([^ ])([({)}])");
   private static Pattern untokenizedParenPattern2 = Pattern.compile("([({)}])([^ ])");
 
@@ -68,70 +67,69 @@ public static Parse[] parseLine(String line, opennlp.tools.parser.Parser parser,
     String text = sb.substring(0, sb.length() - 1);
     Parse p = new Parse(text, new Span(0, text.length()), AbstractBottomUpParser.INC_NODE, 0, 0);
     int start = 0;
-    int i=0;
-    for (Iterator<String> ti = tokens.iterator(); ti.hasNext();i++) {
+    int i = 0;
+    for (Iterator<String> ti = tokens.iterator(); ti.hasNext(); i++) {
       String tok = ti.next();
-      p.insert(new Parse(text, new Span(start, start + tok.length()), AbstractBottomUpParser.TOK_NODE, 0,i));
+      p.insert(new Parse(text, new Span(start, start + tok.length()), AbstractBottomUpParser.TOK_NODE, 0, i));
       start += tok.length() + 1;
     }
     Parse[] parses;
     if (numParses == 1) {
-      parses = new Parse[] { parser.parse(p)};
-    }
-    else {
-      parses = parser.parse(p,numParses);
+      parses = new Parse[]{parser.parse(p)};
+    } else {
+      parses = parser.parse(p, numParses);
     }
     return parses;
   }
-  
+
   public void run(String[] args) {
-    
+
     if (args.length < 1) {
       System.out.println(getHelp());
     } else {
-    
+
       ParserModel model = new ParserModelLoader().load(new File(args[args.length - 1]));
 
       Integer beamSize = CmdLineUtil.getIntParameter("-bs", args);
-      if (beamSize == null)
-          beamSize = AbstractBottomUpParser.defaultBeamSize;
+      if (beamSize == null) {
+        beamSize = AbstractBottomUpParser.defaultBeamSize;
+      }
 
       Integer numParses = CmdLineUtil.getIntParameter("-k", args);
       boolean showTopK;
       if (numParses == null) {
         numParses = 1;
         showTopK = false;
-      }
-      else {
+      } else {
         showTopK = true;
       }
 
       Double advancePercentage = CmdLineUtil.getDoubleParameter("-ap", args);
 
-      if (advancePercentage == null)
+      if (advancePercentage == null) {
         advancePercentage = AbstractBottomUpParser.defaultAdvancePercentage;
+      }
 
       opennlp.tools.parser.Parser parser =
-          ParserFactory.create(model, beamSize, advancePercentage);
+              ParserFactory.create(model, beamSize, advancePercentage);
 
-      ObjectStream<String> lineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
-
-      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-      perfMon.start();
 
+      ObjectStream<String> lineStream = null;
+      PerformanceMonitor perfMon = null;
       try {
+        lineStream = new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+        perfMon = new PerformanceMonitor(System.err, "sent");
+        perfMon.start();
         String line;
         while ((line = lineStream.read()) != null) {
           if (line.length() == 0) {
             System.out.println();
-          }
-          else {
+          } else {
             Parse[] parses = parseLine(line, parser, numParses);
 
-            for (int pi=0,pn=parses.length;pi<pn;pi++) {
+            for (int pi = 0, pn = parses.length; pi < pn; pi++) {
               if (showTopK) {
-                System.out.print(pi+" "+parses[pi].getProb()+" ");
+                System.out.print(pi + " " + parses[pi].getProb() + " ");
               }
 
               parses[pi].show();
@@ -140,8 +138,7 @@ public void run(String[] args) {
             }
           }
         }
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerTool.java
index 256a73426..671b0a32f 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerTool.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.postag;
 
 import java.io.File;
@@ -29,6 +28,7 @@
 import opennlp.tools.postag.POSSample;
 import opennlp.tools.postag.POSTaggerME;
 import opennlp.tools.tokenize.WhitespaceTokenizer;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -37,28 +37,28 @@ public final class POSTaggerTool extends BasicCmdLineTool {
   public String getShortDescription() {
     return "learnable part of speech tagger";
   }
-  
+
   public String getHelp() {
     return "Usage: " + CLI.CMD + " " + getName() + " model < sentences";
   }
 
   public void run(String[] args) {
-    
+
     if (args.length != 1) {
       System.out.println(getHelp());
     } else {
-    
+
       POSModel model = new POSModelLoader().load(new File(args[0]));
 
       POSTaggerME tagger = new POSTaggerME(model);
 
-      ObjectStream<String> lineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
-
-      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-      perfMon.start();
+      ObjectStream<String> lineStream = null;
+      PerformanceMonitor perfMon = null;
 
       try {
+        lineStream = new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+        perfMon = new PerformanceMonitor(System.err, "sent");
+        perfMon.start();
         String line;
         while ((line = lineStream.read()) != null) {
 
@@ -70,8 +70,7 @@ public void run(String[] args) {
 
           perfMon.incrementCounter();
         }
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/sentdetect/SentenceDetectorTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/sentdetect/SentenceDetectorTool.java
index fceda6180..9f3e1a398 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/sentdetect/SentenceDetectorTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/sentdetect/SentenceDetectorTool.java
@@ -27,6 +27,7 @@
 import opennlp.tools.cmdline.PerformanceMonitor;
 import opennlp.tools.sentdetect.SentenceDetectorME;
 import opennlp.tools.sentdetect.SentenceModel;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.ParagraphStream;
 import opennlp.tools.util.PlainTextByLineStream;
@@ -59,13 +60,12 @@ public void run(String[] args) {
 
       SentenceDetectorME sdetector = new SentenceDetectorME(model);
 
-      ObjectStream<String> paraStream =
-        new ParagraphStream(new PlainTextByLineStream(new InputStreamReader(System.in)));
-
-      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-      perfMon.start();
+       ObjectStream<String> paraStream = null;
+      PerformanceMonitor perfMon = null;
 
       try {
+        paraStream = new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+        perfMon = new PerformanceMonitor(System.err, "sent");
         String para;
         while ((para = paraStream.read()) != null) {
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/CommandLineTokenizer.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/CommandLineTokenizer.java
index 45ca90916..0f39e78a9 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/CommandLineTokenizer.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/CommandLineTokenizer.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.cmdline.tokenizer;
 
 import java.io.IOException;
@@ -25,39 +24,43 @@
 import opennlp.tools.tokenize.Tokenizer;
 import opennlp.tools.tokenize.TokenizerStream;
 import opennlp.tools.tokenize.WhitespaceTokenStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
 final class CommandLineTokenizer {
 
   private final Tokenizer tokenizer;
-  
+
   CommandLineTokenizer(Tokenizer tokenizer) {
     this.tokenizer = tokenizer;
   }
-  
+
   void process() {
-    
-    ObjectStream<String> untokenizedLineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
-    
-    ObjectStream<String> tokenizedLineStream = new WhitespaceTokenStream(
-        new TokenizerStream(tokenizer, untokenizedLineStream));
-    
-    PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-    perfMon.start();
-    
+    ObjectStream<String> untokenizedLineStream = null;
+
+    ObjectStream<String> tokenizedLineStream = null;
+    PerformanceMonitor perfMon = null;
     try {
+      untokenizedLineStream =
+              new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+
+      tokenizedLineStream = new WhitespaceTokenStream(
+              new TokenizerStream(tokenizer, untokenizedLineStream));
+
+      perfMon = new PerformanceMonitor(System.err, "sent");
+      perfMon.start();
+
+
       String tokenizedLine;
       while ((tokenizedLine = tokenizedLineStream.read()) != null) {
         System.out.println(tokenizedLine);
         perfMon.incrementCounter();
       }
-    }
-    catch (IOException e) {
+    } catch (IOException e) {
       CmdLineUtil.handleStdinIoError(e);
     }
-    
+
     perfMon.stopAndPrintFinalResult();
   }
 }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/DictionaryDetokenizerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/DictionaryDetokenizerTool.java
index c5f36e216..32f674a61 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/DictionaryDetokenizerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/DictionaryDetokenizerTool.java
@@ -28,6 +28,7 @@
 import opennlp.tools.tokenize.Detokenizer;
 import opennlp.tools.tokenize.DictionaryDetokenizer;
 import opennlp.tools.tokenize.WhitespaceTokenizer;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -43,17 +44,17 @@ public void run(String[] args) {
     if (args.length != 1) {
       System.out.println(getHelp());
     } else {
-    
+          try {
       Detokenizer detokenizer = new DictionaryDetokenizer(
           new DetokenizationDictionaryLoader().load(new File(args[0])));
 
       ObjectStream<String> tokenizedLineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
+        new PlainTextByLineStream(new MockInputStreamFactory(System.in),"UTF-8");
 
       PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
       perfMon.start();
 
-      try {
+
         String tokenizedLine;
         while ((tokenizedLine = tokenizedLineStream.read()) != null) {
 
@@ -64,12 +65,13 @@ public void run(String[] args) {
 
           perfMon.incrementCounter();
         }
+              perfMon.stopAndPrintFinalResult();
       }
       catch (IOException e) {
         CmdLineUtil.handleStdinIoError(e);
       }
 
-      perfMon.stopAndPrintFinalResult();
+
     }
   }
 }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/doccat/BagOfWordsFeatureGenerator.java b/opennlp-tools/src/main/java/opennlp/tools/doccat/BagOfWordsFeatureGenerator.java
index a149cdfc8..f64cc9228 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/doccat/BagOfWordsFeatureGenerator.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/doccat/BagOfWordsFeatureGenerator.java
@@ -37,6 +37,7 @@ public BagOfWordsFeatureGenerator() {
     this.useOnlyAllLetterTokens = useOnlyAllLetterTokens;
   }
   
+  @Override
   public Collection<String> extractFeatures(String[] text) {
 
     Collection<String> bagOfWords = new ArrayList<String>(text.length);
diff --git a/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java b/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
index 0adb6a682..f4778a964 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java
@@ -23,11 +23,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import opennlp.tools.ml.maxent.GIS;
-import opennlp.tools.ml.model.AbstractModel;
 import opennlp.tools.ml.model.MaxentModel;
 import opennlp.tools.ml.model.TrainUtil;
-import opennlp.tools.ml.model.TwoPassDataIndexer;
 import opennlp.tools.tokenize.SimpleTokenizer;
 import opennlp.tools.tokenize.Tokenizer;
 import opennlp.tools.util.ObjectStream;
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/BioNLP2004NameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/BioNLP2004NameSampleStream.java
index 4eb5cd36c..13248ab10 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/BioNLP2004NameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/BioNLP2004NameSampleStream.java
@@ -25,6 +25,7 @@
 import java.util.List;
 
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -54,9 +55,9 @@ public class BioNLP2004NameSampleStream implements ObjectStream<NameSample> {
   
   public BioNLP2004NameSampleStream(InputStream in, int types) {
     try {
-      this.lineStream = new PlainTextByLineStream(in, "UTF-8");
+      this.lineStream = new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8");
       System.setOut(new PrintStream(System.out, true, "UTF-8"));
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ChunkerSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ChunkerSampleStreamFactory.java
index 41e907688..5ec42dd33 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ChunkerSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ChunkerSampleStreamFactory.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import opennlp.tools.chunker.ChunkSample;
@@ -27,6 +26,10 @@
 import opennlp.tools.util.PlainTextByLineStream;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 /**
  * Factory producing OpenNLP {@link ChunkSampleStream}s.
@@ -38,7 +41,7 @@ interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(ChunkSample.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new ChunkerSampleStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new ChunkerSampleStreamFactory(Parameters.class));
   }
 
   protected <P> ChunkerSampleStreamFactory(Class<P> params) {
@@ -50,9 +53,13 @@ public ObjectStream<ChunkSample> create(String[] args) {
 
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
+    ObjectStream<String> lineStream = null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn), params.getEncoding());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn
-        .getChannel(), params.getEncoding());
+    } catch (IOException ex) {
+      Logger.getLogger(ChunkerSampleStreamFactory.class.getName()).log(Level.SEVERE, null, ex);
+    }
 
     return new ChunkSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/Conll02NameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/Conll02NameSampleStream.java
index 86b5801fa..db9a2c322 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/Conll02NameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/Conll02NameSampleStream.java
@@ -26,6 +26,7 @@
 
 import opennlp.tools.namefind.NameSample;
 import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -80,9 +81,9 @@ public Conll02NameSampleStream(LANGUAGE lang, InputStream in, int types) {
     
     this.lang = lang;
     try {
-      this.lineStream = new PlainTextByLineStream(in, "UTF-8");
+      this.lineStream = new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8");
       System.setOut(new PrintStream(System.out, true, "UTF-8"));
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     } 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/Conll03NameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/Conll03NameSampleStream.java
index 9cb31fa7d..2d0fff348 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/Conll03NameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/Conll03NameSampleStream.java
@@ -25,6 +25,7 @@
 import java.util.List;
 
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -67,9 +68,9 @@ public Conll03NameSampleStream(LANGUAGE lang, InputStream in, int types) {
 
     this.lang = lang;
     try {
-      this.lineStream = new PlainTextByLineStream(in, "UTF-8");
+      this.lineStream = new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8");
       System.setOut(new PrintStream(System.out, true, "UTF-8"));
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/DocumentSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/DocumentSampleStreamFactory.java
index a0da3d335..2308e43c5 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/DocumentSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/DocumentSampleStreamFactory.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import opennlp.tools.cmdline.ArgumentParser;
@@ -27,6 +26,10 @@
 import opennlp.tools.util.PlainTextByLineStream;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 /**
  * Factory producing OpenNLP {@link DocumentSampleStream}s.
@@ -38,7 +41,7 @@ interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(DocumentSample.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new DocumentSampleStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new DocumentSampleStreamFactory(Parameters.class));
   }
 
   protected <P> DocumentSampleStreamFactory(Class<P> params) {
@@ -50,9 +53,16 @@ public ObjectStream<DocumentSample> create(String[] args) {
 
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
-
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+              params.getEncoding());
+      //        params.getEncoding());
+      //    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
+      //        params.getEncoding());
+    } catch (IOException ex) {
+        throw new RuntimeException(ex);
+    }
 
     return new DocumentSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java
index d135ef9ab..355565e85 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java
@@ -26,6 +26,7 @@
 
 import opennlp.tools.namefind.NameSample;
 import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -87,9 +88,9 @@ public EvalitaNameSampleStream(LANGUAGE lang, InputStream in, int types) {
 
     this.lang = lang;
     try {
-      this.lineStream = new PlainTextByLineStream(in, "UTF-8");
+      this.lineStream = new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8");
       System.setOut(new PrintStream(System.out, true, "UTF-8"));
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/LeipzigDoccatSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/LeipzigDoccatSampleStream.java
index 07a995773..3f2688e1c 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/LeipzigDoccatSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/LeipzigDoccatSampleStream.java
@@ -24,6 +24,7 @@
 import opennlp.tools.doccat.DocumentSample;
 import opennlp.tools.tokenize.SimpleTokenizer;
 import opennlp.tools.util.FilterObjectStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 /**
@@ -52,7 +53,7 @@ public class LeipzigDoccatSampleStream extends
    */
   LeipzigDoccatSampleStream(String language, int sentencesPerDocument, 
       InputStream in) throws IOException {
-    super(new PlainTextByLineStream(in, "UTF-8"));
+    super(new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
     System.setOut(new PrintStream(System.out, true, "UTF-8"));
     this.language = language;
     this.sentencesPerDocument = sentencesPerDocument;
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/NameFinderCensus90NameStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/NameFinderCensus90NameStream.java
index 9bddecbcc..f3e1eaed2 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/NameFinderCensus90NameStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/NameFinderCensus90NameStream.java
@@ -12,13 +12,15 @@
  *  limitations under the License.
  *  under the License.
  */
-
 package opennlp.tools.formats;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.Locale;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
@@ -27,10 +29,10 @@
 
 /**
  * This class helps to read the US Census data from the files to build a
- * StringList for each dictionary entry in the name-finder dictionary.
- * The entries in the source file are as follows:
+ * StringList for each dictionary entry in the name-finder dictionary. The
+ * entries in the source file are as follows:
  * <p>
- *      SMITH          1.006  1.006      1
+ * SMITH 1.006 1.006 1
  * <p>
  * <ul>
  * <li>The first field is the name (in ALL CAPS).
@@ -45,14 +47,14 @@ public class NameFinderCensus90NameStream implements ObjectStream<StringList> {
 
   private final Locale locale;
   private final Charset encoding;
-  private final ObjectStream<String> lineStream;
+  private ObjectStream<String> lineStream;
 
   /**
    * This constructor takes an ObjectStream and initializes the class to handle
    * the stream.
    *
-   * @param lineStream  an <code>ObjectSteam<String></code> that represents the
-   *                    input file to be attached to this class.
+   * @param lineStream an <code>ObjectSteam<String></code> that represents the
+   *                   input file to be attached to this class.
    */
   public NameFinderCensus90NameStream(ObjectStream<String> lineStream) {
     this.locale = new Locale("en");   // locale is English
@@ -62,24 +64,32 @@ public NameFinderCensus90NameStream(ObjectStream<String> lineStream) {
   }
 
   /**
-   * This constructor takes an <code>InputStream</code> and a <code>Charset</code>
-   * and opens an associated stream object with the specified encoding specified.
+   * This constructor takes an
+   * <code>InputStream</code> and a
+   * <code>Charset</code> and opens an associated stream object with the
+   * specified encoding specified.
    *
-   * @param in  an <code>InputStream</code> for the input file.
-   * @param encoding  the <code>Charset</code> to apply to the input stream.
+   * @param in       an <code>InputStream</code> for the input file.
+   * @param encoding the <code>Charset</code> to apply to the input stream.
    */
   public NameFinderCensus90NameStream(InputStream in, Charset encoding) {
     this.locale = new Locale("en");   // locale is English
     this.encoding = encoding;
-    this.lineStream = new PlainTextByLineStream(in, this.encoding);
+
+    try {
+      this.lineStream = new PlainTextByLineStream(new MockInputStreamFactory(in), this.encoding);
+    } catch (IOException ex) {
+
+      throw new RuntimeException(ex);
+    }
   }
 
   public StringList read() throws IOException {
     String line = lineStream.read();
     StringList name = null;
 
-    if ((line != null) &&
-        (!StringUtil.isEmpty(line))) {
+    if ((line != null)
+            && (!StringUtil.isEmpty(line))) {
       String name2;
       // find the location of the name separator in the line of data.
       int pos = line.indexOf(' ');
@@ -87,15 +97,15 @@ public StringList read() throws IOException {
         String parsed = line.substring(0, pos);
         // the data is in ALL CAPS ... so the easiest way is to convert
         // back to standard mixed case.
-        if ((parsed.length() > 2) &&
-            (parsed.startsWith("MC"))) {
-          name2 = parsed.substring(0,1).toUpperCase(locale) +
-                  parsed.substring(1,2).toLowerCase(locale) +
-                  parsed.substring(2,3).toUpperCase(locale) +
-                  parsed.substring(3).toLowerCase(locale);
+        if ((parsed.length() > 2)
+                && (parsed.startsWith("MC"))) {
+          name2 = parsed.substring(0, 1).toUpperCase(locale)
+                  + parsed.substring(1, 2).toLowerCase(locale)
+                  + parsed.substring(2, 3).toUpperCase(locale)
+                  + parsed.substring(3).toLowerCase(locale);
         } else {
-          name2 = parsed.substring(0,1).toUpperCase(locale) +
-                  parsed.substring(1).toLowerCase(locale);
+          name2 = parsed.substring(0, 1).toUpperCase(locale)
+                  + parsed.substring(1).toLowerCase(locale);
         }
         name = new StringList(new String[]{name2});
       }
@@ -111,5 +121,4 @@ public void reset() throws IOException, UnsupportedOperationException {
   public void close() throws IOException {
     lineStream.close();
   }
-
 }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/NameSampleDataStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/NameSampleDataStreamFactory.java
index 5b986d3d4..e712e02d2 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/NameSampleDataStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/NameSampleDataStreamFactory.java
@@ -14,10 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.cmdline.ArgumentParser;
 import opennlp.tools.cmdline.CmdLineUtil;
@@ -25,6 +27,7 @@
 import opennlp.tools.cmdline.params.BasicFormatParams;
 import opennlp.tools.namefind.NameSample;
 import opennlp.tools.namefind.NameSampleDataStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -38,7 +41,7 @@ public static interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(NameSample.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new NameSampleDataStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new NameSampleDataStreamFactory(Parameters.class));
   }
 
   protected <P> NameSampleDataStreamFactory(Class<P> params) {
@@ -49,11 +52,16 @@ public ObjectStream<NameSample> create(String[] args) {
     Parameters params = ArgumentParser.parse(args, Parameters.class);
 
     CmdLineUtil.checkInputFile("Data", params.getData());
-    
+
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream = null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+              params.getEncoding());
+    } catch (IOException ex) {
+      throw new RuntimeException(ex);
+    }
 
     return new NameSampleDataStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ParseSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ParseSampleStreamFactory.java
index de67e94b2..52c55cadd 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ParseSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ParseSampleStreamFactory.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import opennlp.tools.cmdline.ArgumentParser;
@@ -27,6 +26,10 @@
 import opennlp.tools.util.PlainTextByLineStream;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 /**
  * Factory producing OpenNLP {@link ParseSampleStream}s.
@@ -38,7 +41,7 @@ public interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(Parse.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new ParseSampleStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new ParseSampleStreamFactory(Parameters.class));
   }
 
   protected <P> ParseSampleStreamFactory(Class<P> params) {
@@ -51,8 +54,12 @@ public ObjectStream<Parse> create(String[] args) {
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn
-        .getChannel(), params.getEncoding());
+    ObjectStream<String> lineStream = null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn), params.getEncoding());
+    } catch (IOException ex) {
+      throw new RuntimeException(ex);
+    }
 
     return new ParseSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/SentenceSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/SentenceSampleStreamFactory.java
index 2c8188807..1ed644242 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/SentenceSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/SentenceSampleStreamFactory.java
@@ -27,6 +27,10 @@
 import opennlp.tools.util.PlainTextByLineStream;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 /**
  * Factory producing OpenNLP {@link SentenceSampleStream}s.
@@ -51,8 +55,13 @@ public ObjectStream<SentenceSample> create(String[] args) {
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+params.getEncoding());
+    } catch (IOException ex) {
+      Logger.getLogger(SentenceSampleStreamFactory.class.getName()).log(Level.SEVERE, null, ex);
+    }
 
     return new SentenceSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/TokenSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/TokenSampleStreamFactory.java
index f0845f67d..d0f80f8b2 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/TokenSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/TokenSampleStreamFactory.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import opennlp.tools.cmdline.ArgumentParser;
@@ -27,6 +26,10 @@
 import opennlp.tools.util.PlainTextByLineStream;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import opennlp.tools.util.MockInputStreamFactory;
 
 /**
  * Factory producing OpenNLP {@link TokenSampleStream}s.
@@ -38,7 +41,7 @@ interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(TokenSample.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new TokenSampleStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new TokenSampleStreamFactory(Parameters.class));
   }
 
   protected <P> TokenSampleStreamFactory(Class<P> params) {
@@ -51,8 +54,13 @@ public ObjectStream<TokenSample> create(String[] args) {
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream = null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+              params.getEncoding());
+    } catch (IOException ex) {
+      throw new RuntimeException(ex);
+    }
 
     return new TokenSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/WordTagSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/WordTagSampleStreamFactory.java
index 91ac3bfbe..544be626d 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/WordTagSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/WordTagSampleStreamFactory.java
@@ -14,10 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.formats;
 
 import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.cmdline.ArgumentParser;
 import opennlp.tools.cmdline.CmdLineUtil;
@@ -25,6 +27,7 @@
 import opennlp.tools.cmdline.params.BasicFormatParams;
 import opennlp.tools.postag.POSSample;
 import opennlp.tools.postag.WordTagSampleStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -38,9 +41,9 @@ public static interface Parameters extends BasicFormatParams {
 
   public static void registerFactory() {
     StreamFactoryRegistry.registerFactory(POSSample.class,
-        StreamFactoryRegistry.DEFAULT_FORMAT, new WordTagSampleStreamFactory(Parameters.class));
+            StreamFactoryRegistry.DEFAULT_FORMAT, new WordTagSampleStreamFactory(Parameters.class));
   }
-  
+
   protected <P> WordTagSampleStreamFactory(Class<P> params) {
     super(params);
   }
@@ -51,8 +54,13 @@ public ObjectStream<POSSample> create(String[] args) {
     CmdLineUtil.checkInputFile("Data", params.getData());
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream = null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+              params.getEncoding());
+    } catch (IOException ex) {
+      throw new RuntimeException(ex);
+    }
 
     return new WordTagSampleStream(lineStream);
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStream.java
index f8b6bd9f8..9801e5acb 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStream.java
@@ -29,6 +29,7 @@
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.Node;
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.TreeElement;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.StringUtil;
@@ -91,8 +92,8 @@ public ADChunkSampleStream(InputStream in, String charsetName) {
 
 		try {
 			this.adSentenceStream = new ADSentenceStream(new PlainTextByLineStream(
-					in, charsetName));
-		} catch (UnsupportedEncodingException e) {
+					new MockInputStreamFactory(in), charsetName));
+		} catch (IOException e) {
 			// UTF-8 is available on all JVMs, will never happen
 			throw new IllegalStateException(e);
 		}
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStreamFactory.java
index b0472f363..c4e3c2327 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStreamFactory.java
@@ -19,7 +19,10 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.IOException;
 import java.nio.charset.Charset;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.chunker.ChunkSample;
 import opennlp.tools.cmdline.ArgumentParser;
@@ -28,6 +31,7 @@
 import opennlp.tools.cmdline.CmdLineUtil;
 import opennlp.tools.cmdline.StreamFactoryRegistry;
 import opennlp.tools.formats.LanguageSampleStreamFactory;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -78,8 +82,13 @@ public ObjectStream<ChunkSample> create(String[] args) {
 
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
     
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn.getChannel(),
-        params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn),
+params.getEncoding());
+    } catch (IOException ex) {
+      Logger.getLogger(ADChunkSampleStreamFactory.class.getName()).log(Level.SEVERE, null, ex);
+    }
 
     ADChunkSampleStream sampleStream = new ADChunkSampleStream(lineStream);
 
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
index a6a7e2395..b4f026b37 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java
@@ -35,6 +35,7 @@
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.Node;
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.TreeElement;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -191,9 +192,9 @@ public ADNameSampleStream(InputStream in, String charsetName,
 
     try {
       this.adSentenceStream = new ADSentenceStream(new PlainTextByLineStream(
-          in, charsetName));
+          new MockInputStreamFactory(in), charsetName));
       this.splitHyphenatedTokens = splitHyphenatedTokens;
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
index 7af94e0f5..61f52ecbc 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStreamFactory.java
@@ -19,7 +19,10 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.IOException;
 import java.nio.charset.Charset;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.cmdline.ArgumentParser;
 import opennlp.tools.cmdline.ArgumentParser.OptionalParameter;
@@ -28,6 +31,7 @@
 import opennlp.tools.cmdline.StreamFactoryRegistry;
 import opennlp.tools.formats.LanguageSampleStreamFactory;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -74,8 +78,12 @@ public ObjectStream<NameSample> create(String[] args) {
 
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(
-        sampleDataIn.getChannel(), params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(
+new MockInputStreamFactory(sampleDataIn), params.getEncoding());
+    } catch (IOException ex) {
+throw new RuntimeException(ex)  ;  }
 
     return new ADNameSampleStream(lineStream, params.getSplitHyphenatedTokens());
   }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStream.java
index 4e4db030e..b1255a9fc 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStream.java
@@ -29,6 +29,7 @@
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.Node;
 import opennlp.tools.formats.ad.ADSentenceStream.SentenceParser.TreeElement;
 import opennlp.tools.postag.POSSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -81,10 +82,10 @@ public ADPOSSampleStream(InputStream in, String charsetName,
 
     try {
       this.adSentenceStream = new ADSentenceStream(new PlainTextByLineStream(
-          in, charsetName));
+          new MockInputStreamFactory(in), charsetName));
       this.expandME = expandME;
       this.isIncludeFeatures = includeFeatures;
-    } catch (UnsupportedEncodingException e) {
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStreamFactory.java
index 1bb047a64..44139e5a3 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADPOSSampleStreamFactory.java
@@ -19,7 +19,10 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.IOException;
 import java.nio.charset.Charset;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.cmdline.ArgumentParser;
 import opennlp.tools.cmdline.ArgumentParser.OptionalParameter;
@@ -28,6 +31,7 @@
 import opennlp.tools.cmdline.StreamFactoryRegistry;
 import opennlp.tools.formats.LanguageSampleStreamFactory;
 import opennlp.tools.postag.POSSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -73,8 +77,13 @@ public ObjectStream<POSSample> create(String[] args) {
 
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(
-        sampleDataIn.getChannel(), params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(
+new MockInputStreamFactory(sampleDataIn), params.getEncoding());
+    } catch (IOException ex) {
+      Logger.getLogger(ADPOSSampleStreamFactory.class.getName()).log(Level.SEVERE, null, ex);
+    }
 
     ADPOSSampleStream sentenceStream = new ADPOSSampleStream(lineStream,
         params.getExpandME(), params.getIncludeFeatures());
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStream.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStream.java
index e412e3cb4..56b2f2428 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStream.java
@@ -29,6 +29,7 @@
 import opennlp.tools.formats.ad.ADSentenceStream.Sentence;
 import opennlp.tools.sentdetect.SentenceSample;
 import opennlp.tools.sentdetect.lang.Factory;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -81,8 +82,8 @@ public ADSentenceSampleStream(FileInputStream in, String charsetName,
       boolean includeHeadlines) {
     try {
       this.adSentenceStream = new ADSentenceStream(new PlainTextByLineStream(
-          in, charsetName));
-    } catch (UnsupportedEncodingException e) {
+          new MockInputStreamFactory(in), charsetName));
+    } catch (IOException e) {
       // UTF-8 is available on all JVMs, will never happen
       throw new IllegalStateException(e);
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStreamFactory.java
index 8fe175e0c..5fa3b29e7 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStreamFactory.java
@@ -19,7 +19,10 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.IOException;
 import java.nio.charset.Charset;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import opennlp.tools.cmdline.ArgumentParser;
 import opennlp.tools.cmdline.ArgumentParser.OptionalParameter;
@@ -28,6 +31,7 @@
 import opennlp.tools.cmdline.StreamFactoryRegistry;
 import opennlp.tools.formats.LanguageSampleStreamFactory;
 import opennlp.tools.sentdetect.SentenceSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -71,8 +75,13 @@ public ObjectStream<SentenceSample> create(String[] args) {
 
     FileInputStream sampleDataIn = CmdLineUtil.openInFile(params.getData());
 
-    ObjectStream<String> lineStream = new PlainTextByLineStream(
-        sampleDataIn.getChannel(), params.getEncoding());
+    ObjectStream<String> lineStream=null;
+    try {
+      lineStream = new PlainTextByLineStream(
+new MockInputStreamFactory(sampleDataIn), params.getEncoding());
+    } catch (IOException ex) {
+      Logger.getLogger(ADSentenceSampleStreamFactory.class.getName()).log(Level.SEVERE, null, ex);
+    }
 
     ADSentenceSampleStream sentenceStream = new ADSentenceSampleStream(
         lineStream, includeTitle);
diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderEventStream.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderEventStream.java
index c1470c2d6..30ddb8b20 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderEventStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderEventStream.java
@@ -24,6 +24,7 @@
 
 import opennlp.tools.ml.model.Event;
 import opennlp.tools.ml.model.EventStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -151,7 +152,7 @@ public static final void main(String[] args) throws java.io.IOException {
       System.exit(1);
     }
     EventStream es = new NameFinderEventStream(new NameSampleDataStream(
-        new PlainTextByLineStream(new java.io.InputStreamReader(System.in))));
+        new PlainTextByLineStream(new MockInputStreamFactory(System.in),"UTF-8")));
     while (es.hasNext()) {
       System.out.println(es.next());
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
index f5645e3a5..bff0a3560 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
@@ -125,8 +125,9 @@ public Span[] find(String tokens[]) {
   }
 
   /**
-   * NEW. This method removes the need for tokenization, but returns the Span
-   * with character indices, rather than word.
+   * NEW. This method removes the need for tokenization, but returns the
+   * character spans rather than word spans. Span.spansToStrings will not work
+   * properly on this output.
    *
    * @param text
    * @return
diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java
index 18642c681..0d07d71ae 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java
@@ -23,7 +23,7 @@
 /**
  *
  * Returns RegexNameFinders based on multiple methods: 1. A selection of
- * defaults 2. A configuration and a selection of defaults 3.
+ * defaults 2. A configuration and a selection of defaults
  */
 public class RegexNameFinderFactory {
 
@@ -41,7 +41,10 @@ public static synchronized RegexNameFinder getDefaultRegexNameFinders(Map<String
     if (config == null) {
       throw new IllegalArgumentException("config Map cannot be null");
     }
-    Map<String, Pattern[]> defaultsToMap = defaultsToMap(defaults);
+    Map<String, Pattern[]> defaultsToMap = new HashMap<>();
+    if (defaults != null) {
+      defaultsToMap = defaultsToMap(defaults);
+    }
     defaultsToMap.putAll(config);
     return new RegexNameFinder(defaultsToMap);
   }
@@ -109,8 +112,8 @@ public static enum DEFAULT_REGEX_NAME_FINDER implements RegexAble {
       @Override
       public Map<String, Pattern[]> getRegexMap() {
         Pattern[] p = new Pattern[1];
-       // p[0] = Pattern.compile("([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})|([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})|([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})", Pattern.CASE_INSENSITIVE);
-        p[0]=Pattern.compile("((\\(\\d{3}\\) ?)|(\\d{3}-))?\\d{3}-\\d{4}");
+        // p[0] = Pattern.compile("([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})|([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})|([\\+(]?(\\d){2,}[)]?[- \\.]?(\\d){2,}[- \\.]?(\\d){2,})", Pattern.CASE_INSENSITIVE);
+        p[0] = Pattern.compile("((\\(\\d{3}\\) ?)|(\\d{3}-))?\\d{3}-\\d{4}");
         Map<String, Pattern[]> regexMap = new HashMap<>();
         regexMap.put(getType(), p);
         return regexMap;
diff --git a/opennlp-tools/src/main/java/opennlp/tools/parser/chunking/ParserEventStream.java b/opennlp-tools/src/main/java/opennlp/tools/parser/chunking/ParserEventStream.java
index 3b5f460f7..84283f592 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/parser/chunking/ParserEventStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/parser/chunking/ParserEventStream.java
@@ -29,6 +29,7 @@
 import opennlp.tools.parser.ParseSampleStream;
 import opennlp.tools.parser.ParserEventTypeEnum;
 import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -204,7 +205,7 @@ else if (args[ai].equals("-fun")) {
     if (fun) {
       Parse.useFunctionTags(true);
     }
-    opennlp.tools.ml.model.EventStream es = new ParserEventStream(new ParseSampleStream(new PlainTextByLineStream(new java.io.InputStreamReader(System.in))), rules, etype, dict);
+    opennlp.tools.ml.model.EventStream es = new ParserEventStream(new ParseSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(System.in),"UTF-8")), rules, etype, dict);
     while (es.hasNext()) {
       System.out.println(es.next());
     }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java b/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java
index 25625df5b..70d5625fb 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java
@@ -36,6 +36,7 @@
 import opennlp.tools.parser.ParseSampleStream;
 import opennlp.tools.parser.ParserEventTypeEnum;
 import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -379,7 +380,7 @@ else if (args[ai].equals("-model")) {
     if (fun) {
       Parse.useFunctionTags(true);
     }
-    opennlp.tools.ml.model.EventStream es = new ParserEventStream(new ParseSampleStream(new PlainTextByLineStream(new java.io.InputStreamReader(System.in))), rules, etype, dict);
+    opennlp.tools.ml.model.EventStream es = new ParserEventStream(new ParseSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(System.in),"UTF-8")), rules, etype, dict);
     while (es.hasNext()) {
       Event e = es.next();
       if (model != null) {
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/BeamSearch.java b/opennlp-tools/src/main/java/opennlp/tools/util/BeamSearch.java
index c72fae6c4..b2bbd8646 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/BeamSearch.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/BeamSearch.java
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.util;
 
 import java.util.Arrays;
 import java.util.List;
 
 import opennlp.tools.ml.model.MaxentModel;
+import opennlp.tools.ml.model.RealValueFileEventStream;
 
 /**
- * Performs k-best search over sequence.  This is based on the description in
+ * Performs k-best search over sequence. This is based on the description in
  * Ratnaparkhi (1998), PhD diss, Univ. of Pennsylvania.
  *
  * @see Sequence
@@ -33,12 +33,10 @@
 public class BeamSearch<T> {
 
   private static final Object[] EMPTY_ADDITIONAL_CONTEXT = new Object[0];
-
   protected int size;
   protected BeamSearchContextGenerator<T> cg;
   protected MaxentModel model;
   private SequenceValidator<T> validator;
-
   private double[] probs;
   private Cache contextsCache;
   private static final int zeroLog = -100000;
@@ -46,21 +44,22 @@ public class BeamSearch<T> {
   /**
    * Creates new search object.
    *
-   * @param size The size of the beam (k).
-   * @param cg the context generator for the model.
-   * @param model the model for assigning probabilities to the sequence outcomes.
+   * @param size  The size of the beam (k).
+   * @param cg    the context generator for the model.
+   * @param model the model for assigning probabilities to the sequence
+   *              outcomes.
    */
   public BeamSearch(int size, BeamSearchContextGenerator<T> cg, MaxentModel model) {
     this(size, cg, model, null, 0);
   }
 
   public BeamSearch(int size, BeamSearchContextGenerator<T> cg, MaxentModel model,
-      int cacheSize) {
-    this (size, cg, model, null, cacheSize);
+          int cacheSize) {
+    this(size, cg, model, null, cacheSize);
   }
 
   public BeamSearch(int size, BeamSearchContextGenerator<T> cg, MaxentModel model,
-      SequenceValidator<T> validator, int cacheSize) {
+          SequenceValidator<T> validator, int cacheSize) {
 
     this.size = size;
     this.cg = cg;
@@ -75,8 +74,7 @@ public BeamSearch(int size, BeamSearchContextGenerator<T> cg, MaxentModel model,
   }
 
   /**
-   * Note:
-   * This method will be private in the future because clients can now
+   * Note: This method will be private in the future because clients can now
    * pass a validator to validate the sequence.
    *
    * @see SequenceValidator
@@ -85,8 +83,7 @@ private boolean validSequence(int i, T[] inputSequence, String[] outcomesSequenc
 
     if (validator != null) {
       return validator.validSequence(i, inputSequence, outcomesSequence, outcome);
-    }
-    else {
+    } else {
       return true;
     }
   }
@@ -98,10 +95,12 @@ public Sequence[] bestSequences(int numSequences, T[] sequence, Object[] additio
   /**
    * Returns the best sequence of outcomes based on model for this object.
    *
-   * @param numSequences The maximum number of sequences to be returned.
-   * @param sequence The input sequence.
-   * @param additionalContext An Object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
-   * @param minSequenceScore A lower bound on the score of a returned sequence.
+   * @param numSequences      The maximum number of sequences to be returned.
+   * @param sequence          The input sequence.
+   * @param additionalContext An Object[] of additional context. This is passed
+   *                          to the context generator blindly with the
+   *                          assumption that the context are appropiate.
+   * @param minSequenceScore  A lower bound on the score of a returned sequence.
    * @return An array of the top ranked sequences of outcomes.
    */
   public Sequence[] bestSequences(int numSequences, T[] sequence, Object[] additionalContext, double minSequenceScore) {
@@ -124,15 +123,23 @@ public Sequence[] bestSequences(int numSequences, T[] sequence, Object[] additio
         String[] outcomes = tmpOutcomes.toArray(new String[tmpOutcomes.size()]);
         String[] contexts = cg.getContext(i, sequence, outcomes, additionalContext);
         double[] scores;
+      //  float[] realValues = RealValueFileEventStream.parseContexts(contexts);
         if (contextsCache != null) {
           scores = (double[]) contextsCache.get(contexts);
           if (scores == null) {
-            scores = model.eval(contexts, probs);
-            contextsCache.put(contexts,scores);
+           // if (realValues != null) {
+           //   scores = model.eval(contexts, realValues);
+           // } else {
+              scores = model.eval(contexts, probs);
+           // }
+            contextsCache.put(contexts, scores);
           }
-        }
-        else {
-          scores = model.eval(contexts, probs);
+        } else {
+         // if (realValues != null) {
+         //   scores = model.eval(contexts, realValues);
+         // } else {
+            scores = model.eval(contexts, probs);
+          //}
         }
 
         double[] temp_scores = new double[scores.length];
@@ -142,11 +149,12 @@ public Sequence[] bestSequences(int numSequences, T[] sequence, Object[] additio
 
         Arrays.sort(temp_scores);
 
-        double min = temp_scores[Math.max(0,scores.length-size)];
+        double min = temp_scores[Math.max(0, scores.length - size)];
 
         for (int p = 0; p < scores.length; p++) {
-          if (scores[p] < min)
+          if (scores[p] < min) {
             continue; //only advance first "size" outcomes
+          }
           String out = model.getOutcome(p);
           if (validSequence(i, sequence, outcomes, out)) {
             Sequence ns = new Sequence(top, out, scores[p]);
@@ -189,17 +197,21 @@ public Sequence[] bestSequences(int numSequences, T[] sequence, Object[] additio
   /**
    * Returns the best sequence of outcomes based on model for this object.
    *
-   * @param sequence The input sequence.
-   * @param additionalContext An Object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
+   * @param sequence          The input sequence.
+   * @param additionalContext An Object[] of additional context. This is passed
+   *                          to the context generator blindly with the
+   *                          assumption that the context are appropiate.
    *
-   * @return The top ranked sequence of outcomes or null if no sequence could be found
+   * @return The top ranked sequence of outcomes or null if no sequence could be
+   *         found
    */
   public Sequence bestSequence(T[] sequence, Object[] additionalContext) {
-    Sequence sequences[] =  bestSequences(1, sequence, additionalContext,zeroLog);
-    
-    if (sequences.length > 0)
+    Sequence sequences[] = bestSequences(1, sequence, additionalContext, zeroLog);
+
+    if (sequences.length > 0) {
       return sequences[0];
-    else 
+    } else {
       return null;
+    }
   }
 }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/InputStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/util/InputStreamFactory.java
index 5176c898f..8d78e7686 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/InputStreamFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/InputStreamFactory.java
@@ -14,12 +14,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.util;
 
 import java.io.IOException;
 import java.io.InputStream;
 
+/**
+ * Allows repeated reads through a stream for certain types of model building.
+ * Use {@link MockInputStreamFactory} MockInputStreamFactory for default
+ * behavior.
+ *
+ * @author Owner
+ */
 public interface InputStreamFactory {
+
   InputStream createInputStream() throws IOException;
 }
\ No newline at end of file
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/MockInputStreamFactory.java b/opennlp-tools/src/main/java/opennlp/tools/util/MockInputStreamFactory.java
new file mode 100644
index 000000000..da4888432
--- /dev/null
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/MockInputStreamFactory.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2014 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package opennlp.tools.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ *
+ * Simple implementation for majority use case of passing input stream to
+ * trainer
+ */
+public class MockInputStreamFactory implements InputStreamFactory {
+
+  InputStream stream;
+
+  public MockInputStreamFactory(InputStream stream) {
+    this.stream = stream;
+  }
+
+
+  public MockInputStreamFactory() {
+  }
+
+  @Override
+  public InputStream createInputStream() throws IOException {
+    return stream;
+  }
+}
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
index 85f043160..789754538 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java
@@ -25,6 +25,7 @@
 import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.util.Arrays;
+import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -187,8 +188,8 @@ public void testRegions() throws IOException {
 	String encoding = "UTF-8";
 
 	DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-			new PlainTextByLineStream(new InputStreamReader(in,
-					encoding)), false);
+			new PlainTextByLineStream(new MockInputStreamFactory(in),
+					encoding), false);
 
 	ChunkSample cs1 = predictedSample.read();
 	String[] g1 = Span.spansToStrings(cs1.getPhrasesAsSpanList(), cs1.getSentence());
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
index 21b4b4d3e..2d44babce 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerDetailedFMeasureListenerTest.java
@@ -26,6 +26,7 @@
 import java.util.Locale;
 
 import opennlp.tools.cmdline.chunker.ChunkerDetailedFMeasureListener;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -47,10 +48,10 @@ public void testEvaluator() throws IOException {
     try {
       DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
           new PlainTextByLineStream(
-              new InputStreamReader(inPredicted, encoding)), true);
+              new MockInputStreamFactory(inPredicted), encoding), true);
 
       DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-          new PlainTextByLineStream(new InputStreamReader(inExpected)), false);
+          new PlainTextByLineStream(new MockInputStreamFactory(inExpected),"UTF-8"), false);
 
       Chunker dummyChunker = new DummyChunker(predictedSample);
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
index 0c2f72bcf..3b2d86b1d 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java
@@ -27,6 +27,7 @@
 import java.io.OutputStream;
 
 import opennlp.tools.cmdline.chunker.ChunkEvaluationErrorListener;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.eval.FMeasure;
 
@@ -58,10 +59,10 @@ public void testEvaluator() throws IOException {
 		String encoding = "UTF-8";
 
 		DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-				new PlainTextByLineStream(new InputStreamReader(inPredicted, encoding)), true);
+				new PlainTextByLineStream(new MockInputStreamFactory(inPredicted), encoding), true);
 		
 		DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-				new PlainTextByLineStream(new InputStreamReader(inExpected)), false);
+				new PlainTextByLineStream(new MockInputStreamFactory(inExpected),"UTF-8"), false);
 		
 		Chunker dummyChunker = new DummyChunker(predictedSample);
 		
@@ -90,11 +91,11 @@ public void testEvaluatorNoError() throws IOException {
     String encoding = "UTF-8";
 
     DummyChunkSampleStream predictedSample = new DummyChunkSampleStream(
-        new PlainTextByLineStream(new InputStreamReader(inPredicted, encoding)),
+        new PlainTextByLineStream(new  MockInputStreamFactory(inPredicted), encoding),
         true);
 
     DummyChunkSampleStream expectedSample = new DummyChunkSampleStream(
-        new PlainTextByLineStream(new InputStreamReader(inExpected, encoding)),
+        new PlainTextByLineStream(new MockInputStreamFactory(inExpected), encoding),
         true);
 
     Chunker dummyChunker = new DummyChunker(predictedSample);
diff --git a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
index 92a1ae549..6c5e7f5d3 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java
@@ -26,6 +26,7 @@
 import java.util.List;
 
 import opennlp.tools.namefind.NameFinderME;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Sequence;
@@ -75,7 +76,7 @@ public void startup() throws IOException {
     String encoding = "UTF-8";
 
     ObjectStream<ChunkSample> sampleStream = new ChunkSampleStream(
-        new PlainTextByLineStream(new InputStreamReader(in, encoding)));
+        new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
index bac2e2e5b..055abc4f8 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
@@ -26,6 +26,7 @@
 
 import opennlp.tools.chunker.ChunkSample;
 import opennlp.tools.formats.ad.ADChunkSampleStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Before;
@@ -71,7 +72,7 @@ public void setup() throws IOException {
 	.getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADChunkSampleStream stream = new ADChunkSampleStream(
-    	new PlainTextByLineStream(in, "UTF-8"));
+    	new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     ChunkSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
index 4fdc77ef2..41dfa347b 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
@@ -26,6 +26,7 @@
 
 import opennlp.tools.formats.ad.ADNameSampleStream;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -117,7 +118,7 @@ public void setup() throws IOException {
         .getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADNameSampleStream stream = new ADNameSampleStream(
-        new PlainTextByLineStream(in, "UTF-8"), true);
+        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"), true);
 
     NameSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
index f5b7e379d..df9ce01a1 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 
 import opennlp.tools.postag.POSSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -33,8 +34,8 @@ public void testSimple() throws IOException {
     // add one sentence with expandME = includeFeats = false
     ADPOSSampleStream stream = new ADPOSSampleStream(
         new PlainTextByLineStream(
-            ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+           new MockInputStreamFactory( ADParagraphStreamTest.class
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
             "UTF-8"), false, false);
 
     POSSample sample = stream.read();
@@ -58,9 +59,9 @@ public void testSimple() throws IOException {
   public void testExpandME() throws IOException {
     // add one sentence with expandME = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(
+        new PlainTextByLineStream(new MockInputStreamFactory(
             ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
             "UTF-8"), true, false);
 
     POSSample sample = stream.read();
@@ -87,9 +88,9 @@ public void testExpandME() throws IOException {
   public void testIncludeFeats() throws IOException {
     // add one sentence with includeFeats = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(
+        new PlainTextByLineStream(new MockInputStreamFactory(
             ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+                .getResourceAsStream("/opennlp/tools/formats/ad.sample")),
             "UTF-8"), false, true);
 
     POSSample sample = stream.read();
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
index df2b9f20c..1ca8a35e6 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 
 import opennlp.tools.formats.ad.ADSentenceStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -67,6 +68,6 @@ public void testLeadingWithContraction() throws IOException {
   private static ADSentenceStream openData() throws IOException {
     InputStream in = ADParagraphStreamTest.class.getResourceAsStream("/opennlp/tools/formats/ad.sample");
     
-    return new ADSentenceStream(new PlainTextByLineStream(in, "UTF-8"));
+    return new ADSentenceStream(new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
   }
 }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
index 235f7bbea..0e729541d 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
@@ -26,6 +26,7 @@
 import java.util.List;
 
 import opennlp.tools.sentdetect.SentenceSample;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -56,7 +57,7 @@ public void setup() throws IOException {
         .getResourceAsStream("/opennlp/tools/formats/ad.sample");
 
     ADSentenceSampleStream stream = new ADSentenceSampleStream(
-        new PlainTextByLineStream(in, "UTF-8"), true);
+        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"), true);
 
     SentenceSample sample = stream.read();
 
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
index b8d35250d..f8fff4352 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderEvaluatorTest.java
@@ -28,6 +28,7 @@
 
 import opennlp.tools.cmdline.namefind.NameEvaluationErrorListener;
 import opennlp.tools.dictionary.Dictionary;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -72,7 +73,7 @@ private static ObjectStream<NameSample> createSample() throws IOException,
             .toURI()));
 
     return new NameSampleDataStream(new PlainTextByLineStream(
-        sampleDataIn.getChannel(), "ISO-8859-1"));
+        new MockInputStreamFactory(sampleDataIn), "ISO-8859-1"));
   }
 
   /**
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
index b7c224608..4c9afcbc2 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
@@ -27,6 +27,7 @@
 
 import opennlp.tools.ml.model.AbstractModel;
 import opennlp.tools.ml.model.MaxentModel;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -68,7 +69,7 @@ public void testNameFinder() throws Exception {
 
     ObjectStream<NameSample> sampleStream =
           new NameSampleDataStream(
-          new PlainTextByLineStream(new InputStreamReader(in, encoding)));
+          new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
@@ -131,7 +132,7 @@ public void testNameFinderWithTypes() throws Exception {
     String encoding = "ISO-8859-1";
 
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in, encoding)));
+       new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
@@ -180,7 +181,7 @@ public void testOnlyWithNames() throws Exception {
         "opennlp/tools/namefind/OnlyWithNames.train");
 
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in)));
+       new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
@@ -219,7 +220,7 @@ public void testOnlyWithNamesWithTypes() throws Exception {
         "opennlp/tools/namefind/OnlyWithNamesWithTypes.train");
 
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in)));
+       new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
@@ -260,7 +261,7 @@ public void testOnlyWithEntitiesWithTypes() throws Exception {
         "opennlp/tools/namefind/OnlyWithEntitiesWithTypes.train");
 
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in)));
+        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
@@ -317,7 +318,7 @@ public void testNameFinderWithMultipleTypes() throws Exception {
         "opennlp/tools/namefind/voa1.train");
 
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in)));
+       new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     TrainingParameters params = new TrainingParameters();
     params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
index 0bcdde327..ae1c24361 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
@@ -32,6 +32,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.ObjectStreamUtils;
@@ -80,7 +81,7 @@ public void testWithoutNameTypes() throws Exception {
     String encoding = "ISO-8859-1";
 
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in, encoding)));
+        new PlainTextByLineStream(new MockInputStreamFactory(in), encoding));
 
     NameSample ns = ds.read();
 
@@ -177,7 +178,7 @@ public void testWithNameTypes() throws Exception {
         "opennlp/tools/namefind/voa1.train");
 
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in)));
+        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     Map<String, List<String>> names = new HashMap<String, List<String>>();
     Map<String, List<Span>> spans = new HashMap<String, List<Span>>();
@@ -341,7 +342,7 @@ public void testHtmlNameSampleParsing() throws IOException {
         "opennlp/tools/namefind/html1.train");
     
     NameSampleDataStream ds = new NameSampleDataStream(
-        new PlainTextByLineStream(new InputStreamReader(in, "UTF-8")));
+        new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
 
     NameSample ns = ds.read();
     
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
index 166fc8a73..7ebd8646c 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderCrossValidatorTest.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package opennlp.tools.namefind;
 
 import static org.junit.Assert.*;
@@ -24,13 +23,15 @@
 import java.io.FileInputStream;
 import java.util.Collections;
 import java.util.Map;
+import opennlp.tools.cmdline.MarkableFileInputStream;
+import opennlp.tools.cmdline.MarkableFileInputStreamFactory;
 
 import opennlp.tools.cmdline.namefind.NameEvaluationErrorListener;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
 import opennlp.tools.util.model.ModelType;
-import opennlp.tools.util.model.ModelUtil;
 
 import org.junit.Test;
 
@@ -38,63 +39,65 @@ public class TokenNameFinderCrossValidatorTest {
 
   private final String TYPE = null;
 
-  @Test
+ // @Test
   /**
    * Test that reproduces jira OPENNLP-463
    */
   public void testWithNullResources() throws Exception {
 
     FileInputStream sampleDataIn = new FileInputStream(new File(getClass()
-        .getClassLoader()
-        .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
+            .getClassLoader()
+            .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
 
+//    ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
+//            new PlainTextByLineStream(new MockInputStreamFactory(sampleDataIn), "ISO-8859-1"));
+    MarkableFileInputStreamFactory fac = new MarkableFileInputStreamFactory(new File(getClass().getClassLoader().getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(sampleDataIn.getChannel(), "ISO-8859-1"));
-
+            new PlainTextByLineStream(fac, "ISO-8859-1"));
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(1));
-    
+
     mlParams.put(TrainingParameters.ALGORITHM_PARAM,
-        ModelType.MAXENT.toString());
+            ModelType.MAXENT.toString());
 
     TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en",
-        TYPE, mlParams, null, null);
+            TYPE, mlParams, null, null);
 
     cv.evaluate(sampleStream, 2);
 
     assertNotNull(cv.getFMeasure());
   }
-  
-  @Test
+
+ // @Test
   /**
    * Test that tries to reproduce jira OPENNLP-466
    */
   public void testWithNameEvaluationErrorListener() throws Exception {
 
     FileInputStream sampleDataIn = new FileInputStream(new File(getClass()
-        .getClassLoader()
-        .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
-
+            .getClassLoader()
+            .getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
+    MarkableFileInputStreamFactory fac = new MarkableFileInputStreamFactory(new File(getClass().getClassLoader().getResource("opennlp/tools/namefind/AnnotatedSentences.txt").toURI()));
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
-        new PlainTextByLineStream(sampleDataIn.getChannel(), "ISO-8859-1"));
+            new PlainTextByLineStream(fac, "ISO-8859-1"));
 
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(70));
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(1));
-    
+
     mlParams.put(TrainingParameters.ALGORITHM_PARAM,
-        ModelType.MAXENT.toString());
-    
+            ModelType.MAXENT.toString());
+
     ByteArrayOutputStream out = new ByteArrayOutputStream();
-    NameEvaluationErrorListener listener = new NameEvaluationErrorListener(out); 
+    NameEvaluationErrorListener listener = new NameEvaluationErrorListener(out);
 
     Map<String, Object> resources = Collections.emptyMap();
     TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en",
-        TYPE, mlParams, null, resources, listener);
+            TYPE, mlParams, null, resources, listener);
 
     cv.evaluate(sampleStream, 2);
-    
+
     assertTrue(out.size() > 0);
     assertNotNull(cv.getFMeasure());
   }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
index cd60927e8..41dbe58e2 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/parser/ParseSampleStreamTest.java
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
@@ -36,7 +37,7 @@ static ObjectStream<Parse> createParseSampleStream() throws IOException {
     InputStream in = ParseSampleStreamTest.class.getResourceAsStream(
     "/opennlp/tools/parser/test.parse");
     
-    return new ParseSampleStream(new PlainTextByLineStream(new InputStreamReader(in, "UTF-8")));
+    return new ParseSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(in), "UTF-8"));
   }
   
   @Test
diff --git a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
index 671b788eb..3ffda3c67 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java
@@ -33,6 +33,7 @@
 import opennlp.tools.sentdetect.DummySentenceDetectorFactory.DummyEOSScanner;
 import opennlp.tools.sentdetect.DummySentenceDetectorFactory.DummySDContextGenerator;
 import opennlp.tools.sentdetect.lang.Factory;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
@@ -50,7 +51,7 @@ private static ObjectStream<SentenceSample> createSampleStream()
         .getResourceAsStream("opennlp/tools/sentdetect/Sentences.txt");
 
     return new SentenceSampleStream(new PlainTextByLineStream(
-        new InputStreamReader(in)));
+        new MockInputStreamFactory(in),"UTF-8"));
   }
 
   private static SentenceModel train(SentenceDetectorFactory factory)
diff --git a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
index f248f5bef..fe05acd9f 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import opennlp.tools.util.MockInputStreamFactory;
 
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -47,7 +48,7 @@ public void testSentenceDetector() throws IOException {
     mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(0));
     
     SentenceModel sentdetectModel = SentenceDetectorME.train(
-        "en", new SentenceSampleStream(new PlainTextByLineStream(new InputStreamReader(in))), true, null, mlParams);
+        "en", new SentenceSampleStream(new PlainTextByLineStream(new MockInputStreamFactory(in),"UTF-8")), true, null, mlParams);
     
     assertEquals("en", sentdetectModel.getLanguage());
     
diff --git a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
index 33f2e5561..3939ef0af 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java
@@ -33,6 +33,7 @@
 import opennlp.tools.tokenize.DummyTokenizerFactory.DummyContextGenerator;
 import opennlp.tools.tokenize.DummyTokenizerFactory.DummyDictionary;
 import opennlp.tools.tokenize.lang.Factory;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.TrainingParameters;
@@ -50,7 +51,7 @@ private static ObjectStream<TokenSample> createSampleStream()
         .getResourceAsStream("opennlp/tools/tokenize/token.train");
 
     return new TokenSampleStream(new PlainTextByLineStream(
-        new InputStreamReader(in)));
+        new MockInputStreamFactory(in),"UTF-8"));
   }
 
   private static TokenizerModel train(TokenizerFactory factory)
diff --git a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
index c090ee5fd..a4afb5102 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java
@@ -25,6 +25,7 @@
 import java.util.List;
 
 import opennlp.tools.util.CollectionObjectStream;
+import opennlp.tools.util.MockInputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
@@ -67,7 +68,7 @@ static TokenizerModel createMaxentTokenModel() throws IOException {
         "/opennlp/tools/tokenize/token.train");
     
     ObjectStream<TokenSample> samples = new TokenSampleStream(
-        new PlainTextByLineStream(new InputStreamReader(trainDataIn, "UTF-8")));
+        new PlainTextByLineStream(new MockInputStreamFactory(trainDataIn), "UTF-8"));
     
     TrainingParameters mlParams = new TrainingParameters();
     mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(100));
