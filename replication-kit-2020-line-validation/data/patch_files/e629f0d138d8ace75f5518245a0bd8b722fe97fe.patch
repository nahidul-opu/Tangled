From e629f0d138d8ace75f5518245a0bd8b722fe97fe Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Mon, 22 Aug 2011 14:00:12 +0000
Subject: [PATCH] OPENNLP-170 correctionConstant is now a double instead of an
 integer

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1160268 13f79535-47bb-0310-9956-ffa450edef68
---
 .../src/main/java/opennlp/maxent/GISTrainer.java          | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/opennlp-maxent/src/main/java/opennlp/maxent/GISTrainer.java b/opennlp-maxent/src/main/java/opennlp/maxent/GISTrainer.java
index fcf016859..9ff7dbd78 100644
--- a/opennlp-maxent/src/main/java/opennlp/maxent/GISTrainer.java
+++ b/opennlp-maxent/src/main/java/opennlp/maxent/GISTrainer.java
@@ -265,7 +265,7 @@ public GISModel trainModel(int iterations, DataIndexer di, Prior modelPrior, int
     //printTable(contexts);
 
     // determine the correction constant and its inverse
-    int correctionConstant = 1;
+    double correctionConstant = 1;
     for (int ci = 0; ci < contexts.length; ci++) {
       if (values == null || values[ci] == null) {
         if (contexts[ci].length > correctionConstant) {
@@ -279,7 +279,7 @@ public GISModel trainModel(int iterations, DataIndexer di, Prior modelPrior, int
         }
         
         if (cl > correctionConstant) {
-          correctionConstant=(int) Math.ceil(cl);
+          correctionConstant = cl;
         }
       }
     }
@@ -400,7 +400,7 @@ else if (useSimpleSmoothing) {
   }
 
   /* Estimate and return the model parameters. */
-  private void findParameters(int iterations, int correctionConstant) {
+  private void findParameters(int iterations, double correctionConstant) {
     double prevLL = 0.0;
     double currLL = 0.0;
     display("Performing " + iterations + " iterations.\n");
@@ -542,7 +542,7 @@ synchronized double getLoglikelihood() {
   }
   
   /* Compute one iteration of GIS and retutn log-likelihood.*/
-  private double nextIteration(int correctionConstant) {
+  private double nextIteration(double correctionConstant) {
     // compute contribution of p(a|b_i) for each feature and the new
     // correction parameter
     double loglikelihood = 0.0;
