From 6bbd9d768fe6fe8ef8f95602cd19b534c227929f Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 3 Aug 2011 20:11:23 +0000
Subject: [PATCH] [CONFIGURATION-455] Improvements of
 HierarchicalINIConfiguration.getSection(): - The section is created if it
 does not exist. - The returned SubnodeConfiguration is now always connected
 to the parent configuration.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1153637 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 ++
 .../HierarchicalINIConfiguration.java         | 32 +++++---
 .../TestHierarchicalINIConfiguration.java     | 75 +++++++++++++++++++
 3 files changed, 100 insertions(+), 12 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4723963a77..3c4e58d0fd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -28,6 +28,11 @@
         clear() method. This is more efficient and also solves some other
         problems related to clearing a SubnodeConfiguration.
       </action>
+      <action dev="oheger" type="update" issue="CONFIGURATION-455">
+        HierarchicalINIConfiguration.getSection() now creates a section if it
+        does not exist. The SubnodeConfiguration returned by this method is now
+        always connected to the parent ini configuration.
+      </action>
       <action dev="oheger" type="add" issue="CONFIGURATION-452">
         XPathExpressionEngine now provides better support for the setProperty()
         method.
diff --git a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
index 04e9236317..4ffe6fc9e4 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
@@ -30,7 +30,6 @@
 
 import org.apache.commons.collections.set.ListOrderedSet;
 import org.apache.commons.configuration.tree.ConfigurationNode;
-import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.ViewNode;
 import org.apache.commons.lang.StringUtils;
 
@@ -87,8 +86,10 @@
  * '=' to separate keys and values in parameters, for example
  * <code>var1 : foo</code>.</li>
  * <li><b>Duplicate sections:</b> Typically duplicate sections are not allowed,
- * this configuration does however support it. In the event of a duplicate
- * section, the two section's values are merged.</li>
+ * this configuration does however support this feature. In the event of a duplicate
+ * section, the two section's values are merged so that there is only a single
+ * section. <strong>Note</strong>: This also affects the internal data of the
+ * configuration. If it is saved, only a single section is written!</li>
  * <li><b>Duplicate parameters:</b> Typically duplicate parameters are only
  * allowed if they are in two different sections, thus they are local to
  * sections; this configuration simply merges duplicates; if a section has a
@@ -177,7 +178,10 @@
  * also use other methods of {@link HierarchicalConfiguration} for querying or
  * manipulating the hierarchy of configuration nodes, for instance the
  * <code>configurationAt()</code> method for obtaining the data of a specific
- * section.
+ * section. However, be careful that the storage scheme described above is not
+ * violated (e.g. by adding multiple levels of nodes or inserting duplicate
+ * section nodes). Otherwise, the special methods for ini configurations may not
+ * work correctly!
  * </p>
  * <p>
  * The set of sections in this configuration can be retrieved using the
@@ -738,13 +742,18 @@ public Set getSections()
      * Returns a configuration with the content of the specified section. This
      * provides an easy way of working with a single section only. The way this
      * configuration is structured internally, this method is very similar to
-     * calling
-     * <code>{@link HierarchicalConfiguration#configurationAt(String)}</code>
-     * with the name of the section in question. There are the following
-     * differences however:
+     * calling {@link HierarchicalConfiguration#configurationAt(String)} with
+     * the name of the section in question. There are the following differences
+     * however:
      * <ul>
      * <li>This method never throws an exception. If the section does not exist,
-     * an empty configuration is returned.</li>
+     * it is created now. The configuration returned in this case is empty.</li>
+     * <li>If section is contained multiple times in the configuration, the
+     * configuration returned by this method is initialized with the first
+     * occurrence of the section. (This can only happen if
+     * <code>addProperty()</code> has been used in a way that does not conform
+     * to the storage scheme used by <code>HierarchicalINIConfiguration</code>.
+     * If used correctly, there will not be duplicate sections.)</li>
      * <li>There is special support for the global section: Passing in
      * <b>null</b> as section name returns a configuration with the content of
      * the global section (which may also be empty).</li>
@@ -771,9 +780,8 @@ public SubnodeConfiguration getSection(String name)
             catch (IllegalArgumentException iex)
             {
                 // the passed in key does not map to exactly one node
-                // return an empty configuration
-                return new SubnodeConfiguration(this,
-                        new DefaultConfigurationNode());
+                // obtain the node for the section, create it on demand
+                return new SubnodeConfiguration(this, getSectionNode(name));
             }
         }
     }
diff --git a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
index 486d3cbf43..ff446228c7 100644
--- a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
@@ -752,6 +752,81 @@ public void testMultipleSeparatorsQuoted() throws ConfigurationException
                 config.getString("section.var:8"));
     }
 
+    /**
+     * Tests whether a section that has been cleared can be manipulated and
+     * saved later.
+     */
+    public void testSaveClearedSection() throws ConfigurationException
+    {
+        final String data = "[section]\ntest = failed\n";
+        HierarchicalINIConfiguration config = setUpConfig(data);
+        SubnodeConfiguration sub = config.getSection("section");
+        assertFalse("No content", sub.isEmpty());
+        sub.clear();
+        sub.setProperty("test", "success");
+        StringWriter writer = new StringWriter();
+        config.save(writer);
+        HierarchicalConfiguration config2 = setUpConfig(writer.toString());
+        assertEquals("Wrong value", "success",
+                config2.getString("section.test"));
+    }
+
+    /**
+     * Tests whether a duplicate session is merged.
+     */
+    public void testMergeDuplicateSection() throws ConfigurationException
+    {
+        final String data =
+                "[section]\nvar1 = sec1\n\n" + "[section]\nvar2 = sec2\n";
+        HierarchicalINIConfiguration config = setUpConfig(data);
+        assertEquals("Wrong value 1", "sec1", config.getString("section.var1"));
+        assertEquals("Wrong value 2", "sec2", config.getString("section.var2"));
+        SubnodeConfiguration sub = config.getSection("section");
+        assertEquals("Wrong sub value 1", "sec1", sub.getString("var1"));
+        assertEquals("Wrong sub value 2", "sec2", sub.getString("var2"));
+        StringWriter writer = new StringWriter();
+        config.save(writer);
+        String content = writer.toString();
+        int pos = content.indexOf("[section]");
+        assertTrue("Section not found: " + content, pos >= 0);
+        assertTrue("Section found multiple times: " + content,
+                content.indexOf("[section]", pos + 1) < 0);
+    }
+
+    /**
+     * Tests whether a section that was created by getSection() can be
+     * manipulated.
+     */
+    public void testGetSectionNonExistingManipulate()
+            throws ConfigurationException
+    {
+        HierarchicalINIConfiguration config = setUpConfig(INI_DATA);
+        SubnodeConfiguration section = config.getSection("newSection");
+        section.addProperty("test", "success");
+        assertEquals("Main config not updated", "success",
+                config.getString("newSection.test"));
+        StringWriter writer = new StringWriter();
+        config.save(writer);
+        HierarchicalINIConfiguration config2 = setUpConfig(writer.toString());
+        section = config2.getSection("newSection");
+        assertEquals("Wrong value", "success", section.getString("test"));
+    }
+
+    /**
+     * Tests whether getSection() can deal with duplicate sections.
+     */
+    public void testGetSectionDuplicate()
+    {
+        HierarchicalINIConfiguration config =
+                new HierarchicalINIConfiguration();
+        config.addProperty("section.var1", "value1");
+        config.addProperty("section(-1).var2", "value2");
+        SubnodeConfiguration section = config.getSection("section");
+        Iterator keys = section.getKeys();
+        assertEquals("Wrong key", "var1", keys.next());
+        assertFalse("Too many keys", keys.hasNext());
+    }
+
     /**
      * A thread class for testing concurrent access to the global section.
      */
