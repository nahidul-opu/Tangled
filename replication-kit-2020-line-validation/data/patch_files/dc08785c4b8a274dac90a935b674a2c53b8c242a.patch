From dc08785c4b8a274dac90a935b674a2c53b8c242a Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Thu, 2 Aug 2007 02:32:18 +0000
Subject: [PATCH] Conflict resolution for conditionless stay transitions.  *
 Stay transitions should have empty set of exit states  * Since one transition
 must "win", by definition all candidate transitions are in conflict with each
 other Added a simplified version of test case provided by Ingmar Kliche to
 the test suite. Added Ingmar to list of contributors. SCXML-52

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/scxml/trunk@561998 13f79535-47bb-0310-9956-ffa450edef68
---
 pom.xml                                       |  3 ++
 project.xml                                   |  3 ++
 .../org/apache/commons/scxml/SCXMLHelper.java |  3 ++
 .../scxml/semantics/SCXMLSemanticsImpl.java   | 30 +++++++---------
 .../apache/commons/scxml/TieBreakerTest.java  | 15 ++++++--
 .../apache/commons/scxml/tie-breaker-04.xml   | 36 +++++++++++++++++++
 6 files changed, 70 insertions(+), 20 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/scxml/tie-breaker-04.xml

diff --git a/pom.xml b/pom.xml
index e30c79ec2..c35c742fe 100644
--- a/pom.xml
+++ b/pom.xml
@@ -81,6 +81,9 @@
     <contributor>
       <name>Michael Heuer</name>
     </contributor>
+    <contributor>
+      <name>Ingmar Kliche</name>
+    </contributor>
   </contributors>
 
   <dependencies>
diff --git a/project.xml b/project.xml
index c89e1c523..3ae17edb7 100644
--- a/project.xml
+++ b/project.xml
@@ -116,6 +116,9 @@
     <contributor>
       <name>Michael Heuer</name>
     </contributor>
+    <contributor>
+      <name>Ingmar Kliche</name>
+    </contributor>
   </contributors>
   
   <dependencies>
diff --git a/src/main/java/org/apache/commons/scxml/SCXMLHelper.java b/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
index d93981d01..77be38413 100644
--- a/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
+++ b/src/main/java/org/apache/commons/scxml/SCXMLHelper.java
@@ -228,6 +228,9 @@ public static TransitionTarget getLCA(final TransitionTarget tt1,
     public static Set getStatesExited(final Transition t,
             final Set currentStates) {
         Set allStates = new HashSet();
+        if (t.getTargets().size() == 0) {
+            return allStates;
+        }
         Path p = (Path) t.getPaths().get(0); // all paths have same upseg
         //the easy part
         allStates.addAll(p.getUpwardSegment());
diff --git a/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java b/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
index 77c608bf9..f2c84672b 100644
--- a/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
+++ b/src/main/java/org/apache/commons/scxml/semantics/SCXMLSemanticsImpl.java
@@ -426,7 +426,6 @@ public void filterTransitionsSet(final Step step,
         if (step.getTransitList().size() > 1) {
             // global transition precedence check
             Object[] trans = step.getTransitList().toArray();
-            Set currentStates = step.getBeforeStatus().getStates();
             // non-determinism candidates
             Set nonDeterm = new LinkedHashSet();
             for (int i = 0; i < trans.length; i++) {
@@ -434,23 +433,18 @@ public void filterTransitionsSet(final Step step,
                 TransitionTarget tsrc = t.getParent();
                 for (int j = i + 1; j < trans.length; j++) {
                     Transition t2 = (Transition) trans[j];
-                    boolean conflict = SCXMLHelper.inConflict(t, t2,
-                            currentStates);
-                    if (conflict) {
-                        //potentially conflicting transitions
-                        TransitionTarget t2src = t2.getParent();
-                        if (SCXMLHelper.isDescendant(t2src, tsrc)) {
-                            //t2 takes precedence over t
-                            removeList.add(t);
-                            break; //it makes no sense to waste cycles with t
-                        } else if (SCXMLHelper.isDescendant(tsrc, t2src)) {
-                            //t takes precendence over t2
-                            removeList.add(t2);
-                        } else {
-                            //add both to the non-determinism candidates
-                            nonDeterm.add(t);
-                            nonDeterm.add(t2);
-                        }
+                    TransitionTarget t2src = t2.getParent();
+                    if (SCXMLHelper.isDescendant(t2src, tsrc)) {
+                        //t2 takes precedence over t
+                        removeList.add(t);
+                        break; //it makes no sense to waste cycles with t
+                    } else if (SCXMLHelper.isDescendant(tsrc, t2src)) {
+                        //t takes precendence over t2
+                        removeList.add(t2);
+                    } else {
+                        //add both to the non-determinism candidates
+                        nonDeterm.add(t);
+                        nonDeterm.add(t2);
                     }
                 }
             }
diff --git a/src/test/java/org/apache/commons/scxml/TieBreakerTest.java b/src/test/java/org/apache/commons/scxml/TieBreakerTest.java
index 766ff1471..d1b9ca201 100644
--- a/src/test/java/org/apache/commons/scxml/TieBreakerTest.java
+++ b/src/test/java/org/apache/commons/scxml/TieBreakerTest.java
@@ -53,7 +53,7 @@ public static Test suite() {
     }
 
     // Test data
-    private URL tiebreaker01, tiebreaker02, tiebreaker03;
+    private URL tiebreaker01, tiebreaker02, tiebreaker03, tiebreaker04;
     private SCXMLExecutor exec;
 
     /**
@@ -66,13 +66,15 @@ public void setUp() {
             getResource("org/apache/commons/scxml/tie-breaker-02.xml");
         tiebreaker03 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/tie-breaker-03.xml");
+        tiebreaker04 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/tie-breaker-04.xml");
     }
 
     /**
      * Tear down instance variables required by this test case.
      */
     public void tearDown() {
-        tiebreaker01 = tiebreaker02 = tiebreaker03 = null;
+        tiebreaker01 = tiebreaker02 = tiebreaker03 = tiebreaker04 = null;
     }
 
     /**
@@ -117,6 +119,15 @@ public void testTieBreaker03() {
             next()).getId());
     }
 
+    public void testTieBreaker04() {
+        exec = SCXMLTestHelper.getExecutor(tiebreaker04);
+        assertNotNull(exec);
+        Set currentStates = SCXMLTestHelper.fireEvent(exec, "event_2");
+        assertEquals(1, currentStates.size());
+        currentStates = SCXMLTestHelper.fireEvent(exec, "event_1");
+        assertEquals(1, currentStates.size());
+    }
+
     public static void main(String args[]) {
         TestRunner.run(suite());
     }
diff --git a/src/test/java/org/apache/commons/scxml/tie-breaker-04.xml b/src/test/java/org/apache/commons/scxml/tie-breaker-04.xml
new file mode 100644
index 000000000..df87e637b
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/tie-breaker-04.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0" initialstate="s1"> 
+     
+    <state id="s1"> 
+        <initial> 
+            <transition target="s11"/> 
+        </initial> 
+         
+        <transition event="event_1"/>
+        
+        <transition event="event_2" target="s1"/>
+         
+        <state id="s11"> 
+            <transition event="event_1"/>
+            <transition event="event_2" target="s11"/>
+        </state> 
+    </state> 
+     
+    <state id="s2" final="true" /> 
+</scxml> 
