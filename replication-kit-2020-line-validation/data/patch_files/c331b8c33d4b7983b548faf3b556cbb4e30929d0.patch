From c331b8c33d4b7983b548faf3b556cbb4e30929d0 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <imario@apache.org>
Date: Mon, 2 Oct 2006 19:46:01 +0000
Subject: [PATCH] VFS-81: pass down the FileName instance down to the
 filesystem to not loose the url query parameters

fixed test-problems with the virtualFileSytem test case

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/vfs/trunk@452181 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs/provider/AbstractFileProvider.java    |  5 ++-
 .../AbstractOriginatingFileProvider.java      |  3 +-
 .../vfs/test/AbstractProviderTestCase.java    | 10 ++++++
 .../vfs/test/ProviderCacheStrategyTests.java  | 33 +++++++++++--------
 4 files changed, 36 insertions(+), 15 deletions(-)

diff --git a/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java b/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
index 6240aa86b9..283e86d781 100644
--- a/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
+++ b/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
@@ -146,7 +146,10 @@ public void closeFileSystem(final FileSystem filesystem)
 
         synchronized (fileSystems)
         {
-            fileSystems.remove(fs.getCacheKey());
+            if (fs.getCacheKey() != null)
+            {
+                fileSystems.remove(fs.getCacheKey());
+            }
         }
 
         removeComponent(fs);
diff --git a/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java b/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
index e14f6c5932..6880e34cd4 100644
--- a/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
+++ b/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
@@ -78,7 +78,8 @@ protected synchronized FileObject findFile(final FileName name, final FileSystem
         }
 
         // Locate the file
-        return fs.resolveFile(name.getPath());
+        // return fs.resolveFile(name.getPath());
+        return fs.resolveFile(name);
     }
 
     /**
diff --git a/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java b/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
index 5a163b541e..b2ef737c24 100644
--- a/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
+++ b/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
@@ -22,6 +22,7 @@
 import org.apache.commons.vfs.FileObject;
 import org.apache.commons.vfs.FileSystemException;
 import org.apache.commons.vfs.FileType;
+import org.apache.commons.vfs.FileSystemManager;
 import org.apache.commons.vfs.impl.DefaultFileSystemManager;
 import org.apache.commons.vfs.provider.AbstractFileSystem;
 import org.apache.commons.vfs.provider.local.DefaultLocalFileProvider;
@@ -106,6 +107,15 @@ protected DefaultFileSystemManager createManager() throws Exception
 	    }
 	    return fs;
     }
+
+    /**
+     * some provider config do some post-initialization in getBaseTestFolder.
+     * This is a hack to allow access to this code for <code>createManager</code>
+     */
+    protected FileObject getBaseTestFolder(FileSystemManager fs) throws Exception
+    {
+        return providerConfig.getBaseTestFolder(fs);
+    }
     
     /**
      * Returns the base test folder.  This is the parent of both the read
diff --git a/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java b/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
index 602370d5dd..99c6734a3c 100644
--- a/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
+++ b/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
@@ -22,6 +22,7 @@
 import org.apache.commons.vfs.provider.ram.RamFileObject;
 import org.apache.commons.vfs.util.FileObjectUtils;
 import org.apache.commons.vfs.impl.DefaultFileSystemManager;
+import org.apache.commons.vfs.impl.VirtualFileSystem;
 
 /**
  * Test the cache stragey
@@ -49,20 +50,22 @@ protected Capability[] getRequiredCaps()
      */
     public void testManualCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.MANUAL);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
@@ -82,20 +85,22 @@ public void testManualCache() throws Exception
      */
     public void testOnResolveCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.ON_RESOLVE);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
@@ -105,7 +110,7 @@ public void testOnResolveCache() throws Exception
         fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
         
-        cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         fos = cachedFolder.getChildren();
         assertContains(fos, "file1.txt");
     }
@@ -115,20 +120,22 @@ public void testOnResolveCache() throws Exception
      */
     public void testOnCallCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.ON_CALL);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
