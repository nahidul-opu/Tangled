From aaf311cd404e8458d995afbd9552defc1bdf4985 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Sun, 22 Apr 2007 18:54:57 +0000
Subject: [PATCH] CONFIGURATION-265: Auto-save of hierarchical file-based
 configurations is now also triggered by changes at a SubnodeConfiguration. A
 new event type EVENT_SUBNODE_CHANGED was introduced to report such changes to
 registered event listeners. Improvements of JavaDoc for
 HierarchicalConfiguration.

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@531254 13f79535-47bb-0310-9956-ffa450edef68
---
 ...AbstractHierarchicalFileConfiguration.java | 13 +++
 .../HierarchicalConfiguration.java            | 82 +++++++++++++++++--
 .../configuration/SubnodeConfiguration.java   |  4 +-
 .../configuration/TestXMLConfiguration.java   | 49 ++++++++---
 .../AbstractTestConfigurationEvents.java      | 21 ++++-
 .../TestHierarchicalConfigurationEvents.java  | 41 ++++++++++
 xdocs/changes.xml                             |  6 ++
 xdocs/userguide/howto_events.xml              | 13 ++-
 8 files changed, 206 insertions(+), 23 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
index 467197344f..8708e78b95 100644
--- a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
@@ -338,6 +338,19 @@ protected List fetchNodeList(String key)
         return super.fetchNodeList(key);
     }
 
+    /**
+     * Reacts on changes of an associated subnode configuration. If the auto
+     * save mechanism is active, the configuration must be saved.
+     *
+     * @param event the event describing the change
+     * @since 1.5
+     */
+    protected void subnodeConfigurationChanged(ConfigurationEvent event)
+    {
+        delegate.possiblySave();
+        super.subnodeConfigurationChanged(event);
+    }
+
     /**
      * Creates the file configuration delegate, i.e. the object that implements
      * functionality required by the <code>FileConfiguration</code> interface.
diff --git a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
index 620b4803e1..82417b7264 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
@@ -28,12 +28,15 @@
 
 import org.apache.commons.collections.set.ListOrderedSet;
 import org.apache.commons.collections.iterators.SingletonIterator;
+import org.apache.commons.configuration.event.ConfigurationEvent;
+import org.apache.commons.configuration.event.ConfigurationListener;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.ConfigurationNodeVisitorAdapter;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.DefaultExpressionEngine;
 import org.apache.commons.configuration.tree.ExpressionEngine;
 import org.apache.commons.configuration.tree.NodeAddData;
+import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
 import org.apache.commons.lang.StringUtils;
 
 /**
@@ -94,19 +97,51 @@
  * <code>getMaxIndex()</code> method that returns the maximum allowed index
  * that can be added to a given property key. This method can be used to iterate
  * over all values defined for a certain property.</p>
+ * <p>Since the 1.3 release of <em>Commons Configuration</em> hierarchical
+ * configurations support an <em>expression engine</em>. This expression engine
+ * is responsible for evaluating the passed in configuration keys and map them
+ * to the stored properties. The examples above are valid for the default
+ * expression engine, which is used when a new <code>HierarchicalConfiguration</code>
+ * instance is created. With the <code>setExpressionEngine()</code> method a
+ * different expression engine can be set. For instance with
+ * <code>{@link XPathExpressionEngine}</code> there is an expression engine
+ * available that supports configuration keys in XPATH syntax.</p>
+ * <p>In addition to the events common for all configuration classes hierarchical
+ * configurations support some more events that correspond to some specific
+ * methods and features:
+ * <dl><dt><em>EVENT_ADD_NODES</em></dt><dd>The <code>addNodes()</code> method
+ * was called; the event object contains the key, to which the nodes were added,
+ * and a collection with the new nodes as value.</dd>
+ * <dt><em>EVENT_CLEAR_TREE</em></dt><dd>The <code>clearTree()</code> method was
+ * called; the event object stores the key of the removed sub tree.</dd>
+ * <dt><em>EVENT_SUBNODE_CHANGED</em></dt><dd>A <code>SubnodeConfiguration</code>
+ * that was created from this configuration has been changed. The value property
+ * of the event object contains the original event object as it was sent by the
+ * subnode configuration.</dd></dl></p> 
  *
- * @author <a href="mailto:oliver.heger@t-online.de">Oliver Heger </a>
- * @version $Id: HierarchicalConfiguration.java,v 1.14 2004/12/02 22:05:52
- * ebourg Exp $
+ * @author Oliver Heger
+ * @version $Id$
  */
 public class HierarchicalConfiguration extends AbstractConfiguration implements Serializable, Cloneable
 {
-    /** Constant for the clear tree event.*/
+    /**
+     * Constant for the clear tree event.
+     * @since 1.3
+     */
     public static final int EVENT_CLEAR_TREE = 10;
 
-    /** Constant for the add nodes event.*/
+    /**
+     * Constant for the add nodes event.
+     * @since 1.3
+     */
     public static final int EVENT_ADD_NODES = 11;
 
+    /**
+     * Constant for the subnode configuration modified event.
+     * @since 1.5
+     */
+    public static final int EVENT_SUBNODE_CHANGED = 12;
+
     /**
      * The serial version UID.
      */
@@ -564,7 +599,9 @@ public List configurationsAt(String key)
      */
     protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node)
     {
-        return new SubnodeConfiguration(this, node);
+        SubnodeConfiguration result = new SubnodeConfiguration(this, node);
+        registerSubnodeConfiguration(result);
+        return result;
     }
 
     /**
@@ -585,6 +622,39 @@ protected SubnodeConfiguration createSubnodeConfiguration(
         return result;
     }
 
+    /**
+     * This method is always called when a subnode configuration created from
+     * this configuration has been modified. This implementation transforms the
+     * received event into an event of type <code>EVENT_SUBNODE_CHANGED</code>
+     * and notifies the registered listeners.
+     *
+     * @param event the event describing the change
+     * @since 1.5
+     */
+    protected void subnodeConfigurationChanged(ConfigurationEvent event)
+    {
+        fireEvent(EVENT_SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
+    }
+
+    /**
+     * Registers this instance at the given subnode configuration. This
+     * implementation will register a change listener, so that modifications of
+     * the subnode configuration can be tracked.
+     *
+     * @param config the subnode configuration
+     * @since 1.5
+     */
+    void registerSubnodeConfiguration(SubnodeConfiguration config)
+    {
+        config.addConfigurationListener(new ConfigurationListener()
+        {
+            public void configurationChanged(ConfigurationEvent event)
+            {
+                subnodeConfigurationChanged(event);
+            }
+        });
+    }
+
     /**
      * Checks if the specified key is contained in this configuration. Note that
      * for this configuration the term &quot;contained&quot; means that the key
diff --git a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
index 7c25cab8e2..db3187878d 100644
--- a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
@@ -245,7 +245,9 @@ public ConfigurationNode getRootNode()
      */
     protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node)
     {
-        return new SubnodeConfiguration(getParent(), node);
+        SubnodeConfiguration result = new SubnodeConfiguration(getParent(), node);
+        getParent().registerSubnodeConfiguration(result);
+        return result;
     }
 
     /**
diff --git a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
index 2134a90634..0ac9b6bc22 100644
--- a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -33,7 +33,6 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
-import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
 import org.apache.commons.configuration.reloading.InvariantReloadingStrategy;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
@@ -510,7 +509,7 @@ public void testSaveToStream() throws Exception
 
     public void testAutoSave() throws Exception
     {
-        conf.setFile(new File("target/testsave.xml"));
+        conf.setFile(testSaveConf);
         assertFalse(conf.isAutoSave());
         conf.setAutoSave(true);
         assertTrue(conf.isAutoSave());
@@ -1025,6 +1024,43 @@ public void testListWithMultiAttributesMultiValue()
                 .containsKey("attrList.a(5)[@test]"));
     }
 
+    /**
+     * Tests whether the auto save mechanism is triggered by changes at a
+     * subnode configuration.
+     */
+    public void testAutoSaveWithSubnodeConfig() throws ConfigurationException
+    {
+        final String newValue = "I am autosaved";
+        conf.setFile(testSaveConf);
+        conf.setAutoSave(true);
+        Configuration sub = conf.configurationAt("element2.subelement");
+        sub.setProperty("subsubelement", newValue);
+        assertEquals("Change not visible to parent", newValue, conf
+                .getString("element2.subelement.subsubelement"));
+        XMLConfiguration conf2 = new XMLConfiguration(testSaveConf);
+        assertEquals("Change was not saved", newValue, conf2
+                .getString("element2.subelement.subsubelement"));
+    }
+
+    /**
+     * Tests whether a subnode configuration created from another subnode
+     * configuration of a XMLConfiguration can trigger the auto save mechanism.
+     */
+    public void testAutoSaveWithSubSubnodeConfig() throws ConfigurationException
+    {
+        final String newValue = "I am autosaved";
+        conf.setFile(testSaveConf);
+        conf.setAutoSave(true);
+        SubnodeConfiguration sub1 = conf.configurationAt("element2");
+        SubnodeConfiguration sub2 = sub1.configurationAt("subelement");
+        sub2.setProperty("subsubelement", newValue);
+        assertEquals("Change not visible to parent", newValue, conf
+                .getString("element2.subelement.subsubelement"));
+        XMLConfiguration conf2 = new XMLConfiguration(testSaveConf);
+        assertEquals("Change was not saved", newValue, conf2
+                .getString("element2.subelement.subsubelement"));
+    }
+
     /**
      * Prepares a configuration object for testing a reload operation.
      *
@@ -1036,14 +1072,7 @@ private XMLConfiguration setUpReloadTest() throws ConfigurationException
         removeTestFile();
         conf.save(testSaveConf);
         XMLConfiguration c = new XMLConfiguration(testSaveConf);
-        c.setReloadingStrategy(new FileChangedReloadingStrategy()
-        {
-            // Report always a change
-            protected boolean hasChanged()
-            {
-                return true;
-            }
-        });
+        c.setReloadingStrategy(new FileAlwaysReloadingStrategy());
         conf.setProperty("test(0).entity", "newValue");
         conf.save(testSaveConf);
         return c;
diff --git a/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java b/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
index d4aab043eb..9cdce8db2e 100644
--- a/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
+++ b/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
@@ -218,16 +218,29 @@ public void checkEventCount(int minEvents)
         public void checkEvent(int type, String propName, Object propValue,
                 boolean before)
         {
-            assertFalse("Too few events received", events.isEmpty());
-            ConfigurationEvent e = (ConfigurationEvent) events.removeFirst();
-            assertEquals("Wrong event source", config, e.getSource());
-            assertEquals("Wrong event type", type, e.getType());
+            ConfigurationEvent e = nextEvent(type);
             assertEquals("Wrong property name", propName, e.getPropertyName());
             assertEquals("Wrong property value", propValue, e
                     .getPropertyValue());
             assertEquals("Wrong before flag", before, e.isBeforeUpdate());
         }
 
+        /**
+         * Returns the next received event and checks for the expected type.
+         * This method can be used instead of <code>checkEvent()</code> for
+         * comparing complex event values.
+         * @param expectedType the expected type of the event
+         * @return the event object
+         */
+        public ConfigurationEvent nextEvent(int expectedType)
+        {
+            assertFalse("Too few events received", events.isEmpty());
+            ConfigurationEvent e = (ConfigurationEvent) events.removeFirst();
+            assertEquals("Wrong event source", config, e.getSource());
+            assertEquals("Wrong event type", expectedType, e.getType());
+            return e;
+        }
+
         /**
          * Skips to the last received event and checks that no events of the
          * given type have been received. This method is used by checks for
diff --git a/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java b/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
index 2e1d858b08..528b3abbf5 100644
--- a/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
+++ b/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
@@ -21,6 +21,7 @@
 
 import org.apache.commons.configuration.AbstractConfiguration;
 import org.apache.commons.configuration.HierarchicalConfiguration;
+import org.apache.commons.configuration.SubnodeConfiguration;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 
 /**
@@ -79,4 +80,44 @@ public void testAddNodesEmptyEvent()
                 new ArrayList());
         l.done();
     }
+
+    /**
+     * Tests whether manipulations of a subnode configuration trigger correct
+     * events.
+     */
+    public void testSubnodeChangedEvent()
+    {
+        SubnodeConfiguration sub = ((HierarchicalConfiguration) config)
+                .configurationAt(EXIST_PROPERTY);
+        sub.addProperty("newProp", "newValue");
+        checkSubnodeEvent(l
+                .nextEvent(HierarchicalConfiguration.EVENT_SUBNODE_CHANGED),
+                true);
+        checkSubnodeEvent(l
+                .nextEvent(HierarchicalConfiguration.EVENT_SUBNODE_CHANGED),
+                false);
+        l.done();
+    }
+
+    /**
+     * Tests whether a received event contains a correct subnode event.
+     *
+     * @param event the event object
+     * @param before the expected before flag
+     */
+    private void checkSubnodeEvent(ConfigurationEvent event, boolean before)
+    {
+        assertEquals("Wrong before flag of nesting event", before, event
+                .isBeforeUpdate());
+        assertTrue("No subnode event found in value",
+                event.getPropertyValue() instanceof ConfigurationEvent);
+        ConfigurationEvent evSub = (ConfigurationEvent) event
+                .getPropertyValue();
+        assertEquals("Wrong event type",
+                HierarchicalConfiguration.EVENT_ADD_PROPERTY, evSub.getType());
+        assertEquals("Wrong property name", "newProp", evSub.getPropertyName());
+        assertEquals("Wrong property value", "newValue", evSub
+                .getPropertyValue());
+        assertEquals("Wrong before flag", before, evSub.isBeforeUpdate());
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 790d491605..f2d3eb3f5c 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,12 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="update" issue="CONFIGURATION-265">
+        For hierarchical file-based configurations the auto-save mechanism is
+        now also triggered if a subnode configuration is changed. In such a case
+        the new event type EVENT_SUBNODE_CHANGED will be sent to registered
+        listeners.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-266" due-to="Tobias Noebel">
         ConfigurationInterpolator now also invokes the default lookup object for
         variables with a prefix that could not be resolved by their associated
diff --git a/xdocs/userguide/howto_events.xml b/xdocs/userguide/howto_events.xml
index 3519e61a02..21ad4b433a 100644
--- a/xdocs/userguide/howto_events.xml
+++ b/xdocs/userguide/howto_events.xml
@@ -80,8 +80,17 @@
         <dt>AbstractFileConfiguration</dt>
         <dd>EVENT_RELOAD (the configuration was reloaded)</dd>
         <dt>HierarchicalConfiguration</dt>
-        <dd>EVENT_ADD_NODES (the <code>addNodes()</code> method was called),
-        EVENT_CLEAR_TREE (the <code>clearTree()</code> method was called)</dd>
+        <dd>EVENT_ADD_NODES (the <code>addNodes()</code> method was called;
+        the event object contains the key, to which the nodes were added, and
+        a collection with the new nodes as value),
+        EVENT_CLEAR_TREE (the <code>clearTree()</code> method was called; the
+        event object stores the key of the removed sub tree),
+        EVENT_SUBNODE_CHANGED (a <code>SubnodeConfiguration</code> that was
+        created from this configuration has been changed. The value property
+        of the event object contains the original event object as it was sent by
+        the subnode configuration. <em>Note: At the moment it is not possible
+        to map the property key as it was received from the subnode configuration
+        into the namespace of the parent configuration.)</em></dd>
       </dl>
     </p>
     </subsection>
