From 6ef90d826e7becf31ce5835650227533cd515300 Mon Sep 17 00:00:00 2001
From: Rodrigo Agerri <ragerri@apache.org>
Date: Mon, 3 Nov 2014 17:01:07 +0000
Subject: [PATCH] OPENNLP-725 adding javadoc

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1636392 13f79535-47bb-0310-9956-ffa450edef68
---
 .../namefind/TokenNameFinderTrainerTool.java        | 13 +++++++++++++
 .../tools/namefind/TokenNameFinderModel.java        |  9 +++++++++
 .../tools/util/featuregen/GeneratorFactory.java     | 10 +++++++---
 3 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
index 5b8c8aa9e..7fe422ca3 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTrainerTool.java
@@ -88,6 +88,13 @@ static byte[] openFeatureGeneratorBytes(File featureGenDescriptorFile) {
     return featureGeneratorBytes;
   }
 
+  /**
+   * Load the resources, such as dictionaries, by reading the feature xml descriptor
+   * and looking into the directory passed as argument.
+   * @param resourcePath the directory in which the resources are to be found
+   * @param featureGenDescriptor the feature xml descriptor
+   * @return a map consisting of the file name of the resource and its corresponding Object
+   */
   public static Map<String, Object> loadResources(File resourcePath, File featureGenDescriptor) {
     Map<String, Object> resources = new HashMap<String, Object>();
 
@@ -155,6 +162,12 @@ public static Map<String, Object> loadResources(File resourcePath, File featureG
     return resources;
   }
 
+  /**
+   * Calls a loadResources method above to load any external resource required for training.
+   * @param resourceDirectory the directory where the resources are to be found
+   * @param featureGeneratorDescriptor the xml feature generator
+   * @return a map containing the file name of the resource and its mapped Object
+   */
   static Map<String, Object> loadResources(String resourceDirectory, File featureGeneratorDescriptor) {
 
     if (resourceDirectory != null) {
diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
index ca64046ea..1b2e7f95d 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderModel.java
@@ -251,6 +251,15 @@ protected void createArtifactSerializers(Map<String, ArtifactSerializer> seriali
     serializers.put("featuregen", new ByteArraySerializer());
   }
 
+  /**
+   * Create the artifact serializers. Currently for serializers related to
+   * features that require external resources, such as {@code W2VClassesDictionary}
+   * objects, the convention is to add its element tag name as key of the serializer map.
+   * For example, the element tag name for the {@code WordClusterFeatureGenerator} which
+   * uses {@code W2VClassesDictionary} objects serialized by the {@code W2VClassesDictionarySerializer}
+   * is 'w2vwordcluster', which is the key used to add the serializer to the map.
+   * @return the map containing the added serializers
+   */
   public static Map<String, ArtifactSerializer> createArtifactSerializers()  {
 
     // TODO: Not so nice, because code cannot really be reused by the other create serializer method
diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java b/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
index 66b5b072e..b1d61a81e 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java
@@ -21,13 +21,11 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -41,7 +39,6 @@
 import opennlp.tools.util.InvalidFormatException;
 import opennlp.tools.util.ext.ExtensionLoader;
 import opennlp.tools.util.model.ArtifactSerializer;
-import opennlp.tools.util.model.SerializableArtifact;
 
 import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
@@ -670,6 +667,13 @@ public static Map<String, ArtifactSerializer<?>> extractCustomArtifactSerializer
     return mapping;
   }
   
+  /**
+   * Provides a list with all the elements in the xml feature descriptor.
+   * @param xmlDescriptorIn the xml feature descriptor
+   * @return a list containing all elements
+   * @throws IOException if inputstream cannot be open
+   * @throws InvalidFormatException if xml is not well-formed
+   */
   public static List<Element> getDescriptorElements(
       InputStream xmlDescriptorIn)
       throws IOException, InvalidFormatException {
