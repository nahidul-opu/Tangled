From d0595b7121f57f1f49fe7fdc384479dd73ad64f5 Mon Sep 17 00:00:00 2001
From: Simon Spero <sesuncedu@gmail.com>
Date: Mon, 3 Jul 2017 18:24:55 -0400
Subject: [PATCH] COMPRESS-416 Add signed 32bit int constructor and accessor to
 ZipLong

Signed-off-by: Simon Spero <sesuncedu@gmail.com>
---
 .../compress/archivers/zip/ZipLong.java        | 18 ++++++++++++++++--
 .../compress/archivers/zip/ZipLongTest.java    | 13 ++++++++++---
 2 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java
index 29761838071..07da7d5c10a 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java
@@ -17,10 +17,10 @@
  */
 package org.apache.commons.compress.archivers.zip;
 
-import java.io.Serializable;
-
 import org.apache.commons.compress.utils.ByteUtils;
 
+import java.io.Serializable;
+
 import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
 
 /**
@@ -81,6 +81,14 @@ public ZipLong(final long value) {
         this.value = value;
     }
 
+    /**
+     * create instance from a java int.
+      * @param value
+     */
+    public ZipLong(int value) {
+        this.value = value;
+    }
+
     /**
      * Create instance from bytes.
      * @param bytes the bytes to store as a ZipLong
@@ -114,6 +122,12 @@ public long getValue() {
         return value;
     }
 
+    /**
+     * Get value as a (signed) java int
+     * @return
+     */
+    public int getIntValue() { return (int)value;}
+
     /**
      * Get value as four bytes in big endian byte order.
      * @param value the value to convert
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java
index f72d886f413..75709fd5a95 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java
@@ -18,10 +18,10 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 /**
  * JUnit testcases for org.apache.commons.compress.archivers.zip.ZipLong.
  *
@@ -90,8 +90,15 @@ public void testEquals() {
      */
     @Test
     public void testSign() {
-        final ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});
+         ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});
         assertEquals(0x00000000FFFFFFFFl, zl.getValue());
+        assertEquals(-1,zl.getIntValue());
+
+        zl = new ZipLong(0xFFFF_FFFFL);
+        assertEquals(0x00000000FFFFFFFFl, zl.getValue());
+        zl = new ZipLong(0xFFFF_FFFF);
+        assertEquals(0xFFFF_FFFF_FFFF_FFFFL, zl.getValue());
+
     }
 
     @Test
