From 8f34050e92f61934d0f8c829ec52dcf52a0cf98d Mon Sep 17 00:00:00 2001
From: Aliaksandr Autayeu <autayeu@apache.org>
Date: Sun, 22 Jan 2012 10:52:53 +0000
Subject: [PATCH] OPENNLP-418: ArgumentParser didn't account for interfaces
 with all optional arguments.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1234481 13f79535-47bb-0310-9956-ffa450edef68
---
 .../opennlp/tools/cmdline/ArgumentParser.java |  6 +--
 .../tools/cmdline/ArgumentParserTest.java     | 40 ++++++++++++++++---
 2 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/ArgumentParser.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/ArgumentParser.java
index 0b25337b9..1cbb149b2 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/cmdline/ArgumentParser.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/ArgumentParser.java
@@ -321,9 +321,9 @@ public static <T> String validateArgumentsLoudly(String args[], Class<T> argProx
    * @return null, if arguments are valid or error message otherwise
    */
   public static <T> String validateArgumentsLoudly(String args[], Class<T>... argProxyInterfaces) {
-    // number of parameters must be at least 2 and always be even
-    if (args.length < 2 || args.length % 2 != 0) {
-      return "Number of parameters must be at least 2 and always be even";
+    // number of parameters must be always be even
+    if (args.length % 2 != 0) {
+      return "Number of parameters must be always be even";
     }
 
     int argumentCount = 0;
diff --git a/opennlp-tools/src/test/java/opennlp/tools/cmdline/ArgumentParserTest.java b/opennlp-tools/src/test/java/opennlp/tools/cmdline/ArgumentParserTest.java
index 8bf956a08..1ed34c2d0 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/cmdline/ArgumentParserTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/cmdline/ArgumentParserTest.java
@@ -58,22 +58,26 @@ public void testInvalidReturnType() {
     ArgumentParser.createUsage(InvalidReturnType.class);
   }
   
-  interface SimpleArguments {
+  interface SimpleArguments extends AllOptionalArguments {
     
     @ParameterDescription(valueName = "charset", description = "a charset encoding")
     String getEncoding();
     
+    @OptionalParameter
+    Integer getCutoff();
+  }
+
+  interface AllOptionalArguments {
+
     @ParameterDescription(valueName = "num")
     @OptionalParameter(defaultValue = "100")
     Integer getIterations();
-    
-    @OptionalParameter
-    Integer getCutoff();
-    
+
     @ParameterDescription(valueName = "true|false")
     @OptionalParameter(defaultValue = "true")
     Boolean getAlphaNumOpt();
   }
+
   
   @Test
   public void testSimpleArguments() {
@@ -95,7 +99,31 @@ public void testSimpleArgumentsMissingEncoding() {
     assertFalse(ArgumentParser.validateArguments(argsString.split(" "), SimpleArguments.class));
     ArgumentParser.parse(argsString.split(" "), SimpleArguments.class);
   }
-  
+
+  @Test
+  public void testAllOptionalArgumentsOneArgument() {
+    String argsString = "-alphaNumOpt false";
+
+    assertTrue(ArgumentParser.validateArguments(argsString.split(" "), AllOptionalArguments.class));
+    ArgumentParser.parse(argsString.split(" "), AllOptionalArguments.class);
+  }
+
+  @Test
+  public void testAllOptionalArgumentsZeroArguments() {
+    String[] args = {};
+
+    assertTrue(ArgumentParser.validateArguments(args, AllOptionalArguments.class));
+    ArgumentParser.parse(args, AllOptionalArguments.class);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void testAllOptionalArgumentsExtraArgument() {
+    String argsString = "-encoding UTF-8";
+
+    assertFalse(ArgumentParser.validateArguments(argsString.split(" "), AllOptionalArguments.class));
+    ArgumentParser.parse(argsString.split(" "), AllOptionalArguments.class);
+  }
+
   @Test
   public void testSimpleArgumentsUsage() {
     
