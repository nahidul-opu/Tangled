From 57e2712f50eec586fc5e46fcf9eba139f82af97a Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Sun, 26 Jun 2011 16:26:48 +0000
Subject: [PATCH] Removed the requiresDenseOutput method from the StepHandler
 interface. Now integrators always consider dense output is required and set
 up the appropriate state interpolators, so step handlers can rely on them.

JIRA: MATH-596, MATH-604

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1139831 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math/ode/AbstractIntegrator.java  | 16 ------
 .../math/ode/ContinuousOutputModel.java       | 10 ----
 .../commons/math/ode/MultistepIntegrator.java |  5 --
 .../EmbeddedRungeKuttaIntegrator.java         | 12 +----
 .../GraggBulirschStoerIntegrator.java         | 40 ++++----------
 .../ode/nonstiff/RungeKuttaIntegrator.java    | 12 +----
 .../math/ode/sampling/DummyStepHandler.java   |  8 ---
 .../math/ode/sampling/StepHandler.java        | 10 ----
 .../math/ode/sampling/StepNormalizer.java     | 10 ----
 src/site/xdoc/changes.xml                     |  5 ++
 src/site/xdoc/userguide/ode.xml               |  2 -
 .../commons/math/ode/TestProblemHandler.java  |  4 --
 .../ClassicalRungeKuttaIntegratorTest.java    |  6 ---
 .../DormandPrince54IntegratorTest.java        | 10 ----
 .../DormandPrince54StepInterpolatorTest.java  |  3 --
 .../DormandPrince853IntegratorTest.java       | 54 -------------------
 .../DormandPrince853StepInterpolatorTest.java |  3 --
 .../ode/nonstiff/EulerIntegratorTest.java     |  3 --
 .../math/ode/nonstiff/GillIntegratorTest.java |  6 ---
 .../GraggBulirschStoerIntegratorTest.java     | 40 +++++++++++---
 ...raggBulirschStoerStepInterpolatorTest.java |  3 --
 .../HighamHall54StepInterpolatorTest.java     |  3 --
 .../ode/nonstiff/MidpointIntegratorTest.java  |  3 --
 .../nonstiff/ThreeEighthesIntegratorTest.java |  7 ---
 .../sampling/StepInterpolatorTestUtils.java   |  4 --
 25 files changed, 51 insertions(+), 228 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
index 538311190a..20bdee417f 100644
--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
@@ -153,22 +153,6 @@ public void clearEventHandlers() {
         eventsStates.clear();
     }
 
-    /** Check if dense output is needed.
-     * @return true if there is at least one event handler or if
-     * one of the step handlers requires dense output
-     */
-    protected boolean requiresDenseOutput() {
-        if (!eventsStates.isEmpty()) {
-            return true;
-        }
-        for (StepHandler handler : stepHandlers) {
-            if (handler.requiresDenseOutput()) {
-                return true;
-            }
-        }
-        return false;
-    }
-
     /** {@inheritDoc} */
     public double getCurrentStepStart() {
         return stepStart;
diff --git a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
index 889e0ad5a1..c28149759a 100644
--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
@@ -167,16 +167,6 @@ public void append(final ContinuousOutputModel model)
 
   }
 
-  /** Determines whether this handler needs dense output.
-   * <p>The essence of this class is to provide dense output over all
-   * steps, hence it requires the internal steps to provide themselves
-   * dense output. The method therefore returns always true.</p>
-   * @return always true
-   */
-  public boolean requiresDenseOutput() {
-    return true;
-  }
-
   /** Reset the step handler.
    * Initialize the internal data as required before the first step is
    * handled.
diff --git a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
index e30e6245a7..cd06216dd5 100644
--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
@@ -383,11 +383,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
 
         }
 
-        /** {@inheritDoc} */
-        public boolean requiresDenseOutput() {
-            return true;
-        }
-
         /** {@inheritDoc} */
         public void reset() {
             // nothing to do
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 9f1499e856..e3a0ae8d50 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -20,8 +20,6 @@
 import org.apache.commons.math.exception.MathUserException;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.IntegratorException;
-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.util.FastMath;
 
@@ -211,14 +209,8 @@ public double integrate(final FirstOrderDifferentialEquations equations,
     final double[] yDotTmp = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
-    AbstractStepInterpolator interpolator;
-    if (requiresDenseOutput()) {
-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
-      rki.reinitialize(this, yTmp, yDotK, forward);
-      interpolator = rki;
-    } else {
-      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);
-    }
+    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
+    interpolator.reinitialize(this, yTmp, yDotK, forward);
     interpolator.storeTime(t0);
 
     // set up integration control objects
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
index c56531684d..0734ac693e 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
@@ -23,7 +23,6 @@
 import org.apache.commons.math.ode.IntegratorException;
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.util.FastMath;
 
@@ -372,16 +371,9 @@ private void initializeArrays() {
       optimalStep     = new double[size];
     }
 
-    if (requiresDenseOutput()) {
-      // step size sequence: 2, 6, 10, 14, ...
-      for (int k = 0; k < size; ++k) {
+    // step size sequence: 2, 6, 10, 14, ...
+    for (int k = 0; k < size; ++k) {
         sequence[k] = 4 * k + 2;
-      }
-    } else {
-      // step size sequence: 2, 4, 6, 8, ...
-      for (int k = 0; k < size; ++k) {
-        sequence[k] = 2 * (k + 1);
-      }
     }
 
     // initialize the order selection cost array
@@ -592,18 +584,8 @@ public double integrate(final FirstOrderDifferentialEquations equations,
       System.arraycopy(y0, 0, y, 0, y0.length);
     }
 
-    double[] yDot1      = new double[y0.length];
-    double[][] yMidDots = null;
-    final boolean denseOutput = requiresDenseOutput();
-    if (denseOutput) {
-      yMidDots = new double[1 + 2 * sequence.length][];
-      for (int j = 0; j < yMidDots.length; ++j) {
-        yMidDots[j] = new double[y0.length];
-      }
-    } else {
-      yMidDots    = new double[1][];
-      yMidDots[0] = new double[y0.length];
-    }
+    final double[] yDot1 = new double[y0.length];
+    final double[][] yMidDots = new double[1 + 2 * sequence.length][y0.length];
 
     // initial scaling
     final double[] scale = new double[mainSetDimension];
@@ -618,14 +600,10 @@ public double integrate(final FirstOrderDifferentialEquations equations,
                                        (int) FastMath.floor(0.5 - 0.6 * log10R)));
 
     // set up an interpolator sharing the integrator arrays
-    AbstractStepInterpolator interpolator = null;
-    if (denseOutput) {
-      interpolator = new GraggBulirschStoerStepInterpolator(y, yDot0,
-                                                            y1, yDot1,
-                                                            yMidDots, forward);
-    } else {
-      interpolator = new DummyStepInterpolator(y, yDot1, forward);
-    }
+    final AbstractStepInterpolator interpolator =
+            new GraggBulirschStoerStepInterpolator(y, yDot0,
+                                                   y1, yDot1,
+                                                   yMidDots, forward);
     interpolator.storeTime(t0);
 
     stepStart = t0;
@@ -817,7 +795,7 @@ public double integrate(final FirstOrderDifferentialEquations equations,
 
       // dense output handling
       double hInt = getMaxStep();
-      if (denseOutput && ! reject) {
+      if (! reject) {
 
         // extrapolate state at middle point of the step
         for (int j = 1; j <= k; ++j) {
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
index f03b1530a0..8c66940150 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -22,8 +22,6 @@
 import org.apache.commons.math.ode.AbstractIntegrator;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.IntegratorException;
-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.util.FastMath;
 
@@ -115,14 +113,8 @@ public double integrate(final FirstOrderDifferentialEquations equations,
     final double[] yDotTmp = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
-    AbstractStepInterpolator interpolator;
-    if (requiresDenseOutput()) {
-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
-      rki.reinitialize(this, yTmp, yDotK, forward);
-      interpolator = rki;
-    } else {
-      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);
-    }
+    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
+    interpolator.reinitialize(this, yTmp, yDotK, forward);
     interpolator.storeTime(t0);
 
     // set up integration control objects
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
index ff004b0d88..b2f0e32737 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
@@ -50,14 +50,6 @@ public static DummyStepHandler getInstance() {
         return LazyHolder.INSTANCE;
     }
 
-    /** Determines whether this handler needs dense output.
-     * Since this handler does nothing, it does not require dense output.
-     * @return always false
-     */
-    public boolean requiresDenseOutput() {
-        return false;
-    }
-
     /** Reset the step handler.
      * Initialize the internal data as required before the first step is
      * handled.
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java
index d1d9b625db..895b6638ca 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java
@@ -41,16 +41,6 @@
 
 public interface StepHandler {
 
-  /** Determines whether this handler needs dense output.
-   * <p>This method allows the integrator to avoid performing extra
-   * computation if the handler does not need dense output. If this
-   * method returns false, the integrator will call the {@link
-   * #handleStep} method with a {@link DummyStepInterpolator} rather
-   * than a custom interpolator.</p>
-   * @return true if the handler needs dense output
-   */
-  boolean requiresDenseOutput();
-
   /** Reset the step handler.
    * Initialize the internal data as required before the first step is
    * handled.
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
index 90ae670f0a..64ddc03c8b 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
@@ -171,16 +171,6 @@ public StepNormalizer(final double h, final FixedStepHandler handler,
         reset();
     }
 
-    /** Determines whether this handler needs dense output.
-     * This handler needs dense output in order to provide data at
-     * regularly spaced steps regardless of the steps the integrator
-     * uses, so this method always returns true.
-     * @return always true
-     */
-    public boolean requiresDenseOutput() {
-        return true;
-    }
-
     /** Reset the step handler.
      * Initialize the internal data as required before the first step is
      * handled.
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 5236147f30..2b0ba4f2e0 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,11 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-596,MATH-604">
+        Removed the requiresDenseOutput method from the StepHandler interface. Now integrators always
+        consider dense output is required and set up the appropriate state interpolators, so step
+        handlers can rely on them.
+      </action>
       <action dev="eran" type="add" issue="MATH-599" due-to="Dennis Hendriks">
         Modified "SecantSolver" to comply with the original algorithm. Added several
         secant-based solvers.
diff --git a/src/site/xdoc/userguide/ode.xml b/src/site/xdoc/userguide/ode.xml
index dd8bef6cbb..4703f992ff 100644
--- a/src/site/xdoc/userguide/ode.xml
+++ b/src/site/xdoc/userguide/ode.xml
@@ -130,8 +130,6 @@ dp853.integrate(ode, 0.0, y, 16.0, y); // now y contains final state at time t=1
 StepHandler stepHandler = new StepHandler() {
     public void reset() {}
             
-    public boolean requiresDenseOutput() { return false; }
-            
     public void handleStep(StepInterpolator interpolator, boolean isLast) throws MathUserException {
         double   t = interpolator.getCurrentTime();
         double[] y = interpolator.getInterpolatedState();
diff --git a/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java b/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java
index e632e5f7e6..25ffbc58b0 100644
--- a/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java
+++ b/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java
@@ -60,10 +60,6 @@ public TestProblemHandler(TestProblemAbstract problem, ODEIntegrator integrator)
     reset();
   }
 
-  public boolean requiresDenseOutput() {
-    return true;
-  }
-
   public void reset() {
     maxValueError = 0;
     maxTimeError  = 0;
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
index 9c84a22349..bd9d659494 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
@@ -251,9 +251,6 @@ public KeplerHandler(TestProblem3 pb) {
       this.pb = pb;
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return false;
-    }
     public void reset() {
       maxError = 0;
     }
@@ -292,9 +289,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
                                1.0e-12);
               }
           }
-          public boolean requiresDenseOutput() {
-              return false;
-          }
           public void reset() {
           }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java
index 68be55441b..a51cfe7f88 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java
@@ -137,10 +137,6 @@ public DP54SmallLastHandler(double minStep) {
       this.minStep = minStep;
     }
 
-    public boolean requiresDenseOutput() {
-      return false;
-    }
-
     public void reset() {
     }
 
@@ -284,9 +280,6 @@ public KeplerHandler(TestProblem3 pb) {
       this.pb = pb;
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return true;
-    }
     public void reset() {
       nbSteps = 0;
       maxError = 0;
@@ -328,9 +321,6 @@ public VariableHandler() {
       minStep = 0;
       maxStep = 0;
     }
-    public boolean requiresDenseOutput() {
-      return false;
-    }
     public void reset() {
       firstTime = true;
       minStep = 0;
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java
index 30dc5f5435..dda4b80f97 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java
@@ -136,9 +136,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast)
                   }
               }
           }
-          public boolean requiresDenseOutput() {
-              return true;
-          }
           public void reset() {
           }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
index 4bf0435810..5ec4f0342a 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
@@ -27,8 +27,6 @@
 import org.apache.commons.math.ode.TestProblem5;
 import org.apache.commons.math.ode.TestProblemHandler;
 import org.apache.commons.math.ode.events.EventHandler;
-import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
-import org.apache.commons.math.ode.sampling.DummyStepHandler;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
 import org.apache.commons.math.util.FastMath;
@@ -292,37 +290,6 @@ public void testVariableSteps()
     Assert.assertEquals("Dormand-Prince 8 (5, 3)", integ.getName());
   }
 
-  @Test
-  public void testNoDenseOutput()
-    throws MathUserException, IntegratorException {
-    TestProblem1 pb1 = new TestProblem1();
-    TestProblem1 pb2 = pb1.copy();
-    double minStep = 0.1 * (pb1.getFinalTime() - pb1.getInitialTime());
-    double maxStep = pb1.getFinalTime() - pb1.getInitialTime();
-    double scalAbsoluteTolerance = 1.0e-4;
-    double scalRelativeTolerance = 1.0e-4;
-
-    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,
-                                                                scalAbsoluteTolerance,
-                                                                scalRelativeTolerance);
-    integ.addStepHandler(DummyStepHandler.getInstance());
-    integ.integrate(pb1,
-                    pb1.getInitialTime(), pb1.getInitialState(),
-                    pb1.getFinalTime(), new double[pb1.getDimension()]);
-    int callsWithoutDenseOutput = pb1.getCalls();
-    Assert.assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);
-
-    integ.addStepHandler(new InterpolatingStepHandler());
-    integ.integrate(pb2,
-                    pb2.getInitialTime(), pb2.getInitialState(),
-                    pb2.getFinalTime(), new double[pb2.getDimension()]);
-    int callsWithDenseOutput = pb2.getCalls();
-    Assert.assertEquals(integ.getEvaluations(), callsWithDenseOutput);
-
-    Assert.assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);
-
-  }
-
   @Test
   public void testUnstableDerivative()
   throws MathUserException, IntegratorException {
@@ -340,9 +307,6 @@ public KeplerHandler(TestProblem3 pb) {
       this.pb = pb;
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return true;
-    }
     public void reset() {
       nbSteps = 0;
       maxError = 0;
@@ -382,9 +346,6 @@ private static class VariableHandler implements StepHandler {
     public VariableHandler() {
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return false;
-    }
     public void reset() {
       firstTime = true;
       minStep = 0;
@@ -418,19 +379,4 @@ public void handleStep(StepInterpolator interpolator,
     private double  maxStep = 0;
   }
 
-  private static class InterpolatingStepHandler implements StepHandler {
-    public boolean requiresDenseOutput() {
-      return true;
-    }
-    public void reset() {
-    }
-    public void handleStep(StepInterpolator interpolator,
-                           boolean isLast)
-    throws MathUserException {
-      double prev = interpolator.getPreviousTime();
-      double curr = interpolator.getCurrentTime();
-      interpolator.setInterpolatedTime(0.5*(prev + curr));
-    }
-  }
-
 }
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java
index 5019d405d0..c5f344a209 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java
@@ -136,9 +136,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast)
                 }
             }
         }
-        public boolean requiresDenseOutput() {
-            return true;
-        }
         public void reset() {
         }
     });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java
index 7c8c8b864c..3ca80ffe57 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java
@@ -170,9 +170,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
                              1.0e-12);
             }
         }
-        public boolean requiresDenseOutput() {
-            return false;
-        }
         public void reset() {
         }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java
index 40468d990b..d9570f6d6d 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java
@@ -186,9 +186,6 @@ public KeplerStepHandler(TestProblem3 pb) {
       this.pb = pb;
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return false;
-    }
     public void reset() {
       maxError = 0;
     }
@@ -227,9 +224,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
                                1.0e-12);
               }
           }
-          public boolean requiresDenseOutput() {
-              return false;
-          }
           public void reset() {
           }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
index 86fa761ebf..60621a7ba4 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
@@ -18,6 +18,7 @@
 package org.apache.commons.math.ode.nonstiff;
 
 import org.apache.commons.math.exception.MathUserException;
+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
 import org.apache.commons.math.ode.IntegratorException;
 import org.apache.commons.math.ode.TestProblem1;
@@ -285,14 +286,42 @@ public void testUnstableDerivative()
     Assert.assertEquals(8.0, y[0], 1.0e-12);
   }
 
+  @Test
+  public void testIssue596() throws MathUserException, IntegratorException {
+    FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7);
+      integ.addStepHandler(new StepHandler() {
+
+          public void reset() {}
+
+          public void handleStep(StepInterpolator interpolator, boolean isLast) throws MathUserException {
+              double t = interpolator.getCurrentTime();
+              interpolator.setInterpolatedTime(t);
+              double[] y = interpolator.getInterpolatedState();
+              double[] yDot = interpolator.getInterpolatedDerivatives();
+              Assert.assertEquals(3.0 * t - 5.0, y[0], 1.0e-14);
+              Assert.assertEquals(3.0, yDot[0], 1.0e-14);
+          }
+      });
+      double[] y = {4.0};
+      double t0 = 3.0;
+      double tend = 10.0;
+      integ.integrate(new FirstOrderDifferentialEquations() {
+          public int getDimension() {
+              return 1;
+          }
+
+          public void computeDerivatives(double t, double[] y, double[] yDot) {
+              yDot[0] = 3.0;
+          }
+      }, t0, y, tend, y);
+
+  }
+
   private static class KeplerStepHandler implements StepHandler {
     public KeplerStepHandler(TestProblem3 pb) {
       this.pb = pb;
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return true;
-    }
     public void reset() {
       nbSteps = 0;
       maxError = 0;
@@ -332,9 +361,6 @@ public static class VariableStepHandler implements StepHandler {
     public VariableStepHandler() {
       reset();
     }
-    public boolean requiresDenseOutput() {
-      return false;
-    }
     public void reset() {
       firstTime = true;
       minStep = 0;
@@ -360,7 +386,7 @@ public void handleStep(StepInterpolator interpolator,
 
       if (isLast) {
         Assert.assertTrue(minStep < 8.2e-3);
-        Assert.assertTrue(maxStep > 1.7);
+        Assert.assertTrue(maxStep > 1.5);
       }
     }
     private boolean firstTime;
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
index dd0d9d705e..f65cc317c1 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
@@ -138,9 +138,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast)
                 }
             }
         }
-        public boolean requiresDenseOutput() {
-            return true;
-        }
         public void reset() {
         }
     });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
index 63bff91f95..1a902f1b5c 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java
@@ -136,9 +136,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast)
                 }
             }
         }
-        public boolean requiresDenseOutput() {
-            return true;
-        }
         public void reset() {
         }
     });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java
index 9e321ed7dc..5481f422f9 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java
@@ -170,9 +170,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
                                1.0e-12);
               }
           }
-          public boolean requiresDenseOutput() {
-              return false;
-          }
           public void reset() {
           }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java
index cfd8b58c24..f289d16ece 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java
@@ -177,10 +177,6 @@ public KeplerHandler(TestProblem3 pb) {
       maxError = 0;
     }
 
-    public boolean requiresDenseOutput() {
-      return false;
-    }
-
     public void reset() {
       maxError = 0;
     }
@@ -222,9 +218,6 @@ public void handleStep(StepInterpolator interpolator, boolean isLast) {
                                1.0e-12);
               }
           }
-          public boolean requiresDenseOutput() {
-              return false;
-          }
           public void reset() {
           }
       });
diff --git a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java
index f7f84ce728..3fbbf8fc56 100644
--- a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java
+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java
@@ -32,10 +32,6 @@ public static void checkDerivativesConsistency(final FirstOrderIntegrator integr
         throws MathUserException, IntegratorException {
         integrator.addStepHandler(new StepHandler() {
 
-            public boolean requiresDenseOutput() {
-                return true;
-            }
-
             public void handleStep(StepInterpolator interpolator, boolean isLast)
                 throws MathUserException {
 
