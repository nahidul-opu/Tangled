From 8470bb656c5f9ff4ae94cb07e26a8dde15e01e5d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Wed, 21 Mar 2012 08:44:32 +0000
Subject: [PATCH] OPENNLP-471 Renamed a few variables and some minor formating
 changes. Thanks to Hyosup Shim for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1303309 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tools/namefind/DictionaryNameFinder.java  | 43 +++++++++----------
 1 file changed, 21 insertions(+), 22 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
index e232d06ce..cd045acf0 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java
@@ -33,50 +33,49 @@ public class DictionaryNameFinder implements TokenNameFinder {
 
   private Dictionary mDictionary;
 
-  private static final String DEFAULT_TYPE = "default"; 
+  private static final String DEFAULT_TYPE = "default";
 
   /**
    * Initializes the current instance.
-   *
+   * 
    * @param dictionary
    */
   public DictionaryNameFinder(Dictionary dictionary) {
     mDictionary = dictionary;
   }
 
-  public Span[] find(String[] tokenStrings) {
-    List<Span> foundNames = new LinkedList<Span>();
+  public Span[] find(String[] textTokenized) {
+    List<Span> namesFound = new LinkedList<Span>();
 
-    for (int startToken = 0; startToken < tokenStrings.length; startToken++) {
+    for (int offsetFrom = 0; offsetFrom < textTokenized.length; offsetFrom++) {
+      Span nameFound = null;
+      String tokensSearching[] = new String[] {};
 
-      Span foundName = null;
-      String  tokens[] = new String[]{};
+      for (int offsetTo = offsetFrom; offsetTo < textTokenized.length; offsetTo++) {
+        int lengthSearching = offsetTo - offsetFrom + 1;
 
-      for (int endToken = startToken; endToken < tokenStrings.length; endToken++) {
-
-        if ((endToken - startToken + 1) > mDictionary.getMaxTokenCount()) {
+        if (lengthSearching > mDictionary.getMaxTokenCount()) {
           break;
-        }
-        else {
-          tokens = new String[(endToken - startToken + 1)];
-          System.arraycopy(tokenStrings, startToken, tokens, 0, (endToken - startToken + 1));
+        } else {
+          tokensSearching = new String[lengthSearching];
+          System.arraycopy(textTokenized, offsetFrom, tokensSearching, 0,
+              lengthSearching);
 
-          StringList tokenList = new StringList(tokens);
+          StringList entryForSearch = new StringList(tokensSearching);
 
-          if (mDictionary.contains(tokenList)) {
-            foundName = new Span(startToken, endToken + 1, DEFAULT_TYPE);
+          if (mDictionary.contains(entryForSearch)) {
+            nameFound = new Span(offsetFrom, offsetTo + 1, DEFAULT_TYPE);
           }
         }
       }
 
-      if (foundName != null) {
-        foundNames.add(foundName);
+      if (nameFound != null) {
+        namesFound.add(nameFound);
         /* skip over the found tokens for the next search */
-        startToken += (foundName.length() - 1);
+        offsetFrom += (nameFound.length() - 1);
       }
     }
-
-    return foundNames.toArray(new Span[foundNames.size()]);
+    return namesFound.toArray(new Span[namesFound.size()]);
   }
 
   public void clearAdaptiveData() {
