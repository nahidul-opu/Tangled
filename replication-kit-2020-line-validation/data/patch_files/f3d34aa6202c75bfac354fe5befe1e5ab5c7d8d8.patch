From f3d34aa6202c75bfac354fe5befe1e5ab5c7d8d8 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 4 Oct 2013 13:25:44 +0000
Subject: [PATCH] allow format-detection to deal with blocking inputs -
 COMPRESS-239

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1529159 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                    | 5 +++++
 .../commons/compress/archivers/ArchiveStreamFactory.java   | 7 ++++---
 .../compress/compressors/CompressorStreamFactory.java      | 3 ++-
 3 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 540222f57b3..6163afd055a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -106,6 +106,11 @@ The <action> type attribute can be add,update,fix,remove.
       <action type="fix" date="2013-09-22" issue="COMPRESS-111">
         Read-only support for LZMA standalone compression has been added.
       </action>
+      <action type="fix" date="2013-10-04" issue="COMPRESS-239">
+        The auto-detecting create*InputStream methods of Archive and
+        CompressorStreamFactory could fail to detect the format of
+        blocking input stream.
+      </action>
     </release>
     <release version="1.5" date="2013-03-14"
              description="Release 1.5">
diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 789c2866821..8eef525553f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -35,6 +35,7 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
 import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
+import org.apache.commons.compress.utils.IOUtils;
 
 /**
  * Factory to create Archive[In|Out]putStreams from names or the first bytes of
@@ -274,7 +275,7 @@ public ArchiveInputStream createArchiveInputStream(final InputStream in)
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            int signatureLength = IOUtils.readFully(in, signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 if (entryEncoding != null) {
@@ -295,7 +296,7 @@ public ArchiveInputStream createArchiveInputStream(final InputStream in)
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            signatureLength = IOUtils.readFully(in, dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
@@ -304,7 +305,7 @@ public ArchiveInputStream createArchiveInputStream(final InputStream in)
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            signatureLength = IOUtils.readFully(in, tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 if (entryEncoding != null) {
diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
index 0ea77b4d120..fe794ed6fb1 100644
--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
@@ -32,6 +32,7 @@
 import org.apache.commons.compress.compressors.xz.XZUtils;
 import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
 import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
+import org.apache.commons.compress.utils.IOUtils;
 
 /**
  * <p>Factory to create Compressor[In|Out]putStreams from names. To add other
@@ -133,7 +134,7 @@ public CompressorInputStream createCompressorInputStream(final InputStream in)
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            int signatureLength = IOUtils.readFully(in, signature);
             in.reset();
 
             if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
