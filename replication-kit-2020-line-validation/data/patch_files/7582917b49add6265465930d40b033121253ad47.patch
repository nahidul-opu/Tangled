From 7582917b49add6265465930d40b033121253ad47 Mon Sep 17 00:00:00 2001
From: Ralph Goers <rgoers@apache.org>
Date: Sun, 1 Mar 2009 06:45:02 +0000
Subject: [PATCH] Fix VFS-240 and VFS-221. File system options that are
 primitives can now be specified as system properties. FileMonitor now
 notifies at file creation.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@748966 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/vfs/FileSystemConfigBuilder.java  | 239 +++++++++++++++++-
 .../commons/vfs/cache/SoftRefFilesCache.java  |  12 +-
 .../commons/vfs/impl/DefaultFileMonitor.java  |  12 +
 .../ftp/FtpFileSystemConfigBuilder.java       |  17 +-
 .../vfs/provider/http/HttpClientFactory.java  |  26 +-
 .../vfs/provider/http/HttpFileSystem.java     |   7 +-
 .../http/HttpFileSystemConfigBuilder.java     |  58 ++++-
 .../ram/RamFileSystemConfigBuilder.java       |  12 +-
 .../res/ResourceFileSystemConfigBuilder.java  |   1 +
 .../sftp/SftpFileSystemConfigBuilder.java     |  18 +-
 .../provider/webdav/WebdavFileProvider.java   |   1 +
 .../webdav/WebdavFileSystemConfigBuilder.java |  97 +------
 12 files changed, 361 insertions(+), 139 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs/FileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/FileSystemConfigBuilder.java
index ad4ed27a8a..f59bbb787d 100644
--- a/core/src/main/java/org/apache/commons/vfs/FileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/FileSystemConfigBuilder.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.vfs;
 
-
 /**
  * Abstract class which has the right to fill FileSystemOptions
  *
@@ -25,6 +24,19 @@
  */
 public abstract class FileSystemConfigBuilder
 {
+    private static final String PREFIX = "vfs.";
+
+    private final String prefix;
+
+    protected FileSystemConfigBuilder()
+    {
+        this.prefix = PREFIX;
+    }
+    protected FileSystemConfigBuilder(String component)
+    {
+        this.prefix = PREFIX + component;
+    }
+
     protected void setParam(FileSystemOptions opts, String name, Object value)
     {
         opts.setOption(getConfigClass(), name, value);
@@ -42,12 +54,231 @@ protected Object getParam(FileSystemOptions opts, String name)
 
     protected boolean hasParam(FileSystemOptions opts, String name)
     {
-        if (opts == null)
+        return opts != null && opts.hasOption(getConfigClass(), name);
+    }
+
+    protected boolean hasObject(FileSystemOptions opts, String name)
+    {
+        return hasParam(opts, name) || System.getProperties().containsKey(PREFIX + name);
+    }
+
+    protected Boolean getBoolean(FileSystemOptions opts, String name)
+    {
+        return getBoolean(opts, name, null);
+    }
+
+    protected boolean getBoolean(FileSystemOptions opts, String name, boolean defaultValue)
+    {
+        return getBoolean(opts, name, new Boolean(defaultValue)).booleanValue();
+    }
+
+    protected Boolean getBoolean(FileSystemOptions opts, String name, Boolean defaultValue)
+    {
+        Boolean value = (Boolean)getParam(opts, name);
+        if (value == null)
         {
-            return false;
+            String str = System.getProperty(PREFIX + name);
+            if (str == null)
+            {
+                return defaultValue;
+            }
+            value = Boolean.valueOf(str);
         }
+        return value;
+    }
+
+    protected Byte getByte(FileSystemOptions opts, String name)
+    {
+        return getByte(opts, name, null);
+    }
 
-        return opts.hasOption(getConfigClass(), name);
+    protected byte getByte(FileSystemOptions opts, String name, byte defaultValue)
+    {
+        return getByte(opts, name, new Byte(defaultValue)).byteValue();
+    }
+
+    protected Byte getByte(FileSystemOptions opts, String name, Byte defaultValue)
+    {
+        Byte value = (Byte)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null)
+            {
+                return defaultValue;
+            }
+            value = Byte.valueOf(str);
+        }
+        return value;
+    }
+
+    protected Character getCharacter(FileSystemOptions opts, String name)
+    {
+        return getCharacter(opts, name, null);
+    }
+
+    protected char getCharacter(FileSystemOptions opts, String name, char defaultValue)
+    {
+        return getCharacter(opts, name, new Character(defaultValue)).charValue();
+    }
+
+    protected Character getCharacter(FileSystemOptions opts, String name, Character defaultValue)
+    {
+        Character value = (Character)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null || str.length() <= 0)
+            {
+                return defaultValue;
+            }
+            value = new Character(str.charAt(0));
+        }
+        return value;
+    }
+
+    protected Double getDouble(FileSystemOptions opts, String name)
+    {
+        return getDouble(opts, name, null);
+    }
+
+    protected double getDouble(FileSystemOptions opts, String name, double defaultValue)
+    {
+        return getDouble(opts, name, new Double(defaultValue)).doubleValue();
+    }
+
+    protected Double getDouble(FileSystemOptions opts, String name, Double defaultValue)
+    {
+        Double value = (Double)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null || str.length() <= 0)
+            {
+                return defaultValue;
+            }
+            value = Double.valueOf(str);
+        }
+        return value;
+    }
+
+    protected Float getFloat(FileSystemOptions opts, String name)
+    {
+        return getFloat(opts, name, null);
+    }
+
+    protected float getFloat(FileSystemOptions opts, String name, float defaultValue)
+    {
+        return getFloat(opts, name, new Float(defaultValue)).floatValue();
+    }
+
+    protected Float getFloat(FileSystemOptions opts, String name, Float defaultValue)
+    {
+        Float value = (Float)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null || str.length() <= 0)
+            {
+                return defaultValue;
+            }
+            value = Float.valueOf(str);
+        }
+        return value;
+    }
+
+    protected Integer getInteger(FileSystemOptions opts, String name)
+    {
+        return getInteger(opts, name, null);
+    }
+
+    protected int getInteger(FileSystemOptions opts, String name, int defaultValue)
+    {
+        return getInteger(opts, name, new Integer(defaultValue)).intValue();
+    }
+
+    protected Integer getInteger(FileSystemOptions opts, String name, Integer defaultValue)
+    {
+        Integer value = (Integer)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null)
+            {
+                return defaultValue;
+            }
+            value = Integer.valueOf(str);
+        }
+        return value;
+    }
+
+    protected Long getLong(FileSystemOptions opts, String name)
+    {
+        return getLong(opts, name, null);
+    }
+
+    protected long getLong(FileSystemOptions opts, String name, long defaultValue)
+    {
+        return getLong(opts, name, new Long(defaultValue)).longValue();
+    }
+
+    protected Long getLong(FileSystemOptions opts, String name, Long defaultValue)
+    {
+        Long value = (Long)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null)
+            {
+                return defaultValue;
+            }
+            value = Long.valueOf(str);
+        }
+        return value;
+    }
+
+    protected Short getShort(FileSystemOptions opts, String name)
+    {
+        return getShort(opts, name, null);
+    }
+
+    protected short getShort(FileSystemOptions opts, String name, short defaultValue)
+    {
+        return getShort(opts, name, new Short(defaultValue)).shortValue();
+    }
+
+    protected Short getShort(FileSystemOptions opts, String name, Short defaultValue)
+    {
+        Short value = (Short)getParam(opts, name);
+        if (value == null)
+        {
+            String str = System.getProperty(this.prefix + name);
+            if (str == null)
+            {
+                return defaultValue;
+            }
+            value = Short.valueOf(str);
+        }
+        return value;
+    }
+
+    protected String getString(FileSystemOptions opts, String name)
+    {
+        return getString(opts, name, null);
+    }
+
+    protected String getString(FileSystemOptions opts, String name, String defaultValue)
+    {
+        String value = (String)getParam(opts, name);
+        if (value == null)
+        {
+            value = System.getProperty(this.prefix + name);
+            if (value == null)
+            {
+                return defaultValue;
+            }
+        }
+        return value;
     }
 
     protected abstract Class getConfigClass();
diff --git a/core/src/main/java/org/apache/commons/vfs/cache/SoftRefFilesCache.java b/core/src/main/java/org/apache/commons/vfs/cache/SoftRefFilesCache.java
index fd92d17fa5..6c4908cac6 100644
--- a/core/src/main/java/org/apache/commons/vfs/cache/SoftRefFilesCache.java
+++ b/core/src/main/java/org/apache/commons/vfs/cache/SoftRefFilesCache.java
@@ -92,7 +92,9 @@ public void run()
 					{
 						if (removeFile(key))
 						{
-							filesystemClose(key.getFileSystem());
+                            /* This is not thread safe
+                            filesystemClose(key.getFileSystem());
+                            */
 						}
 					}
 				}
@@ -155,10 +157,14 @@ public void putFile(final FileObject file)
 
 		synchronized (files)
 		{
-			files.put(file.getName(), ref);
+			Reference old = (Reference)files.put(file.getName(), ref);
 			synchronized(refReverseMap)
 			{
-				refReverseMap.put(ref, key);
+                if (old != null)
+                {
+                    refReverseMap.remove(old);
+                }
+                refReverseMap.put(ref, key);
 			}
 		}
 	}
diff --git a/core/src/main/java/org/apache/commons/vfs/impl/DefaultFileMonitor.java b/core/src/main/java/org/apache/commons/vfs/impl/DefaultFileMonitor.java
index f876a69fcb..a042e02535 100644
--- a/core/src/main/java/org/apache/commons/vfs/impl/DefaultFileMonitor.java
+++ b/core/src/main/java/org/apache/commons/vfs/impl/DefaultFileMonitor.java
@@ -649,6 +649,18 @@ else if (this.exists && this.file.exists())
                     }
 
                 }
+                else if (!this.exists && this.file.exists())
+                {
+                    this.exists = this.file.exists();
+                    this.timestamp = this.file.getContent().getLastModifiedTime();
+                    // Don't fire if it's a folder because new file children
+                    // and deleted files in a folder have their own event triggered.
+                    if (!this.file.getType().hasChildren())
+                    {
+                        ((AbstractFileSystem)
+                                this.file.getFileSystem()).fireFileCreated(this.file);
+                    }
+                }
 
                 this.checkForNewChildren();
 
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/ftp/FtpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/ftp/FtpFileSystemConfigBuilder.java
index a11505066e..83be10e541 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/ftp/FtpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/ftp/FtpFileSystemConfigBuilder.java
@@ -48,6 +48,7 @@ public static FtpFileSystemConfigBuilder getInstance()
 
     private FtpFileSystemConfigBuilder()
     {
+        super("ftp.");
     }
 
     /**
@@ -90,7 +91,7 @@ public void setEntryParser(FileSystemOptions opts, String key)
      */
     public String getEntryParser(FileSystemOptions opts)
     {
-        return (String) getParam(opts, FACTORY_KEY);
+        return getString(opts, FACTORY_KEY);
     }
 
     protected Class getConfigClass()
@@ -115,7 +116,7 @@ public void setPassiveMode(FileSystemOptions opts, boolean passiveMode)
      */
     public Boolean getPassiveMode(FileSystemOptions opts)
     {
-        return (Boolean) getParam(opts, PASSIVE_MODE);
+        return getBoolean(opts, PASSIVE_MODE);
     }
 
     /**
@@ -135,7 +136,7 @@ public void setUserDirIsRoot(FileSystemOptions opts, boolean userDirIsRoot)
      */
     public Boolean getUserDirIsRoot(FileSystemOptions opts)
     {
-        return (Boolean) getParam(opts, USER_DIR_IS_ROOT);
+        return getBoolean(opts, USER_DIR_IS_ROOT);
     }
 
     /**
@@ -144,7 +145,7 @@ public Boolean getUserDirIsRoot(FileSystemOptions opts)
      */
     public Integer getDataTimeout(FileSystemOptions opts)
     {
-        return (Integer) getParam(opts, DATA_TIMEOUT);
+        return getInteger(opts, DATA_TIMEOUT);
     }
 
     /**
@@ -166,7 +167,7 @@ public void setDataTimeout(FileSystemOptions opts, Integer dataTimeout)
      */
     public String getServerLanguageCode(FileSystemOptions opts)
     {
-        return (String) getParam(opts, SERVER_LANGUAGE_CODE);
+        return getString(opts, SERVER_LANGUAGE_CODE);
     }
 
     /**
@@ -184,7 +185,7 @@ public void setServerLanguageCode(FileSystemOptions opts, String serverLanguageC
      */
     public String getDefaultDateFormat(FileSystemOptions opts)
     {
-        return (String) getParam(opts, DEFAULT_DATE_FORMAT);
+        return getString(opts, DEFAULT_DATE_FORMAT);
     }
 
     /**
@@ -201,7 +202,7 @@ public void setDefaultDateFormat(FileSystemOptions opts, String defaultDateForma
      */
     public String getRecentDateFormat(FileSystemOptions opts)
     {
-        return (String) getParam(opts, RECENT_DATE_FORMAT);
+        return getString(opts, RECENT_DATE_FORMAT);
     }
 
     /**
@@ -217,7 +218,7 @@ public void setRecentDateFormat(FileSystemOptions opts, String recentDateFormat)
      */
     public String getServerTimeZoneId(FileSystemOptions opts)
     {
-        return (String) getParam(opts, SERVER_TIME_ZONE_ID);
+        return getString(opts, SERVER_TIME_ZONE_ID);
     }
 
     /**
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
index 66e0e87886..161367511f 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpClientFactory.java
@@ -20,6 +20,9 @@
 import org.apache.commons.httpclient.HostConfiguration;
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
+import org.apache.commons.httpclient.HttpConnectionManager;
+import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
+import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
 import org.apache.commons.httpclient.methods.HeadMethod;
 import org.apache.commons.vfs.FileSystemException;
 import org.apache.commons.vfs.FileSystemOptions;
@@ -39,20 +42,37 @@ private HttpClientFactory()
     {
     }
 
+    public static HttpClient createConnection(String scheme, String hostname, int port, String username,
+                                              String password, FileSystemOptions fileSystemOptions)
+            throws FileSystemException
+    {
+        return createConnection(HttpFileSystemConfigBuilder.getInstance(), scheme, hostname, port,
+            username, password, fileSystemOptions);
+    }
+
     /**
      * Creates a new connection to the server.
      */
-    public static HttpClient createConnection(String scheme, String hostname, int port, String username, String password, FileSystemOptions fileSystemOptions) throws FileSystemException
+    public static HttpClient createConnection(HttpFileSystemConfigBuilder builder, String scheme,
+                                              String hostname, int port, String username,
+                                              String password, FileSystemOptions fileSystemOptions)
+            throws FileSystemException
     {
         HttpClient client;
         try
         {
-            // client = new HttpClient(new MultiThreadedHttpConnectionManager());
-			client = new HttpClient(new ThreadLocalHttpConnectionManager());
+            HttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();
+            HttpConnectionManagerParams connectionMgrParams = mgr.getParams();
+
+            client = new HttpClient(mgr);
+			//client = new HttpClient(new ThreadLocalHttpConnectionManager());
 
 			final HostConfiguration config = new HostConfiguration();
             config.setHost(hostname, port, scheme);
 
+            connectionMgrParams.setMaxConnectionsPerHost(config, builder.getMaxConnectionsPerHost(fileSystemOptions));
+            connectionMgrParams.setMaxTotalConnections(builder.getMaxTotalConnections(fileSystemOptions));
+
             if (fileSystemOptions != null)
             {
                 String proxyHost = HttpFileSystemConfigBuilder.getInstance().getProxyHost(fileSystemOptions);
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystem.java b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystem.java
index 29b89a434e..6d354340ac 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystem.java
@@ -18,6 +18,7 @@
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpConnectionManager;
+import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.vfs.FileName;
 import org.apache.commons.vfs.FileObject;
 import org.apache.commons.vfs.FileSystem;
@@ -67,7 +68,11 @@ public void closeCommunicationLink()
 			{
 				((ThreadLocalHttpConnectionManager) mgr).releaseLocalConnection();
 			}
-		}
+            if (mgr instanceof MultiThreadedHttpConnectionManager)
+            {
+                ((MultiThreadedHttpConnectionManager) mgr).shutdown();
+            }
+        }
 	}
 
 	/**
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
index f3aeb5bbda..04405ceda5 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/http/HttpFileSystemConfigBuilder.java
@@ -20,6 +20,7 @@
 import org.apache.commons.vfs.FileSystemOptions;
 import org.apache.commons.vfs.UserAuthenticator;
 import org.apache.commons.httpclient.Cookie;
+import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
 
 /**
  * Configuration options for HTTP
@@ -36,8 +37,18 @@ public static HttpFileSystemConfigBuilder getInstance()
         return builder;
     }
 
+    private static final int DEFAULT_MAX_HOST_CONNECTIONS = 5;
+
+    private static final int DEFAULT_MAX_CONNECTIONS = 50;
+
+    protected HttpFileSystemConfigBuilder(String prefix)
+    {
+        super(prefix);
+    }
+
     private HttpFileSystemConfigBuilder()
     {
+        super("http.");
     }
 
     /**
@@ -57,7 +68,7 @@ public void setUrlCharset(FileSystemOptions opts, String chaset)
      */
     public String getUrlCharset(FileSystemOptions opts)
     {
-        return (String) getParam(opts, "urlCharset");
+        return getString(opts, "urlCharset");
     }
 
     /**
@@ -93,7 +104,7 @@ public void setProxyPort(FileSystemOptions opts, int proxyPort)
      */
     public String getProxyHost(FileSystemOptions opts)
     {
-        return (String) getParam(opts, "proxyHost");
+        return getString(opts, "proxyHost");
     }
 
     /**
@@ -105,12 +116,7 @@ public String getProxyHost(FileSystemOptions opts)
      */
     public int getProxyPort(FileSystemOptions opts)
     {
-        if (!hasParam(opts, "proxyPort"))
-        {
-            return 0;
-        }
-
-        return ((Number) getParam(opts, "proxyPort")).intValue();
+        return getInteger(opts, "proxyPort", 0);
     }
 
     /**
@@ -144,6 +150,42 @@ public Cookie[] getCookies(FileSystemOptions opts)
     {
         return (Cookie[]) getParam(opts, "cookies");
     }
+
+    /**
+     * The maximum number of connections allowed
+     */
+    public void setMaxTotalConnections(FileSystemOptions opts, int maxTotalConnections)
+    {
+        setParam(opts, HttpConnectionManagerParams.MAX_TOTAL_CONNECTIONS, new Integer(maxTotalConnections));
+    }
+
+    /**
+     * Retrieve the maximum number of connections allowed.
+     * @param opts The FileSystemOptions.
+     * @return The maximum number of connections allowed.
+     */
+    public int getMaxTotalConnections(FileSystemOptions opts)
+    {
+        return getInteger(opts, HttpConnectionManagerParams.MAX_TOTAL_CONNECTIONS, DEFAULT_MAX_CONNECTIONS);
+    }
+
+    /**
+     * The maximum number of connections allowed to any host
+     */
+    public void setMaxConnectionsPerHost(FileSystemOptions opts, int maxHostConnections)
+    {
+        setParam(opts, HttpConnectionManagerParams.MAX_HOST_CONNECTIONS, new Integer(maxHostConnections));
+    }
+
+    /**
+     * Retrieve the maximum number of connections allowed per host.
+     * @param opts The FileSystemOptions.
+     * @return The maximum number of connections allowed per host.
+     */
+    public int getMaxConnectionsPerHost(FileSystemOptions opts)
+    {
+        return getInteger(opts, HttpConnectionManagerParams.MAX_HOST_CONNECTIONS, DEFAULT_MAX_HOST_CONNECTIONS);
+    }
     
     protected Class getConfigClass()
     {
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/ram/RamFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/ram/RamFileSystemConfigBuilder.java
index f5d7746656..b6117d8998 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/ram/RamFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/ram/RamFileSystemConfigBuilder.java
@@ -36,7 +36,7 @@ public class RamFileSystemConfigBuilder extends FileSystemConfigBuilder
 	 */
 	private RamFileSystemConfigBuilder()
 	{
-		super();
+		super("ram.");
 	}
 
 	/**
@@ -62,15 +62,7 @@ protected Class getConfigClass()
 	 */
 	public int getMaxSize(FileSystemOptions opts)
 	{
-		Integer size = (Integer) getParam(opts, MAX_SIZE_KEY);
-		if (size != null)
-		{
-			return size.intValue();
-		}
-		else
-		{
-			return Integer.MAX_VALUE;
-		}
+		return getInteger(opts, MAX_SIZE_KEY, Integer.MAX_VALUE);
 	}
 
 	/**
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/res/ResourceFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/res/ResourceFileSystemConfigBuilder.java
index 1e20a60a5f..1f96befe67 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/res/ResourceFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/res/ResourceFileSystemConfigBuilder.java
@@ -37,6 +37,7 @@ public static ResourceFileSystemConfigBuilder getInstance()
 
     private ResourceFileSystemConfigBuilder()
     {
+        super("resource.");
     }
 
     public void setClassLoader(FileSystemOptions opts, ClassLoader classLoader)
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/sftp/SftpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/sftp/SftpFileSystemConfigBuilder.java
index 27baee9dbf..8ebe2f0f8a 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/sftp/SftpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/sftp/SftpFileSystemConfigBuilder.java
@@ -84,6 +84,7 @@ public static SftpFileSystemConfigBuilder getInstance()
 
     private SftpFileSystemConfigBuilder()
     {
+        super("sftp.");
     }
 
     /**
@@ -160,7 +161,7 @@ public void setCompression(FileSystemOptions opts, String compression) throws Fi
      */
     public String getCompression(FileSystemOptions opts)
     {
-        return (String) getParam(opts, "compression");
+        return getString(opts, "compression");
     }
 
     /**
@@ -198,7 +199,7 @@ public void setStrictHostKeyChecking(FileSystemOptions opts, String hostKeyCheck
      */
     public String getStrictHostKeyChecking(FileSystemOptions opts)
     {
-        return (String) getParam(opts, "StrictHostKeyChecking");
+        return getString(opts, "StrictHostKeyChecking");
     }
 
     /**
@@ -218,7 +219,7 @@ public void setUserDirIsRoot(FileSystemOptions opts, boolean userDirIsRoot)
      */
     public Boolean getUserDirIsRoot(FileSystemOptions opts)
     {
-        return (Boolean) getParam(opts, USER_DIR_IS_ROOT);
+        return getBoolean(opts, USER_DIR_IS_ROOT);
     }
 
     /**
@@ -238,7 +239,7 @@ public void setTimeout(FileSystemOptions opts, Integer timeout)
      */
     public Integer getTimeout(FileSystemOptions opts)
     {
-        return (Integer) getParam(opts, TIMEOUT);
+        return getInteger(opts, TIMEOUT);
     }
     
     protected Class getConfigClass()
@@ -279,7 +280,7 @@ public void setProxyPort(FileSystemOptions opts, int proxyPort)
      */
     public String getProxyHost(FileSystemOptions opts)
     {
-        return (String) getParam(opts, "proxyHost");
+        return getString(opts, "proxyHost");
     }
 
     /**
@@ -291,12 +292,7 @@ public String getProxyHost(FileSystemOptions opts)
      */
     public int getProxyPort(FileSystemOptions opts)
     {
-        if (!hasParam(opts, "proxyPort"))
-        {
-            return 0;
-        }
-
-        return ((Number) getParam(opts, "proxyPort")).intValue();
+        return getInteger(opts, "proxyPort", 0);
     }
 
     /**
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
index 9eed65a173..e5a434d37a 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileProvider.java
@@ -85,6 +85,7 @@ protected FileSystem doCreateFileSystem(final FileName name, final FileSystemOpt
 			authData = UserAuthenticatorUtils.authenticate(fileSystemOptions, AUTHENTICATOR_TYPES);
 
 			httpClient = HttpClientFactory.createConnection(
+                WebdavFileSystemConfigBuilder.getInstance(),
                 "http",
                 rootName.getHostName(),
 				rootName.getPort(),
diff --git a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileSystemConfigBuilder.java
index c3ed25a9cb..f6b2c1ae9a 100644
--- a/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs/provider/webdav/WebdavFileSystemConfigBuilder.java
@@ -19,6 +19,9 @@
 import org.apache.commons.vfs.FileSystemConfigBuilder;
 import org.apache.commons.vfs.FileSystemOptions;
 import org.apache.commons.vfs.UserAuthenticator;
+import org.apache.commons.vfs.provider.http.HttpFileSystemConfigBuilder;
+import org.apache.commons.httpclient.Cookie;
+import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
 
 /**
  * Configuration options for WebDav
@@ -26,106 +29,18 @@
  * @author <a href="mailto:imario@apache.org">Mario Ivankovits</a>
  * @version $Revision$ $Date$
  */
-public class WebdavFileSystemConfigBuilder extends FileSystemConfigBuilder
+public class WebdavFileSystemConfigBuilder extends HttpFileSystemConfigBuilder
 {
     private final static WebdavFileSystemConfigBuilder builder = new WebdavFileSystemConfigBuilder();
 
-    public static WebdavFileSystemConfigBuilder getInstance()
+    public static HttpFileSystemConfigBuilder getInstance()
     {
         return builder;
     }
 
     private WebdavFileSystemConfigBuilder()
     {
-    }
-
-    /**
-     * Set the charset used for url encoding<br>
-     *
-     * @param chaset the chaset
-     */
-    public void setUrlCharset(FileSystemOptions opts, String chaset)
-    {
-        setParam(opts, "urlCharset", chaset);
-    }
-
-    /**
-     * Set the charset used for url encoding<br>
-     *
-     * @return the chaset
-     */
-    public String getUrlCharset(FileSystemOptions opts)
-    {
-        return (String) getParam(opts, "urlCharset");
-    }
-
-    /**
-     * Set the proxy to use for webdav connection.<br>
-     * You have to set the ProxyPort too if you would like to have the proxy relly used.
-     *
-     * @param proxyHost the host
-     * @see #setProxyPort
-     */
-    public void setProxyHost(FileSystemOptions opts, String proxyHost)
-    {
-        setParam(opts, "proxyHost", proxyHost);
-    }
-
-    /**
-     * Set the proxy-port to use for webdav connection
-     * You have to set the ProxyHost too if you would like to have the proxy relly used.
-     *
-     * @param proxyPort the port
-     * @see #setProxyHost
-     */
-    public void setProxyPort(FileSystemOptions opts, int proxyPort)
-    {
-        setParam(opts, "proxyPort", new Integer(proxyPort));
-    }
-
-    /**
-     * Get the proxy to use for webdav connection
-     * You have to set the ProxyPort too if you would like to have the proxy relly used.
-     *
-     * @return proxyHost
-     * @see #setProxyPort
-     */
-    public String getProxyHost(FileSystemOptions opts)
-    {
-        return (String) getParam(opts, "proxyHost");
-    }
-
-    /**
-     * Get the proxy-port to use for webdav the connection
-     * You have to set the ProxyHost too if you would like to have the proxy relly used.
-     *
-     * @return proxyPort: the port number or 0 if it is not set
-     * @see #setProxyHost
-     */
-    public int getProxyPort(FileSystemOptions opts)
-    {
-        if (!hasParam(opts, "proxyPort"))
-        {
-            return 0;
-        }
-
-        return ((Number) getParam(opts, "proxyPort")).intValue();
-    }
-
-    /**
-     * Set the proxy authenticator where the system should get the credentials from
-     */
-    public void setProxyAuthenticator(FileSystemOptions opts, UserAuthenticator authenticator)
-    {
-        setParam(opts, "proxyAuthenticator", authenticator);
-    }
-
-    /**
-     * Get the proxy authenticator where the system should get the credentials from
-     */
-    public UserAuthenticator getProxyAuthenticator(FileSystemOptions opts)
-    {
-        return (UserAuthenticator) getParam(opts, "proxyAuthenticator");
+        super("webdav.");
     }
     
     protected Class getConfigClass()
