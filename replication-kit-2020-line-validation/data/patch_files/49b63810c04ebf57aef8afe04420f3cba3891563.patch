From 49b63810c04ebf57aef8afe04420f3cba3891563 Mon Sep 17 00:00:00 2001
From: Matthew Jason Benson <mbenson@apache.org>
Date: Fri, 3 Aug 2012 17:17:18 +0000
Subject: [PATCH] [LANG-814] MethodUtils.invoke*(*, Object... args) variants
 cannot handle null values

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1369102 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/lang3/reflect/MethodUtils.java    | 24 ++++---------------
 .../lang3/reflect/MethodUtilsTest.java        |  6 +++++
 2 files changed, 10 insertions(+), 20 deletions(-)

diff --git a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
index b2ffa531e3c..9bdc7aa86cd 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
@@ -86,11 +86,7 @@ public static Object invokeMethod(Object object, String methodName,
         if (args == null) {
             args = ArrayUtils.EMPTY_OBJECT_ARRAY;
         }
-        int arguments = args.length;
-        Class<?>[] parameterTypes = new Class[arguments];
-        for (int i = 0; i < arguments; i++) {
-            parameterTypes[i] = args[i].getClass();
-        }
+        Class<?>[] parameterTypes = ClassUtils.toClass(args);
         return invokeMethod(object, methodName, args, parameterTypes);
     }
 
@@ -157,11 +153,7 @@ public static Object invokeExactMethod(Object object, String methodName,
         if (args == null) {
             args = ArrayUtils.EMPTY_OBJECT_ARRAY;
         }
-        int arguments = args.length;
-        Class<?>[] parameterTypes = new Class[arguments];
-        for (int i = 0; i < arguments; i++) {
-            parameterTypes[i] = args[i].getClass();
-        }
+        Class<?>[] parameterTypes = ClassUtils.toClass(args);
         return invokeExactMethod(object, methodName, args, parameterTypes);
     }
 
@@ -271,11 +263,7 @@ public static Object invokeStaticMethod(Class<?> cls, String methodName,
         if (args == null) {
             args = ArrayUtils.EMPTY_OBJECT_ARRAY;
         }
-        int arguments = args.length;
-        Class<?>[] parameterTypes = new Class[arguments];
-        for (int i = 0; i < arguments; i++) {
-            parameterTypes[i] = args[i].getClass();
-        }
+        Class<?>[] parameterTypes = ClassUtils.toClass(args);
         return invokeStaticMethod(cls, methodName, args, parameterTypes);
     }
 
@@ -344,11 +332,7 @@ public static Object invokeExactStaticMethod(Class<?> cls, String methodName,
         if (args == null) {
             args = ArrayUtils.EMPTY_OBJECT_ARRAY;
         }
-        int arguments = args.length;
-        Class<?>[] parameterTypes = new Class[arguments];
-        for (int i = 0; i < arguments; i++) {
-            parameterTypes[i] = args[i].getClass();
-        }
+        Class<?>[] parameterTypes = ClassUtils.toClass(args);
         return invokeExactStaticMethod(cls, methodName, args, parameterTypes);
     }
 
diff --git a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
index b481dc5759c..50662d59e04 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
@@ -371,6 +371,12 @@ public void testGetMatchingAccessibleMethod() throws Exception {
                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class));
     }
 
+    @Test
+    public void testNullArgument() {
+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "oneParameter",
+                singletonArray(null), singletonArray(String.class));
+    }
+
     private void expectMatchingAccessibleMethodParameterTypes(Class<?> cls,
             String methodName, Class<?>[] requestTypes, Class<?>[] actualTypes) {
         Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,
