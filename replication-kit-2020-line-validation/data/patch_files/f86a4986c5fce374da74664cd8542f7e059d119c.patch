From f86a4986c5fce374da74664cd8542f7e059d119c Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 21 Aug 2014 18:39:19 +0000
Subject: [PATCH] COMPRESS-286 tell LZMAInputStream the amount of data to
 expect

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1619505 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++++
 .../archivers/sevenz/AES256SHA256Decoder.java |  3 ++-
 .../compress/archivers/sevenz/CoderBase.java  |  3 ++-
 .../compress/archivers/sevenz/Coders.java     | 24 ++++++++++---------
 .../archivers/sevenz/DeltaDecoder.java        |  3 ++-
 .../compress/archivers/sevenz/Folder.java     | 11 +++++++++
 .../archivers/sevenz/LZMA2Decoder.java        |  3 ++-
 .../compress/archivers/sevenz/SevenZFile.java |  6 +++--
 8 files changed, 40 insertions(+), 17 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index e90e19be0a8..fdc3216d8a3 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,6 +52,10 @@ The <action> type attribute can be add,update,fix,remove.
         When reading 7z files unknown file properties and properties
         of type kDummy are now ignored.
       </action>
+      <action type="fix" date="2014-08-21" issue="COMPRESS-286">
+        Expanding 7z archives using LZMA compression could cause an
+        EOFException.
+      </action>
     </release>
 
     <release version="1.8.1" date="2014-05-14"
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
index 0c14bab2eaa..38f418cea88 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
@@ -30,7 +30,8 @@
 
 class AES256SHA256Decoder extends CoderBase {
     @Override
-    InputStream decode(final InputStream in, final Coder coder, final byte[] passwordBytes) throws IOException {
+    InputStream decode(final InputStream in, long uncompressedLength,
+            final Coder coder, final byte[] passwordBytes) throws IOException {
         return new InputStream() {
             private boolean isInitialized = false;
             private CipherInputStream cipherInputStream = null;
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
index 04434d97005..a871e523a64 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
@@ -64,7 +64,8 @@ Object getOptionsFromCoder(Coder coder, InputStream in) {
     /**
      * @return a stream that reads from in using the configured coder and password.
      */
-    abstract InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException;
+    abstract InputStream decode(final InputStream in, long uncomressedLength,
+        final Coder coder, byte[] password) throws IOException;
 
     /**
      * @return a stream that writes to out using the given configuration.
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
index 5853677b873..c488dea481f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
@@ -67,14 +67,14 @@ static CoderBase findByMethod(SevenZMethod method) {
         return CODER_MAP.get(method);
     }
 
-    static InputStream addDecoder(final InputStream is,
+    static InputStream addDecoder(final InputStream is, long uncompressedLength,
             final Coder coder, final byte[] password) throws IOException {
         CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));
         if (cb == null) {
             throw new IOException("Unsupported compression method " +
                                   Arrays.toString(coder.decompressionMethodId));
         }
-        return cb.decode(is, coder, password);
+        return cb.decode(is, uncompressedLength, coder, password);
     }
     
     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,
@@ -88,8 +88,8 @@ static OutputStream addEncoder(final OutputStream out, final SevenZMethod method
 
     static class CopyDecoder extends CoderBase {
         @Override
-        InputStream decode(final InputStream in, final Coder coder,
-                byte[] password) throws IOException {
+        InputStream decode(final InputStream in, long uncompressedLength,
+                final Coder coder, byte[] password) throws IOException {
             return in; 
         }
         @Override
@@ -100,8 +100,8 @@ OutputStream encode(final OutputStream out, final Object options) {
 
     static class LZMADecoder extends CoderBase {
         @Override
-        InputStream decode(final InputStream in, final Coder coder,
-                byte[] password) throws IOException {
+        InputStream decode(final InputStream in, long uncompressedLength,
+                final Coder coder, byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
             long dictSize = coder.properties[1];
             for (int i = 1; i < 4; i++) {
@@ -110,7 +110,7 @@ InputStream decode(final InputStream in, final Coder coder,
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+            return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);
         }
     }
     
@@ -121,8 +121,8 @@ static class BCJDecoder extends CoderBase {
         }
 
         @Override
-        InputStream decode(final InputStream in, final Coder coder,
-                byte[] password) throws IOException {
+        InputStream decode(final InputStream in, long uncompressedLength,
+                final Coder coder, byte[] password) throws IOException {
             try {
                 return opts.getInputStream(in);
             } catch (AssertionError e) {
@@ -149,7 +149,8 @@ static class DeflateDecoder extends CoderBase {
         }
 
         @Override
-        InputStream decode(final InputStream in, final Coder coder, final byte[] password)
+        InputStream decode(final InputStream in, long uncompressedLength,
+                final Coder coder, final byte[] password)
             throws IOException {
             return new InflaterInputStream(new DummyByteAddingInputStream(in),
                                            new Inflater(true));
@@ -167,7 +168,8 @@ static class BZIP2Decoder extends CoderBase {
         }
 
         @Override
-        InputStream decode(final InputStream in, final Coder coder, final byte[] password)
+        InputStream decode(final InputStream in, long uncompressedLength,
+                final Coder coder, final byte[] password)
                 throws IOException {
             return new BZip2CompressorInputStream(in);
         }
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
index 215d0e377c0..81dcb7a23dd 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
@@ -30,7 +30,8 @@ class DeltaDecoder extends CoderBase {
     }
 
     @Override
-    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {
+    InputStream decode(final InputStream in, long uncompressedLength,
+            final Coder coder, byte[] password) throws IOException {
         return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);
     }
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
index f8d3667cbe9..3aab7f4c4be 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
@@ -92,6 +92,17 @@ long getUnpackSize() {
         return 0;
     }
 
+    long getUnpackSizeForCoder(Coder coder) {
+        if (coders != null) {
+            for (int i = 0; i < coders.length; i++) {
+                if (coders[i] == coder) {
+                    return unpackSizes[i];
+                }
+            }
+        }
+        return 0;
+    }
+
     @Override
     public String toString() {
         return "Folder with " + coders.length + " coders, " + totalInputStreams
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
index 83ec3770681..9d3b8aff648 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
@@ -32,7 +32,8 @@ class LZMA2Decoder extends CoderBase {
     }
 
     @Override
-    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {
+    InputStream decode(final InputStream in, long uncompressedLength,
+            final Coder coder, byte[] password) throws IOException {
         try {
             int dictionarySize = getDictionarySize(coder);
             return new LZMA2InputStream(in, dictionarySize);
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
index dcafef8154e..1b146862887 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
@@ -276,7 +276,8 @@ private DataInputStream readEncodedHeader(final DataInputStream header, final Ar
             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {
                 throw new IOException("Multi input/output stream coders are not yet supported");
             }
-            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);
+            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),
+                    coder, password);
         }
         if (folder.hasCrc) {
             inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,
@@ -858,7 +859,8 @@ private InputStream buildDecoderStack(final Folder folder, final long folderOffs
                 throw new IOException("Multi input/output stream coders are not yet supported");
             }
             SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);
-            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);
+            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),
+                    coder, password);
             methods.addFirst(new SevenZMethodConfiguration(method,
                      Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));
         }
