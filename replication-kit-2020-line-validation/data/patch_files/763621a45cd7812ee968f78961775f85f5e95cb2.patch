From 763621a45cd7812ee968f78961775f85f5e95cb2 Mon Sep 17 00:00:00 2001
From: Maja Kabiljo <majakabiljo@fb.com>
Date: Mon, 3 Feb 2014 09:18:28 -0800
Subject: [PATCH] GIRAPH-835: org.apache.giraph.hive.input.CheckInputTest Fails
 because JobProgressTracker doesn't check null (akila via majakabiljo)

---
 CHANGELOG                                     |  3 +
 .../apache/giraph/job/JobProgressTracker.java | 91 ++++++++++---------
 2 files changed, 50 insertions(+), 44 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index d2f59806b..e21a29168 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,6 +1,9 @@
 Giraph Change Log
 
 Release 1.1.0 - unreleased
+  GIRAPH-835: org.apache.giraph.hive.input.CheckInputTest Fails because JobProgressTracker
+  doesn't check null (akila via majakabiljo)
+
   GIRAPH-834: Metrcis missing superstep time (armax00 via claudio)
 
   GIRAPH-819: Number of Containers Required for a Job (Rafal Wojdyla via ereisman)
diff --git a/giraph-core/src/main/java/org/apache/giraph/job/JobProgressTracker.java b/giraph-core/src/main/java/org/apache/giraph/job/JobProgressTracker.java
index f685344c2..a364dc48e 100644
--- a/giraph-core/src/main/java/org/apache/giraph/job/JobProgressTracker.java
+++ b/giraph-core/src/main/java/org/apache/giraph/job/JobProgressTracker.java
@@ -66,7 +66,8 @@ public JobProgressTracker(final Job submittedJob,
     final String basePath = CounterUtils.waitAndGetCounterNameFromGroup(
         submittedJob, GiraphConstants.ZOOKEEPER_BASE_PATH_COUNTER_GROUP);
     // Connect to ZooKeeper
-    zk = new ZooKeeperExt(
+    if (zkServer != null && basePath != null) {
+      zk = new ZooKeeperExt(
         zkServer,
         conf.getZooKeeperSessionTimeout(),
         conf.getZookeeperOpsMaxAttempts(),
@@ -77,62 +78,64 @@ public JobProgressTracker(final Job submittedJob,
           public void progress() {
           }
         });
-    writerThread = new Thread(new Runnable() {
-      @Override
-      public void run() {
-        String workerProgressBasePath = basePath + BspService.WORKER_PROGRESSES;
-        try {
-          while (!finished) {
-            if (zk.exists(workerProgressBasePath, false) != null) {
-              // Get locations of all worker progresses
-              List<String> workerProgressPaths = zk.getChildrenExt(
+      writerThread = new Thread(new Runnable() {
+        @Override
+        public void run() {
+          String workerProgressBasePath = basePath +
+            BspService.WORKER_PROGRESSES;
+          try {
+            while (!finished) {
+              if (zk.exists(workerProgressBasePath, false) != null) {
+                // Get locations of all worker progresses
+                List<String> workerProgressPaths = zk.getChildrenExt(
                   workerProgressBasePath, false, false, true);
-              List<WorkerProgress> workerProgresses =
+                List<WorkerProgress> workerProgresses =
                   new ArrayList<WorkerProgress>(workerProgressPaths.size());
-              // Read all worker progresses
-              for (String workerProgressPath : workerProgressPaths) {
-                WorkerProgress workerProgress = new WorkerProgress();
-                byte[] zkData = zk.getData(workerProgressPath, false, null);
-                WritableUtils.readFieldsFromByteArray(zkData, workerProgress);
-                workerProgresses.add(workerProgress);
-              }
-              // Combine and log
-              CombinedWorkerProgress combinedWorkerProgress =
+                // Read all worker progresses
+                for (String workerProgressPath : workerProgressPaths) {
+                  WorkerProgress workerProgress = new WorkerProgress();
+                  byte[] zkData = zk.getData(workerProgressPath, false, null);
+                  WritableUtils.readFieldsFromByteArray(zkData, workerProgress);
+                  workerProgresses.add(workerProgress);
+                }
+                // Combine and log
+                CombinedWorkerProgress combinedWorkerProgress =
                   new CombinedWorkerProgress(workerProgresses);
-              if (LOG.isInfoEnabled()) {
-                LOG.info(combinedWorkerProgress.toString());
-              }
-              // Check if application is done
-              if (combinedWorkerProgress.isDone(conf.getMaxWorkers())) {
-                break;
+                if (LOG.isInfoEnabled()) {
+                  LOG.info(combinedWorkerProgress.toString());
+                }
+                // Check if application is done
+                if (combinedWorkerProgress.isDone(conf.getMaxWorkers())) {
+                  break;
+                }
               }
+              Thread.sleep(UPDATE_MILLISECONDS);
             }
-            Thread.sleep(UPDATE_MILLISECONDS);
-          }
-        } catch (InterruptedException | KeeperException e) {
-          if (LOG.isInfoEnabled()) {
-            LOG.info("run: Exception occurred", e);
-          }
-        } finally {
-          try {
-            // Create a node so master knows we stopped communicating with
-            // ZooKeeper and it's safe to cleanup
-            zk.createExt(
+          } catch (InterruptedException | KeeperException e) {
+            if (LOG.isInfoEnabled()) {
+              LOG.info("run: Exception occurred", e);
+            }
+          } finally {
+            try {
+              // Create a node so master knows we stopped communicating with
+              // ZooKeeper and it's safe to cleanup
+              zk.createExt(
                 basePath + BspService.CLEANED_UP_DIR + "/client",
                 null,
                 ZooDefs.Ids.OPEN_ACL_UNSAFE,
                 CreateMode.PERSISTENT,
                 true);
-            zk.close();
-          } catch (InterruptedException | KeeperException e) {
-            if (LOG.isInfoEnabled()) {
-              LOG.info("run: Exception occurred", e);
+              zk.close();
+            } catch (InterruptedException | KeeperException e) {
+              if (LOG.isInfoEnabled()) {
+                LOG.info("run: Exception occurred", e);
+              }
             }
           }
         }
-      }
-    });
-    writerThread.start();
+      });
+      writerThread.start();
+    }
   }
 
   /**
