From 527e197117616e0666270b383a7a83831b6fbee4 Mon Sep 17 00:00:00 2001
From: James Kosin <jkosin@apache.org>
Date: Thu, 21 Feb 2013 05:34:07 +0000
Subject: [PATCH] OPENNLP-562:  Fixed Regular Expression NameFinder to return
 the correct span indexes for the returning spans from find().  Adjusted the
 Tests to include the new index values and added a test for the type of span
 returned.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1448517 13f79535-47bb-0310-9956-ffa450edef68
---
 .../opennlp/tools/namefind/RegexNameFinder.java | 17 ++++++++++++++---
 .../tools/namefind/RegexNameFinderTest.java     |  7 ++++---
 2 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
index ec1f56924..8336d2ad3 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinder.java
@@ -33,15 +33,26 @@
 public final class RegexNameFinder implements TokenNameFinder {
 
   private final Pattern mPatterns[];
+  private final String sType;
 
-  public RegexNameFinder(Pattern patterns[]) {
+  public RegexNameFinder(Pattern patterns[], String type) {
     if (patterns == null || patterns.length == 0) {
       throw new IllegalArgumentException("patterns must not be null or empty!");
     }
 
     mPatterns = patterns;
+    sType = type;
   }
 
+  public RegexNameFinder(Pattern patterns[]) {
+    if (patterns == null || patterns.length == 0) {
+      throw new IllegalArgumentException("patterns must not be null or empty!");
+    }
+
+    mPatterns = patterns;
+    sType = null;
+  }
+  
   public Span[] find(String tokens[]) {
     Map<Integer, Integer> sentencePosTokenMap = new HashMap<Integer, Integer>();
 
@@ -55,7 +66,7 @@ public Span[] find(String tokens[]) {
       sentenceString.append(tokens[i]);
 
       int endIndex = sentenceString.length();
-      sentencePosTokenMap.put(endIndex, i);
+      sentencePosTokenMap.put(endIndex, i + 1);
 
       if (i < tokens.length - 1) {
         sentenceString.append(' ');
@@ -74,7 +85,7 @@ public Span[] find(String tokens[]) {
             sentencePosTokenMap.get(matcher.end());
 
         if (tokenStartIndex != null && tokenEndIndex != null) {
-          Span annotation = new Span(tokenStartIndex, tokenEndIndex);
+          Span annotation = new Span(tokenStartIndex, tokenEndIndex, sType);
           annotations.add(annotation);
         }
       }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/RegexNameFinderTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/RegexNameFinderTest.java
index b0bd0ba3e..04087332e 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/RegexNameFinderTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/RegexNameFinderTest.java
@@ -45,7 +45,7 @@ public void testFindSingleTokenPattern() {
     assertTrue(result.length == 1);
 
     assertTrue(result[0].getStart() == 1);
-    assertTrue(result[0].getEnd() == 1);
+    assertTrue(result[0].getEnd() == 2);
   }
 
   @Test
@@ -55,14 +55,15 @@ public void testFindTokenizdPattern() {
     String sentence[] = new String[]{"a", "80", "year", "b", "c"};
 
     RegexNameFinder finder =
-      new RegexNameFinder(new Pattern[]{testPattern});
+      new RegexNameFinder(new Pattern[]{testPattern}, "match");
 
     Span[] result = finder.find(sentence);
 
     assertTrue(result.length == 1);
 
     assertTrue(result[0].getStart() == 1);
-    assertTrue(result[0].getEnd() == 2);
+    assertTrue(result[0].getEnd() == 3);
+    assertTrue(result[0].getType().equals("match"));
   }
 
   @Test
