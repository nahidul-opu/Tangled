From 4bb12e837c20df6e24bc677201b0a88d6725a7c2 Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Tue, 4 Aug 2009 23:35:52 +0000
Subject: [PATCH] BEANUTILS-344 Provide configurable option to use the column
 label rather than column name

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@801021 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/beanutils/JDBCDynaClass.java      | 22 ++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/src/java/org/apache/commons/beanutils/JDBCDynaClass.java b/src/java/org/apache/commons/beanutils/JDBCDynaClass.java
index ad3be5026..9769e17b8 100644
--- a/src/java/org/apache/commons/beanutils/JDBCDynaClass.java
+++ b/src/java/org/apache/commons/beanutils/JDBCDynaClass.java
@@ -46,6 +46,11 @@ abstract class JDBCDynaClass implements DynaClass, Serializable {
      */
     protected boolean lowerCase = true;
 
+    /**
+     * <p>Flag defining whether column names or labels should be used.
+     */
+    private boolean useColumnLabel;
+
     /**
      * <p>The set of dynamic properties that are part of this
      * {@link DynaClass}.</p>
@@ -127,6 +132,15 @@ public DynaBean newInstance()
 
     }
 
+    /**
+     * Set whether the column label or name should be used for the property name.
+     *
+     * @param useColumnLabel true if the column label should be used, otherwise false
+     */
+    public void setUseColumnLabel(boolean useColumnLabel) {
+        this.useColumnLabel = useColumnLabel;
+    }
+
     /**
      * <p>Loads and returns the <code>Class</code> of the given name.
      * By default, a load from the thread context class loader is attempted.
@@ -167,7 +181,13 @@ protected DynaProperty createDynaProperty(
                                     int i)
                                     throws SQLException {
 
-        String columnName = metadata.getColumnName(i);
+        String columnName = null;
+        if (useColumnLabel) {
+            columnName = metadata.getColumnLabel(i);
+        }
+        if (columnName == null || columnName.trim().length() == 0) {
+            columnName = metadata.getColumnName(i);
+        }
         String name = lowerCase ? columnName.toLowerCase() : columnName;
         if (!name.equals(columnName)) {
             if (columnNameXref == null) {
