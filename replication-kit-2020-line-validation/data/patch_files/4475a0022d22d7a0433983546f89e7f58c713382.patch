From 4475a0022d22d7a0433983546f89e7f58c713382 Mon Sep 17 00:00:00 2001
From: Mark Thomas <markt@apache.org>
Date: Thu, 17 Mar 2016 14:30:55 +0000
Subject: [PATCH] Fix DBCP-453 Ensure that setSoftMinEvictableIdleTimeMillis is
 used when working with BasicDataSource.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1735434 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  6 ++++-
 .../apache/commons/dbcp2/BasicDataSource.java |  3 ++-
 .../dbcp2/TestBasicDataSourceFactory.java     | 22 +++++++++++++++++++
 3 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 8a918d79ca..d1ff9d96e2 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -77,10 +77,14 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="ggregory" type="add" issue="DBCP-451">
         Add constructor DriverManagerConnectionFactory(String).
       </action>
-      <action dev="markt" type="fix" issue="DBCP-455" due-to="Kyohei Nakamura ">
+      <action dev="markt" type="fix" issue="DBCP-455" due-to="Kyohei Nakamura">
         Ensure that the cacheState setting is used when statement pooling is
         disabled.
       </action>
+      <action dev="markt" type="fix" issue="DBCP-453" due-to="Philipp Marx">
+        Ensure that setSoftMinEvictableIdleTimeMillis is used when working with
+        BasicDataSource.
+      </action>
     </release>
     <release version="2.1.1" date="6 Aug 2015" description=
 "This is a patch release, including bug fixes only.">
diff --git a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
index 258213e40f..963228f95f 100644
--- a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
@@ -2050,7 +2050,7 @@ protected DataSource createDataSource()
             }
 
             // Create the pooling data source to manage connections
-            DataSource newDataSource; 
+            DataSource newDataSource;
             success = false;
             try {
                 newDataSource = createDataSourceInstance();
@@ -2208,6 +2208,7 @@ protected void createConnectionPool(final PoolableConnectionFactory factory) {
         gop.setTestOnReturn(testOnReturn);
         gop.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
         gop.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
+        gop.setSoftMinEvictableIdleTimeMillis(softMinEvictableIdleTimeMillis);
         gop.setTestWhileIdle(testWhileIdle);
         gop.setLifo(lifo);
         gop.setSwallowedExceptionListener(new SwallowedExceptionLogger(log, logExpiredConnections));
diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
index b43fe2f9cc..fea4dcfca3 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java
@@ -32,6 +32,7 @@
 import javax.naming.Reference;
 import javax.naming.StringRefAddr;
 
+import org.apache.commons.pool2.impl.GenericObjectPool;
 import org.junit.Test;
 
 /**
@@ -98,6 +99,7 @@ public void testAllProperties() throws Exception {
             final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();
             final BasicDataSource ds = (BasicDataSource) basicDataSourceFactory.getObjectInstance(ref, null, null, null);
             checkDataSourceProperties(ds);
+            checkConnectionPoolProperties(ds.getConnectionPool());
             final List<String> messages = StackMessageLog.getAll();
             assertEquals(0,messages.size());
         } finally {
@@ -191,4 +193,24 @@ private void checkDataSourceProperties(final BasicDataSource ds) throws Exceptio
         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
         mbs.unregisterMBean(ds.getRegisteredJmxName());
     }
+
+    private void checkConnectionPoolProperties(final GenericObjectPool<PoolableConnection> cp) {
+        assertEquals(10, cp.getMaxTotal());
+        assertEquals(8, cp.getMaxIdle());
+        assertEquals(0, cp.getMinIdle());
+        assertEquals(500, cp.getMaxWaitMillis());
+        assertEquals(5, cp.getNumIdle());
+        assertTrue(cp.getTestOnBorrow());
+        assertFalse(cp.getTestOnReturn());
+        assertEquals(1000, cp.getTimeBetweenEvictionRunsMillis());
+        assertEquals(2000, cp.getMinEvictableIdleTimeMillis());
+        assertEquals(3000, cp.getSoftMinEvictableIdleTimeMillis());
+        assertEquals(2, cp.getNumTestsPerEvictionRun());
+        assertTrue(cp.getTestWhileIdle());
+        assertTrue(cp.getRemoveAbandonedOnBorrow());
+        assertTrue(cp.getRemoveAbandonedOnMaintenance());
+        assertEquals(3000, cp.getRemoveAbandonedTimeout());
+        assertTrue(cp.getLogAbandoned());
+        assertTrue(cp.getLifo());
+    }
 }
