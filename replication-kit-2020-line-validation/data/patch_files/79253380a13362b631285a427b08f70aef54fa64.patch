From 79253380a13362b631285a427b08f70aef54fa64 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 12 Dec 2012 13:14:33 +0000
Subject: [PATCH] NET-492 FTPClient.printWorkingDirectory() incorrectly parses
 certain valid PWD command results Rework to look for lone trailing quote

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1420655 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/net/ftp/FTPClient.java | 31 +++++++---
 .../apache/commons/net/ftp/FTPClientTest.java | 58 +++++++++++++++++++
 2 files changed, 81 insertions(+), 8 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/net/ftp/FTPClientTest.java

diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index 2f5621900..8bf6c665e 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -496,18 +496,33 @@ private void __initDefaults()
      * @param reply
      * @return
      */
-    private static String __parsePathname(String reply)
+    // package protected for access by test cases
+    static String __parsePathname(String reply)
     {
         String param = reply.substring(REPLY_CODE_LEN + 1);
         if (param.startsWith("\"")) {
-            int end;
-            if (param.endsWith("\"")) {
-                end = param.length()-1;
-            } else { // perhaps there's a trailing comment
-                end=param.lastIndexOf("\" "); // find start of comment (assume it does not contain ")
+            StringBuilder sb = new StringBuilder();
+            boolean quoteSeen = false;
+            // start after initial quote
+            for(int i=1; i < param.length(); i++) {
+                char ch = param.charAt(i);
+                if (ch=='"') {
+                    if (quoteSeen) {
+                        sb.append(ch);
+                        quoteSeen=false;
+                    } else {
+                        // don't output yet, in case doubled
+                        quoteSeen=true;
+                    }
+                } else {
+                    if (quoteSeen) { // found lone trailing quote within string
+                        return sb.toString();
+                    }
+                    sb.append(ch); // just another character
+                }
             }
-            if (end != -1) { // It was a match
-                return param.substring(1, end).replace("\"\"", "\"");            
+            if (quoteSeen) { // found lone trailing quote at end of string
+                return sb.toString();
             }
         }
         // malformed reply, return all after reply code and space
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
new file mode 100644
index 000000000..d7e5998d9
--- /dev/null
+++ b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.commons.net.ftp;
+
+import junit.framework.TestCase;
+
+public class FTPClientTest extends TestCase {
+
+    private static final String[] TESTS = {
+        "257 /path/without/quotes",
+            "/path/without/quotes",
+
+        "257 \"/path/with/delimiting/quotes/without/commentary\"",
+              "/path/with/delimiting/quotes/without/commentary",
+
+        "257 \"/path/with/quotes\"\" /inside/but/without/commentary\"",
+              "/path/with/quotes\" /inside/but/without/commentary",
+
+        "257 \"/path/with/quotes\"\" /inside/string\" and with commentary",
+              "/path/with/quotes\" /inside/string",
+
+        "257 \"/path/with/quotes\"\" /inside/string\" and with commentary that also \"contains quotes\"",
+              "/path/with/quotes\" /inside/string",
+
+        "257 \"/path/without/trailing/quote", // invalid syntax, return all after reply code prefix
+            "\"/path/without/trailing/quote",
+            
+        "257 root is current directory.", // NET-442
+             "root is current directory."
+
+    };
+    public FTPClientTest(String name) {
+        super(name);
+    }
+
+    public void testParseClient() {
+        for(int i=0; i<TESTS.length; i+=2) {
+            assertEquals("Failed to parse",TESTS[i+1], FTPClient.__parsePathname(TESTS[i]));            
+        }
+    }
+
+}
