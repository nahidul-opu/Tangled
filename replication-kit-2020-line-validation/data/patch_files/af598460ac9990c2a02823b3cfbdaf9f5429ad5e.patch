From af598460ac9990c2a02823b3cfbdaf9f5429ad5e Mon Sep 17 00:00:00 2001
From: Gary Gregory <ggregory@apache.org>
Date: Wed, 25 Jul 2018 17:27:54 -0600
Subject: [PATCH] [DBCP-516] Do not double returnObject back to the pool if
 there is a transaction context with a shared connection. Closes #17.

---
 src/changes/changes.xml                       |  3 ++
 .../dbcp2/managed/ManagedConnection.java      |  3 +-
 .../managed/TestManagedDataSourceInTx.java    | 36 +++++++++++++++++++
 3 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4ca3102d9d..422b308e90 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -70,6 +70,9 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="ggregory" type="update" issue="DBCP-515" due-to="Tom Jenkinson, Gary Gregory">
         Do not try to register synchronization when the transaction is no longer active.
       </action>
+      <action dev="ggregory" type="update" issue="DBCP-516" due-to="Tom Jenkinson, Gary Gregory">
+        Do not double returnObject back to the pool if there is a transaction context with a shared connection.
+      </action>
     </release>
     <release version="2.5.0" date="2018-07-15" description="This is a minor release, including bug fixes and enhancements.">
       <action dev="ggregory" type="update" issue="DBCP-505" due-to="Gary Gregory">
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
index 1b1f9dee5f..f9e7d1e0c9 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
@@ -105,9 +105,10 @@ private void updateTransactionStatus() throws SQLException {
             // in the transaction, replace our delegate with the enrolled connection
 
             // return current connection to the pool
+            @SuppressWarnings("resource")
             final C connection = getDelegateInternal();
             setDelegate(null);
-            if (connection != null) {
+            if (connection != null && transactionContext.getSharedConnection() != connection) {
                 try {
                     pool.returnObject(connection);
                 } catch (final Exception ignored) {
diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
index 0dbfe76313..8090cc67d1 100644
--- a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
@@ -17,6 +17,7 @@
  */
 package org.apache.commons.dbcp2.managed;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
@@ -129,6 +130,41 @@ public void afterCompletion(final int i) {
         transactionManager.commit();
     }
 
+    @Test
+    public void testDoubleReturn() throws Exception {
+        transactionManager.getTransaction().registerSynchronization(new Synchronization() {
+            private ManagedConnection<?> conn;
+
+            @Override
+            public void beforeCompletion() {
+                try {
+                    conn = (ManagedConnection<?>) ds.getConnection();
+                    assertNotNull(conn);
+                } catch (final SQLException e) {
+                    fail("Could not get connection");
+                }
+            }
+
+            @Override
+            public void afterCompletion(final int i) {
+                final int numActive = pool.getNumActive();
+                try {
+                    conn.checkOpen();
+                } catch (final Exception e) {
+                    // Ignore
+                }
+                assertEquals(numActive, pool.getNumActive());
+                try {
+                    conn.close();
+                } catch (final Exception e) {
+                    fail("Should have been able to close the connection");
+                }
+                // TODO Requires DBCP-515 assertTrue(numActive -1 == pool.getNumActive());
+            }
+        });
+        transactionManager.commit();
+    }
+
     @Override
     @Test
     public void testHashCode() throws Exception {
