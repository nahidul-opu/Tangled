From d4f978ddd58fc47f472d0dbac79b4b96ca1453df Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Tue, 17 Jun 2014 16:30:35 +0000
Subject: [PATCH] MATH-1129 Fix wrong sorting in the presence of NaN.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1603217 13f79535-47bb-0310-9956-ffa450edef68
---
 .../stat/descriptive/rank/Percentile.java     | 12 ++++++--
 .../DescriptiveStatisticsTest.java            | 30 +++++++++++++++++++
 2 files changed, 39 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
index db447aa8e4..15631cf9e4 100644
--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
@@ -440,12 +440,18 @@ private int partition(final double[] work, final int begin, final int end, final
      * @param end index after the last element of the slice to sort
      */
     private void insertionSort(final double[] work, final int begin, final int end) {
+        // Arrays.sort(work, begin, end); // Would also fix MATH-1129
         for (int j = begin + 1; j < end; j++) {
             final double saved = work[j];
             int i = j - 1;
-            while ((i >= begin) && (saved < work[i])) {
-                work[i + 1] = work[i];
-                i--;
+            while (i >= begin) {
+                final double wi = work[i];
+                if (saved < wi || Double.isNaN(wi)) {
+                    work[i + 1] = wi;
+                    i--;
+                } else {
+                    break;
+                }
             }
             work[i + 1] = saved;
         }
diff --git a/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java b/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java
index 65b306b7d4..f1131c272d 100644
--- a/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java
+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java
@@ -246,6 +246,36 @@ public void testSummaryConsistency() {
         }
     }
 
+    @Test
+    public void testMath1129(){
+        final double[] data = new double[] {
+            -0.012086732064244697,
+            -0.24975668704012527,
+            0.5706168483164684,
+            -0.322111769955327,
+            0.24166759508327315,
+            Double.NaN,
+            0.16698443218942854,
+            -0.10427763937565114,
+            -0.15595963093172435,
+            -0.028075857595882995,
+            -0.24137994506058857,
+            0.47543170476574426,
+            -0.07495595384947631,
+            0.37445697625436497,
+            -0.09944199541668033
+        };
+
+        final DescriptiveStatistics ds = new DescriptiveStatistics(data);
+
+        final double t = ds.getPercentile(75);
+        final double o = ds.getPercentile(25);
+
+        final double iqr = t - o;
+        // System.out.println(String.format("25th percentile %s 75th percentile %s", o, t));
+        Assert.assertTrue(iqr >= 0);
+    }
+
     public void checkremoval(DescriptiveStatistics dstat, int wsize,
                              double mean1, double mean2, double mean3) {
 
