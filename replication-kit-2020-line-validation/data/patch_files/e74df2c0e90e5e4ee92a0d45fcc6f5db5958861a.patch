From e74df2c0e90e5e4ee92a0d45fcc6f5db5958861a Mon Sep 17 00:00:00 2001
From: "Bruno P. Kinoshita" <kinow@apache.org>
Date: Fri, 19 May 2017 06:41:16 +0000
Subject: [PATCH] BCEL-289: iterate through parameter annotation entries using
 the right limit

This closes #13



git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1795584 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/bcel/generic/MethodGen.java    |  6 ++---
 .../bcel/generic/MethodGenTestCase.java       | 25 +++++++++++++++++++
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/bcel/generic/MethodGen.java b/src/main/java/org/apache/bcel/generic/MethodGen.java
index 178ddc44d9..1d2b82ceee 100644
--- a/src/main/java/org/apache/bcel/generic/MethodGen.java
+++ b/src/main/java/org/apache/bcel/generic/MethodGen.java
@@ -1146,11 +1146,11 @@ private void ensureExistingParameterAnnotationsUnpacked()
                 } else {
                     paramAnnInvisAttr = rpa;
                 }
-                for (int j = 0; j < arg_types.length; j++)
+                final ParameterAnnotationEntry[] parameterAnnotationEntries = rpa.getParameterAnnotationEntries();
+                for (int j = 0; j < parameterAnnotationEntries.length; j++)
                 {
                     // This returns Annotation[] ...
-                    final ParameterAnnotationEntry immutableArray = rpa
-                            .getParameterAnnotationEntries()[j];
+                    final ParameterAnnotationEntry immutableArray = rpa.getParameterAnnotationEntries()[j];
                     // ... which needs transforming into an AnnotationGen[] ...
                     final List<AnnotationEntryGen> mutable = makeMutableVersion(immutableArray.getAnnotationEntries());
                     // ... then add these to any we already know about
diff --git a/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java b/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java
index 4f08099928..3775617259 100644
--- a/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java
+++ b/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java
@@ -18,6 +18,7 @@
 package org.apache.bcel.generic;
 
 import java.util.Arrays;
+import java.util.List;
 
 import org.apache.bcel.Repository;
 import org.apache.bcel.classfile.JavaClass;
@@ -35,6 +36,20 @@ public void bar() {
         }
     }
 
+    @interface A {        
+    }
+
+    @interface B {
+    }
+
+    public static class Bar {
+        public class Inner {
+            public Inner(@A Object a, @B Object b) {
+                
+            }
+        }
+    }
+
     private MethodGen getMethod(final Class<?> cls, final String name) throws ClassNotFoundException {
         final JavaClass jc = Repository.lookupClass(cls);
         final ConstantPoolGen cp = new ConstantPoolGen(jc.getConstantPool());
@@ -89,4 +104,14 @@ public void testRemoveLocalVariables() throws Exception {
         assertNull("scope start", lv.getStart());
         assertNull("scope end", lv.getEnd());
     }
+
+    public void testAnnotationsAreUnpacked() throws Exception {
+        final JavaClass jc = Repository.lookupClass(Bar.Inner.class);
+        final ClassGen cg = new ClassGen(jc);
+        final MethodGen mg = new MethodGen(cg.getMethodAt(0), cg.getClassName(), cg.getConstantPool());
+        final List<AnnotationEntryGen> firstParamAnnotations = mg.getAnnotationsOnParameter(0);
+        assertEquals("Wrong number of annotations in the first parameter", 1, firstParamAnnotations.size());
+        final List<AnnotationEntryGen> secondParamAnnotations = mg.getAnnotationsOnParameter(1);
+        assertEquals("Wrong number of annotations in the second parameter", 1, secondParamAnnotations.size());
+    }
 }
