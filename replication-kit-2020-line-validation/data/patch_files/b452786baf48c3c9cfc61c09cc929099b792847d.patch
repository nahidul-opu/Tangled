From b452786baf48c3c9cfc61c09cc929099b792847d Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 27 Jan 2010 06:43:50 +0000
Subject: [PATCH] [CONFIGURATION-404] DefaultConfigurationKey.KeyIterator no
 longer throws a NumberFormatException if a key contains brackets, but no
 valid index value. Thanks to Rob Walker for the patch.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@903550 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tree/DefaultConfigurationKey.java         | 26 ++++++++++++-------
 .../TestHierarchicalConfiguration.java        | 10 +++++++
 .../tree/TestDefaultConfigurationKey.java     | 19 ++++++++++++++
 xdocs/changes.xml                             |  6 +++++
 4 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/tree/DefaultConfigurationKey.java b/src/java/org/apache/commons/configuration/tree/DefaultConfigurationKey.java
index 9225457b71..c51ed21f80 100644
--- a/src/java/org/apache/commons/configuration/tree/DefaultConfigurationKey.java
+++ b/src/java/org/apache/commons/configuration/tree/DefaultConfigurationKey.java
@@ -823,20 +823,26 @@ private boolean checkIndex(String key)
         {
             boolean result = false;
 
-            int idx = key.lastIndexOf(getExpressionEngine().getIndexStart());
-            if (idx > 0)
+            try
             {
-                int endidx = key.indexOf(getExpressionEngine().getIndexEnd(),
-                        idx);
-
-                if (endidx > idx + 1)
+                int idx = key.lastIndexOf(getExpressionEngine().getIndexStart());
+                if (idx > 0)
                 {
-                    indexValue = Integer.parseInt(key
-                            .substring(idx + 1, endidx));
-                    current = key.substring(0, idx);
-                    result = true;
+                    int endidx = key.indexOf(getExpressionEngine().getIndexEnd(),
+                            idx);
+    
+                    if (endidx > idx + 1)
+                    {
+                        indexValue = Integer.parseInt(key.substring(idx + 1, endidx));
+                        current = key.substring(0, idx);
+                        result = true;
+                    }
                 }
             }
+            catch (NumberFormatException nfe)
+            {
+                result = false;
+            }
 
             return result;
         }
diff --git a/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java b/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
index 0b9854fcf1..84a43ad9c5 100644
--- a/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
@@ -1005,6 +1005,16 @@ public void testGetRootAfterSetRootNode()
         assertEquals("Wrong number of children", 2, oldRoot.getChildrenCount());
     }
 
+    /**
+     * Tests whether keys that contains brackets can be used.
+     */
+    public void testGetPropertyKeyWithBrackets()
+    {
+        final String key = "test.directory.platform(x86)";
+        config.addProperty(key, "C:\\Temp");
+        assertEquals("Wrong property value", "C:\\Temp", config.getString(key));
+    }
+
 	/**
      * Helper method for testing the getKeys(String) method.
      *
diff --git a/src/test/org/apache/commons/configuration/tree/TestDefaultConfigurationKey.java b/src/test/org/apache/commons/configuration/tree/TestDefaultConfigurationKey.java
index 6e425dba4a..88cdde1f0f 100644
--- a/src/test/org/apache/commons/configuration/tree/TestDefaultConfigurationKey.java
+++ b/src/test/org/apache/commons/configuration/tree/TestDefaultConfigurationKey.java
@@ -433,6 +433,25 @@ public void testIterateWithoutEscapeDelimiter()
         assertFalse("Too many parts", kit.hasNext());
     }
 
+    /**
+     * Tests whether a key with brackets in it can be iterated over.
+     */
+    public void testIterateWithBrackets()
+    {
+        key.append("directory.platform(x86).path");
+        DefaultConfigurationKey.KeyIterator kit = key.iterator();
+        String part = kit.nextKey();
+        assertEquals("Wrong part 1", "directory", part);
+        assertFalse("Has index 1", kit.hasIndex());
+        part = kit.nextKey();
+        assertEquals("Wrong part 2", "platform(x86)", part);
+        assertFalse("Has index 2", kit.hasIndex());
+        part = kit.nextKey();
+        assertEquals("Wrong part 3", "path", part);
+        assertFalse("Has index 3", kit.hasIndex());
+        assertFalse("Too many elements", kit.hasNext());
+    }
+
     /**
      * Tests iterating over an attribute key that has an index.
      */
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 9523a991e4..e0a6c99346 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -27,6 +27,12 @@
         XMLPropertyListConfiguration no longer throws a ConfigurationException
         if the file to be loaded does not have an outer dict element.
       </action>
+      <action dev="oheger" type="fix" issue="CONFIGURATION-404" due-to="Rob Walker">
+        The default expression engine used by hierarchical configurations used to
+        throw a NumberFormatException if invalid indices were used in property
+        keys. This has been fixed. As a side effect brackets can now be used in
+        property keys.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-403">
         When an empty XMLConfiguration was saved and reloaded the root element
         was assigned an empty text value. Because of this isEmpty() returned
