From 5292a12753c590a62a21f991057db3c4ed5d3775 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 13 Aug 2015 22:04:00 +0000
Subject: [PATCH] BCEL-110 Problem with JAXB if the bcel classloader is used
 Remove the problematic class

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1695788 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   1 +
 .../commons/bcel6/util/ClassLoader.java       | 189 ------------------
 2 files changed, 1 insertion(+), 189 deletions(-)
 delete mode 100644 src/main/java/org/apache/commons/bcel6/util/ClassLoader.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 5e9f84f006..dbadcae48e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -63,6 +63,7 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="6.0" date="TBA" description="Major release with Java 7 and 8 support">
+      <action issue="BCEL-110" type="fix">Problem with JAXB if the bcel classloader is used</action>
       <action issue="BCEL-201" type="update">modify several toString methods to make output similar to "javap"</action>
       <action issue="BCEL-205" type="update">add javadoc comments to LineNumber.java and LineNumberTable.java</action>
       <action issue="BCEL-208" type="fix">Need to check for an empty InstructionList</action>
diff --git a/src/main/java/org/apache/commons/bcel6/util/ClassLoader.java b/src/main/java/org/apache/commons/bcel6/util/ClassLoader.java
deleted file mode 100644
index 8dc1a42808..0000000000
--- a/src/main/java/org/apache/commons/bcel6/util/ClassLoader.java
+++ /dev/null
@@ -1,189 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.commons.bcel6.util;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.util.Hashtable;
-
-import org.apache.commons.bcel6.Constants;
-import org.apache.commons.bcel6.classfile.ClassParser;
-import org.apache.commons.bcel6.classfile.ConstantClass;
-import org.apache.commons.bcel6.classfile.ConstantPool;
-import org.apache.commons.bcel6.classfile.ConstantUtf8;
-import org.apache.commons.bcel6.classfile.JavaClass;
-import org.apache.commons.bcel6.classfile.Utility;
-
-/**
- * <p>Drop in replacement for the standard class loader of the JVM. You can use it
- * in conjunction with the JavaWrapper to dynamically modify/create classes
- * as they're requested.</p>
- *
- * <p>This class loader recognizes special requests in a distinct
- * format, i.e., when the name of the requested class contains with
- * "$$BCEL$$" it calls the createClass() method with that name
- * (everything bevor the $$BCEL$$ is considered to be the package
- * name. You can subclass the class loader and override that
- * method. "Normal" classes class can be modified by overriding the
- * modifyClass() method which is called just before defineClass().</p>
- *
- * <p>There may be a number of packages where you have to use the
- * default class loader (which may also be faster). You can define the
- * set of packages where to use the system class loader in the
- * constructor. The default value contains "java.", "sun.",
- * "javax."</p>
- *
- * @version $Id$
- * @see JavaWrapper
- * @see ClassPath
- */
-public class ClassLoader extends java.lang.ClassLoader { // TODO rename this class to reduce confusion with parent
-
-    private static final String BCEL_TOKEN = "$$BCEL$$";
-
-    private static final String[] DEFAULT_IGNORED_PACKAGES = {
-            "java.", "javax.", "sun."
-    };
-
-    private final Hashtable<String, Class<?>> classes = new Hashtable<String, Class<?>>(); // Hashtable is synchronized thus thread-safe
-    private final String[] ignored_packages;
-    private Repository repository = SyntheticRepository.getInstance();
-
-
-    /** Ignored packages are by default ( "java.", "sun.",
-     * "javax."), i.e. loaded by system class loader
-     */
-    public ClassLoader() {
-        this(DEFAULT_IGNORED_PACKAGES);
-    }
-
-
-    /** @param deferTo delegate class loader to use for ignored packages
-     */
-    public ClassLoader(java.lang.ClassLoader deferTo) {
-        super(deferTo);
-        this.ignored_packages = DEFAULT_IGNORED_PACKAGES;
-        this.repository = new ClassLoaderRepository(deferTo);
-    }
-
-
-    /** @param ignored_packages classes contained in these packages will be loaded
-     * with the system class loader
-     */
-    public ClassLoader(String[] ignored_packages) {
-        this.ignored_packages = ignored_packages;
-    }
-
-
-    /** @param ignored_packages classes contained in these packages will be loaded
-     * with the system class loader
-     * @param deferTo delegate class loader to use for ignored packages
-     */
-    public ClassLoader(java.lang.ClassLoader deferTo, String[] ignored_packages) {
-        this(ignored_packages);
-        this.repository = new ClassLoaderRepository(deferTo);
-    }
-
-    @Override
-    protected Class<?> loadClass( String class_name, boolean resolve ) throws ClassNotFoundException {
-        Class<?> cl = null;
-        /* First try: lookup hash table.
-         */
-        if ((cl = classes.get(class_name)) == null) {
-            /* Second try: Load system class using system class loader. You better
-             * don't mess around with them.
-             */
-            for (String ignored_package : ignored_packages) {
-                if (class_name.startsWith(ignored_package)) {
-                    cl = getParent().loadClass(class_name);
-                    break;
-                }
-            }
-            if (cl == null) {
-                JavaClass clazz = null;
-                /* Third try: Special request?
-                 */
-                if (class_name.contains(BCEL_TOKEN)) {
-                    clazz = createClass(class_name);
-                } else { // Fourth try: Load classes via repository
-                    if ((clazz = repository.loadClass(class_name)) != null) {
-                        clazz = modifyClass(clazz);
-                    } else {
-                        throw new ClassNotFoundException(class_name);
-                    }
-                }
-                if (clazz != null) {
-                    byte[] bytes = clazz.getBytes();
-                    cl = defineClass(class_name, bytes, 0, bytes.length);
-                } else {
-                    cl = Class.forName(class_name);
-                }
-            }
-            if (resolve) {
-                resolveClass(cl);
-            }
-        }
-        classes.put(class_name, cl);
-        return cl;
-    }
-
-
-    /** Override this method if you want to alter a class before it gets actually
-     * loaded. Does nothing by default.
-     */
-    protected JavaClass modifyClass( JavaClass clazz ) {
-        return clazz;
-    }
-
-
-    /** 
-     * Override this method to create you own classes on the fly. The
-     * name contains the special token $$BCEL$$. Everything before that
-     * token is considered to be a package name. You can encode your own
-     * arguments into the subsequent string. You must ensure however not
-     * to use any "illegal" characters, i.e., characters that may not
-     * appear in a Java class name too<br>
-     *
-     * The default implementation interprets the string as a encoded compressed
-     * Java class, unpacks and decodes it with the Utility.decode() method, and
-     * parses the resulting byte array and returns the resulting JavaClass object.
-     *
-     * @param class_name compressed byte code with "$$BCEL$$" in it
-     */
-    protected JavaClass createClass( String class_name ) {
-        int index = class_name.indexOf(BCEL_TOKEN);
-        String real_name = class_name.substring(index + BCEL_TOKEN.length());
-        JavaClass clazz = null;
-        try {
-            byte[] bytes = Utility.decode(real_name, true);
-            ClassParser parser = new ClassParser(new ByteArrayInputStream(bytes), "foo");
-            clazz = parser.parse();
-        } catch (IOException e) {
-            e.printStackTrace();
-            return null;
-        }
-        // Adapt the class name to the passed value
-        ConstantPool cp = clazz.getConstantPool();
-        ConstantClass cl = (ConstantClass) cp.getConstant(clazz.getClassNameIndex(),
-                Constants.CONSTANT_Class);
-        ConstantUtf8 name = (ConstantUtf8) cp.getConstant(cl.getNameIndex(),
-                Constants.CONSTANT_Utf8);
-        name.setBytes(class_name.replace('.', '/'));
-        return clazz;
-    }
-}
