From 2b9dd184be2aa29b7876b15436e9967a1683d8e1 Mon Sep 17 00:00:00 2001
From: Bernd Eckenfels <ecki@apache.org>
Date: Sun, 18 May 2014 03:25:55 +0000
Subject: [PATCH] [VFS-338][Local][Tests] Avoid IndexOutOfBoundsException when
 validating local file URIs.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1595560 13f79535-47bb-0310-9956-ffa450edef68
---
 .../provider/local/WindowsFileNameParser.java |   2 +-
 .../local/test/LocalProviderTestCase.java     |   6 +
 .../local/test/WindowsFileNameTests.java      | 110 ++++++++++++++++++
 src/changes/changes.xml                       |   3 +
 4 files changed, 120 insertions(+), 1 deletion(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs2/provider/local/test/WindowsFileNameTests.java

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/WindowsFileNameParser.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/WindowsFileNameParser.java
index c0ef028b7b..882b75cd64 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/WindowsFileNameParser.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/WindowsFileNameParser.java
@@ -59,7 +59,7 @@ private String extractWindowsRootPrefix(final String uri,
         for (; startPos < maxlen && name.charAt(startPos) == '/'; startPos++)
         {
         }
-        if (startPos == maxlen && name.length() > startPos && name.charAt(startPos + 1) == '/')
+        if (startPos == maxlen && name.length() > (startPos + 1) && name.charAt(startPos + 1) == '/')
         {
             // Too many '/'
             throw new FileSystemException("vfs.provider.local/not-absolute-file-name.error", uri);
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
index f8323b77af..9bd49de40b 100644
--- a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
@@ -27,6 +27,7 @@
 import org.apache.commons.vfs2.test.PermissionsTests;
 import org.apache.commons.vfs2.test.ProviderTestConfig;
 import org.apache.commons.vfs2.test.ProviderTestSuite;
+import org.apache.commons.vfs2.util.Os;
 
 /**
  * Tests for the local file system.
@@ -47,6 +48,11 @@ public static Test suite() throws Exception
         testSuite.addTests(UrlTests.class);
         testSuite.addTests(PermissionsTests.class);
 
+        if (Os.isFamily(Os.OS_FAMILY_WINDOWS))
+        {
+            testSuite.addTests(WindowsFileNameTests.class);
+        }
+
         return testSuite;
     }
 
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/WindowsFileNameTests.java b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/WindowsFileNameTests.java
new file mode 100644
index 0000000000..ea858c9c2b
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/WindowsFileNameTests.java
@@ -0,0 +1,110 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2.provider.local.test;
+
+import org.apache.commons.vfs2.FileName;
+import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.provider.local.WindowsFileName;
+import org.apache.commons.vfs2.test.AbstractProviderTestCase;
+
+/**
+ * Additional naming tests for local file system.
+ * <p>
+ * Only executed on Windows O/S.
+ */
+public class WindowsFileNameTests
+    extends AbstractProviderTestCase
+{
+    public void testWindowsRoots() throws Exception
+    {
+        // valid URI forms of the filesystem root
+        String[] tests = new String[] { "file:///C:/", "file://C:/", "file:/C:/", "file:C:/" };
+
+        for(String name : tests)
+        {
+            FileName fn = getManager().resolveFile(name).getName();
+
+            // the following tests work for Windows file names only
+            assertSame(WindowsFileName.class, fn.getClass());
+
+            // all should result in the same FileName
+            assertEquals("file:///C:/", fn.toString());
+            assertEquals("/", fn.getPath());
+            assertEquals("/", fn.getPathDecoded());
+            assertEquals("file:///C:/", fn.getRootURI());
+            assertEquals("file:///C:/", fn.getFriendlyURI());
+
+            assertEquals("file:///C:/", fn.getRoot().toString());
+
+            assertEquals("", fn.getExtension());
+            assertEquals("", fn.getBaseName());
+        }
+    }
+
+    public void testWindowsWrongRoots() throws Exception
+    {
+        String[] tests = new String[] { "file:///C:", "file://C:", "file:/C:", "file:C:" };
+
+        for(String name : tests)
+        {
+            try
+            {
+                FileName fn = getManager().resolveFile(name).getName();
+                fail("should not accept root " + name);
+            }
+            catch (FileSystemException ex)
+            {
+                assertEquals("vfs.provider/invalid-absolute-uri.error", ex.getCode());
+                assertTrue(ex.toString().indexOf(name) >= 0);
+            }
+        }
+    }
+
+    public void testWindowsFilenameUNCStartError() throws Exception
+    {
+        try
+        {
+            final String FILE = "file://///";
+            FileObject fo = getManager().resolveFile(FILE);
+            fail("Windows File Parser should not allow " + FILE + " " + fo);
+        }
+        catch(FileSystemException ex)
+        {
+            assertEquals("Exception code", "vfs.provider/invalid-absolute-uri.error", ex.getCode());
+            ex = (FileSystemException)ex.getCause();
+            assertEquals("Exception code", "vfs.provider.local/missing-share-name.error", ex.getCode());
+        }
+    }
+
+    public void testWindowsFilenameParserError() throws Exception
+    {
+        // check VFS-338 with 2+4 slashes we want a dedicated error
+        try
+        {
+            final String FILE = "file://////";
+            FileObject fo = getManager().resolveFile(FILE);
+            fail("Windows File Parser should not allow " + FILE + " " + fo);
+        }
+        catch(FileSystemException ex)
+        {
+            assertEquals("Exception code", "vfs.provider/invalid-absolute-uri.error", ex.getCode());
+            ex = (FileSystemException)ex.getCause();
+            assertEquals("Exception code", "vfs.provider.local/not-absolute-file-name.error", ex.getCode());
+        }
+    }
+}
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 1c60f5baae..35fd26188e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -26,6 +26,9 @@
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
 <!--     	[Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-338" dev="ecki" type="fix" due-to="Daniel R.">
+       [Local][Tests] Avoid IndexOutOfBoundsException when validating local file URIs.
+      </action>
       <action issue="VFS-526" dev="ecki" type="update">
        [HDFS][Tests] Enable HDFS testing on Windows (remove Maven profile "hdfs")
       </action>
