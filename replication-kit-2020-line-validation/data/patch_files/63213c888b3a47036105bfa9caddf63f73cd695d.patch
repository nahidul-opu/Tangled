From 63213c888b3a47036105bfa9caddf63f73cd695d Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Thu, 4 Dec 2008 03:30:23 +0000
Subject: [PATCH] Fix fir IO-175 IOUtils.doCopyFile() issues with very large
 files and closing file input streams - thanks to David Sitsky

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@723199 13f79535-47bb-0310-9956-ffa450edef68
---
 src/java/org/apache/commons/io/FileUtils.java | 28 +++++++++++++++----
 .../apache/commons/io/FileUtilsTestCase.java  | 15 ++++++++++
 2 files changed, 37 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/commons/io/FileUtils.java b/src/java/org/apache/commons/io/FileUtils.java
index c4d582b9e82..a5852202cd4 100644
--- a/src/java/org/apache/commons/io/FileUtils.java
+++ b/src/java/org/apache/commons/io/FileUtils.java
@@ -97,6 +97,11 @@ public FileUtils() {
      */
     public static final long ONE_MB = ONE_KB * ONE_KB;
 
+    /**
+     * The number of bytes in a 50 MB.
+     */
+    private static final long FIFTY_MB = ONE_MB * 50;
+
     /**
      * The number of bytes in a gigabyte.
      */
@@ -671,16 +676,27 @@ private static void doCopyFile(File srcFile, File destFile, boolean preserveFile
             throw new IOException("Destination '" + destFile + "' exists but is a directory");
         }
 
-        FileChannel input = new FileInputStream(srcFile).getChannel();
+        FileInputStream fis = null;
+        FileOutputStream fos = null;
+        FileChannel input = null;
+        FileChannel output = null;
         try {
-            FileChannel output = new FileOutputStream(destFile).getChannel();
-            try {
-                output.transferFrom(input, 0, input.size());
-            } finally {
-                IOUtils.closeQuietly(output);
+            fis = new FileInputStream(srcFile);
+            fos = new FileOutputStream(destFile);
+            input  = fis.getChannel();
+            output = fos.getChannel();
+            long size = input.size();
+            long pos = 0;
+            long count = 0;
+            while (pos < size) {
+                count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos);
+                pos += output.transferFrom(input, pos, count);
             }
         } finally {
+            IOUtils.closeQuietly(output);
+            IOUtils.closeQuietly(fos);
             IOUtils.closeQuietly(input);
+            IOUtils.closeQuietly(fis);
         }
 
         if (srcFile.length() != destFile.length()) {
diff --git a/src/test/org/apache/commons/io/FileUtilsTestCase.java b/src/test/org/apache/commons/io/FileUtilsTestCase.java
index f06a339e5ca..3eee25ddf53 100644
--- a/src/test/org/apache/commons/io/FileUtilsTestCase.java
+++ b/src/test/org/apache/commons/io/FileUtilsTestCase.java
@@ -643,6 +643,21 @@ public void testCopyFile1() throws Exception {
             testFile1.lastModified() == destination.lastModified());*/  
     }
 
+    public void IGNOREtestCopyFileLarge() throws Exception {
+
+        File largeFile = new File(getTestDirectory(), "large.txt");
+        File destination = new File(getTestDirectory(), "copylarge.txt");
+
+        System.out.println("START:   " + new java.util.Date());
+        createFile(largeFile, FileUtils.ONE_GB);
+        System.out.println("CREATED: " + new java.util.Date());
+        FileUtils.copyFile(largeFile, destination);
+        System.out.println("COPIED:  " + new java.util.Date());
+
+        assertTrue("Check Exist", destination.exists());
+        assertTrue("Check Full copy", destination.length() == largeFile.length());
+    }
+
     public void testCopyFile2() throws Exception {
         File destination = new File(getTestDirectory(), "copy2.txt");
         
