From 01086ef5b312d7aa5ad231277950618cb93664ee Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Sat, 15 Mar 2008 23:23:48 +0000
Subject: [PATCH] Applying the latest patch from Henning's report in
 COLLECTIONS-278 that put() and putAll() don't update the getKeys() map on
 ExtendedProperties

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@637489 13f79535-47bb-0310-9956-ffa450edef68
---
 .../collections/ExtendedProperties.java       | 80 +++++++++++++++----
 .../collections/TestExtendedProperties.java   | 58 ++++++++++++++
 2 files changed, 124 insertions(+), 14 deletions(-)

diff --git a/src/java/org/apache/commons/collections/ExtendedProperties.java b/src/java/org/apache/commons/collections/ExtendedProperties.java
index 561aebcb23..8c302f8e15 100644
--- a/src/java/org/apache/commons/collections/ExtendedProperties.java
+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java
@@ -31,6 +31,7 @@
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Properties;
 import java.util.StringTokenizer;
@@ -639,7 +640,7 @@ public synchronized void load(InputStream input, String enc) throws IOException
      */
     public Object getProperty(String key) {
         // first, try to get from the 'user value' store
-        Object obj = this.get(key);
+        Object obj = super.get(key);
 
         if (obj == null) {
             // if there isn't a value there, get it from the
@@ -705,7 +706,7 @@ private void addPropertyDirect(String key, Object value) {
         if (!containsKey(key)) {
             keysAsListed.add(key);
         }
-        put(key, value);
+        super.put(key, value);
     }
 
     /**
@@ -727,7 +728,7 @@ private void addPropertyInternal(String key, Object value) {
             List values = new Vector(2);
             values.add(current);
             values.add(value);
-            put(key, values);
+            super.put(key, values);
             
         } else if (current instanceof List) {
             // already a list - just add the new token
@@ -738,7 +739,7 @@ private void addPropertyInternal(String key, Object value) {
             if (!containsKey(key)) {
                 keysAsListed.add(key);
             }
-            put(key, value);
+            super.put(key, value);
         }
     }
 
@@ -831,7 +832,7 @@ public void clearProperty(String key) {
                     break;
                 }
             }
-            remove(key);
+            super.remove(key);
         }
     }
 
@@ -1090,7 +1091,7 @@ public Vector getVector(String key, Vector defaultValue) {
         } else if (value instanceof String) {
             Vector values = new Vector(1);
             values.add(value);
-            put(key, values);
+            super.put(key, values);
             return values;
             
         } else if (value == null) {
@@ -1142,7 +1143,7 @@ public List getList(String key, List defaultValue) {
         } else if (value instanceof String) {
             List values = new ArrayList(1);
             values.add(value);
-            put(key, values);
+            super.put(key, values);
             return values;
             
         } else if (value == null) {
@@ -1208,7 +1209,7 @@ public Boolean getBoolean(String key, Boolean defaultValue) {
         } else if (value instanceof String) {
             String s = testBoolean((String) value);
             Boolean b = new Boolean(s);
-            put(key, b);
+            super.put(key, b);
             return b;
             
         } else if (value == null) {
@@ -1302,7 +1303,7 @@ public Byte getByte(String key, Byte defaultValue) {
             
         } else if (value instanceof String) {
             Byte b = new Byte((String) value);
-            put(key, b);
+            super.put(key, b);
             return b;
             
         } else if (value == null) {
@@ -1372,7 +1373,7 @@ public Short getShort(String key, Short defaultValue) {
             
         } else if (value instanceof String) {
             Short s = new Short((String) value);
-            put(key, s);
+            super.put(key, s);
             return s;
             
         } else if (value == null) {
@@ -1470,7 +1471,7 @@ public Integer getInteger(String key, Integer defaultValue) {
             
         } else if (value instanceof String) {
             Integer i = new Integer((String) value);
-            put(key, i);
+            super.put(key, i);
             return i;
             
         } else if (value == null) {
@@ -1540,7 +1541,7 @@ public Long getLong(String key, Long defaultValue) {
             
         } else if (value instanceof String) {
             Long l = new Long((String) value);
-            put(key, l);
+            super.put(key, l);
             return l;
             
         } else if (value == null) {
@@ -1610,7 +1611,7 @@ public Float getFloat(String key, Float defaultValue) {
             
         } else if (value instanceof String) {
             Float f = new Float((String) value);
-            put(key, f);
+            super.put(key, f);
             return f;
             
         } else if (value == null) {
@@ -1680,7 +1681,7 @@ public Double getDouble(String key, Double defaultValue) {
             
         } else if (value instanceof String) {
             Double d = new Double((String) value);
-            put(key, d);
+            super.put(key, d);
             return d;
             
         } else if (value == null) {
@@ -1714,4 +1715,55 @@ public static ExtendedProperties convertProperties(Properties props) {
         return c;
     }
 
+    /**
+     * Add a new property specified by the key to the 
+     * ExtendedProperties.
+     *
+     * @param key specifying the property
+     * @param value for the property
+     * @return old value of the property
+     */
+    public Object put(Object key, Object value) {
+        String strKey = String.valueOf(key);
+        Object ret = getProperty(strKey);
+        addProperty(strKey, value);
+        return ret;
+    }
+
+    /**
+     * Add a map full of key/value pairs to the ExtendedProperties. 
+     * If the added map is an ExtendedProperties class, then the 
+     * order of the added properties is maintained. 
+     *
+     * @param map full of key/value pair data
+     */
+    public void putAll(Map map) {
+        if (map instanceof ExtendedProperties) {
+            for (Iterator it = ((ExtendedProperties) map).getKeys(); it.hasNext(); ) {
+                Object key = it.next();
+                put(key, map.get(key));
+            }
+        } else {
+            for (Iterator it = map.entrySet().iterator(); it.hasNext(); ) {
+                Map.Entry entry = (Map.Entry) it.next();
+                put(entry.getKey(), entry.getValue());
+            }
+        }
+    }
+
+
+    /**
+     * Remove the property specified by the key from the 
+     * ExtendedProperties.
+     *
+     * @param key specifying the property
+     * @return old value of the property
+     */
+    public Object remove(Object key) {
+        String strKey = String.valueOf(key);
+        Object ret = getProperty(strKey);
+        clearProperty(strKey);
+        return ret;
+    }
+
 }
diff --git a/src/test/org/apache/commons/collections/TestExtendedProperties.java b/src/test/org/apache/commons/collections/TestExtendedProperties.java
index 0dbf6f71bb..5db27cc49e 100644
--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java
+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.Properties;
 
 import junit.framework.Test;
@@ -338,4 +339,61 @@ public void testInclude() {
         assertEquals("include", b.getInclude());
     }
 
+    public void testKeySet1() {
+            ExtendedProperties p = new ExtendedProperties();
+            p.addProperty("a", "foo");
+            p.addProperty("b", "bar");
+            p.addProperty("c", "bar");
+
+            Iterator it = p.getKeys();
+            assertEquals("a", (String) it.next());
+            assertEquals("b", (String) it.next());
+            assertEquals("c", (String) it.next());
+            assertFalse(it.hasNext());
+    }
+
+    public void testKeySet2() {
+        ExtendedProperties p = new ExtendedProperties();
+        p.put("a", "foo");
+        p.put("b", "bar");
+        p.put("c", "bar");
+
+        Iterator it = p.getKeys();
+        assertEquals("a", (String) it.next());
+        assertEquals("b", (String) it.next());
+        assertEquals("c", (String) it.next());
+        assertFalse(it.hasNext());
+    }
+
+
+    public void testKeySet3() {
+        ExtendedProperties q = new ExtendedProperties();
+        q.addProperty("a", "foo");
+        q.addProperty("b", "bar");
+        q.addProperty("c", "bar");
+
+        ExtendedProperties p = new ExtendedProperties();
+        p.putAll(q);
+
+        Iterator it = p.getKeys();
+        assertEquals("a", (String) it.next());
+        assertEquals("b", (String) it.next());
+        assertEquals("c", (String) it.next());
+        assertFalse(it.hasNext());
+    }
+
+    public void testKeySet4() {
+        ExtendedProperties q = new ExtendedProperties();
+        q.addProperty("a", "foo");
+        q.addProperty("b", "bar");
+        q.addProperty("c", "bar");
+
+        q.remove("b");
+
+        Iterator it = q.getKeys();
+        assertEquals("a", (String) it.next());
+        assertEquals("c", (String) it.next());
+        assertFalse(it.hasNext());
+    }
+
 }
