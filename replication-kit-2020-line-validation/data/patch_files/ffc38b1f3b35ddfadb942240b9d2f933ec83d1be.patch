From ffc38b1f3b35ddfadb942240b9d2f933ec83d1be Mon Sep 17 00:00:00 2001
From: Benedikt Ritter <britter@apache.org>
Date: Fri, 23 Jan 2015 08:25:43 +0000
Subject: [PATCH] LANG-1081: DiffBuilder.append(String, Object left, Object
 right) does not do a left.equals(right) check. This fixes #41 from github.
 Thanks to Jonathan Baker.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1654137 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  1 +
 .../commons/lang3/builder/DiffBuilder.java    |  4 ++
 .../lang3/builder/DiffBuilderTest.java        | 58 ++++++++++++++++---
 3 files changed, 54 insertions(+), 9 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 1476d9b93e7..efb78ebee0e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -22,6 +22,7 @@
   <body>
 
   <release version="3.4" date="tba" description="tba">
+    <action issue="LANG-1081" type="fix" dev="britter" due-to="Jonathan Baker">DiffBuilder.append(String, Object left, Object right) does not do a left.equals(right) check</action>
     <action issue="LANG-1055" type="fix" dev="britter" due-to="Jonathan Baker">StrSubstitutor.replaceSystemProperties does not work consistently</action>
     <action issue="LANG-1082" type="add" dev="britter" due-to="Jonathan Baker">Add option to disable the "objectsTriviallyEqual" test in DiffBuilder</action>
     <action issue="LANG-1083" type="fix" dev="britter" due-to="Jonathan Baker">Add (T) casts to get unit tests to pass in old JDK</action>
diff --git a/src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java b/src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java
index 9f21e42dd59..bf346194140 100644
--- a/src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java
@@ -882,6 +882,10 @@ public DiffBuilder append(final String fieldName, final Object lhs,
         }
 
         // Not array type
+        if (lhs != null ? lhs.equals(rhs) : rhs.equals(lhs)) {
+            return this;
+        }
+
         diffs.add(new Diff<Object>(fieldName) {
             private static final long serialVersionUID = 1L;
 
diff --git a/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java b/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java
index ae835fef8a4..9d7c3971d64 100644
--- a/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java
+++ b/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java
@@ -19,7 +19,9 @@
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 import org.apache.commons.lang3.ArrayUtils;
 import org.hamcrest.Matcher;
@@ -321,18 +323,56 @@ public void testObject() throws Exception {
         assertEquals(class1.objectField, diff.getLeft());
         assertEquals(class2.objectField, diff.getRight());                
     }
-    
+
+    /** 
+     * Test that "left" and "right" are the same instance and are equal. 
+     */
     @Test
-    public void testObjectsEqual() throws Exception {        
-        final TypeTestClass class1 = new TypeTestClass();
-        final TypeTestClass class2 = new TypeTestClass();
-        class1.objectField = "Some string";
-        class2.objectField = "Some string";
-        final DiffResult list = class1.diff(class2);
+    public void testObjectsSameAndEqual() throws Exception {
+        final Integer sameObject = 1;
+        final TypeTestClass left = new TypeTestClass();
+        left.objectField = sameObject;
+        final TypeTestClass right = new TypeTestClass();
+        right.objectField = sameObject;
+        assertTrue(left.objectField == right.objectField);
+        assertTrue(left.objectField.equals(right.objectField));
+
+        final DiffResult list = left.diff(right);
         assertEquals(0, list.getNumberOfDiffs());
     }
-    
-    
+
+    /** 
+     * Test that "left" and "right" are the same instance but are equal. 
+     */
+    @Test
+    public void testObjectsNotSameButEqual() throws Exception {
+        final TypeTestClass left = new TypeTestClass();
+        left.objectField = new Integer(1);
+        final TypeTestClass right = new TypeTestClass();
+        right.objectField = new Integer(1);
+        assertFalse(left.objectField == right.objectField);
+        assertTrue(left.objectField.equals(right.objectField));
+
+        final DiffResult list = left.diff(right);
+        assertEquals(0, list.getNumberOfDiffs());
+    }
+
+    /** 
+     * Test that "left" and "right" are not the same instance and are not equal. 
+     */
+    @Test
+    public void testObjectsNotSameNorEqual() throws Exception {
+        final TypeTestClass left = new TypeTestClass();
+        left.objectField = 4;
+        final TypeTestClass right = new TypeTestClass();
+        right.objectField = 100;
+        assertFalse(left.objectField == right.objectField);
+        assertFalse(left.objectField.equals(right.objectField));
+
+        final DiffResult list = left.diff(right);
+        assertEquals(1, list.getNumberOfDiffs());
+    }
+
     @Test
     public void testObjectArray() throws Exception {
         final TypeTestClass class1 = new TypeTestClass();
