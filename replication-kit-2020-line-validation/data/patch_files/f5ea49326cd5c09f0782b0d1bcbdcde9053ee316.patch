From f5ea49326cd5c09f0782b0d1bcbdcde9053ee316 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 1 Oct 2014 20:12:24 +0000
Subject: [PATCH] [BEANUTILS-470] NumberConverter now deals with BigDecimal
 objects correctly.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

If a BigDecimal object is passed to the converter it is now directly returned
without trying a conversion that will cause a loss of precision.

Thanks to Tommy Tynj√§ for the patch.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@1628829 13f79535-47bb-0310-9956-ffa450edef68
---
 .../beanutils/converters/NumberConverter.java |  2 ++
 .../BigDecimalConverterTestCase.java          | 22 +++++++++++++++----
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/commons/beanutils/converters/NumberConverter.java b/src/main/java/org/apache/commons/beanutils/converters/NumberConverter.java
index a1dcc15ea..0ea89a63a 100644
--- a/src/main/java/org/apache/commons/beanutils/converters/NumberConverter.java
+++ b/src/main/java/org/apache/commons/beanutils/converters/NumberConverter.java
@@ -371,6 +371,8 @@ private <T> T toNumber(Class<?> sourceType, Class<T> targetType, Number value) {
                 return targetType.cast(new BigDecimal(value.toString()));
             } else if (value instanceof BigInteger) {
                 return targetType.cast(new BigDecimal((BigInteger)value));
+            } else if (value instanceof BigDecimal) {
+                return targetType.cast(new BigDecimal(value.toString()));
             } else {
                 return targetType.cast(BigDecimal.valueOf(value.longValue()));
             }
diff --git a/src/test/java/org/apache/commons/beanutils/converters/BigDecimalConverterTestCase.java b/src/test/java/org/apache/commons/beanutils/converters/BigDecimalConverterTestCase.java
index 8bb4b875e..df400aeee 100644
--- a/src/test/java/org/apache/commons/beanutils/converters/BigDecimalConverterTestCase.java
+++ b/src/test/java/org/apache/commons/beanutils/converters/BigDecimalConverterTestCase.java
@@ -20,7 +20,6 @@
 import java.math.BigDecimal;
 
 import junit.framework.TestSuite;
-
 import org.apache.commons.beanutils.Converter;
 
 
@@ -91,7 +90,9 @@ public void testSimpleConversion() throws Exception {
             "from Integer",
             "from Long",
             "from Float",
-            "from Double"
+            "from Double",
+            "from BigDecimal",
+            "from BigDecimal extension"
         };
 
         Object[] input = {
@@ -105,7 +106,9 @@ public void testSimpleConversion() throws Exception {
             new Integer(9),
             new Long(10),
             new Float("11.1"),
-            new Double("12.2")
+            new Double("12.2"),
+            new BigDecimal("3200.11"),
+            new ExtendingBigDecimal("3200.11")
         };
 
         BigDecimal[] expected = {
@@ -119,7 +122,9 @@ public void testSimpleConversion() throws Exception {
             new BigDecimal("9"),
             new BigDecimal("10"),
             new BigDecimal("11.1"),
-            new BigDecimal("12.2")
+            new BigDecimal("12.2"),
+            new BigDecimal("3200.11"),
+            new BigDecimal("3200.11")
         };
 
         for(int i=0;i<expected.length;i++) {
@@ -134,5 +139,14 @@ public void testSimpleConversion() throws Exception {
         }
     }
 
+    /**
+     * A class derived from {@code BigDecimal} used for testing whether
+     * derived number classes are handled correctly.
+     */
+    private class ExtendingBigDecimal extends BigDecimal {
+        private ExtendingBigDecimal(String val) {
+            super(val);
+        }
+    }
 }
 
