From 8f28a93ab1933356496a2fce1d7a6cd39a0dca50 Mon Sep 17 00:00:00 2001
From: Rory Winston <rwinston@apache.org>
Date: Sun, 27 Apr 2008 22:08:53 +0000
Subject: [PATCH] NET-216

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@652024 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/net/ftp/FTPSClient.java    | 39 ++++++++++++++-----
 1 file changed, 29 insertions(+), 10 deletions(-)

diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
index f779cb7fa..520b9ab39 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
@@ -95,7 +95,6 @@ public class FTPSClient extends FTPClient {
     public FTPSClient() throws NoSuchAlgorithmException {
         this.protocol = DEFAULT_PROTOCOL;
         this.isImplicit = false;
-        context = SSLContext.getInstance(protocol);
     }
 
     /**
@@ -107,7 +106,6 @@ public FTPSClient() throws NoSuchAlgorithmException {
     public FTPSClient(boolean isImplicit) throws NoSuchAlgorithmException {
         this.protocol = DEFAULT_PROTOCOL;
         this.isImplicit = isImplicit;
-        context = SSLContext.getInstance(protocol);
     }
 
     /**
@@ -119,7 +117,6 @@ public FTPSClient(boolean isImplicit) throws NoSuchAlgorithmException {
     public FTPSClient(String protocol) throws NoSuchAlgorithmException {
         this.protocol = protocol;
         this.isImplicit = false;
-        context = SSLContext.getInstance(protocol);
     }
 
     /**
@@ -133,7 +130,6 @@ public FTPSClient(String protocol, boolean isImplicit)
             throws NoSuchAlgorithmException {
         this.protocol = protocol;
         this.isImplicit = isImplicit;
-        context = SSLContext.getInstance(protocol);
     }
 
 
@@ -192,6 +188,28 @@ private void execAUTH() throws SSLException, IOException {
         }
     }
 
+    /**
+     * Performs a lazy init of the SSL context 
+     * @throws IOException 
+     */
+    private void initSslContext() throws IOException {
+        if(context == null) {
+            try  {
+                context = SSLContext.getInstance(protocol);
+    
+                context.init(new KeyManager[] { getKeyManager() } , new TrustManager[] { getTrustManager() } , null);
+            } catch (KeyManagementException e) {
+                IOException ioe = new IOException("Could not initialize SSL context");
+                ioe.initCause(e);
+                throw ioe;
+            } catch (NoSuchAlgorithmException e) {
+                IOException ioe = new IOException("Could not initialize SSL context");
+                ioe.initCause(e);
+                throw ioe;
+            }
+        }
+    }
+    
     /**
      * SSL/TLS negotiation. Acquires an SSL socket of a control 
      * connection and carries out handshake processing.
@@ -201,11 +219,7 @@ private void sslNegotiation() throws IOException {
         // Evacuation not ssl socket.
         planeSocket = _socket_;
         
-        try {
-			context.init(new KeyManager[] { getKeyManager() } , new TrustManager[] { getTrustManager() } , null);
-		} catch (KeyManagementException e) {
-			e.printStackTrace();
-		}
+        initSslContext();
 
         SSLSocketFactory ssf = context.getSocketFactory();
         String ip = _socket_.getInetAddress().getHostAddress();
@@ -414,7 +428,12 @@ public void execPROT(String prot) throws SSLException, IOException {
             setServerSocketFactory(null);
         } else {
             setSocketFactory(new FTPSSocketFactory(context));
-            setServerSocketFactory(SSLServerSocketFactory.getDefault());
+
+            initSslContext();
+            
+            SSLServerSocketFactory ssf = context.getServerSocketFactory();
+
+            setServerSocketFactory(ssf);
         }
     }
 
