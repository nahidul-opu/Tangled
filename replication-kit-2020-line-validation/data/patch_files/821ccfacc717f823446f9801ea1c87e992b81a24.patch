From 821ccfacc717f823446f9801ea1c87e992b81a24 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Sat, 17 Mar 2012 20:10:46 +0000
Subject: [PATCH] [CONFIGURATION-487] DataConfiguration.get() now also works
 for data types that do not require a type conversion.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1301990 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                             |  4 ++++
 .../commons/configuration/PropertyConverter.java    |  5 +++++
 .../configuration/TestDataConfiguration.java        | 13 +++++++++++++
 .../configuration/TestPropertyConverter.java        | 11 +++++++++++
 4 files changed, 33 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0eb65d788a..aef9eef6e1 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,10 @@
   <body>
     <release version="1.9" date="in SVN"
       description="TBD">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-487">
+        DataConfiguration.get() now also works with String properties and if no
+        data type conversion is required.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-481">
         Variable substitution in configuration sources declared in a definition
         file for DefaultConfigurationBuilder now works across multiple sources.
diff --git a/src/main/java/org/apache/commons/configuration/PropertyConverter.java b/src/main/java/org/apache/commons/configuration/PropertyConverter.java
index 52de00deb9..6f0523199f 100644
--- a/src/main/java/org/apache/commons/configuration/PropertyConverter.java
+++ b/src/main/java/org/apache/commons/configuration/PropertyConverter.java
@@ -97,6 +97,11 @@ private PropertyConverter()
      */
     static Object to(Class<?> cls, Object value, Object[] params) throws ConversionException
     {
+        if (cls.isInstance(value))
+        {
+            return value; // no conversion needed
+        }
+
         if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls))
         {
             return toBoolean(value);
diff --git a/src/test/java/org/apache/commons/configuration/TestDataConfiguration.java b/src/test/java/org/apache/commons/configuration/TestDataConfiguration.java
index a592a72b4a..405aca5dcc 100644
--- a/src/test/java/org/apache/commons/configuration/TestDataConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestDataConfiguration.java
@@ -2386,4 +2386,17 @@ public void testConversionException() throws Exception
             // expected
         }
     }
+
+    /**
+     * Tests whether a string property can be obtained through get() if no type
+     * conversion is required.
+     */
+    @Test
+    public void testGetPropertyWithoutConversion()
+    {
+        String key = "test.str";
+        String value = "someTestValue";
+        conf.addProperty(key, value);
+        assertEquals("Wrong result", value, conf.get(String.class, key));
+    }
 }
diff --git a/src/test/java/org/apache/commons/configuration/TestPropertyConverter.java b/src/test/java/org/apache/commons/configuration/TestPropertyConverter.java
index 3ed9ffa49e..0f3b48c164 100644
--- a/src/test/java/org/apache/commons/configuration/TestPropertyConverter.java
+++ b/src/test/java/org/apache/commons/configuration/TestPropertyConverter.java
@@ -338,4 +338,15 @@ public void testToEnumFromInvalidNumber()
     {
         PropertyConverter.toEnum(Integer.valueOf(-1), ENUM_CLASS);
     }
+
+    /**
+     * Tests a trivial conversion: the value has already the desired type.
+     */
+    @Test
+    public void testToNoConversionNeeded()
+    {
+        String value = "testValue";
+        assertEquals("Wrong conversion result", value,
+                PropertyConverter.to(String.class, value, null));
+    }
 }
