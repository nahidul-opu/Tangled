From b12610d35e7798c66fc1d9b0811d10aadb87569d Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Sun, 1 Dec 2013 19:17:22 +0000
Subject: [PATCH] [MATH-1068] Avoid overflow in Kendalls correlation for large
 input arrays.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1546840 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                |  3 +++
 .../math3/stat/correlation/KendallsCorrelation.java    |  7 ++++---
 .../stat/correlation/KendallsCorrelationTest.java      | 10 ++++++++++
 3 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4c4dfcc53f..5267e6f645 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -51,6 +51,9 @@ If the output is not quite correct, check for invisible trailing spaces!
   </properties>
   <body>
     <release version="3.3" date="TBD" description="TBD">
+      <action dev="tn" type="fix" issue="MATH-1068" due-to="Gal Lalouche">
+        Avoid overflow when calculating Kendall's correlation for large arrays.
+      </action>
       <action dev="erans" type="fix" issue="MATH-1067" due-to="Florian Erhard">
         Avoid infinite recursion in "Beta.regularizedBeta" (package "o.a.c.m.special");
       </action>
diff --git a/src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java b/src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java
index 1e4495ce2c..81fb39fb20 100644
--- a/src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java
+++ b/src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java
@@ -160,7 +160,7 @@ public double correlation(final double[] xArray, final double[] yArray)
         }
 
         final int n = xArray.length;
-        final int numPairs = n * (n - 1) / 2;
+        final long numPairs = n * (n - 1l) / 2l;
 
         @SuppressWarnings("unchecked")
         Pair<Double, Double>[] pairs = new Pair[n];
@@ -254,7 +254,8 @@ public int compare(Pair<Double, Double> pair1, Pair<Double, Double> pair2) {
         }
         tiedYPairs += consecutiveYTies * (consecutiveYTies - 1) / 2;
 
-        int concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps;
-        return concordantMinusDiscordant / FastMath.sqrt((numPairs - tiedXPairs) * (numPairs - tiedYPairs));
+        final long concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps;
+        final double nonTiedPairsMultiplied = (numPairs - tiedXPairs) * (double) (numPairs - tiedYPairs);
+        return concordantMinusDiscordant / FastMath.sqrt(nonTiedPairsMultiplied);
     }
 }
diff --git a/src/test/java/org/apache/commons/math3/stat/correlation/KendallsCorrelationTest.java b/src/test/java/org/apache/commons/math3/stat/correlation/KendallsCorrelationTest.java
index 88f52b6438..85723e7ed4 100644
--- a/src/test/java/org/apache/commons/math3/stat/correlation/KendallsCorrelationTest.java
+++ b/src/test/java/org/apache/commons/math3/stat/correlation/KendallsCorrelationTest.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.math3.stat.correlation;
 
+import java.util.Arrays;
+
 import org.apache.commons.math3.TestUtils;
 import org.apache.commons.math3.linear.BlockRealMatrix;
 import org.apache.commons.math3.linear.RealMatrix;
@@ -248,4 +250,12 @@ public void testBlockMatrix() {
                 new BlockRealMatrix(expected));
     }
 
+    @Test
+    public void testLargeArray() {
+        // test integer overflow detected in MATH-1068
+        double[] xArray = new double[100000];
+        Arrays.fill(xArray, 0, 2500, 1.0);
+
+        Assert.assertEquals(1.0, correlation.correlation(xArray, xArray), 1e-6);
+    }
 }
