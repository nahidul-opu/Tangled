From b7b67f404deb18cec259f51d46aa1b37b86b7356 Mon Sep 17 00:00:00 2001
From: Benedikt Ritter <britter@apache.org>
Date: Thu, 1 Jan 2015 16:40:05 +0000
Subject: [PATCH] VALIDATOR-345: ISINCheckDigit fails to reject invalid
 (non-numeric) check digits. Fix implemented by Sebb.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1648876 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                                |  2 ++
 src/changes/changes.xml                          |  3 +++
 .../routines/checkdigit/ISINCheckDigit.java      |  8 ++++++++
 .../routines/checkdigit/ISINCheckDigitTest.java  | 16 ++++++++++++++++
 4 files changed, 29 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 3c251ed9e..d0e530a33 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -60,6 +60,8 @@ BUGS FROM PREVIOUS RELEASE
  * [VALIDATOR-331] - IBANCheckDigitTest.createInvalidCodes(String[] codes) uses
                      wrong values.
  * [VALIDATOR-336] - CUSIPCheckDigit thinks invalid CUSIP is valid.
+ * [VALIDATOR-345] - ISINCheckDigit fails to reject invalid (non-numeric) check
+                     digits
  * [VALIDATOR-347] - toLowerCase() method is Locale-sensitive and should not be
                      used
  * [VALIDATOR-348] - Update TLD list to latest version (Version 2014123000)
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 3226adabe..29aa96168 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
   <release version="1.4.1" date="tba" description="1.4 Maintenance release">
+    <action issue="VALIDATOR-345" dev="sebb" type="fix" >
+      ISINCheckDigit fails to reject invalid (non-numeric) check digits
+    </action>
     <action issue="VALIDATOR-336" dev="sebb" type="fix" >
       CUSIPCheckDigit thinks invalid CUSIP is valid
     </action>
diff --git a/src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java b/src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java
index cd72efe25..cca1538a5 100644
--- a/src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java
+++ b/src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java
@@ -67,12 +67,20 @@ public ISINCheckDigit() {
      */
     protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
         StringBuffer transformed = new  StringBuffer(code.length() * 2);
+        if (includesCheckDigit) {
+            char checkDigit = code.charAt(code.length()-1); // fetch the last character
+            if (!Character.isDigit(checkDigit)){
+                throw new CheckDigitException("Invalid checkdigit["+ checkDigit+ "] in " + code);
+            }
+        }
         for (int i = 0; i < code.length(); i++) {
             int charValue = Character.getNumericValue(code.charAt(i));
             if (charValue < 0 || charValue > 35) {
                 throw new CheckDigitException("Invalid Character[" +
                         (i + 1) + "] = '" + charValue + "'");
             }
+             // this converts alphanumerics to two digits
+             // so there is no need to overload toInt()
             transformed.append(charValue);
         }
         return super.calculateModulus(transformed.toString(), includesCheckDigit);
diff --git a/src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java b/src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java
index 371a9c09c..82d6b235a 100644
--- a/src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java
@@ -48,4 +48,20 @@ protected void setUp() throws Exception {
                               };
         invalid = new String[] {"0378#3100"};
     }
+
+    private static String invalidCheckDigits[] =
+                             {"US037833100O", // proper check digit is '5', see above
+                              "BMG8571G109D", // proper check digit is '6', see above
+                              "AU0000XVGZAD", // proper check digit is '3', see above
+                              "GB000263494I", // proper check digit is '6', see above
+                              "FR000402625C", // proper check digit is '0', see above
+                              "DK000976334H", // proper check digit is '4', see above
+                              };
+
+    public void testVALIDATOR_345() {
+        for (int i = 0; i < invalidCheckDigits.length; i++) {
+            String invalidCheckDigit = invalidCheckDigits[i];
+            assertFalse("Should fail: " + invalidCheckDigit, routine.isValid(invalidCheckDigit));
+        }
+    }
 }
