From 8f9ff7f6df2cde103445b9c7df37a754dcdf7033 Mon Sep 17 00:00:00 2001
From: William Colen <colen@apache.org>
Date: Wed, 17 Aug 2011 16:38:00 +0000
Subject: [PATCH] OPENNLP-248 Fixed unit tests.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1158815 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tools/namefind/NameFinderMETest.java      | 38 +++++----
 .../namefind/NameSampleDataStreamTest.java    | 84 +++++++++----------
 2 files changed, 62 insertions(+), 60 deletions(-)

diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
index 9e41e9679..901a0f39a 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java
@@ -51,6 +51,8 @@
  * training sentences.
  */
 public class NameFinderMETest {
+  
+  private final String TYPE = "default";
 
   @Test
   public void testNameFinder() throws Exception {
@@ -65,8 +67,8 @@ public void testNameFinder() throws Exception {
     ObjectStream<NameSample> sampleStream = 
           new NameSampleDataStream(
           new PlainTextByLineStream(new InputStreamReader(in, encoding)));
-
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", sampleStream,
+    
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, sampleStream,
         Collections.<String, Object>emptyMap(), 70, 1);
 
     TokenNameFinder nameFinder = new NameFinderME(nameFinderModel);
@@ -87,7 +89,7 @@ public void testNameFinder() throws Exception {
     Span names[] = nameFinder.find(sentence);
 
     assertEquals(1, names.length);
-    assertEquals(new Span(0, 1), names[0]);
+    assertEquals(new Span(0, 1, TYPE), names[0]);
 
     sentence = new String[] {
         "Hi",
@@ -102,8 +104,8 @@ public void testNameFinder() throws Exception {
     names = nameFinder.find(sentence);
 
     assertEquals(2, names.length);
-    assertEquals(new Span(1, 2), names[0]);
-    assertEquals(new Span(4, 6), names[1]);
+    assertEquals(new Span(1, 2, TYPE), names[0]);
+    assertEquals(new Span(4, 6, TYPE), names[1]);
   }
   
   /**
@@ -125,7 +127,7 @@ public void testNameFinderWithTypes() throws Exception {
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
         new PlainTextByLineStream(new InputStreamReader(in, encoding)));
 
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", sampleStream,
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, sampleStream,
         Collections.<String, Object>emptyMap(), 70, 1);
 
     NameFinderME nameFinder = new NameFinderME(nameFinderModel);
@@ -138,8 +140,8 @@ public void testNameFinderWithTypes() throws Exception {
     Span[] names2 = nameFinder.find(sentence2);
 
     assertEquals(2, names2.length);
-    assertEquals(new Span(1, 2), names2[0]);
-    assertEquals(new Span(4, 6), names2[1]);
+    assertEquals(new Span(1, 2, "person"), names2[0]);
+    assertEquals(new Span(4, 6, "person"), names2[1]);
     assertEquals("person", names2[0].getType());
     assertEquals("person", names2[1].getType());
 
@@ -149,7 +151,7 @@ public void testNameFinderWithTypes() throws Exception {
     Span names[] = nameFinder.find(sentence);
 
     assertEquals(1, names.length);
-    assertEquals(new Span(0, 1), names[0]);
+    assertEquals(new Span(0, 1, "person"), names[0]);
     assertTrue(hasOtherAsOutcome(nameFinderModel));
   }
 
@@ -170,7 +172,7 @@ public void testOnlyWithNames() throws Exception {
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
         new PlainTextByLineStream(new InputStreamReader(in)));
 
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", 
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, 
         sampleStream, Collections.<String, Object>emptyMap(), 70, 1);
 
     NameFinderME nameFinder = new NameFinderME(nameFinderModel);
@@ -182,9 +184,9 @@ public void testOnlyWithNames() throws Exception {
 
     Span[] names1 = nameFinder.find(sentence);
 
-    assertEquals(new Span(0, 2), names1[0]);
-    assertEquals(new Span(2, 4), names1[1]);
-    assertEquals(new Span(4, 6), names1[2]);
+    assertEquals(new Span(0, 2, TYPE), names1[0]);
+    assertEquals(new Span(2, 4, TYPE), names1[1]);
+    assertEquals(new Span(4, 6, TYPE), names1[2]);
     assertTrue(!hasOtherAsOutcome(nameFinderModel));
   }
   
@@ -205,7 +207,7 @@ public void testOnlyWithNamesWithTypes() throws Exception {
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
         new PlainTextByLineStream(new InputStreamReader(in)));
 
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", 
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, 
         sampleStream, Collections.<String, Object>emptyMap(), 70, 1);
 
     NameFinderME nameFinder = new NameFinderME(nameFinderModel);
@@ -242,7 +244,7 @@ public void testOnlyWithEntitiesWithTypes() throws Exception {
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
         new PlainTextByLineStream(new InputStreamReader(in)));
 
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", 
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, 
         sampleStream, Collections.<String, Object>emptyMap(), 70, 1);
 
     NameFinderME nameFinder = new NameFinderME(nameFinderModel);
@@ -253,8 +255,8 @@ public void testOnlyWithEntitiesWithTypes() throws Exception {
 
     Span[] names1 = nameFinder.find(sentence);
 
-    assertEquals(new Span(0, 1), names1[0]);
-    assertEquals(new Span(1, 3), names1[1]);
+    assertEquals(new Span(0, 1, "location"), names1[0]);
+    assertEquals(new Span(1, 3, "person"), names1[1]);
     assertEquals("person", names1[2].getType());
     assertTrue(!hasOtherAsOutcome(nameFinderModel));
   }
@@ -295,7 +297,7 @@ public void testNameFinderWithMultipleTypes() throws Exception {
     ObjectStream<NameSample> sampleStream = new NameSampleDataStream(
         new PlainTextByLineStream(new InputStreamReader(in)));
 
-    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", "default", 
+    TokenNameFinderModel nameFinderModel = NameFinderME.train("en", TYPE, 
         sampleStream, Collections.<String, Object>emptyMap(), 70, 1);
 
     NameFinderME nameFinder = new NameFinderME(nameFinderModel);
diff --git a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
index 760e87648..93271ba64 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java
@@ -44,6 +44,11 @@
  * This is the test class for {@link NameSampleDataStream}..
  */
 public class NameSampleDataStreamTest {
+  
+  final String person = "person";
+  final String date = "date";
+  final String location = "location";
+  final String organization = "organization";
 
   /**
    * Create a string from a array section.
@@ -172,11 +177,6 @@ public void testWithNameTypes() throws Exception {
     Map<String, List<String>> names = new HashMap<String, List<String>>();
     Map<String, List<Span>> spans = new HashMap<String, List<Span>>();
     
-    final String person = "person";
-    final String date = "date";
-    final String location = "location";
-    final String organization = "organization";
-
     NameSample ns;
     while ((ns = ds.read()) != null) {
       Span[] nameSpans = ns.getNames();
@@ -211,78 +211,78 @@ public void testWithNameTypes() throws Exception {
     assertEquals(expectedLocation.length, names.get(location).size());
     assertEquals(expectedOrganization.length, names.get(organization).size());
     
-    assertEquals(new Span(5,7), spans.get(person).get(0));
+    assertEquals(new Span(5,7, person), spans.get(person).get(0));
     assertEquals(expectedPerson[0], names.get(person).get(0));
-    assertEquals(new Span(10,11 ), spans.get(person).get(1));
+    assertEquals(new Span(10,11, person), spans.get(person).get(1));
     assertEquals(expectedPerson[1], names.get(person).get(1));
-    assertEquals(new Span(29,30), spans.get(person).get(2));
+    assertEquals(new Span(29,30, person), spans.get(person).get(2));
     assertEquals(expectedPerson[2], names.get(person).get(2));
-    assertEquals(new Span(23,27 ), spans.get(person).get(3));
+    assertEquals(new Span(23,27, person), spans.get(person).get(3));
     assertEquals(expectedPerson[3], names.get(person).get(3));
-    assertEquals(new Span(1,2 ), spans.get(person).get(4));
+    assertEquals(new Span(1,2, person), spans.get(person).get(4));
     assertEquals(expectedPerson[4], names.get(person).get(4));
-    assertEquals(new Span(8,9), spans.get(person).get(5));
+    assertEquals(new Span(8,9, person), spans.get(person).get(5));
     assertEquals(expectedPerson[5], names.get(person).get(5));
-    assertEquals(new Span(0,2), spans.get(person).get(6));
+    assertEquals(new Span(0,2, person), spans.get(person).get(6));
     assertEquals(expectedPerson[6], names.get(person).get(6));
-    assertEquals(new Span(25,26), spans.get(person).get(7));
+    assertEquals(new Span(25,26, person), spans.get(person).get(7));
     assertEquals(expectedPerson[7], names.get(person).get(7));
-    assertEquals(new Span(1,2), spans.get(person).get(8));
+    assertEquals(new Span(1,2, person), spans.get(person).get(8));
     assertEquals(expectedPerson[8], names.get(person).get(8));
-    assertEquals(new Span(6,7), spans.get(person).get(9));
+    assertEquals(new Span(6,7, person), spans.get(person).get(9));
     assertEquals(expectedPerson[9], names.get(person).get(9));
-    assertEquals(new Span(14,15), spans.get(person).get(10));
+    assertEquals(new Span(14,15, person), spans.get(person).get(10));
     assertEquals(expectedPerson[10], names.get(person).get(10));
-    assertEquals(new Span(0,2), spans.get(person).get(11));
+    assertEquals(new Span(0,2, person), spans.get(person).get(11));
     assertEquals(expectedPerson[11], names.get(person).get(11));
-    assertEquals(new Span(12,13), spans.get(person).get(12));
+    assertEquals(new Span(12,13, person), spans.get(person).get(12));
     assertEquals(expectedPerson[12], names.get(person).get(12));
-    assertEquals(new Span(12,13), spans.get(person).get(13));
+    assertEquals(new Span(12,13, person), spans.get(person).get(13));
     assertEquals(expectedPerson[13], names.get(person).get(13));
 
-    assertEquals(new Span(7,8), spans.get(date).get(0));
+    assertEquals(new Span(7,8, date), spans.get(date).get(0));
     assertEquals(expectedDate[0], names.get(date).get(0));
-    assertEquals(new Span(27,28), spans.get(date).get(1));
+    assertEquals(new Span(27,28, date), spans.get(date).get(1));
     assertEquals(expectedDate[1], names.get(date).get(1));
-    assertEquals(new Span(15,16), spans.get(date).get(2));
+    assertEquals(new Span(15,16, date), spans.get(date).get(2));
     assertEquals(expectedDate[2], names.get(date).get(2));
     
-    assertEquals(new Span(0, 4), spans.get(location).get(0));
+    assertEquals(new Span(0, 4, location), spans.get(location).get(0));
     assertEquals(expectedLocation[0], names.get(location).get(0));
-    assertEquals(new Span(10,12), spans.get(location).get(1));
+    assertEquals(new Span(10,12, location), spans.get(location).get(1));
     assertEquals(expectedLocation[1], names.get(location).get(1));
-    assertEquals(new Span(28,30), spans.get(location).get(2));
+    assertEquals(new Span(28,30, location), spans.get(location).get(2));
     assertEquals(expectedLocation[2], names.get(location).get(2));
-    assertEquals(new Span(3,4), spans.get(location).get(3));
+    assertEquals(new Span(3,4, location), spans.get(location).get(3));
     assertEquals(expectedLocation[3], names.get(location).get(3));
-    assertEquals(new Span(5,7), spans.get(location).get(4));
+    assertEquals(new Span(5,7, location), spans.get(location).get(4));
     assertEquals(expectedLocation[4], names.get(location).get(4));
-    assertEquals(new Span(16,18), spans.get(location).get(5));
+    assertEquals(new Span(16,18, location), spans.get(location).get(5));
     assertEquals(expectedLocation[5], names.get(location).get(5));
-    assertEquals(new Span(1,3), spans.get(location).get(6));
+    assertEquals(new Span(1,3, location), spans.get(location).get(6));
     assertEquals(expectedLocation[6], names.get(location).get(6));
-    assertEquals(new Span(5,9), spans.get(location).get(7));
+    assertEquals(new Span(5,9, location), spans.get(location).get(7));
     assertEquals(expectedLocation[7], names.get(location).get(7));
-    assertEquals(new Span(0,2), spans.get(location).get(8));
+    assertEquals(new Span(0,2, location), spans.get(location).get(8));
     assertEquals(expectedLocation[8], names.get(location).get(8));
-    assertEquals(new Span(4,6), spans.get(location).get(9));
+    assertEquals(new Span(4,6, location), spans.get(location).get(9));
     assertEquals(expectedLocation[9], names.get(location).get(9));
-    assertEquals(new Span(10,11), spans.get(location).get(10));
+    assertEquals(new Span(10,11, location), spans.get(location).get(10));
     assertEquals(expectedLocation[10], names.get(location).get(10));
-    assertEquals(new Span(6,8), spans.get(location).get(11));
+    assertEquals(new Span(6,8, location), spans.get(location).get(11));
     assertEquals(expectedLocation[11], names.get(location).get(11));
-    assertEquals(new Span(4,6), spans.get(location).get(12));
+    assertEquals(new Span(4,6, location), spans.get(location).get(12));
     assertEquals(expectedLocation[12], names.get(location).get(12));
-    assertEquals(new Span(10,11), spans.get(location).get(13));
+    assertEquals(new Span(10,11, location), spans.get(location).get(13));
     assertEquals(expectedLocation[13], names.get(location).get(13));
-    assertEquals(new Span(12,13), spans.get(location).get(14));
+    assertEquals(new Span(12,13, location), spans.get(location).get(14));
     assertEquals(expectedLocation[14], names.get(location).get(14));
-    assertEquals(new Span(5,9), spans.get(location).get(15));
+    assertEquals(new Span(5,9, location), spans.get(location).get(15));
     assertEquals(expectedLocation[15], names.get(location).get(15));
-    assertEquals(new Span(11,12), spans.get(location).get(16));
+    assertEquals(new Span(11,12, location), spans.get(location).get(16));
     assertEquals(expectedLocation[16], names.get(location).get(16));
     
-    assertEquals(new Span(7,15), spans.get(organization).get(0));
+    assertEquals(new Span(7,15, organization), spans.get(organization).get(0));
     assertEquals(expectedOrganization[0], names.get(organization).get(0));
     
   }
@@ -364,7 +364,7 @@ public void testHtmlNameSampleParsing() throws IOException {
     assertEquals("Pest", ns.getSentence()[3]);
     assertEquals("Management", ns.getSentence()[4]);
     assertEquals("</li>", ns.getSentence()[5]);
-    assertEquals(new Span(1, 5), ns.getNames()[0]);
+    assertEquals(new Span(1, 5, organization), ns.getNames()[0]);
     
     // <li> <START:organization> Bay Cities Produce Co., Inc. <END> </li>
     ns = ds.read();
@@ -376,7 +376,7 @@ public void testHtmlNameSampleParsing() throws IOException {
     assertEquals("Co.,", ns.getSentence()[4]);
     assertEquals("Inc.", ns.getSentence()[5]);
     assertEquals("</li>", ns.getSentence()[6]);
-    assertEquals(new Span(1, 6), ns.getNames()[0]);
+    assertEquals(new Span(1, 6, organization), ns.getNames()[0]);
     
     ns = ds.read();
     assertEquals(1, ns.getSentence().length);
