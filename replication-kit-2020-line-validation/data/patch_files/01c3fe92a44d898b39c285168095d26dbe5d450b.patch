From 01c3fe92a44d898b39c285168095d26dbe5d450b Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 7 Mar 2013 16:24:37 +0000
Subject: [PATCH] COMPRESS-200 support decompressConcatenated in
 CompressorStreamFactory

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1453945 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 ++++
 .../compressors/CompressorStreamFactory.java  | 25 ++++++++++++++++---
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2eac5a9153f..6b114446631 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -168,6 +168,11 @@ The <action> type attribute can be add,update,fix,remove.
           CompressorStreamFactory can now be used without XZ for Java
           being available.
         </action>
+        <action type="add" date="2013-03-07" issue="COMPRESS-220">
+          CompressorStreamFactory has an option to create
+          decompressing streams that decompress the full input for
+          formats that support multiple concatenated streams.
+        </action>
     </release>
     <release version="1.4.1" date="2012-05-23"
              description="Release 1.4.1">
diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
index bea91bcd29a..2fa42b25ca3 100644
--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
@@ -83,6 +83,25 @@ public class CompressorStreamFactory {
      */
     public static final String XZ = "xz";
 
+    private boolean decompressConcatenated = false;
+
+    /**
+     * Whether to decompress the full input or only the first stream
+     * in formats supporting multiple concatenated input streams.
+     *
+     * <p>This setting applies to the gzip, bzip2 and xz formats only.</p>
+     *
+     * @param       decompressConcatenated
+     *                          if true, decompress until the end of the
+     *                          input; if false, stop after the first
+     *                          stream and leave the input position to point
+     *                          to the next byte after the stream
+     * @since Commons Compress 1.5
+     */
+    public void setDecompressConcatenated(boolean decompressConcatenated) {
+        this.decompressConcatenated = decompressConcatenated;
+    }
+
     /**
      * Create an compressor input stream from an input stream, autodetecting
      * the compressor type from the first few bytes of the stream. The InputStream
@@ -111,16 +130,16 @@ public CompressorInputStream createCompressorInputStream(final InputStream in)
             in.reset();
 
             if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
-                return new BZip2CompressorInputStream(in);
+                return new BZip2CompressorInputStream(in, decompressConcatenated);
             }
 
             if (GzipCompressorInputStream.matches(signature, signatureLength)) {
-                return new GzipCompressorInputStream(in);
+                return new GzipCompressorInputStream(in, decompressConcatenated);
             }
 
             if (XZUtils.isXZCompressionAvailable() &&
                 XZCompressorInputStream.matches(signature, signatureLength)) {
-                return new XZCompressorInputStream(in);
+                return new XZCompressorInputStream(in, decompressConcatenated);
             }
 
             if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
