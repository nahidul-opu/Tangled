From f11bd7cbff7ee68afa55dcc6baec97b2adaf43e1 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Sun, 19 Aug 2012 21:55:05 +0000
Subject: [PATCH] FIX: Memory leak and infinite loop in ModuleId.java
 (IVY-1362) (2nd attempt)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@1374865 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/ivy/core/module/id/ModuleId.java   | 21 +++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/ivy/core/module/id/ModuleId.java b/src/java/org/apache/ivy/core/module/id/ModuleId.java
index b0a54099a..00a1f1eec 100644
--- a/src/java/org/apache/ivy/core/module/id/ModuleId.java
+++ b/src/java/org/apache/ivy/core/module/id/ModuleId.java
@@ -17,6 +17,7 @@
  */
 package org.apache.ivy.core.module.id;
 
+import java.lang.ref.WeakReference;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -33,7 +34,7 @@
 public class ModuleId implements Comparable {
     static final String ENCODE_SEPARATOR = ":#@#:";
     
-    private static final Map/*<ModuleId, ModuleId>*/ CACHE = new WeakHashMap();
+    private static final Map/*<ModuleId, WeakReference<ModuleId>>*/ CACHE = new WeakHashMap();
 
     /**
      * Returns a ModuleId for the given organization and module name.
@@ -59,12 +60,20 @@ public static ModuleId newInstance(String org, String name) {
      *            the module id to return
      * @return a unit instance of the given module id.
      */
-    public static synchronized ModuleId intern(ModuleId moduleId) {
-        ModuleId r = (ModuleId) CACHE.get(moduleId);
-        if (r == null) {
-            r = moduleId;
-            CACHE.put(r, r);
+    public static ModuleId intern(ModuleId moduleId) {
+        ModuleId r = null;
+        
+        synchronized (CACHE) {
+            WeakReference ref = (WeakReference) CACHE.get(moduleId);
+            if (ref != null) {
+                r = (ModuleId) ref.get();
+            }
+            if (r == null) {
+                r = moduleId;
+                CACHE.put(r, new WeakReference(r));
+            }
         }
+
         return r;
     }
 
