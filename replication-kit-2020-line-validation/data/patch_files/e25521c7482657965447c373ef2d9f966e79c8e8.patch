From e25521c7482657965447c373ef2d9f966e79c8e8 Mon Sep 17 00:00:00 2001
From: Thomas Vandahl <tv@apache.org>
Date: Fri, 6 Jun 2014 13:51:01 +0000
Subject: [PATCH] Fix JCS-113: Improve error handling by bubbling up
 exceptions. Simplify code.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jcs/trunk@1600888 13f79535-47bb-0310-9956-ffa450edef68
---
 .../auxiliary/disk/jdbc/JDBCDiskCache.java    |  28 +----
 .../disk/jdbc/JDBCDiskCacheManager.java       |   8 +-
 .../JDBCDiskCacheManagerAbstractTemplate.java |  26 +++--
 .../disk/jdbc/JDBCDiskCachePoolAccess.java    |  22 ++--
 .../jdbc/JDBCDiskCachePoolAccessFactory.java  | 104 ------------------
 .../jdbc/JDBCDiskCachePoolAccessManager.java  |  92 ++++++++++++++--
 .../disk/jdbc/mysql/MySQLDiskCache.java       |   9 +-
 .../jdbc/mysql/MySQLDiskCacheManager.java     |   8 +-
 .../jdbc/mysql/MySQLDiskCacheUnitTest.java    |   9 +-
 .../MySQLTableOptimizerManualTester.java      |   6 +-
 src/changes/changes.xml                       |   3 +
 11 files changed, 146 insertions(+), 169 deletions(-)
 delete mode 100644 commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessFactory.java

diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
index 0bb4d1f29..85df7a8ac 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
@@ -116,14 +116,14 @@ public class JDBCDiskCache<K, V>
      * @param cattr
      * @param tableState
      * @param compositeCacheManager
+     * @throws SQLException if the pool access could not be set up
      */
     public JDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState,
-                          ICompositeCacheManager compositeCacheManager )
+                          ICompositeCacheManager compositeCacheManager ) throws SQLException
     {
         super( cattr );
 
         setTableState( tableState );
-
         setJdbcDiskCacheAttributes( cattr );
 
         if ( log.isInfoEnabled() )
@@ -132,7 +132,7 @@ public JDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState,
         }
 
         // This initializes the pool access.
-        setPoolAccess( initializePoolAccess( cattr, compositeCacheManager ) );
+        this.poolAccess = initializePoolAccess( cattr, compositeCacheManager );
 
         // Initialization finished successfully, so set alive to true.
         alive = true;
@@ -144,9 +144,10 @@ public JDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState,
      * @param cattr
      * @param compositeCacheManager
      * @return JDBCDiskCachePoolAccess for testing
+     * @throws SQLException if a database access error occurs
      */
     protected JDBCDiskCachePoolAccess initializePoolAccess( JDBCDiskCacheAttributes cattr,
-                                                            ICompositeCacheManager compositeCacheManager )
+                                                            ICompositeCacheManager compositeCacheManager ) throws SQLException
     {
         JDBCDiskCachePoolAccess poolAccess1 = null;
         if ( cattr.getConnectionPoolName() != null )
@@ -158,16 +159,7 @@ protected JDBCDiskCachePoolAccess initializePoolAccess( JDBCDiskCacheAttributes
         }
         else
         {
-            try
-            {
-                poolAccess1 = JDBCDiskCachePoolAccessFactory.createPoolAccess( cattr );
-            }
-            catch ( Exception e )
-            {
-                logError( getAuxiliaryCacheAttributes().getName(), "initializePoolAccess", e.getMessage() + " URL: "
-                    + getDiskLocation() );
-                log.error( "Problem getting connection.", e );
-            }
+            poolAccess1 = JDBCDiskCachePoolAccessManager.createPoolAccess( cattr );
         }
         return poolAccess1;
     }
@@ -1187,14 +1179,6 @@ protected String getDiskLocation()
         return this.jdbcDiskCacheAttributes.getUrl();
     }
 
-    /**
-     * @param poolAccess the poolAccess to set
-     */
-    protected void setPoolAccess( JDBCDiskCachePoolAccess poolAccess )
-    {
-        this.poolAccess = poolAccess;
-    }
-
     /**
      * Public so managers can access it.
      * @return the poolAccess
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManager.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManager.java
index 520ea2db3..4894ae149 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManager.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManager.java
@@ -19,6 +19,8 @@
  * under the License.
  */
 
+import java.sql.SQLException;
+
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEventLogger;
@@ -32,9 +34,6 @@
 public class JDBCDiskCacheManager
     extends JDBCDiskCacheManagerAbstractTemplate
 {
-    /** Don't change */
-    private static final long serialVersionUID = -8258856770927857896L;
-
     /** The logger. */
     private static final Log log = LogFactory.getLog( JDBCDiskCacheManager.class );
 
@@ -121,9 +120,10 @@ public <K, V> JDBCDiskCache<K, V> getCache( String cacheName )
      * @param cattr
      * @param tableState
      * @return AuxiliaryCache
+     * @throws SQLException if database operations fail
      */
     @Override
-    protected <K, V> JDBCDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState )
+    protected <K, V> JDBCDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState ) throws SQLException
     {
         JDBCDiskCache<K, V> raf;
         raf = new JDBCDiskCache<K, V>( cattr, tableState, getCompositeCacheManager() );
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerAbstractTemplate.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerAbstractTemplate.java
index bfd673052..d6c17e2ab 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerAbstractTemplate.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerAbstractTemplate.java
@@ -26,6 +26,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import java.io.IOException;
+import java.sql.SQLException;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executors;
@@ -41,14 +42,11 @@
 public abstract class JDBCDiskCacheManagerAbstractTemplate
     extends AbstractDiskCacheManager
 {
-    /** Don't change. */
-    private static final long serialVersionUID = 218557927622128905L;
-
     /** The logger. */
     private static final Log log = LogFactory.getLog( JDBCDiskCacheManagerAbstractTemplate.class );
 
-    /** Incremented on getIntance, decremented on release. */
-    protected static int clients; // TODO needs to be made private and synchronised and/or turned into AtomicInt
+    /** Incremented on getInstance, decremented on release. */
+    protected static int clients; // TODO needs to be made private and synchronized and/or turned into AtomicInt
 
     /** A map of JDBCDiskCache objects to region names. */
     private static Map<String, JDBCDiskCache<?, ?>> caches =
@@ -76,7 +74,8 @@ public abstract class JDBCDiskCacheManagerAbstractTemplate
      * @param tableState An object used by multiple processes to indicate state.
      * @return AuxiliaryCache -- a JDBCDiskCache
      */
-    protected abstract <K, V> JDBCDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState );
+    protected abstract <K, V> JDBCDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState )
+    	throws SQLException;
 
     /**
      * Creates a JDBCDiskCache for the region if one doesn't exist, else it returns the pre-created
@@ -106,10 +105,17 @@ public <K, V> JDBCDiskCache<K, V> getCache( JDBCDiskCacheAttributes cattr )
                     tableState = new TableState( cattr.getTableName() );
                 }
 
-                diskCache = createJDBCDiskCache( cattr, tableState );
-                diskCache.setCacheEventLogger( getCacheEventLogger() );
-                diskCache.setElementSerializer( getElementSerializer() );
-                caches.put( cattr.getCacheName(), diskCache );
+                try 
+                {
+					diskCache = createJDBCDiskCache( cattr, tableState );
+					diskCache.setCacheEventLogger( getCacheEventLogger() );
+					diskCache.setElementSerializer( getElementSerializer() );
+					caches.put( cattr.getCacheName(), diskCache );
+				} 
+                catch (SQLException e) 
+                {
+                    log.error( "Failed to create cache " + cattr.getCacheName(), e );
+				}
             }
         }
 
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccess.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccess.java
index 993c8f5a6..52d1b5b0c 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccess.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccess.java
@@ -118,7 +118,7 @@ public int getNumIdleInPool()
             }
             numIdle = connectionPool.getNumIdle();
         }
-        catch ( Exception e )
+        catch ( SQLException e )
         {
             log.error( e );
         }
@@ -144,7 +144,7 @@ public int getNumActiveInPool()
             }
             numActive = connectionPool.getNumActive();
         }
-        catch ( Exception e )
+        catch ( SQLException e )
         {
             log.error( e );
         }
@@ -155,7 +155,7 @@ public int getNumActiveInPool()
      * @throws Exception
      */
     public void shutdownDriver()
-        throws Exception
+        throws SQLException
     {
         PoolingDriver driver = (PoolingDriver) DriverManager.getDriver( DRIVER_NAME );
         driver.closePool( this.getPoolName() );
@@ -190,10 +190,10 @@ public String getPoolName()
      * @param userName
      * @param password
      * @param maxActive max connections
-     * @throws Exception
+     * @throws SQLException if a database access error occurs
      */
     public void setupDriver( String connectURI, String userName, String password, int maxActive )
-        throws Exception
+        throws SQLException
     {
         // First, we'll need a ObjectPool that serves as the
         // actual pool of connections.
@@ -222,7 +222,15 @@ public void setupDriver( String connectURI, String userName, String password, in
         new PoolableConnectionFactory( connectionFactory, connectionPool, null, null, false, true );
 
         // Finally, we create the PoolingDriver itself...
-        Class.forName( "org.apache.commons.dbcp.PoolingDriver" );
+        try
+        {
+            // com.mysql.jdbc.Driver
+            Class.forName( "org.apache.commons.dbcp.PoolingDriver" );
+        }
+        catch ( ClassNotFoundException e )
+        {
+            throw new SQLException("Couldn't find class for driver [org.apache.commons.dbcp.PoolingDriver]", e );
+        }
         PoolingDriver driver = (PoolingDriver) DriverManager.getDriver( DRIVER_NAME );
 
         // ...and register our pool with it.
@@ -237,7 +245,7 @@ public void setupDriver( String connectURI, String userName, String password, in
      * @throws Exception
      */
     public void logDriverStats()
-        throws Exception
+        throws SQLException
     {
         PoolingDriver driver = (PoolingDriver) DriverManager.getDriver( DRIVER_NAME );
         ObjectPool connectionPool = driver.getConnectionPool( this.getPoolName() );
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessFactory.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessFactory.java
deleted file mode 100644
index 0688fa169..000000000
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessFactory.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package org.apache.commons.jcs.auxiliary.disk.jdbc;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-/** This is just a helper util. */
-public class JDBCDiskCachePoolAccessFactory
-{
-    /** The local logger. */
-    private static final Log log = LogFactory.getLog( JDBCDiskCachePoolAccessFactory.class );
-
-    /**
-     * Creates a JDBCDiskCachePoolAccess object from the JDBCDiskCachePoolAccessAttributes. This is
-     * used by the connection pool manager.
-     * <p>
-     * @param poolAttributes
-     * @return JDBCDiskCachePoolAccess
-     * @throws Exception
-     */
-    public static JDBCDiskCachePoolAccess createPoolAccess( JDBCDiskCachePoolAccessAttributes poolAttributes )
-        throws Exception
-    {
-        return createPoolAccess( poolAttributes.getDriverClassName(), poolAttributes.getPoolName(), poolAttributes
-            .getUrl()
-            + poolAttributes.getDatabase(), poolAttributes.getUserName(), poolAttributes.getPassword(), poolAttributes
-            .getMaxActive() );
-    }
-
-    /**
-     * Creates a JDBCDiskCachePoolAccess object from the JDBCDiskCacheAttributes. Use this when not
-     * using the connection pool manager.
-     * <p>
-     * @param cattr
-     * @return JDBCDiskCachePoolAccess
-     * @throws Exception
-     */
-    public static JDBCDiskCachePoolAccess createPoolAccess( JDBCDiskCacheAttributes cattr )
-        throws Exception
-    {
-        return createPoolAccess( cattr.getDriverClassName(), cattr.getName(), cattr.getUrl() + cattr.getDatabase(),
-                                 cattr.getUserName(), cattr.getPassword(), cattr.getMaxActive() );
-    }
-
-    /**
-     * Creates a pool access object and registers the driver.
-     * <p>
-     * @param driverClassName
-     * @param poolName
-     * @param fullURL = (url + database)
-     * @param userName
-     * @param password
-     * @param maxActive
-     * @return JDBCDiskCachePoolAccess
-     * @throws Exception
-     */
-    public static JDBCDiskCachePoolAccess createPoolAccess( String driverClassName, String poolName, String fullURL,
-                                                            String userName, String password, int maxActive )
-        throws Exception
-    {
-        JDBCDiskCachePoolAccess poolAccess = null;
-
-        try
-        {
-            // com.mysql.jdbc.Driver
-            Class.forName( driverClassName );
-        }
-        catch ( ClassNotFoundException e )
-        {
-            log.error( "Couldn't find class for driver [" + driverClassName + "]", e );
-        }
-
-        poolAccess = new JDBCDiskCachePoolAccess( poolName );
-
-        poolAccess.setupDriver( fullURL, userName, password, maxActive );
-
-        poolAccess.logDriverStats();
-
-        if ( log.isInfoEnabled() )
-        {
-            log.info( "Created: " + poolAccess );
-        }
-
-        return poolAccess;
-    }
-}
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManager.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManager.java
index 868b4ad55..986ccaa97 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManager.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManager.java
@@ -19,6 +19,7 @@
  * under the License.
  */
 
+import java.sql.SQLException;
 import org.apache.commons.jcs.utils.config.PropertySetter;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -84,28 +85,23 @@ public static synchronized JDBCDiskCachePoolAccessManager getInstance()
      * @param poolName the name of the pool
      * @param props the configuration properties for the pool
      * @return JDBCDiskCachePoolAccess
+     * @throws SQLException if a database access error occurs
      */
     public synchronized JDBCDiskCachePoolAccess getJDBCDiskCachePoolAccess( String poolName, Properties props )
+        throws SQLException
     {
         JDBCDiskCachePoolAccess poolAccess = pools.get( poolName );
 
         if ( poolAccess == null )
         {
             JDBCDiskCachePoolAccessAttributes poolAttributes = configurePoolAccessAttributes( poolName, props );
-            try
-            {
-                poolAccess = JDBCDiskCachePoolAccessFactory.createPoolAccess( poolAttributes );
+            poolAccess = JDBCDiskCachePoolAccessManager.createPoolAccess( poolAttributes );
 
-                if ( log.isInfoEnabled() )
-                {
-                    log.info( "Created shared pooled access for pool name [" + poolName + "]." );
-                }
-                pools.put( poolName, poolAccess );
-            }
-            catch ( Exception e )
+            if ( log.isInfoEnabled() )
             {
-                log.error( "Problem creating connection pool for pool name [" + poolName + "].", e );
+                log.info( "Created shared pooled access for pool name [" + poolName + "]." );
             }
+            pools.put( poolName, poolAccess );
         }
 
         return poolAccess;
@@ -135,4 +131,78 @@ protected JDBCDiskCachePoolAccessAttributes configurePoolAccessAttributes( Strin
         }
         return poolAttributes;
     }
+
+    /**
+     * Creates a pool access object and registers the driver.
+     * <p>
+     * @param driverClassName
+     * @param poolName
+     * @param fullURL = (url + database)
+     * @param userName
+     * @param password
+     * @param maxActive
+     * @return JDBCDiskCachePoolAccess
+     * @throws SQLException if a database access error occurs
+     */
+    public static JDBCDiskCachePoolAccess createPoolAccess( String driverClassName, String poolName, String fullURL,
+                                                            String userName, String password, int maxActive )
+       throws SQLException
+    {
+        JDBCDiskCachePoolAccess poolAccess = null;
+
+        try
+        {
+            // com.mysql.jdbc.Driver
+            Class.forName( driverClassName );
+        }
+        catch ( ClassNotFoundException e )
+        {
+            throw new SQLException("Couldn't find class for driver [" + driverClassName + "]", e );
+        }
+
+        poolAccess = new JDBCDiskCachePoolAccess( poolName );
+
+        poolAccess.setupDriver( fullURL, userName, password, maxActive );
+
+        poolAccess.logDriverStats();
+
+        if ( log.isInfoEnabled() )
+        {
+            log.info( "Created: " + poolAccess );
+        }
+
+        return poolAccess;
+    }
+
+    /**
+     * Creates a JDBCDiskCachePoolAccess object from the JDBCDiskCacheAttributes. Use this when not
+     * using the connection pool manager.
+     * <p>
+     * @param cattr
+     * @return JDBCDiskCachePoolAccess
+     * @throws SQLException if a database access error occurs
+     */
+    public static JDBCDiskCachePoolAccess createPoolAccess( JDBCDiskCacheAttributes cattr )
+        throws SQLException
+    {
+        return JDBCDiskCachePoolAccessManager.createPoolAccess( cattr.getDriverClassName(), cattr.getName(), cattr.getUrl() + cattr.getDatabase(),
+                                 cattr.getUserName(), cattr.getPassword(), cattr.getMaxActive() );
+    }
+
+    /**
+     * Creates a JDBCDiskCachePoolAccess object from the JDBCDiskCachePoolAccessAttributes. This is
+     * used by the connection pool manager.
+     * <p>
+     * @param poolAttributes
+     * @return JDBCDiskCachePoolAccess
+     * @throws SQLException if a database access error occurs
+     */
+    public static JDBCDiskCachePoolAccess createPoolAccess( JDBCDiskCachePoolAccessAttributes poolAttributes )
+        throws SQLException
+    {
+        return JDBCDiskCachePoolAccessManager.createPoolAccess( poolAttributes.getDriverClassName(), poolAttributes.getPoolName(), poolAttributes
+            .getUrl()
+            + poolAttributes.getDatabase(), poolAttributes.getUserName(), poolAttributes.getPassword(), poolAttributes
+            .getMaxActive() );
+    }
 }
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCache.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCache.java
index c1010351e..66e3dd8f5 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCache.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCache.java
@@ -19,6 +19,10 @@
  * under the License.
  */
 
+import java.io.Serializable;
+import java.sql.SQLException;
+import java.util.Map;
+
 import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCache;
 import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
@@ -37,7 +41,7 @@
  * @author Aaron Smuts
  */
 public class MySQLDiskCache<K, V>
-    extends JDBCDiskCache<K, V>
+	extends JDBCDiskCache<K, V>
 {
     /** don't change */
     private static final long serialVersionUID = -7169488308515823491L;
@@ -55,8 +59,9 @@ public class MySQLDiskCache<K, V>
      * @param attributes
      * @param tableState
      * @param compositeCacheManager
+     * @throws SQLException if the pool access could not be set up
      */
-    public MySQLDiskCache( MySQLDiskCacheAttributes attributes, TableState tableState, ICompositeCacheManager compositeCacheManager )
+    public MySQLDiskCache( MySQLDiskCacheAttributes attributes, TableState tableState, ICompositeCacheManager compositeCacheManager ) throws SQLException
     {
         super( attributes, tableState, compositeCacheManager );
 
diff --git a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManager.java b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManager.java
index 256a78f20..6914a99d6 100644
--- a/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManager.java
+++ b/commons-jcs-core/src/main/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManager.java
@@ -31,6 +31,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import java.sql.SQLException;
 import java.util.Date;
 import java.util.Timer;
 import java.util.TimerTask;
@@ -45,9 +46,6 @@
 public class MySQLDiskCacheManager
     extends JDBCDiskCacheManagerAbstractTemplate
 {
-    /** Don't change. */
-    private static final long serialVersionUID = -8258856770927857896L;
-
     /** The logger */
     private static final Log log = LogFactory.getLog( MySQLDiskCacheManager.class );
 
@@ -142,9 +140,11 @@ public <K, V> MySQLDiskCache<K, V> getCache( String cacheName )
      * @param cattr
      * @param tableState
      * @return AuxiliaryCache
+     * @throws SQLException if database operations fail
      */
     @Override
-    protected <K, V> MySQLDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, TableState tableState )
+    protected <K, V> MySQLDiskCache<K, V> createJDBCDiskCache( JDBCDiskCacheAttributes cattr, 
+            TableState tableState ) throws SQLException
     {
         MySQLDiskCache<K, V> diskCache = new MySQLDiskCache<K, V>( (MySQLDiskCacheAttributes) cattr, tableState, getCompositeCacheManager() );
 
diff --git a/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java b/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
index 4e6daa7e0..259496b27 100644
--- a/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
+++ b/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
@@ -19,7 +19,10 @@
  * under the License.
  */
 
+import java.sql.SQLException;
+
 import junit.framework.TestCase;
+
 import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 
@@ -39,8 +42,9 @@ public class MySQLDiskCacheUnitTest
      * <p>
      * This is a bit tricky since we don't want to have to have a mysql instance
      * running. Right now this doesn't really test much
+     * @throws SQLException 
      */
-    public void testBalkOnGet()
+    public void testBalkOnGet() throws SQLException
     {
         // SETUP
         MySQLDiskCacheAttributes attributes = new MySQLDiskCacheAttributes();
@@ -52,7 +56,8 @@ public void testBalkOnGet()
         TableState tableState = new TableState( tableName );
         tableState.setState( TableState.OPTIMIZATION_RUNNING );
 
-        MySQLDiskCache<String, String> cache = new MySQLDiskCache<String, String>( attributes, tableState, CompositeCacheManager.getUnconfiguredInstance() );
+        MySQLDiskCache<String, String> cache = new MySQLDiskCache<String, String>( attributes, tableState, 
+        		CompositeCacheManager.getUnconfiguredInstance() );
 
         // DO WORK
         Object result = cache.processGet( "myKey" );
diff --git a/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java b/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
index b73087bcf..575cdd95a 100644
--- a/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
+++ b/commons-jcs-core/src/test/java/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
@@ -20,7 +20,7 @@
  */
 
 import junit.framework.TestCase;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessFactory;
+import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessManager;
 import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
 
 /**
@@ -49,7 +49,7 @@ public void testBasicOptimization()
         attributes.setTableName( tableName );
         TableState tableState = new TableState( tableName );
 
-        MySQLTableOptimizer optimizer = new MySQLTableOptimizer( attributes, tableState, JDBCDiskCachePoolAccessFactory
+        MySQLTableOptimizer optimizer = new MySQLTableOptimizer( attributes, tableState, JDBCDiskCachePoolAccessManager
             .createPoolAccess( attributes ) );
 
         // DO WORK
@@ -74,7 +74,7 @@ public void testBasicOptimizationUnknownTable()
         attributes.setTableName( tableName );
         TableState tableState = new TableState( tableName );
 
-        MySQLTableOptimizer optimizer = new MySQLTableOptimizer( attributes, tableState, JDBCDiskCachePoolAccessFactory
+        MySQLTableOptimizer optimizer = new MySQLTableOptimizer( attributes, tableState, JDBCDiskCachePoolAccessManager
             .createPoolAccess( attributes ) );
 
         // DO WORK
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 17e1245ef..329b2ee16 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -20,6 +20,9 @@
 	</properties>
 	<body>
 		<release version="2.0" date="unreleased" description="JDK 1.6 based major release">
+            <action issue="JCS-113" dev="tv" type="fix" due-to="Sebastian Bazley">
+                Improve error handling by bubbling up exceptions
+            </action>
             <action dev="rmannibucau" type="add">
                 jcache-extra module to provide basic classes based on JCache API.
             </action>
