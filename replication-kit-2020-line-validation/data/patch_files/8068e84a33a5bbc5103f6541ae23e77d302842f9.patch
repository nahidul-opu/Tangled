From 8068e84a33a5bbc5103f6541ae23e77d302842f9 Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Sun, 2 Mar 2014 19:38:47 +0000
Subject: [PATCH] MATH-1092 Javadoc.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1573341 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math3/optim/nonlinear/scalar/LineSearch.java  | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.java
index 7763e77889..bd7532ea4b 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.java
@@ -69,8 +69,8 @@ public class LineSearch {
      * tolerances to check the domain (point) values, not the function
      * values.
      * The {@code relativeTolerance} and {@code absoluteTolerance}
-     * arguments are thus passed to a custom checker that will use
-     * the function values.
+     * arguments are thus passed to a {@link SimpleUnivariateValueChecker
+     * custom checker} that will use the function values.
      *
      * @param optimizer Optimizer on behalf of which the line search
      * be performed.
@@ -78,9 +78,9 @@ public class LineSearch {
      * computeObjectiveValue} method will be called by the
      * {@link #search(double[],double[]) search} method.
      * @param relativeTolerance Search will stop when the function relative
-     * difference between successive iterations is smaller than this value.
+     * difference between successive iterations is below this value.
      * @param absoluteTolerance Search will stop when the function absolute
-     * difference between successive iterations is smaller than this value.
+     * difference between successive iterations is below this value.
      * @param initialBracketingRange Extent of the initial interval used to
      * find an interval that brackets the optimum.
      * If the optimized function varies a lot in the vicinity of the optimum,
