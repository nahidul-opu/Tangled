From 52d82d1dfff8c2b2ded9d843e0b03017af6d747c Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Sun, 27 Apr 2008 00:35:56 +0000
Subject: [PATCH] Applying Benjamin Bentmann's patch from CODEC-65, which
 changes the various encoders to use a locale when lowercasing. The encoders
 all assume the English locale, so when running in non English locales the
 default toLowerCase sometimes does not work as the encoder expects.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@651874 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/codec/language/Caverphone.java    |  2 +-
 .../codec/language/DoubleMetaphone.java       |  2 +-
 .../commons/codec/language/Metaphone.java     |  4 +--
 .../commons/codec/language/SoundexUtils.java  |  4 +--
 .../codec/StringEncoderAbstractTest.java      | 34 +++++++++++++++++++
 5 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/commons/codec/language/Caverphone.java b/src/java/org/apache/commons/codec/language/Caverphone.java
index 0712295399..ea4398523e 100644
--- a/src/java/org/apache/commons/codec/language/Caverphone.java
+++ b/src/java/org/apache/commons/codec/language/Caverphone.java
@@ -56,7 +56,7 @@ public String caverphone(String txt) {
         }
 
         // 1. Convert to lowercase
-        txt = txt.toLowerCase();
+        txt = txt.toLowerCase(java.util.Locale.ENGLISH);
 
         // 2. Remove anything not A-Z
         txt = txt.replaceAll("[^a-z]", "");
diff --git a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java
index 9b4d0d9b50..517ac7ff84 100644
--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java
+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java
@@ -923,7 +923,7 @@ private String cleanInput(String input) {
 		if (input.length() == 0) {
 			return null;
 		}
-		return input.toUpperCase();
+		return input.toUpperCase(java.util.Locale.ENGLISH);
 	}
 
     /**
diff --git a/src/java/org/apache/commons/codec/language/Metaphone.java b/src/java/org/apache/commons/codec/language/Metaphone.java
index 5245e8847b..a90e0ae3be 100644
--- a/src/java/org/apache/commons/codec/language/Metaphone.java
+++ b/src/java/org/apache/commons/codec/language/Metaphone.java
@@ -85,10 +85,10 @@ public String metaphone(String txt) {
         }
         // single character is itself
         if (txt.length() == 1) {
-            return txt.toUpperCase() ;
+            return txt.toUpperCase(java.util.Locale.ENGLISH) ;
         }
       
-        char[] inwd = txt.toUpperCase().toCharArray() ;
+        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;
       
         StringBuffer local = new StringBuffer(40); // manipulate
         StringBuffer code = new StringBuffer(10) ; //   output
diff --git a/src/java/org/apache/commons/codec/language/SoundexUtils.java b/src/java/org/apache/commons/codec/language/SoundexUtils.java
index 9e8b4ffa9b..2b04c085fb 100644
--- a/src/java/org/apache/commons/codec/language/SoundexUtils.java
+++ b/src/java/org/apache/commons/codec/language/SoundexUtils.java
@@ -50,9 +50,9 @@ static String clean(String str) {
             }
         }
         if (count == len) {
-            return str.toUpperCase();
+            return str.toUpperCase(java.util.Locale.ENGLISH);
         }
-        return new String(chars, 0, count).toUpperCase();
+        return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);
     }
 
     /**
diff --git a/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java
index 13499619f3..70a5cc2538 100644
--- a/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java
+++ b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.codec;
 
+import java.util.Locale;
+
 import junit.framework.TestCase;
 
 /**
@@ -63,4 +65,36 @@ public void testEncodeWithInvalidObject() throws Exception {
         assertTrue( "An exception was not thrown when we tried to encode " +
                     "a Float object", exceptionThrown );
     }
+
+    public void testLocaleIndependence() throws Exception {
+        StringEncoder encoder = makeEncoder();
+
+        String[] data = { "I", "i", };
+
+        Locale orig = Locale.getDefault();
+        Locale[] locales = { Locale.ENGLISH, new Locale("tr"), Locale.getDefault() };
+
+        try {
+            for (int i = 0; i < data.length; i++) {
+                String ref = null;
+                for (int j = 0; j < locales.length; j++) {
+                    Locale.setDefault(locales[j]);
+                    if (j <= 0) {
+                        ref = encoder.encode(data[i]);
+                    } else {
+                        String cur = null;
+                        try {
+                            cur = encoder.encode(data[i]);
+                        } catch (Exception e) {
+                            fail(Locale.getDefault().toString() + ": " + e.getMessage());
+                        }
+                        assertEquals(Locale.getDefault().toString() + ": ", ref, cur);
+                    }
+                }
+            }
+        } finally {
+            Locale.setDefault(orig);
+        }
+    }
+
 }
