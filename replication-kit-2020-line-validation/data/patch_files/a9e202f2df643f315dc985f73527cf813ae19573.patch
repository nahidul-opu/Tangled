From a9e202f2df643f315dc985f73527cf813ae19573 Mon Sep 17 00:00:00 2001
From: Scokart Gilles <gscokart@apache.org>
Date: Mon, 8 Oct 2007 12:00:46 +0000
Subject: [PATCH] clean code formatting and add NPE messages for IVY-618

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@582792 13f79535-47bb-0310-9956-ffa450edef68
---
 .../ivy/core/resolve/ResolveEngine.java       | 32 +++++++++++++------
 1 file changed, 23 insertions(+), 9 deletions(-)

diff --git a/src/java/org/apache/ivy/core/resolve/ResolveEngine.java b/src/java/org/apache/ivy/core/resolve/ResolveEngine.java
index 4f17f887c..7968c97cf 100644
--- a/src/java/org/apache/ivy/core/resolve/ResolveEngine.java
+++ b/src/java/org/apache/ivy/core/resolve/ResolveEngine.java
@@ -98,7 +98,8 @@ public class ResolveEngine {
      *            the sort engine to use to sort modules before producing the dependency resolution
      *            report. Must not be null.
      */
-    public ResolveEngine(ResolveEngineSettings settings, EventManager eventManager, SortEngine sortEngine) {
+    public ResolveEngine(ResolveEngineSettings settings, EventManager eventManager,
+                         SortEngine sortEngine) {
         this.settings = settings;
         this.eventManager = eventManager;
         this.sortEngine = sortEngine;
@@ -194,8 +195,7 @@ public ResolveReport resolve(URL ivySource, ResolveOptions options) throws Parse
     }
 
     /**
-     * Resolve dependencies of a module described by a module descriptor Note: the method signature
-     * is way too long, we should use a class to store the settings of the resolve.
+     * Resolve dependencies of a module described by a module descriptor.
      */
     public ResolveReport resolve(ModuleDescriptor md, ResolveOptions options)
             throws ParseException, IOException {
@@ -241,8 +241,8 @@ public ResolveReport resolve(ModuleDescriptor md, ResolveOptions options)
             // revision id,
             // for direct dependencies only.
             // this is used by the deliver task to resolve dynamic revisions to static ones
-            File ivyPropertiesInCache = cacheManager.getResolvedIvyPropertiesInCache(md
-                    .getResolvedModuleRevisionId());
+            File ivyPropertiesInCache = cacheManager.getResolvedIvyPropertiesInCache(
+                        md.getResolvedModuleRevisionId());
             Properties props = new Properties();
             if (dependencies.length > 0) {
                 IvyNode root = dependencies[0].getRoot();
@@ -250,10 +250,24 @@ public ResolveReport resolve(ModuleDescriptor md, ResolveOptions options)
                     if (!dependencies[i].hasProblem()) {
                         DependencyDescriptor dd = dependencies[i].getDependencyDescriptor(root);
                         if (dd != null) {
-                            String rev = dependencies[i].getResolvedId().getRevision();
-                            String status = dependencies[i].getDescriptor().getStatus();
-                            props.put(dd.getDependencyRevisionId().encodeToString(), rev + " "
-                                    + status);
+                            ModuleRevisionId depResolvedId = dependencies[i].getResolvedId();
+                            ModuleDescriptor depDescriptor = dependencies[i].getDescriptor();
+                            ModuleRevisionId depRevisionId = dd.getDependencyRevisionId();
+                            if (depResolvedId == null) {
+                                throw new NullPointerException("getResolvedId() is null for " 
+                                    + dependencies[i].toString());
+                            }
+                            if (depDescriptor == null) {
+                                throw new NullPointerException("getDescriptor() is null for " 
+                                    + dependencies[i].toString());
+                            }
+                            if (depRevisionId == null) {
+                                throw new NullPointerException("getDependencyRevisionId() "
+                                    + "is null for " + dd.toString());
+                            }
+                            String rev = depResolvedId.getRevision();
+                            String status = depDescriptor.getStatus();
+                            props.put(depRevisionId.encodeToString(), rev + " " + status);
                         }
                     }
                 }
