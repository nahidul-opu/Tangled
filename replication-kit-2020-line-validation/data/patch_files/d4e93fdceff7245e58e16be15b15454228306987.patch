From d4e93fdceff7245e58e16be15b15454228306987 Mon Sep 17 00:00:00 2001
From: Henning Schmiedehausen <henning@apache.org>
Date: Mon, 21 Oct 2013 22:12:36 +0000
Subject: [PATCH] Backport CONFIGURATION-534 from r1457498,

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/CONFIGURATION_1_X_MAINTENANCE@1534396 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  6 ++++
 src/changes/changes.xml                       |  4 +++
 .../PropertiesConfiguration.java              | 28 +++++++++++----
 .../TestPropertiesConfiguration.java          | 35 +++++++++++++++++++
 4 files changed, 66 insertions(+), 7 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 48f01c5820..134468bd10 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -74,6 +74,12 @@ BUG FIXES IN 1.10
 IMPROVEMENTS AND NEW FEATURES IN 1.10
 =====================================
 
+* [CONFIGURATION-534] PropertyConfiguration's handling of includes depends on the
+                      existence of a base path
+
+  The includesAllowed property of PropertyConfiguration is now independent
+  from the existence of a base path.
+
 * [CONFIGURATION-550] Missing conversion to char
 
   Conversion to Character is now supported.
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ba6547e5fe..979f5c878c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -31,6 +31,10 @@
         XMLConfiguration now adds attributes of elements defining a list to
         all list nodes.
       </action>
+      <action dev="oheger" type="update" issue="CONFIGURATION-534">
+        The includesAllowed property of PropertyConfiguration is now independent
+        from the existence of a base path.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-546" due-to="Justin Couch">
         BeanHelper can now process BeanDefinitions initializing properties of
         collection types of their target beans.
diff --git a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
index 10e7a0f213..00dfd8c410 100644
--- a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
@@ -227,7 +227,7 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
     private volatile IOFactory ioFactory;
 
     /** Allow file inclusion or not */
-    private boolean includesAllowed;
+    private boolean includesAllowed = true;
 
     /**
      * Creates an empty PropertyConfiguration object which can be
@@ -237,7 +237,6 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
     public PropertiesConfiguration()
     {
         layout = createLayout();
-        setIncludesAllowed(false);
     }
 
     /**
@@ -309,12 +308,11 @@ public static void setInclude(String inc)
 
     /**
      * Controls whether additional files can be loaded by the include = <xxx>
-     * statement or not. Base rule is, that objects created by the empty
-     * C'tor can not have included files.
+     * statement or not. This is <b>true</b> per default.
      *
-     * @param includesAllowed includesAllowed True if Includes are allowed.
+     * @param includesAllowed True if Includes are allowed.
      */
-    protected void setIncludesAllowed(boolean includesAllowed)
+    public void setIncludesAllowed(boolean includesAllowed)
     {
         this.includesAllowed = includesAllowed;
     }
@@ -323,8 +321,24 @@ protected void setIncludesAllowed(boolean includesAllowed)
      * Reports the status of file inclusion.
      *
      * @return True if include files are loaded.
+     *
+     * @see isIncludedAllowed()
+     *
+     * @deprecated Only exists to not break backwards compatibility.
+     * Use {@link isIncludesAllowed()} instead.
      */
+    @Deprecated
     public boolean getIncludesAllowed()
+    {
+        return isIncludesAllowed();
+    }
+
+    /**
+     * Reports the status of file inclusion.
+     *
+     * @return True if include files are loaded.
+     */
+    public boolean isIncludesAllowed()
     {
         return this.includesAllowed;
     }
@@ -552,7 +566,7 @@ boolean propertyLoaded(String key, String value)
         if (StringUtils.isNotEmpty(getInclude())
                 && key.equalsIgnoreCase(getInclude()))
         {
-            if (getIncludesAllowed())
+            if (isIncludesAllowed())
             {
                 String[] files;
                 if (!isDelimiterParsingDisabled())
diff --git a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
index 0cf6873220..421dd2bef0 100644
--- a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -153,6 +153,41 @@ public void testLoadIncludeInterpol() throws Exception
         assertEquals("true", loaded);
     }
 
+    /**
+     * Tests whether include files can be resolved if a configuration file is
+     * read from a reader.
+     */
+    @Test
+    public void testLoadIncludeFromReader() throws ConfigurationException,
+            IOException
+    {
+        StringReader in =
+                new StringReader(PropertiesConfiguration.getInclude() + " = "
+                        + ConfigurationAssert.getTestURL("include.properties"));
+        conf = new PropertiesConfiguration();
+        conf.read(in);
+        assertEquals("Include file not loaded", "true",
+                conf.getString("include.loaded"));
+    }
+
+    /**
+     * Tests whether include files can be disabled.
+     */
+    @Test
+    public void testDisableIncludes() throws ConfigurationException,
+            IOException
+    {
+        String content =
+                PropertiesConfiguration.getInclude()
+                        + " = nonExistingIncludeFile" + CR + PROP_NAME + " = "
+                        + PROP_VALUE + CR;
+        StringReader in = new StringReader(content);
+        conf = new PropertiesConfiguration();
+        conf.setIncludesAllowed(false);
+        conf.read(in);
+        assertEquals("Data not loaded", PROP_VALUE, conf.getString(PROP_NAME));
+    }
+
     @Test
     public void testSetInclude() throws Exception
     {
