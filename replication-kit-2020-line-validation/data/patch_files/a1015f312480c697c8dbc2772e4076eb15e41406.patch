From a1015f312480c697c8dbc2772e4076eb15e41406 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 18 Feb 2010 16:11:13 +0000
Subject: [PATCH] properly count bytes read.  COMPRESS-74

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911467 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                  | 9 +++++++++
 .../compress/archivers/zip/ZipArchiveInputStream.java    | 4 ++++
 2 files changed, 13 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index df2e8a4d7ab..a846c9f557f 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,15 @@
   </properties>
   <body>
     <release version="1.1" date="as in SVN" description="Release 1.1">
+      <action type="fix" date="2010-02-18" issue="COMPRESS-74">
+        ZipArchiveInputStream failed to update the number of bytes
+        read properly.
+      </action>
+      <action type="fix" date="2010-02-18">
+        ArchiveInputStream has a new method getBytesRead that should
+        be preferred over getCount since the later may truncate the
+        number of bytes read for big archives.
+      </action>
       <action type="fix" date="2010-02-18" issue="COMPRESS-85">
         The cpio archives created by CpioArchiveOutputStream couldn't
         be read by many existing native implementations because the
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index dadc7cdecf6..5f66af050c9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -338,6 +338,7 @@ private void closeEntry() throws IOException {
                     throw new EOFException(
                             "Truncated ZIP entry: " + current.getName());
                 } else {
+                    count(n);
                     remaining -= n;
                 }
             }
@@ -356,6 +357,7 @@ private void closeEntry() throws IOException {
             if ((diff = bytesReadFromStream - inB) != 0) {
                 ((PushbackInputStream) in).unread(
                         buf,  lengthOfLastRead - diff, diff);
+                pushedBackBytes(diff);
             }
         }
 
@@ -375,6 +377,7 @@ private void fill() throws IOException {
             throw new IOException("The stream is closed");
         }
         if ((lengthOfLastRead = in.read(buf)) > 0) {
+            count(lengthOfLastRead);
             inf.setInput(buf, 0, lengthOfLastRead);
         }
     }
@@ -386,6 +389,7 @@ private void readFully(byte[] b) throws IOException {
             if (x == -1) {
                 throw new EOFException();
             }
+            count(x);
         }
     }
 }
