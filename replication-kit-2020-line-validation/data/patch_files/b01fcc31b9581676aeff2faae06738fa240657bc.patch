From b01fcc31b9581676aeff2faae06738fa240657bc Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Wed, 26 Aug 2009 08:43:27 +0000
Subject: [PATCH] fixed an error with negative constraints and unfeasible
 solution JIRA: MATH-290

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@807923 13f79535-47bb-0310-9956-ffa450edef68
---
 .../math/optimization/linear/SimplexTableau.java      |  8 ++++----
 src/site/xdoc/changes.xml                             |  4 ++++
 .../math/optimization/linear/SimplexSolverTest.java   | 11 +++++++++++
 3 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index b387767189..97d80619d4 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -69,7 +69,7 @@ class SimplexTableau implements Serializable {
     private final LinearObjectiveFunction f;
 
     /** Linear constraints. */
-    private final Collection<LinearConstraint> constraints;
+    private final List<LinearConstraint> constraints;
 
     /** Whether to restrict the variables to non-negative values. */
     private final boolean restrictToNonNegative;
@@ -103,7 +103,7 @@ class SimplexTableau implements Serializable {
                    final GoalType goalType, final boolean restrictToNonNegative,
                    final double epsilon) {
         this.f                      = f;
-        this.constraints            = constraints;
+        this.constraints            = normalizeConstraints(constraints);
         this.restrictToNonNegative  = restrictToNonNegative;
         this.epsilon                = epsilon;
         this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
@@ -123,7 +123,6 @@ class SimplexTableau implements Serializable {
     protected double[][] createTableau(final boolean maximize) {
 
         // create a matrix of the correct size
-        List<LinearConstraint> constraints = getNormalizedConstraints();
         int width = numDecisionVariables + numSlackVariables +
         numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS
         int height = constraints.size() + getNumObjectiveFunctions();
@@ -192,9 +191,10 @@ public int getNumVariables() {
 
     /**
      * Get new versions of the constraints which have positive right hand sides.
+     * @param constraints original (not normalized) constraints
      * @return new versions of the constraints
      */
-    public List<LinearConstraint> getNormalizedConstraints() {
+    public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> constraints) {
         List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
         for (LinearConstraint constraint : constraints) {
             normalized.add(normalize(constraint));
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index a030011524..baec5d0aa1 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,10 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.1" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-290" due-to="Benjamin McCann">
+        Fixed a NullPointerException when no solution is possible and some constraints
+        are negative
+      </action>
       <action dev="luc" type="fix" issue="MATH-288" due-to="Benjamin McCann">
         Fixed an error induced by entries set to 0
       </action>
diff --git a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
index 469d9edc76..555c51a0f6 100644
--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
@@ -18,6 +18,7 @@
 package org.apache.commons.math.optimization.linear;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -73,6 +74,16 @@ public void testMath288() throws OptimizationException {
         assertEquals(10.0, solution.getValue(), .0000001);
     }
 
+    @Test
+    public void testMath290() throws OptimizationException {
+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );
+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
+        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));
+        SimplexSolver solver = new SimplexSolver();
+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
+        assertNotNull(solution);
+    }
+
     @Test
     public void testSimplexSolver() throws OptimizationException {
         LinearObjectiveFunction f =
