From 30347fa15e8ec8ea9fded8eef759b7383976e858 Mon Sep 17 00:00:00 2001
From: Ralph Goers <rgoers@apache.org>
Date: Tue, 23 Nov 2010 00:27:35 +0000
Subject: [PATCH] Fix VFS-293 by converting the idle client to an
 AtomicReference. Make atomic objects final

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1037953 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/AbstractFileSystem.java     |  4 +-
 .../vfs2/provider/ftp/FtpFileSystem.java      | 54 ++++++++-----------
 2 files changed, 23 insertions(+), 35 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
index 6bf4077405..901e1930c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
@@ -95,7 +95,7 @@ public abstract class AbstractFileSystem
     /**
      * How many fileObjects are handed out
      */
-    private AtomicLong useCount = new AtomicLong(0);
+    private final AtomicLong useCount = new AtomicLong(0);
 
 
     private FileSystemKey cacheKey;
@@ -103,7 +103,7 @@ public abstract class AbstractFileSystem
     /**
      * open streams counter for this filesystem
      */
-    private AtomicInteger openStreams = new AtomicInteger(0);
+    private final AtomicInteger openStreams = new AtomicInteger(0);
 
     protected AbstractFileSystem(final FileName rootName,
                                  final FileObject parentLayer,
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
index 6efe105bd6..777254f79a 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
@@ -29,6 +29,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
+import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * An FTP file system.
@@ -46,7 +47,7 @@ public class FtpFileSystem extends AbstractFileSystem
 //    private final String password;
 
     // An idle client
-    private FtpClient idleClient;
+    private final AtomicReference<FtpClient> idleClient = new AtomicReference<FtpClient>();
 
     /**
      * @param rootName The root of the file system.
@@ -61,17 +62,17 @@ public FtpFileSystem(final GenericFileName rootName, final FtpClient ftpClient,
         // hostname = rootName.getHostName();
         // port = rootName.getPort();
 
-        idleClient = ftpClient;
+        idleClient.set(ftpClient);
     }
 
     @Override
     protected void doCloseCommunicationLink()
     {
+        FtpClient idle = idleClient.getAndSet(null);
         // Clean up the connection
-        if (idleClient != null)
+        if (idle != null)
         {
-            closeConnection(idleClient);
-            idleClient = null;
+            closeConnection(idle);
         }
     }
 
@@ -112,21 +113,14 @@ private void closeConnection(final FtpClient client)
      */
     public FtpClient getClient() throws FileSystemException
     {
-        synchronized (this)
-            {
-                if (idleClient == null || !idleClient.isConnected())
-                {
-                    idleClient = null;
-
-                    return new FTPClientWrapper((GenericFileName) getRoot().getName(), getFileSystemOptions());
-                }
-                else
-                {
-                    final FtpClient client = idleClient;
-                    idleClient = null;
-                    return client;
-                }
-            }
+        FtpClient client = idleClient.getAndSet(null);
+
+        if (client == null || !client.isConnected())
+        {
+            client = new FTPClientWrapper((GenericFileName) getRoot().getName(), getFileSystemOptions());
+        }
+
+        return client;
     }
 
     /**
@@ -135,21 +129,15 @@ public FtpClient getClient() throws FileSystemException
      */
     public void putClient(final FtpClient client)
     {
-        synchronized (this)
-            {
-                if (idleClient == null)
-                {
-                    // Hang on to client for later
-                    idleClient = client;
-                }
-                else
-                {
-                    // Close the client
-                    closeConnection(client);
-                }
-            }
+        // Save client for reuse if none is idle.
+        if (!idleClient.compareAndSet(null, client))
+        {
+            // An idle client is already present so close the connection.
+            closeConnection(client);
+        }
     }
 
+
     /**
      * Creates a file object.
      */
