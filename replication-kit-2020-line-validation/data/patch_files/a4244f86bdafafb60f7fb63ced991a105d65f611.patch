From a4244f86bdafafb60f7fb63ced991a105d65f611 Mon Sep 17 00:00:00 2001
From: Rory Winston <rwinston@apache.org>
Date: Thu, 5 Feb 2009 00:55:56 +0000
Subject: [PATCH] NET-242 Method createServerSocket of FTPSSocketFactory never
 called and thus UseClientMode is incorrect in a secured ftp transfer using
 active mode.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@740961 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/net/ftp/FTPSClient.java    |  5 +-
 .../net/ftp/FTPSServerSocketFactory.java      | 58 +++++++++++++++++++
 .../commons/net/ftp/FTPSSocketFactory.java    | 23 +-------
 3 files changed, 60 insertions(+), 26 deletions(-)
 create mode 100644 src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java

diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
index fa5433ac3..3a3c26df6 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
@@ -429,12 +429,9 @@ public void execPROT(String prot) throws SSLException, IOException {
             setServerSocketFactory(null);
         } else {
             setSocketFactory(new FTPSSocketFactory(context));
-
+            setServerSocketFactory(new FTPSServerSocketFactory(context));
             initSslContext();
             
-            SSLServerSocketFactory ssf = context.getServerSocketFactory();
-
-            setServerSocketFactory(ssf);
         }
     }
 
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java b/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java
new file mode 100644
index 000000000..607a64235
--- /dev/null
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.net.ftp;
+
+import java.io.BufferedReader;
+package org.apache.commons.net.ftp;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.ServerSocket;
+import javax.net.ServerSocketFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLServerSocket;
+
+/**
+ * Server socket factory for FTPS connections.
+ */
+public class FTPSServerSocketFactory extends ServerSocketFactory {
+    
+    private SSLContext context;
+    
+    public FTPSServerSocketFactory(SSLContext context) {
+        this.context = context;
+    }
+    
+    public ServerSocket createServerSocket(int port) throws IOException {
+        return this.init(this.context.getServerSocketFactory().createServerSocket(port));
+    }
+
+    public ServerSocket createServerSocket(int port, int backlog) throws IOException {
+        return this.init(this.context.getServerSocketFactory().createServerSocket(port, backlog));
+    }
+
+    public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
+        return this.init(this.context.getServerSocketFactory().createServerSocket(port, backlog, ifAddress));
+    }
+        
+    public ServerSocket init(ServerSocket socket) throws IOException {
+        ((SSLServerSocket) socket).setUseClientMode(true);
+        return socket;
+    }
+}
+
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java b/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
index ebf1fa999..fd77a7ba2 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
@@ -15,19 +15,15 @@
  * limitations under the License.
  */
 
-
 package org.apache.commons.net.ftp;
 
 import java.io.IOException;
 import java.net.InetAddress;
-import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.UnknownHostException;
 
 import javax.net.SocketFactory;
 import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLServerSocket;
-
 
 /**
  * 
@@ -37,7 +33,7 @@
  */
 public class FTPSSocketFactory extends SocketFactory {
 
-    private SSLContext context;
+    private final SSLContext context;
     
     public FTPSSocketFactory(SSLContext context) {
         this.context = context;
@@ -62,21 +58,4 @@ public Socket createSocket(String address, int port, InetAddress localAddress, i
     public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
         return this.context.getSocketFactory().createSocket(address, port, localAddress, localPort);
     }
-    
-    public ServerSocket createServerSocket(int port) throws IOException {
-        return this.init(this.context.getServerSocketFactory().createServerSocket(port));
-    }
-
-    public ServerSocket createServerSocket(int port, int backlog) throws IOException {
-        return this.init(this.context.getServerSocketFactory().createServerSocket(port, backlog));
-    }
-
-    public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
-        return this.init(this.context.getServerSocketFactory().createServerSocket(port, backlog, ifAddress));
-    }
-        
-    public ServerSocket init(ServerSocket socket) throws IOException {
-        ((SSLServerSocket) socket).setUseClientMode(true);
-        return socket;
-    }
 }
