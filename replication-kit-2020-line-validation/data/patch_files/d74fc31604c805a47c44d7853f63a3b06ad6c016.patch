From d74fc31604c805a47c44d7853f63a3b06ad6c016 Mon Sep 17 00:00:00 2001
From: Julius Davies <julius@apache.org>
Date: Fri, 21 Jan 2011 19:19:51 +0000
Subject: [PATCH] Fix for CODEC-101:  java.io.InputStreamReader hates it when
 InputStream.read(byte[]) returns a zero.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1061974 13f79535-47bb-0310-9956-ffa450edef68
---
 .../codec/binary/Base64InputStream.java       | 46 +++++++++++++------
 .../codec/binary/Base64InputStreamTest.java   | 18 ++++++++
 .../commons/codec/binary/Base64TestData.java  |  2 +
 3 files changed, 53 insertions(+), 13 deletions(-)

diff --git a/src/java/org/apache/commons/codec/binary/Base64InputStream.java b/src/java/org/apache/commons/codec/binary/Base64InputStream.java
index d6c05a6961..479638bcaa 100644
--- a/src/java/org/apache/commons/codec/binary/Base64InputStream.java
+++ b/src/java/org/apache/commons/codec/binary/Base64InputStream.java
@@ -145,21 +145,41 @@ public int read(byte b[], int offset, int len) throws IOException {
         } else if (len == 0) {
             return 0;
         } else {
-            if (!base64.hasData()) {
-                byte[] buf = new byte[doEncode ? 4096 : 8192];
-                int c = in.read(buf);
-                // A little optimization to avoid System.arraycopy()
-                // when possible.
-                if (c > 0 && b.length == len) {
-                    base64.setInitialBuffer(b, offset, len);
-                }
-                if (doEncode) {
-                    base64.encode(buf, 0, c);
-                } else {
-                    base64.decode(buf, 0, c);
+            int readLen = 0;
+            /*
+             Rationale for while-loop on (readLen == 0):
+             -----
+             Base64.readResults() usually returns > 0 or EOF (-1).  In the
+             rare case where it returns 0, we just keep trying.
+
+             This is essentially an undocumented contract for InputStream
+             implementors that want their code to work properly with
+             java.io.InputStreamReader, since the latter hates it when
+             InputStream.read(byte[]) returns a zero.  Unfortunately our
+             readResults() call must return 0 if a large amount of the data
+             being decoded was non-base64, so this while-loop enables proper
+             interop with InputStreamReader for that scenario.
+             -----
+             This is a fix for CODEC-101
+            */
+            while (readLen == 0) {
+                if (!base64.hasData()) {
+                    byte[] buf = new byte[doEncode ? 4096 : 8192];
+                    int c = in.read(buf);
+                    // A little optimization to avoid System.arraycopy()
+                    // when possible.
+                    if (c > 0 && b.length == len) {
+                        base64.setInitialBuffer(b, offset, len);
+                    }
+                    if (doEncode) {
+                        base64.encode(buf, 0, c);
+                    } else {
+                        base64.decode(buf, 0, c);
+                    }
                 }
+                readLen = base64.readResults(b, offset, len);
             }
-            return base64.readResults(b, offset, len);
+            return readLen;
         }
     }
 
diff --git a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
index fd1fc1f765..1df095d75b 100644
--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
@@ -46,6 +46,24 @@ public Base64InputStreamTest(String name) {
         super(name);
     }
 
+    /**
+     * Test for the CODEC-101 bug:  InputStream.read(byte[]) should never return 0
+     * because Java's builtin InputStreamReader hates that.
+     *
+     * @throws Exception for some failure scenarios.
+     */
+    public void testCodec101() throws Exception {
+        byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);
+        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);
+        Base64InputStream in = new Base64InputStream(bais);
+        byte[] result = new byte[8192];
+        int c = in.read(result);
+        assertTrue("Codec101: First read successful [c=" + c + "]", c > 0);
+
+        c = in.read(result);
+        assertTrue("Codec101: Second read should report end-of-stream [c=" + c + "]", c < 0);
+    }
+
     /**
      * Test the Base64InputStream implementation against the special NPE inducing input
      * identified in the CODEC-98 bug.
diff --git a/src/test/org/apache/commons/codec/binary/Base64TestData.java b/src/test/org/apache/commons/codec/binary/Base64TestData.java
index 84bb5bf7e3..c69bb2ac12 100644
--- a/src/test/org/apache/commons/codec/binary/Base64TestData.java
+++ b/src/test/org/apache/commons/codec/binary/Base64TestData.java
@@ -32,6 +32,8 @@
  */
 public class Base64TestData {
 
+    public static final String CODEC_101_MULTIPLE_OF_3 = "123";
+
     public static final String CODEC_98_NPE
         = "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM";
 
