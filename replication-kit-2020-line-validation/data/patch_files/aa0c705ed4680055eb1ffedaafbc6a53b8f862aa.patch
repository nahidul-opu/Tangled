From aa0c705ed4680055eb1ffedaafbc6a53b8f862aa Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sun, 13 Apr 2014 08:32:47 +0000
Subject: [PATCH] COMPRESS-276 verify there is a current archive entry before
 reading from or writing to the stream

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1586935 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                     | 4 ++++
 .../compress/archivers/arj/ArjArchiveInputStream.java       | 3 +++
 .../compress/archivers/dump/DumpArchiveInputStream.java     | 4 ++++
 .../commons/compress/archivers/sevenz/SevenZFile.java       | 6 ++++++
 .../commons/compress/archivers/sevenz/SevenZOutputFile.java | 6 +++++-
 .../compress/archivers/tar/TarArchiveInputStream.java       | 4 ++++
 .../compress/archivers/tar/TarArchiveOutputStream.java      | 5 ++++-
 .../compress/archivers/zip/ZipArchiveOutputStream.java      | 3 +++
 8 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 844617cac15..31e74d65a23 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -59,6 +59,10 @@ The <action> type attribute can be add,update,fix,remove.
         IOUtils#skip might skip fewer bytes than requested even though
         more could be read from the stream.
       </action>
+      <action type="add" date="2014-04-13" issue="COMPRESS-276">
+        ArchiveStreams now validate there is a current entry before
+        rreading or writing entry data.
+      </action>
     </release>
     <release version="1.8" date="2014-03-12"
              description="Release 1.8">
diff --git a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
index f99aa0da441..a508fedebd8 100644
--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
@@ -341,6 +341,9 @@ public boolean canReadEntryData(ArchiveEntry ae) {
     
     @Override
     public int read(final byte[] b, final int off, final int len) throws IOException {
+        if (currentLocalFileHeader == null) {
+            throw new IllegalStateException("No current arj entry");
+        }
         if (currentLocalFileHeader.method != LocalFileHeader.Methods.STORED) {
             throw new IOException("Unsupported compression method " + currentLocalFileHeader.method);
         }
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
index 0f804545da3..bf411e37a0e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
@@ -465,6 +465,10 @@ public int read(byte[] buf, int off, int len) throws IOException {
             return -1;
         }
 
+        if (active == null) {
+            throw new IllegalStateException("No current dump entry");
+        }
+
         if (len + entryOffset > entrySize) {
             len = (int) (entrySize - entryOffset);
         }
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
index e1502e2ce71..ae350b6240a 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
@@ -871,6 +871,9 @@ private InputStream buildDecoderStack(final Folder folder, final long folderOffs
      *             if an I/O error has occurred
      */
     public int read() throws IOException {
+        if (currentEntryInputStream == null) {
+            throw new IllegalStateException("No current 7z entry");
+        }
         return currentEntryInputStream.read();
     }
     
@@ -897,6 +900,9 @@ public int read(byte[] b) throws IOException {
      *             if an I/O error has occurred
      */
     public int read(byte[] b, int off, int len) throws IOException {
+        if (currentEntryInputStream == null) {
+            throw new IllegalStateException("No current 7z entry");
+        }
         return currentEntryInputStream.read(b, off, len);
     }
     
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
index b99cf4e9f46..84d1431b837 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
@@ -181,7 +181,7 @@ public void closeArchiveEntry() throws IOException {
         compressedCrc32.reset();
         fileBytesWritten = 0;
     }
-    
+
     /**
      * Writes a byte to the current archive entry.
      * @param b The byte to be written.
@@ -272,6 +272,10 @@ private OutputStream getCurrentOutputStream() throws IOException {
     }
 
     private CountingOutputStream setupFileOutputStream() throws IOException {
+        if (files.isEmpty()) {
+            throw new IllegalStateException("No current 7z entry");
+        }
+
         OutputStream out = new OutputStreamWrapper();
         ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();
         boolean first = true;
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index d79eb8aaf62..fe2c1133b22 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -573,6 +573,10 @@ public int read(byte[] buf, int offset, int numToRead) throws IOException {
             return -1;
         }
 
+        if (currEntry == null) {
+            throw new IllegalStateException("No current tar entry");
+        }
+
         numToRead = Math.min(numToRead, available());
         
         totalRead = is.read(buf, offset, numToRead);
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index cd7368ae5bd..2a5d59101d4 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -265,7 +265,7 @@ public int getRecordSize() {
      */
     @Override
     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
-        if(finished) {
+        if (finished) {
             throw new IOException("Stream has already been finished");
         }
         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
@@ -369,6 +369,9 @@ public void closeArchiveEntry() throws IOException {
      */
     @Override
     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
+        if (!haveUnclosedEntry) {
+            throw new IllegalStateException("No current tar entry");
+        }
         if (currBytes + numToWrite > currSize) {
             throw new IOException("request to write '" + numToWrite
                                   + "' bytes exceeds size in header of '"
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
index 12a1c66e710..20985faa6b5 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
@@ -753,6 +753,9 @@ public boolean canWriteEntryData(ArchiveEntry ae) {
      */
     @Override
     public void write(byte[] b, int offset, int length) throws IOException {
+        if (entry == null) {
+            throw new IllegalStateException("No current entry");
+        }
         ZipUtil.checkRequestedFeatures(entry.entry);
         entry.hasWritten = true;
         if (entry.entry.getMethod() == DEFLATED) {
