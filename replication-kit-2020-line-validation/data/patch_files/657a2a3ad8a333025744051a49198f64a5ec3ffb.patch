From 657a2a3ad8a333025744051a49198f64a5ec3ffb Mon Sep 17 00:00:00 2001
From: Ralph Goers <rgoers@apache.org>
Date: Sat, 24 Sep 2011 08:07:53 +0000
Subject: [PATCH] Apply patch for VFS-325

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1175125 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/local/LocalFile.java        | 20 +++-
 .../vfs2/provider/local/LocalFileName.java    | 92 +++++++++++++++++++
 .../local/test/LocalProviderTestCase.java     |  4 +
 .../vfs2/provider/local/test/UrlTests.java    | 74 +++++++++++++++
 .../resources/test-data/test-hash-#test.txt   |  1 +
 src/changes/changes.xml                       |  3 +
 6 files changed, 193 insertions(+), 1 deletion(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs2/provider/local/test/UrlTests.java
 create mode 100644 core/src/test/resources/test-data/test-hash-#test.txt

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
index c9ce1ed6fe..230c6757b1 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
@@ -256,6 +256,24 @@ protected boolean doIsSameFile(FileObject destFile) throws FileSystemException
         {
             throw new FileSystemException(e);
         }
-
+    }
+    
+    /**
+     * Returns the URI of the file.
+     * @return The URI of the file.
+     */
+    @Override
+    public String toString()
+    {
+        try
+        {
+            // VFS-325: URI may contain percent-encoded values as part of filename, so decode
+            // those characters before returning
+            return UriParser.decode(getName().getURI());
+        }
+        catch(FileSystemException e)
+        {
+            return getName().getURI();
+        }
     }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileName.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileName.java
index 31a5195ab9..d8c2d506d8 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileName.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileName.java
@@ -18,7 +18,9 @@
 
 import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.provider.AbstractFileName;
+import org.apache.commons.vfs2.provider.UriParser;
 
 /**
  * A local file URI.
@@ -27,6 +29,21 @@
  */
 public class LocalFileName extends AbstractFileName
 {
+    // URI Characters that are possible in local filenames, but must be escaped 
+    // for proper URI handling.
+    //
+    // How reserved URI chars were selected:
+    //
+    //  URIs can contain :, /, ?, #, @ 
+    //      See http://download.oracle.com/javase/6/docs/api/java/net/URI.html
+    //          http://tools.ietf.org/html/rfc3986#section-2.2
+    //
+    //  Since : and / occur before the path, only chars after path are escaped (i.e., # and ?)
+    //  ? is a reserved filesystem character for Windows and Unix, so can't be part of a filename.
+    //  Therefore only # is a reserved char in a URI as part of the path that can be in the filename.
+    private static final char RESERVED_URI_CHARS[] = {'#'};
+
+    
     private final String rootFile;
 
     protected LocalFileName(final String scheme,
@@ -58,6 +75,81 @@ public FileName createName(final String path, FileType type)
     {
         return new LocalFileName(getScheme(), rootFile, path, type);
     }
+    
+    /**
+     * Returns the absolute URI of the file.
+     * @return The absolute URI of the file.
+     */
+    @Override
+    public String getURI()
+    {
+        String uri = super.getURI();
+        
+        if (uri != null && uri.length() > 0)
+        {
+            try
+            {
+                // VFS-325: Handle URI special characters in filename
+                // Decode the base uri and re-encode with URI special characters
+                uri = UriParser.decode(uri);
+                
+                uri = UriParser.encode(uri, RESERVED_URI_CHARS);
+            }
+            catch(FileSystemException e)
+            {
+                // Default to base uri value
+            }
+        }
+        
+        return uri;
+    }    
+    
+    /**
+     * returns a "friendly path", this is a path without a password.
+     * @return The "friendly" URI.
+     */
+    @Override
+    public String getFriendlyURI()
+    {
+        String uri = super.getFriendlyURI();
+        
+        if (uri != null && uri.length() > 0)
+        {
+            try
+            {
+                // VFS-325: Handle URI special characters in filename
+                // Decode the base uri and re-encode with URI special characters
+                uri = UriParser.decode(uri);
+                
+                uri = UriParser.encode(uri, RESERVED_URI_CHARS);
+            }
+            catch(FileSystemException e)
+            {
+                // Default to base uri value
+            }
+        }
+        
+        return uri;
+    }
+    
+    /**
+     * Returns the decoded URI of the file.
+     * @return the FileName as a URI.
+     */
+    @Override
+    public String toString()
+    {
+        try
+        {
+            return UriParser.decode(super.getURI());
+        }
+        catch(FileSystemException e)
+        {
+            return super.getURI();
+        }
+    }
+    
+    
 
     /**
      * Builds the root URI for this file name.
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
index b366f1ed39..9d30dacc4f 100644
--- a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/LocalProviderTestCase.java
@@ -43,6 +43,10 @@ public static Test suite() throws Exception
     {
         final ProviderTestSuite testSuite = new ProviderTestSuite(new LocalProviderTestCase());
         testSuite.addTests(FileNameTests.class);
+        
+        // VFS-325
+        testSuite.addTests(UrlTests.class);
+        
         return testSuite;
     }
 
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/UrlTests.java b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/UrlTests.java
new file mode 100644
index 0000000000..2d77ae8243
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/UrlTests.java
@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2.provider.local.test;
+
+import java.io.File;
+import java.net.URL;
+
+import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.FileSelectInfo;
+import org.apache.commons.vfs2.FileSelector;
+import org.apache.commons.vfs2.FileSystemManager;
+import org.apache.commons.vfs2.provider.UriParser;
+import org.apache.commons.vfs2.Selectors;
+import org.apache.commons.vfs2.VFS;
+import org.apache.commons.vfs2.test.AbstractProviderTestCase;
+
+/**
+ * Additional URL tests for local file system.
+ *
+ * @version $Revision$ $Date$
+ */
+public class UrlTests
+    extends AbstractProviderTestCase
+{
+    /**
+     * Tests resolution of an absolute file name.
+     */
+    public void testHashURL() throws Exception
+    {
+        final FileObject file = getReadFolder().resolveFile("test-hash-#test.txt");
+        
+        assertEquals(file.toString(), UriParser.decode(file.getURL().toString()));
+    }
+
+    /**
+     * Tests FindFiles with a filename that has a hash sign in it.
+     */
+    public void testHashFindFiles() throws Exception
+    {
+        FileSystemManager fsManager = VFS.getManager();
+        
+        FileObject[] foList = getBaseFolder().findFiles(Selectors.SELECT_FILES);
+        
+        boolean hashFileFound = false;
+        for (FileObject fo : foList)
+        {
+            if (fo.getURL().toString().contains("test-hash"))
+            {
+                hashFileFound = true;
+
+                assertEquals(fo.toString(), UriParser.decode(fo.getURL().toString()));
+            }
+        }
+        
+        if (!hashFileFound)
+        {
+            fail("Test hash file containing 'test-hash' not found");
+        }
+    }
+}
diff --git a/core/src/test/resources/test-data/test-hash-#test.txt b/core/src/test/resources/test-data/test-hash-#test.txt
new file mode 100644
index 0000000000..8deb37dd6d
--- /dev/null
+++ b/core/src/test/resources/test-data/test-hash-#test.txt
@@ -0,0 +1 @@
+Test file for VFS-325: Bad handling of hashs (#) in file names when walking a file tree using findFiles().
\ No newline at end of file
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d4d4f006e9..069b49a76e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,9 @@
 
   <body>
     <release version="2.1" date="TBD" description="">
+      <action issue="VFS-325" dev="rgoers" type="fix" due-to="Larry Reeve">
+        Allow # character in file names.
+      </action>
       <action issue="VFS-335" dev="rgoers" type="fix">
         Use atomic variables in MonitorInputStream.
       </action>
