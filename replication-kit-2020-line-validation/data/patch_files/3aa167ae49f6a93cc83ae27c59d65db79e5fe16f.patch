From 3aa167ae49f6a93cc83ae27c59d65db79e5fe16f Mon Sep 17 00:00:00 2001
From: Avery Ching <aching@apache.org>
Date: Tue, 10 Jul 2012 09:31:35 +0000
Subject: [PATCH] GIRAPH-239: IntIntNullIntVertex doesn't save halted state
 (apresta via aching)

git-svn-id: https://svn.apache.org/repos/asf/giraph/trunk@1359536 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG                                     |  3 +
 .../giraph/graph/IntIntNullIntVertex.java     |  5 +-
 .../giraph/graph/TestIntIntNullIntVertex.java | 86 +++++++++++++++++++
 3 files changed, 92 insertions(+), 2 deletions(-)
 create mode 100644 src/test/java/org/apache/giraph/graph/TestIntIntNullIntVertex.java

diff --git a/CHANGELOG b/CHANGELOG
index df1bbe264..175749d0e 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -2,6 +2,9 @@ Giraph Change Log
 
 Release 0.2.0 - unreleased
 
+  GIRAPH-239: IntIntNullIntVertex doesn't save halted state (apresta
+  via aching)
+
   GIRAPH-238: BasicVertex should have default Writable implementation
   (apresta via aching)
 
diff --git a/src/main/java/org/apache/giraph/graph/IntIntNullIntVertex.java b/src/main/java/org/apache/giraph/graph/IntIntNullIntVertex.java
index 8dfc5ebd3..217dcb166 100644
--- a/src/main/java/org/apache/giraph/graph/IntIntNullIntVertex.java
+++ b/src/main/java/org/apache/giraph/graph/IntIntNullIntVertex.java
@@ -18,12 +18,11 @@
 
 package org.apache.giraph.graph;
 
+import com.google.common.collect.Iterables;
 import org.apache.giraph.utils.UnmodifiableIntArrayIterator;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.NullWritable;
 
-import com.google.common.collect.Iterables;
-
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
@@ -156,6 +155,7 @@ public void write(final DataOutput out) throws IOException {
     for (int n = 0; n < messages.length; n++) {
       out.writeInt(messages[n]);
     }
+    out.writeBoolean(halt);
   }
 
   @Override
@@ -172,6 +172,7 @@ public void readFields(DataInput in) throws IOException {
     for (int n = 0; n < numMessages; n++) {
       messages[n] = in.readInt();
     }
+    halt = in.readBoolean();
   }
 
 }
diff --git a/src/test/java/org/apache/giraph/graph/TestIntIntNullIntVertex.java b/src/test/java/org/apache/giraph/graph/TestIntIntNullIntVertex.java
new file mode 100644
index 000000000..f3660c346
--- /dev/null
+++ b/src/test/java/org/apache/giraph/graph/TestIntIntNullIntVertex.java
@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.giraph.graph;
+
+import org.apache.hadoop.io.IntWritable;
+import org.apache.hadoop.io.NullWritable;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+import com.google.common.collect.Lists;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Tests {@link IntIntNullIntVertex}.
+ */
+public class TestIntIntNullIntVertex {
+  /**
+   * Simple instantiable class that extends {@link IntIntNullIntVertex}.
+   */
+  private static class MyIntIntNullVertex extends IntIntNullIntVertex {
+    @Override
+    public void compute(Iterator<IntWritable> msgIterator) throws IOException {
+    }
+  }
+
+  @Test
+  public void testSerialize() throws IOException {
+    IntIntNullIntVertex vertex = new MyIntIntNullVertex();
+
+    Map<IntWritable, NullWritable> edges =
+        new HashMap<IntWritable, NullWritable>();
+    edges.put(new IntWritable(3), NullWritable.get());
+    edges.put(new IntWritable(47), NullWritable.get());
+
+    List<IntWritable> messages = Lists.newArrayList(new IntWritable(943),
+        new IntWritable(571));
+
+    vertex.initialize(new IntWritable(23), new IntWritable(7), edges,
+        messages);
+    vertex.voteToHalt();
+
+    ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+    DataOutput out = new DataOutputStream(outStream);
+    vertex.write(out);
+
+    IntIntNullIntVertex vertex1 = new MyIntIntNullVertex();
+
+    ByteArrayInputStream inStream = new ByteArrayInputStream(
+        outStream.toByteArray());
+    DataInput in = new DataInputStream(inStream);
+    vertex1.readFields(in);
+
+    assertEquals(2, vertex1.getNumOutEdges());
+    assertEquals(Lists.newArrayList(new IntWritable(943),
+        new IntWritable(571)), Lists.newArrayList(vertex1.getMessages()));
+    assertEquals(true, vertex1.isHalted());
+  }
+}
