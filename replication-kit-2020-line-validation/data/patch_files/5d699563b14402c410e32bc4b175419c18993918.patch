From 5d699563b14402c410e32bc4b175419c18993918 Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Fri, 18 Nov 2011 07:42:12 +0000
Subject: [PATCH] Fixed BigFraction percentage method which did not work at
 all.

JIRA: MATH-709

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1203516 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/math/fraction/BigFraction.java    |  4 ++--
 .../org/apache/commons/math/fraction/Fraction.java   | 12 ++++++++++++
 src/site/xdoc/changes.xml                            |  3 +++
 .../commons/math/fraction/BigFractionTest.java       |  5 +++++
 .../apache/commons/math/fraction/FractionTest.java   |  5 +++++
 5 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/fraction/BigFraction.java b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
index 62a32f0cbf..973144268c 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
@@ -85,7 +85,7 @@ public class BigFraction
     private static final long serialVersionUID = -5630213147331578515L;
 
     /** <code>BigInteger</code> representation of 100. */
-    private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);
+    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);
 
     /** The numerator. */
     private final BigInteger numerator;
@@ -923,7 +923,7 @@ public BigFraction negate() {
      * @return the fraction percentage as a <tt>double</tt>.
      */
     public double percentageValue() {
-        return (numerator.divide(denominator)).multiply(ONE_HUNDRED_DOUBLE).doubleValue();
+        return multiply(ONE_HUNDRED).doubleValue();
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math/fraction/Fraction.java b/src/main/java/org/apache/commons/math/fraction/Fraction.java
index 3dabbf76cc..c8f0201ca5 100644
--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java
@@ -585,6 +585,18 @@ public Fraction divide(final int i) {
         return new Fraction(numerator, denominator * i);
     }
 
+    /**
+     * <p>
+     * Gets the fraction percentage as a <tt>double</tt>. This calculates the
+     * fraction as the numerator divided by denominator multiplied by 100.
+     * </p>
+     *
+     * @return the fraction percentage as a <tt>double</tt>.
+     */
+    public double percentageValue() {
+        return multiply(100).doubleValue();
+    }
+
     /**
      * <p>Creates a {@code Fraction} instance with the 2 parts
      * of a fraction Y/Z.</p>
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 10d1fcfd16..3691526bf3 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,9 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-709">
+        Fixed BigFraction percentage method which did not work at all.
+      </action>
       <action dev="erans" type="update" issue="MATH-697">
         Added interface and abstract class for supporting optimizers classes
         that can take simple constraints into account.
diff --git a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
index 9a542dd84f..42051ca8a3 100644
--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
@@ -557,6 +557,11 @@ public void testGetReducedFraction() {
         Assert.assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);
     }
 
+    @Test
+    public void testPercentage() {
+        Assert.assertEquals(50.0, new BigFraction(1, 2).percentageValue(), 1.0e-15);
+    }
+
     @Test
     public void testPow() {
         Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));
diff --git a/src/test/java/org/apache/commons/math/fraction/FractionTest.java b/src/test/java/org/apache/commons/math/fraction/FractionTest.java
index 124c9ac89d..f6413ba7c3 100644
--- a/src/test/java/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/FractionTest.java
@@ -237,6 +237,11 @@ public void testAbs() {
         assertFraction(10, 21, c.abs());
     }
 
+    @Test
+    public void testPercentage() {
+        Assert.assertEquals(50.0, new Fraction(1, 2).percentageValue(), 1.0e-15);
+    }
+
     @Test
     public void testReciprocal() {
         Fraction f = null;
