From 5ab06da27113785edd51ee465f5b8015c21f2cd9 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 18 Apr 2014 14:13:44 +0000
Subject: [PATCH] COMPRESS-273 sprinkle in a few null checks

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1588476 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +++
 .../archivers/cpio/CpioArchiveEntry.java      |  5 ++++-
 .../zip/AbstractUnicodeExtraField.java        |  2 +-
 .../archivers/zip/ExtraFieldUtils.java        | 22 ++++++++++++++-----
 .../archivers/zip/UnrecognizedExtraField.java |  2 +-
 5 files changed, 25 insertions(+), 9 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 96a0d8951dd..22a8ce58dd8 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -71,6 +71,9 @@ The <action> type attribute can be add,update,fix,remove.
         ChangeSet#delete and deleteDir now properly deal with unnamed
         entries.
       </action>
+      <action type="fix" date="2014-04-13" issue="COMPRESS-273">
+        Added a few null checks to improve robustness.
+      </action>
     </release>
     <release version="1.8" date="2014-03-12"
              description="Release 1.8">
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
index 75170db27fd..4ea1a54e6bc 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
@@ -469,7 +469,10 @@ public int getAlignmentBoundary() {
      */
     public int getHeaderPadCount(){
         if (this.alignmentBoundary == 0) { return 0; }
-        int size = this.headerSize+this.name.length()+1; // Name has terminating null
+        int size = this.headerSize + 1;  // Name has terminating null
+        if (name != null) {
+            size += name.length();
+        }
         int remain = size % this.alignmentBoundary;
         if (remain > 0){
             return this.alignmentBoundary - remain;
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java
index a0a76f1149f..4dbfc40fd99 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java
@@ -143,7 +143,7 @@ public ZipShort getCentralDirectoryLength() {
         if (data == null) {
             assembleData();
         }
-        return new ZipShort(data.length);
+        return new ZipShort(data != null ? data.length : 0);
     }
 
     public byte[] getLocalFileDataData() {
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
index b2fa1dde791..21cddf384e7 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
@@ -210,13 +210,18 @@ public static byte[] mergeLocalFileDataData(ZipExtraField[] data) {
                              0, result, start, 2);
             System.arraycopy(data[i].getLocalFileDataLength().getBytes(),
                              0, result, start + 2, 2);
+            start += WORD;
             byte[] local = data[i].getLocalFileDataData();
-            System.arraycopy(local, 0, result, start + WORD, local.length);
-            start += local.length + WORD;
+            if (local != null) {
+                System.arraycopy(local, 0, result, start, local.length);
+                start += local.length;
+            }
         }
         if (lastIsUnparseableHolder) {
             byte[] local = data[data.length - 1].getLocalFileDataData();
-            System.arraycopy(local, 0, result, start, local.length);
+            if (local != null) {
+                System.arraycopy(local, 0, result, start, local.length);
+            }
         }
         return result;
     }
@@ -243,13 +248,18 @@ public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) {
                              0, result, start, 2);
             System.arraycopy(data[i].getCentralDirectoryLength().getBytes(),
                              0, result, start + 2, 2);
+            start += WORD;
             byte[] local = data[i].getCentralDirectoryData();
-            System.arraycopy(local, 0, result, start + WORD, local.length);
-            start += local.length + WORD;
+            if (local != null) {
+                System.arraycopy(local, 0, result, start, local.length);
+                start += local.length;
+            }
         }
         if (lastIsUnparseableHolder) {
             byte[] local = data[data.length - 1].getCentralDirectoryData();
-            System.arraycopy(local, 0, result, start, local.length);
+            if (local != null) {
+                System.arraycopy(local, 0, result, start, local.length);
+            }
         }
         return result;
     }
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
index e0bdf199d60..d6a2d7718f2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
@@ -69,7 +69,7 @@ public void setLocalFileDataData(byte[] data) {
      * @return the length of the local data
      */
     public ZipShort getLocalFileDataLength() {
-        return new ZipShort(localData.length);
+        return new ZipShort(localData != null ? localData.length : 0);
     }
 
     /**
