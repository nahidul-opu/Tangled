From aed56110ff582b96aecf7675a9cfe5247ffa3e7d Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 21 Feb 2014 14:21:12 +0000
Subject: [PATCH] COMPRESS-264 make sure the very first read operation actually
 fills the ByteBuffer

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1570582 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                      | 5 +++++
 .../compress/archivers/zip/ZipArchiveInputStream.java        | 2 ++
 .../compress/archivers/zip/ZipArchiveInputStreamTest.java    | 4 ++--
 .../apache/commons/compress/archivers/zip/ZipFileTest.java   | 2 +-
 4 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index c8712e47929..807f65cf19a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -67,6 +67,11 @@ The <action> type attribute can be add,update,fix,remove.
         implementations that encode big numbers by not adding a
         trailing NUL.
       </action>
+      <action issue="COMPRESS-264" type="fix" date="2014-02-21">
+        ZipArchiveInputStream would return NUL bytes for the first 512
+        bytes of a STORED entry if it was the very first entry of the
+        archive.
+      </action>
     </release>
     <release version="1.7" date="2014-01-20"
              description="Release 1.7">
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 202eeb691ba..9a3aa37fbb0 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -180,6 +180,8 @@ public ZipArchiveInputStream(InputStream inputStream,
         in = new PushbackInputStream(inputStream, buf.capacity());
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
+        // haven't read anything so far
+        buf.limit(0);
     }
 
     public ZipArchiveEntry getNextZipEntry() throws IOException {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
index 567b756b455..1120a371162 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
@@ -156,8 +156,8 @@ public void testUnshrinkEntry() throws Exception {
      * <a href="https://issues.apache.org/jira/browse/COMPRESS-264"
      * >COMPRESS-264</a>.
      */
-    //@Test
-    public void testCompress264() throws Exception {
+    @Test
+    public void testReadingOfFirstStoredEntry() throws Exception {
         ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile("COMPRESS-264.zip")));
         
         try {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
index c4dc01e65dd..07acc38f59e 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
@@ -263,7 +263,7 @@ public void testUnshrinking() throws Exception {
      * <a href="https://issues.apache.org/jira/browse/COMPRESS-264"
      * >COMPRESS-264</a>.
      */
-    public void testCompress264() throws Exception {
+    public void testReadingOfFirstStoredEntry() throws Exception {
         File archive = getFile("COMPRESS-264.zip");
         zf = new ZipFile(archive);
         ZipArchiveEntry ze = zf.getEntry("test.txt");
