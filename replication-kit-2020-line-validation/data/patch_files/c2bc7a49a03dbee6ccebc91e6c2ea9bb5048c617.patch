From c2bc7a49a03dbee6ccebc91e6c2ea9bb5048c617 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 23 Mar 2012 13:47:59 +0000
Subject: [PATCH] properly parse non-ASCII content in PAX extension headers. 
 COMPRESS-184

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1304345 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../archivers/tar/TarArchiveInputStream.java  | 39 +++++++------------
 .../tar/TarArchiveInputStreamTest.java        | 19 +++++++--
 3 files changed, 33 insertions(+), 29 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 45e8c484d09..594c81ebfa5 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -46,6 +46,10 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <release version="1.4" date="unreleased"
              description="Release 1.4">
+      <action issue="COMPRESS-184" type="fix" date="2012-03-22">
+        TarArchiveInputStream failed to parse PAX headers that
+        contained non-ASCII characters.
+      </action> 
       <action issue="COMPRESS-182" type="update" date="2012-03-02">
         The tar package can now write archives that use star/GNU/BSD
         extensions or use the POSIX/PAX variant to store numeric
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index b2b0ce96341..2f03c1c222a 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -23,10 +23,10 @@
 
 package org.apache.commons.compress.archivers.tar;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.Reader;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -311,57 +311,44 @@ private byte[] getRecord() throws IOException {
     }
 
     private void paxHeaders() throws IOException{
-        Reader br = new InputStreamReader(this, "UTF-8") {
-                @Override
-                public void close() {
-                    // make sure GC doesn't close "this" before we are done
-                }
-            };
-        Map<String, String> headers = null;
-        try {
-            headers = parsePaxHeaders(br);
-        } finally {
-            // NO-OP but makes FindBugs happy
-            br.close();
-        }
-
+        Map<String, String> headers = parsePaxHeaders(this);
         getNextEntry(); // Get the actual file entry
         applyPaxHeadersToCurrentEntry(headers);
     }
 
-    Map<String, String> parsePaxHeaders(Reader br) throws IOException {
+    Map<String, String> parsePaxHeaders(InputStream i) throws IOException {
         Map<String, String> headers = new HashMap<String, String>();
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
-            while((ch = br.read()) != -1){
+            while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){ // End of length string
                     // Get keyword
-                    StringBuffer sb = new StringBuffer();
-                    while((ch = br.read()) != -1){
+                    ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                    while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
-                            String keyword = sb.toString();
+                            String keyword = coll.toString("UTF-8");
                             // Get rest of entry
-                            char[] cbuf = new char[len-read];
-                            int got = br.read(cbuf);
+                            byte[] rest = new byte[len - read];
+                            int got = i.read(rest);
                             if (got != len - read){
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + (len - read)
-                                                      + " chars, read "
+                                                      + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
-                            String value = new String(cbuf, 0,
-                                                      len - read - 1);
+                            String value = new String(rest, 0,
+                                                      len - read - 1, "UTF-8");
                             headers.put(keyword, value);
                             break;
                         }
-                        sb.append((char) ch);
+                        coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
index a68084d69de..35a40556ead 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
@@ -18,9 +18,9 @@
 
 package org.apache.commons.compress.archivers.tar;
 
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.StringReader;
 import java.net.URI;
 import java.net.URL;
 import java.util.Calendar;
@@ -36,7 +36,8 @@ public class TarArchiveInputStreamTest {
     @Test
     public void readSimplePaxHeader() throws Exception {
         Map<String, String> headers = new TarArchiveInputStream(null)
-            .parsePaxHeaders(new StringReader("30 atime=1321711775.972059463\n"));
+            .parsePaxHeaders(new ByteArrayInputStream("30 atime=1321711775.972059463\n"
+                                                      .getBytes("UTF-8")));
         assertEquals(1, headers.size());
         assertEquals("1321711775.972059463", headers.get("atime"));
     }
@@ -44,11 +45,23 @@ public void readSimplePaxHeader() throws Exception {
     @Test
     public void readPaxHeaderWithEmbeddedNewline() throws Exception {
         Map<String, String> headers = new TarArchiveInputStream(null)
-            .parsePaxHeaders(new StringReader("28 comment=line1\nline2\nand3\n"));
+            .parsePaxHeaders(new ByteArrayInputStream("28 comment=line1\nline2\nand3\n"
+                                                      .getBytes("UTF-8")));
         assertEquals(1, headers.size());
         assertEquals("line1\nline2\nand3", headers.get("comment"));
     }
 
+    @Test
+    public void readNonAsciiPaxHeader() throws Exception {
+        String ae = "\u00e4";
+        String line = "11 path="+ ae + "\n";
+        assertEquals(11, line.getBytes("UTF-8").length);
+        Map<String, String> headers = new TarArchiveInputStream(null)
+            .parsePaxHeaders(new ByteArrayInputStream(line.getBytes("UTF-8")));
+        assertEquals(1, headers.size());
+        assertEquals(ae, headers.get("path"));
+    }
+
     @Test
     public void workaroundForBrokenTimeHeader() throws Exception {
         URL tar = getClass().getResource("/simple-aix-native-tar.tar");
