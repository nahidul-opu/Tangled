From 5ea36c4310a778e152e3b4e2b01226aa00d9dcac Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Sat, 3 Mar 2007 20:18:14 +0000
Subject: [PATCH] CONFIGURATION-255: Updated handling of list delimiter parsing
 in DatabaseConfiguration

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@514234 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  3 +
 conf/dataset.xml                              |  6 +-
 .../configuration/DatabaseConfiguration.java  | 62 +++++++++++++++----
 .../TestDatabaseConfiguration.java            | 41 ++++++++++++
 xdocs/changes.xml                             |  4 ++
 5 files changed, 102 insertions(+), 14 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 9c177c75f4..4245cfe797 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -90,6 +90,9 @@ BUG FIXES IN 1.4
   configuration. So when the clone was modified and then saved the content of
   the original configuration was written. This has now been fixed.
 
+* [CONFIGURATION-255]
+  DatabaseConfiguration now handles list delimiters in property values
+  correctly.
 
 IMPROVEMENTS IN 1.4
 ===================
diff --git a/conf/dataset.xml b/conf/dataset.xml
index 74b810a0cc..f0214ed6b4 100644
--- a/conf/dataset.xml
+++ b/conf/dataset.xml
@@ -14,7 +14,11 @@
         <row>
             <value>key2</value>
             <value>value2</value>
-        </row>		
+        </row>
+        <row>
+            <value>keyMulti</value>
+            <value>a;b;c</value>
+        </row>
     </table>
 
     <table name="configurations">
diff --git a/src/java/org/apache/commons/configuration/DatabaseConfiguration.java b/src/java/org/apache/commons/configuration/DatabaseConfiguration.java
index ffc364d27e..06b96c6f4d 100644
--- a/src/java/org/apache/commons/configuration/DatabaseConfiguration.java
+++ b/src/java/org/apache/commons/configuration/DatabaseConfiguration.java
@@ -29,6 +29,7 @@
 
 import javax.sql.DataSource;
 
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.logging.LogFactory;
 
 /**
@@ -110,7 +111,9 @@ public Object getProperty(String key)
         Object result = null;
 
         // build the query
-        StringBuffer query = new StringBuffer("SELECT * FROM " + table + " WHERE " + keyColumn + "=?");
+        StringBuffer query = new StringBuffer("SELECT * FROM ");
+        query.append(table).append(" WHERE ");
+        query.append(keyColumn).append("=?");
         if (nameColumn != null)
         {
             query.append(" AND " + nameColumn + "=?");
@@ -133,22 +136,25 @@ public Object getProperty(String key)
 
             ResultSet rs = pstmt.executeQuery();
 
-            if (rs.next())
+            List results = new ArrayList();
+            while (rs.next())
             {
-                result = rs.getObject(valueColumn);
+                Object val = rs.getObject(valueColumn);
+                if (isDelimiterParsingDisabled())
+                {
+                    results.add(val);
+                }
+                else
+                {
+                    // Split value if it containts the list delimiter
+                    CollectionUtils.addAll(results, PropertyConverter
+                            .toIterator(val, getListDelimiter()));
+                }
             }
 
-            // build a list if there is more than one row in the resultset
-            if (rs.next())
+            if (!results.isEmpty())
             {
-                List results = new ArrayList();
-                results.add(result);
-                results.add(rs.getObject(valueColumn));
-                while (rs.next())
-                {
-                    results.add(rs.getObject(valueColumn));
-                }
-                result = results;
+                result = (results.size() > 1) ? results : results.get(0);
             }
         }
         catch (SQLException e)
@@ -216,6 +222,36 @@ protected void addPropertyDirect(String key, Object obj)
         }
     }
 
+    /**
+     * Adds a property to this configuration. This implementation will
+     * temporarily disable list delimiter parsing, so that even if the value
+     * contains the list delimiter, only a single record will be written into
+     * the managed table. The implementation of <code>getProperty()</code>
+     * will take care about delimiters. So list delimiters are fully supported
+     * by <code>DatabaseConfiguration</code>, but internally treated a bit
+     * differently.
+     *
+     * @param key the key of the new property
+     * @param value the value to be added
+     */
+    public void addProperty(String key, Object value)
+    {
+        boolean parsingFlag = isDelimiterParsingDisabled();
+        try
+        {
+            if (value instanceof String)
+            {
+                // temporarily disable delimiter parsing
+                setDelimiterParsingDisabled(true);
+            }
+            super.addProperty(key, value);
+        }
+        finally
+        {
+            setDelimiterParsingDisabled(parsingFlag);
+        }
+    }
+
     /**
      * Checks if this configuration is empty. If this causes a database error,
      * an error event will be generated of type <code>EVENT_READ_PROPERTY</code>
diff --git a/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java b/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
index 1fddebe012..90dc5b2ff6 100644
--- a/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
@@ -435,6 +435,47 @@ public void testGetKeysError()
         assertFalse("Iteration is not empty", it.hasNext());
     }
 
+    /**
+     * Tests obtaining a property as list whose value contains the list
+     * delimiter. Multiple values should be returned.
+     */
+    public void testGetListWithDelimiter()
+    {
+        DatabaseConfiguration config = setUpConfig();
+        config.setListDelimiter(';');
+        List values = config.getList("keyMulti");
+        assertEquals("Wrong number of list elements", 3, values.size());
+        assertEquals("Wrong list element 0", "a", values.get(0));
+        assertEquals("Wrong list element 2", "c", values.get(2));
+    }
+
+    /**
+     * Tests obtaining a property whose value contains the list delimiter when
+     * delimiter parsing is disabled.
+     */
+    public void testGetListWithDelimiterParsingDisabled()
+    {
+        DatabaseConfiguration config = setUpConfig();
+        config.setListDelimiter(';');
+        config.setDelimiterParsingDisabled(true);
+        assertEquals("Wrong value of property", "a;b;c", config
+                .getString("keyMulti"));
+    }
+
+    /**
+     * Tests adding a property containing the list delimiter. When this property
+     * is queried multiple values should be returned.
+     */
+    public void testAddWithDelimiter()
+    {
+        DatabaseConfiguration config = setUpConfig();
+        config.setListDelimiter(';');
+        config.addProperty("keyList", "1;2;3");
+        String[] values = config.getStringArray("keyList");
+        assertEquals("Wrong number of property values", 3, values.length);
+        assertEquals("Wrong value at index 1", "2", values[1]);
+    }
+
     /**
      * A specialized database configuration implementation that can be
      * configured to throw an exception when obtaining a connection. This way
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index b7b24a7793..5368042ee9 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.4-SNAPSHOT" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-255">
+        DatabaseConfiguration now handles list delimiters in property values
+        correctly.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-254" due-to="Carsten Kaiser">
         After cloning a XMLConfiguration there was still a connection to the
         original configuration. So when the clone was modified and then saved
