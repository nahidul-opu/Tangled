From 13d5958c79469d6657e614e2bb926ed21e4f4afc Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 6 Jan 2010 11:05:59 +0000
Subject: [PATCH] DBCP-318 is now fixed, so disable extra debug

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@896387 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/dbcp/TestConnectionPool.java      | 54 +++++++++----------
 1 file changed, 26 insertions(+), 28 deletions(-)

diff --git a/src/test/org/apache/commons/dbcp/TestConnectionPool.java b/src/test/org/apache/commons/dbcp/TestConnectionPool.java
index 3893b8909c..dd155b0dc4 100644
--- a/src/test/org/apache/commons/dbcp/TestConnectionPool.java
+++ b/src/test/org/apache/commons/dbcp/TestConnectionPool.java
@@ -739,24 +739,20 @@ public void uncaughtException(Thread t, Throwable e) {
                 if (expectError) {
                     // Perform initial sanity check:
                     assertTrue("Expected some of the threads to fail",failed > 0);
-                    /*
-                     * Half of the threads should fail; however currently this does not always happen for TestPerUserPoolDataSource. 
-                     * This appears to be due to the pool allowing more than max connections, rather than a test bug,
-                     * but this is not yet fully investigated, hence the extra debug below.
-                     */
-                    if (pts.length/2 != failed){
-                        for (int i = 0; i < pts.length; i++) {
-                            PoolTest pt = pts[i];
-                            System.out.println(
-                                    "StartupDelay: " + (pt.started-pt.created)
-                                    + ". ConnectTime: " + (pt.connected > 0 ? Long.toString(pt.connected-pt.started) : "-")
-                                    + ". Runtime: " + (pt.ended-pt.started)
-                                    + ". Loops: " + pt.loops
-                                    + ". State: " + pt.state
-                                    + ". thrown: "+ pt.thrown
-                                    );
-                        }                        
-                    }
+// DBCP-318 is now fixed, so disable extra debug
+//                    if (pts.length/2 != failed){
+//                        for (int i = 0; i < pts.length; i++) {
+//                            PoolTest pt = pts[i];
+//                            System.out.println(
+//                                    "StartupDelay: " + (pt.started-pt.created)
+//                                    + ". ConnectTime: " + (pt.connected > 0 ? Long.toString(pt.connected-pt.started) : "-")
+//                                    + ". Runtime: " + (pt.ended-pt.started)
+//                                    + ". Loops: " + pt.loops
+//                                    + ". State: " + pt.state
+//                                    + ". thrown: "+ pt.thrown
+//                                    );
+//                        }                        
+//                    }
                     assertEquals("WARNING: Expected half the threads to fail",pts.length/2,failed);
                 } else {
                     assertEquals("Did not expect any threads to fail",0,failed);
@@ -780,11 +776,13 @@ protected class PoolTest implements Runnable {
 
         private Throwable thrown;
 
-        private final long created; // When object was created
-        private long started; // when thread started
-        private long ended; // when thread ended
-        private long connected; // when thread last connected
-        private int loops = 0;
+        // Debug for DBCP-318
+//        private final long created; // When object was created
+//        private long started; // when thread started
+//        private long ended; // when thread ended
+//        private long connected; // when thread last connected
+//        private int loops = 0;
+
         private final boolean stopOnException; // If true, don't rethrow Exception
         
         private PoolTest(ThreadGroup threadGroup, int connHoldTime) {
@@ -799,7 +797,7 @@ public PoolTest(ThreadGroup threadGroup, int connHoldTime, boolean isStopOnExcep
             thread =
                 new Thread(threadGroup, this, "Thread+" + currentThreadCount++);
             thread.setDaemon(false);
-            created = System.currentTimeMillis();
+//            created = System.currentTimeMillis();
         }
 
         public void start(){
@@ -807,13 +805,13 @@ public void start(){
         }
 
         public void run() {
-            started = System.currentTimeMillis();
+//            started = System.currentTimeMillis();
             try {
                 while (isRun) {
-                    loops++;
+//                    loops++;
                     state = "Getting Connection";
                     Connection conn = getConnection();
-                    connected = System.currentTimeMillis();
+//                    connected = System.currentTimeMillis();
                     state = "Using Connection";
                     assertNotNull(conn);
                     PreparedStatement stmt =
@@ -839,7 +837,7 @@ public void run() {
                     throw new RuntimeException();
                 }
             } finally {
-                ended = System.currentTimeMillis();                
+//                ended = System.currentTimeMillis();                
             }
         }
 
