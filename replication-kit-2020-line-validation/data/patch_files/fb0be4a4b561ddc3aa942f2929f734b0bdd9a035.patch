From fb0be4a4b561ddc3aa942f2929f734b0bdd9a035 Mon Sep 17 00:00:00 2001
From: Isak W <isak.wertwein@gmail.com>
Date: Mon, 4 Dec 2017 15:38:24 +0100
Subject: [PATCH] IMAGING-209: Fix issue where PnmImageParser would throw
 ImageWriteException when writing if PnmImageParser.PARAM_KEY_PNM_RAWBITS is
 provided.

This closes #33
---
 .../imaging/formats/pnm/PnmImageParser.java   |  5 +++
 .../formats/pnm/PnmImageParserTest.java       | 32 +++++++++++++++++++
 2 files changed, 37 insertions(+)

diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PnmImageParser.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PnmImageParser.java
index c55e797fe..5528d84c9 100644
--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PnmImageParser.java
+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PnmImageParser.java
@@ -364,6 +364,11 @@ public void writeImage(final BufferedImage src, final OutputStream os, Map<Strin
         if (params.containsKey(PARAM_KEY_FORMAT)) {
             params.remove(PARAM_KEY_FORMAT);
         }
+
+        // clear rawbits key.
+        if (params.containsKey(PARAM_KEY_PNM_RAWBITS)) {
+            params.remove(PARAM_KEY_PNM_RAWBITS);
+        }
         
         if (!params.isEmpty()) {
             final Object firstKey = params.keySet().iterator().next();
diff --git a/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java b/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
index 693be926f..16fb996aa 100644
--- a/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
+++ b/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
@@ -16,17 +16,25 @@
  */
 package org.apache.commons.imaging.formats.pnm;
 
+import java.awt.image.BufferedImage;
+import java.awt.image.DataBufferInt;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.commons.imaging.ImageFormats;
 import org.apache.commons.imaging.ImageInfo;
 import org.apache.commons.imaging.ImageReadException;
+import org.apache.commons.imaging.ImageWriteException;
+import org.apache.commons.imaging.Imaging;
 import org.junit.Test;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class PnmImageParserTest {
 
@@ -44,6 +52,30 @@ public void testGetImageInfo_happyCase() throws ImageReadException, IOException
         assertEquals(results.getNumberOfImages(), 1);
     }
 
+    @Test
+    public void testWriteImageRaw_happyCase() throws ImageWriteException,
+                                                     ImageReadException, IOException {
+        BufferedImage srcImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB);
+        final Map<String, Object> params = new HashMap<>();
+        params.put(PnmImageParser.PARAM_KEY_PNM_RAWBITS, PnmImageParser.PARAM_VALUE_PNM_RAWBITS_YES);
+
+        final byte[] dstBytes = Imaging.writeImageToBytes(srcImage, ImageFormats.PNM, params);
+        final BufferedImage dstImage = Imaging.getBufferedImage(dstBytes);
+
+        assertTrue(srcImage.getWidth() == dstImage.getWidth());
+        assertTrue(srcImage.getHeight() == dstImage.getHeight());
+
+        DataBufferInt srcData = (DataBufferInt) srcImage.getRaster().getDataBuffer();
+        DataBufferInt dstData = (DataBufferInt) dstImage.getRaster().getDataBuffer();
+
+        for (int bank = 0; bank < srcData.getNumBanks(); bank++) {
+            int[] actual = srcData.getData(bank);
+            int[] expected = dstData.getData(bank);
+
+            assertArrayEquals(actual, expected);
+        }
+    }
+
     /**
      * If an invalid width is specified, should throw {@link ImageReadException} rather than
      * {@link NumberFormatException}.
