From 8428e16383bb3b071bda3760351cbf0b456dad37 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 26 May 2012 11:56:22 +0000
Subject: [PATCH] NET-467 - IMAPClient#fetch() does not handle literal strings

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1342888 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  3 +++
 .../java/org/apache/commons/net/imap/IMAP.java |  9 +++++++++
 .../org/apache/commons/net/imap/IMAPReply.java | 18 +++++++++++++++++-
 3 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 17b36b302..70854a444 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -65,6 +65,9 @@ The <action> type attribute can be add,update,fix,remove.
         <release version="3.2" date="TBA" description="
 TBA
         ">
+            <action issue="NET-467" dev="sebb" type="fix">
+            IMAPClient#fetch() does not handle literal strings.
+            </action>
             <action issue="NET-458" dev="sebb" type="fix" due-to="Denis Molony">
             MVSFTPEntryParser.parseSimpleEntry - ArrayIndexOutOfBoundsException.
             </action>
diff --git a/src/main/java/org/apache/commons/net/imap/IMAP.java b/src/main/java/org/apache/commons/net/imap/IMAP.java
index fb1dda584..aff68a56a 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAP.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAP.java
@@ -110,6 +110,15 @@ private void __getReply(boolean wantTag) throws IOException
 
         if (wantTag) {
             while(IMAPReply.isUntagged(line)) {
+                int literalCount = IMAPReply.literalCount(line);
+                while (literalCount >= 0) {
+                    line=_reader.readLine();
+                    if (line == null) {
+                        throw new EOFException("Connection closed without indication.");
+                    }
+                    _replyLines.add(line);
+                    literalCount -= (line.length() + 2); // Allow for CRLF
+                }
                 line = _reader.readLine();
                 if (line == null) {
                     throw new EOFException("Connection closed without indication.");
diff --git a/src/main/java/org/apache/commons/net/imap/IMAPReply.java b/src/main/java/org/apache/commons/net/imap/IMAPReply.java
index 64bb873fd..95e59b4bb 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAPReply.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAPReply.java
@@ -78,6 +78,7 @@ public static boolean isContinuation(String line) {
         return line.startsWith(IMAP_CONTINUATION_PREFIX);
     }
 
+    // TODO do we need trailing .* ?
     private static final String TAGGED_RESPONSE = "^\\w+ (\\S+).*"; // TODO perhaps be less strict on tag match?
     // tag cannot contain: + ( ) { SP CTL % * " \ ]
     private static final Pattern TAGGED_PATTERN = Pattern.compile(TAGGED_RESPONSE);
@@ -93,9 +94,24 @@ public static int getReplyCode(String line) throws IOException {
         return getReplyCode(line, TAGGED_PATTERN);
     }
 
-    private static final String UNTAGGED_RESPONSE = "^\\* (\\S+).*";
+    private static final String UNTAGGED_RESPONSE = "^\\* (\\S+).*"; // TODO do we need trailing .* ?
     private static final Pattern UNTAGGED_PATTERN = Pattern.compile(UNTAGGED_RESPONSE);
 
+    private static final Pattern LITERAL_PATTERN = Pattern.compile("\\{(\\d+)\\}$"); // {dd}
+
+    /**
+     * Checks if the line introduces a literal, i.e. ends with {dd}
+     * 
+     * @return the literal count, or -1 if there was no literal.
+     */
+    public static int literalCount(String line) {
+        Matcher m = LITERAL_PATTERN.matcher(line);
+        if (m.find()) {
+            return Integer.parseInt(m.group(1)); // Should always parse because we matched \d+
+        }
+        return -1;
+    }
+
     /**
      * Intepret the String reply code - OK, NO, BAD - in an untagged response as a integer.
      *
