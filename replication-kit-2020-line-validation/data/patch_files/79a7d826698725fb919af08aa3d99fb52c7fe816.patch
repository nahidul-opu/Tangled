From 79a7d826698725fb919af08aa3d99fb52c7fe816 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sun, 20 Jan 2013 19:10:24 +0000
Subject: [PATCH] COMPRESS-206 read second Tar-EOF record as well, if there is
 one.  Based on patch by Peter De Maeyer

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1435913 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   5 ++++
 .../archivers/tar/TarArchiveInputStream.java  |   1 +
 .../compress/archivers/tar/TarBuffer.java     |  26 ++++++++++++++++++
 .../tar/TarArchiveInputStreamTest.java        |  19 +++++++++++++
 src/test/resources/archive_with_trailer.tar   | Bin 0 -> 10254 bytes
 5 files changed, 51 insertions(+)
 create mode 100644 src/test/resources/archive_with_trailer.tar

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 34acece7975..a7b8e9e251f 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -133,6 +133,11 @@ The <action> type attribute can be add,update,fix,remove.
           ZipFile's initialization has been improved for non-Zip64
           archives.
         </action>
+        <action type="fix" date="2013-01-20" issue="COMPRESS-206"
+                due-to="Peter De Maeyer">
+          TarArchiveInputStream could leave the second EOF record
+          inside the stream it had just finished reading.
+        </action>
     </release>
     <release version="1.4.1" date="2012-05-23"
              description="Release 1.4.1">
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 26867f59e4b..1c39d9529f2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -315,6 +315,7 @@ private byte[] getRecord() throws IOException {
             hasHitEOF = true;
         } else if (buffer.isEOFRecord(headerBuf)) {
             hasHitEOF = true;
+            buffer.tryToConsumeSecondEOFRecord();
         }
 
         return hasHitEOF ? null : headerBuf;
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
index a2d0a9a118f..9c41ae5855e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
@@ -405,4 +405,30 @@ public void close() throws IOException {
             inStream = null;
         }
     }
+
+    /**
+     * Tries to read the next record rewinding the stream if if is not a EOF record.
+     *
+     * <p>This is meant to protect against cases where a tar
+     * implemenation has written only one EOF record when two are
+     * expected.  Actually this won't help since a non-conforming
+     * implementation likely won't fill full blocks consisting of - be
+     * default - ten records either so we probably have already read
+     * beyond the archive anyway.</p>
+     */
+    void tryToConsumeSecondEOFRecord() throws IOException {
+        boolean shouldReset = true;
+        boolean marked = inStream.markSupported();
+        if (marked) {
+            inStream.mark(recordSize);
+        }
+        try {
+            shouldReset = !isEOFRecord(readRecord());
+        } finally {
+            if (shouldReset && marked) {
+                inStream.reset();
+            }
+        }
+    }
+
 }
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
index 757f3ebab5b..04a3711d9c9 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
@@ -18,6 +18,7 @@
 
 package org.apache.commons.compress.archivers.tar;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -26,6 +27,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.InputStream;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URL;
@@ -164,6 +166,23 @@ public void shouldUseSpecifiedEncodingWhenReadingGNULongNames()
         tis.close();
     }
 
+    @Test
+    public void shouldConsumeArchiveCompletely() throws Exception {
+        InputStream is = TarArchiveInputStreamTest.class
+            .getResourceAsStream("/archive_with_trailer.tar");
+        TarArchiveInputStream tar = new TarArchiveInputStream(is);
+        while (tar.getNextTarEntry() != null) {
+            // just consume the archive
+            ;
+        }
+        byte[] expected = new byte[] {
+            'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', '\n'
+        };
+        byte[] actual = new byte[expected.length];
+        is.read(actual);
+        assertArrayEquals(expected, actual);
+    }
+
     private TarArchiveInputStream getTestStream(String name) {
         return new TarArchiveInputStream(
                 TarArchiveInputStreamTest.class.getResourceAsStream(name));
diff --git a/src/test/resources/archive_with_trailer.tar b/src/test/resources/archive_with_trailer.tar
new file mode 100644
index 0000000000000000000000000000000000000000..6f889c7210d56d00d0d1088cf95ed26d170ccbbf
GIT binary patch
literal 10254
zcmeI2&u^PB6vw#^ssDp}>ZJo4%#Tg3t29JPt1U!rE<05O%$A9S2$O96?`IR$q;%4>
zLpxP_?*i}Z=O29h-aF9>*%IgHy0Tu*u(FU+OFyG9c=A*dA=I-7jz}2LAoM~D6VD5=
zh49NAsb6^~+pIyzYV%!Fw7ouj`_uR^{*CzTQr$h;i$<>M4Z1*Q#KC8m{KRIbNjhG9
znNLt&Z#E)t)wtC9z-67G>133AY*jK9S(~}~MJJVgaWESx%jAj84~C*3Uxt2JMi>V^
zr9u2*8AJt%d_P`>G>ZK)E~$_6-z=$CIy!?okzQMAH_6rbexBYgI0-z$+}<}K)AVjJ
z8-1Q|f*p^>4#f^3D%9vEa%{eN@vs$Kuf^PfXo3^5t?Gw)CgqR1DR`MxQZRR*n&_Pr
z4bQe)+3cCyIcBKeV3w@~PsILxa&^3KC!6rQ>x8ESf4!cmZ_thzxha-;(yY|A^18|L
zN;uz@;uM|aq@8paSDgA-Ge5l@jXzE9JA^t1c>8U&VeT`zo50*YC3J!uxjJFqNFn^E
z$JCYT{oDSp+x@ftAB52VUn3>|zW=YqYNJ}as_b{H5~4wFSM-lE)cb2(8|(oDfB+Bx
z0zd!=00AHX1b_e#00KY&2mk>f00e*l5C8%|00;m9AOHk_01yBIK;Q|1si>;@9H}3d
Is^ZlC1<B?40RR91

literal 0
HcmV?d00001

