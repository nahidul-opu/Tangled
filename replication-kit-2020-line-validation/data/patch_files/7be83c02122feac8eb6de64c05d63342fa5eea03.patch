From 7be83c02122feac8eb6de64c05d63342fa5eea03 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 28 Mar 2014 16:28:00 +0000
Subject: [PATCH] COMPRESS-270 two more cases where readFully should be used

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1582806 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/compress/archivers/ar/ArArchiveInputStream.java    | 2 +-
 .../commons/compress/archivers/dump/TapeInputStream.java       | 2 ++
 .../compressors/snappy/SnappyCompressorInputStream.java        | 3 ++-
 3 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index e65f27bead5..aeb3a157e7f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -384,7 +384,7 @@ private static boolean isGNUStringTable(String name) {
     private ArArchiveEntry readGNUStringTable(byte[] length) throws IOException {
         int bufflen = asInt(length); // Assume length will fit in an int
         namebuffer = new byte[bufflen];
-        int read = read(namebuffer, 0, bufflen);
+        int read = IOUtils.readFully(this, namebuffer, 0, bufflen);
         if (read != bufflen){
             throw new IOException("Failed to read complete // record: expected="
                                   + bufflen + " read=" + read);
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
index d7a9a2bd741..75648230bd0 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
@@ -238,6 +238,8 @@ public byte[] peek() throws IOException {
     public byte[] readRecord() throws IOException {
         byte[] result = new byte[recordSize];
 
+        // the read implementation will loop internally as long as
+        // input is available
         if (-1 == read(result, 0, result.length)) {
             throw new ShortFileException();
         }
diff --git a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java
index 46c2188683c..cf08a646980 100644
--- a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java
@@ -22,6 +22,7 @@
 import java.io.InputStream;
 
 import org.apache.commons.compress.compressors.CompressorInputStream;
+import org.apache.commons.compress.utils.IOUtils;
 
 /**
  * CompressorInputStream for the raw Snappy format.
@@ -303,7 +304,7 @@ private int readLiteralLength(int b) throws IOException {
      * @return True if the decompressed data should be flushed
      */
     private boolean expandLiteral(final int length) throws IOException {
-        int bytesRead = in.read(decompressBuf, writeIndex, length);
+        int bytesRead = IOUtils.readFully(in, decompressBuf, writeIndex, length);
         count(bytesRead);
         if (length != bytesRead) {
             throw new IOException("Premature end of stream");
