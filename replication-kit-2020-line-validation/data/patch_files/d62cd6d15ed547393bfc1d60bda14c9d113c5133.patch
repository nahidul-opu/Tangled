From d62cd6d15ed547393bfc1d60bda14c9d113c5133 Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Tue, 26 Jun 2007 20:58:10 +0000
Subject: [PATCH] SCXML-48 Broken subclassing for AbstractStateMachine.

Unrelated changes:
 - Two new constructors to avoid recurring parsing cost
 - Some cosmetic changes so the class Javadoc renders in a readable manner.

Thanks to Michael Heuer <heuermh AT acm DOT org> for the AbstractStateMachine tests (which now pass).


git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/scxml/trunk@550948 13f79535-47bb-0310-9956-ffa450edef68
---
 .../scxml/env/AbstractStateMachine.java       | 89 +++++++++++++-----
 .../scxml/env/AbstractStateMachineTest.java   | 92 +++++++++++++++++++
 .../commons/scxml/env/EnvTestSuite.java       |  1 +
 .../java/org/apache/commons/scxml/env/bar.xml | 25 +++++
 .../java/org/apache/commons/scxml/env/foo.xml | 25 +++++
 5 files changed, 207 insertions(+), 25 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/scxml/env/AbstractStateMachineTest.java
 create mode 100644 src/test/java/org/apache/commons/scxml/env/bar.xml
 create mode 100644 src/test/java/org/apache/commons/scxml/env/foo.xml

diff --git a/src/main/java/org/apache/commons/scxml/env/AbstractStateMachine.java b/src/main/java/org/apache/commons/scxml/env/AbstractStateMachine.java
index 5134b8a84..ab5d19fb3 100644
--- a/src/main/java/org/apache/commons/scxml/env/AbstractStateMachine.java
+++ b/src/main/java/org/apache/commons/scxml/env/AbstractStateMachine.java
@@ -39,27 +39,27 @@
 import org.xml.sax.SAXException;
 
 /**
- * This class demonstrates one approach for providing the base
+ * <p>This class demonstrates one approach for providing the base
  * functionality needed by classes representing stateful entities,
- * whose behaviors are defined via SCXML documents.
+ * whose behaviors are defined via SCXML documents.</p>
  *
- * SCXML documents (more generically, UML state chart diagrams) can be
+ * <p>SCXML documents (more generically, UML state chart diagrams) can be
  * used to define stateful behavior of objects, and Commons SCXML enables
  * developers to use this model directly into the corresponding code
  * artifacts. The resulting artifacts tend to be much simpler, embody
  * a useful separation of concerns and are easier to understand and
  * maintain. As the size of the modeled entity grows, these benefits
- * become more apparent.
+ * become more apparent.</p>
  *
- * This approach functions by registering an SCXMLListener that gets
+ * <p>This approach functions by registering an SCXMLListener that gets
  * notified onentry, and calls the namesake method for each state that
- * has been entered.
+ * has been entered.</p>
  *
- * This class swallows all exceptions only to log them. Developers of
+ * <p>This class swallows all exceptions only to log them. Developers of
  * subclasses should think of themselves as &quot;component developers&quot;
  * catering to other end users, and therefore ensure that the subclasses
  * are free of <code>ModelException</code>s and the like. Most methods
- * are <code>protected</code> for ease of subclassing.
+ * are <code>protected</code> for ease of subclassing.</p>
  *
  */
 public abstract class AbstractStateMachine {
@@ -67,7 +67,7 @@ public abstract class AbstractStateMachine {
     /**
      * The state machine that will drive the instances of this class.
      */
-    private static SCXML stateMachine;
+    private SCXML stateMachine;
 
     /**
      * The instance specific SCXML engine.
@@ -92,7 +92,7 @@ public abstract class AbstractStateMachine {
     private static final Object[] PARAMETERS = new Object[0];
 
     /**
-     * Convenience constructor.
+     * Convenience constructor, object instantiation incurs parsing cost.
      *
      * @param scxmlDocument The URL pointing to the SCXML document that
      *                      describes the &quot;lifecycle&quot; of the
@@ -104,7 +104,7 @@ public AbstractStateMachine(final URL scxmlDocument) {
     }
 
     /**
-     * Primary constructor.
+     * Primary constructor, object instantiation incurs parsing cost.
      *
      * @param scxmlDocument The URL pointing to the SCXML document that
      *                      describes the &quot;lifecycle&quot; of the
@@ -118,20 +118,58 @@ public AbstractStateMachine(final URL scxmlDocument) {
     public AbstractStateMachine(final URL scxmlDocument,
             final Context rootCtx, final Evaluator evaluator) {
         log = LogFactory.getLog(this.getClass());
-        if (stateMachine == null) {
-            // parse only once per subclass
-            ErrorHandler errHandler = new SimpleErrorHandler();
-            try {
-                stateMachine = SCXMLDigester.digest(scxmlDocument,
-                    errHandler);
-            } catch (IOException ioe) {
-                logError(ioe);
-            } catch (SAXException sae) {
-                logError(sae);
-            } catch (ModelException me) {
-                logError(me);
-            }
+        ErrorHandler errHandler = new SimpleErrorHandler();
+        try {
+            stateMachine = SCXMLDigester.digest(scxmlDocument,
+                errHandler);
+        } catch (IOException ioe) {
+            logError(ioe);
+        } catch (SAXException sae) {
+            logError(sae);
+        } catch (ModelException me) {
+            logError(me);
         }
+        initialize(stateMachine, rootCtx, evaluator);
+    }
+
+    /**
+     * Convenience constructor.
+     *
+     * @param stateMachine The parsed SCXML instance that
+     *                     describes the &quot;lifecycle&quot; of the
+     *                     instances of this class.
+     */
+    public AbstractStateMachine(final SCXML stateMachine) {
+        // default is JEXL
+        this(stateMachine, new JexlContext(), new JexlEvaluator());
+    }
+
+    /**
+     * Primary constructor.
+     *
+     * @param stateMachine The parsed SCXML instance that
+     *                     describes the &quot;lifecycle&quot; of the
+     *                     instances of this class.
+     * @param rootCtx The root context for this instance.
+     * @param evaluator The expression evaluator for this instance.
+     *
+     * @see Context
+     * @see Evaluator
+     */
+    public AbstractStateMachine(final SCXML stateMachine,
+            final Context rootCtx, final Evaluator evaluator) {
+        initialize(stateMachine, rootCtx, evaluator);
+    }
+
+    /**
+     * Instantiate and initialize the underlying executor instance.
+     *
+     * @param stateMachine The state machine
+     * @param rootCtx The root context
+     * @param evaluator The expression evaluator
+     */
+    private void initialize(final SCXML stateMachine,
+            final Context rootCtx, final Evaluator evaluator) {
         engine = new SCXMLExecutor(evaluator, new SimpleDispatcher(),
             new SimpleErrorReporter());
         engine.setStateMachine(stateMachine);
@@ -167,9 +205,10 @@ public boolean fireEvent(final String event) {
      * Get the SCXML object representing this state machine.
      *
      * @return Returns the stateMachine.
+     * @deprecated Returns null, use getEngine().getStateMachine() instead
      */
     public static SCXML getStateMachine() {
-        return stateMachine;
+        return null;
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/scxml/env/AbstractStateMachineTest.java b/src/test/java/org/apache/commons/scxml/env/AbstractStateMachineTest.java
new file mode 100644
index 000000000..ee74b0c13
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/env/AbstractStateMachineTest.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.scxml.env;
+
+import java.net.URL;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+import junit.textui.TestRunner;
+
+/**
+ * Unit tests {@link org.apache.commons.scxml.env.AbstractStateMachine}.
+ */
+public class AbstractStateMachineTest extends TestCase {
+
+    /**
+     * Construct a new instance of AbstractStateMachineTest with the specified name
+     */
+    public AbstractStateMachineTest(String name) {
+        super(name);
+    }
+
+    // Test data
+    private boolean fooCalled;
+    private boolean barCalled;
+
+    /**
+     * Set up instance variables required by this test case.
+     */
+    public void setUp() {
+        fooCalled = false;
+        barCalled = false;
+    }
+
+    public void testMoreThanOneScxmlDocument() throws Exception {
+        URL fooScxmlDocument = getClass().getResource("foo.xml");
+        URL barScxmlDocument = getClass().getResource("bar.xml");
+
+        new Foo(fooScxmlDocument);
+        new Bar(barScxmlDocument);
+
+        assertTrue(fooCalled);
+        assertTrue(barCalled);
+    }
+
+    private class Foo extends AbstractStateMachine {
+
+        public Foo(final URL scxmlDocument) {
+            super(scxmlDocument);
+        }
+
+        public void foo() {
+            fooCalled = true;
+        }
+    }
+
+    private class Bar extends AbstractStateMachine {
+
+        public Bar(final URL scxmlDocument) {
+            super(scxmlDocument);
+        }
+
+        public void bar() {
+            barCalled = true;
+        }
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(AbstractStateMachineTest.class);
+        suite.setName("AbstractStateMachine Tests");
+        return suite;
+    }
+
+    public static void main(String args[]) {
+        TestRunner.run(suite());
+    }
+}
diff --git a/src/test/java/org/apache/commons/scxml/env/EnvTestSuite.java b/src/test/java/org/apache/commons/scxml/env/EnvTestSuite.java
index e7b85f5ec..6d28bd407 100644
--- a/src/test/java/org/apache/commons/scxml/env/EnvTestSuite.java
+++ b/src/test/java/org/apache/commons/scxml/env/EnvTestSuite.java
@@ -48,6 +48,7 @@ public static void main(String[] args) {
     public static Test suite() {
         TestSuite suite = new TestSuite();
         suite.setName("Commons-SCXML Environments Tests");
+        suite.addTest(AbstractStateMachineTest.suite());
         suite.addTest(AbstractSCXMLListenerTest.suite());
         suite.addTest(LogUtilsTest.suite());
         suite.addTest(SimpleContextTest.suite());
diff --git a/src/test/java/org/apache/commons/scxml/env/bar.xml b/src/test/java/org/apache/commons/scxml/env/bar.xml
new file mode 100644
index 000000000..3901080d5
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/env/bar.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       version="1.0"
+       initialstate="bar">
+
+    <state id="bar"/>
+
+</scxml>
+
diff --git a/src/test/java/org/apache/commons/scxml/env/foo.xml b/src/test/java/org/apache/commons/scxml/env/foo.xml
new file mode 100644
index 000000000..486d36e0b
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/env/foo.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       version="1.0"
+       initialstate="foo">
+
+    <state id="foo"/>
+
+</scxml>
+
