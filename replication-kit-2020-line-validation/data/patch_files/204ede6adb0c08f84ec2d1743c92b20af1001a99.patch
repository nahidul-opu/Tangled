From 204ede6adb0c08f84ec2d1743c92b20af1001a99 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Fri, 24 Aug 2007 09:37:33 +0000
Subject: [PATCH] CONFIGURATION-294: XMLConfiguration.addNodes() now convertes
 the nodes to be added to XMLNodes if necessary

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@569314 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration/XMLConfiguration.java       | 61 +++++++++++++++++++
 .../configuration/TestXMLConfiguration.java   | 38 +++++++++++-
 xdocs/changes.xml                             |  4 ++
 3 files changed, 101 insertions(+), 2 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/XMLConfiguration.java b/src/java/org/apache/commons/configuration/XMLConfiguration.java
index cae0b5fa83..21f19c8bce 100644
--- a/src/java/org/apache/commons/configuration/XMLConfiguration.java
+++ b/src/java/org/apache/commons/configuration/XMLConfiguration.java
@@ -40,6 +40,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
 import org.w3c.dom.DOMException;
@@ -772,6 +773,66 @@ protected FileConfigurationDelegate createDelegate()
         return new XMLFileConfigurationDelegate();
     }
 
+    /**
+     * Adds a collection of nodes directly to this configuration. This
+     * implementation ensures that the nodes to be added are of the correct node
+     * type (they have to be converted to <code>XMLNode</code> if necessary).
+     *
+     * @param key the key where the nodes are to be added
+     * @param nodes the collection with the new nodes
+     * @since 1.5
+     */
+    public void addNodes(String key, Collection nodes)
+    {
+        Collection xmlNodes;
+
+        if (nodes != null && !nodes.isEmpty())
+        {
+            xmlNodes = new ArrayList(nodes.size());
+            for (Iterator it = nodes.iterator(); it.hasNext();)
+            {
+                xmlNodes.add(convertToXMLNode((ConfigurationNode) it.next()));
+            }
+        }
+        else
+        {
+            xmlNodes = nodes;
+        }
+
+        super.addNodes(key, xmlNodes);
+    }
+
+    /**
+     * Converts the specified node into a <code>XMLNode</code> if necessary.
+     * This is required for nodes that are directly added, e.g. by
+     * <code>addNodes()</code>. If the passed in node is already an instance
+     * of <code>XMLNode</code>, it is directly returned, and conversion
+     * stops. Otherwise a new <code>XMLNode</code> is created, and the
+     * children are also converted.
+     *
+     * @param node the node to be converted
+     * @return the converted node
+     */
+    private XMLNode convertToXMLNode(ConfigurationNode node)
+    {
+        if (node instanceof XMLNode)
+        {
+            return (XMLNode) node;
+        }
+
+        XMLNode nd = (XMLNode) createNode(node.getName());
+        nd.setValue(node.getValue());
+        for (Iterator it = node.getChildren().iterator(); it.hasNext();)
+        {
+            nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
+        }
+        for (Iterator it = node.getAttributes().iterator(); it.hasNext();)
+        {
+            nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
+        }
+        return nd;
+    }
+
     /**
      * A specialized <code>Node</code> class that is connected with an XML
      * element. Changes on a node are also performed on the associated element.
diff --git a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
index ef6b503244..e53e1d687a 100644
--- a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -34,6 +34,8 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
+import junit.framework.TestCase;
+
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
 import org.apache.commons.configuration.reloading.InvariantReloadingStrategy;
 import org.apache.commons.configuration.tree.ConfigurationNode;
@@ -42,8 +44,6 @@
 import org.xml.sax.SAXParseException;
 import org.xml.sax.helpers.DefaultHandler;
 
-import junit.framework.TestCase;
-
 /**
  * test for loading and saving xml properties files
  *
@@ -1176,6 +1176,40 @@ public void testAutoSaveAddNodes() throws ConfigurationException
                 .getBoolean("test.autosave.addNodesTest"));
     }
 
+    /**
+     * Tests saving a configuration after a node was added. Test for
+     * CONFIGURATION-294.
+     */
+    public void testAddNodesAndSave() throws ConfigurationException
+    {
+        ConfigurationNode node = new HierarchicalConfiguration.Node("test");
+        ConfigurationNode child = new HierarchicalConfiguration.Node("child");
+        node.addChild(child);
+        ConfigurationNode attr = new HierarchicalConfiguration.Node("attr");
+        node.addAttribute(attr);
+        ConfigurationNode node2 = conf.createNode("test2");
+        Collection nodes = new ArrayList(2);
+        nodes.add(node);
+        nodes.add(node2);
+        conf.addNodes("add.nodes", nodes);
+        conf.setFile(testSaveConf);
+        conf.save();
+        conf.setProperty("add.nodes.test", "true");
+        conf.setProperty("add.nodes.test.child", "yes");
+        conf.setProperty("add.nodes.test[@attr]", "existing");
+        conf.setProperty("add.nodes.test2", "anotherValue");
+        conf.save();
+        XMLConfiguration c2 = new XMLConfiguration(testSaveConf);
+        assertEquals("Value was not saved", "true", c2
+                .getString("add.nodes.test"));
+        assertEquals("Child value was not saved", "yes", c2
+                .getString("add.nodes.test.child"));
+        assertEquals("Attr value was not saved", "existing", c2
+                .getString("add.nodes.test[@attr]"));
+        assertEquals("Node2 not saved", "anotherValue", c2
+                .getString("add.nodes.test2"));
+    }
+
     /**
      * Prepares a configuration object for testing a reload operation.
      *
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index fb9a0df631..119f945331 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-294">
+        Nodes added to a XMLConfiguration using the addNodes() method could
+        lose their value when the configuration was saved. This is now fixed.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-272">
         New copy() and append() methods have been added to AbstractConfiguration.
         They replace the methods with the same names in ConfigurationUtils,
