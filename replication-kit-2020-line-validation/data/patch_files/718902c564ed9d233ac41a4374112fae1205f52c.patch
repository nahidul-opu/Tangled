From 718902c564ed9d233ac41a4374112fae1205f52c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Sat, 25 Jan 2014 18:30:10 +0000
Subject: [PATCH] OPENNLP-600 Added a File Input Stream which can be marked.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1561363 13f79535-47bb-0310-9956-ffa450edef68
---
 .../cmdline/MarkableFileInputStream.java      | 86 +++++++++++++++++++
 1 file changed, 86 insertions(+)
 create mode 100644 opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java

diff --git a/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java b/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java
new file mode 100644
index 000000000..e672d4d5a
--- /dev/null
+++ b/opennlp-tools/src/main/java/opennlp/tools/cmdline/MarkableFileInputStream.java
@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package opennlp.tools.cmdline;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * A markable File Input Stream.
+ */
+public class MarkableFileInputStream extends InputStream {
+
+  private FileInputStream in;
+  
+  private long markedPosition = -1;
+  private IOException markException;
+  
+  MarkableFileInputStream(File file) throws FileNotFoundException {
+    in = new FileInputStream(file);
+  }
+  
+  @Override
+  public synchronized void mark(int readlimit) {
+    try {
+      markedPosition = in.getChannel().position();
+    } catch (IOException e) {
+      markedPosition = -1;
+    }
+  }
+  
+  @Override
+  public boolean markSupported() {
+    return true;
+  }
+  
+  private void throwMarkExceptionIfOccured() throws IOException {
+    if (markException != null) {
+      throw markException;
+    }
+  }
+  
+  @Override
+  public synchronized void reset() throws IOException {
+    throwMarkExceptionIfOccured();
+    
+    if (markedPosition >= 0) {
+      in.getChannel().position(markedPosition);
+    }
+    else {
+      throw new IOException("Stream has to be marked before it can be reset!");
+    }
+  }
+  
+  @Override
+  public int read() throws IOException {
+    return in.read();
+  }
+  
+  @Override
+  public int read(byte[] b) throws IOException {
+    return in.read(b);
+  }
+  
+  @Override
+  public int read(byte[] b, int off, int len) throws IOException {
+    return in.read(b, off, len);
+  }
+}
