From c070c23750e4720fe44b92237b2b55559619e8ac Mon Sep 17 00:00:00 2001
From: Emmanuel Bourg <ebourg@apache.org>
Date: Fri, 20 Feb 2015 14:52:39 +0000
Subject: [PATCH] MethodGen.removeLocalVariable/s now remove the associated
 targetters. Thanks to Mark Roberts (BCEL-207)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1661134 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  1 +
 src/changes/changes.xml                       |  4 +
 .../apache/bcel/generic/LocalVariableGen.java |  7 ++
 .../org/apache/bcel/generic/MethodGen.java    |  4 +
 .../bcel/generic/MethodGenTestCase.java       | 89 +++++++++++++++++++
 5 files changed, 105 insertions(+)
 create mode 100644 src/test/java/org/apache/bcel/generic/MethodGenTestCase.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 4180c37018..948ab8d082 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -98,6 +98,7 @@ Bug fixes from 5.2
 [BCEL-181] ClassLoaderRepository.loadClass(String) leaks input streams
 [BCEL-194] LocalVariableGen hashCode() function is incorrrect
 [BCEL-197] Add support for TypeVariables to Utility.signatureToString()
+[BCEL-207] MethodGen.removeLocalVariable(s) doesn't remove the associated Targetters
 
 
 Feedback
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index efc96ce473..59efe6400b 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -63,6 +63,10 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="6.0" date="TBA" description="Major release with Java 7 and 8 support">
+      <action issue="BCEL-207" type="fix" due-to="Mark Roberts">
+        MethodGen.removeLocalVariable now properly unreference the removed variable
+        from the targetters of the instruction handlers delimiting the scope of the variable.
+      </action>
       <action issue="BCEL-197" type="fix" due-to="Mark Roberts">
         Utility.signatureToString() no longer throws a ClassFormatException on TypeVariables
         found in generic signatures.
diff --git a/src/main/java/org/apache/bcel/generic/LocalVariableGen.java b/src/main/java/org/apache/bcel/generic/LocalVariableGen.java
index 67194b213f..fc81d46268 100644
--- a/src/main/java/org/apache/bcel/generic/LocalVariableGen.java
+++ b/src/main/java/org/apache/bcel/generic/LocalVariableGen.java
@@ -163,6 +163,13 @@ public void updateTarget( InstructionHandle old_ih, InstructionHandle new_ih ) {
         }
     }
 
+    /**
+     * Clear the references from and to this variable when it's removed.
+     */
+    void dispose() {
+        setStart(null);
+        setEnd(null);
+    }
 
     /**
      * @return true, if ih is target of this variable
diff --git a/src/main/java/org/apache/bcel/generic/MethodGen.java b/src/main/java/org/apache/bcel/generic/MethodGen.java
index 9c16da6724..eb87546ec2 100644
--- a/src/main/java/org/apache/bcel/generic/MethodGen.java
+++ b/src/main/java/org/apache/bcel/generic/MethodGen.java
@@ -335,6 +335,7 @@ public LocalVariableGen addLocalVariable( String name, Type type, InstructionHan
      * with an explicit index argument.
      */
     public void removeLocalVariable( LocalVariableGen l ) {
+        l.dispose();
         variable_vec.remove(l);
     }
 
@@ -343,6 +344,9 @@ public void removeLocalVariable( LocalVariableGen l ) {
      * Remove all local variables.
      */
     public void removeLocalVariables() {
+        for (LocalVariableGen lv : variable_vec) {
+            lv.dispose();
+        }
         variable_vec.clear();
     }
 
diff --git a/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java b/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java
new file mode 100644
index 0000000000..3e64131570
--- /dev/null
+++ b/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java
@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.bcel.generic;
+
+import java.util.Arrays;
+
+import junit.framework.TestCase;
+import org.apache.bcel.Repository;
+import org.apache.bcel.classfile.JavaClass;
+import org.apache.bcel.classfile.Method;
+
+public class MethodGenTestCase extends TestCase {
+
+    public static class Foo {
+        public void bar() {
+            int a = 1;
+        }
+    }
+
+    private MethodGen getMethod(Class cls, String name) throws ClassNotFoundException {
+        JavaClass jc = Repository.lookupClass(cls);
+        ConstantPoolGen cp = new ConstantPoolGen(jc.getConstantPool());
+        for (Method method : jc.getMethods()) {
+            if (method.getName().equals(name)) {
+                return new MethodGen(method, jc.getClassName(), cp);
+            }
+        }
+
+        fail("Method " + name + " not found in class " + cls);
+        return null;
+    }
+
+    public void testRemoveLocalVariable() throws Exception {
+        MethodGen mg = getMethod(Foo.class, "bar");
+
+        LocalVariableGen lv = mg.getLocalVariables()[1];
+        assertEquals("variable name", "a", lv.getName());
+        InstructionHandle start = lv.getStart();
+        InstructionHandle end = lv.getEnd();
+        assertNotNull("scope start", start);
+        assertNotNull("scope end", end);
+        assertTrue("scope start not targeted by the local variable", Arrays.asList(start.getTargeters()).contains(lv));
+        assertTrue("scope end not targeted by the local variable", Arrays.asList(end.getTargeters()).contains(lv));
+
+        // now let's remove the local variable
+        mg.removeLocalVariable(lv);
+
+        assertFalse("scope start still targeted by the removed variable", Arrays.asList(start.getTargeters()).contains(lv));
+        assertFalse("scope end still targeted by the removed variable", Arrays.asList(end.getTargeters()).contains(lv));
+        assertNull("scope start", lv.getStart());
+        assertNull("scope end", lv.getEnd());
+    }
+
+    public void testRemoveLocalVariables() throws Exception {
+        MethodGen mg = getMethod(Foo.class, "bar");
+
+        LocalVariableGen lv = mg.getLocalVariables()[1];
+        assertEquals("variable name", "a", lv.getName());
+        InstructionHandle start = lv.getStart();
+        InstructionHandle end = lv.getEnd();
+        assertNotNull("scope start", start);
+        assertNotNull("scope end", end);
+        assertTrue("scope start not targeted by the local variable", Arrays.asList(start.getTargeters()).contains(lv));
+        assertTrue("scope end not targeted by the local variable", Arrays.asList(end.getTargeters()).contains(lv));
+
+        // now let's remove the local variables
+        mg.removeLocalVariables();
+
+        assertFalse("scope start still targeted by the removed variable", Arrays.asList(start.getTargeters()).contains(lv));
+        assertFalse("scope end still targeted by the removed variable", Arrays.asList(end.getTargeters()).contains(lv));
+        assertNull("scope start", lv.getStart());
+        assertNull("scope end", lv.getEnd());
+    }
+}
