From 815513f7da72c65034e82236d3203c06d5a18772 Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Tue, 17 Jan 2006 17:56:42 +0000
Subject: [PATCH] FIX: no variable replacement during the deliver step
 (IVY-133)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/trunk@484100 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../ivy/xml/XmlModuleDescriptorUpdater.java   | 36 ++++++++++---------
 .../ivy/xml/XmlModuleUpdaterTest.java         |  4 ++-
 test/java/fr/jayasoft/ivy/xml/test-update.xml |  2 +-
 4 files changed, 25 insertions(+), 18 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index 42ad95768..10f6c48f2 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -22,6 +22,7 @@
 - IMPROVE: import system properties as ivy variables in standalone mode
 - IMPROVE: string identifying a module is now clearly different from a path
 - IMPROVE: better error message when publish fails due to readonly destination (IVY-83)
+- FIX: no variable replacement during the deliver step (IVY-133)
 - FIX: conflict badly solved in some complex cases (IVY-130)
 - FIX: mapping on conf * now only takes public configurations (IVY-126)
 - FIX: bad dependency ivy files now causes failure (IVY-112)
diff --git a/src/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorUpdater.java b/src/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorUpdater.java
index 812a674b2..06959d684 100644
--- a/src/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorUpdater.java
+++ b/src/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorUpdater.java
@@ -93,35 +93,35 @@ public void startElement(String uri, String localName,
                         out.print(">");
                     }
                     if ("info".equals(qName)) {
-                        _organisation = attributes.getValue("organisation");
+                        _organisation = substitute(ivy, attributes.getValue("organisation"));
                         out.print("<info organisation=\""+_organisation
-                                				+"\" module=\""+attributes.getValue("module")+"\"");
+                                				+"\" module=\""+substitute(ivy, attributes.getValue("module"))+"\"");
                         if (revision != null) {
                             out.print(" revision=\""+revision+"\"");
                         } else if (attributes.getValue("revision") != null) {
-                            out.print(" revision=\""+attributes.getValue("revision")+"\"");
+                            out.print(" revision=\""+substitute(ivy, attributes.getValue("revision"))+"\"");
                         }
                         if (status != null) {
                             out.print(" status=\""+status+"\"");
                         } else {
-                            out.print(" status=\""+attributes.getValue("status")+"\"");
+                            out.print(" status=\""+substitute(ivy, attributes.getValue("status"))+"\"");
                         }
                         if (pubdate != null) {
                             out.print(" publication=\""+Ivy.DATE_FORMAT.format(pubdate)+"\"");
                         } else if (attributes.getValue("publication") != null) {
-                            out.print(" publication=\""+attributes.getValue("publication")+"\"");
+                            out.print(" publication=\""+substitute(ivy, attributes.getValue("publication"))+"\"");
                         }
                         if (resolverName != null) {
                             out.print(" resolver=\""+resolverName+"\"");
                         } else if (attributes.getValue("resolver") != null) {
-                            out.print(" resolver=\""+attributes.getValue("resolver")+"\"");
+                            out.print(" resolver=\""+substitute(ivy, attributes.getValue("resolver"))+"\"");
                         }
                     } else if (replaceImport && "import".equals(qName)) {
                         try {
                             URL url;
-                            String fileName = ivy.substitute(attributes.getValue("file"));
+                            String fileName = substitute(ivy, attributes.getValue("file"));
                             if (fileName == null) {
-                                String urlStr = ivy.substitute(attributes.getValue("url"));
+                                String urlStr = substitute(ivy, attributes.getValue("url"));
                                 url = new URL(urlStr);
                             } else {
                                 url = new File(fileName).toURL();
@@ -132,7 +132,7 @@ public void startElement(String uri, String localName,
                                         String qName, Attributes attributes)
                                         throws SAXException {
                                     if ("configurations".equals(qName)) {
-                                        String defaultconf = attributes.getValue("defaultconfmapping");
+                                        String defaultconf = substitute(ivy, attributes.getValue("defaultconfmapping"));
                                         if (defaultconf != null) {
                                             _defaultConfMapping = defaultconf;
                                         }
@@ -145,7 +145,7 @@ public void startElement(String uri, String localName,
                                         }
                                         out.print("<"+qName);
                                         for (int i=0; i<attributes.getLength(); i++) {
-                                            out.print(" "+attributes.getQName(i)+"=\""+attributes.getValue(i)+"\"");
+                                            out.print(" "+attributes.getQName(i)+"=\""+substitute(ivy, attributes.getValue(i))+"\"");
                                         }
                                     }
                                 }
@@ -156,9 +156,9 @@ public void startElement(String uri, String localName,
                         }
                     } else if ("dependency".equals(qName)) {
                         out.print("<dependency");
-                        String org = attributes.getValue("org");
+                        String org = substitute(ivy, attributes.getValue("org"));
                         org = org == null ? _organisation : org;
-                        ModuleId mid = new ModuleId(org, attributes.getValue("name"));
+                        ModuleId mid = new ModuleId(org, substitute(ivy, attributes.getValue("name")));
                         for (int i=0; i<attributes.getLength(); i++) {
                             String attName = attributes.getQName(i);
                             if ("rev".equals(attName)) {
@@ -166,17 +166,17 @@ public void startElement(String uri, String localName,
                                 if (rev != null) {
                                     out.print(" rev=\""+rev+"\"");
                                 } else {
-                                    out.print(" rev=\""+attributes.getValue("rev")+"\"");
+                                    out.print(" rev=\""+substitute(ivy, attributes.getValue("rev"))+"\"");
                                 }
                             } else {
-                                out.print(" "+attName+"=\""+attributes.getValue(attName)+"\"");
+                                out.print(" "+attName+"=\""+substitute(ivy, attributes.getValue(attName))+"\"");
                             }
                         }
                     } else if ("dependencies".equals(qName)) {
                         // copy
                         out.print("<"+qName);
                         for (int i=0; i<attributes.getLength(); i++) {
-                            out.print(" "+attributes.getQName(i)+"=\""+attributes.getValue(i)+"\"");
+                            out.print(" "+attributes.getQName(i)+"=\""+substitute(ivy, attributes.getValue(i))+"\"");
                         }
                         // add defaultconf mapping if needed
                         if (_defaultConfMapping != null && attributes.getValue("defaultconf") == null) {
@@ -186,13 +186,17 @@ public void startElement(String uri, String localName,
                         // copy
                         out.print("<"+qName);
                         for (int i=0; i<attributes.getLength(); i++) {
-                            out.print(" "+attributes.getQName(i)+"=\""+attributes.getValue(i)+"\"");
+                            out.print(" "+attributes.getQName(i)+"=\""+substitute(ivy, attributes.getValue(i))+"\"");
                         }
                     }
                     _justOpen = qName;
 //                    indent.append("\t");
                 }
 
+                private String substitute(Ivy ivy, String value) {
+                    return ivy == null ? value : ivy.substitute(value);
+                }
+
                 public void characters(char[] ch, int start, int length)
                         throws SAXException {
                     if (_justOpen != null) {
diff --git a/test/java/fr/jayasoft/ivy/xml/XmlModuleUpdaterTest.java b/test/java/fr/jayasoft/ivy/xml/XmlModuleUpdaterTest.java
index d7216896e..1e1c296eb 100644
--- a/test/java/fr/jayasoft/ivy/xml/XmlModuleUpdaterTest.java
+++ b/test/java/fr/jayasoft/ivy/xml/XmlModuleUpdaterTest.java
@@ -38,7 +38,9 @@ public void testUpdate() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
         cal.set(2005, 2, 22, 14, 32, 54);
         
-        XmlModuleDescriptorUpdater.update(new Ivy(), 
+        Ivy ivy = new Ivy();
+        ivy.setVariable("myvar", "myconf1");
+        XmlModuleDescriptorUpdater.update(ivy, 
                 XmlModuleUpdaterTest.class.getResource("test-update.xml"), 
                 dest, resolvedRevisions, "release", "mynewrev", cal.getTime(), "myresolver", true);
         
diff --git a/test/java/fr/jayasoft/ivy/xml/test-update.xml b/test/java/fr/jayasoft/ivy/xml/test-update.xml
index ac5b77ef3..11f9b2dae 100644
--- a/test/java/fr/jayasoft/ivy/xml/test-update.xml
+++ b/test/java/fr/jayasoft/ivy/xml/test-update.xml
@@ -21,7 +21,7 @@
 	</info>
 	<configurations>
 		<import file="test/java/fr/jayasoft/ivy/xml/imported-configurations-with-mapping.xml"/>
-		<conf name="myconf1" description="desc 1"/>
+		<conf name="${myvar}" description="desc 1"/>
 		<conf name="myconf2" description="desc 2" visibility="public"/>
 		<conf name="myconf3" description="desc 3" visibility="private"/>
 		<conf name="myconf4" description="desc 4" extends="myconf1, myconf2"/>		
