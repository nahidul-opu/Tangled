From 02dc8c7e77db316553699f0e371f3e7803d3efbd Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 26 May 2011 10:03:42 +0000
Subject: [PATCH] IO-274 - Tailer returning partial lines when reaching EOF
 before EOL Added version of readLine() that returns null if EOF seen before
 EOL Re-enabled test case Had to add sleep call to allow test file to be
 cleared up properly

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1127854 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../org/apache/commons/io/input/Tailer.java   | 36 +++++++++++++++++--
 .../apache/commons/io/input/TailerTest.java   |  3 +-
 3 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index c14d2a67fe5..d6eb48aa864 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -41,6 +41,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <release version="1.4" date="Not yet released">
 
+      <action dev="sebb" type="fix" issue="IO-274" due-to="Frank Grimes">
+        Tailer returning partial lines when reaching EOF before EOL
+      </action>
       <action dev="sebb" type="fix" issue="IO-266" due-to="Igor Smereka">
         FileUtils.copyFile() throws IOException when copying large files to a shared directory
       </action>
diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index 7a8e8a85fd1..b79a9ed1a69 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -335,12 +335,42 @@ public void stop() {
      * @throws java.io.IOException if an I/O error occurs.
      */
     private long readLines(RandomAccessFile reader) throws IOException {
-        String line = reader.readLine();
+        long pos = reader.getFilePointer();
+        String line = readLine(reader);
         while (line != null) {
+            pos = reader.getFilePointer();
             listener.handle(line);
-            line = reader.readLine();
+            line = readLine(reader);
         }
-        return reader.getFilePointer();
+        reader.seek(pos); // Ensure we can re-read if necessary
+        return pos;
     }
 
+    /**
+     * Version of readline() that returns null on EOF rather than a partial line.
+     * @param reader the input file
+     * @return the line, or null if EOF reached before '\n' is seen.
+     * @throws IOException if an error occurs.
+     */
+    private String readLine(RandomAccessFile reader) throws IOException {
+        StringBuffer sb  = new StringBuffer();
+        int ch;
+        boolean seenCR = false;
+        while((ch=reader.read()) != -1) {
+            switch(ch) {
+                case '\n':
+                    return sb.toString();
+                case '\r':
+                    seenCR = true;
+                    break;
+                default:
+                    if (seenCR) {
+                        sb.append('\r');
+                        seenCR = false;
+                    }
+                    sb.append((char)ch); // add character, not its ascii value
+            }
+        }
+        return null;
+    }
 }
diff --git a/src/test/java/org/apache/commons/io/input/TailerTest.java b/src/test/java/org/apache/commons/io/input/TailerTest.java
index dee14b05896..e7b47698595 100644
--- a/src/test/java/org/apache/commons/io/input/TailerTest.java
+++ b/src/test/java/org/apache/commons/io/input/TailerTest.java
@@ -52,7 +52,7 @@ protected void tearDown() throws Exception {
         FileUtils.deleteDirectory(getTestDirectory());
     }
     
-    public void FIXME_testTailerEof() throws Exception {
+    public void testTailerEof() throws Exception {
         // Create & start the Tailer
         long delay = 50;
         final File file = new File(getTestDirectory(), "tailer2-test.txt");
@@ -81,6 +81,7 @@ public void FIXME_testTailerEof() throws Exception {
             listener.clear();
         } finally {
             tailer.stop();
+            Thread.sleep(delay * 2);
             IOUtils.closeQuietly(writer);
         }
     }
