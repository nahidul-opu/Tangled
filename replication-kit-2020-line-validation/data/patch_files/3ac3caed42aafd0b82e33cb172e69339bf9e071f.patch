From 3ac3caed42aafd0b82e33cb172e69339bf9e071f Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Sun, 22 Nov 2009 22:18:59 +0000
Subject: [PATCH] FIX: ivy:retrieve sync="true" does nothing if first variable
 is optional (IVY-1142) (thanks to Andreas Axelsson)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@883156 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                             | 2 ++
 src/java/org/apache/ivy/core/IvyPatternHelper.java      | 6 ++++++
 test/java/org/apache/ivy/util/IvyPatternHelperTest.java | 9 +++++++++
 3 files changed, 17 insertions(+)

diff --git a/CHANGES.txt b/CHANGES.txt
index be2de7e23..6330d1b81 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -16,6 +16,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
  	Ingo Adler
  	alex322
  	Mathieu Anquetin
+ 	Andreas Axelsson
 	Stephane Bailliez
 	Karl Baum
 	Mikkel Bjerg
@@ -98,6 +99,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Trace a message when a property file referenced from the settings doesn't exixts (IVY-1074)
 - IMPROVEMENT: use defaultconf in combination with defaultconfmapping (IVY-1135) (thanks to Jon Schneider)
 
+- FIX: ivy:retrieve sync="true" does nothing if first variable is optional (IVY-1142) (thanks to Andreas Axelsson)
 - FIX: Latest Compatible Conflict Manager + Extra Attributes in Dependencies' IVY files == infinite loop (IVY-956)
 - FIX: Resolve with Extra Attributes, Forced Dependencies causes invalid delivered ivy file (IVY-1079)
 - FIX: ResolveEngine.getDependencies does not work using extra attributes (IVY-1115)
diff --git a/src/java/org/apache/ivy/core/IvyPatternHelper.java b/src/java/org/apache/ivy/core/IvyPatternHelper.java
index 143c6de2b..a4f96ef19 100644
--- a/src/java/org/apache/ivy/core/IvyPatternHelper.java
+++ b/src/java/org/apache/ivy/core/IvyPatternHelper.java
@@ -475,6 +475,12 @@ public static String getTokenRoot(String pattern) {
         if (index == -1) {
             return pattern;
         } else {
+            // it could be that pattern is something like "lib/([optional]/)[module]"
+            // we don't want the '(' in the result
+            int optionalIndex = pattern.indexOf('(');
+            if (optionalIndex >= 0) {
+                index = Math.min(index, optionalIndex);
+            }
             return pattern.substring(0, index);
         }
     }
diff --git a/test/java/org/apache/ivy/util/IvyPatternHelperTest.java b/test/java/org/apache/ivy/util/IvyPatternHelperTest.java
index 43a9e343d..6e8d0e1d9 100644
--- a/test/java/org/apache/ivy/util/IvyPatternHelperTest.java
+++ b/test/java/org/apache/ivy/util/IvyPatternHelperTest.java
@@ -69,4 +69,13 @@ public void testSpecialCharsInsidePattern() {
             pattern, "apache", "Test", "1.0", "test", "jar", "jar"));
     }
 
+    public void testTokenRoot() {
+        String pattern = "lib/[type]/[artifact].[ext]";
+        assertEquals("lib/", IvyPatternHelper.getTokenRoot(pattern));
+    }
+
+    public void testTokenRootWithOptionalFirstToken() {
+        String pattern = "lib/([type]/)[artifact].[ext]";
+        assertEquals("lib/", IvyPatternHelper.getTokenRoot(pattern));
+    }
 }
