From e9d7bcf5f2284f2aa326a3d2ea1807c465b0de8b Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Thu, 27 Dec 2012 20:54:42 +0000
Subject: [PATCH] COMPRESS-200 use the backing array of the returned ByteBuffer
 properly

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1426319 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                |  5 +++++
 .../compress/archivers/tar/TarArchiveOutputStream.java | 10 ++++++----
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 919c7a05d0b..19f40a41943 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -69,6 +69,11 @@ The <action> type attribute can be add,update,fix,remove.
         dependency on it has now been marked optional so Compress
         itself can still be used in an OSGi context.
       </action>
+      <action type="fix" date="2012-12-27" issue="COMPRESS-200">
+        When specifying the encoding explicitly TarArchiveOutputStream
+        would write unreadable names in GNU mode or even cause errors
+        in POSIX mode for file names longer than 66 characters.
+      </action>
     </release>
     <release version="1.4.1" date="2012-05-23"
              description="Release 1.4.1">
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index cb8e562bbb9..de140b41837 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.StringWriter;
+import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.Map;
 import org.apache.commons.compress.archivers.ArchiveEntry;
@@ -266,9 +267,10 @@ public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
         Map<String, String> paxHeaders = new HashMap<String, String>();
         final String entryName = entry.getName();
-        final byte[] nameBytes = encoding.encode(entryName).array();
+        final ByteBuffer encodedName = encoding.encode(entryName);
+        final int nameLen = encodedName.limit() - encodedName.position();
         boolean paxHeaderContainsPath = false;
-        if (nameBytes.length >= TarConstants.NAMELEN) {
+        if (nameLen >= TarConstants.NAMELEN) {
 
             if (longFileMode == LONGFILE_POSIX) {
                 paxHeaders.put("path", entryName);
@@ -279,9 +281,9 @@ public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,
                                                                     TarConstants.LF_GNUTYPE_LONGNAME);
 
-                longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL
+                longLinkEntry.setSize(nameLen + 1); // +1 for NUL
                 putArchiveEntry(longLinkEntry);
-                write(nameBytes);
+                write(encodedName.array(), encodedName.arrayOffset(), nameLen);
                 write(0); // NUL terminator
                 closeArchiveEntry();
             } else if (longFileMode != LONGFILE_TRUNCATE) {
