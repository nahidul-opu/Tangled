From 954d995c5603b616c3c4a9ffb1823f36dd7ebcb0 Mon Sep 17 00:00:00 2001
From: Julius Davies <julius@apache.org>
Date: Sun, 23 Jan 2011 05:52:42 +0000
Subject: [PATCH] CODEC-99 - Base64.encodeBase64String() should not chunk

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1062330 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/codec/binary/Base64.java  |  2 +-
 .../apache/commons/codec/binary/Base64Test.java  | 16 ++++++++--------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java
index 19a695947e..a5c44ab300 100644
--- a/src/java/org/apache/commons/codec/binary/Base64.java
+++ b/src/java/org/apache/commons/codec/binary/Base64.java
@@ -667,7 +667,7 @@ public static byte[] encodeBase64(byte[] binaryData) {
      * @since 1.4
      */    
     public static String encodeBase64String(byte[] binaryData) {
-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
+        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));
     }
     
     /**
diff --git a/src/test/org/apache/commons/codec/binary/Base64Test.java b/src/test/org/apache/commons/codec/binary/Base64Test.java
index ae7978e2f5..83d68cb6cb 100644
--- a/src/test/org/apache/commons/codec/binary/Base64Test.java
+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java
@@ -583,12 +583,12 @@ public void testRfc4648Section10DecodeWithCrLf() {
      */
     public void testRfc4648Section10Encode() {
         assertEquals("", Base64.encodeBase64String(StringUtils.getBytesUtf8("")));
-        //assertEquals("Zg==", Base64.encodeBase64String(StringUtils.getBytesUtf8("f")));
-        //assertEquals("Zm8=", Base64.encodeBase64String(StringUtils.getBytesUtf8("fo")));
-        //assertEquals("Zm9v", Base64.encodeBase64String(StringUtils.getBytesUtf8("foo")));
-        //assertEquals("Zm9vYg==", Base64.encodeBase64String(StringUtils.getBytesUtf8("foob")));
-        //assertEquals("Zm9vYmE=", Base64.encodeBase64String(StringUtils.getBytesUtf8("fooba")));
-        //assertEquals("Zm9vYmFy", Base64.encodeBase64String(StringUtils.getBytesUtf8("foobar")));
+        assertEquals("Zg==", Base64.encodeBase64String(StringUtils.getBytesUtf8("f")));
+        assertEquals("Zm8=", Base64.encodeBase64String(StringUtils.getBytesUtf8("fo")));
+        assertEquals("Zm9v", Base64.encodeBase64String(StringUtils.getBytesUtf8("foo")));
+        assertEquals("Zm9vYg==", Base64.encodeBase64String(StringUtils.getBytesUtf8("foob")));
+        assertEquals("Zm9vYmE=", Base64.encodeBase64String(StringUtils.getBytesUtf8("fooba")));
+        assertEquals("Zm9vYmFy", Base64.encodeBase64String(StringUtils.getBytesUtf8("foobar")));
     }
     
     /**
@@ -1126,13 +1126,13 @@ public void testByteToStringVariations() throws DecoderException {
         byte[] b4 = Hex.decodeHex("2bf7cc2701fe4397b49ebeed5acc7090".toCharArray());  // for url-safe tests
 
         assertEquals("byteToString Hello World", "SGVsbG8gV29ybGQ=", base64.encodeToString(b1));
-        assertEquals("byteToString static Hello World", "SGVsbG8gV29ybGQ=\r\n", Base64.encodeBase64String(b1));
+        assertEquals("byteToString static Hello World", "SGVsbG8gV29ybGQ=", Base64.encodeBase64String(b1));
         assertEquals("byteToString \"\"", "", base64.encodeToString(b2));
         assertEquals("byteToString static \"\"", "", Base64.encodeBase64String(b2));
         assertEquals("byteToString null", null, base64.encodeToString(b3));
         assertEquals("byteToString static null", null, Base64.encodeBase64String(b3));
         assertEquals("byteToString UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", base64.encodeToString(b4));
-        assertEquals("byteToString static UUID", "K/fMJwH+Q5e0nr7tWsxwkA==\r\n", Base64.encodeBase64String(b4));
+        assertEquals("byteToString static UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", Base64.encodeBase64String(b4));
         assertEquals("byteToString static-url-safe UUID", "K_fMJwH-Q5e0nr7tWsxwkA", Base64.encodeBase64URLSafeString(b4));
     }
 
