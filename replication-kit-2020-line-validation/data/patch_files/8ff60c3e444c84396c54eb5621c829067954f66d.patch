From 8ff60c3e444c84396c54eb5621c829067954f66d Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Sat, 12 Mar 2011 01:13:38 +0000
Subject: [PATCH] IO-260 Fix ClassLoaderObjectInputStream does not handle Proxy
 classes - thanks to John Carrino

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1080833 13f79535-47bb-0310-9956-ffa450edef68
---
 .../input/ClassLoaderObjectInputStream.java   | 24 +++++++++++++++++++
 .../ClassLoaderObjectInputStreamTest.java     | 14 +++++++++++
 2 files changed, 38 insertions(+)

diff --git a/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java b/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
index 86630d1d484..300bd5892c0 100644
--- a/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java
@@ -21,6 +21,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectStreamClass;
 import java.io.StreamCorruptedException;
+import java.lang.reflect.Proxy;
 
 /**
  * A special ObjectInputStream that loads a class based on a specified
@@ -75,4 +76,27 @@ protected Class<?> resolveClass(ObjectStreamClass objectStreamClass)
             return super.resolveClass(objectStreamClass);
         }
     }
+
+    /**
+     * Create a proxy class that implements the specified interfaces using
+     * the specified ClassLoader or the super ClassLoader.
+     *
+     * @param interfaces the interfaces to implemnt
+     * @return the class
+     * @see java.io.ObjectInputStream#resolveProxyClass(java.lang.String[])
+     */
+    @Override
+    protected Class<?> resolveProxyClass(String[] interfaces) throws IOException,
+            ClassNotFoundException {
+        Class<?>[] interfaceClasses = new Class[interfaces.length];
+        for (int i = 0; i < interfaces.length; i++) {
+            interfaceClasses[i] = Class.forName(interfaces[i], false, classLoader);
+        }
+        try {
+            return Proxy.getProxyClass(classLoader, interfaceClasses);
+        } catch (IllegalArgumentException e) {
+            return super.resolveProxyClass(interfaces);
+        }
+    }
+    
 }
diff --git a/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java b/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java
index 725dc31bbe8..7ef79f6cfee 100644
--- a/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java
+++ b/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java
@@ -54,5 +54,19 @@ public void testExpected() throws Exception {
 
         assertTrue( !result.booleanValue() );
     }
+
+    public void testResolveProxyClass() throws Exception {
+
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject( Boolean.FALSE );
+        InputStream bais = new ByteArrayInputStream(baos.toByteArray());
+
+        ClassLoaderObjectInputStream clois = 
+            new ClassLoaderObjectInputStream(getClass().getClassLoader(), bais);
+        String[] interfaces = new String[] { Comparable.class.getName() };
+        Class<?> result = clois.resolveProxyClass(interfaces);
+        assertTrue("Assignable", Comparable.class.isAssignableFrom(result));
+    }
     
 }
