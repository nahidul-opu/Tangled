From 861f6fc042985dcf07968f41b7a97155ef00fbb3 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 11 Apr 2018 15:42:31 +0000
Subject: [PATCH] CONFIGURATION-652: XML namespace attributes are now set
 correctly.

When loading and saving XML configuration files the attributes of the
root node are now updated correctly. Thanks to claude at xenei dot com
for the patch.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1828907 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration2/XMLConfiguration.java      |   1 +
 .../configuration2/TestXMLConfiguration.java  |  60 ++++++++++++++++++
 src/test/resources/testChildNamespace.xml     | Bin 0 -> 1928 bytes
 src/test/resources/testRootNamespace.xml      | Bin 0 -> 1880 bytes
 4 files changed, 61 insertions(+)
 create mode 100644 src/test/resources/testChildNamespace.xml
 create mode 100644 src/test/resources/testRootNamespace.xml

diff --git a/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java b/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
index 3fe0e19267..0eba290888 100644
--- a/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
@@ -1135,6 +1135,7 @@ public XMLBuilderVisitor(XMLDocumentHelper docHelper,
          */
         public void processDocument(ReferenceNodeHandler refHandler)
         {
+            updateAttributes(refHandler.getRootNode(), document.getDocumentElement() );
             NodeTreeWalker.INSTANCE.walkDFS(refHandler.getRootNode(), this,
                     refHandler);
         }
diff --git a/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java b/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
index 3e7890147f..dec88784eb 100644
--- a/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
@@ -397,6 +397,20 @@ public void testSetRootAttribute() throws ConfigurationException
                 .getString("[@test]"));
     }
 
+    @Test
+    public void testSetRootNamespace() throws ConfigurationException
+    {
+        conf.addProperty(  "[@xmlns:foo]",  "http://example.com/" );
+        conf.addProperty(  "foo:bar", "foobar" );
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:foo]"));
+        saveTestConfig();
+        XMLConfiguration checkConf = checkSavedConfig();
+        assertTrue("Attribute not found after save", checkConf
+                .containsKey("[@xmlns:foo]"));
+        checkConf.setProperty("[@xmlns:foo]", "http://example.net/");
+    }
+
     @Test
     public void testAddList()
     {
@@ -918,6 +932,23 @@ public void testLoadWithEncoding() throws ConfigurationException
         assertEquals("test3_yoge", conf.getString("yoge"));
     }
 
+
+    @Test
+    public void testLoadWithRootNamespace() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        new FileHandler(conf).load(ConfigurationAssert.getTestFile("testRootNamespace.xml"));
+        assertEquals("http://example.com/", conf.getString("[@xmlns:foo]"));
+    }
+
+    @Test
+    public void testLoadChildNamespace() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        new FileHandler(conf).load(ConfigurationAssert.getTestFile("testChildNamespace.xml"));
+        assertEquals("http://example.com/", conf.getString("foo:bar.[@xmlns:foo]"));
+    }
+
     /**
      * Tests whether the encoding is written to the generated XML file.
      */
@@ -935,6 +966,35 @@ public void testSaveWithEncoding() throws ConfigurationException
                 containsString("encoding=\"" + ENCODING + "\""));
     }
 
+    @Test
+    public void testSaveWithRootAttributes() throws ConfigurationException
+    {
+        conf.setProperty("[@xmlns:ex]", "http://example.com/");
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:ex]"));
+        FileHandler handler = new FileHandler(conf);
+
+        StringWriter out = new StringWriter();
+        handler.save(out);
+        assertThat("Encoding was not written to file", out.toString(),
+                containsString("testconfig xmlns:ex=\"http://example.com/\""));
+    }
+
+    @Test
+    public void testSaveWithRootAttributes_ByHand() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        conf.addProperty(  "[@xmlns:foo]",  "http://example.com/" );
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:foo]"));
+        FileHandler handler = new FileHandler(conf);
+
+        StringWriter out = new StringWriter();
+        handler.save(out);
+        assertThat("Encoding was not written to file", out.toString(),
+                containsString("configuration xmlns:foo=\"http://example.com/\""));
+    }
+
     /**
      * Tests whether a default encoding is used if no specific encoding is set.
      * According to the XSLT specification (http://www.w3.org/TR/xslt#output)
diff --git a/src/test/resources/testChildNamespace.xml b/src/test/resources/testChildNamespace.xml
new file mode 100644
index 0000000000000000000000000000000000000000..145f23707f5f378363459a59cbb6706e31b3d74e
GIT binary patch
literal 1928
zcmb7_T~8BH5QgX4#Q$*Y4VXYtFTB7aL4-&oHK8EkvLD;p*lugPweaWF=bf{g)2<L>
zn(X$R`F`h}*<Zh{Wyf}JQ=3?@pO)FemNvGT<#uEZdu>g7#XBI$t<U`cX>KEz-q^LB
z+df)vUFX=|+jDz{&llY8`~QG#uuH7^?qkVwz)gWKJ-=}dc4Bkuq7hFWWJ6?Y?iMaT
z=VnFR0XIdNU$9;5I%Mz?4^gW81G>3e&HOawEHBC|W}`ZC{4DU)!&14(ZnBkSAlAq&
zGw@OU1=uv*M~AcWuJUi&7qGanQ#<2!h@Xkeh1PN_QmlT>y=+rXI!QNBwX*r{eqvr-
z>XxUf@~(GFeHgm#bPE;LI&$QyUIp*m+#bB*5s?bK&xj<P)N#e0Q(MaCn!DH;Aza5s
zd8Uk0y|Jrz_+Fv0*%N91-RW&!>|yh@%qVg&*c)eH%4^r-%2T7pss=oG$NfVYU8p>8
z&N-{z6?Mw)vAi>8K>VD$rjU)8O}P;(y4*;v?mX5xNw#Z=JgJbVa+$%m0&g)ww~V6B
zs2@X~6;9jU#Kpq9laPp94&KdzJP+-F-`amo^wUH&@x6c(2Q`K-xw$M^+h&r^nAwDP
zigZKu;`7q^DSrI`%`rYBn|q$WB1W|OMDMwUc+({#Ri_C{6P0#A#A1y+GF;n5OjtT1
zX$z!$o|>x1_*Ta;&e&5Pv=@}6o(<nF0em{X-9GqPr@f6ixkY|$pO}Ab!(g{)UGY1y
zwr_+p^aIi>o~OLq_R%da{C|{bzNCN0`!iDM2!X8RTHI>l=-e@neTayT*-a63^<r~^
z>pQBBMBE*TaZCJUuzc+Mt51COPTg2}-^B3|J&9k596iZ`TP?^!$X4GD?FZQoHjtX2
zAuaL0+GNuEch_Q7`l7_|i<r>DhZtFas<zjJSZzFOQ>zkvO|nv7lhX2CIb%wC$i&4^
se)n?p4@>Eh?bPN;sLQJ`&cIjSjwy4qgYOn^p_sf@-@k+Z$c}3M0NxHgU;qFB

literal 0
HcmV?d00001

diff --git a/src/test/resources/testRootNamespace.xml b/src/test/resources/testRootNamespace.xml
new file mode 100644
index 0000000000000000000000000000000000000000..7bfda864e16ed0af7e6fe93c43dbccea4262ccfc
GIT binary patch
literal 1880
zcma)-T~8BH5QgX4#Q$*Y4VXYtFT6mMAVMUPnoy8%x%A7%c3a!6g+H%8?@ZTiSBPel
zZO@tScix%(`O6OM(C%z(BTM$fdN#AU4Q*n%y|sqDw5Gk_HzCQb!+jTNZUdKI*`=M@
zE?Tc$=g{8SQ+tBXXWZ`k|AcL_bF4b<W6rzFO@S}Hzj97?WK+w~h*KL`AK8+-nafYP
zSrE6&O|i-^**11<GI)-MkShO#ZthkSKaDxdi!zIBR7Z}V8J=#jR4%d`ZDg5<HE_!w
z_^AE@Y?|()%~^Su`M2ydSe)6hop9U7&&cIMYrYXFs$X(1+bSoWq?@Q(*?e<9kyl3D
z@>EuydAHPuzUz)RP*JS|N3QHu^3F}|-YXsuslfY$NWw`SSL`XZRry?U7o8Epb!?Pp
zm2p*XboB<`3pCbyBJICBy~&FmY`&~A3JxZF<qWLy+V;5e)Tptl0T14Af4_<@RPH(F
zoK^3FI%W4z-aTeO{G7U`kPXbn+=vw!H<GJ64|PtG&02ydB@$&W6Zlr(Eh1#ADC&&*
z(dS*_wCPP;EWA4v62ax<-7Ls+-}ZQx{xs3ACaQ_=8JyUwF?`O=`HHnICh3Hkt?;fQ
zT~WRGJa>MIU*AD<h|gg2t>>?ZfmVm;w{9WcWMri3G-1_5RXZTCSRxOGYrBXEb4R4w
z0#!bbP1QqutK%3m_Lv9l1!bvs!?#NUpSEwe_kPxCXKhZdkzd+J=3m<|*)>`hJV(~@
zjc|f~LVCgbnBSItaEmklA2Q9C^l$k6gj700pts^$Y&CIo>X=6#0?{G6DNt80)+e~W
zqv}Y+?x+|y$4?KI4}E`ih_BwM8w>B7I6j~!@s-HYlPtN_j4Xs~`R&ktkZpGjsSz5|
z693ChCcS@mEvnKNCB83W!T~<S$O2?1JO!v_zNb}(z9q^xzHB*q`@SnDe7Cl06C+$@
aDHMAksISAA$=D*AW-OxZ{YSh%+5HA^bT%LW

literal 0
HcmV?d00001

