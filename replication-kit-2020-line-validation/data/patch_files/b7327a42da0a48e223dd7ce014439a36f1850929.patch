From b7327a42da0a48e223dd7ce014439a36f1850929 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Thu, 26 Jul 2012 19:46:32 +0000
Subject: [PATCH] [COLLECTIONS-239] Use of generic Equator in EqualPredicate.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1366174 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 ++-
 .../collections/functors/EqualPredicate.java  | 44 ++++++++++++++++---
 2 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 8a8f23030e..716460e504 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -22,8 +22,11 @@
   <body>
 
   <release version="4.0" date="TBA" description="Next release">
+    <action issue="COLLECTION-239" type="add" due-to="Stephen Kestle">
+      Added support for using custom "Equator" objects in "EqualPredicate".
+    </action>
     <action issue="COLLECTIONS-425" type="fix" due-to="Adrian Nistor">
-      Improved performance of ListOrderedMap#remove(Object) method.
+      Improved performance of "ListOrderedMap#remove(Object)" method.
     </action>
   </release>
   </body>
diff --git a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
index c98b54d954..396bb83438 100644
--- a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
+++ b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java
@@ -35,11 +35,15 @@ public final class EqualPredicate<T> implements Predicate<T>, Serializable {
     private static final long serialVersionUID = 5633766978029907089L;
 
     /** The value to compare to */
-    private final Object iValue;
+    private final T iValue;
+    
+    /** The equator to use for comparison */
+    private final Equator<T> equator;
 
     /**
-     * Factory to create the identity predicate.
+     * Factory to create the predicate.
      * 
+     * @param <T> the type that the predicate queries
      * @param object  the object to compare to
      * @return the predicate
      * @throws IllegalArgumentException if the predicate is null
@@ -51,15 +55,45 @@ public static <T> Predicate<T> equalPredicate(T object) {
         return new EqualPredicate<T>(object);
     }
 
+    /**
+     * Factory to create the identity predicate.
+     * 
+     * @param <T> the type that the predicate queries
+     * @param object  the object to compare to
+     * @param equator  the equator to use for comparison
+     * @return the predicate
+     * @throws IllegalArgumentException if the predicate is null
+     * @since 4.0
+     */
+    public static <T> Predicate<T> equalPredicate(T object, Equator<T> equator) {
+        if (object == null) {
+            return nullPredicate();
+        }
+        return new EqualPredicate<T>(object, equator);
+    }
+
+    /**
+     * Constructor that performs no validation.
+     * Use <code>getInstance</code> if you want that.
+     * 
+     * @param object  the object to compare to
+     */
+    public EqualPredicate(T object) {
+        this(object, new DefaultEquator<T>());
+    }
+
     /**
      * Constructor that performs no validation.
      * Use <code>getInstance</code> if you want that.
      * 
      * @param object  the object to compare to
+     * @param equator  the equator to use for comparison
+     * @since 4.0
      */
-    public EqualPredicate(Object object) {
+    public EqualPredicate(T object, Equator<T> equator) {
         super();
         iValue = object;
+        this.equator = equator;
     }
 
     /**
@@ -68,8 +102,8 @@ public EqualPredicate(Object object) {
      * @param object  the input object
      * @return true if input object equals stored value
      */
-    public boolean evaluate(Object object) {
-        return (iValue.equals(object));
+    public boolean evaluate(T object) {
+        return equator.equate(iValue, object);
     }
 
     /**
