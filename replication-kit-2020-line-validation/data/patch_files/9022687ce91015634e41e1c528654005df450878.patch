From 9022687ce91015634e41e1c528654005df450878 Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Wed, 5 Apr 2006 16:15:53 +0000
Subject: [PATCH] FIX: modules splitted across a chain are not handled
 correctly (IVY-206)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/trunk@484271 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../jayasoft/ivy/resolver/BasicResolver.java  | 32 ++++---
 .../jayasoft/ivy/resolver/ChainResolver.java  | 14 +--
 .../ivy/resolver/ChainResolverTest.java       | 86 ++++++++++++++++++-
 4 files changed, 114 insertions(+), 19 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index 654ff9803..2178cc2f3 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -6,6 +6,7 @@
 - IMPROVE: performances improved (IVY-187) (thanks to Karl Baum)
 - IMPROVE: Change default cache artifact pattern to handle missing extension (IVY-196) (thanks to Johan Stuyts)
 
+- FIX: modules splitted across a chain are not handled correctly (IVY-206)
 - FIX: Delivered Ivy files with incomplete last line. (IVY-125) (thanks to Matthias Kilian)
 
    version 1.3.1 - 2006-03-30
diff --git a/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java b/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
index c46877f29..c58f53d6d 100644
--- a/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
+++ b/src/java/fr/jayasoft/ivy/resolver/BasicResolver.java
@@ -138,14 +138,17 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
 
         // if we do not have to check modified and if the revision is exact and not changing,  
         // we first search for it in cache
+        ResolvedModuleRevision cachedRmr = null;
+        boolean checkedCache = false;
         if (mrid.isExactRevision() && !isCheckmodified() && !isChangingDependency) {
-            ResolvedModuleRevision rmr = findModuleInCache(data, mrid);
-            if (rmr != null) {
-                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this && isResolved(data, mrid)) {
-                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+" (resolved by "+rmr.getResolver().getName()+"): but it's a default one, maybe we can find a better one");
+            cachedRmr = findModuleInCache(data, mrid);
+            checkedCache = true;
+            if (cachedRmr != null) {
+                if (cachedRmr.getDescriptor().isDefault() && cachedRmr.getResolver() != this) {
+                    Message.verbose("\t"+getName()+": found revision in cache: "+mrid+" (resolved by "+cachedRmr.getResolver().getName()+"): but it's a default one, maybe we can find a better one");
                 } else {
                     Message.verbose("\t"+getName()+": revision in cache: "+mrid);
-                    return toSystem(rmr);
+                    return toSystem(cachedRmr);
                 }
             }
         }
@@ -171,6 +174,13 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
                         logArtifactNotFound(artifacts[j]);
                     }
                 }
+                if (!checkedCache) {
+                    cachedRmr = findModuleInCache(data, mrid);
+                }
+                if (cachedRmr != null) {
+                    Message.verbose("\t"+getName()+": revision in cache: "+mrid);
+                    return toSystem(cachedRmr);                    
+                }
                 return null;
             } else {
                 Message.verbose("\t"+getName()+": no ivy file found for "+mrid+": using default data");            
@@ -208,7 +218,7 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
             // now let's see if we can find it in cache and if it is up to date
             ResolvedModuleRevision rmr = findModuleInCache(data, resolvedMrid);
             if (rmr != null) {
-                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this && isResolved(data, resolvedMrid)) {
+                if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this) {
                     Message.verbose("\t"+getName()+": found revision in cache: "+mrid+" (resolved by "+rmr.getResolver().getName()+"): but it's a default one, maybe we can find a better one");
                 } else {
                     if (!isCheckmodified() && !isChangingDependency) {
@@ -381,11 +391,11 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
         return new DefaultModuleRevision(this, systemMd, searched, downloaded);
     }
 
-    private boolean isResolved(ResolveData data, ModuleRevisionId mrid) {
-        IvyNode node = getSystemNode(data, mrid);
-        return node != null && node.getModuleRevision() != null;
-    }
-
+//    private boolean isResolved(ResolveData data, ModuleRevisionId mrid) {
+//        IvyNode node = getSystemNode(data, mrid);
+//        return node != null && node.getModuleRevision() != null;
+//    }
+//
     private void checkDescriptorConsistency(ModuleRevisionId mrid, ModuleDescriptor md, ResolvedResource ivyRef) throws ParseException {
         boolean ok = true;
         if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
diff --git a/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java b/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
index d3d9b0029..fbf6140d7 100644
--- a/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
+++ b/src/java/fr/jayasoft/ivy/resolver/ChainResolver.java
@@ -77,20 +77,22 @@ public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData
                         (!dd.getDependencyRevisionId().isExactRevision() 
                          || (ret == null || ret.getDescriptor().isDefault()))) {
                     // check if latest is asked and compare to return the most recent
+                    String mrDesc = mr.getId()+(mr.getDescriptor().isDefault()?"[default]":"")+" from "+mr.getResolver().getName();
+                    Message.debug("\tchecking "+mrDesc+" against "+ret);
                     if (ret == null) {
-                        Message.debug("\tmodule revision kept as first found: "+mr.getId());
+                        Message.debug("\tmodule revision kept as first found: "+mrDesc);
                         ret = mr;
                     } else if (isAfter(mr, ret, data.getDate())) {
-                        Message.debug("\tmodule revision kept as younger: "+mr.getId());
+                        Message.debug("\tmodule revision kept as younger: "+mrDesc);
                         ret = mr;
-                    } else if (ret != null && !mr.getDescriptor().isDefault() && ret.getDescriptor().isDefault()) {
-                            Message.debug("\tmodule revision kept as better (not default): "+mr.getId());
+                    } else if (!mr.getDescriptor().isDefault() && ret.getDescriptor().isDefault()) {
+                            Message.debug("\tmodule revision kept as better (not default): "+mrDesc);
                             ret = mr;
                     } else {
-                        Message.debug("\tmodule revision discarded as older: "+mr.getId());
+                        Message.debug("\tmodule revision discarded as older: "+mrDesc);
                     }
                     if (dd.getDependencyRevisionId().isExactRevision() && !ret.getDescriptor().isDefault()) {
-                        Message.debug("\tmodule revision found and is not default: returning "+mr.getId());
+                        Message.debug("\tmodule revision found and is not default: returning "+mrDesc);
                         return resolvedRevision(mr);
                     }
                 } else {
diff --git a/test/java/fr/jayasoft/ivy/resolver/ChainResolverTest.java b/test/java/fr/jayasoft/ivy/resolver/ChainResolverTest.java
index e010eeecd..61be6b9bf 100644
--- a/test/java/fr/jayasoft/ivy/resolver/ChainResolverTest.java
+++ b/test/java/fr/jayasoft/ivy/resolver/ChainResolverTest.java
@@ -5,10 +5,14 @@
  */
 package fr.jayasoft.ivy.resolver;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.GregorianCalendar;
 import java.util.List;
 
+import org.apache.tools.ant.Project;
+import org.apache.tools.ant.taskdefs.Delete;
+
 import junit.framework.TestCase;
 import fr.jayasoft.ivy.DefaultDependencyDescriptor;
 import fr.jayasoft.ivy.DependencyDescriptor;
@@ -25,8 +29,25 @@
  * Tests ChainResolver
  */
 public class ChainResolverTest extends TestCase {
-    private Ivy _ivy = new Ivy();
-    private ResolveData _data = new ResolveData(_ivy, null, null, null, true);
+    private Ivy _ivy;
+    private ResolveData _data;
+    private File _cache;
+    
+    protected void setUp() throws Exception {
+        _ivy = new Ivy();
+        _cache = new File("build/cache");
+        _data = new ResolveData(_ivy, _cache, null, null, true);
+        _cache.mkdirs();
+        _ivy.setDefaultCache(_cache);
+    }
+    
+    protected void tearDown() throws Exception {
+        Delete del = new Delete();
+        del.setProject(new Project());
+        del.setDir(_cache);
+        del.execute();
+    }
+    
     public void testOrderFromConf() throws Exception {
         new XmlIvyConfigurationParser(_data.getIvy()).parse(ChainResolverTest.class.getResource("chainresolverconf.xml"));
         DependencyResolver resolver = _data.getIvy().getResolver("chain");
@@ -195,6 +216,67 @@ public void testLatestWithDefault() throws Exception {
         }
     }
     
+    public void testFixedWithDefault() throws Exception {
+        ChainResolver chain = new ChainResolver();
+        chain.setName("chain");
+        chain.setIvy(_ivy);
+        chain.setLatestStrategy(new LatestRevisionStrategy());
+        MockResolver[] resolvers = new MockResolver[] {
+                MockResolver.buildMockResolver("1", false, null), 
+                MockResolver.buildMockResolver("2", true, ModuleRevisionId.newInstance("org", "mod", "4"), new GregorianCalendar(2005, 1, 22).getTime(), true), // default 
+                MockResolver.buildMockResolver("3", false, null), 
+                MockResolver.buildMockResolver("4", true, ModuleRevisionId.newInstance("org", "mod", "4"), new GregorianCalendar(2005, 1, 22).getTime()), // not default -> should the one kept 
+                MockResolver.buildMockResolver("5", false, null)
+            };
+        for (int i = 0; i < resolvers.length; i++) {
+            chain.add(resolvers[i]);
+        }
+        assertResolversSizeAndNames(chain, resolvers.length);
+        
+        DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("org","mod", "4"), false);
+        ResolvedModuleRevision rmr = chain.getDependency(dd, _data);
+        assertNotNull(rmr);
+        assertEquals("4", rmr.getResolver().getName());
+        List ddAsList = Arrays.asList(new DependencyDescriptor[] {dd});
+        for (int i = 0; i < 4; i++) {
+            assertEquals("invalid asked dependencies for "+resolvers[i], ddAsList, resolvers[i].askedDeps);
+        }
+        for (int i = 4; i < resolvers.length; i++) {
+            assertTrue("invalid asked dependencies for "+resolvers[i], resolvers[i].askedDeps.isEmpty());
+        }
+    }
+    
+    public void testFixedWithDefaultAndRealResolver() throws Exception {
+        // test case for IVY-206
+        ChainResolver chain = new ChainResolver();
+        chain.setName("chain");
+        chain.setIvy(_ivy);
+        
+        // no ivy pattern for first resolver: will only find a 'default' module
+        FileSystemResolver resolver = new FileSystemResolver();
+        resolver.setName("1");
+        resolver.setIvy(_ivy);
+        
+        resolver.addArtifactPattern("test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]");
+        chain.add(resolver);
+        
+        // second resolver has an ivy pattern and will thus find the real module, which should be kept
+        resolver = new FileSystemResolver();
+        resolver.setName("2");
+        resolver.setIvy(_ivy);
+        
+        resolver.addIvyPattern("test/repositories/1/[organisation]/[module]/ivys/ivy-[revision].xml");
+        resolver.addArtifactPattern("test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]");
+        chain.add(resolver);
+        
+        _ivy.addResolver(chain);
+        
+        DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("org1","mod1.1", "1.0"), false);
+        ResolvedModuleRevision rmr = chain.getDependency(dd, _data);
+        assertNotNull(rmr);
+        assertEquals("2", rmr.getResolver().getName());
+    }
+    
     public void testReturnFirst() throws Exception {
         ChainResolver chain = new ChainResolver();
         chain.setName("chain");
