From 11eeec149ac0f37d1cf602c470b07e1111b3fed7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Mon, 6 Jun 2011 15:22:33 +0000
Subject: [PATCH] OPENNLP-154 Prior values are scaled down to be between -1 and
 1 before the normalization is performed.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1132668 13f79535-47bb-0310-9956-ffa450edef68
---
 .../main/java/opennlp/perceptron/PerceptronModel.java  | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/opennlp-maxent/src/main/java/opennlp/perceptron/PerceptronModel.java b/opennlp-maxent/src/main/java/opennlp/perceptron/PerceptronModel.java
index 698e8fe64..96742d4d7 100644
--- a/opennlp-maxent/src/main/java/opennlp/perceptron/PerceptronModel.java
+++ b/opennlp-maxent/src/main/java/opennlp/perceptron/PerceptronModel.java
@@ -98,8 +98,16 @@ public static double[] eval(int[] context, float[] values, double[] prior, EvalP
     }    
     if (normalize) {
       int numOutcomes = model.getNumOutcomes();
+      
+      double maxPrior = 1;
+      
+      for (int oid = 0; oid < numOutcomes; oid++) {
+        if (maxPrior < Math.abs(prior[oid]))
+          maxPrior = Math.abs(prior[oid]);
+      }
+      
       for (int oid = 0; oid < numOutcomes; oid++)
-	prior[oid] = Math.exp(prior[oid]);
+	prior[oid] = Math.exp(prior[oid]/maxPrior);
 
       double normal = 0.0;
       for (int oid = 0; oid < numOutcomes; oid++)
