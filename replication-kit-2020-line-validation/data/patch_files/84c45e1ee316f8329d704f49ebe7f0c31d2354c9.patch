From 84c45e1ee316f8329d704f49ebe7f0c31d2354c9 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Thu, 28 Apr 2011 21:51:30 +0000
Subject: [PATCH] Made equals reflexive in DelegatingStatement (and
 subclasses), DelegatingMetaData, DelegatingResultSet and
 PoolingDriver#PoolGuardConnectionWrapper. JIRA: DBCP-337 Reported and patched
 by Rob Gansevles

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/branches/DBCP_1_4_x_BRANCH@1097630 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                         |  4 ++++
 .../dbcp/DelegatingCallableStatement.java       |  1 +
 .../dbcp/DelegatingDatabaseMetaData.java        |  1 +
 .../dbcp/DelegatingPreparedStatement.java       |  1 +
 .../commons/dbcp/DelegatingResultSet.java       |  1 +
 .../commons/dbcp/DelegatingStatement.java       | 11 +++++++++--
 .../org/apache/commons/dbcp/PoolingDriver.java  |  1 +
 .../dbcp/TestDelegatingCallableStatement.java   |  5 ++++-
 .../commons/dbcp/TestDelegatingConnection.java  |  3 +++
 .../dbcp/TestDelegatingDatabaseMetaData.java    |  3 +++
 .../dbcp/TestDelegatingPreparedStatement.java   |  5 ++++-
 .../commons/dbcp/TestDelegatingStatement.java   | 17 +++++++++++++++++
 12 files changed, 49 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2b731254b0..8c651987f5 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -39,6 +39,10 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="1.4.1" date="TBD" description="TBD">
+      <action dev="psteitz" issue="DBCP-337" type="fix" due-to="Rob Gansevles">
+        Made equals reflexive in DelegatingStatement (and subclasses), DelegatingMetaData,
+        DelegatingResultSet and PoolingDriver#PoolGuardConnectionWrapper.
+      </action>
       <action dev="psteitz" issue="DBCP-342" type="fix" due-to="Byungchol Kim">
         Modified createDataSource method in BasicDataSource to ensure that GenericObjectPool
         Evictor tasks are not started and orphaned when BasicDataSource encounters errors on
diff --git a/src/java/org/apache/commons/dbcp/DelegatingCallableStatement.java b/src/java/org/apache/commons/dbcp/DelegatingCallableStatement.java
index 064284094d..b08d03ffb4 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingCallableStatement.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingCallableStatement.java
@@ -72,6 +72,7 @@ public DelegatingCallableStatement(DelegatingConnection c,
     }
 
     public boolean equals(Object obj) {
+    	if (this == obj) return true;
         CallableStatement delegate = (CallableStatement) getInnermostDelegate();
         if (delegate == null) {
             return false;
diff --git a/src/java/org/apache/commons/dbcp/DelegatingDatabaseMetaData.java b/src/java/org/apache/commons/dbcp/DelegatingDatabaseMetaData.java
index cc3ccd4ff6..7a622eb4b2 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingDatabaseMetaData.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingDatabaseMetaData.java
@@ -56,6 +56,7 @@ public DatabaseMetaData getDelegate() {
     }
 
     public boolean equals(Object obj) {
+    	if (this == obj) return true;
         DatabaseMetaData delegate = getInnermostDelegate();
         if (delegate == null) {
             return false;
diff --git a/src/java/org/apache/commons/dbcp/DelegatingPreparedStatement.java b/src/java/org/apache/commons/dbcp/DelegatingPreparedStatement.java
index 328b6ec69e..abb799839f 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingPreparedStatement.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingPreparedStatement.java
@@ -71,6 +71,7 @@ public DelegatingPreparedStatement(DelegatingConnection c,
     }
 
     public boolean equals(Object obj) {
+    	if (this == obj) return true;
         PreparedStatement delegate = (PreparedStatement) getInnermostDelegate();
         if (delegate == null) {
             return false;
diff --git a/src/java/org/apache/commons/dbcp/DelegatingResultSet.java b/src/java/org/apache/commons/dbcp/DelegatingResultSet.java
index 5aa2e63bab..984944ad39 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingResultSet.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingResultSet.java
@@ -118,6 +118,7 @@ public ResultSet getDelegate() {
     }
 
     public boolean equals(Object obj) {
+    	if (this == obj) return true;
         ResultSet delegate = getInnermostDelegate();
         if (delegate == null) {
             return false;
diff --git a/src/java/org/apache/commons/dbcp/DelegatingStatement.java b/src/java/org/apache/commons/dbcp/DelegatingStatement.java
index 1ce7d7235d..7790332d0a 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingStatement.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingStatement.java
@@ -73,10 +73,17 @@ public Statement getDelegate() {
     }
 
     /**
-     * This method considers two objects to be equal 
-     * if the underlying jdbc objects are equal.
+     * <p>This method considers two objects to be equal 
+     * if the underlying jdbc objects are equal.</p>
+     * 
+     * <p>If {@code obj} is a DelegatingStatement, this DelegatingStatement's 
+     * {@link #getInnermostDelegate() innermostDelegate} is compared with
+     * the innermost delegate of obj; otherwise obj itself is compared with the
+     * the Statement returned by {@link #getInnermostDelegate()}.</p>
+     * 
      */
     public boolean equals(Object obj) {
+    	if (obj == this) return true;
         Statement delegate = getInnermostDelegate();
         if (delegate == null) {
             return false;
diff --git a/src/java/org/apache/commons/dbcp/PoolingDriver.java b/src/java/org/apache/commons/dbcp/PoolingDriver.java
index 2186fd7910..0e25450af0 100644
--- a/src/java/org/apache/commons/dbcp/PoolingDriver.java
+++ b/src/java/org/apache/commons/dbcp/PoolingDriver.java
@@ -304,6 +304,7 @@ public Statement createStatement(int resultSetType, int resultSetConcurrency) th
         }
 
         public boolean equals(Object obj) {
+            if (this == obj) return true;
             if (delegate == null){
                 return false;
             }
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingCallableStatement.java b/src/test/org/apache/commons/dbcp/TestDelegatingCallableStatement.java
index ddb8a8098f..a271d69710 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingCallableStatement.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingCallableStatement.java
@@ -105,7 +105,7 @@ public void testEquals() {
         // Check self-equals
         assertTrue(stmt1.equals(stmt1));
         assertTrue(stmt2.equals(stmt2));
-        assertFalse(stmt3.equals(stmt3)); // because underlying statement is null
+        assertTrue(stmt3.equals(stmt3)); 
         assertTrue(stmt4.equals(stmt4));
         
         DelegatingStatement dstmt1 = stmt1;
@@ -113,6 +113,9 @@ public void testEquals() {
         // 1 & 2 are equivalent
         assertTrue(dstmt1.equals(stmt2));
         assertTrue(stmt2.equals(dstmt1)); // reflexive
+        
+        // innermost delegate itself - bugged behavior?
+        assertTrue(stmt1.equals(delegateStmt));
 
     }
 
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
index 54b8535c7c..b4d5932b9f 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
@@ -78,6 +78,9 @@ public void testEquals() {
         assertTrue(conn.equals(conn2));
         assertTrue(!conn.equals(conn3));
         assertTrue(conn.equals(conn));
+        assertTrue(conn3.equals(conn3));
+        assertTrue(conn.equals(conn));
+        assertTrue(conn2.equals(conn2));
     }
     
     public void testCheckOpen() throws Exception {
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingDatabaseMetaData.java b/src/test/org/apache/commons/dbcp/TestDelegatingDatabaseMetaData.java
index 71f8987512..9ee947b36d 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingDatabaseMetaData.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingDatabaseMetaData.java
@@ -83,6 +83,9 @@ public void testEquals() {
         assertTrue(!meta1.equals(null));
         assertTrue(meta1.equals(meta2));
         assertTrue(!meta1.equals(meta3));
+        assertTrue(meta1.equals(meta1));
+        assertTrue(meta2.equals(meta2));
+        assertTrue(meta3.equals(meta3));
     }
     
     /* JDBC_4_ANT_KEY_BEGIN */
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingPreparedStatement.java b/src/test/org/apache/commons/dbcp/TestDelegatingPreparedStatement.java
index 2903f06a91..98923e3509 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingPreparedStatement.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingPreparedStatement.java
@@ -107,7 +107,7 @@ public void testEquals() {
         // Check self-equals
         assertTrue(stmt1.equals(stmt1));
         assertTrue(stmt2.equals(stmt2));
-        assertFalse(stmt3.equals(stmt3)); // because underlying statement is null
+        assertTrue(stmt3.equals(stmt3)); 
         assertTrue(stmt4.equals(stmt4));
         
         DelegatingStatement dstmt1 = stmt1;
@@ -115,6 +115,9 @@ public void testEquals() {
         // 1 & 2 are equivalent
         assertTrue(dstmt1.equals(stmt2));
         assertTrue(stmt2.equals(dstmt1)); // reflexive
+        
+        // innermost delegate itself - bugged behavior?
+        assertTrue(stmt1.equals(delegateStmt));
 
     }
 
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingStatement.java b/src/test/org/apache/commons/dbcp/TestDelegatingStatement.java
index 8589d1981e..0cd715ed2b 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingStatement.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingStatement.java
@@ -63,7 +63,9 @@ public void testHashCode() {
         delegateStmt = new TesterPreparedStatement(delegateConn,"select * from foo");
         DelegatingStatement stmt1 = new DelegatingStatement(conn,delegateStmt);
         DelegatingStatement stmt2 = new DelegatingStatement(conn,delegateStmt);
+        DelegatingStatement stmt3 = new DelegatingStatement(conn, null);
         assertEquals(stmt1.hashCode(), stmt2.hashCode());
+        assertTrue(stmt1.hashCode() != stmt3.hashCode());
     }
     
     public void testEquals() {
@@ -71,10 +73,25 @@ public void testEquals() {
         DelegatingStatement stmt1 = new DelegatingStatement(conn, delegateStmt);
         DelegatingStatement stmt2 = new DelegatingStatement(conn, delegateStmt);
         DelegatingStatement stmt3 = new DelegatingStatement(conn, null);
+        DelegatingStatement stmt4 = new DelegatingStatement(conn, stmt1);
         
+        // not null
         assertTrue(!stmt1.equals(null));
+        
+        // same innermost delegate
         assertTrue(stmt1.equals(stmt2));
+        assertTrue(stmt1.equals(stmt4));
+        
+        // innermost delegate itself - bugged behavior?
+        assertTrue(stmt1.equals(delegateStmt));
+        
+        // not same delegate
         assertTrue(!stmt1.equals(stmt3));
+        
+        // reflexive
+        assertTrue(stmt1.equals(stmt1));
+        assertTrue(stmt2.equals(stmt2));
+        assertTrue(stmt3.equals(stmt3));
     }
     
     public void testCheckOpen() throws Exception {
