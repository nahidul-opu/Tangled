From e4601582be15def78a2de97072842bd1276e3dcc Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 23 Jan 2013 20:48:57 +0000
Subject: [PATCH] [CONFIGURATION-521] Copied a stripped-down version of
 FileUtils from Commons IO in order to deal with URL to File conversions
 correctly. Thanks to Oliver Kopp for the patch."

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1437723 13f79535-47bb-0310-9956-ffa450edef68
---
 conf/checkstyle-suppressions.xml              |   2 +
 src/changes/changes.xml                       |   4 +
 .../configuration/ConfigurationUtils.java     |  27 +----
 .../commons/configuration/FileUtils.java      | 111 ++++++++++++++++++
 .../configuration/TestConfigurationUtils.java |  13 ++
 5 files changed, 132 insertions(+), 25 deletions(-)
 create mode 100644 src/main/java/org/apache/commons/configuration/FileUtils.java

diff --git a/conf/checkstyle-suppressions.xml b/conf/checkstyle-suppressions.xml
index 8436ca31c4..e59b191fdc 100644
--- a/conf/checkstyle-suppressions.xml
+++ b/conf/checkstyle-suppressions.xml
@@ -30,4 +30,6 @@
 
     <suppress checks="DoubleCheckedLocking" files="DynamicCombinedConfiguration.java"
       lines="800-900"/>
+
+    <suppress files="FileUtils\.java" checks="[a-zA-Z0-9]*"/>
 </suppressions>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index c2ad18bfc4..e21671b790 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,10 @@
   <body>
     <release version="2.0" date="in SVN"
       description="TBD">
+      <action dev="oheger" type="update" issue="CONFIGURATION-521" due-to="Oliver Kopp">
+        ConfigurationUtils.fileFromUrl() now correctly handles URL containing
+        encoded percent characters.
+      </action>
       <action dev="oheger" type="add" issue="CONFIGURATION-517">
         Hierarchical configurations now provide methods to obtain sub
         configurations for all child elements of a given key.
diff --git a/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
index 85ed6996e0..f5f7a9691b 100644
--- a/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -60,9 +60,6 @@ public final class ConfigurationUtils
     /** Constant for the name of the clone() method.*/
     private static final String METHOD_CLONE = "clone";
 
-    /** Constant for parsing numbers in hex format. */
-    private static final int HEX = 16;
-
     /**
      * An array with interfaces to be implemented by a proxy for an immutable
      * configuration.
@@ -722,34 +719,14 @@ public static File getFile(String basePath, String fileName)
 
     /**
      * Tries to convert the specified URL to a file object. If this fails,
-     * <b>null</b> is returned. Note: This code has been copied from the
-     * {@code FileUtils} class from <em>Commons IO</em>.
+     * <b>null</b> is returned.
      *
      * @param url the URL
      * @return the resulting file object
      */
     public static File fileFromURL(URL url)
     {
-        if (url == null || !url.getProtocol().equals(PROTOCOL_FILE))
-        {
-            return null;
-        }
-        else
-        {
-            String filename = url.getFile().replace('/', File.separatorChar);
-            int pos = 0;
-            while ((pos = filename.indexOf('%', pos)) >= 0)
-            {
-                if (pos + 2 < filename.length())
-                {
-                    String hexStr = filename.substring(pos + 1, pos + 3);
-                    char ch = (char) Integer.parseInt(hexStr, HEX);
-                    filename = filename.substring(0, pos) + ch
-                            + filename.substring(pos + 3);
-                }
-            }
-            return new File(filename);
-        }
+        return FileUtils.toFile(url);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/configuration/FileUtils.java b/src/main/java/org/apache/commons/configuration/FileUtils.java
new file mode 100644
index 0000000000..89476cbf65
--- /dev/null
+++ b/src/main/java/org/apache/commons/configuration/FileUtils.java
@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.configuration;
+
+import java.io.File;
+import java.net.URL;
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+
+/**
+ * This class is a subset of org.apache.commons.io.FileUtils,
+ * git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1423916 13f79535-47bb-0310-9956-ffa450edef68.
+ * The subset is determined by {@link org.apache.commons.configuration.ConfigurationUtils}.
+ * The copied constants and methods are <em>literally</em> copied.<br />
+ *
+ * See CONFIGURATION-521 for a discussion.
+ * @version $Id$
+ */
+class FileUtils {
+    /**
+     * The UTF-8 character set, used to decode octets in URLs.
+     */
+    private static final Charset UTF8 = Charset.forName("UTF-8");
+
+    //-----------------------------------------------------------------------
+    /**
+     * Convert from a <code>URL</code> to a <code>File</code>.
+     * <p>
+     * From version 1.1 this method will decode the URL.
+     * Syntax such as <code>file:///my%20docs/file.txt</code> will be
+     * correctly decoded to <code>/my docs/file.txt</code>. Starting with version
+     * 1.5, this method uses UTF-8 to decode percent-encoded octets to characters.
+     * Additionally, malformed percent-encoded octets are handled leniently by
+     * passing them through literally.
+     *
+     * @param url  the file URL to convert, {@code null} returns {@code null}
+     * @return the equivalent <code>File</code> object, or {@code null}
+     *  if the URL's protocol is not <code>file</code>
+     */
+    public static File toFile(final URL url) {
+        if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {
+            return null;
+        } else {
+            String filename = url.getFile().replace('/', File.separatorChar);
+            filename = decodeUrl(filename);
+            return new File(filename);
+        }
+    }
+
+    /**
+     * Decodes the specified URL as per RFC 3986, i.e. transforms
+     * percent-encoded octets to characters by decoding with the UTF-8 character
+     * set. This function is primarily intended for usage with
+     * {@link java.net.URL} which unfortunately does not enforce proper URLs. As
+     * such, this method will leniently accept invalid characters or malformed
+     * percent-encoded octets and simply pass them literally through to the
+     * result string. Except for rare edge cases, this will make unencoded URLs
+     * pass through unaltered.
+     *
+     * @param url  The URL to decode, may be {@code null}.
+     * @return The decoded URL or {@code null} if the input was
+     *         {@code null}.
+     */
+    static String decodeUrl(final String url) {
+        String decoded = url;
+        if (url != null && url.indexOf('%') >= 0) {
+            final int n = url.length();
+            final StringBuffer buffer = new StringBuffer();
+            final ByteBuffer bytes = ByteBuffer.allocate(n);
+            for (int i = 0; i < n;) {
+                if (url.charAt(i) == '%') {
+                    try {
+                        do {
+                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
+                            bytes.put(octet);
+                            i += 3;
+                        } while (i < n && url.charAt(i) == '%');
+                        continue;
+                    } catch (final RuntimeException e) {
+                        // malformed percent-encoded octet, fall through and
+                        // append characters literally
+                    } finally {
+                        if (bytes.position() > 0) {
+                            bytes.flip();
+                            buffer.append(UTF8.decode(bytes).toString());
+                            bytes.clear();
+                        }
+                    }
+                }
+                buffer.append(url.charAt(i++));
+            }
+            decoded = buffer.toString();
+        }
+        return decoded;
+    }
+
+}
diff --git a/src/test/java/org/apache/commons/configuration/TestConfigurationUtils.java b/src/test/java/org/apache/commons/configuration/TestConfigurationUtils.java
index 1d3a52f38b..1312bc2ba4 100644
--- a/src/test/java/org/apache/commons/configuration/TestConfigurationUtils.java
+++ b/src/test/java/org/apache/commons/configuration/TestConfigurationUtils.java
@@ -231,6 +231,19 @@ public void testGetFile() throws Exception
                 reference.getAbsolutePath()));
     }
 
+    /**
+     * Tests whether an encoded "%" character in the file name is handled correctly by
+     * fileFromURL(). This test is related to CONFIGURATION-521.
+     */
+    @Test
+    public void testFileFromURLWithEncodedPercent() throws MalformedURLException
+    {
+        File file = new File("https%3A%2F%2Fwww.apache.org%2F.url").getAbsoluteFile();
+        URL fileURL = file.toURI().toURL();
+        File file2 = ConfigurationUtils.fileFromURL(fileURL);
+        assertEquals("Wrong file", file, file2);
+    }
+
     /**
      * Tests whether a "+" character in the file name is handled correctly by
      * fileFromURL(). This test is related to CONFIGURATION-415.
