From 727bcac61f5c559ef33fd607081ade8413488b93 Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Wed, 10 Jun 2009 09:27:06 +0000
Subject: [PATCH] Fix for BEANUTILS-349 - copyProperties throws
 NullPointerException if an IllegalArgumentException is thrown due to a null
 value parameter - thanks to Eivind Tagseth for the patch

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@783269 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/beanutils/PropertyUtilsBean.java  |   6 +-
 ...eanPropertyValueChangeClosureTestCase.java |   2 +-
 .../beanutils/bugs/Jira349TestCase.java       | 131 ++++++++++++++++++
 3 files changed, 137 insertions(+), 2 deletions(-)
 create mode 100644 src/test/org/apache/commons/beanutils/bugs/Jira349TestCase.java

diff --git a/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java b/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
index 0f2f0deca..68af3bd8a 100644
--- a/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
+++ b/src/java/org/apache/commons/beanutils/PropertyUtilsBean.java
@@ -2169,7 +2169,11 @@ private Object invokeMethod(
                     if (i>0) {
                         valueString += ", " ;
                     }
-                    valueString += (values[i]).getClass().getName();
+                    if (values[i] == null) {
+                        valueString += "<null>";
+                    } else {
+                        valueString += (values[i]).getClass().getName();
+                    }
                 }
             }
             String expectedString = "";
diff --git a/src/test/org/apache/commons/beanutils/BeanPropertyValueChangeClosureTestCase.java b/src/test/org/apache/commons/beanutils/BeanPropertyValueChangeClosureTestCase.java
index 84b19a208..bf552c138 100644
--- a/src/test/org/apache/commons/beanutils/BeanPropertyValueChangeClosureTestCase.java
+++ b/src/test/org/apache/commons/beanutils/BeanPropertyValueChangeClosureTestCase.java
@@ -217,7 +217,7 @@ public void testExecuteWithSimplePrimitivePropertyAndNullValue() {
         try {
             new BeanPropertyValueChangeClosure("intProperty", null).execute(new TestBean());
             fail("Should have thrown an IllegalArgumentException");
-        } catch (NullPointerException e) { 
+        } catch (IllegalArgumentException e) { 
             /* this is what we expect */
         }
     }
diff --git a/src/test/org/apache/commons/beanutils/bugs/Jira349TestCase.java b/src/test/org/apache/commons/beanutils/bugs/Jira349TestCase.java
new file mode 100644
index 000000000..d61d6e50b
--- /dev/null
+++ b/src/test/org/apache/commons/beanutils/bugs/Jira349TestCase.java
@@ -0,0 +1,131 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.beanutils.bugs;
+
+import java.lang.reflect.Method;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.commons.beanutils.MethodUtils;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.apache.commons.beanutils.bugs.other.Jira298BeanFactory;
+import org.apache.commons.beanutils.bugs.other.Jira298BeanFactory.IX;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * See https://issues.apache.org/jira/browse/BEANUTILS-349
+ * <p />
+ *
+ * @version $Revision$ $Date$
+ */
+public class Jira349TestCase extends TestCase {
+
+    private Log log = LogFactory.getLog(Jira349TestCase .class);
+
+    /**
+     * Create a test case with the specified name.
+     *
+     * @param name The name of the test
+     */
+    public Jira349TestCase(String name) {
+        super(name);
+    }
+
+    /**
+     * Run the Test.
+     *
+     * @param args Arguments
+     */
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    /**
+     * Create a test suite for this test.
+     *
+     * @return a test suite
+     */
+    public static Test suite() {
+        return (new TestSuite(Jira349TestCase.class));
+    }
+
+    /**
+     * Set up.
+     *
+     * @throws java.lang.Exception
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+    }
+
+    /**
+     * Tear Down.
+     *
+     * @throws java.lang.Exception
+     */
+    protected void tearDown() throws Exception {
+        super.tearDown();
+    }
+
+    /**
+     * Test {@link PropertyUtils#copyProperties(Object, Object)}
+     */
+    public void testIssue_BEANUTILS_349_PropertyUtils_copyProperties() {
+        PrimitiveBean dest = new PrimitiveBean();
+        ObjectBean origin = new ObjectBean ();
+        try {
+            PropertyUtils.copyProperties(dest, origin);
+        } catch (NullPointerException e) {
+            log.error("Failed", e);
+            fail("Threw NullPointerException");
+        } catch (IllegalArgumentException e) {
+            log.warn("Expected Result", e);
+        } catch (Throwable t) {
+            log.error("Failed", t);
+            fail("Threw exception: " + t);
+        }
+    }
+
+    /**
+     * Test Bean with a primitive boolean property.
+     */
+    public static class PrimitiveBean {
+        private boolean testProperty;
+        public boolean getTestProperty() {
+            return testProperty;
+        }
+        public void setTestProperty(boolean testProperty) {
+            this.testProperty = testProperty;
+        }
+    }
+
+    /**
+     * Test Bean with a Boolean object property.
+     */
+    public static class ObjectBean {
+        private Boolean testProperty;
+        public Boolean getTestProperty() {
+            return testProperty;
+        }
+        public void setTestProperty(Boolean testProperty) {
+            this.testProperty = testProperty;
+        }
+    }
+}
