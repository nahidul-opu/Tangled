From 9c22e5297c7cb9dd75adec7ebcba06448e993bd8 Mon Sep 17 00:00:00 2001
From: Joerg Schaible <joehni@apache.org>
Date: Sun, 22 Mar 2009 19:59:51 +0000
Subject: [PATCH] Mask password in URL provided as info to a
 FileSystemException (VFS-169).

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@757246 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/vfs/FileSystemException.java      | 14 ++++-
 .../commons/vfs/FileSystemExceptionTest.java  | 61 +++++++++++++++++++
 2 files changed, 74 insertions(+), 1 deletion(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs/FileSystemExceptionTest.java

diff --git a/core/src/main/java/org/apache/commons/vfs/FileSystemException.java b/core/src/main/java/org/apache/commons/vfs/FileSystemException.java
index f40284536a..54c05a55b7 100644
--- a/core/src/main/java/org/apache/commons/vfs/FileSystemException.java
+++ b/core/src/main/java/org/apache/commons/vfs/FileSystemException.java
@@ -19,6 +19,8 @@
 import org.apache.commons.vfs.util.Messages;
 
 import java.io.IOException;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * Thrown for file system errors.
@@ -29,6 +31,9 @@
 public class FileSystemException
     extends IOException
 {
+    private static final Pattern URL_PATTERN = Pattern.compile("[a-z]+://.*");
+    private static final Pattern PASSWORD_PATTERN = Pattern.compile(":(?:[^/]+)@");
+
     /**
      * The Throwable that caused this exception to be thrown.
      */
@@ -123,7 +128,14 @@ public FileSystemException(final String code,
             this.info = new String[info.length];
             for (int i = 0; i < info.length; i++)
             {
-                this.info[i] = String.valueOf(info[i]);
+                String value = String.valueOf(info[i]);
+                // mask passwords (VFS-169)
+                final Matcher urlMatcher = URL_PATTERN.matcher(value);
+                if (urlMatcher.find()) {
+                    final Matcher pwdMatcher = PASSWORD_PATTERN.matcher(value);
+                    value = pwdMatcher.replaceFirst(":***@");
+                }
+                this.info[i] = value;
             }
         }
         this.code = code;
diff --git a/core/src/test/java/org/apache/commons/vfs/FileSystemExceptionTest.java b/core/src/test/java/org/apache/commons/vfs/FileSystemExceptionTest.java
new file mode 100644
index 0000000000..5aca2cbabe
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs/FileSystemExceptionTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs;
+
+import junit.framework.TestCase;
+
+
+/**
+ * Tests the {@link FileSystemException}.
+ * 
+ * @author J&ouml;rg Schaible
+ */
+public class FileSystemExceptionTest extends TestCase {
+    /**
+     * Tests a {@link FileSystemException} containing info with a URL containing a complete
+     * basic authentication.
+     */
+    public void testMasksPasswordOfUrlsWithBasicAuthentication() {
+        final FileSystemException fse = new FileSystemException(
+            "vfs.provider/rename.error", new String[]{
+                "file://test.bin", "http://foo:bar@junit.org/test.bin"});
+
+        assertEquals("file://test.bin", fse.getInfo()[0]);
+        assertEquals("http://foo:***@junit.org/test.bin", fse.getInfo()[1]);
+    }
+
+    /**
+     * Tests a {@link FileSystemException} containing info with a URL containing only the user
+     * information.
+     */
+    public void testDoesNotModifyUrlsWithoutPassword() {
+        final FileSystemException fse = new FileSystemException(
+            "vfs.provider/delete.error", new String[]{"http://foo@junit.org/test.bin"});
+        assertEquals("http://foo@junit.org/test.bin", fse.getInfo()[0]);
+    }
+
+    /**
+     * Tests a {@link FileSystemException} containing info with a nested URL containing a
+     * complete basic authentication.
+     */
+    public void testProperDetectionOfUrl() {
+        final FileSystemException fse = new FileSystemException(
+            "vfs.provider/delete.error", new String[]{"zip:http://foo:bar@junit.org/test.bin"});
+        assertEquals("zip:http://foo:***@junit.org/test.bin", fse.getInfo()[0]);
+    }
+
+}
