From 70b3504b9fe03f267ce0f97c6ff21de5f5fbd2f3 Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Fri, 25 Oct 2013 08:19:29 +0000
Subject: [PATCH] Applying Thomas Neidhart's patch for LANG-905; fixing a bug
 in which EqualsBuilder considers two arrays of the same type to be equal,
 without considering the contents

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1535653 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  1 +
 .../commons/lang3/builder/EqualsBuilder.java  | 11 ++++++---
 .../lang3/builder/EqualsBuilderTest.java      | 24 +++++++++++++++++++
 3 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a56fd07f0eb..88a592bf8f8 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -22,6 +22,7 @@
   <body>
 
   <release version="3.2" date="TBA" description="Next release">
+    <action issue="LANG-905" type="fix">EqualsBuilder returns true when comparing arrays, even when the elements are different</action>
     <action issue="LANG-774" type="add" due-to="Erhan Bagdemir">Added isStarted, isSuspended and isStopped to StopWatch</action>
     <action issue="LANG-917" type="fix" due-to="Arne Burmeister">Fixed exception when combining custom and choice format in ExtendedMessageFormat</action>
     <action issue="LANG-848" type="add" due-to="Alexander Muthmann">Added StringUtils.isBlank/isEmpty CharSequence... methods</action>
diff --git a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
index 1c6eaff5388..0cde03f97fe 100644
--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
@@ -24,6 +24,7 @@
 import java.util.Set;
 
 import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.ClassUtils;
 import org.apache.commons.lang3.tuple.Pair;
 
 /**
@@ -354,10 +355,14 @@ public static boolean reflectionEquals(final Object lhs, final Object rhs, final
         }
         final EqualsBuilder equalsBuilder = new EqualsBuilder();
         try {
-            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
-            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
-                testClass = testClass.getSuperclass();
+            if (testClass.isArray()) {
+                equalsBuilder.append(lhs, rhs);
+            } else {
                 reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
+                while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
+                    testClass = testClass.getSuperclass();
+                    reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
+                }
             }
         } catch (final IllegalArgumentException e) {
             // In this case, we tried to test a subclass vs. a superclass and
diff --git a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java
index a708af837b5..a9640e60106 100644
--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java
+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java
@@ -1126,5 +1126,29 @@ public boolean equals(final Object obj) {
             return EqualsBuilder.reflectionEquals(this, obj);
         }
     }
+    
+    @Test
+    public void testReflectionArrays() throws Exception {
+
+        final TestObject one = new TestObject(1);
+        final TestObject two = new TestObject(2);
+
+        Object[] o1 = new Object[] { one };
+        Object[] o2 = new Object[] { two };
+        Object[] o3 = new Object[] { one };
+
+        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));
+        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));
+        assertTrue(EqualsBuilder.reflectionEquals(o1, o3));
+        
+        double[] d1 = { 0, 1 };
+        double[] d2 = { 2, 3 };
+        double[] d3 = { 0, 1 };
+        
+        assertTrue(!EqualsBuilder.reflectionEquals(d1, d2));
+        assertTrue(EqualsBuilder.reflectionEquals(d1, d1));
+        assertTrue(EqualsBuilder.reflectionEquals(d1, d3));
+    }
+
 }
 
