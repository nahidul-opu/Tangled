From 9232ea98fc333c8ede952406d3f70da8ae89682a Mon Sep 17 00:00:00 2001
From: Brent Worden <brentworden@apache.org>
Date: Wed, 7 May 2008 13:36:33 +0000
Subject: [PATCH] MATH-204.  added root checks for the endpoints.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@654100 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math/analysis/BrentSolver.java    | 37 +++++++++++++++----
 src/site/xdoc/changes.xml                     |  3 ++
 .../math/analysis/BrentSolverTest.java        | 12 ++++++
 3 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java
index 01a9ee5131..da8b3f54bc 100644
--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java
+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java
@@ -128,20 +128,41 @@ public double solve(double min, double max) throws MaxIterationsExceededExceptio
         clearResult();
         verifyInterval(min, max);
         
+        double ret = Double.NaN;
+        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
         // Verify bracketing
-        if (yMin * yMax >= 0) {
-            throw new IllegalArgumentException
-            ("Function values at endpoints do not have different signs." +
-                    "  Endpoints: [" + min + "," + max + "]" + 
-                    "  Values: [" + yMin + "," + yMax + "]");       
+        double sign = yMin * yMax;
+        if (sign > 0) {
+            // check if either value is close to a zero
+            if (Math.abs(yMin) <= functionValueAccuracy) {
+                setResult(min, 0);
+                ret = min;
+            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+                setResult(max, 0);
+                ret = max;
+            } else {
+                // neither value is close to zero and min and max do not bracket root.
+                throw new IllegalArgumentException
+                ("Function values at endpoints do not have different signs." +
+                        "  Endpoints: [" + min + "," + max + "]" + 
+                        "  Values: [" + yMin + "," + yMax + "]");
+            }
+        } else if (sign < 0){
+            // solve using only the first endpoint as initial guess
+            ret = solve(min, yMin, max, yMax, min, yMin);
+        } else {
+            // either min or max is a root
+            if (yMin == 0.0) {
+                ret = min;
+            } else {
+                ret = max;
+            }
         }
 
-        // solve using only the first endpoint as initial guess
-        return solve(min, yMin, max, yMax, min, yMin);
-
+        return ret;
     }
         
     /**
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 96615d2464..f088eafbf5 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -59,6 +59,9 @@ Commons Math Release Notes</title>
       <action dev="brentworden" type="fix" issue="MATH-201" due-to="Peter Wyngaard">
         Fixed truncation error in t-test classes for large t values.
       </action>
+      <action dev="brentworden" type="fix" issue="MATH-204" due-to="Mick">
+        Added root checks for the endpoints.
+      </action>
     </release>
     <release version="1.2" date="2008-02-24"
     description="This release combines bug fixes and new features. Most notable
diff --git a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
index ea1ba6857a..e163e594b8 100644
--- a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
+++ b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
@@ -268,6 +268,18 @@ public void testQuinticZero() throws MathException {
         assertEquals(result, 1.0, 1E-6);
     }
     
+    public void testRootEndpoints() throws Exception {
+        UnivariateRealFunction f = new SinFunction();
+        UnivariateRealSolver solver = new BrentSolver(f);
+        
+        // endpoint is root
+        double result = solver.solve(Math.PI, 4);
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(3, Math.PI);
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+    }
+    
     public void testBadEndpoints() throws Exception {
         UnivariateRealFunction f = new SinFunction();
         UnivariateRealSolver solver = new BrentSolver(f);
