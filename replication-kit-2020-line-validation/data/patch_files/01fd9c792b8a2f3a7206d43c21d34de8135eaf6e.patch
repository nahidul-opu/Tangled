From 01fd9c792b8a2f3a7206d43c21d34de8135eaf6e Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Mon, 9 Nov 2015 23:39:18 +0000
Subject: [PATCH] VALIDATOR-380 UrlValidator does not allow for optional port
 digits

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1713569 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../validator/routines/UrlValidator.java      | 28 +++++++++----------
 .../validator/routines/UrlValidatorTest.java  |  3 +-
 3 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ba0c7731a..296b25425 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -90,6 +90,9 @@ The dependencies for Validator have not changed since the 1.4 release.
 For the current list of dependencies, please see
 http://commons.apache.org/validator/dependencies.html
   ">
+    <action issue="VALIDATOR-380" type="fix" dev="sebb">
+    UrlValidator does not allow for optional port digits
+    </action>
     <action issue="VALIDATOR-332" type="update" dev="sebb">
     IIBANCheckDigit.calculate does not enforce initial checksum value
     Checkdigit field is now unconditionally set to "00" to ensure correct generation
diff --git a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
index dc293211b..4a28e3713 100644
--- a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
@@ -146,15 +146,16 @@ public class UrlValidator implements Serializable {
             USERINFO_CHARS_REGEX + "+:" + // At least one character for the name
             USERINFO_CHARS_REGEX + "*@"; // password may be absent
     private static final String AUTHORITY_REGEX =
-            "^(?:\\[("+IPV6_REGEX+")\\]|(?:(?:"+USERINFO_FIELD_REGEX+")?([" + AUTHORITY_CHARS_REGEX + "]*)))(:\\d*)?(.*)?";
-    //                   1                 e.g. user:pass@                         2                         3       4
+            "(?:\\[("+IPV6_REGEX+")\\]|(?:(?:"+USERINFO_FIELD_REGEX+")?([" + AUTHORITY_CHARS_REGEX + "]*)))(:\\d*)?(.*)?";
+    //             1                          e.g. user:pass@          2                                   3       4
     private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);
 
     private static final int PARSE_AUTHORITY_IPV6 = 1;
 
-    private static final int PARSE_AUTHORITY_HOST_IP = 2;
+    private static final int PARSE_AUTHORITY_HOST_IP = 2; // excludes userinfo, if present
 
-    private static final int PARSE_AUTHORITY_PORT = 3;
+    // Not needed, because it is validated by AUTHORITY_REGEX
+//    private static final int PARSE_AUTHORITY_PORT = 3;
 
     /**
      * Should always be empty. The code currently allows spaces.
@@ -167,9 +168,6 @@ public class UrlValidator implements Serializable {
     private static final String QUERY_REGEX = "^(.*)$";
     private static final Pattern QUERY_PATTERN = Pattern.compile(QUERY_REGEX);
 
-    private static final String PORT_REGEX = "^:(\\d{1,5})$";
-    private static final Pattern PORT_PATTERN = Pattern.compile(PORT_REGEX);
-
     /**
      * Holds the set of current validation options.
      */
@@ -311,9 +309,14 @@ public boolean isValid(String value) {
         }
 
         String authority = urlMatcher.group(PARSE_URL_AUTHORITY);
-        if ("file".equals(scheme) && "".equals(authority)) {
-            // Special case - file: allows an empty authority
-        } else {
+        if ("file".equals(scheme)) {// Special case - file: allows an empty authority
+            if (!"".equals(authority)) {
+                if (authority.contains(":")) { // but cannot allow trailing :
+                    return false;
+                }
+            }
+            // drop through to continue validation
+        } else { // not file:
             // Validate the authority
             if (!isValidAuthority(authority)) {
                 return false;
@@ -410,11 +413,6 @@ protected boolean isValidAuthority(String authority) {
             }
         }
 
-        String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
-        if (port != null && !PORT_PATTERN.matcher(port).matches()) {
-            return false;
-        }
-
         String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
         if (extra != null && extra.trim().length() > 0){
             return false;
diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
index fea43a621..0d96a78e7 100644
--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
@@ -441,8 +441,7 @@ public void testValidator380() {
        UrlValidator validator = new UrlValidator();
        assertTrue(validator.isValid("http://www.apache.org:80/path"));       
        assertTrue(validator.isValid("http://www.apache.org:8/path")); 
-       // To be enabled when code has been fixed
-//       assertTrue(validator.isValid("http://www.apache.org:/path"));
+       assertTrue(validator.isValid("http://www.apache.org:/path"));
    }
 
    /**
