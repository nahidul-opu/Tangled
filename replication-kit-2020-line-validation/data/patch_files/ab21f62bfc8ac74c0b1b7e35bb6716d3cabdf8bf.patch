From ab21f62bfc8ac74c0b1b7e35bb6716d3cabdf8bf Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Thu, 12 Jul 2007 04:53:26 +0000
Subject: [PATCH] BEANUTILS-44 FloatLocaleConverter cannot parse negative
 values - reported by Paul Jenkins

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/beanutils/trunk@555489 13f79535-47bb-0310-9956-ffa450edef68
---
 .../converters/FloatLocaleConverter.java      |  6 ++-
 .../FloatLocaleConverterTestCase.java         | 45 +++++++++++++++++++
 2 files changed, 49 insertions(+), 2 deletions(-)

diff --git a/src/java/org/apache/commons/beanutils/locale/converters/FloatLocaleConverter.java b/src/java/org/apache/commons/beanutils/locale/converters/FloatLocaleConverter.java
index eb7d1bb7d..a60fe7fa8 100755
--- a/src/java/org/apache/commons/beanutils/locale/converters/FloatLocaleConverter.java
+++ b/src/java/org/apache/commons/beanutils/locale/converters/FloatLocaleConverter.java
@@ -214,8 +214,10 @@ public FloatLocaleConverter(Object defaultValue, Locale locale, String pattern,
     */
    protected Object parse(Object value, String pattern) throws ParseException {
       final Number parsed = (Number) super.parse(value, pattern);
-      if( Math.abs(parsed.doubleValue() - parsed.floatValue()) > parsed.floatValue() * 0.00001 ) {
-         throw new ConversionException("Suplied number is not of type Float: "+parsed.longValue());
+      double doubleValue = parsed.doubleValue();
+      double posDouble = (doubleValue >= (double)0) ? doubleValue : (doubleValue * (double)-1);
+      if (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE) {
+          throw new ConversionException("Suplied number is not of type Float: "+parsed);
       }
       return new Float(parsed.floatValue()); // unlike superclass it returns Float type
    }
diff --git a/src/test/org/apache/commons/beanutils/locale/converters/FloatLocaleConverterTestCase.java b/src/test/org/apache/commons/beanutils/locale/converters/FloatLocaleConverterTestCase.java
index 001e73783..a0069c3af 100644
--- a/src/test/org/apache/commons/beanutils/locale/converters/FloatLocaleConverterTestCase.java
+++ b/src/test/org/apache/commons/beanutils/locale/converters/FloatLocaleConverterTestCase.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.beanutils.locale.converters;
 
+import java.text.DecimalFormat;
+import org.apache.commons.beanutils.ConversionException;
 
 /**
  * Test Case for the FloatLocaleConverter class.
@@ -258,6 +260,49 @@ public void testConstructor_9() {
 
     }
 
+    /**
+     * Test Float limits
+     */
+    public void testFloatLimits() {
+
+        converter = new FloatLocaleConverter(defaultLocale, defaultDecimalPattern);
+        DecimalFormat fmt = new DecimalFormat("#.#############################################################");
+
+        assertEquals(new Float(-0.12), converter.convert("-0.12"));
+        assertEquals("Positive Float.MAX_VALUE", new Float(Float.MAX_VALUE), converter.convert(fmt.format(Float.MAX_VALUE)));
+        assertEquals("Positive Float.MIN_VALUE", new Float(Float.MIN_VALUE), converter.convert(fmt.format(Float.MIN_VALUE)));
+
+        assertEquals("Negative Float.MAX_VALUE", new Float(Float.MAX_VALUE * -1), converter.convert(fmt.format(Float.MAX_VALUE * -1)));
+        assertEquals("Negative Float.MIN_VALUE", new Float(Float.MIN_VALUE * -1), converter.convert(fmt.format(Float.MIN_VALUE * -1)));
+        
+        
+        try {
+            converter.convert(fmt.format((double)Float.MAX_VALUE * (double)10));
+            fail("Positive Too Large should throw ConversionException");
+        } catch (ConversionException e) {
+            // expected result
+        }
+        try {
+            converter.convert(fmt.format((double)Float.MAX_VALUE * (double)-10));
+            fail("Negative Too Large should throw ConversionException");
+        } catch (ConversionException e) {
+            // expected result
+        }
+        
+        try {
+            converter.convert(fmt.format((double)Float.MIN_VALUE / (double)10));
+            fail("Positive Too Small should throw ConversionException");
+        } catch (ConversionException e) {
+            // expected result
+        }
+        try {
+            converter.convert(fmt.format((double)Float.MIN_VALUE / (double)-10));
+            fail("Negative Too Small should throw ConversionException");
+        } catch (ConversionException e) {
+            // expected result
+        }
+    }
+
 
 
 }
