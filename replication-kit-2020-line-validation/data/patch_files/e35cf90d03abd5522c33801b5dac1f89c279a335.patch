From e35cf90d03abd5522c33801b5dac1f89c279a335 Mon Sep 17 00:00:00 2001
From: William Colen <colen@apache.org>
Date: Thu, 6 Oct 2011 19:34:53 +0000
Subject: [PATCH] OPENNLP-316 Evaluator should check if the monitor list
 element is not null.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1179782 13f79535-47bb-0310-9956-ffa450edef68
---
 .../opennlp/tools/util/eval/Evaluator.java    | 20 ++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java b/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
index c1cd874ac..cb011af0b 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/util/eval/Evaluator.java
@@ -19,7 +19,8 @@
 package opennlp.tools.util.eval;
 
 import java.io.IOException;
-import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import opennlp.tools.util.ObjectStream;
@@ -34,9 +35,18 @@ public abstract class Evaluator<T> {
 
   private List<EvaluationMonitor<T>> listeners;
   
-  public Evaluator(EvaluationMonitor<T>... listeners) {
-    if(listeners != null) {
-      this.listeners = Arrays.asList(listeners);
+  public Evaluator(EvaluationMonitor<T>... aListeners) {
+    if (aListeners != null) {
+      List<EvaluationMonitor<T>> listenersList = new ArrayList<EvaluationMonitor<T>>(
+          aListeners.length);
+      for (EvaluationMonitor<T> evaluationMonitor : aListeners) {
+        if (evaluationMonitor != null) {
+          listenersList.add(evaluationMonitor);
+        }
+      }
+      listeners = Collections.unmodifiableList(listenersList);
+    } else {
+      listeners = Collections.emptyList();
     }
   }
   
@@ -70,7 +80,7 @@ protected T processSample(T reference) {
    */
   public void evaluateSample(T sample) {
     T predicted = processSample(sample);
-    if(listeners != null) {
+    if(!listeners.isEmpty()) {
       if(sample.equals(predicted)) {
         for (EvaluationMonitor<T> listener : listeners) {
           listener.correctlyClassified(predicted, predicted);
