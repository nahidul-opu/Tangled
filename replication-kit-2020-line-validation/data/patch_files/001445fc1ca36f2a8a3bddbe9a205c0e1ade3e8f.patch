From 001445fc1ca36f2a8a3bddbe9a205c0e1ade3e8f Mon Sep 17 00:00:00 2001
From: Colm O Heigeartaigh <coheigea@apache.org>
Date: Sat, 16 Jul 2011 18:06:07 +0000
Subject: [PATCH] [SANTUARIO-273] - xml:base attribute not processed correctly
 in C14N11 canonicalization  - Backported to 1.4.x-fixes branch.

git-svn-id: https://svn.apache.org/repos/asf/santuario/xml-security-java/branches/1.4.x-fixes@1147470 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG.txt                                 |   6 +-
 .../c14n/implementations/Canonicalizer11.java |   4 +-
 .../apache/xml/security/test/ModuleTest.java  |   1 +
 .../implementations/Santuario273Test.java     | 130 ++++++++++++++++++
 4 files changed, 138 insertions(+), 3 deletions(-)
 create mode 100644 src_unitTests/org/apache/xml/security/test/c14n/implementations/Santuario273Test.java

diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index f021c9ac5f..5c3abd4303 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,5 +1,9 @@
 Changelog for "Apache xml-security" <http://santuario.apache.org/>
-New in v1.4.5-SNAPSHOT
+
+New in v.1.4.6-SNAPSHOT:
+    Fixed SANTUARIO-273: xml:base attribute not processed correctly in C14N11 canonicalization.
+
+New in v1.4.5
     Fixed SANTUARIO-250: VerifyMerlinsExamplesFifteen/TwentyThree.java samples should ignore signature-enveloping-hmac-sha1-40.xml
     Fixed SANTUARIO-191: xml:id attributes are not correctly handled when using c14n11.
     Fixed SANTUARIO-266: c14n11 produces different signatures using version 1.4.3 and 1.4.4.
diff --git a/src/org/apache/xml/security/c14n/implementations/Canonicalizer11.java b/src/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
index 0e4648d67a..4c0c69b6f7 100644
--- a/src/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
+++ b/src/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
@@ -95,13 +95,13 @@ void addXmlnsAttr(Attr n) {
     	    cur.nodes.add(n);
     	}
     	void getXmlnsAttr(Collection col) {
+    	    int size = levels.size() - 1;
 	    if (cur == null) {
 		cur = new XmlsStackElement();
     		cur.level = currentLevel;
     		lastlevel = currentLevel;
     		levels.add(cur);
     	    }
-	    int size = levels.size() - 2;
 	    boolean parentRendered = false;
 	    XmlsStackElement e = null;
 	    if (size == -1) {
@@ -137,7 +137,7 @@ void getXmlnsAttr(Collection col) {
 	        }
 	    }
 	    if (!baseAttrs.isEmpty()) {
-    	        Iterator it = cur.nodes.iterator();
+    	        Iterator it = col.iterator();
 		String base = null;
 		Attr baseAttr = null;
     	        while (it.hasNext()) {
diff --git a/src_unitTests/org/apache/xml/security/test/ModuleTest.java b/src_unitTests/org/apache/xml/security/test/ModuleTest.java
index 8c8e21e300..cf0f63ee0b 100644
--- a/src_unitTests/org/apache/xml/security/test/ModuleTest.java
+++ b/src_unitTests/org/apache/xml/security/test/ModuleTest.java
@@ -51,6 +51,7 @@ public static Test suite() {
       suite.addTest(org.apache.xml.security.test.c14n.implementations.Canonicalizer11Test.suite());
       suite.addTest(org.apache.xml.security.test.c14n.implementations.Bug45961Test.suite());
       suite.addTest(org.apache.xml.security.test.c14n.implementations.Santuario191Test.suite());
+      suite.addTest(org.apache.xml.security.test.c14n.implementations.Santuario273Test.suite());
       suite.addTest(org.apache.xml.security.test.external.org.apache.xalan.XPathAPI.XalanBug1425Test.suite());
       suite.addTest(org.apache.xml.security.test.external.org.apache.xalan.XPathAPI.AttributeAncestorOrSelfTest.suite());
       suite.addTest(org.apache.xml.security.test.signature.AllTests.suite());      
diff --git a/src_unitTests/org/apache/xml/security/test/c14n/implementations/Santuario273Test.java b/src_unitTests/org/apache/xml/security/test/c14n/implementations/Santuario273Test.java
new file mode 100644
index 0000000000..61769c0a93
--- /dev/null
+++ b/src_unitTests/org/apache/xml/security/test/c14n/implementations/Santuario273Test.java
@@ -0,0 +1,130 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.xml.security.test.c14n.implementations;
+
+
+import java.io.ByteArrayInputStream;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.xml.security.Init;
+import org.apache.xml.security.c14n.Canonicalizer;
+import org.apache.xml.security.utils.Constants;
+import org.apache.xpath.XPathAPI;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+
+/**
+ * This is a test for Santuario-273:
+ * 
+ * https://issues.apache.org/jira/browse/SANTUARIO-273
+ * "xml:base attribute not processed correctly in C14N11 canonicalization"
+ */
+public class Santuario273Test extends TestCase {
+    static String input = ""
+        + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
+        + "<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xml:base=\"http://www.acme.com/resources/\">\n"
+        + "  <SignedInfo xml:base=\"subresources/\"><!-- comment inside -->\n"
+        + "    <CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" />\n"
+        + "    <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" />\n"
+        + "    <Reference URI=\"http://www.w3.org/TR/xml-stylesheet\">\n"
+        + "      <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" />\n"
+        + "      <DigestValue>60NvZvtdTB+7UnlLp/H24p7h4bs=</DigestValue>\n"
+        + "    </Reference>\n"
+        + "  </SignedInfo>\n"
+        + "  <SignatureValue>\n"
+        + "    fKMmy9GYF2s8rLFrZdVugTOFuWx19ccX7jh5HqFd4vMOY7LWAj52ykjSdvtW3fNY\n"
+        + "    PPYGC4MFL19oPSId5GEsMtFMpGXB3XaCtoKjMCHQsN3+kom8YnGf7Ge1JNRcGty5\n"
+        + "    0UsoP6Asj47+QR7QECT64uoziha4WRDVyXjDrg24W+U=\n"
+        + "  </SignatureValue>\n"
+        + "  <KeyInfo>\n"
+        + "    <KeyName>Lugh</KeyName>\n"
+        + "  </KeyInfo>\n"
+        + "</Signature>\n"
+        ;
+    
+    static {
+        Init.init();
+    }
+    
+    public static Test suite() {
+        return new TestSuite(Santuario273Test.class);
+    }
+
+    public void testC14n11Base() throws Exception {
+        DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
+        dfactory.setNamespaceAware(true);
+        dfactory.setValidating(true);
+        DocumentBuilder documentBuilder = dfactory.newDocumentBuilder();
+
+        documentBuilder.setErrorHandler(new org.apache.xml.security.utils.IgnoreAllErrorHandler());
+        byte inputBytes[] = input.getBytes();
+        Document doc =
+            documentBuilder.parse(new ByteArrayInputStream(inputBytes));
+        
+        Canonicalizer c14n =
+            Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N11_OMIT_COMMENTS);
+        Element nscontext = createDSctx(doc, "ds", Constants.SignatureSpecNS);
+
+        Node signedInfo = XPathAPI.selectSingleNode(doc, "//ds:SignedInfo", nscontext);
+        c14n.canonicalizeSubtree(signedInfo);
+
+        NamedNodeMap attributes = signedInfo.getAttributes();
+        boolean foundBase = false;
+        for (int i = 0; i < attributes.getLength(); i++) {
+            Node attribute = attributes.item(i);
+            if ("base".equals(attribute.getLocalName())
+                && "http://www.acme.com/resources/subresources/".equals(attribute.getNodeValue())) {
+                foundBase = true;
+                break;
+            }
+        }
+        if (!foundBase) {
+            fail("The base attribute was not found or was incorrect");
+        }
+    }
+
+    /**
+     * Method createDSctx
+     *
+     * @param doc
+     * @param prefix
+     * @param namespace
+     * @return the element.
+     */
+    public static Element createDSctx(Document doc, String prefix, String namespace) {
+        if ((prefix == null) || (prefix.trim().length() == 0)) {
+            throw new IllegalArgumentException("You must supply a prefix");
+        }
+
+        Element ctx = doc.createElementNS(null, "namespaceContext");
+
+        ctx.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:" + prefix.trim(), namespace);
+
+        return ctx;
+    }
+}
