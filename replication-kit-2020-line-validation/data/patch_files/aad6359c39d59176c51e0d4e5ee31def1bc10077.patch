From aad6359c39d59176c51e0d4e5ee31def1bc10077 Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Fri, 17 Feb 2012 20:49:39 +0000
Subject: [PATCH] [IO-303] TeeOutputStream fails executing branch.close() when
 main.close() raised an exception.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1245754 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../commons/io/output/TeeOutputStream.java    | 22 ++++--
 .../io/output/TeeOutputStreamTest.java        | 75 ++++++++++++++++---
 3 files changed, 83 insertions(+), 17 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 5370ea67633..87f8646a82e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -40,6 +40,9 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="2.2" date="TBA">
+      <action dev="ggregory" type="add" issue="IO-303" due-to="ggregory">
+        TeeOutputStream does not call branch.close() when main.close() throws an exception 
+      </action>        
       <action dev="ggregory" type="add" issue="IO-301" due-to="kaykay.unique">
         Add IOUtils.closeQuietly(Selector) necessary 
       </action>        
diff --git a/src/main/java/org/apache/commons/io/output/TeeOutputStream.java b/src/main/java/org/apache/commons/io/output/TeeOutputStream.java
index 9a7d40d5d5c..14400639d02 100644
--- a/src/main/java/org/apache/commons/io/output/TeeOutputStream.java
+++ b/src/main/java/org/apache/commons/io/output/TeeOutputStream.java
@@ -36,7 +36,7 @@ public class TeeOutputStream extends ProxyOutputStream {
      * @param out the main OutputStream
      * @param branch the second OutputStream
      */
-    public TeeOutputStream( OutputStream out, OutputStream branch ) {
+    public TeeOutputStream(OutputStream out, OutputStream branch) {
         super(out);
         this.branch = branch;
     }
@@ -87,12 +87,24 @@ public void flush() throws IOException {
     }
 
     /**
-     * Closes both streams. 
-     * @throws IOException if an I/O error occurs
+     * Closes both output streams.
+     * 
+     * If closing the main output stream throws an exception, attempt to close the branch output stream.
+     * 
+     * If closing the main and branch output streams both throw exceptions, which exceptions is thrown by this method is
+     * currently unspecified and subject to change.
+     * 
+     * @throws IOException
+     *             if an I/O error occurs
      */
     @Override
-    public void close() throws IOException {
-        super.close();
+    public void close() throws IOException {        
+        try {
+            super.close();
+        } catch (IOException e) {
+            this.branch.close();
+            throw e;
+        }
         this.branch.close();
     }
 
diff --git a/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java b/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
index 0be9c891f96..1c18bbe249a 100644
--- a/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
+++ b/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
@@ -16,12 +16,12 @@
  */
 package org.apache.commons.io.output;
 
-
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
 import junit.framework.TestCase;
 
+import org.junit.Assert;
 
 /**
  * @version $Revision$ $Date$
@@ -29,37 +29,88 @@
 
 public class TeeOutputStreamTest extends TestCase {
 
+    private static class ExceptionOnCloseByteArrayOutputStream extends ByteArrayOutputStream {
+
+        public void close() throws IOException {
+            throw new IOException();
+        }
+    }
+
+    private static class RecordCloseByteArrayOutputStream extends ByteArrayOutputStream {
+
+        boolean closed;
+
+        public void close() throws IOException {
+            super.close();
+            closed = true;
+        }
+    }
+
     public TeeOutputStreamTest(String name) {
         super(name);
     }
 
+    /**
+     * Tests that the branch {@code OutputStream} is closed when closing the main {@code OutputStream} throws an
+     * exception on {@link TeeOutputStream#close()}.
+     */
+    public void testCloseBranchIOException() {
+        ByteArrayOutputStream badOs = new ExceptionOnCloseByteArrayOutputStream();
+        RecordCloseByteArrayOutputStream goodOs = new RecordCloseByteArrayOutputStream();
+        TeeOutputStream tos = new TeeOutputStream(goodOs, badOs);
+        try {
+            tos.close();
+            Assert.fail("Expected " + IOException.class.getName());
+        } catch (IOException e) {
+            Assert.assertTrue(goodOs.closed);
+        }
+    }
+
+    /**
+     * Tests that the main {@code OutputStream} is closed when closing the branch {@code OutputStream} throws an
+     * exception on {@link TeeOutputStream#close()}.
+     */
+    public void testCloseMainIOException() {
+        ByteArrayOutputStream badOs = new ExceptionOnCloseByteArrayOutputStream();
+        RecordCloseByteArrayOutputStream goodOs = new RecordCloseByteArrayOutputStream();
+        TeeOutputStream tos = new TeeOutputStream(badOs, goodOs);
+        try {
+            tos.close();
+            Assert.fail("Expected " + IOException.class.getName());
+        } catch (IOException e) {
+            Assert.assertTrue(goodOs.closed);
+        }
+    }
+
     public void testTee() throws IOException {
         ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
         ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
         TeeOutputStream tos = new TeeOutputStream(baos1, baos2);
-        for(int i = 0; i < 20; i++) {
+        for (int i = 0; i < 20; i++) {
             tos.write(i);
         }
-        assertByteArrayEquals("TeeOutputStream.write(int)", baos1.toByteArray(), baos2.toByteArray() );
+        assertByteArrayEquals("TeeOutputStream.write(int)", baos1.toByteArray(), baos2.toByteArray());
 
         byte[] array = new byte[10];
-        for(int i = 20; i < 30; i++) {
-            array[i-20] = (byte)i;
+        for (int i = 20; i < 30; i++) {
+            array[i - 20] = (byte) i;
         }
         tos.write(array);
-        assertByteArrayEquals("TeeOutputStream.write(byte[])", baos1.toByteArray(), baos2.toByteArray() );
+        assertByteArrayEquals("TeeOutputStream.write(byte[])", baos1.toByteArray(), baos2.toByteArray());
 
-        for(int i = 25; i < 35; i++) {
-            array[i-25] = (byte)i;
+        for (int i = 25; i < 35; i++) {
+            array[i - 25] = (byte) i;
         }
         tos.write(array, 5, 5);
-        assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", baos1.toByteArray(), baos2.toByteArray() );
+        assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", baos1.toByteArray(), baos2.toByteArray());
+        tos.flush();
+        tos.close();
     }
 
     private void assertByteArrayEquals(String msg, byte[] array1, byte[] array2) {
-        assertEquals(msg+": array size mismatch", array1.length, array2.length);
-        for(int i=0; i<array1.length; i++) {
-            assertEquals(msg+": array[ " + i + "] mismatch", array1[i], array2[i]);
+        assertEquals(msg + ": array size mismatch", array1.length, array2.length);
+        for (int i = 0; i < array1.length; i++) {
+            assertEquals(msg + ": array[ " + i + "] mismatch", array1[i], array2[i]);
         }
     }
 
