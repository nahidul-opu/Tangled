From 53a0a9ff85666348a38054e335f5b4c5355a6419 Mon Sep 17 00:00:00 2001
From: darkma773r <matt.juntunen@hotmail.com>
Date: Mon, 5 Feb 2018 21:02:07 -0500
Subject: [PATCH] MATH-1449: updating unit test syntax based on code review

---
 .../euclidean/twod/PolygonsSetTest.java       | 26 ++++++++++---------
 1 file changed, 14 insertions(+), 12 deletions(-)

diff --git a/src/test/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSetTest.java b/src/test/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSetTest.java
index 4584d0312a..94a7157608 100644
--- a/src/test/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSetTest.java
+++ b/src/test/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSetTest.java
@@ -229,8 +229,8 @@ public void testEmpty() {
         Assert.assertEquals(0.0, poly.getSize(), 1e-10);
         Assert.assertEquals(0.0, poly.getBoundarySize(), 1e-10);
         Assert.assertEquals(0, poly.getVertices().length);
-        Assert.assertEquals(true, poly.isEmpty());
-        Assert.assertEquals(false, poly.isFull());
+        Assert.assertTrue(poly.isEmpty());
+        Assert.assertFalse(poly.isFull());
         GeometryTestUtils.assertVectorEquals(Cartesian2D.NaN, (Cartesian2D) poly.getBarycenter(), 1e-10);
 
         checkPoints(Region.Location.OUTSIDE, poly, new Cartesian2D[] {
@@ -238,12 +238,12 @@ public void testEmpty() {
                 Cartesian2D.ZERO,
                 new Cartesian2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY)});
 
-
+        double offset;
         for (double y = -1; y < 1; y += 0.1) {
             for (double x = -1; x < 1; x += 0.1) {
-                Assert.assertEquals(Double.POSITIVE_INFINITY,
-                                    poly.projectToBoundary(new Cartesian2D(x, y)).getOffset(),
-                                    1.0e-10);
+                offset = poly.projectToBoundary(new Cartesian2D(x, y)).getOffset();
+                Assert.assertTrue(offset > 0);
+                Assert.assertTrue(Double.isInfinite(offset));
             }
         }
     }
@@ -255,11 +255,12 @@ public void testFull() {
 
         // assert
         Assert.assertEquals(1e-10, poly.getTolerance(), Precision.EPSILON);
-        Assert.assertEquals(Double.POSITIVE_INFINITY, poly.getSize(), 1e-10);
+        Assert.assertTrue(poly.getSize() > 0);
+        Assert.assertTrue(Double.isInfinite(poly.getSize()));
         Assert.assertEquals(0.0, poly.getBoundarySize(), 1e-10);
         Assert.assertEquals(0, poly.getVertices().length);
-        Assert.assertEquals(false, poly.isEmpty());
-        Assert.assertEquals(true, poly.isFull());
+        Assert.assertFalse(poly.isEmpty());
+        Assert.assertTrue(poly.isFull());
         GeometryTestUtils.assertVectorEquals(Cartesian2D.NaN, (Cartesian2D) poly.getBarycenter(), 1e-10);
 
         checkPoints(Region.Location.INSIDE, poly, new Cartesian2D[] {
@@ -267,11 +268,12 @@ public void testFull() {
                 Cartesian2D.ZERO,
                 new Cartesian2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY)});
 
+        double offset;
         for (double y = -1; y < 1; y += 0.1) {
             for (double x = -1; x < 1; x += 0.1) {
-                Assert.assertEquals(Double.NEGATIVE_INFINITY,
-                                    poly.projectToBoundary(new Cartesian2D(x, y)).getOffset(),
-                                    1e-10);
+                offset = poly.projectToBoundary(new Cartesian2D(x, y)).getOffset();
+                Assert.assertTrue(offset < 0);
+                Assert.assertTrue(Double.isInfinite(offset));
             }
         }
     }
