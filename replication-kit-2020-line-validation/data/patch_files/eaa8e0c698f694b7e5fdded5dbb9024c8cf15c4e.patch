From eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@apache.org>
Date: Fri, 25 Aug 2006 21:39:06 +0000
Subject: [PATCH] IO-83 - Fix freeSpace for AIX and HP-UX code from Magnus
 Grimsell, also from James Urie

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@436964 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  5 +-
 project.xml                                   |  6 ++
 .../apache/commons/io/FileSystemUtils.java    | 29 ++++--
 .../commons/io/FileSystemUtilsTestCase.java   | 95 +++++++++++++++----
 4 files changed, 107 insertions(+), 28 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 4962c63e383..44ea6df387e 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -33,7 +33,10 @@ Deprecations from 1.2
 Bug fixes from 1.2
 ------------------
 - LineIterator now implements Iterator
-  (It was always supposed to...)
+  - It was always supposed to...
+
+- FileSystemUtils.freeSpace/freeSpaceKb [IO-83]
+  - These should now work on AIX and HP-UX
 
 
 Enhancements from 1.2
diff --git a/project.xml b/project.xml
index 19654a07b34..09f5a12771c 100644
--- a/project.xml
+++ b/project.xml
@@ -188,6 +188,9 @@
     <contributor>
       <name>Chris Eldredge</name>
     </contributor>
+    <contributor>
+      <name>Magnus Grimsell</name>
+    </contributor>
     <contributor>
       <name>Jim Harrington</name>
     </contributor>
@@ -213,6 +216,9 @@
     <contributor>
       <name>Masato Tezuka</name>
     </contributor>
+    <contributor>
+      <name>James Urie</name>
+    </contributor>
     <contributor>
       <name>Frank W. Zammetti</name>
     </contributor>
diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index 4262a24570a..061174c811d 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -35,6 +35,8 @@
  * @author Frank W. Zammetti
  * @author Stephen Colebourne
  * @author Thomas Ledoux
+ * @author James Urie
+ * @author Magnus Grimsell
  * @version $Id$
  * @since Commons IO 1.1
  */
@@ -51,6 +53,8 @@ public class FileSystemUtils {
     private static final int WINDOWS = 1;
     /** Operating system state flag for Unix. */
     private static final int UNIX = 2;
+    /** Operating system state flag for Posix flavour Unix. */
+    private static final int POSIX_UNIX = 3;
 
     /** The operating system flag. */
     private static final int OS;
@@ -70,14 +74,15 @@ public class FileSystemUtils {
                 osName.indexOf("sunos") != -1 ||
                 osName.indexOf("solaris") != -1 ||
                 osName.indexOf("mpe/ix") != -1 ||
-                osName.indexOf("hp-ux") != -1 ||
-                osName.indexOf("aix") != -1 ||
                 osName.indexOf("freebsd") != -1 ||
                 osName.indexOf("irix") != -1 ||
                 osName.indexOf("digital unix") != -1 ||
                 osName.indexOf("unix") != -1 ||
                 osName.indexOf("mac os x") != -1) {
                 os = UNIX;
+            } else if (osName.indexOf("hp-ux") != -1 ||
+                osName.indexOf("aix") != -1) {
+                os = POSIX_UNIX;
             } else {
                 os = OTHER;
             }
@@ -133,7 +138,7 @@ public static long freeSpace(String path) throws IOException {
      * FileSystemUtils.freeSpaceKb("/volume");  // *nix
      * </pre>
      * The free space is calculated via the command line.
-     * It uses 'dir /-c' on Windows and 'df -k' on *nix.
+     * It uses 'dir /-c' on Windows, 'df -kP' on AIX/HP-UX and 'df -k' on other Unix.
      *
      * @param path  the path to get free space for, not null, not empty on Unix
      * @return the amount of free drive space on the drive or volume in kilobytes
@@ -173,7 +178,9 @@ long freeSpaceOS(String path, int os, boolean kb) throws IOException {
             case WINDOWS:
                 return (kb ? freeSpaceWindows(path) / 1024 : freeSpaceWindows(path));
             case UNIX:
-                return freeSpaceUnix(path, kb);
+                return freeSpaceUnix(path, kb, false);
+            case POSIX_UNIX:
+                return freeSpaceUnix(path, kb, true);
             case OTHER:
                 throw new IllegalStateException("Unsupported operating system");
             default:
@@ -278,19 +285,27 @@ long freeSpaceWindows(String path) throws IOException {
      *
      * @param path  the path to get free space for
      * @param kb  whether to normalize to kilobytes
+     * @param posix  whether to use the posix standard format flag
      * @return the amount of free drive space on the volume
      * @throws IOException if an error occurs
      */
-    long freeSpaceUnix(String path, boolean kb) throws IOException {
+    long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
         if (path.length() == 0) {
             throw new IllegalArgumentException("Path must not be empty");
         }
         path = FilenameUtils.normalize(path);
 
         // build and run the 'dir' command
+        String flags = "-";
+        if (kb) {
+            flags += "k";
+        }
+        if (posix) {
+            flags += "P";
+        }
         String[] cmdAttribs = 
-            (kb ? new String[] {"df", "-k", path} : new String[] {"df", path});
-
+            (flags.length() > 1 ? new String[] {"df", flags, path} : new String[] {"df", path});
+        
         // read the output from the command until we come to the second line
         long bytes = -1;
         BufferedReader in = null;
diff --git a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
index b9a814c500b..8db76cfd946 100644
--- a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
+++ b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
@@ -30,8 +30,7 @@
 /**
  * This is used to test FileSystemUtils.
  *
- * @author Stephen Colebourne
- * @version $Id$
+ * @version $Id: FileSystemUtilsTestCase.java 385680 2006-03-13 22:27:09Z scolebourne $
  */
 public class FileSystemUtilsTestCase extends FileBasedTestCase {
 
@@ -64,7 +63,14 @@ public void testGetFreeSpace_String() throws Exception {
         // test coverage, as we can't check value
         if (File.separatorChar == '/') {
             // have to figure out unix block size
-            Process proc = Runtime.getRuntime().exec(new String[] {"df", "/"});
+            String[] cmd = null;
+            String osName = System.getProperty("os.name");
+            if (osName.indexOf("hp-ux") >= 0 || osName.indexOf("aix") >= 0) {
+                cmd = new String[] {"df", "-P", "/"};
+            } else {
+                cmd = new String[] {"df", "/"};
+            }
+            Process proc = Runtime.getRuntime().exec(cmd);
             boolean kilobyteBlock = true;
             BufferedReader r = null;
             try {
@@ -141,7 +147,7 @@ protected long freeSpaceWindows(String path) throws IOException {
 
     public void testGetFreeSpaceOS_String_Unix() throws Exception {
         FileSystemUtils fsu = new FileSystemUtils() {
-            protected long freeSpaceUnix(String path, boolean kb) throws IOException {
+            protected long freeSpaceUnix(String path, boolean kb, boolean posix) throws IOException {
                 return (kb ? 12345L : 54321);
             }
         };
@@ -270,13 +276,22 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("", false);
+            fsu.freeSpaceUnix("", false, false);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            fsu.freeSpaceUnix("", true, false);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            fsu.freeSpaceUnix("", true);
+            fsu.freeSpaceUnix("", true, true);
             fail();
         } catch (IllegalArgumentException ex) {}
+        try {
+            fsu.freeSpaceUnix("", false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
     }
 
     public void testGetFreeSpaceUnix_String_NormalResponse() throws Exception {
@@ -289,7 +304,7 @@ protected BufferedReader openProcessStream(String[] params) {
                 return new BufferedReader(reader);
             }
         };
-        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false));
+        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false));
     }
 
     public void testGetFreeSpaceUnix_String_NormalResponseKb() throws Exception {
@@ -302,7 +317,7 @@ protected BufferedReader openProcessStream(String[] params) {
                 return new BufferedReader(reader);
             }
         };
-        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true));
+        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false));
     }
 
     public void testGetFreeSpaceUnix_String_LongResponse() throws Exception {
@@ -316,7 +331,7 @@ protected BufferedReader openProcessStream(String[] params) {
                 return new BufferedReader(reader);
             }
         };
-        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false));
+        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false));
     }
 
     public void testGetFreeSpaceUnix_String_LongResponseKb() throws Exception {
@@ -330,7 +345,7 @@ protected BufferedReader openProcessStream(String[] params) {
                 return new BufferedReader(reader);
             }
         };
-        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true));
+        assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false));
     }
 
     public void testGetFreeSpaceUnix_String_EmptyResponse() throws Exception {
@@ -342,11 +357,19 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("/home/users/s", false);
+            fsu.freeSpaceUnix("/home/users/s", false, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", false, true);
             fail();
         } catch (IOException ex) {}
         try {
-            fsu.freeSpaceUnix("/home/users/s", true);
+            fsu.freeSpaceUnix("/home/users/s", true, true);
             fail();
         } catch (IOException ex) {}
     }
@@ -362,11 +385,19 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("/home/users/s", false);
+            fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
         } catch (IOException ex) {}
         try {
-            fsu.freeSpaceUnix("/home/users/s", true);
+            fsu.freeSpaceUnix("/home/users/s", true, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", false, true);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, true);
             fail();
         } catch (IOException ex) {}
     }
@@ -382,11 +413,19 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("/home/users/s", false);
+            fsu.freeSpaceUnix("/home/users/s", false, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", false, true);
             fail();
         } catch (IOException ex) {}
         try {
-            fsu.freeSpaceUnix("/home/users/s", true);
+            fsu.freeSpaceUnix("/home/users/s", true, true);
             fail();
         } catch (IOException ex) {}
     }
@@ -402,11 +441,19 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("/home/users/s", false);
+            fsu.freeSpaceUnix("/home/users/s", false, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, false);
             fail();
         } catch (IOException ex) {}
         try {
-            fsu.freeSpaceUnix("/home/users/s", true);
+            fsu.freeSpaceUnix("/home/users/s", false, true);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, true);
             fail();
         } catch (IOException ex) {}
     }
@@ -422,11 +469,19 @@ protected BufferedReader openProcessStream(String[] params) {
             }
         };
         try {
-            fsu.freeSpaceUnix("/home/users/s", false);
+            fsu.freeSpaceUnix("/home/users/s", false, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", true, false);
+            fail();
+        } catch (IOException ex) {}
+        try {
+            fsu.freeSpaceUnix("/home/users/s", false, true);
             fail();
         } catch (IOException ex) {}
         try {
-            fsu.freeSpaceUnix("/home/users/s", true);
+            fsu.freeSpaceUnix("/home/users/s", true, true);
             fail();
         } catch (IOException ex) {}
     }
