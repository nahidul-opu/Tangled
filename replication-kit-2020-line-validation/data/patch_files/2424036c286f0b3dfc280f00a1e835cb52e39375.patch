From 2424036c286f0b3dfc280f00a1e835cb52e39375 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Wed, 15 Jun 2016 06:16:39 +0200
Subject: [PATCH] COMPRESS-357 - no longer invoke finish from finalize

---
 src/changes/changes.xml                       | 21 +++++++---
 .../bzip2/BZip2CompressorOutputStream.java    | 39 ++++++++++---------
 2 files changed, 36 insertions(+), 24 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index eb9bb008e19..fee6da308a5 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,7 +43,17 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="1.12" date="not released, yet"
-             description="Release 1.12 - API compatible to 1.11 but requires Java6 at runtime">
+             description="Release 1.12 - API compatible to 1.11 but requires Java6 at runtime.
+------------
+
+
+
+Release 1.12 changes the behavior of BZip2CompressorOutputStream's
+finalize method so that it no longer invokes finish. This is going to
+break code that relied on the finalizer to clean up an unfinished
+stream. The code will need to be changed to call finish or
+close itself.
+">
       <action issue="COMPRESS-349" type="update" date="2016-04-09" dev="ggregory">
         Update requirement from Java 5 to 6.
       </action>
@@ -75,10 +85,6 @@ The <action> type attribute can be add,update,fix,remove.
         Snappy used by the IWA files contained within the zip archives
         used in Apple's iWork 13 files.
       </action>
-      <action issue="COMPRESS-357" type="fix" date="2016-05-26">
-        BZip2CompressorOutputStream#finish is now synchronized to
-        avoid a race condition with the finalize method.
-      </action>
       <action issue="COMPRESS-351" type="update" date="2016-06-07">
         ZipArchiveInputStream and CpioArchiveInputStream could throw
         exceptions who's messages contained potentially corrupt entry
@@ -86,6 +92,11 @@ The <action> type attribute can be add,update,fix,remove.
         names by replacing unprintable characters and restricting the
         length to 255 characters.
       </action>
+      <action issue="COMPRESS-357" type="update" date="2016-06-15">
+        BZip2CompressorOutputStream no longer tries to finish the
+        output stream in finalize. This is a breaking change for code
+        that relied on the finalizer.
+      </action>
     </release>
     <release version="1.11" date="2016-04-06"
              description="Release 1.11">
diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
index 034fbfc20b3..a26fac8c5c6 100644
--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java
@@ -321,8 +321,8 @@ private static void hbMakeCodeLengths(final byte[] len, final int[] freq,
     private Data data;
     private BlockSort blockSorter;
 
-    private final Object outLock = new Object();
     private OutputStream out;
+    private volatile boolean closed;
 
     /**
      * Chooses a blocksize based on the given length of the data to compress.
@@ -393,7 +393,7 @@ public BZip2CompressorOutputStream(final OutputStream out, final int blockSize)
 
     @Override
     public void write(final int b) throws IOException {
-        if (this.out != null) {
+        if (!closed) {
             write0(b);
         } else {
             throw new IOException("closed");
@@ -468,37 +468,38 @@ private void writeRun() throws IOException {
     }
 
     /**
-     * Overriden to close the stream.
+     * Overriden to warn about an unclosed stream.
      */
     @Override
     protected void finalize() throws Throwable {
-        finish();
+        if (!closed) {
+            System.err.println("Unclosed BZip2CompressorOutputStream detected, will *not* close it");
+        }
         super.finalize();
     }
 
 
     public void finish() throws IOException {
-        synchronized(outLock) {
-            if (out != null) {
-                try {
-                    if (this.runLength > 0) {
-                        writeRun();
-                    }
-                    this.currentChar = -1;
-                    endBlock();
-                    endCompression();
-                } finally {
-                    this.out = null;
+        if (!closed) {
+            closed = true;
+            try {
+                if (this.runLength > 0) {
+                    writeRun();
                 }
+                this.currentChar = -1;
+                endBlock();
+                endCompression();
+            } finally {
+                this.out = null;
+                this.blockSorter = null;
+                this.data = null;
             }
         }
-        this.blockSorter = null;
-        this.data = null;
     }
 
     @Override
     public void close() throws IOException {
-        if (out != null) {
+        if (!closed) {
             final OutputStream outShadow = this.out;
             finish();
             outShadow.close();
@@ -628,7 +629,7 @@ public void write(final byte[] buf, int offs, final int len)
                                                 + len + ") > buf.length("
                                                 + buf.length + ").");
         }
-        if (this.out == null) {
+        if (closed) {
             throw new IOException("stream closed");
         }
 
