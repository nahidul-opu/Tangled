From d17f7d01787f67ee6d81f12cb67e5d961921d2aa Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Thu, 24 May 2007 20:43:18 +0000
Subject: [PATCH] CONFIGURATION-274: Support escaping the escape character for
 list delimiters in PropertiesConfiguration

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/configuration/trunk@541423 13f79535-47bb-0310-9956-ffa450edef68
---
 .../PropertiesConfiguration.java              | 18 ++++++++++---
 .../TestPropertiesConfiguration.java          | 25 +++++++++++++++++--
 xdocs/changes.xml                             |  4 +++
 3 files changed, 42 insertions(+), 5 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/PropertiesConfiguration.java b/src/java/org/apache/commons/configuration/PropertiesConfiguration.java
index 6582d9ab38..1b641853db 100644
--- a/src/java/org/apache/commons/configuration/PropertiesConfiguration.java
+++ b/src/java/org/apache/commons/configuration/PropertiesConfiguration.java
@@ -185,6 +185,9 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
     /** Constant for the platform specific line separator.*/
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
+    /** Constant for the escaping character.*/
+    private static final String ESCAPE = "\\";
+
     /** Constant for the radix of hex numbers.*/
     private static final int HEX_RADIX = 16;
 
@@ -933,7 +936,7 @@ private String escapeValue(Object value)
             String escapedValue = StringEscapeUtils.escapeJava(String.valueOf(value));
             if (delimiter != 0)
             {
-                escapedValue = StringUtils.replace(escapedValue, String.valueOf(delimiter), "\\" + delimiter);
+                escapedValue = StringUtils.replace(escapedValue, String.valueOf(delimiter), ESCAPE + delimiter);
             }
             return escapedValue;
         }
@@ -950,11 +953,20 @@ private String makeSingleLineValue(List values)
             if (!values.isEmpty())
             {
                 Iterator it = values.iterator();
-                StringBuffer buf = new StringBuffer(escapeValue(it.next()));
+                String lastValue = escapeValue(it.next());
+                StringBuffer buf = new StringBuffer(lastValue);
                 while (it.hasNext())
                 {
+                    // if the last value ended with an escape character, it has
+                    // to be escaped itself; otherwise the list delimiter will
+                    // be escaped
+                    if (lastValue.endsWith(ESCAPE))
+                    {
+                        buf.append(ESCAPE).append(ESCAPE);
+                    }
                     buf.append(delimiter);
-                    buf.append(escapeValue(it.next()));
+                    lastValue = escapeValue(it.next());
+                    buf.append(lastValue);
                 }
                 return buf.toString();
             }
diff --git a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
index f19c51cc3c..9deb225f41 100644
--- a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -174,7 +174,7 @@ public void testSaveToCustomURL() throws Exception
 
         // reload the configuration
         Configuration config2 = new PropertiesConfiguration(url);
-        assertEquals("true", config2.getString("configuration.loaded"));        
+        assertEquals("true", config2.getString("configuration.loaded"));
     }
 
     public void testSaveToHTTPServer() throws Exception
@@ -234,7 +234,7 @@ public void handle(String target, HttpServletRequest request, HttpServletRespons
 
         // reload the configuration
         Configuration config2 = new PropertiesConfiguration(url);
-        assertEquals("true", config2.getString("configuration.loaded"));        
+        assertEquals("true", config2.getString("configuration.loaded"));
     }
 
     public void testInMemoryCreatedSave() throws Exception
@@ -325,6 +325,27 @@ public void testSaveWithBasePath() throws Exception
         assertTrue(testSavePropertiesFile.exists());
     }
 
+    /**
+     * Tests whether the escape character for list delimiters can be itself
+     * escaped and survives a save operation.
+     */
+    public void testSaveEscapedEscapingCharacter()
+            throws ConfigurationException
+    {
+        conf.addProperty("test.dirs", "C:\\Temp\\\\,D:\\Data\\\\,E:\\Test\\");
+        List dirs = conf.getList("test.dirs");
+        assertEquals("Wrong number of list elements", 3, dirs.size());
+        if (testSavePropertiesFile.exists())
+        {
+            assertTrue(testSavePropertiesFile.delete());
+        }
+        conf.save(testSavePropertiesFile);
+
+        PropertiesConfiguration checkConfig = new PropertiesConfiguration(
+                testSavePropertiesFile);
+        ConfigurationAssert.assertEquals(conf, checkConfig);
+    }
+
     public void testLoadViaProperty() throws Exception
     {
         PropertiesConfiguration pc = new PropertiesConfiguration();
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index b3bd91f580..4ac5e09df9 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-274">
+        PropertiesConfiguration now supports escaping the escape character for
+        list delimiters.
+      </action>
       <action dev="ebourg" type="fix" issue="CONFIGURATION-269">
         PropertiesConfiguration no longer escape the list delimiter on saving
         if the list delimiter has been disabled.
