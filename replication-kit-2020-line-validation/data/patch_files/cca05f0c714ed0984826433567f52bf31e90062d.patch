From cca05f0c714ed0984826433567f52bf31e90062d Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Sun, 18 Nov 2012 21:00:34 +0000
Subject: [PATCH] MATH-899 Added wrapper class that allows thread-safe usage of
 any "RandomGenerator".

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1410990 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   5 +
 .../random/SynchronizedRandomGenerator.java   | 122 ++++++++++++++++++
 2 files changed, 127 insertions(+)
 create mode 100644 src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 1fb75224a1..92f4747e2a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,6 +52,11 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
+      <action dev="erans" type="add" issue="MATH-899">
+        Added a new "SynchronizedRandomGenerator" that wraps another
+        "RandomGenerator" with all methods being synchronized, thus
+        rendering the code thread-safe (at some efficiency cost).
+      </action>
       <action dev="tn" type="add" issue="MATH-893" due-to="Patrick Meyer">
         Add new "NaNStrategy": FAILED, used in "RankingAlgorithm" implementations.
         Any encountered input value that succeeds a "Double#isNaN" check, results in a
diff --git a/src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java b/src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java
new file mode 100644
index 0000000000..54c006dee7
--- /dev/null
+++ b/src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math3.random;
+
+/**
+ * Any {@link RandomGenerator} implementation can be thread-safe if it
+ * is used through an instance of this class.
+ * This is achieved by enclosing calls to the methods of the actual
+ * generator inside the overridden {@code synchronized} methods of this
+ * class.
+ *
+ * @since 3.1
+ * @version $Id$
+ */
+public class SynchronizedRandomGenerator implements RandomGenerator {
+    /** Object to which all calls will be delegated. */
+    private final RandomGenerator wrapped;
+
+    /**
+     * Creates a synchronized wrapper for the given {@code RandomGenerator}
+     * instance.
+     *
+     * @param rng Generator whose methods will be called through
+     * their corresponding overridden synchronized version.
+     * To ensure thread-safety, the wrapped generator <em>must</em>
+     * not be used directly.
+     */
+    public SynchronizedRandomGenerator(RandomGenerator rng) {
+        wrapped = rng;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized void setSeed(int seed) {
+        wrapped.setSeed(seed);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized void setSeed(int[] seed) {
+        wrapped.setSeed(seed);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized void setSeed(long seed) {
+        wrapped.setSeed(seed);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized void nextBytes(byte[] bytes) {
+        wrapped.nextBytes(bytes);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized int nextInt() {
+        return wrapped.nextInt();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized int nextInt(int n) {
+        return wrapped.nextInt();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized long nextLong() {
+        return wrapped.nextLong();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized boolean nextBoolean() {
+        return wrapped.nextBoolean();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized float nextFloat() {
+        return wrapped.nextFloat();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized double nextDouble() {
+        return wrapped.nextDouble();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized double nextGaussian() {
+        return wrapped.nextGaussian();
+    }
+}
