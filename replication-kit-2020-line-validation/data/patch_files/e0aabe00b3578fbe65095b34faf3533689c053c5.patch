From e0aabe00b3578fbe65095b34faf3533689c053c5 Mon Sep 17 00:00:00 2001
From: gpetracek <gpetracek@apache.org>
Date: Sun, 19 Jul 2015 15:03:32 +0200
Subject: [PATCH] DELTASPIKE-960 use maxWindowIdCount for window-id cookies

---
 .../window/WindowIdHtmlRenderer.java          | 29 +++++++++++--------
 1 file changed, 17 insertions(+), 12 deletions(-)

diff --git a/deltaspike/modules/jsf/impl/src/main/java/org/apache/deltaspike/jsf/impl/component/window/WindowIdHtmlRenderer.java b/deltaspike/modules/jsf/impl/src/main/java/org/apache/deltaspike/jsf/impl/component/window/WindowIdHtmlRenderer.java
index 7cd2e0393..6a2ea7a31 100644
--- a/deltaspike/modules/jsf/impl/src/main/java/org/apache/deltaspike/jsf/impl/component/window/WindowIdHtmlRenderer.java
+++ b/deltaspike/modules/jsf/impl/src/main/java/org/apache/deltaspike/jsf/impl/component/window/WindowIdHtmlRenderer.java
@@ -63,16 +63,13 @@ public void encodeBegin(FacesContext context, UIComponent component) throws IOEx
         ClientWindowConfig.ClientWindowRenderMode clientWindowRenderMode =
                 clientWindowConfig.getClientWindowRenderMode(context);
 
+        boolean delegatedWindowMode =
+            ClientWindowConfig.ClientWindowRenderMode.DELEGATED.equals(clientWindowRenderMode);
+
         // don't cut the windowId generated from JSF
-        if (!ClientWindowConfig.ClientWindowRenderMode.DELEGATED.equals(clientWindowRenderMode))
+        if (!delegatedWindowMode)
         {
-            //already ensured by DefaultClientWindow
-            //just to ensure that we don't get a security issue in case of a customized client-window implementation
-            //will never happen usually -> no real overhead
-            if (windowId != null && windowId.length() > this.maxWindowIdCount)
-            {
-                windowId = windowId.substring(0, this.maxWindowIdCount);
-            }
+            windowId = secureWindowId(windowId);
         }
 
         ResponseWriter writer = context.getResponseWriter();
@@ -84,14 +81,13 @@ public void encodeBegin(FacesContext context, UIComponent component) throws IOEx
         writer.write("'storeWindowTree':'" + clientWindowConfig.isClientWindowStoreWindowTreeEnabled() + "'");
 
         // see #729
-        if (clientWindow.isInitialRedirectSupported(context))
+        if (!delegatedWindowMode && clientWindow.isInitialRedirectSupported(context))
         {
             Object cookie = ClientWindowHelper.getRequestWindowIdCookie(context, windowId);
             if (cookie != null && cookie instanceof Cookie)
             {
                 Cookie servletCookie = (Cookie) cookie;
-                writer.write(",'initialRedirectWindowId':'" + servletCookie.getValue() + "'");
-
+                writer.write(",'initialRedirectWindowId':'" + secureWindowId(servletCookie.getValue()) + "'");
                 // expire/remove cookie
                 servletCookie.setMaxAge(0);
                 ((HttpServletResponse) context.getExternalContext().getResponse()).addCookie(servletCookie);
@@ -103,6 +99,16 @@ public void encodeBegin(FacesContext context, UIComponent component) throws IOEx
         writer.endElement("script");
     }
 
+    protected String secureWindowId(String windowId)
+    {
+        //restrict the length to prevent script-injection
+        if (windowId != null && windowId.length() > this.maxWindowIdCount)
+        {
+            windowId = windowId.substring(0, this.maxWindowIdCount);
+        }
+        return windowId;
+    }
+
     private void lazyInit()
     {
         if (clientWindow == null)
@@ -118,5 +124,4 @@ private void lazyInit()
             }
         }
     }
-
 }
