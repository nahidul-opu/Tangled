From ce185345fa26d4f96979cbebfbb0e9def817305f Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Tue, 29 Dec 2009 12:24:58 +0000
Subject: [PATCH] fixed a wrong implementation of the Linf vector norm JIRA:
 MATH-326

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@894367 13f79535-47bb-0310-9956-ffa450edef68
---
 .../math/linear/AbstractRealVector.java       | 34 +++++++++++++++++++
 .../commons/math/linear/ArrayRealVector.java  |  5 ++-
 .../math/linear/OpenMapRealVector.java        | 33 ------------------
 src/site/xdoc/changes.xml                     |  3 ++
 .../math/linear/ArrayRealVectorTest.java      | 19 +++++++----
 .../math/linear/SparseRealVectorTest.java     | 18 ++++++----
 6 files changed, 64 insertions(+), 48 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
index cf103c0661..ace4b8d215 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
@@ -205,6 +205,40 @@ public double getDistance(RealVector v) throws IllegalArgumentException {
         return Math.sqrt(d);
     }
 
+    /** {@inheritDoc} */
+    public double getNorm() {
+        double sum = 0;
+        Iterator<Entry> it = sparseIterator();
+        Entry e;
+        while (it.hasNext() && (e = it.next()) != null) {
+            final double value = e.getValue();
+            sum += value * value;
+        }
+        return Math.sqrt(sum);
+    }
+
+    /** {@inheritDoc} */
+    public double getL1Norm() {
+        double norm = 0;
+        Iterator<Entry> it = sparseIterator();
+        Entry e;
+        while (it.hasNext() && (e = it.next()) != null) {
+            norm += Math.abs(e.getValue());
+        }
+        return norm;
+    }
+
+    /** {@inheritDoc} */
+    public double getLInfNorm() {
+        double norm = 0;
+        Iterator<Entry> it = sparseIterator();
+        Entry e;
+        while (it.hasNext() && (e = it.next()) != null) {
+            norm = Math.max(norm, Math.abs(e.getValue()));
+        }
+        return norm;
+    }
+
     /** {@inheritDoc} */
     public double getDistance(double[] v) throws IllegalArgumentException {
         return getDistance(new ArrayRealVector(v,false));
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
index 45c091921c..22d0a280f3 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
@@ -694,6 +694,7 @@ public double dotProduct(ArrayRealVector v)
     }
 
     /** {@inheritDoc} */
+    @Override
     public double getNorm() {
         double sum = 0;
         for (double a : data) {
@@ -703,6 +704,7 @@ public double getNorm() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public double getL1Norm() {
         double sum = 0;
         for (double a : data) {
@@ -712,10 +714,11 @@ public double getL1Norm() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public double getLInfNorm() {
         double max = 0;
         for (double a : data) {
-            max += Math.max(max, Math.abs(a));
+            max = Math.max(max, Math.abs(a));
         }
         return max;
     }
diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
index febea7a875..eb5be1b687 100644
--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
@@ -495,17 +495,6 @@ public double getL1Distance(double[] v) throws IllegalArgumentException {
         return max;
     }
 
-    /** {@inheritDoc} */
-    public double getL1Norm() {
-        double res = 0;
-        Iterator iter = entries.iterator();
-        while (iter.hasNext()) {
-            iter.advance();
-            res += Math.abs(iter.value());
-        }
-        return res;
-    }
-
     /**
      * Optimized method to compute LInfDistance.
      * @param v The vector to compute from
@@ -556,28 +545,6 @@ public double getLInfDistance(double[] v) throws IllegalArgumentException {
         return max;
     }
 
-    /** {@inheritDoc} */
-    public double getLInfNorm() {
-        double max = 0;
-        Iterator iter = entries.iterator();
-        while (iter.hasNext()) {
-            iter.advance();
-            max += iter.value();
-        }
-        return max;
-    }
-
-    /** {@inheritDoc} */
-    public double getNorm() {
-        double res = 0;
-        Iterator iter = entries.iterator();
-        while (iter.hasNext()) {
-            iter.advance();
-            res += iter.value() * iter.value();
-        }
-        return Math.sqrt(res);
-    }
-
     /** {@inheritDoc} */
     public boolean isInfinite() {
         boolean infiniteFound = false;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index ff44a55fb3..d5e90c3491 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,9 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.1" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-326" due-to="Jake Mannix">
+        Fixed a wrong implementation of the Linf norm in vectors.
+      </action>
       <action dev="luc" type="fix" issue="MATH-324" due-to="Vincent Morand">
         Fixed a convergence discrepancy with respect to theory in Gragg-Bulirsch-Stoer
         integrator.
diff --git a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
index 1632316e56..171f23fce8 100644
--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
@@ -40,6 +40,7 @@ public class ArrayRealVectorTest extends TestCase {
     protected double[] vec2 = {4d, 5d, 6d};
     protected double[] vec3 = {7d, 8d, 9d};
     protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
+    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};
     protected double[] vec_null = {0d, 0d, 0d};
     protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
     protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};
@@ -1079,19 +1080,23 @@ public void testMapFunctions() {
     public void testBasicFunctions() {
         ArrayRealVector v1 = new ArrayRealVector(vec1);
         ArrayRealVector v2 = new ArrayRealVector(vec2);
+        ArrayRealVector v5 = new ArrayRealVector(vec5);
         ArrayRealVector v_null = new ArrayRealVector(vec_null);
 
         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
 
-        //octave =  sqrt(sumsq(v1))
-        double d_getNorm = v1.getNorm();
-        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
+        double d_getNorm = v5.getNorm();
+        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
 
-        double d_getL1Norm = v1.getL1Norm();
-        assertEquals("compare values  ",6.0, d_getL1Norm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
+        double d_getL1Norm = v5.getL1Norm();
+        assertEquals("compare values  ", 17.0, d_getL1Norm);
+
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
+        double d_getLInfNorm = v5.getLInfNorm();
+        assertEquals("compare values  ", 6.0, d_getLInfNorm);
 
-        double d_getLInfNorm = v1.getLInfNorm();
-        assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
diff --git a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
index db27f968e1..2becb695a6 100644
--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
@@ -40,6 +40,7 @@ public class SparseRealVectorTest extends TestCase {
     protected double[] vec2 = {4d, 5d, 6d};
     protected double[] vec3 = {7d, 8d, 9d};
     protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
+    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};
     protected double[] vec_null = {0d, 0d, 0d};
     protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
     protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};
@@ -949,19 +950,22 @@ public void testMapFunctions() {
     public void testBasicFunctions() {
         OpenMapRealVector v1 = new OpenMapRealVector(vec1);
         OpenMapRealVector v2 = new OpenMapRealVector(vec2);
+        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
         OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
 
         SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
 
-        //octave =  sqrt(sumsq(v1))
-        double d_getNorm = v1.getNorm();
-        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
+        double d_getNorm = v5.getNorm();
+        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
 
-        double d_getL1Norm = v1.getL1Norm();
-        assertEquals("compare values  ",6.0, d_getL1Norm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
+        double d_getL1Norm = v5.getL1Norm();
+        assertEquals("compare values  ", 17.0, d_getL1Norm);
 
-        double d_getLInfNorm = v1.getLInfNorm();
-        assertEquals("compare values  ",6.0, d_getLInfNorm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
+        double d_getLInfNorm = v5.getLInfNorm();
+        assertEquals("compare values  ", 6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
