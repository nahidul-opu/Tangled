From 8e5c7f44c68044f00f0c691090349cab7ec10400 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Tue, 4 Nov 2008 21:11:36 +0000
Subject: [PATCH] CONFIGURATION-336: CombinedConfiguration now allows setting a
 specific expression engine that will be used when converting flat
 configurations to hierarchical ones.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@711407 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration/CombinedConfiguration.java  | 45 ++++++++++++++++++-
 .../TestCombinedConfiguration.java            | 23 ++++++++++
 2 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/CombinedConfiguration.java b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
index fc696b6dfd..4e0e83fbc2 100644
--- a/src/java/org/apache/commons/configuration/CombinedConfiguration.java
+++ b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
@@ -30,6 +30,7 @@
 import org.apache.commons.configuration.tree.DefaultConfigurationKey;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.DefaultExpressionEngine;
+import org.apache.commons.configuration.tree.ExpressionEngine;
 import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
 import org.apache.commons.configuration.tree.ViewNode;
@@ -200,6 +201,12 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
     /** Stores a map with the named configurations. */
     private Map namedConfigurations;
 
+    /**
+     * An expression engine used for converting child configurations to
+     * hierarchical ones.
+     */
+    private ExpressionEngine conversionExpressionEngine;
+
     /** A flag whether an enhanced reload check is to be performed.*/
     private boolean forceReloadCheck;
 
@@ -286,6 +293,39 @@ public void setForceReloadCheck(boolean forceReloadCheck)
         this.forceReloadCheck = forceReloadCheck;
     }
 
+    /**
+     * Returns the <code>ExpressionEngine</code> for converting flat child
+     * configurations to hierarchical ones.
+     *
+     * @return the conversion expression engine
+     * @since 1.6
+     */
+    public ExpressionEngine getConversionExpressionEngine()
+    {
+        return conversionExpressionEngine;
+    }
+
+    /**
+     * Sets the <code>ExpressionEngine</code> for converting flat child
+     * configurations to hierarchical ones. When constructing the root node for
+     * this combined configuration the properties of all child configurations
+     * must be combined to a single hierarchical node structure. In this
+     * process, non hierarchical configurations are converted to hierarchical
+     * ones first. This can be problematic if a child configuration contains
+     * keys that are no compatible with the default expression engine used by
+     * hierarchical configurations. Therefore it is possible to specify a
+     * specific expression engine to be used for this purpose.
+     *
+     * @param conversionExpressionEngine the conversion expression engine
+     * @see ConfigurationUtils#convertToHierarchical(Configuration, ExpressionEngine)
+     * @since 1.6
+     */
+    public void setConversionExpressionEngine(
+            ExpressionEngine conversionExpressionEngine)
+    {
+        this.conversionExpressionEngine = conversionExpressionEngine;
+    }
+
     /**
      * Adds a new configuration to this combined configuration. It is possible
      * (but not mandatory) to give the new configuration a name. This name must
@@ -708,7 +748,7 @@ private Configuration findSourceConfiguration(ConfigurationNode node)
      * An internal helper class for storing information about contained
      * configurations.
      */
-    static class ConfigData
+    class ConfigData
     {
         /** Stores a reference to the configuration. */
         private AbstractConfiguration configuration;
@@ -808,7 +848,8 @@ public ConfigurationNode getTransformedRoot()
 
             // Copy data of the root node to the new path
             HierarchicalConfiguration hc = ConfigurationUtils
-                    .convertToHierarchical(getConfiguration());
+                    .convertToHierarchical(getConfiguration(),
+                            getConversionExpressionEngine());
             atParent.appendChildren(hc.getRootNode());
             atParent.appendAttributes(hc.getRootNode());
             rootNode = hc.getRootNode();
diff --git a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
index 893d6969a0..f0f99c27ea 100644
--- a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
@@ -32,6 +32,7 @@
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
+import org.apache.commons.configuration.tree.DefaultExpressionEngine;
 import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
 
@@ -637,6 +638,28 @@ public void testInvalidateAfterChange()
         assertEquals("No invalidate event fired", 1, listener.invalidateEvents);
     }
 
+    /**
+     * Tests using a conversion expression engine for child configurations with
+     * strange keys. This test is related to CONFIGURATION-336.
+     */
+    public void testConversionExpressionEngine()
+    {
+        PropertiesConfiguration child = new PropertiesConfiguration();
+        child.addProperty("test(a)", "1,2,3");
+        config.addConfiguration(child);
+        DefaultExpressionEngine engineQuery = new DefaultExpressionEngine();
+        engineQuery.setIndexStart("<");
+        engineQuery.setIndexEnd(">");
+        config.setExpressionEngine(engineQuery);
+        DefaultExpressionEngine engineConvert = new DefaultExpressionEngine();
+        engineConvert.setIndexStart("[");
+        engineConvert.setIndexEnd("]");
+        config.setConversionExpressionEngine(engineConvert);
+        assertEquals("Wrong property 1", "1", config.getString("test(a)<0>"));
+        assertEquals("Wrong property 2", "2", config.getString("test(a)<1>"));
+        assertEquals("Wrong property 3", "3", config.getString("test(a)<2>"));
+    }
+
     /**
      * Helper method for writing a file. The file is also added to a list and
      * will be deleted in teadDown() automatically.
