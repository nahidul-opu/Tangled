From d2a2deec90c5335b87376eebd68af9986cd3071e Mon Sep 17 00:00:00 2001
From: Scokart Gilles <gscokart@apache.org>
Date: Sun, 21 Oct 2007 19:09:00 +0000
Subject: [PATCH] Remove infinite loop in some case of circular dependencies
 (IVY-624)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@586936 13f79535-47bb-0310-9956-ffa450edef68
---
 .../ivy/core/sort/ModuleDescriptorSorter.java    |  2 +-
 .../org/apache/ivy/core/sort/ModuleInSort.java   | 16 ++++++++++++++++
 test/java/org/apache/ivy/core/sort/SortTest.java | 15 +++++++++++++++
 3 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/src/java/org/apache/ivy/core/sort/ModuleDescriptorSorter.java b/src/java/org/apache/ivy/core/sort/ModuleDescriptorSorter.java
index 075cee939..da3fafa8e 100644
--- a/src/java/org/apache/ivy/core/sort/ModuleDescriptorSorter.java
+++ b/src/java/org/apache/ivy/core/sort/ModuleDescriptorSorter.java
@@ -83,7 +83,7 @@ public List sortModuleDescriptors() throws CircularDependencyException {
     private void sortModuleDescriptorsHelp(ModuleInSort current, ModuleInSort caller)
             throws CircularDependencyException {
         // if already sorted return
-        if (current.isSorted()) {
+        if (current.isProcessed()) {
             return;
         }
         if (current.checkLoop(caller, circularDepStrategy)) {
diff --git a/src/java/org/apache/ivy/core/sort/ModuleInSort.java b/src/java/org/apache/ivy/core/sort/ModuleInSort.java
index 13283b678..3f1f12486 100644
--- a/src/java/org/apache/ivy/core/sort/ModuleInSort.java
+++ b/src/java/org/apache/ivy/core/sort/ModuleInSort.java
@@ -65,6 +65,7 @@ public boolean isInLoop() {
         return isLoopIntermediateElement;
     }
 
+    /** This ModuleInSort has been placed on the sorted list */
     public boolean isSorted() {
         if (isSorted) {
             Message.debug("Module descriptor already sorted : "
@@ -75,6 +76,21 @@ public boolean isSorted() {
         }
     }
 
+    /** This ModuleInSort has already been analyzed.  It is either already added
+     * to the sorted list, either it is included in a loop and will be added
+     * when the root of the loop will be added to the list. 
+     */
+    public boolean isProcessed() {
+        if (isSorted || isLoopIntermediateElement) {
+            Message.debug("Module descriptor is processed : "
+                    + module.getModuleRevisionId().toString());
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    
     public void setCaller(ModuleInSort caller) {
         this.caller = caller;
     }
diff --git a/test/java/org/apache/ivy/core/sort/SortTest.java b/test/java/org/apache/ivy/core/sort/SortTest.java
index e64fe5546..8259ebf52 100644
--- a/test/java/org/apache/ivy/core/sort/SortTest.java
+++ b/test/java/org/apache/ivy/core/sort/SortTest.java
@@ -17,6 +17,7 @@
  */
 package org.apache.ivy.core.sort;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -32,6 +33,7 @@
 import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
 import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
 import org.apache.ivy.core.module.id.ModuleRevisionId;
+import org.apache.ivy.core.report.ResolveReport;
 import org.apache.ivy.plugins.circular.CircularDependencyHelper;
 import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
 import org.apache.ivy.plugins.circular.WarnCircularDependencyStrategy;
@@ -130,6 +132,19 @@ public void testCircularDependency2() throws Exception {
         }
     }
 
+    //Test IVY-624
+    public void testCircularDependencyInfiniteLoop() throws Exception {
+        addDependency(md1, "md2", "rev2");
+        addDependency(md1, "md3", "rev3");
+        addDependency(md2, "md3", "rev3");        
+        addDependency(md3, "md4", "rev4");
+        addDependency(md4, "md1", "rev1");
+        addDependency(md4, "md2", "rev2");
+        List toSort = Arrays.asList(new Object[] {md1, md2, md3, md4});
+        sortEngine.sortModuleDescriptors(toSort, nonMatchReporter);
+        //If it ends, it's ok.
+    }
+    
     /**
      * In case of Circular dependency a warning is generated.
      */
