From fc2816d746ecaca5f5085db55bd950d5867dabbc Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Sat, 30 Jul 2011 14:41:19 +0000
Subject: [PATCH] assert general purpose bit values, COMPRESS-151

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/branches/zip64@1152476 13f79535-47bb-0310-9956-ffa450edef68
---
 .../archivers/zip/Zip64SupportTest.java       | 36 ++++++++++++-------
 1 file changed, 23 insertions(+), 13 deletions(-)

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
index b03d289ff0b..c8e2b180118 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
@@ -222,7 +222,7 @@ public void test(File f, ZipArchiveOutputStream zos)
                     // grab third entry, verify offset is
                     // 0xFFFFFFFF and it has a ZIP64 extended
                     // information extra field
-                    byte[] header = new byte[8];
+                    byte[] header = new byte[12];
                     a.readFully(header);
                     assertArrayEquals(new byte[] {
                             // sig
@@ -231,9 +231,13 @@ public void test(File f, ZipArchiveOutputStream zos)
                             45, 0,
                             // version needed to extract
                             45, 0,
+                            // GPB (EFS bit)
+                            0, 8,
+                            // method
+                            0, 0
                         }, header);
-                    // ignore GPB, method, timestamp, CRC, compressed size
-                    a.skipBytes(16);
+                    // ignore timestamp, CRC, compressed size
+                    a.skipBytes(12);
                     byte[] rest = new byte[23];
                     a.readFully(rest);
                     assertArrayEquals(new byte[] {
@@ -281,14 +285,12 @@ public void test(File f, ZipArchiveOutputStream zos)
             }
         };
 
-    @Ignore
     @Test public void write3EntriesCreatingBigArchiveFile() throws Throwable {
         withTemporaryArchive("write3EntriesCreatingBigArchiveFile",
                              write3EntriesCreatingBigArchive,
                              true);
     }
 
-    @Ignore
     @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {
         withTemporaryArchive("write3EntriesCreatingBigArchiveStream",
                              write3EntriesCreatingBigArchive,
@@ -305,7 +307,6 @@ public void test(File f, ZipArchiveOutputStream zos)
      *
      * Creates a temporary archive of approx 5GB in size
      */
-    @Ignore
     @Test public void writeBigStoredEntryToStream() throws Throwable {
         withTemporaryArchive("writeBigStoredEntryToStream",
                              new ZipOutputTest() {
@@ -337,7 +338,7 @@ public void test(File f,
                                          // sizes are 0xFFFFFFFF and
                                          // it has a ZIP64 extended
                                          // information extra field
-                                         byte[] header = new byte[8];
+                                         byte[] header = new byte[12];
                                          a.readFully(header);
                                          assertArrayEquals(new byte[] {
                                                  // sig
@@ -346,9 +347,13 @@ public void test(File f,
                                                  45, 0,
                                                  // version needed to extract
                                                  45, 0,
+                                                 // GPB (EFS bit)
+                                                 0, 8,
+                                                 // method
+                                                 0, 0
                                              }, header);
-                                         // ignore GPB, method, timestamp
-                                         a.skipBytes(8);
+                                         // ignore timestamp
+                                         a.skipBytes(4);
                                          byte[] rest = new byte[31];
                                          a.readFully(rest);
                                          assertArrayEquals(new byte[] {
@@ -395,16 +400,20 @@ public void test(File f,
 
                                          // and now validate local file header
                                          a.seek(0);
-                                         header = new byte[6];
+                                         header = new byte[10];
                                          a.readFully(header);
                                          assertArrayEquals(new byte[] {
                                                  // sig
                                                  (byte) 0x50, (byte) 0x4b, 3, 4,
                                                  // version needed to extract
                                                  45, 0,
+                                                 // GPB (EFS bit)
+                                                 0, 8,
+                                                 // method
+                                                 0, 0
                                              }, header);
-                                         // ignore GPB, method, timestamp
-                                         a.skipBytes(8);
+                                         // ignore timestamp
+                                         a.skipBytes(4);
                                          rest = new byte[17];
                                          a.readFully(rest);
                                          assertArrayEquals(new byte[] {
@@ -455,6 +464,7 @@ public void test(File f,
      *
      * Creates a temporary archive of approx 4MB in size
      */
+    @Ignore
     @Test public void writeBigDeflatedEntryKnownSizeToStream()
         throws Throwable {
         withTemporaryArchive("writeBigDeflatedEntryKnownSizeToStream",
@@ -578,7 +588,7 @@ public void test(File f,
                                                  (byte) 0x50, (byte) 0x4b, 3, 4,
                                                  // version needed to extract
                                                  45, 0,
-                                                 // GPB
+                                                 // GPB (EFS + Data Descriptor)
                                                  8, 8,
                                                  // method
                                                  8, 0,
