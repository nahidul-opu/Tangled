From 471e6b078a7891aea99b77f200e828a7b1c9bc00 Mon Sep 17 00:00:00 2001
From: tn <thomas.neidhart@gmail.com>
Date: Wed, 24 Jun 2015 15:30:35 +0200
Subject: [PATCH] [MATH-1241] Propagate input value to Gamma#digamma and
 Gamma#trigamma if the input is not a real value to avoid infinite recursion.
 Thanks to Aleksei Dievskii.

---
 src/changes/changes.xml                           |  4 ++++
 .../org/apache/commons/math4/special/Gamma.java   |  8 ++++++++
 .../apache/commons/math4/special/GammaTest.java   | 15 ++++++++++++++-
 3 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index cb25351711..62f682eb62 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -54,6 +54,10 @@ If the output is not quite correct, check for invisible trailing spaces!
     </release>
 
     <release version="4.0" date="XXXX-XX-XX" description="">
+      <action dev="tn" type="fix" issue="MATH-1241" due-to="Aleksei Dievskii"> <!-- backported to 3.6 -->
+        A "StackOverflowException" was thrown when passing Double.NaN or infinity to "Gamma#digamma(double)"
+        or "Gamma#trigamma(double)". Now the input value is propagated to the output if it is not a real number.
+      </action>
       <action dev="tn" type="fix" issue="MATH-1232" due-to="Otmar Ertl"> <!-- backported to 3.6 -->
         Improved performance of calculating the two-sample Kolmogorov-Smirnov
         test statistic.
diff --git a/src/main/java/org/apache/commons/math4/special/Gamma.java b/src/main/java/org/apache/commons/math4/special/Gamma.java
index eb3fb5b2e2..aa0e90c232 100644
--- a/src/main/java/org/apache/commons/math4/special/Gamma.java
+++ b/src/main/java/org/apache/commons/math4/special/Gamma.java
@@ -442,6 +442,10 @@ protected double getB(int n, double x) {
      * @since 2.0
      */
     public static double digamma(double x) {
+        if (Double.isNaN(x) || Double.isInfinite(x)) {
+            return x;
+        }
+
         if (x > 0 && x <= S_LIMIT) {
             // use method 5 from Bernardo AS103
             // accurate to O(x)
@@ -472,6 +476,10 @@ public static double digamma(double x) {
      * @since 2.0
      */
     public static double trigamma(double x) {
+        if (Double.isNaN(x) || Double.isInfinite(x)) {
+            return x;
+        }
+
         if (x > 0 && x <= S_LIMIT) {
             return 1 / (x * x);
         }
diff --git a/src/test/java/org/apache/commons/math4/special/GammaTest.java b/src/test/java/org/apache/commons/math4/special/GammaTest.java
index 70275f34c2..35da9fe5e3 100644
--- a/src/test/java/org/apache/commons/math4/special/GammaTest.java
+++ b/src/test/java/org/apache/commons/math4/special/GammaTest.java
@@ -19,7 +19,6 @@
 import org.apache.commons.math4.TestUtils;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
-import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
 import org.junit.Assert;
 import org.junit.Test;
@@ -125,6 +124,13 @@ public void testDigammaSmallArgs() {
         }
     }
 
+    @Test
+    public void testDigammaNonRealArgs() {
+        Assert.assertTrue(Double.isNaN(Gamma.digamma(Double.NaN)));
+        Assert.assertTrue(Double.isInfinite(Gamma.digamma(Double.POSITIVE_INFINITY)));
+        Assert.assertTrue(Double.isInfinite(Gamma.digamma(Double.NEGATIVE_INFINITY)));
+    }
+
     @Test
     public void testTrigamma() {
         double eps = 1e-8;
@@ -151,6 +157,13 @@ public void testTrigamma() {
         }
     }
 
+    @Test
+    public void testTrigammaNonRealArgs() {
+        Assert.assertTrue(Double.isNaN(Gamma.trigamma(Double.NaN)));
+        Assert.assertTrue(Double.isInfinite(Gamma.trigamma(Double.POSITIVE_INFINITY)));
+        Assert.assertTrue(Double.isInfinite(Gamma.trigamma(Double.NEGATIVE_INFINITY)));
+    }
+
     /**
      * Reference data for the {@link Gamma#logGamma(double)} function. This data
      * was generated with the following <a
