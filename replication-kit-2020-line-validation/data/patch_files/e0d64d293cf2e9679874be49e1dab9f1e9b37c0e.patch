From e0d64d293cf2e9679874be49e1dab9f1e9b37c0e Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Mon, 8 Feb 2010 21:03:02 +0000
Subject: [PATCH] [CONFIGURATION-407] Synchronized access to nodes when
 constructing the global section configuration. Applied a fix to
 configuration2 branch.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/configuration2_experimental@907793 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration2/INIConfiguration.java      | 22 +++++-
 .../configuration2/TestINIConfiguration.java  | 68 +++++++++++++++++++
 xdocs/changes.xml                             |  4 ++
 3 files changed, 92 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/configuration2/INIConfiguration.java b/src/main/java/org/apache/commons/configuration2/INIConfiguration.java
index 6627d0d216..f0282c6863 100644
--- a/src/main/java/org/apache/commons/configuration2/INIConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/INIConfiguration.java
@@ -32,7 +32,6 @@
 import org.apache.commons.configuration2.expr.ExpressionEngine;
 import org.apache.commons.configuration2.tree.ConfigurationNode;
 import org.apache.commons.configuration2.tree.DefaultConfigurationNode;
-import org.apache.commons.configuration2.tree.ViewNode;
 import org.apache.commons.lang.StringUtils;
 
 /**
@@ -690,7 +689,26 @@ private ConfigurationNode getSectionNode(String sectionName)
      */
     private SubConfiguration<ConfigurationNode> getGlobalSection()
     {
-        ViewNode parent = new ViewNode();
+        ConfigurationNode parent = new DefaultConfigurationNode()
+        {
+            /**
+             * Adds the specified child node to this node. This implementation
+             * does not change the parent node of the child. So the child node
+             * remains in its original hierarchy.
+             *
+             * @param child the child node to be added
+             */
+            @Override
+            public void addChild(ConfigurationNode child)
+            {
+                synchronized (child)
+                {
+                    ConfigurationNode parent = child.getParentNode();
+                    super.addChild(child);
+                    child.setParentNode(parent);
+                }
+            }
+        };
 
         for (ConfigurationNode node : getRootNode().getChildren())
         {
diff --git a/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java b/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java
index c67ed25c17..966903a417 100644
--- a/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java
@@ -27,6 +27,8 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import junit.framework.TestCase;
 
@@ -515,6 +517,72 @@ public void testGetSectionGlobal() throws ConfigurationException
                 .getString("globalVar"));
     }
 
+    /**
+     * Tests concurrent access to the global section.
+     */
+    public void testGetSectionGloabalMultiThreaded()
+            throws ConfigurationException, InterruptedException
+    {
+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);
+        final int threadCount = 12;
+        final int loopCount = 350;
+        final CountDownLatch syncLatch = new CountDownLatch(1);
+        final AtomicBoolean errorFlag = new AtomicBoolean();
+
+        Thread[] threads = new Thread[threadCount];
+        for (int i = 0; i < threadCount; i++)
+        {
+            threads[i] = new Thread()
+            {
+                /**
+                 * Accesses the global section of the test configuration in a
+                 * loop and checks whether this causes an exception.
+                 */
+                @Override
+                public void run()
+                {
+                    boolean error = false;
+
+                    try
+                    {
+                        // wait on the latch to increase parallelism
+                        syncLatch.await();
+                    }
+                    catch (InterruptedException iex)
+                    {
+                        error = true;
+                    }
+
+                    // access the configuration, check for errors
+                    for (int i = 0; i < loopCount && !error; i++)
+                    {
+                        try
+                        {
+                            config.getSection(null);
+                        }
+                        catch (IllegalStateException istex)
+                        {
+                            error = true;
+                        }
+                    }
+
+                    if (error)
+                    {
+                        errorFlag.set(true);
+                    }
+                };
+            };
+            threads[i].start();
+        }
+
+        syncLatch.countDown(); // start all test threads
+        for (int i = 0; i < threadCount; i++)
+        {
+            threads[i].join();
+        }
+        assertFalse("Exception occurred", errorFlag.get());
+    }
+
     /**
      * Tests querying the content of the global section if there is none.
      */
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 97b887b0cd..122a5d7df8 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -79,6 +79,10 @@
     </release>
 
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-407">
+        Fixed a potential IllegalStateException in HierarchicalINIConfiguration
+        that can be thrown when the global section is requested concurrently.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-405">
         XMLPropertyListConfiguration no longer throws a ConfigurationException
         if the file to be loaded does not have an outer dict element.
