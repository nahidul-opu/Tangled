From 690af97adf76e350576032cbe221f7ee7b32e42e Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Mon, 26 Mar 2007 15:27:41 +0000
Subject: [PATCH] FIX: XmlModuleDescriptorWriterTest not working with Java 6
 (IVY-374)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@522546 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../DefaultDependencyDescriptor.java          | 25 +++++++++----------
 .../descriptor/DefaultModuleDescriptor.java   |  2 +-
 .../xml/XmlModuleDescriptorParserTest.java    |  4 +--
 .../plugins/parser/xml/test-write-full.xml    | 14 +++++------
 5 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index abaef4c83..c1edd3052 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -18,6 +18,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVE: New "modules in use" section in console report at the end of resolve (IVY-373) (thanks to John Wiliams)
 - IMPROVE: Generated XML reports now contains more information about the resolved module (IVY-446)
 
+- FIX: XmlModuleDescriptorWriterTest not working with Java 6 (IVY-374)
 - FIX: Conflict managers ignored, when assigned to modules in Ivy configuration (setting, ivyconf.xml) (IVY-448)
 - FIX: Ivy should fail if ';' has been used in publications/artifact/@conf of ivy.xml (IVY-441)
 - FIX: Ivy should fail where dependency uses undefined configuration (IVY-442)
diff --git a/src/java/org/apache/ivy/core/module/descriptor/DefaultDependencyDescriptor.java b/src/java/org/apache/ivy/core/module/descriptor/DefaultDependencyDescriptor.java
index bbce3561c..fd2362f73 100644
--- a/src/java/org/apache/ivy/core/module/descriptor/DefaultDependencyDescriptor.java
+++ b/src/java/org/apache/ivy/core/module/descriptor/DefaultDependencyDescriptor.java
@@ -20,9 +20,8 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -95,9 +94,9 @@ public static DefaultDependencyDescriptor transformInstance(DependencyDescriptor
         if (moduleConfs.length == 1 && "*".equals(moduleConfs[0])) {
             if (dd instanceof DefaultDependencyDescriptor) {
                 DefaultDependencyDescriptor ddd = (DefaultDependencyDescriptor)dd;
-                newdd._confs = new HashMap(ddd._confs);
-                newdd._artifactsExcludes = new HashMap(ddd._artifactsExcludes);
-                newdd._artifactsIncludes = new HashMap(ddd._artifactsIncludes);
+                newdd._confs = new LinkedHashMap(ddd._confs);
+                newdd._artifactsExcludes = new LinkedHashMap(ddd._artifactsExcludes);
+                newdd._artifactsIncludes = new LinkedHashMap(ddd._artifactsIncludes);
             } else {
                 throw new IllegalArgumentException("dependency descriptor transformation does not support * module confs with descriptors which aren't DefaultDependencyDescriptor");
             }
@@ -115,10 +114,10 @@ public static DefaultDependencyDescriptor transformInstance(DependencyDescriptor
     }
     
     private ModuleRevisionId _revId;
-    private Map _confs = new HashMap();
-    private Map _artifactsIncludes = new HashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
-    private Map _artifactsExcludes = new HashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
-    private Set _extends = new HashSet();
+    private Map _confs = new LinkedHashMap();
+    private Map _artifactsIncludes = new LinkedHashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
+    private Map _artifactsExcludes = new LinkedHashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
+    private Set _extends = new LinkedHashSet();
     
     /**
      * Used to indicate that this revision must be used in case of conflicts, independently
@@ -298,7 +297,7 @@ private DependencyArtifactDescriptor[] getDependencyArtifacts(String moduleConfi
         }
         Collection artifacts = (Collection)artifactsMap.get(moduleConfiguration);
         Collection defArtifacts = (Collection)artifactsMap.get("*");
-        Set ret = new HashSet();
+        Set ret = new LinkedHashSet();
         if (artifacts != null) {
             ret.addAll(artifacts);
         }
@@ -309,7 +308,7 @@ private DependencyArtifactDescriptor[] getDependencyArtifacts(String moduleConfi
     }
     
     public DependencyArtifactDescriptor[] getDependencyArtifactsIncludes(String[] moduleConfigurations) {
-        Set artifacts = new HashSet();
+        Set artifacts = new LinkedHashSet();
         for (int i = 0; i < moduleConfigurations.length; i++) {
             artifacts.addAll(Arrays.asList(getDependencyArtifactsIncludes(moduleConfigurations[i])));
         }
@@ -317,7 +316,7 @@ public DependencyArtifactDescriptor[] getDependencyArtifactsIncludes(String[] mo
     }
     
     public DependencyArtifactDescriptor[] getDependencyArtifactsExcludes(String[] moduleConfigurations) {
-        Set artifacts = new HashSet();
+        Set artifacts = new LinkedHashSet();
         for (int i = 0; i < moduleConfigurations.length; i++) {
             artifacts.addAll(Arrays.asList(getDependencyArtifactsExcludes(moduleConfigurations[i])));
         }
@@ -333,7 +332,7 @@ public DependencyArtifactDescriptor[] getAllDependencyArtifactsExcludes() {
     }
     
     private DependencyArtifactDescriptor[] getAllDependencyArtifacts(Map artifactsMap) {
-        Set ret = new HashSet();
+        Set ret = new LinkedHashSet();
         for (Iterator it = artifactsMap.values().iterator(); it.hasNext();) {
             Collection artifacts = (Collection)it.next();
             ret.addAll(artifacts);
diff --git a/src/java/org/apache/ivy/core/module/descriptor/DefaultModuleDescriptor.java b/src/java/org/apache/ivy/core/module/descriptor/DefaultModuleDescriptor.java
index 85f8ba3a5..2b0dd180f 100644
--- a/src/java/org/apache/ivy/core/module/descriptor/DefaultModuleDescriptor.java
+++ b/src/java/org/apache/ivy/core/module/descriptor/DefaultModuleDescriptor.java
@@ -161,7 +161,7 @@ public static ModuleDescriptor transformInstance(ModuleDescriptor md, Namespace
 	private String _status = StatusManager.getCurrent().getDefaultStatus();
 	private Date _publicationDate;
 	private Date _resolvedPublicationDate;
-	private List _dependencies = new ArrayList();
+	private List _dependencies = new ArrayList(); // List (DependencyDescriptor)
 	private Map _configurations = new LinkedHashMap(); // Map(String conf -> Configuration)
     private Map _artifactsByConf = new HashMap(); // Map (String conf -> Collection(Artifact))
     private Collection _artifacts = new LinkedHashSet(); // Collection(Artifact) // all artifacts could also be found in the artifactsByConf map, but here we can preserve the order
diff --git a/test/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParserTest.java b/test/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParserTest.java
index af71fbfba..fb308d5c4 100644
--- a/test/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParserTest.java
+++ b/test/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParserTest.java
@@ -627,7 +627,7 @@ public void testImportConfigurationsWithMappingOverride() throws Exception {
         
         // confs dep1: conf1->A;conf2->B (mappingoverride = true)
         DependencyDescriptor dd = getDependency(dependencies, "mymodule1");
-        assertEquals(Arrays.asList(new String[] {"conf2", "conf1"}), Arrays.asList(dd.getModuleConfigurations()));
+        assertEquals(Arrays.asList(new String[] {"conf1", "conf2"}), Arrays.asList(dd.getModuleConfigurations()));
         assertEquals(Arrays.asList(new String[] {"A"}), Arrays.asList(dd.getDependencyConfigurations("conf1"))); 
         assertEquals(Arrays.asList(new String[] {"B"}), Arrays.asList(dd.getDependencyConfigurations("conf2")));  
         
@@ -654,7 +654,7 @@ public void testImportConfigurationsWithWildcardAndMappingOverride() throws Exce
         
         // confs dep2: extra->extra;all-public->all-public (mappingoverride = true)
         dd = getDependency(dependencies, "mymodule2");
-        assertEquals(Arrays.asList(new String[] {"all-public", "extra"}), Arrays.asList(dd.getModuleConfigurations()));
+        assertEquals(Arrays.asList(new String[] {"extra", "all-public"}), Arrays.asList(dd.getModuleConfigurations()));
         assertEquals(Arrays.asList(new String[] {"extra"}), Arrays.asList(dd.getDependencyConfigurations("extra")));  
         assertEquals(Arrays.asList(new String[] {"all-public"}), Arrays.asList(dd.getDependencyConfigurations("all-public")));  
     }
diff --git a/test/java/org/apache/ivy/plugins/parser/xml/test-write-full.xml b/test/java/org/apache/ivy/plugins/parser/xml/test-write-full.xml
index b9412cfb6..359f0620f 100644
--- a/test/java/org/apache/ivy/plugins/parser/xml/test-write-full.xml
+++ b/test/java/org/apache/ivy/plugins/parser/xml/test-write-full.xml
@@ -25,21 +25,21 @@
 		<dependency org="yourorg" name="yourmodule1" rev="1.1" conf="myconf1->myconf1"/>
 		<dependency org="yourorg" name="yourmodule2" rev="2+" conf="myconf1->yourconf1"/>
 		<dependency org="yourorg" name="yourmodule3" rev="3.1" conf="myconf1->yourconf1,yourconf2"/>
-		<dependency org="yourorg" name="yourmodule4" rev="4.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1,yourconf2"/>
-		<dependency org="yourorg" name="yourmodule5" rev="5.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
-		<dependency org="yourorg" name="yourmodule6" rev="latest.integration" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
-		<dependency org="yourorg" name="yourmodule7" rev="7.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
+		<dependency org="yourorg" name="yourmodule4" rev="4.1" conf="myconf1->yourconf1,yourconf2;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule5" rev="5.1" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule6" rev="latest.integration" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule7" rev="7.1" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
 		<dependency org="yourorg" name="yourmodule8" rev="8.1" conf="*->*">
-			<artifact name="yourartifact8-2" type="jar" ext="jar"/>
 			<artifact name="yourartifact8-1" type="jar" ext="jar"/>
+			<artifact name="yourartifact8-2" type="jar" ext="jar"/>
 		</dependency>
-		<dependency org="yourorg" name="yourmodule9" rev="9.1" conf="myconf2->default;myconf3->default;myconf1->default">
+		<dependency org="yourorg" name="yourmodule9" rev="9.1" conf="myconf1->default;myconf2->default;myconf3->default">
 			<artifact name="yourartifact9-1" type="jar" ext="jar" conf="myconf1,myconf2"/>
 			<artifact name="yourartifact9-2" type="jar" ext="jar" conf="myconf2,myconf3"/>
 		</dependency>
 		<dependency org="yourorg" name="yourmodule10" rev="10.1" conf="*->*">
-			<include name="*" type="*" ext="xml"/>
 			<include name="your.*" type="jar" ext="jar"/>
+			<include name="*" type="*" ext="xml"/>
 			<exclude org="*" module="*" name="toexclude" type="*" ext="*"/>
 		</dependency>
 		<dependency org="yourorg" name="yourmodule11" rev="11.1" conf="*->*"/>
