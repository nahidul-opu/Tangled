From bec3eaa55584966aeab7ad00cb16b07656b82553 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 14 Jul 2016 13:46:19 +0000
Subject: [PATCH] NET-597 FTP fails to parse listings for Solaris 10 FTPd in
 Japanese

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1752661 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../net/ftp/parser/UnixFTPEntryParser.java    | 35 +++++++++--
 .../ftp/parser/UnixFTPEntryParserTest.java    | 59 ++++++++++++++++++-
 3 files changed, 91 insertions(+), 6 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 33eeea31b..0b9fda938 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -64,6 +64,9 @@ The <action> type attribute can be add,update,fix,remove.
 
     <body>
         <release version="3.6" date="TBA" description="">
+            <action issue="NET-597" type="fix" dev="sebb" due-to="Hiroki Taniura">
+            FTP fails to parse listings for Solaris 10 FTPd in Japanese
+            </action>
             <action issue="NET-599" type="update" dev="sebb">
             Add shorthand FTPClientConfig constructor
             </action>
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
index 5cc4e1958..3e70ebd17 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
@@ -45,6 +45,17 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
     static final String NUMERIC_DATE_FORMAT
         = "yyyy-MM-dd HH:mm"; //2001-11-09 20:06
 
+    // Suffixes used in Japanese listings after the numeric values
+    private static final String JA_MONTH = "\u6708";
+    private static final String JA_DAY   = "\u65e5";
+    private static final String JA_YEAR  = "\u5e74";
+
+    private static final String DEFAULT_DATE_FORMAT_JA
+        = "M'" + JA_MONTH + "' d'" + JA_DAY + "' yyyy'" + JA_YEAR + "'"; //6月 3日 2003年
+
+    private static final String DEFAULT_RECENT_DATE_FORMAT_JA
+        = "M'" + JA_MONTH + "' d'" + JA_DAY + "' HH:mm"; //8月 17日 20:10
+
     /**
      * Some Linux distributions are now shipping an FTP server which formats
      * file listing dates in an all-numeric format:
@@ -111,16 +122,24 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
          *   [d]d MMM
          *   N.B. use non-space for MMM to allow for languages such as German which use
          *   diacritics (e.g. umlaut) in some abbreviations.
+         *   Japanese uses numeric day and month with suffixes to distinguish them
+         *   [d]dXX [d]dZZ
         */
-        + "((?:\\d+[-/]\\d+[-/]\\d+)|(?:\\S{3}\\s+\\d{1,2})|(?:\\d{1,2}\\s+\\S{3}))"
+        + "("+
+            "(?:\\d+[-/]\\d+[-/]\\d+)" + // yyyy-mm-dd
+            "|(?:\\S{3}\\s+\\d{1,2})" +  // MMM [d]d
+            "|(?:\\d{1,2}\\s+\\S{3})" + // [d]d MMM
+            "|(?:\\d{1,2}" + JA_MONTH + "\\s+\\d{1,2}" + JA_DAY + ")"+
+           ")"
 
         + "\\s+" // separator
 
         /*
            year (for non-recent standard format) - yyyy
            or time (for numeric or recent standard format) [h]h:mm
+           or Japanese year - yyyyXX
         */
-        + "(\\d+(?::\\d+)?)" // (20)
+        + "((?:\\d+(?::\\d+)?)|(?:\\d{4}" + JA_YEAR + "))" // (20)
 
         + "\\s" // separator
 
@@ -228,7 +247,14 @@ public FTPFile parseFTPEntry(String entry) {
 
             try
             {
-                file.setTimestamp(super.parseTimestamp(datestr));
+                if (group(19).contains(JA_MONTH)) { // special processing for Japanese format
+                    FTPTimestampParserImpl jaParser = new FTPTimestampParserImpl();
+                    jaParser.configure(new FTPClientConfig(
+                            FTPClientConfig.SYST_UNIX, DEFAULT_DATE_FORMAT_JA, DEFAULT_RECENT_DATE_FORMAT_JA));
+                    file.setTimestamp(jaParser.parseTimestamp(datestr));
+                } else {
+                    file.setTimestamp(super.parseTimestamp(datestr));
+                }
             }
             catch (ParseException e)
             {
@@ -347,8 +373,7 @@ protected FTPClientConfig getDefaultConfiguration() {
         return new FTPClientConfig(
                 FTPClientConfig.SYST_UNIX,
                 DEFAULT_DATE_FORMAT,
-                DEFAULT_RECENT_DATE_FORMAT,
-                null, null, null);
+                DEFAULT_RECENT_DATE_FORMAT);
     }
 
 }
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
index 338a5eee2..68b8bec8f 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
@@ -76,8 +76,12 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
             "crw-------   1 root     sys      109,767 Jul  2  2004 pci@1c,600000:devctl", //Solaris device
             "-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img", // NET-294
 
+            // http://mail-archives.apache.org/mod_mbox/commons-dev/200408.mbox/%3c4122F3C1.9090402@tanukisoftware.com%3e
+            "-rw-r--r-- 1 1 3518644 May 25 12:12 std",
+            "-rw-rw---- 1 ep1adm sapsys 0 6\u6708 3\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv",
+            "-rw-rw---- 1 ep1adm sapsys 0 8\u6708 17\u65e5 20:10 caerrinf",
 
-        };
+    };
 
     public UnixFTPEntryParserTest(String name) {
         super(name);
@@ -325,6 +329,59 @@ public void testParseFieldsOnFile() throws Exception {
         assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
     }
 
+    // http://mail-archives.apache.org/mod_mbox/commons-dev/200408.mbox/%3c4122F3C1.9090402@tanukisoftware.com%3e
+    public void testParseFieldsOnFileJapaneseTime() throws Exception
+    {
+        FTPFile f = getParser().parseFTPEntry("-rwxr-xr-x 2 user group 4096 3\u6708 2\u65e5 15:13 zxbox");
+        assertNotNull("Could not parse entry.", f);
+        assertTrue("Should have been a file.", f.isFile());
+        checkPermissions(f);
+        assertEquals(2, f.getHardLinkCount());
+        assertEquals("user", f.getUser());
+        assertEquals("group", f.getGroup());
+        assertEquals("zxbox", f.getName());
+        assertEquals(4096, f.getSize());
+
+        assertNotNull("Timestamp not null", f.getTimestamp());
+        Calendar cal = Calendar.getInstance();
+        cal.set(Calendar.MONTH, Calendar.MARCH);
+        cal.set(Calendar.DATE,1);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
+        cal.set(Calendar.MINUTE, 0);
+        cal.set(Calendar.SECOND, 0);
+        if (f.getTimestamp().getTime().before(cal.getTime())) {
+            cal.add(Calendar.YEAR, -1);
+        }
+        cal.set(Calendar.DATE,2);
+        cal.set(Calendar.HOUR_OF_DAY, 15);
+        cal.set(Calendar.MINUTE, 13);
+        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+    }
+
+ // http://mail-archives.apache.org/mod_mbox/commons-dev/200408.mbox/%3c4122F3C1.9090402@tanukisoftware.com%3e
+    public void testParseFieldsOnFileJapaneseYear() throws Exception {
+        FTPFile f = getParser().parseFTPEntry(
+                "-rwxr-xr-x 2 user group 4096 3\u6708 2\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv");
+        assertNotNull("Could not parse entry.", f);
+        assertTrue("Should have been a file.", f.isFile());
+        checkPermissions(f);
+        assertEquals(2, f.getHardLinkCount());
+        assertEquals("user", f.getUser());
+        assertEquals("group", f.getGroup());
+        assertEquals("\u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv", f.getName());
+        assertEquals(4096, f.getSize());
+
+        assertNotNull("Timestamp not null", f.getTimestamp());
+        Calendar cal = Calendar.getInstance();
+        cal.set(Calendar.YEAR, 2003);
+        cal.set(Calendar.MONTH, Calendar.MARCH);
+        cal.set(Calendar.DATE, 2);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
+        cal.set(Calendar.MINUTE, 0);
+        cal.set(Calendar.SECOND, 0);
+        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+    }
+
     @Override
     protected void doAdditionalGoodTests(String test, FTPFile f) {
         String link = f.getLink();
