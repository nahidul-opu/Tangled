From 64443cc75f7e10ba91788c53befb0411a8c122a4 Mon Sep 17 00:00:00 2001
From: Renato Marroquin <renatomarroquin@public-docking-cx-1760.ethz.ch>
Date: Wed, 25 Jun 2014 19:17:32 +0200
Subject: [PATCH] GORA-348

---
 .../apache/gora/cassandra/store/CassandraClient.java   | 10 +++++++++-
 .../org/apache/gora/mapreduce/GoraRecordReader.java    |  4 +++-
 2 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/gora-cassandra/src/main/java/org/apache/gora/cassandra/store/CassandraClient.java b/gora-cassandra/src/main/java/org/apache/gora/cassandra/store/CassandraClient.java
index 416c017f2..7d5ebd244 100644
--- a/gora-cassandra/src/main/java/org/apache/gora/cassandra/store/CassandraClient.java
+++ b/gora-cassandra/src/main/java/org/apache/gora/cassandra/store/CassandraClient.java
@@ -46,12 +46,15 @@
 import me.prettyprint.hector.api.HConsistencyLevel;
 import me.prettyprint.hector.api.Serializer;
 
+import org.apache.avro.Schema;
+import org.apache.avro.Schema.Type;
 import org.apache.avro.generic.GenericArray;
 import org.apache.gora.cassandra.query.CassandraQuery;
 import org.apache.gora.cassandra.serializers.GoraSerializerTypeInferer;
 import org.apache.gora.mapreduce.GoraRecordReader;
 import org.apache.gora.persistency.impl.PersistentBase;
 import org.apache.gora.query.Query;
+import org.apache.gora.store.DataStore;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -444,6 +447,7 @@ private String getMappingColumn(String pField){
    */
   public Map<String, List<String>> getFamilyMap(Query<K, T> query) {
     Map<String, List<String>> map = new HashMap<String, List<String>>();
+    Schema persistentSchema = query.getDataStore().newPersistent().getSchema();
     for (String field: query.getFields()) {
       String family = this.getMappingFamily(field);
       String column = this.getMappingColumn(field);
@@ -454,6 +458,8 @@ public Map<String, List<String>> getFamilyMap(Query<K, T> query) {
         list = new ArrayList<String>();
         map.put(family, list);
       }
+      if (persistentSchema.getField(field).schema().getType() == Type.UNION)
+        list.add(column + CassandraStore.UNION_COL_SUFIX);
       if (column != null) {
         list.add(column);
       }
@@ -480,10 +486,12 @@ public CassandraMapping getCassandraMapping(){
    */
   public Map<String, String> getReverseMap(Query<K, T> query) {
     Map<String, String> map = new HashMap<String, String>();
+    Schema persistentSchema = query.getDataStore().newPersistent().getSchema();
     for (String field: query.getFields()) {
       String family = this.getMappingFamily(field);
       String column = this.getMappingColumn(field);
-      
+      if (persistentSchema.getField(field).schema().getType() == Type.UNION)
+        map.put(family + ":" + column + CassandraStore.UNION_COL_SUFIX, field + CassandraStore.UNION_COL_SUFIX);
       map.put(family + ":" + column, field);
     }
     
diff --git a/gora-core/src/main/java/org/apache/gora/mapreduce/GoraRecordReader.java b/gora-core/src/main/java/org/apache/gora/mapreduce/GoraRecordReader.java
index fe0c51e17..f7c1abb20 100644
--- a/gora-core/src/main/java/org/apache/gora/mapreduce/GoraRecordReader.java
+++ b/gora-core/src/main/java/org/apache/gora/mapreduce/GoraRecordReader.java
@@ -119,7 +119,9 @@ public boolean nextKeyValue() throws IOException, InterruptedException {
 	    return this.result.next();
 	  }
 	  catch(Exception e){
-		return false;
+	    LOG.error("Error reading Gora records");
+	    e.printStackTrace();
+	    return false;
 	  }
   }
 
