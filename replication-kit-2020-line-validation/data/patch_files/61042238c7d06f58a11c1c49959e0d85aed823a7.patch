From 61042238c7d06f58a11c1c49959e0d85aed823a7 Mon Sep 17 00:00:00 2001
From: Colm O hEigeartaigh <coheigea@apache.org>
Date: Wed, 9 Nov 2016 11:15:45 +0000
Subject: [PATCH] SANTUARIO-459 - Wrong usage of Integer.MAX_VALUE

git-svn-id: https://svn.apache.org/repos/asf/santuario/xml-security-java/branches/2.0.x-fixes@1768910 13f79535-47bb-0310-9956-ffa450edef68
---
 .../utils/UnsyncByteArrayOutputStream.java        | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/apache/xml/security/utils/UnsyncByteArrayOutputStream.java b/src/main/java/org/apache/xml/security/utils/UnsyncByteArrayOutputStream.java
index 2ff7074761..73a9e35f76 100644
--- a/src/main/java/org/apache/xml/security/utils/UnsyncByteArrayOutputStream.java
+++ b/src/main/java/org/apache/xml/security/utils/UnsyncByteArrayOutputStream.java
@@ -27,6 +27,9 @@
  */
 public class UnsyncByteArrayOutputStream extends OutputStream  {	
 
+    // Maximum array size. Using same value as ArrayList in OpenJDK. 
+    // Integer.MAX_VALUE doesn't work on some VMs, as some header values are reserved
+    private static final int VM_ARRAY_INDEX_MAX_VALUE = Integer.MAX_VALUE - 8;
     private static final int INITIAL_SIZE = 8192;
 
     private byte[] buf;
@@ -38,7 +41,7 @@ public UnsyncByteArrayOutputStream() {
     }
 
     public void write(byte[] arg0) {
-        if ((Integer.MAX_VALUE - pos) < arg0.length) {
+        if ((VM_ARRAY_INDEX_MAX_VALUE - pos) < arg0.length) {
             throw new OutOfMemoryError();
         }
         int newPos = pos + arg0.length;
@@ -50,7 +53,7 @@ public void write(byte[] arg0) {
     }
 
     public void write(byte[] arg0, int arg1, int arg2) {
-        if ((Integer.MAX_VALUE - pos) < arg2) {
+        if ((VM_ARRAY_INDEX_MAX_VALUE - pos) < arg2) {
             throw new OutOfMemoryError();
         }
         int newPos = pos + arg2;
@@ -62,7 +65,7 @@ public void write(byte[] arg0, int arg1, int arg2) {
     }
 
     public void write(int arg0) {
-        if (Integer.MAX_VALUE - pos == 0) {
+        if (VM_ARRAY_INDEX_MAX_VALUE - pos == 0) {
             throw new OutOfMemoryError();
         }
         int newPos = pos + 1;
@@ -81,14 +84,14 @@ public byte[] toByteArray() {
     public void reset() {
         pos = 0;
     }
-
+    
     private void expandSize(int newPos) {
         int newSize = size;
         while (newPos > newSize) {
             newSize = newSize << 1;
             // Deal with overflow
             if (newSize < 0) {
-                newSize = Integer.MAX_VALUE;
+                newSize = VM_ARRAY_INDEX_MAX_VALUE;
             }
         }
         byte newBuf[] = new byte[newSize];
@@ -96,4 +99,4 @@ private void expandSize(int newPos) {
         buf = newBuf;
         size = newSize;
     }
-}
+}
\ No newline at end of file
