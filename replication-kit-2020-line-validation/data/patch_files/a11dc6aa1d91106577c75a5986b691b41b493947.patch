From a11dc6aa1d91106577c75a5986b691b41b493947 Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Sun, 18 Jul 2010 07:43:15 +0000
Subject: [PATCH] Applying Mark Shead's patch to COLLECTIONS-359. The
 intersection method was not handling duplicates correctly.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@965173 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/collections/ListUtils.java |  4 +++-
 .../apache/commons/collections/TestListUtils.java | 15 +++++++++++++++
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/src/java/org/apache/commons/collections/ListUtils.java b/src/java/org/apache/commons/collections/ListUtils.java
index 7f570c1d7e..c9197d237e 100644
--- a/src/java/org/apache/commons/collections/ListUtils.java
+++ b/src/java/org/apache/commons/collections/ListUtils.java
@@ -70,10 +70,12 @@ public ListUtils() {
      */
     public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2) {
         final List<E> result = new ArrayList<E>();
+        final ArrayList<E> copyOfList1 = new ArrayList<E>(list1);
 
         for (E e : list2) {
-            if (list1.contains(e)) {
+            if (copyOfList1.contains(e)) {
                 result.add(e);
+                copyOfList1.remove(e);
             }
         }
         return result;
diff --git a/src/test/org/apache/commons/collections/TestListUtils.java b/src/test/org/apache/commons/collections/TestListUtils.java
index da36236d02..27117a8879 100644
--- a/src/test/org/apache/commons/collections/TestListUtils.java
+++ b/src/test/org/apache/commons/collections/TestListUtils.java
@@ -110,6 +110,21 @@ public void testIntersectListWithSelf() {
         assertEquals(fullList, ListUtils.intersection(fullList, fullList));
     }
 
+    /**
+     * Tests intersecting two lists in different orders.
+     */
+    public void testIntersectionOrderInsensitivity() {
+		List one = new ArrayList();
+		List two = new ArrayList();
+		one.add("a");
+		one.add("b");
+		two.add("a");
+		two.add("a");
+		two.add("b");
+		two.add("b");
+		assertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two, one));
+    }
+
     public void testPredicatedList() {
         Predicate<Object> predicate = new Predicate<Object>() {
             public boolean evaluate(Object o) {
