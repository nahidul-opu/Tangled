From 38ecb80ecd565c3f95796e9b23ca3532a56e3e52 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Thu, 14 Jun 2007 19:36:46 +0000
Subject: [PATCH] FIX: Ivy does not work on Turkish machines (IVY-65)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/core/trunk@547374 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                                | 1 +
 build.xml                                                  | 5 +++++
 src/java/org/apache/ivy/ant/IvyTask.java                   | 3 ++-
 .../apache/ivy/plugins/latest/LatestRevisionStrategy.java  | 7 ++++---
 .../plugins/repository/ssh/AbstractSshBasedRepository.java | 3 ++-
 .../org/apache/ivy/plugins/repository/ssh/SshCache.java    | 3 ++-
 src/java/org/apache/ivy/util/ChecksumHelper.java           | 5 +++--
 src/java/org/apache/ivy/util/StringUtils.java              | 6 ++++--
 src/java/org/apache/ivy/util/url/ApacheURLLister.java      | 3 ++-
 test/java/org/apache/ivy/ant/AntBuildTriggerTest.java      | 4 ++++
 10 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index 0a2eb3751..708e78142 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -57,6 +57,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Remove @author tags (thanks to Stephane Bailliez)
 - IMPROVEMENT: Remove use of deprecated elements in ivysettings.xml (IVY-505) (with contribution from Jan Materne)
 
+- FIX: Ivy does not work on Turkish machines (IVY-65)
 - FIX: Ivy does not handle multiple version dependencies in maven2 poms correctly (IVY-494)
 - FIX: pom parser doesn't necessarily processes all important information (IVY-524)
 - FIX: <info> element of Ivy file in cache is not updated when using namespaces (IVY-516)
diff --git a/build.xml b/build.xml
index 77b8fb6c9..4f2230719 100644
--- a/build.xml
+++ b/build.xml
@@ -380,6 +380,11 @@
         	</classpath>
             <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
             <jvmarg value="-Demma.coverage.out.merge=true" />
+        	
+        	<!-- Added this to test IVY-65 -->
+            <jvmarg value="-Duser.region=TR" />
+            <jvmarg value="-Duser.language=tr" />
+        	
 			<formatter type="xml"/>
 			<batchtest todir="${test.xml.dir}">
     		    <fileset refid="test.fileset" />
diff --git a/src/java/org/apache/ivy/ant/IvyTask.java b/src/java/org/apache/ivy/ant/IvyTask.java
index 1ee76c26c..26f43b2d6 100644
--- a/src/java/org/apache/ivy/ant/IvyTask.java
+++ b/src/java/org/apache/ivy/ant/IvyTask.java
@@ -20,6 +20,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 
 import org.apache.ivy.Ivy;
 import org.apache.ivy.core.IvyContext;
@@ -194,7 +195,7 @@ protected String mergeConfs(String[] conf) {
 
     protected Date getPubDate(String date, Date def) {
         if (date != null) {
-            if ("now".equalsIgnoreCase(date)) {
+            if ("now".equals(date.toLowerCase(Locale.US))) {
                 return new Date();
             }
             try {
diff --git a/src/java/org/apache/ivy/plugins/latest/LatestRevisionStrategy.java b/src/java/org/apache/ivy/plugins/latest/LatestRevisionStrategy.java
index ec7acc7df..d9a6ad87d 100644
--- a/src/java/org/apache/ivy/plugins/latest/LatestRevisionStrategy.java
+++ b/src/java/org/apache/ivy/plugins/latest/LatestRevisionStrategy.java
@@ -19,6 +19,7 @@
 
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 import org.apache.ivy.core.IvyContext;
@@ -100,8 +101,8 @@ public int compare(Object o1, Object o2) {
                 }
                 // both are strings, we compare them taking into account special meaning
                 Map specialMeanings = getSpecialMeanings();
-                Integer sm1 = (Integer) specialMeanings.get(parts1[i].toLowerCase());
-                Integer sm2 = (Integer) specialMeanings.get(parts2[i].toLowerCase());
+                Integer sm1 = (Integer) specialMeanings.get(parts1[i].toLowerCase(Locale.US));
+                Integer sm2 = (Integer) specialMeanings.get(parts2[i].toLowerCase(Locale.US));
                 if (sm1 != null) {
                     sm2 = sm2 == null ? new Integer(0) : sm2;
                     return sm1.compareTo(sm2);
@@ -171,7 +172,7 @@ public LatestRevisionStrategy() {
 
     public void addConfiguredSpecialMeaning(SpecialMeaning meaning) {
         meaning.validate();
-        getSpecialMeanings().put(meaning.getName().toLowerCase(), meaning.getValue());
+        getSpecialMeanings().put(meaning.getName().toLowerCase(Locale.US), meaning.getValue());
     }
 
     public synchronized Map getSpecialMeanings() {
diff --git a/src/java/org/apache/ivy/plugins/repository/ssh/AbstractSshBasedRepository.java b/src/java/org/apache/ivy/plugins/repository/ssh/AbstractSshBasedRepository.java
index da0e00123..99dcb4508 100644
--- a/src/java/org/apache/ivy/plugins/repository/ssh/AbstractSshBasedRepository.java
+++ b/src/java/org/apache/ivy/plugins/repository/ssh/AbstractSshBasedRepository.java
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.Locale;
 
 import org.apache.ivy.plugins.repository.AbstractRepository;
 import org.apache.ivy.util.Message;
@@ -91,7 +92,7 @@ protected Session getSession(String pathOrUri) throws IOException {
     private URI parseURI(String source) {
         try {
             URI uri = new URI(source);
-            if (uri.getScheme() != null && !uri.getScheme().equalsIgnoreCase(getRepositoryScheme()))
+            if (uri.getScheme() != null && !uri.getScheme().toLowerCase(Locale.US).equals(getRepositoryScheme().toLowerCase(Locale.US)))
                 throw new URISyntaxException(source, "Wrong scheme in URI. Expected "
                         + getRepositoryScheme() + " as scheme!");
             if (uri.getHost() == null && getHost() == null)
diff --git a/src/java/org/apache/ivy/plugins/repository/ssh/SshCache.java b/src/java/org/apache/ivy/plugins/repository/ssh/SshCache.java
index f34fa2f5c..89564b675 100644
--- a/src/java/org/apache/ivy/plugins/repository/ssh/SshCache.java
+++ b/src/java/org/apache/ivy/plugins/repository/ssh/SshCache.java
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 import org.apache.ivy.core.IvyContext;
@@ -176,7 +177,7 @@ private static String createCacheKey(String user, String host, int port) {
         String portToUse = "22";
         if (port != -1 && port != 22)
             portToUse = Integer.toString(port);
-        return user.toLowerCase().trim() + "@" + host.toLowerCase().trim() + ":" + portToUse;
+        return user.toLowerCase(Locale.US).trim() + "@" + host.toLowerCase(Locale.US).trim() + ":" + portToUse;
     }
 
     /**
diff --git a/src/java/org/apache/ivy/util/ChecksumHelper.java b/src/java/org/apache/ivy/util/ChecksumHelper.java
index ccca27a24..75078efc4 100644
--- a/src/java/org/apache/ivy/util/ChecksumHelper.java
+++ b/src/java/org/apache/ivy/util/ChecksumHelper.java
@@ -26,6 +26,7 @@
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 public class ChecksumHelper {
@@ -51,7 +52,7 @@ public class ChecksumHelper {
      */
     public static void check(File dest, File checksumFile, String algorithm) throws IOException {
         String csFileContent = FileUtil.readEntirely(
-            new BufferedReader(new FileReader(checksumFile))).trim().toLowerCase();
+            new BufferedReader(new FileReader(checksumFile))).trim().toLowerCase(Locale.US);
         String expected;
         int spaceIndex = csFileContent.indexOf(' ');
         if (spaceIndex != -1) {
@@ -60,7 +61,7 @@ public static void check(File dest, File checksumFile, String algorithm) throws
             expected = csFileContent;
         }
 
-        String computed = computeAsString(dest, algorithm).trim().toLowerCase();
+        String computed = computeAsString(dest, algorithm).trim().toLowerCase(Locale.US);
         if (!expected.equals(computed)) {
             throw new IOException("invalid " + algorithm + ": expected=" + expected + " computed="
                     + computed);
diff --git a/src/java/org/apache/ivy/util/StringUtils.java b/src/java/org/apache/ivy/util/StringUtils.java
index 047622996..d16ba8d41 100644
--- a/src/java/org/apache/ivy/util/StringUtils.java
+++ b/src/java/org/apache/ivy/util/StringUtils.java
@@ -17,6 +17,8 @@
  */
 package org.apache.ivy.util;
 
+import java.util.Locale;
+
 /**
  * Convenient class used only for uncapitalization Usually use commons lang but here we do not want
  * to have such a dependency for only one feature
@@ -27,9 +29,9 @@ public static String uncapitalize(String string) {
             return string;
         }
         if (string.length() == 1) {
-            return string.toLowerCase();
+            return string.toLowerCase(Locale.US);
         }
-        return string.substring(0, 1).toLowerCase() + string.substring(1);
+        return string.substring(0, 1).toLowerCase(Locale.US) + string.substring(1);
     }
 
     /**
diff --git a/src/java/org/apache/ivy/util/url/ApacheURLLister.java b/src/java/org/apache/ivy/util/url/ApacheURLLister.java
index 726f0e01b..7f58d8e3f 100644
--- a/src/java/org/apache/ivy/util/url/ApacheURLLister.java
+++ b/src/java/org/apache/ivy/util/url/ApacheURLLister.java
@@ -23,6 +23,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -137,7 +138,7 @@ public List retrieveListing(URL url, boolean includeFiles, boolean includeDirect
             int dotIndex = text.indexOf('.');
 
             if (((dotIndex != -1) && !href.startsWith(text.substring(0, dotIndex)))
-                    || ((dotIndex == -1) && !href.equalsIgnoreCase(text))) {
+                    || ((dotIndex == -1) && !href.toLowerCase(Locale.US).equals(text.toLowerCase(Locale.US)))) {
                 // the href and the text do not "match"
                 continue;
             }
diff --git a/test/java/org/apache/ivy/ant/AntBuildTriggerTest.java b/test/java/org/apache/ivy/ant/AntBuildTriggerTest.java
index 50a9fcbb6..82f88383c 100644
--- a/test/java/org/apache/ivy/ant/AntBuildTriggerTest.java
+++ b/test/java/org/apache/ivy/ant/AntBuildTriggerTest.java
@@ -18,6 +18,7 @@
 package org.apache.ivy.ant;
 
 import java.io.File;
+import java.util.Locale;
 
 import junit.framework.TestCase;
 
@@ -26,6 +27,9 @@
 import org.apache.ivy.util.FileUtil;
 
 public class AntBuildTriggerTest extends TestCase {
+    public void testLocale() {
+        assertEquals(Locale.getDefault().getCountry(), "TR");
+    }
     public void test() throws Exception {
         assertFalse(new File("test/triggers/ant-build/A/A.jar").exists());
 
