From 0d7777b3a9549cf48a7c29bb26f5f8b537897d28 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Sun, 25 Oct 2009 21:44:16 +0000
Subject: [PATCH] FIX: <override> ignored in dynamic resolve mode (IVY-1131)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@829662 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../apache/ivy/core/resolve/ResolveData.java  | 16 +++---
 .../apache/ivy/core/resolve/ResolveTest.java  | 50 ++++++++++++++++++-
 .../1/org2/mod2.1/ivys/ivy-0.6.xml            | 34 +++++++++++++
 4 files changed, 94 insertions(+), 7 deletions(-)
 create mode 100644 test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index 5c4aed6c1..d6dbd06a1 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -97,6 +97,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - IMPROVEMENT: Trace a message when a property file referenced from the settings doesn't exixts (IVY-1074)
 - IMPROVEMENT: use defaultconf in combination with defaultconfmapping (IVY-1135) (thanks to Jon Schneider)
 
+- FIX: <override> ignored in dynamic resolve mode (IVY-1131)
 - FIX: IvyNodeEviction.cleanEvicted has bad comparison logic (IVY-1118)
 - FIX: ChainResolver doesn't pass the specified 'checkmodified' attribute to the cache (IVY-1133)
 - FIX: Ivy couldn't handle maven POMs that depend on theirselves
diff --git a/src/java/org/apache/ivy/core/resolve/ResolveData.java b/src/java/org/apache/ivy/core/resolve/ResolveData.java
index 4cb0c9948..1effed2d7 100644
--- a/src/java/org/apache/ivy/core/resolve/ResolveData.java
+++ b/src/java/org/apache/ivy/core/resolve/ResolveData.java
@@ -214,10 +214,12 @@ public boolean isBlacklisted(String rootModuleConf, ModuleRevisionId mrid) {
 
 
     public DependencyDescriptor mediate(DependencyDescriptor dd) {
+        DependencyDescriptor originalDD = dd;
+        dd = getEngine().mediate(dd, getOptions());
+        
         VisitNode current = getCurrentVisitNode();
         if (current != null) {
             // mediating dd through dependers stack
-            DependencyDescriptor originalDD = dd;
             List dependers = new ArrayList(current.getPath());
             // the returned path contains the currently visited node, we are only interested in
             // the dependers, so we remove the currently visted node from the end
@@ -231,12 +233,14 @@ public DependencyDescriptor mediate(DependencyDescriptor dd) {
                     dd = md.mediate(dd);
                 }
             }
-            if (originalDD != dd) {
-                Message.verbose("dependency descriptor has been mediated: " 
-                    + originalDD + " => " + dd);
-            }
         }
-        return getEngine().mediate(dd, getOptions());
+        
+        if (originalDD != dd) {
+            Message.verbose("dependency descriptor has been mediated: " 
+                + originalDD + " => " + dd);
+        }
+
+        return dd;
     }
 
     /**
diff --git a/test/java/org/apache/ivy/core/resolve/ResolveTest.java b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
index babdd8af1..51e34fa5d 100644
--- a/test/java/org/apache/ivy/core/resolve/ResolveTest.java
+++ b/test/java/org/apache/ivy/core/resolve/ResolveTest.java
@@ -1654,6 +1654,55 @@ public void testResolveTransitiveDependencies() throws Exception {
         assertTrue(getArchiveFileInCache("org1", "mod1.2", "2.0", "mod1.2", "jar", "jar").exists());
     }
 
+    public void testResolveTransitiveDependenciesWithOverride() throws Exception {
+        // mod2.1 depends on mod1.1 which depends on mod1.2
+        ResolveReport report = ivy.resolve(new File(
+                "test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml").toURL(),
+            getResolveOptions(new String[] {"*"}));
+        assertNotNull(report);
+        ModuleDescriptor md = report.getModuleDescriptor();
+        assertNotNull(md);
+        ModuleRevisionId mrid = ModuleRevisionId.newInstance("org2", "mod2.1", "0.6");
+        assertEquals(mrid, md.getModuleRevisionId());
+
+        assertTrue(getResolvedIvyFileInCache(mrid).exists());
+
+        // dependencies
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org1", "mod1.1", "1.0")).exists());
+        assertTrue(getArchiveFileInCache("org1", "mod1.1", "1.0", "mod1.1", "jar", "jar").exists());
+
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org1", "mod1.2", "1.0")).exists());
+        assertTrue(getArchiveFileInCache("org1", "mod1.2", "1.0", "mod1.2", "jar", "jar").exists());
+    }
+
+    /**
+     * Testcase for IVY-1131.
+     */
+    public void testResolveTransitiveDependenciesWithOverrideAndDynamicResolveMode() throws Exception {
+        // mod2.1 depends on mod1.1 which depends on mod1.2
+        ResolveReport report = ivy.resolve(new File(
+                "test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml").toURL(),
+            getResolveOptions(new String[] {"*"}).setResolveMode(ResolveOptions.RESOLVEMODE_DYNAMIC));
+        assertNotNull(report);
+        ModuleDescriptor md = report.getModuleDescriptor();
+        assertNotNull(md);
+        ModuleRevisionId mrid = ModuleRevisionId.newInstance("org2", "mod2.1", "0.6");
+        assertEquals(mrid, md.getModuleRevisionId());
+
+        assertTrue(getResolvedIvyFileInCache(mrid).exists());
+
+        // dependencies
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org1", "mod1.1", "1.0")).exists());
+        assertTrue(getArchiveFileInCache("org1", "mod1.1", "1.0", "mod1.1", "jar", "jar").exists());
+
+        assertTrue(getIvyFileInCache(
+            ModuleRevisionId.newInstance("org1", "mod1.2", "1.0")).exists());
+        assertTrue(getArchiveFileInCache("org1", "mod1.2", "1.0", "mod1.2", "jar", "jar").exists());
+    }
+
     public void testResolveTransitiveDisabled() throws Exception {
         // mod2.1 depends on mod1.1 which depends on mod1.2
         ResolveReport report = ivy.resolve(new File(
@@ -4828,5 +4877,4 @@ private ResolveOptions getResolveOptions(String[] confs) {
     private ResolveOptions getResolveOptions(IvySettings settings, String[] confs) {
         return new ResolveOptions().setConfs(confs);
     }
-
 }
diff --git a/test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml b/test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml
new file mode 100644
index 000000000..fa42a4cb5
--- /dev/null
+++ b/test/repositories/1/org2/mod2.1/ivys/ivy-0.6.xml
@@ -0,0 +1,34 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
+<ivy-module version="1.0">
+    <info organisation="org2"
+           module="mod2.1"
+           revision="0.6"
+           status="integration"
+           publication="20041101110000"
+    />
+    <publications>
+        <artifact name="art21A" type="jar"/>
+        <artifact name="art21B" type="jar"/>
+    </publications>
+    <dependencies>
+        <dependency org="org1" name="mod1.1" rev="1.0"/>
+        <override org="org1" module="mod1.2" rev="1.0"/>
+    </dependencies>
+</ivy-module>
