From ae548ab3347924d1047b38c44fa9725a746511bc Mon Sep 17 00:00:00 2001
From: "Bruno P. Kinoshita" <brunodepaulak@yahoo.com.br>
Date: Mon, 20 Nov 2017 21:50:30 +1300
Subject: [PATCH] IMAGING-205: increase offset by 1 when odd

---
 src/changes/changes.xml                       |  3 +++
 .../tiff/write/TiffImageWriterLossless.java   |  9 ++++++-
 .../exif/WriteExifMetadataExampleTest.java    | 25 +++++++++++++++++--
 3 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ba38b44f5..8ec312f57 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -46,6 +46,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
     <release version="1.0" date="TBA" description="First major release">
+      <action issue="IMAGING-205" dev="kinow" type="fix">
+        Imaging (Apache Sanselan) produces "odd offsets" in (EXIF) metadata
+      </action>
       <action issue="IMAGING-195" dev="britter" type="fix" due-to="Keith Strydom">
         Incorrect Maven coordinates on project website
       </action>
diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java
index 0347fb424..43c7f17c4 100644
--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java
+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java
@@ -241,10 +241,17 @@ private long updateOffsetsStep(final List<TiffElement> analysis,
             }
             if (null == bestFit) {
                 // we couldn't place this item. overflow.
+                if ((overflowIndex & 1l) != 0) {
+                    overflowIndex += 1;
+                }
                 outputItem.setOffset(overflowIndex);
                 overflowIndex += outputItemLength;
             } else {
-                outputItem.setOffset(bestFit.offset);
+                long offset = bestFit.offset;
+                if ((offset & 1l) != 0) {
+                    offset += 1;
+                }
+                outputItem.setOffset(offset);
                 unusedElements.remove(bestFit);
 
                 if (bestFit.length > outputItemLength) {
diff --git a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/WriteExifMetadataExampleTest.java b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/WriteExifMetadataExampleTest.java
index 5cd48f2ee..0756eec5e 100644
--- a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/WriteExifMetadataExampleTest.java
+++ b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/WriteExifMetadataExampleTest.java
@@ -17,10 +17,16 @@
 
 package org.apache.commons.imaging.formats.jpeg.exif;
 
+import static org.junit.Assert.assertTrue;
+
 import java.io.File;
 import java.util.Collection;
 
+import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
 import org.apache.commons.imaging.examples.WriteExifMetadataExample;
+import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
+import org.apache.commons.imaging.formats.tiff.TiffField;
+import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;
 import org.apache.commons.imaging.util.Debug;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -40,8 +46,12 @@ public WriteExifMetadataExampleTest(final File imageFile) {
         this.imageFile = imageFile;
     }
 
+    /**
+     * Test that there are no odd offsets in the generated TIFF images.
+     * @throws Exception if the test failed for a unexpected reason
+     */
     @Test
-    public void testInsert() throws Exception {
+    public void testOddOffsets() throws Exception {
         Debug.debug("imageFile", imageFile.getAbsoluteFile());
 
         final File tempFile = createTempFile("test", ".jpg");
@@ -53,7 +63,18 @@ public void testInsert() throws Exception {
                 return;
             }
             new WriteExifMetadataExample().changeExifMetadata(imageFile, tempFile);
-            // TODO assert that ExifMetadata has been changed
+            JpegImageParser parser = new JpegImageParser();
+            ByteSourceFile byteSource = new ByteSourceFile(tempFile);
+            TiffImageMetadata tiff = parser.getExifMetadata(byteSource, null);
+            for (TiffField tiffField : tiff.getAllFields()) {
+                if (!tiffField.isLocalValue()) {
+                    int offset = tiffField.getOffset();
+                    String tag = tiffField.getTagName();
+                    String message = String.format("Odd offset %d, field %s", offset, tag);
+                    boolean isOdd = (tiffField.getOffset() & 1l) == 0;
+                    assertTrue(message, isOdd);
+                }
+            }
         } catch (final ExifRewriter.ExifOverflowException e) {
             Debug.debug("Ignoring unavoidable ExifOverflowException: " + e.getMessage());
             Debug.debug("Error image: " + imageFile.getAbsoluteFile());
