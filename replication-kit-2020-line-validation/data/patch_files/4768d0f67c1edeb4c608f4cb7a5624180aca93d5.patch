From 4768d0f67c1edeb4c608f4cb7a5624180aca93d5 Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Tue, 4 Dec 2007 03:21:47 +0000
Subject: [PATCH] SCXML-54 Events from custom actions missing payload Initial
 version of testcases thanks to Mike Tillberg <mtillberg at comcast dot net>

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/scxml/trunk@600774 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/scxml/SCXMLExecutor.java   | 24 +++----
 .../scxml/custom-hello-world-04-el.xml        | 43 +++++++++++++
 .../scxml/custom-hello-world-04-jexl.xml      | 61 ++++++++++++++++++
 .../commons/scxml/model/CustomActionTest.java | 64 ++++++++++++++++++-
 .../org/apache/commons/scxml/model/Hello.java |  6 +-
 5 files changed, 184 insertions(+), 14 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/scxml/custom-hello-world-04-el.xml
 create mode 100644 src/test/java/org/apache/commons/scxml/custom-hello-world-04-jexl.xml

diff --git a/src/main/java/org/apache/commons/scxml/SCXMLExecutor.java b/src/main/java/org/apache/commons/scxml/SCXMLExecutor.java
index 2488d6f18..2d010976e 100644
--- a/src/main/java/org/apache/commons/scxml/SCXMLExecutor.java
+++ b/src/main/java/org/apache/commons/scxml/SCXMLExecutor.java
@@ -548,19 +548,21 @@ private Object[] setEventData(final TriggerEvent[] evts) {
         Context rootCtx = scInstance.getRootContext();
         Object[] oldData = {rootCtx.get(EVENT_DATA),
             rootCtx.get(EVENT_DATA_MAP)};
-        Object eventData = null;
-        Map payloadMap = new HashMap();
         int len = evts.length;
-        for (int i = 0; i < len; i++) {
-            TriggerEvent te = evts[i];
-            payloadMap.put(te.getName(), te.getPayload());
-        }
-        if (len == 1) {
-            // we have only one event
-            eventData = evts[0].getPayload();
+        if (len > 0) { // 0 has retry semantics (eg: see usage in reset())
+            Object eventData = null;
+            Map payloadMap = new HashMap();
+            for (int i = 0; i < len; i++) {
+                TriggerEvent te = evts[i];
+                payloadMap.put(te.getName(), te.getPayload());
+            }
+            if (len == 1) {
+                // we have only one event
+                eventData = evts[0].getPayload();
+            }
+            rootCtx.setLocal(EVENT_DATA, eventData);
+            rootCtx.setLocal(EVENT_DATA_MAP, payloadMap);
         }
-        rootCtx.setLocal(EVENT_DATA, eventData);
-        rootCtx.setLocal(EVENT_DATA_MAP, payloadMap);
         return oldData;
     }
 
diff --git a/src/test/java/org/apache/commons/scxml/custom-hello-world-04-el.xml b/src/test/java/org/apache/commons/scxml/custom-hello-world-04-el.xml
new file mode 100644
index 000000000..a76b154ff
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/custom-hello-world-04-el.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<!-- Used for CustomActionTest.java in model package -->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       xmlns:my="http://my.custom-actions.domain/CUSTOM"
+       version="1.0" initialstate="init">
+    <datamodel>
+        <data name="helloName1" />
+    </datamodel>
+
+    <state id="init">        
+        <onentry>
+            <my:hello name="custom04" />
+        </onentry>
+
+        <transition event="helloevent" target="middle1">
+            <assign name="helloName1" expr="${_eventdatamap.helloevent}" />
+        </transition>
+    </state>
+
+    <state id="middle1">
+        <transition target="custom" cond="${helloName1 eq 'custom04'}" />
+    </state>
+
+    <state id="custom" final="true"/>
+
+</scxml>
+
diff --git a/src/test/java/org/apache/commons/scxml/custom-hello-world-04-jexl.xml b/src/test/java/org/apache/commons/scxml/custom-hello-world-04-jexl.xml
new file mode 100644
index 000000000..a2e79306e
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/custom-hello-world-04-jexl.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<!-- Used for CustomActionTest.java in model package -->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       xmlns:my="http://my.custom-actions.domain/CUSTOM"
+       version="1.0" initialstate="init">
+    <datamodel>
+        <data name="helloName1" />
+    </datamodel>
+
+    <state id="init">        
+        <onentry>
+            <my:hello name="custom04a" />
+        </onentry>
+
+        <transition event="helloevent" target="middle1">
+            <assign name="helloName1" expr="_eventdatamap['helloevent']" />
+        </transition>
+    </state>
+
+    <state id="middle1">
+        <transition target="custom1" cond="helloName1 eq 'custom04a'" />
+    </state>
+
+    <state id="custom1">
+        <transition event="custom.next" target="custom2"/>
+    </state>
+
+    <state id="custom2">        
+        <onentry>
+            <my:hello name="custom04b" />
+        </onentry>
+
+        <transition event="helloevent" target="custom3">
+            <assign name="helloName1" expr="_eventdatamap.helloevent" />
+        </transition>
+    </state>
+
+    <state id="custom3">
+        <transition target="end" cond="helloName1 eq 'custom04b'" />
+    </state>
+
+    <state id="end" final="true"/>
+
+</scxml>
+
diff --git a/src/test/java/org/apache/commons/scxml/model/CustomActionTest.java b/src/test/java/org/apache/commons/scxml/model/CustomActionTest.java
index 95fa02b27..491e54cd9 100644
--- a/src/test/java/org/apache/commons/scxml/model/CustomActionTest.java
+++ b/src/test/java/org/apache/commons/scxml/model/CustomActionTest.java
@@ -26,6 +26,7 @@
 
 import org.apache.commons.scxml.SCXMLExecutor;
 import org.apache.commons.scxml.SCXMLTestHelper;
+import org.apache.commons.scxml.env.jsp.ELEvaluator;
 
 public class CustomActionTest extends TestCase {
 
@@ -42,7 +43,7 @@ public static void main(String args[]) {
         junit.textui.TestRunner.main(testCaseName);
     }
 
-    private URL hello01, custom01, external01, override01;
+    private URL hello01, custom01, external01, override01, payload01, payload02;
     private SCXMLExecutor exec;
 
     /**
@@ -57,13 +58,17 @@ public void setUp() {
             getResource("org/apache/commons/scxml/external-hello-world.xml");
         override01 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/custom-hello-world-03.xml");
+        payload01 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/custom-hello-world-04-jexl.xml");
+        payload02 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/custom-hello-world-04-el.xml");
     }
 
     /**
      * Tear down instance variables required by this test case.
      */
     public void tearDown() {
-        hello01 = custom01 = external01 = null;
+        hello01 = custom01 = external01 = payload01 = payload02 = null;
         exec = null;
     }
 
@@ -212,5 +217,60 @@ public void testCustomActionCallbacks() {
         assertEquals(5, Hello.callbacks);
     }
 
+    // Hello World example using custom <my:hello> action that generates an
+    // event which has the payload examined with JEXL expressions
+    public void testCustomActionEventPayloadHelloWorldJexl() {
+        // (1) Form a list of custom actions defined in the SCXML
+        //     document (and any included documents via "src" attributes)
+        CustomAction ca =
+            new CustomAction("http://my.custom-actions.domain/CUSTOM",
+                             "hello", Hello.class);
+        List customActions = new ArrayList();
+        customActions.add(ca);
+        // (2) Parse the document with a custom digester.
+        SCXML scxml = SCXMLTestHelper.digest(payload01, customActions);
+        // (3) Get a SCXMLExecutor
+        exec = SCXMLTestHelper.getExecutor(scxml);
+        // (4) Single, final state
+        assertEquals("Invalid intermediate state",
+                     "custom1", ((State) exec.getCurrentStatus().getStates().
+                                iterator().next()).getId());
+        // (5) Verify datamodel variable is correct
+        assertEquals("Missing helloName1 in root context", "custom04a",
+                     (String) exec.getRootContext().get("helloName1"));
+        // (6) Check use of payload in non-initial state
+        SCXMLTestHelper.fireEvent(exec, "custom.next");
+        // (7) Verify correct end state
+        assertEquals("Missing helloName1 in root context", "custom04b",
+                (String) exec.getRootContext().get("helloName1"));
+        assertEquals("Invalid final state",
+                "end", ((State) exec.getCurrentStatus().getStates().
+                iterator().next()).getId());
+        assertTrue(exec.getCurrentStatus().isFinal());
+    }
+
+    // Hello World example using custom <my:hello> action that generates an
+    // event which has the payload examined with EL expressions
+    public void testCustomActionEventPayloadHelloWorldEL() {
+        // (1) Form a list of custom actions defined in the SCXML
+        //     document (and any included documents via "src" attributes)
+        CustomAction ca =
+            new CustomAction("http://my.custom-actions.domain/CUSTOM",
+                             "hello", Hello.class);
+        List customActions = new ArrayList();
+        customActions.add(ca);
+        // (2) Parse the document with a custom digester.
+        SCXML scxml = SCXMLTestHelper.digest(payload02, customActions);
+        // (3) Get a SCXMLExecutor
+        exec = SCXMLTestHelper.getExecutor(new ELEvaluator(), scxml);
+        // (4) Single, final state
+        assertEquals("Invalid final state",
+                     "custom", ((State) exec.getCurrentStatus().getStates().
+                                iterator().next()).getId());
+        // (5) Verify datamodel variable is correct
+        assertEquals("Missing helloName1 in root context", "custom04",
+                     (String) exec.getRootContext().get("helloName1"));
+    }
+
 }
 
diff --git a/src/test/java/org/apache/commons/scxml/model/Hello.java b/src/test/java/org/apache/commons/scxml/model/Hello.java
index 6d8686232..c64f64c65 100644
--- a/src/test/java/org/apache/commons/scxml/model/Hello.java
+++ b/src/test/java/org/apache/commons/scxml/model/Hello.java
@@ -23,7 +23,7 @@
 import org.apache.commons.scxml.EventDispatcher;
 import org.apache.commons.scxml.SCInstance;
 import org.apache.commons.scxml.SCXMLExpressionException;
-import org.apache.commons.scxml.model.Action;
+import org.apache.commons.scxml.TriggerEvent;
 
 /**
  * Our custom &quot;hello world&quot; action.
@@ -70,6 +70,10 @@ public void execute(final EventDispatcher evtDispatcher,
         if (appLog.isInfoEnabled()) {
             appLog.info("Hello " + name);
         }
+        // For derived events payload testing
+        TriggerEvent event =
+            new TriggerEvent("helloevent", TriggerEvent.SIGNAL_EVENT, name);
+        derivedEvents.add(event);
         callbacks++;
     }
 }
