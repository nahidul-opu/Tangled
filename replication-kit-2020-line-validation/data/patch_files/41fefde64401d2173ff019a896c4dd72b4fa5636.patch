From 41fefde64401d2173ff019a896c4dd72b4fa5636 Mon Sep 17 00:00:00 2001
From: Jaikiran Pai <jaikiran@apache.org>
Date: Tue, 25 Jul 2017 11:28:01 +0530
Subject: [PATCH] IVY-1336 Use our own implementation of AuthFilter in the test
 case

---
 test/java/org/apache/ivy/TestHelper.java | 51 +++++++++++++++++++++++-
 1 file changed, 50 insertions(+), 1 deletion(-)

diff --git a/test/java/org/apache/ivy/TestHelper.java b/test/java/org/apache/ivy/TestHelper.java
index ebd632a10..2cf71591b 100644
--- a/test/java/org/apache/ivy/TestHelper.java
+++ b/test/java/org/apache/ivy/TestHelper.java
@@ -18,7 +18,9 @@
 package org.apache.ivy;
 
 import com.sun.net.httpserver.BasicAuthenticator;
+import com.sun.net.httpserver.Filter;
 import com.sun.net.httpserver.HttpContext;
+import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpServer;
 import org.apache.ivy.core.cache.DefaultRepositoryCacheManager;
 import org.apache.ivy.core.event.EventManager;
@@ -40,10 +42,11 @@
 import org.apache.tools.ant.DefaultLogger;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.taskdefs.Delete;
-import sun.net.httpserver.AuthFilter;
+
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
 import java.lang.reflect.Field;
 import java.net.Authenticator;
 import java.net.InetSocketAddress;
@@ -461,4 +464,50 @@ public void close() throws Exception {
         };
     }
 
+    private static final class AuthFilter extends Filter {
+
+        private final com.sun.net.httpserver.Authenticator authenticator;
+
+        AuthFilter(final com.sun.net.httpserver.Authenticator authenticator) {
+            this.authenticator = authenticator;
+        }
+
+        @Override
+        public void doFilter(final HttpExchange httpExchange, final Chain chain) throws IOException {
+            if (authenticator == null) {
+                chain.doFilter(httpExchange);
+                return;
+            }
+            final com.sun.net.httpserver.Authenticator.Result authResult = this.authenticator.authenticate(httpExchange);
+            if(authResult instanceof com.sun.net.httpserver.Authenticator.Success) {
+                final com.sun.net.httpserver.Authenticator.Success success = (com.sun.net.httpserver.Authenticator.Success)authResult;
+                // auth succeeded - move to next filter
+                chain.doFilter(httpExchange);
+            } else if(authResult instanceof com.sun.net.httpserver.Authenticator.Retry) {
+                final com.sun.net.httpserver.Authenticator.Retry retry = (com.sun.net.httpserver.Authenticator.Retry)authResult;
+                this.drainInput(httpExchange);
+                // send auth retry (401)
+                httpExchange.sendResponseHeaders(retry.getResponseCode(), -1L);
+            } else if(authResult instanceof com.sun.net.httpserver.Authenticator.Failure) {
+                final com.sun.net.httpserver.Authenticator.Failure var7 = (com.sun.net.httpserver.Authenticator.Failure)authResult;
+                this.drainInput(httpExchange);
+                // send auth failure (401)
+                httpExchange.sendResponseHeaders(var7.getResponseCode(), -1L);
+            }
+        }
+
+        private void drainInput(final HttpExchange httpExchange) throws IOException {
+            try (final InputStream is = httpExchange.getRequestBody()) {
+                final byte[] content = new byte[1024];
+                while (is.read(content) != -1) {
+                    // ignore the content
+                }
+            }
+        }
+
+        @Override
+        public String description() {
+            return "AuthFilter";
+        }
+    }
 }
