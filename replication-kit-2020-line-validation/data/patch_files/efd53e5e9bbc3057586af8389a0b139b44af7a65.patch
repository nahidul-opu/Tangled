From efd53e5e9bbc3057586af8389a0b139b44af7a65 Mon Sep 17 00:00:00 2001
From: Benedikt Ritter <britter@apache.org>
Date: Mon, 18 May 2015 19:26:07 +0000
Subject: [PATCH] IMAGING-171: MicrosoftTagTest rewrite image exif fails in
 some environments. This also closes #17 from github. Thanks to Jan Helbich.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/imaging/trunk@1680075 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +++
 .../formats/jpeg/exif/MicrosoftTagTest.java   | 27 ++++++++++++++-----
 2 files changed, 24 insertions(+), 6 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index fb9a3db5f..0c0a6b846 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -46,6 +46,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
     <release version="1.0" date="TBA" description="TBA">
+      <action issue="IMAGING-171" dev="britter" type="fix" due-to="Jan Helbich">
+        MicrosoftTagTest rewrite image exif fails in some environments
+      </action>
       <action issue="IMAGING-169" dev="britter" type="fix" due-to="Nebu Pookins">
         PnmImageParser throws NumberFormatException instead of ImageReadException when parsing invalid images
       </action>
diff --git a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
index 4c3dd7b0d..2901f43f3 100644
--- a/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
+++ b/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java
@@ -16,11 +16,13 @@
  */
 package org.apache.commons.imaging.formats.jpeg.exif;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 
@@ -29,9 +31,9 @@
 import org.apache.commons.imaging.ImagingConstants;
 import org.apache.commons.imaging.common.ImageMetadata;
 import org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;
+import org.apache.commons.imaging.formats.tiff.TiffDirectory;
 import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;
 import org.apache.commons.imaging.formats.tiff.constants.MicrosoftTagConstants;
-import org.apache.commons.imaging.formats.tiff.constants.TiffConstants;
 import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
 import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
 import org.junit.Test;
@@ -85,9 +87,22 @@ public void testRewrite() throws Exception {
     
     private void checkFields(final byte[] file) throws Exception {
         final TiffImageMetadata metadata = toTiffMetadata(Imaging.getMetadata(file));
-        assertEquals(AUTHOR, metadata.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR));
-        assertEquals(COMMENT, metadata.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT));
-        assertEquals(SUBJECT, metadata.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT));
-        assertEquals(TITLE, metadata.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPTITLE));
+        
+        // field values may be duplicated between directories, we have to check all
+        List<Object> authorValues = new ArrayList<Object>();
+        List<Object> commentValues = new ArrayList<Object>();
+        List<Object> subjectValues = new ArrayList<Object>();
+        List<Object> titleValues = new ArrayList<Object>();
+        for (TiffDirectory d : metadata.contents.directories) {
+            titleValues.add(d.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPTITLE, false));
+            authorValues.add(d.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPAUTHOR, false));
+            commentValues.add(d.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPCOMMENT, false));
+            subjectValues.add(d.getFieldValue(MicrosoftTagConstants.EXIF_TAG_XPSUBJECT, false));
+        }
+        
+        assertTrue(authorValues.contains(AUTHOR));
+        assertTrue(commentValues.contains(COMMENT));
+        assertTrue(subjectValues.contains(SUBJECT));
+        assertTrue(titleValues.contains(TITLE));
     }
 }
