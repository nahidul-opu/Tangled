From 7705470ba1ca2bf95f6442f06f68f007f33a4aeb Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Fri, 26 Apr 2013 08:26:01 +0000
Subject: [PATCH] IO-279  Tailer erroneously considers file as new.         Fix
 to use file.lastModified() rather than System.currentTimeMillis()

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1476097 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                               | 4 ++++
 src/main/java/org/apache/commons/io/input/Tailer.java | 6 +++---
 2 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 36ff9ce776b..73d39453ebc 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -47,6 +47,10 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <!-- The release date is the date RC is cut -->
     <release version="2.5" date="2013-??-??" description="New features and bug fixes.">    
+      <action issue="IO-279" dev="sebb" type="fix">
+        Tailer erroneously considers file as new.
+        Fix to use file.lastModified() rather than System.currentTimeMillis()
+      </action>            
       <action issue="IO-356" dev="sebb" type="fix">
          CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size.
          Fix code so skip relates to the encoded bytes; reset now re-encodes the data up to the point of the mark
diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index fac1fc3f772..14d3e6015ff 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -363,7 +363,7 @@ public void run() {
                 } else {
                     // The current position in the file
                     position = end ? file.length() : 0;
-                    last = System.currentTimeMillis();
+                    last = file.lastModified();
                     reader.seek(position);
                 }
             }
@@ -400,7 +400,7 @@ public void run() {
                     if (length > position) {
                         // The file has more content than it did last time
                         position = readLines(reader);
-                        last = System.currentTimeMillis();
+                        last = file.lastModified();
                     } else if (newer) {
                         /*
                          * This can happen if the file is truncated or overwritten with the exact same length of
@@ -411,7 +411,7 @@ public void run() {
 
                         // Now we can read new lines
                         position = readLines(reader);
-                        last = System.currentTimeMillis();
+                        last = file.lastModified();
                     }
                 }
                 if (reOpen) {
