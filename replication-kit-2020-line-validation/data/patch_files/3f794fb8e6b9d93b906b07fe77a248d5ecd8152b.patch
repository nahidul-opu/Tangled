From 3f794fb8e6b9d93b906b07fe77a248d5ecd8152b Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Sat, 13 Apr 2013 14:45:15 +0000
Subject: [PATCH] [CONFIGURATION-540] MapConfiguration now uses a passed in
 Properties object directly as its data store rather than copying it.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1467644 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  7 +++++
 .../configuration/MapConfiguration.java       | 31 +++++++++----------
 .../TestSystemConfiguration.java              | 13 ++++++++
 3 files changed, 34 insertions(+), 17 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 48534d37fe..4df09b5654 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,13 @@
   <body>
     <release version="2.0" date="in SVN"
       description="TBD">
+      <action dev="oheger" type="update" issue="CONFIGURATION-540">
+        MapConfiguration now directly uses a Properties object passed to its
+        constructor as data store rather than copying it. This allows
+        SystemConfiguration to be connected to system properties; i.e.
+        changing a property through SystemConfiguration immediately affects
+        the corresponding system property.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-539">
         The deprectated INIConfiguration class was removed.
         HierarchicalINIConfiguration was renamed to INIConfiguration.
diff --git a/src/main/java/org/apache/commons/configuration/MapConfiguration.java b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
index dbffc1476d..6b0dd8b4fa 100644
--- a/src/main/java/org/apache/commons/configuration/MapConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
@@ -18,7 +18,6 @@
 package org.apache.commons.configuration;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -108,15 +107,16 @@ public MapConfiguration(Map<String, Object> map)
     }
 
     /**
-     * Creates a new instance of {@code MapConfiguration} and initializes its
-     * content from the specified {@code Properties} object. The resulting
-     * configuration is not connected to the {@code Properties} object, but all
-     * keys which are strings are copied (keys of other types are ignored).
+     * Creates a new instance of {@code MapConfiguration} which uses the
+     * specified {@code Properties} object as its data store. All changes of
+     * this configuration affect the given {@code Properties} object and
+     * vice versa. Note that while {@code Properties} actually
+     * implements {@code Map<Object, Object>}, we expect it to contain only
+     * string keys. Other key types will lead to {@code ClassCastException}
+     * exceptions on certain methods.
      *
      * @param props the {@code Properties} object defining the content of this
      *        configuration
-     * @throws NullPointerException if the {@code Properties} object is
-     *         <b>null</b>
      * @since 1.8
      */
     public MapConfiguration(Properties props)
@@ -250,22 +250,19 @@ public Object clone()
     }
 
     /**
-     * Helper method for copying all string keys from the given
-     * {@code Properties} object to a newly created map.
+     * Helper method for converting the type of the {@code Properties} object
+     * to a supported map type. As stated by the comment of the constructor,
+     * we expect the {@code Properties} object to contain only String key;
+     * therefore, it is safe to do this cast.
      *
      * @param props the {@code Properties} to be copied
      * @return a newly created map with all string keys of the properties
      */
+    @SuppressWarnings("unchecked")
     private static Map<String, Object> convertPropertiesToMap(Properties props)
     {
-        Map<String, Object> map = new HashMap<String, Object>();
-        for (Map.Entry<Object, Object> e : props.entrySet())
-        {
-            if (e.getKey() instanceof String)
-            {
-                map.put((String) e.getKey(), e.getValue());
-            }
-        }
+        @SuppressWarnings("rawtypes")
+        Map map = props;
         return map;
     }
 }
diff --git a/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java b/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
index e6dcb788c4..ac23cffe1e 100644
--- a/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
@@ -78,4 +78,17 @@ public void testSetSystemPropertiesFromPropertiesFile()
         SystemConfiguration sconf = new SystemConfiguration();
         assertTrue("Property from file not found", sconf.getBoolean("fromFile"));
     }
+
+    /**
+     * Tests whether the configuration can be used to change system properties.
+     */
+    @Test
+    public void testChangeSystemProperties()
+    {
+        String testProperty = "someTest";
+        SystemConfiguration config = new SystemConfiguration();
+        config.setProperty(testProperty, "true");
+        assertEquals("System property not changed", "true",
+                System.getProperty(testProperty));
+    }
 }
