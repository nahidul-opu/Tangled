From 32004d3c308f0e8f280768b9966cca2272bc0aa3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Fri, 17 Jan 2014 19:23:10 +0000
Subject: [PATCH] OPENNLP-635 pluggable trainers can now be correctly
 classified as event or sequence

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1559228 13f79535-47bb-0310-9956-ffa450edef68
---
 .../java/opennlp/tools/ml/TrainerFactory.java | 50 +++++++++++++++----
 1 file changed, 40 insertions(+), 10 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/ml/TrainerFactory.java b/opennlp-tools/src/main/java/opennlp/tools/ml/TrainerFactory.java
index d9dc79195..0089c6360 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/ml/TrainerFactory.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/ml/TrainerFactory.java
@@ -43,23 +43,53 @@ public class TrainerFactory {
     BUILTIN_TRAINERS = Collections.unmodifiableMap(_trainers);
   }
 
-  public static boolean isSupportEvent(Map<String, String> trainParams) {
-    if (trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM) != null) {
-      if(EventTrainer.EVENT_VALUE.equals(trainParams
-            .get(AbstractTrainer.TRAINER_TYPE_PARAM))) {
-        return true;
+  private static String getPluggableTrainerType(String className) {
+    try {
+      Class<?> trainerClass = Class.forName(className);
+      if(trainerClass != null) {
+        
+        if (EventTrainer.class.isAssignableFrom(trainerClass)) {
+          return EventTrainer.EVENT_VALUE;
+        }
+        else if (SequenceTrainer.class.isAssignableFrom(trainerClass)) {
+          return SequenceTrainer.SEQUENCE_VALUE;
+        }
       }
-      return false;
-    } else {
-      return true; // default to event train
+    } catch (ClassNotFoundException e) {
+    }
+    
+    return "UNKOWN";
+  }
+  
+  public static boolean isSupportEvent(Map<String, String> trainParams) {
+    
+    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
+    
+    if (trainerType == null) {
+      trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
     }
+    
+    if (trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM) != null) {
+      return EventTrainer.EVENT_VALUE.equals(trainParams
+          .get(AbstractTrainer.TRAINER_TYPE_PARAM));
+    } 
+    
+    // default
+    return true;
   }
 
   public static boolean isSupportSequence(Map<String, String> trainParams) {
-    if (SequenceTrainer.SEQUENCE_VALUE.equals(trainParams
-        .get(AbstractTrainer.TRAINER_TYPE_PARAM))) {
+    
+    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
+    
+    if (trainerType == null) {
+      trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
+    }
+    
+    if (SequenceTrainer.SEQUENCE_VALUE.equals(trainerType)) {
       return true;
     }
+    
     return false;
   }
 
