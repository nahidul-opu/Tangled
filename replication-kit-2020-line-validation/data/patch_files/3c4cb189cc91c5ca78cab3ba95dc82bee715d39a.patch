From 3c4cb189cc91c5ca78cab3ba95dc82bee715d39a Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Wed, 2 May 2012 18:28:37 +0000
Subject: [PATCH] [MATH-781] use epsilon criteria when deciding to drop columns
 after phase 1.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1333146 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 ++++-
 .../optimization/linear/SimplexTableau.java   |  2 +-
 .../linear/SimplexSolverTest.java             | 19 +++++++++++++++++++
 3 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d60da4bae3..af7b938769 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,6 +52,9 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
+      <action dev="tn" type="fix" issue="MATH-781" due-to="Scheiber ErnÅ‘">
+        Use epsilon instead of ulp in floating-point comparison when dropping columns after phase 1 in SimplexSolver.
+      </action>
       <action dev="luc" type="fix" issue="MATH-721">
         Added a workaround for an OpenJDK issue on sparc solaris with too small constants.
       </action>
@@ -179,7 +182,7 @@ counterpart in either Math or StrictMath (cf. MATH-740).
         Broke up bloated "MathUtils" class into "MathArrays", "Precision",
         "ArithmeticUtils" classes.
       </action>
-      <action dev="psteitz" type="fix" issue="MATH-704" due-to="Thomas Niedhart">
+      <action dev="psteitz" type="fix" issue="MATH-704" due-to="Thomas Neidhart">
         Fixed array indexing error in Variance evaluate method for
         computing the weighted variance of an array segment.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index 9a6993a554..327b2ae65c 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -335,7 +335,7 @@ protected void dropPhase1Objective() {
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
                 columnsToDrop.add(i);
             }
         }
diff --git a/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
index 4b1a4b5c9c..ae4d706b36 100644
--- a/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
+++ b/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
@@ -29,6 +29,25 @@
 
 public class SimplexSolverTest {
 
+    @Test
+    public void testMath781() {
+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);
+
+        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
+        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));
+        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));
+        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));
+
+        double epsilon = 1e-6;
+        SimplexSolver solver = new SimplexSolver();
+        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
+
+        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);
+        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);
+        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);
+        Assert.assertEquals(2.0d, solution.getValue(), epsilon);
+    }
+
     @Test
     public void testMath713NegativeVariable() {
         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);
