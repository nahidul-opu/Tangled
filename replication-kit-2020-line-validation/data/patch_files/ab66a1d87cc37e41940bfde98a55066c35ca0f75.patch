From ab66a1d87cc37e41940bfde98a55066c35ca0f75 Mon Sep 17 00:00:00 2001
From: Henri Yandell <bayard@apache.org>
Date: Mon, 7 Sep 2009 17:56:30 +0000
Subject: [PATCH] Applying Boris' patch in LANG-481 to improve thread safety in
 the Range classes. The previous code's reuse of the hashCode variable for
 local operations means it is utterly non-thread-safe. Now uses a local
 variable so that the worst case should be the hashCode being calculated
 multiple times, but not ending up with different values.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@812236 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/lang/math/DoubleRange.java    | 12 +++++++-----
 .../org/apache/commons/lang/math/FloatRange.java     | 12 +++++++-----
 src/java/org/apache/commons/lang/math/IntRange.java  | 12 +++++++-----
 src/java/org/apache/commons/lang/math/LongRange.java | 12 +++++++-----
 .../org/apache/commons/lang/math/NumberRange.java    | 12 +++++++-----
 5 files changed, 35 insertions(+), 25 deletions(-)

diff --git a/src/java/org/apache/commons/lang/math/DoubleRange.java b/src/java/org/apache/commons/lang/math/DoubleRange.java
index 8c62075cd29..cafa2949cf0 100644
--- a/src/java/org/apache/commons/lang/math/DoubleRange.java
+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java
@@ -398,13 +398,15 @@ public boolean equals(Object obj) {
      */
     @Override
     public int hashCode() {
-        if (hashCode == 0) {
-            hashCode = 17;
-            hashCode = 37 * hashCode + getClass().hashCode();
+        int temp = hashCode;
+        if (temp == 0) {
+            temp = 17;
+            temp = 37 * temp + getClass().hashCode();
             long lng = Double.doubleToLongBits(min);
-            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));
+            temp = 37 * temp + ((int) (lng ^ (lng >> 32)));
             lng = Double.doubleToLongBits(max);
-            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));
+            temp = 37 * temp + ((int) (lng ^ (lng >> 32)));
+            hashCode = temp;
         }
         return hashCode;
     }
diff --git a/src/java/org/apache/commons/lang/math/FloatRange.java b/src/java/org/apache/commons/lang/math/FloatRange.java
index d22c7018e4f..4472aa62070 100644
--- a/src/java/org/apache/commons/lang/math/FloatRange.java
+++ b/src/java/org/apache/commons/lang/math/FloatRange.java
@@ -394,11 +394,13 @@ public boolean equals(Object obj) {
      */
     @Override
     public int hashCode() {
-        if (hashCode == 0) {
-            hashCode = 17;
-            hashCode = 37 * hashCode + getClass().hashCode();
-            hashCode = 37 * hashCode + Float.floatToIntBits(min);
-            hashCode = 37 * hashCode + Float.floatToIntBits(max);
+        int temp = hashCode;
+        if (temp == 0) {
+            temp = 17;
+            temp = 37 * temp + getClass().hashCode();
+            temp = 37 * temp + Float.floatToIntBits(min);
+            temp = 37 * temp + Float.floatToIntBits(max);
+            hashCode = temp;
         }
         return hashCode;
     }
diff --git a/src/java/org/apache/commons/lang/math/IntRange.java b/src/java/org/apache/commons/lang/math/IntRange.java
index fb5155d8dc9..e8b84ce658f 100644
--- a/src/java/org/apache/commons/lang/math/IntRange.java
+++ b/src/java/org/apache/commons/lang/math/IntRange.java
@@ -368,11 +368,13 @@ public boolean equals(Object obj) {
      */
     @Override
     public int hashCode() {
-        if (hashCode == 0) {
-            hashCode = 17;
-            hashCode = 37 * hashCode + getClass().hashCode();
-            hashCode = 37 * hashCode + min;
-            hashCode = 37 * hashCode + max;
+        int temp = hashCode;
+        if (temp == 0) {
+            temp = 17;
+            temp = 37 * temp + getClass().hashCode();
+            temp = 37 * temp + min;
+            temp = 37 * temp + max;
+            hashCode = temp;
         }
         return hashCode;
     }
diff --git a/src/java/org/apache/commons/lang/math/LongRange.java b/src/java/org/apache/commons/lang/math/LongRange.java
index 971351522d2..51bd6c778cb 100644
--- a/src/java/org/apache/commons/lang/math/LongRange.java
+++ b/src/java/org/apache/commons/lang/math/LongRange.java
@@ -381,11 +381,13 @@ public boolean equals(Object obj) {
      */
     @Override
     public int hashCode() {
-        if (hashCode == 0) {
-            hashCode = 17;
-            hashCode = 37 * hashCode + getClass().hashCode();
-            hashCode = 37 * hashCode + ((int) (min ^ (min >> 32)));
-            hashCode = 37 * hashCode + ((int) (max ^ (max >> 32)));
+        int temp = hashCode;
+        if (temp == 0) {
+            temp = 17;
+            temp = 37 * temp + getClass().hashCode();
+            temp = 37 * temp + ((int) (min ^ (min >> 32)));
+            temp = 37 * temp + ((int) (max ^ (max >> 32)));
+            hashCode = temp;
         }
         return hashCode;
     }
diff --git a/src/java/org/apache/commons/lang/math/NumberRange.java b/src/java/org/apache/commons/lang/math/NumberRange.java
index f74a00cd512..beff6f8f36a 100644
--- a/src/java/org/apache/commons/lang/math/NumberRange.java
+++ b/src/java/org/apache/commons/lang/math/NumberRange.java
@@ -215,11 +215,13 @@ public boolean equals(Object obj) {
      */
     @Override
     public int hashCode() {
-        if (hashCode == 0) {
-            hashCode = 17;
-            hashCode = 37 * hashCode + getClass().hashCode();
-            hashCode = 37 * hashCode + min.hashCode();
-            hashCode = 37 * hashCode + max.hashCode();
+        int temp = hashCode;
+        if (temp == 0) {
+            temp = 17;
+            temp = 37 * temp + getClass().hashCode();
+            temp = 37 * temp + min.hashCode();
+            temp = 37 * temp + max.hashCode();
+            hashCode = temp;
         }
         return hashCode;
     }
