From 4590f14e97beb6d10ffb7b5dd312c632af155ed3 Mon Sep 17 00:00:00 2001
From: Alex Levenson <alexlevenson@twitter.com>
Date: Wed, 17 Jun 2015 09:17:23 -0700
Subject: [PATCH] PARQUET-246: fix incomplete state reset in
 DeltaByteArrayWriter.reset()

...thod

Author: Alex Levenson <alexlevenson@twitter.com>
Author: Konstantin Shaposhnikov <Konstantin.Shaposhnikov@sc.com>
Author: kostya-sh <kostya-sh@users.noreply.github.com>

Closes #171 from kostya-sh/PARQUET-246 and squashes the following commits:

75950c5 [kostya-sh] Merge pull request #1 from isnotinvain/PR-171
a718309 [Konstantin Shaposhnikov] Merge remote-tracking branch 'refs/remotes/origin/master' into PARQUET-246
0367588 [Alex Levenson] Add regression test for PR-171
94e8fda [Alex Levenson] Merge branch 'master' into PR-171
0a9ac9f [Konstantin Shaposhnikov] [PARQUET-246] bugfix: reset all DeltaByteArrayWriter state in reset() method
---
 .../deltastrings/DeltaByteArrayWriter.java    |  1 +
 .../deltastrings/TestDeltaByteArray.java      | 39 ++++++++++++-------
 2 files changed, 25 insertions(+), 15 deletions(-)

diff --git a/parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java b/parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java
index 8c71d5d580..eb33d30156 100644
--- a/parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java
+++ b/parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java
@@ -66,6 +66,7 @@ public Encoding getEncoding() {
   public void reset() {
     prefixLengthWriter.reset();
     suffixWriter.reset();
+    previous = new byte[0];
   }
 
   @Override
diff --git a/parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java b/parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java
index 693557a580..b62ef8447f 100644
--- a/parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java
+++ b/parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java
@@ -34,29 +34,18 @@ public class TestDeltaByteArray {
   static String[] randvalues = Utils.getRandomStringSamples(10000, 32);
 
   @Test
-  public void testSerialization () throws IOException {
+  public void testSerialization () throws Exception {
     DeltaByteArrayWriter writer = new DeltaByteArrayWriter(64 * 1024, 64 * 1024);
     DeltaByteArrayReader reader = new DeltaByteArrayReader();
 
-    Utils.writeData(writer, values);
-    Binary[] bin = Utils.readData(reader, writer.getBytes().toByteArray(), values.length);
-
-    for(int i =0; i< bin.length ; i++) {
-      Assert.assertEquals(Binary.fromString(values[i]), bin[i]);
-    }
+    assertReadWrite(writer, reader, values);
   }
 
   @Test
-  public void testRandomStrings() throws IOException {
+  public void testRandomStrings() throws Exception {
     DeltaByteArrayWriter writer = new DeltaByteArrayWriter(64 * 1024, 64 * 1024);
     DeltaByteArrayReader reader = new DeltaByteArrayReader();
-
-    Utils.writeData(writer, randvalues);
-    Binary[] bin = Utils.readData(reader, writer.getBytes().toByteArray(), randvalues.length);
-
-    for(int i =0; i< bin.length ; i++) {
-      Assert.assertEquals(Binary.fromString(randvalues[i]), bin[i]);
-    }
+    assertReadWrite(writer, reader, randvalues);
   }
 
   @Test
@@ -81,4 +70,24 @@ public void testLengths() throws IOException {
     Assert.assertEquals(0, bin[1]);
     Assert.assertEquals(7, bin[2]);
   }
+
+  private void assertReadWrite(DeltaByteArrayWriter writer, DeltaByteArrayReader reader, String[] vals) throws Exception {
+    Utils.writeData(writer, vals);
+    Binary[] bin = Utils.readData(reader, writer.getBytes().toByteArray(), vals.length);
+
+    for(int i = 0; i< bin.length ; i++) {
+      Assert.assertEquals(Binary.fromString(vals[i]), bin[i]);
+    }
+  }
+
+  @Test
+  public void testWriterReset() throws Exception {
+    DeltaByteArrayWriter writer = new DeltaByteArrayWriter(64 * 1024, 64 * 1024);
+
+    assertReadWrite(writer, new DeltaByteArrayReader(), values);
+
+    writer.reset();
+
+    assertReadWrite(writer, new DeltaByteArrayReader(), values);
+  }
 }
