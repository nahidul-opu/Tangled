From 5cb0099a249f4609702e707d5846aec761cf49ca Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Sun, 29 Sep 2013 20:12:54 +0000
Subject: [PATCH] [CONFIGURATION-555] Fixed a problem with the handling of the
 xml:space attribute.

The attribute was only evaluated for sub elements, but not for the current
element. However, now there is a corner case of an element which only
contains sub elements and has the attribute set to "preserve". In this case,
a trim is done because it does not make sense to assign a value consisting
only of whitespace to this element.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1527396 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 ++
 .../configuration/XMLConfiguration.java       | 55 ++++++++++++-------
 .../configuration/TestXMLConfiguration.java   | 10 ++++
 src/test/resources/test.xml                   |  1 +
 4 files changed, 51 insertions(+), 20 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4cc6165bbf..e89a848bde 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,11 @@
   <body>
     <release version="2.0" date="in SVN"
       description="TBD">
+      <action dev="oheger" type="update" issue="CONFIGURATION-555">
+        Fixed a bug in the handling of the xml:space attribute in
+        XMLConfiguration. The attribute is now also applied to the current
+        element, not only to sub elements.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-554">
         BeanHelper is no longer a static utility class. Instances can be
         created with a specific configuration of bean factories. There is still
diff --git a/src/main/java/org/apache/commons/configuration/XMLConfiguration.java b/src/main/java/org/apache/commons/configuration/XMLConfiguration.java
index 6688a3b84c..577a856584 100644
--- a/src/main/java/org/apache/commons/configuration/XMLConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/XMLConfiguration.java
@@ -26,7 +26,6 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -53,6 +52,7 @@
 import org.apache.commons.configuration.resolver.EntityRegistry;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.logging.LogFactory;
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
@@ -544,10 +544,13 @@ public void initProperties(Document document, boolean elemRefs)
      *
      * @param node the actual node
      * @param element the actual XML element
-     * @param elemRefs a flag whether references to the XML elements should be set
-     * @param trim a flag whether the text content of elements should be trimmed;
-     * this controls the whitespace handling
-     * @return a map with all attribute values extracted for the current node
+     * @param elemRefs a flag whether references to the XML elements should be
+     *        set
+     * @param trim a flag whether the text content of elements should be
+     *        trimmed; this controls the whitespace handling
+     * @return a map with all attribute values extracted for the current node;
+     *         this map also contains the value of the trim flag for this node
+     *         under the key {@value #ATTR_SPACE}
      */
     private Map<String, String> constructHierarchy(ConfigurationNode node,
             Element element, boolean elemRefs, boolean trim)
@@ -555,6 +558,7 @@ private Map<String, String> constructHierarchy(ConfigurationNode node,
         boolean trimFlag = shouldTrim(element, trim);
         Map<String, String> attributes =
                 processAttributes(node, element, elemRefs);
+        attributes.put(ATTR_SPACE, String.valueOf(trimFlag));
         StringBuilder buffer = new StringBuilder();
         NodeList list = element.getChildNodes();
         for (int i = 0; i < list.getLength(); i++)
@@ -568,7 +572,8 @@ private Map<String, String> constructHierarchy(ConfigurationNode node,
                 Map<String, String> attrmap =
                         constructHierarchy(childNode, child, elemRefs, trimFlag);
                 node.addChild(childNode);
-                handleDelimiters(node, childNode, trimFlag, attrmap);
+                Boolean childTrim = Boolean.valueOf(attrmap.remove(ATTR_SPACE));
+                handleDelimiters(node, childNode, childTrim.booleanValue(), attrmap);
             }
             else if (w3cNode instanceof Text)
             {
@@ -577,11 +582,7 @@ else if (w3cNode instanceof Text)
             }
         }
 
-        String text = buffer.toString();
-        if (trimFlag)
-        {
-            text = text.trim();
-        }
+        String text = determineValue(node, buffer.toString(), trimFlag);
         if (text.length() > 0 || (!hasChildren(node) && node != getRootNode()))
         {
             node.setValue(text);
@@ -600,6 +601,28 @@ private static boolean hasChildren(ConfigurationNode node)
         return node.getChildrenCount() > 0 || node.getAttributeCount() > 0;
     }
 
+    /**
+     * Determines the value of a configuration node. This method mainly checks
+     * whether the text value is to be trimmed or not. This is normally defined
+     * by the trim flag. However, if the node has children and its content is
+     * only whitespace, then it makes no sense to store any value; this would
+     * only scramble layout when the configuration is saved again.
+     *
+     * @param node the current {@code ConfigurationNode}
+     * @param content the text content of this node
+     * @param trimFlag the trim flag
+     * @return the value to be stored for this node
+     */
+    private static String determineValue(ConfigurationNode node,
+            String content, boolean trimFlag)
+    {
+        boolean shouldTrim =
+                trimFlag
+                        || (StringUtils.isBlank(content) && node
+                                .getChildrenCount() > 0);
+        return shouldTrim ? content.trim() : content;
+    }
+
     /**
      * Helper method for constructing node objects for the attributes of the
      * given XML element.
@@ -613,15 +636,7 @@ private Map<String, String> processAttributes(ConfigurationNode node,
             Element element, boolean elemRefs)
     {
         NamedNodeMap attributes = element.getAttributes();
-        Map<String, String> attrmap;
-        if (attributes.getLength() > 0)
-        {
-            attrmap = new HashMap<String, String>();
-        }
-        else
-        {
-            attrmap = Collections.emptyMap();
-        }
+        Map<String, String> attrmap = new HashMap<String, String>();
 
         for (int i = 0; i < attributes.getLength(); ++i)
         {
diff --git a/src/test/java/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/java/org/apache/commons/configuration/TestXMLConfiguration.java
index 2ec15d24aa..b1c646db9a 100644
--- a/src/test/java/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -1431,6 +1431,16 @@ public void testPreserveSpace()
                 .getString("space.stars"));
     }
 
+    /**
+     * Tests whether the xml:space attribute works directly on the current
+     * element. This test is related to CONFIGURATION-555.
+     */
+    @Test
+    public void testPreserveSpaceOnElement()
+    {
+        assertEquals("Wrong value", " preserved ", conf.getString("spaceElement"));
+    }
+
     /**
      * Tests whether the xml:space attribute can be overridden in nested
      * elements.
diff --git a/src/test/resources/test.xml b/src/test/resources/test.xml
index a32192b67a..1f52464e36 100644
--- a/src/test/resources/test.xml
+++ b/src/test/resources/test.xml
@@ -115,4 +115,5 @@ And even longer.
       <description xml:space="default">     Some text      </description>
       <testInvalid xml:space="invalid">     Some other text </testInvalid>
     </space>
+    <spaceElement xml:space="preserve"> preserved </spaceElement>
 </testconfig>
