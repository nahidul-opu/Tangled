From 1d997e4fa296de5bfbdc218baabf4cbde0b5bbb8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Fri, 6 Mar 2015 14:57:37 +0000
Subject: [PATCH] OPENNLP-762 The beam size specified in the params is now
 written in the model and used in the POS Tagger

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1664645 13f79535-47bb-0310-9956-ffa450edef68
---
 .../java/opennlp/tools/postag/POSModel.java   |  6 ++-
 .../opennlp/tools/postag/POSTaggerME.java     | 38 ++++++++++++++++---
 2 files changed, 37 insertions(+), 7 deletions(-)

diff --git a/opennlp-tools/src/main/java/opennlp/tools/postag/POSModel.java b/opennlp-tools/src/main/java/opennlp/tools/postag/POSModel.java
index b8d5be979..9358582a6 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/postag/POSModel.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/postag/POSModel.java
@@ -29,7 +29,6 @@
 import opennlp.tools.ml.model.AbstractModel;
 import opennlp.tools.ml.model.MaxentModel;
 import opennlp.tools.ml.model.SequenceClassificationModel;
-import opennlp.tools.namefind.NameFinderME;
 import opennlp.tools.util.BaseToolFactory;
 import opennlp.tools.util.InvalidFormatException;
 import opennlp.tools.util.model.ArtifactSerializer;
@@ -96,6 +95,9 @@ public POSModel(String languageCode, MaxentModel posModel, int beamSize,
     if (posModel == null)
         throw new IllegalArgumentException("The maxentPosModel param must not be null!");
 
+    Properties manifest = (Properties) artifactMap.get(MANIFEST_ENTRY);
+    manifest.setProperty(BeamSearch.BEAM_SIZE_PARAMETER, Integer.toString(beamSize));
+    
     artifactMap.put(POS_MODEL_ENTRY_NAME, posModel);
     checkArtifactMap();
   }
@@ -155,7 +157,7 @@ public SequenceClassificationModel<String> getPosSequenceModel() {
     if (artifactMap.get(POS_MODEL_ENTRY_NAME) instanceof MaxentModel) {
       String beamSizeString = manifest.getProperty(BeamSearch.BEAM_SIZE_PARAMETER);
 
-      int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+      int beamSize = POSTaggerME.DEFAULT_BEAM_SIZE;
       if (beamSizeString != null) {
         beamSize = Integer.parseInt(beamSizeString);
       }
diff --git a/opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java b/opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java
index 0d1eae285..77bd70ce1 100644
--- a/opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java
+++ b/opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java
@@ -37,7 +37,6 @@
 import opennlp.tools.ml.model.Event;
 import opennlp.tools.ml.model.MaxentModel;
 import opennlp.tools.ml.model.SequenceClassificationModel;
-import opennlp.tools.namefind.NameFinderME;
 import opennlp.tools.ngram.NGramModel;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.Sequence;
@@ -56,6 +55,8 @@
  */
 public class POSTaggerME implements POSTagger {
 
+  public static final int DEFAULT_BEAM_SIZE = 3;
+  
   private POSModel modelPackage;
 
   /**
@@ -76,7 +77,6 @@ public class POSTaggerME implements POSTagger {
    */
   protected boolean useClosedClassTagsFilter = false;
 
-  public static final int DEFAULT_BEAM_SIZE = 3;
 
   /**
    * The size of the beam to be used in determining the best sequence of pos tags.
@@ -95,7 +95,10 @@ public class POSTaggerME implements POSTagger {
    *
    * @param model
    * @param beamSize
+   * 
+   * @deprecated the beam size should be specified in the params during training
    */
+  @Deprecated
   public POSTaggerME(POSModel model, int beamSize, int cacheSize) {
     POSTaggerFactory factory = model.getFactory();
 
@@ -124,7 +127,32 @@ public POSTaggerME(POSModel model, int beamSize, int cacheSize) {
    * @param model
    */
   public POSTaggerME(POSModel model) {
-    this(model, DEFAULT_BEAM_SIZE, 0);
+    POSTaggerFactory factory = model.getFactory();
+
+    int beamSize = POSTaggerME.DEFAULT_BEAM_SIZE;
+    
+    String beamSizeString = model.getManifestProperty(BeamSearch.BEAM_SIZE_PARAMETER);
+    
+    if (beamSizeString != null) {
+      beamSize = Integer.parseInt(beamSizeString);
+    }
+    
+    modelPackage = model;
+
+    contextGen = factory.getPOSContextGenerator(beamSize);
+    tagDictionary = factory.getTagDictionary();
+    size = beamSize;
+
+    sequenceValidator = factory.getSequenceValidator();
+
+    if (model.getPosSequenceModel() != null) {
+      this.model = model.getPosSequenceModel();
+    }
+    else {
+      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
+          model.getPosModel(), 0);
+    }
+
   }
 
   /**
@@ -274,7 +302,7 @@ public static POSModel train(String languageCode,
 
     String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
 
-    int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+    int beamSize = POSTaggerME.DEFAULT_BEAM_SIZE;
     if (beamSizeString != null) {
       beamSize = Integer.parseInt(beamSizeString);
     }
@@ -314,7 +342,7 @@ else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
     }
 
     if (posModel != null) {
-      return new POSModel(languageCode, posModel, manifestInfoEntries, posFactory);
+      return new POSModel(languageCode, posModel, beamSize, manifestInfoEntries, posFactory);
     }
     else {
       return new POSModel(languageCode, seqPosModel, manifestInfoEntries, posFactory);
