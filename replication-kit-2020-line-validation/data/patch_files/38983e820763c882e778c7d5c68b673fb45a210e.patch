From 38983e820763c882e778c7d5c68b673fb45a210e Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Tue, 25 Aug 2009 18:07:13 +0000
Subject: [PATCH] fixed an error induced by zero entries in simplex solver
 JIRA: MATH-288

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@807738 13f79535-47bb-0310-9956-ffa450edef68
---
 .../math/optimization/linear/SimplexSolver.java |  7 ++++---
 src/site/xdoc/changes.xml                       |  3 +++
 .../optimization/linear/SimplexSolverTest.java  | 17 ++++++++++++++++-
 3 files changed, 23 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
index 16d3baea1c..60a1b3ac59 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -77,9 +77,10 @@ private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {
-                double ratio = rhs / tableau.getEntry(i, col);
+            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+            final double entry = tableau.getEntry(i, col);
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
+                final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i; 
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index a48e1da074..a030011524 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,9 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.1" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-288" due-to="Benjamin McCann">
+        Fixed an error induced by entries set to 0
+      </action>
       <action dev="luc" type="fix" issue="MATH-286" due-to="Benjamin McCann">
         Fixed an error leading the simplex solver to compute the right solution
         but return another one
diff --git a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
index 9d43a54056..469d9edc76 100644
--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
@@ -57,7 +57,22 @@ public void testMath286() throws OptimizationException {
       RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);
       assertEquals(6.9, solution.getValue(), .0000001);
     }
-    
+
+    @Test
+    public void testMath288() throws OptimizationException {
+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );
+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
+        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));
+        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));
+        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));
+        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));
+        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));
+
+        SimplexSolver solver = new SimplexSolver();
+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);
+        assertEquals(10.0, solution.getValue(), .0000001);
+    }
+
     @Test
     public void testSimplexSolver() throws OptimizationException {
         LinearObjectiveFunction f =
