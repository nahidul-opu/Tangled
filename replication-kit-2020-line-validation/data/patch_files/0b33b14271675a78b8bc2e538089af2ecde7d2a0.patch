From 0b33b14271675a78b8bc2e538089af2ecde7d2a0 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sun, 15 Feb 2015 23:09:26 +0000
Subject: [PATCH] COMPRESS-302 Restore immutability/thread-safety to
 ArchiveStreamFactory.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1660005 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 +++
 .../archivers/ArchiveStreamFactory.java       | 38 ++++++++++++++++++-
 2 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index f676d7f53d0..428e0c7183a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -54,6 +54,11 @@ breaks backwards compatibility for code which used the old package.
 This also changes the superclass of ZCompressorInputStream.    
 ">
 
+      <action issue="COMPRESS-302" type="fix">
+        Restore immutability/thread-safety to ArchiveStreamFactory.
+        The class is now immutable provided that the method setEntryEncoding is not used.
+        The class is thread-safe.
+      </action>
       <action issue="COMPRESS-303" type="fix">
         Restore immutability/thread-safety to CompressorStreamFactory.
         The class is now immutable provided that the method setDecompressConcatenated is not used.
diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index c906ab7bb63..4aefb29b8a6 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -71,7 +71,7 @@
  * out.close();
  * in.close();
  * </pre>
- * 
+ * @Immutable provided that the deprecated method setEntryEncoding is not used.
  */
 public class ArchiveStreamFactory {
 
@@ -118,10 +118,36 @@ public class ArchiveStreamFactory {
      */
     public static final String SEVEN_Z = "7z";
 
+    /**
+     * Entry encoding, null for the platform default.
+     */
+    private final String encoding;
+
     /**
      * Entry encoding, null for the default.
      */
-    private String entryEncoding = null;
+    private volatile String entryEncoding = null;
+
+    /**
+     * Create an instance using the platform default encoding.
+     */
+    public ArchiveStreamFactory() {
+        this(null);
+    }
+
+    /**
+     * Create an instance using the specified encoding.
+     *
+     * @param encoding the encoding to be used.
+     *
+     * @since 1.10
+     */
+    public ArchiveStreamFactory(String encoding) {
+        super();
+        this.encoding = encoding;
+        // Also set the original field so can continue to use it.
+        this.entryEncoding = encoding;
+    }
 
     /**
      * Returns the encoding to use for arj, zip, dump, cpio and tar
@@ -139,8 +165,16 @@ public String getEntryEncoding() {
      * 
      * @param entryEncoding the entry encoding, null uses the default.
      * @since 1.5
+     * @deprecated 1.10 use {@link #ArchiveStreamFactory(String)} to specify the encoding
+     * @throws IllegalStateException if the constructor {@link #ArchiveStreamFactory(String)} 
+     * was used to specify the factory encoding.
      */
+    @Deprecated
     public void setEntryEncoding(String entryEncoding) {
+        // Note: this does not detect new ArchiveStreamFactory(null) but that does not set the encoding anyway
+        if (encoding != null) {
+            throw new IllegalStateException("Cannot overide encoding set by the constructor");
+        }
         this.entryEncoding = entryEncoding;
     }
 
