From 3842ab2ea5680004cdbc8fc3dd4f3170938b0f1c Mon Sep 17 00:00:00 2001
From: Thomas Vandahl <tv@apache.org>
Date: Mon, 6 Jan 2014 17:01:48 +0000
Subject: [PATCH] Fix JCS-102: Reworked the interfaces to make the group cache
 typesafe

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jcs/trunk@1555918 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   3 +
 src/java/org/apache/commons/jcs/JCS.java      | 140 +++++--
 .../jcs/access/AbstractCacheAccess.java       | 190 ++++++++++
 .../commons/jcs/access/CacheAccess.java       | 341 +-----------------
 .../commons/jcs/access/GroupCacheAccess.java  |  72 ++--
 .../jcs/access/PartitionedCacheAccess.java    | 283 ++++++++++-----
 .../jcs/access/behavior/ICacheAccess.java     |  63 +---
 .../behavior/ICacheAccessManagement.java      | 111 ++++++
 .../access/behavior/IGroupCacheAccess.java    |   3 +-
 .../commons/jcs/auxiliary/AuxiliaryCache.java |  22 +-
 .../jcs/auxiliary/disk/AbstractDiskCache.java |  13 +-
 .../auxiliary/disk/block/BlockDiskCache.java  |  50 +--
 .../auxiliary/disk/file/FileDiskCache.java    |  18 +-
 .../disk/indexed/IndexedDiskCache.java        |  51 +--
 .../auxiliary/disk/jdbc/JDBCDiskCache.java    |  17 +-
 .../jcs/auxiliary/lateral/LateralCache.java   |  70 ++--
 .../auxiliary/lateral/LateralCacheNoWait.java |  26 +-
 .../lateral/LateralCacheNoWaitFacade.java     |  50 +--
 .../jcs/auxiliary/lateral/LateralCommand.java |   7 +-
 .../socket/tcp/LateralTCPListener.java        | 127 +++----
 .../lateral/socket/tcp/LateralTCPService.java |  39 +-
 .../remote/AbstractRemoteAuxiliaryCache.java  |  24 +-
 .../AbstractRemoteCacheNoWaitFacade.java      |  41 +--
 .../auxiliary/remote/RemoteCacheNoWait.java   |  21 +-
 .../http/client/RemoteHttpCacheClient.java    |  41 +--
 .../client/RemoteHttpCacheDispatcher.java     |   5 +-
 .../server/AbstractRemoteCacheService.java    |  42 +--
 .../server/RemoteCacheServiceAdaptor.java     |  11 +-
 .../remote/server/RemoteCacheServer.java      |  56 +--
 .../util/RemoteCacheRequestFactory.java       |  32 +-
 .../remote/value/RemoteRequestType.java       |   7 +-
 .../engine/ZombieCacheServiceNonLocal.java    |  14 +-
 .../behavior/ICacheServiceNonLocal.java       |  24 +-
 .../jcs/engine/control/CompositeCache.java    |  70 +---
 .../engine/memory/AbstractMemoryCache.java    |  49 ---
 .../engine/memory/behavior/IMemoryCache.java  |  15 -
 .../commons/jcs/utils/access/JCSWorker.java   |  12 +-
 .../jcs/ConcurrentRemovalLoadTest.java        |   2 -
 .../jcs/JCSCacheElementRetrievalUnitTest.java |   4 +-
 .../jcs/JCSConcurrentCacheAccessUnitTest.java |   7 +-
 .../commons/jcs/JCSLightLoadUnitTest.java     |   6 +-
 .../jcs/JCSRemovalSimpleConcurrentTest.java   |  12 +-
 .../org/apache/commons/jcs/JCSThrashTest.java |   4 +-
 .../org/apache/commons/jcs/JCSUnitTest.java   |   6 +-
 .../jcs/JCSvsHashtablePerformanceTest.java    |   4 +-
 .../apache/commons/jcs/RemovalTestUtil.java   |  10 +-
 .../commons/jcs/TestTCPLateralCache.java      |   6 +-
 .../commons/jcs/ZeroSizeCacheUnitTest.java    |   6 +-
 .../jcs/access/CacheAccessUnitTest.java       |  22 +-
 .../jcs/access/SystemPropertyUnitTest.java    |   4 +-
 .../commons/jcs/access/TestCacheAccess.java   |  16 +-
 .../commons/jcs/admin/AdminBeanUnitTest.java  |  12 +-
 .../jcs/admin/CountingStreamUnitTest.java     |   2 -
 .../AuxiliaryCacheConfiguratorUnitTest.java   |   1 -
 .../jcs/auxiliary/MockAuxiliaryCache.java     |  21 +-
 .../MockAuxiliaryCacheAttributes.java         |   2 -
 .../auxiliary/MockAuxiliaryCacheFactory.java  |   3 -
 .../disk/AbstractDiskCacheUnitTest.java       |  20 +-
 .../jcs/auxiliary/disk/LRUMapJCSUnitTest.java |   1 -
 .../disk/PurgatoryElementUnitTest.java        |   1 -
 .../BlockDiskCacheConcurrentUnitTest.java     |   5 +-
 .../block/BlockDiskCacheKeyStoreUnitTest.java |   4 -
 .../block/BlockDiskCacheManagerUnitTest.java  |   3 -
 ...lockDiskCacheRandomConcurrentTestUtil.java |   3 +-
 ...DiskCacheSameRegionConcurrentUnitTest.java |   3 +-
 .../block/BlockDiskCacheSteadyLoadTest.java   |   3 +-
 .../disk/block/BlockDiskCacheUnitTest.java    |   3 -
 .../BlockDiskElementDescriptorUnitTest.java   |   2 -
 .../disk/block/BlockDiskUnitTest.java         |   1 -
 .../HugeQuantityBlockDiskCacheLoadTest.java   |   3 +-
 .../file/FileDiskCacheFactoryUnitTest.java    |   3 -
 .../disk/file/FileDiskCacheUnitTest.java      |   2 -
 .../disk/indexed/DiskTestObjectUtil.java      |   1 -
 .../HugeQuantityIndDiskCacheLoadTest.java     |   3 +-
 .../disk/indexed/IndexDiskCacheUnitTest.java  |   4 -
 .../IndexedDiskCacheConcurrentUnitTest.java   |   5 +-
 ...IndexedDiskCacheDefragPerformanceTest.java |   3 +-
 .../IndexedDiskCacheKeyStoreUnitTest.java     |   2 -
 .../IndexedDiskCacheManagerUnitTest.java      |   3 -
 .../IndexedDiskCacheNoMemoryUnitTest.java     |   3 +-
 .../IndexedDiskCacheOptimizationUnitTest.java |   2 -
 ...exedDiskCacheRandomConcurrentTestUtil.java |   3 +-
 ...DiskCacheSameRegionConcurrentUnitTest.java |   3 +-
 .../IndexedDiskCacheSteadyLoadTest.java       |   3 +-
 .../jdbc/JDBCDiskCacheManagerUnitTest.java    |   3 -
 ...DBCDiskCachePoolAccessManagerUnitTest.java |   4 -
 .../jdbc/JDBCDiskCacheRemovalUnitTest.java    |   3 +-
 .../jdbc/JDBCDiskCacheSharedPoolUnitTest.java |   3 +-
 .../jdbc/JDBCDiskCacheShrinkUnitTest.java     |   7 +-
 .../disk/jdbc/JDBCDiskCacheUnitTest.java      |   8 +-
 .../hsql/HSQLDiskCacheConcurrentUnitTest.java |   3 +-
 .../disk/jdbc/hsql/HSQLDiskCacheUnitTest.java |   7 +-
 .../MySQLDiskCacheHsqlBackedUnitTest.java     |   5 +-
 .../mysql/MySQLDiskCacheManagerUnitTest.java  |   3 -
 .../jdbc/mysql/MySQLDiskCacheUnitTest.java    |   2 -
 .../MySQLTableOptimizerManualTester.java      |   2 -
 .../util/ScheduleParserUtilUnitTest.java      |   3 -
 .../LateralCacheNoWaitFacadeUnitTest.java     |   4 -
 .../LateralTCPConcurrentRandomTestUtil.java   |   7 +-
 .../LateralTCPDiscoveryListenerUnitTest.java  |   3 -
 ...ateralTCPFilterRemoveHashCodeUnitTest.java |   7 +-
 .../LateralTCPIssueRemoveOnPutUnitTest.java   |   9 +-
 .../socket/tcp/TestTCPLateralUnitTest.java    |  66 +---
 .../remote/MockRemoteCacheClient.java         |  12 +-
 .../remote/MockRemoteCacheService.java        |  12 +-
 .../remote/RemoteCacheListenerUnitTest.java   |   2 -
 .../remote/RemoteCacheNoWaitUnitTest.java     |   1 -
 .../auxiliary/remote/RemoteCacheUnitTest.java |   2 -
 .../auxiliary/remote/RemoteUtilsUnitTest.java |   2 -
 .../jcs/auxiliary/remote/TestRemoteCache.java |   6 +-
 .../client/RemoteHttpCacheClientUnitTest.java |   2 -
 .../RemoteHttpCacheDispatcherUniTest.java     |   2 -
 .../RemoteHttpCacheManagerUnitTest.java       |   3 -
 .../client/RemoteHttpCacheManualTester.java   |   3 +-
 .../RemoteCacheServiceAdaptorUnitTest.java    |   1 -
 .../RemoteHttpCacheServiceUnitTest.java       |   2 -
 .../RemoteHttpCacheSeviceFactoryUnitTest.java |   3 -
 .../BasicRemoteCacheClientServerUnitTest.java |   1 -
 .../RegistryKeepAliveRunnerUnitTest.java      |   1 -
 .../RemoteCacheServerAttributesUnitTest.java  |   1 -
 .../RemoteCacheServerFactoryUnitTest.java     |   3 -
 .../server/RemoteCacheServerStartupUtil.java  |   2 -
 .../server/RemoteCacheServerUnitTest.java     |   2 -
 ...tConfigurableRMIScoketFactoryUnitTest.java |   2 -
 .../RemoteCacheRequestFactoryUnitTest.java    |   1 -
 .../CacheEventQueueFactoryUnitTest.java       |   3 -
 .../engine/EventQueueConcurrentLoadTest.java  |   2 -
 .../jcs/engine/MockCacheEventQueue.java       |   1 -
 .../jcs/engine/MockCacheServiceNonLocal.java  |  12 +-
 .../engine/SystemPropertyUsageUnitTest.java   |   5 +-
 .../ZombieCacheServiceNonLocalUnitTest.java   |   2 -
 .../control/CacheManagerStatsUnitTest.java    |   4 +-
 .../CompositeCacheConfiguratorUnitTest.java   |   3 -
 .../CompositeCacheDiskUsageUnitTest.java      |  23 +-
 .../control/CompositeCacheUnitTest.java       |   3 +-
 .../control/MockCompositeCacheManager.java    |   1 -
 .../event/SimpleEventHandlingUnitTest.java    |   9 +-
 .../CacheEventLoggerDebugLoggerUnitTest.java  |   1 -
 .../engine/logging/MockCacheEventLogger.java  |   1 -
 .../match/KeyMatcherPatternImpllUnitTest.java |   2 -
 .../memory/fifo/FIFOMemoryCacheUnitTest.java  |   1 -
 .../LHMLRUMemoryCacheConcurrentUnitTest.java  |   1 -
 .../memory/lru/LHMLRUMemoryCacheUnitTest.java |  16 +-
 .../lru/LRUMemoryCacheConcurrentUnitTest.java |   1 -
 .../memory/mru/LRUvsMRUPerformanceTest.java   |   6 +-
 .../memory/mru/MRUMemoryCacheUnitTest.java    |  16 +-
 .../shrinking/ShrinkerThreadUnitTest.java     |   1 -
 .../jcs/utils/access/JCSWorkerUnitTest.java   |   4 -
 .../jcs/utils/date/DateFormatterUnitTest.java |   2 -
 .../ThreadSafeSimpleDateFormatUnitTest.java   |   1 -
 .../discovery/MockDiscoveryListener.java      |   1 -
 .../discovery/UDPDiscoverySenderUnitTest.java |   4 -
 .../UDPDiscoveryServiceUnitTest.java          |   3 -
 .../utils/discovery/UDPDiscoveryUnitTest.java |   4 -
 .../utils/key/KeyGeneratorUtilUnitTest.java   |   1 -
 .../jcs/utils/net/AddressUtilUnitTest.java    |   2 -
 .../jcs/utils/net/HostNameUtilUnitTest.java   |   2 -
 .../CompressingSerializerUnitTest.java        |   2 -
 .../SerializationConversionUtilUnitTest.java  |   2 -
 .../StandardSerializerUnitTest.java           |   2 -
 .../utils/struct/BoundedQueueUnitTest.java    |   2 -
 .../struct/DoubleLinkedListUnitTest.java      |   2 -
 .../JCSvsCommonsLRUMapPerformanceTest.java    |   1 -
 .../utils/struct/LRUMapConcurrentTest.java    |   2 -
 .../struct/LRUMapConcurrentUnitTest.java      |   2 -
 .../utils/struct/LRUMapPerformanceTest.java   |   1 -
 .../jcs/utils/struct/LRUMapUnitTest.java      |   2 -
 .../struct/SingleLinkedListUnitTest.java      |   2 -
 .../utils/struct/SortedPrefArrayUnitTest.java |   2 -
 .../threadpool/ThreadPoolManagerUnitTest.java |   2 -
 .../utils/threadpool/ThreadPoolUnitTest.java  |   2 -
 .../utils/zip/CompressionUtilUnitTest.java    |   2 -
 172 files changed, 989 insertions(+), 1794 deletions(-)
 create mode 100644 src/java/org/apache/commons/jcs/access/AbstractCacheAccess.java
 create mode 100644 src/java/org/apache/commons/jcs/access/behavior/ICacheAccessManagement.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d49b7136f..b94b5161d 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -20,6 +20,9 @@
 	</properties>
 	<body>
 		<release version="2.0" date="unreleased" description="JDK 1.5 based major release">
+            <action dev="tv" type="fix" issue="JCS-102" due-to="Robert Clark">
+                Reworked the interfaces to make the group cache typesafe
+            </action>
             <action dev="tv" type="fix" issue="JCS-108" due-to="Xiong LIU">
                 Fix return value of BlockDisk.write(long, byte[])
             </action>
diff --git a/src/java/org/apache/commons/jcs/JCS.java b/src/java/org/apache/commons/jcs/JCS.java
index 7bbc3a408..6e9e5e94c 100644
--- a/src/java/org/apache/commons/jcs/JCS.java
+++ b/src/java/org/apache/commons/jcs/JCS.java
@@ -22,11 +22,14 @@
 import java.io.Serializable;
 import java.util.Properties;
 
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.GroupCacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
+import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
+import org.apache.commons.jcs.engine.control.group.GroupAttrName;
 
 /**
  * Simple class for using JCS. To use JCS in your application, you can use the static methods of
@@ -35,8 +38,7 @@
  * want to access. If you have several regions, then get instances for each. For best performance
  * the getInstance call should be made in an initialization method.
  */
-public class JCS<K extends Serializable, V extends Serializable>
-    extends GroupCacheAccess<K, V>
+public abstract class JCS<K extends Serializable, V extends Serializable>
 {
     /** cache.ccf alternative. */
     private static String configFilename = null;
@@ -44,56 +46,88 @@ public class JCS<K extends Serializable, V extends Serializable>
     /** alternative configuration properties */
     private static Properties configProps = null;
 
-    /** The manager returns cache instances. */
+    /** Cache manager use by the various forms of defineRegion and getAccess */
     private static CompositeCacheManager cacheMgr;
 
     /**
-     * Protected constructor for use by the static factory methods.
+     * Define a new cache region with the given name. In the oracle specification, these attributes
+     * are global and not region specific, regional overrides is a value add each region should be
+     * able to house both cache and element attribute sets. It is more efficient to define a cache
+     * in the props file and then strictly use the get access method. Use of the define region
+     * outside of an initialization block should be avoided.
      * <p>
-     * @param cacheControl Cache which the instance will provide access to
+     * @param name Name that will identify the region
+     * @return CacheAccess instance for the new region
+     * @exception CacheException
      */
-    protected JCS( CompositeCache<K, V> cacheControl )
+    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name )
+        throws CacheException
     {
-        super( cacheControl );
+        CompositeCache<K, V> cache = getCacheManager().getCache( name );
+        return new CacheAccess<K, V>( cache );
     }
 
     /**
-     * Get a JCS which accesses the provided region.
+     * Define a new cache region with the specified name and attributes.
      * <p>
-     * @param region Region that return JCS will provide access to
-     * @return A JCS which provides access to a given region.
+     * @param name Name that will identify the region
+     * @param cattr CompositeCacheAttributes for the region
+     * @return CacheAccess instance for the new region
      * @exception CacheException
      */
-    public static <K extends Serializable, V extends Serializable> JCS<K, V> getInstance( String region )
+    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name, ICompositeCacheAttributes cattr )
         throws CacheException
     {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region );
-        return new JCS<K, V>( cache );
+        CompositeCache<K, V> cache = getCacheManager().getCache( name, cattr );
+        return new CacheAccess<K, V>( cache );
     }
 
     /**
-     * Get a JCS which accesses the provided region.
+     * Define a new cache region with the specified name and attributes and return a CacheAccess to
+     * it.
      * <p>
-     * @param region Region that return JCS will provide access to
-     * @param icca CacheAttributes for region
-     * @return A JCS which provides access to a given region.
+     * @param name Name that will identify the region
+     * @param cattr CompositeCacheAttributes for the region
+     * @param attr Attributes for the region
+     * @return CacheAccess instance for the new region
      * @exception CacheException
      */
-    public static <K extends Serializable, V extends Serializable> JCS<K, V> getInstance( String region, ICompositeCacheAttributes icca )
+    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name, ICompositeCacheAttributes cattr, IElementAttributes attr )
         throws CacheException
     {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region, icca );
-        return new JCS<K, V>( cache );
+        CompositeCache<K, V> cache = getCacheManager().getCache( name, cattr, attr );
+        return new CacheAccess<K, V>( cache );
+    }
+
+    /**
+     * Set the filename that the cache manager will be initialized with. Only matters before the
+     * instance is initialized.
+     * <p>
+     * @param configFilename
+     */
+    public static void setConfigFilename( String configFilename )
+    {
+        JCS.configFilename = configFilename;
     }
 
     /**
-     * Gets an instance of CompositeCacheManager and stores it in the cacheMgr class field, if it is
-     * not already set. Unlike the implementation in CacheAccess, the cache manager is a
-     * CompositeCacheManager. NOTE: This can be moved up into GroupCacheAccess.
+     * Set the properties that the cache manager will be initialized with. Only
+     * matters before the instance is initialized.
+     *
+     * @param configProps
+     */
+    public static void setConfigProperties( Properties configProps )
+    {
+        JCS.configProps = configProps;
+    }
+
+    /**
+     * Helper method which checks to make sure the cacheMgr class field is set, and if not requests
+     * an instance from CacheManagerFactory.
      *
      * @throws CacheException if the configuration cannot be loaded
      */
-    protected static CompositeCacheManager getCacheManager() throws CacheException
+    private static CompositeCacheManager getCacheManager() throws CacheException
     {
         synchronized ( JCS.class )
         {
@@ -120,24 +154,60 @@ else if ( configFilename != null )
     }
 
     /**
-     * Set the filename that the cache manager will be initialized with. Only matters before the
-     * instance is initialized.
+     * Get a CacheAccess which accesses the provided region.
      * <p>
-     * @param configFilename
+     * @param region Region that return CacheAccess will provide access to
+     * @return A CacheAccess which provides access to a given region.
+     * @exception CacheException
      */
-    public static void setConfigFilename( String configFilename )
+    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> getInstance( String region )
+        throws CacheException
     {
-        JCS.configFilename = configFilename;
+        CompositeCache<K, V> cache = getCacheManager().getCache( region );
+        return new CacheAccess<K, V>( cache );
     }
 
     /**
-     * Set the properties that the cache manager will be initialized with. Only
-     * matters before the instance is initialized.
-     *
-     * @param configProps
+     * Get a CacheAccess which accesses the provided region.
+     * <p>
+     * @param region Region that return CacheAccess will provide access to
+     * @param icca CacheAttributes for region
+     * @return A CacheAccess which provides access to a given region.
+     * @exception CacheException
      */
-    public static void setConfigProperties( Properties configProps )
+    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> getInstance( String region, ICompositeCacheAttributes icca )
+        throws CacheException
     {
-        JCS.configProps = configProps;
+        CompositeCache<K, V> cache = getCacheManager().getCache( region, icca );
+        return new CacheAccess<K, V>( cache );
+    }
+
+    /**
+     * Get a GroupCacheAccess which accesses the provided region.
+     * <p>
+     * @param region Region that return GroupCacheAccess will provide access to
+     * @return A GroupCacheAccess which provides access to a given region.
+     * @exception CacheException
+     */
+    public static <K extends Serializable, V extends Serializable> GroupCacheAccess<K, V> getGroupCacheInstance( String region )
+        throws CacheException
+    {
+        CompositeCache<GroupAttrName<K>, V> cache = getCacheManager().getCache( region );
+        return new GroupCacheAccess<K, V>( cache );
+    }
+
+    /**
+     * Get a GroupCacheAccess which accesses the provided region.
+     * <p>
+     * @param region Region that return GroupCacheAccess will provide access to
+     * @param icca CacheAttributes for region
+     * @return A GroupCacheAccess which provides access to a given region.
+     * @exception CacheException
+     */
+    public static <K extends Serializable, V extends Serializable> GroupCacheAccess<K, V> getGroupCacheInstance( String region, ICompositeCacheAttributes icca )
+        throws CacheException
+    {
+        CompositeCache<GroupAttrName<K>, V> cache = getCacheManager().getCache( region, icca );
+        return new GroupCacheAccess<K, V>( cache );
     }
 }
diff --git a/src/java/org/apache/commons/jcs/access/AbstractCacheAccess.java b/src/java/org/apache/commons/jcs/access/AbstractCacheAccess.java
new file mode 100644
index 000000000..49dd234a8
--- /dev/null
+++ b/src/java/org/apache/commons/jcs/access/AbstractCacheAccess.java
@@ -0,0 +1,190 @@
+package org.apache.commons.jcs.access;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.io.IOException;
+import java.io.Serializable;
+
+import org.apache.commons.jcs.access.behavior.ICacheAccessManagement;
+import org.apache.commons.jcs.access.exception.CacheException;
+import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
+import org.apache.commons.jcs.engine.behavior.IElementAttributes;
+import org.apache.commons.jcs.engine.control.CompositeCache;
+import org.apache.commons.jcs.engine.stats.behavior.ICacheStats;
+
+/**
+ * This class provides the common methods for all types of access to the cache.
+ * <p>
+ * An instance of this class is tied to a specific cache region. Static methods are provided to get
+ * such instances.
+ * <p>
+ * Using this class you can retrieve an item, the item's wrapper, and the element's configuration.  You can also put an
+ * item in the cache, remove an item, and clear a region.
+ * <p>
+ * The JCS class is the preferred way to access these methods.
+ */
+public abstract class AbstractCacheAccess<K extends Serializable, V extends Serializable>
+    implements ICacheAccessManagement
+{
+    /**
+     * The cache that a given instance of this class provides access to.
+     * <p>
+     * @TODO Should this be the interface?
+     */
+    protected CompositeCache<K, V> cacheControl;
+
+    /**
+     * Constructor for the CacheAccess object.
+     * <p>
+     * @param cacheControl The cache which the created instance accesses
+     */
+    public AbstractCacheAccess( CompositeCache<K, V> cacheControl )
+    {
+        this.cacheControl = cacheControl;
+    }
+
+    /**
+     * Removes all of the elements from a region.
+     * <p>
+     * @throws CacheException
+     */
+    public void clear()
+        throws CacheException
+    {
+        try
+        {
+            this.cacheControl.removeAll();
+        }
+        catch ( IOException e )
+        {
+            throw new CacheException( e );
+        }
+    }
+
+    /**
+     * This method is does not reset the attributes for items already in the cache. It could
+     * potentially do this for items in memory, and maybe on disk (which would be slow) but not
+     * remote items. Rather than have unpredictable behavior, this method just sets the default
+     * attributes. Items subsequently put into the cache will use these defaults if they do not
+     * specify specific attributes.
+     * <p>
+     * @param attr the default attributes.
+     * @throws CacheException if something goes wrong.
+     */
+    public void setDefaultElementAttributes( IElementAttributes attr )
+        throws CacheException
+    {
+        this.cacheControl.setElementAttributes( attr );
+    }
+
+    /**
+     * Retrieves A COPY OF the default element attributes used by this region. This does not provide
+     * a reference to the element attributes.
+     * <p>
+     * Each time an element is added to the cache without element attributes, the default element
+     * attributes are cloned.
+     * <p>
+     * @return the default element attributes used by this region.
+     * @throws CacheException
+     */
+    public IElementAttributes getDefaultElementAttributes()
+        throws CacheException
+    {
+        return this.cacheControl.getElementAttributes();
+    }
+
+    /**
+     * This returns the ICacheStats object with information on this region and its auxiliaries.
+     * <p>
+     * This data can be formatted as needed.
+     * <p>
+     * @return ICacheStats
+     */
+    public ICacheStats getStatistics()
+    {
+        return this.cacheControl.getStatistics();
+    }
+
+    /**
+     * @return A String version of the stats.
+     */
+    public String getStats()
+    {
+        return this.cacheControl.getStats();
+    }
+
+    /**
+     * Dispose this region. Flushes objects to and closes auxiliary caches. This is a shutdown
+     * command!
+     * <p>
+     * To simply remove all elements from the region use clear().
+     */
+    public void dispose()
+    {
+        this.cacheControl.dispose();
+    }
+
+    /**
+     * Gets the ICompositeCacheAttributes of the cache region.
+     * <p>
+     * @return ICompositeCacheAttributes, the controllers config info, defined in the top section of
+     *         a region definition.
+     */
+    public ICompositeCacheAttributes getCacheAttributes()
+    {
+        return this.cacheControl.getCacheAttributes();
+    }
+
+    /**
+     * Sets the ICompositeCacheAttributes of the cache region.
+     * <p>
+     * @param cattr The new ICompositeCacheAttribute value
+     */
+    public void setCacheAttributes( ICompositeCacheAttributes cattr )
+    {
+        this.cacheControl.setCacheAttributes( cattr );
+    }
+
+    /**
+     * This instructs the memory cache to remove the <i>numberToFree</i> according to its eviction
+     * policy. For example, the LRUMemoryCache will remove the <i>numberToFree</i> least recently
+     * used items. These will be spooled to disk if a disk auxiliary is available.
+     * <p>
+     * @param numberToFree
+     * @return the number that were removed. if you ask to free 5, but there are only 3, you will
+     *         get 3.
+     * @throws CacheException
+     */
+    public int freeMemoryElements( int numberToFree )
+        throws CacheException
+    {
+        int numFreed = -1;
+        try
+        {
+            numFreed = this.cacheControl.getMemoryCache().freeElements( numberToFree );
+        }
+        catch ( IOException ioe )
+        {
+            String message = "Failure freeing memory elements.";
+            throw new CacheException( message, ioe );
+        }
+        return numFreed;
+    }
+}
diff --git a/src/java/org/apache/commons/jcs/access/CacheAccess.java b/src/java/org/apache/commons/jcs/access/CacheAccess.java
index e35ab7da1..cfc69a584 100644
--- a/src/java/org/apache/commons/jcs/access/CacheAccess.java
+++ b/src/java/org/apache/commons/jcs/access/CacheAccess.java
@@ -32,11 +32,8 @@
 import org.apache.commons.jcs.access.exception.ObjectExistsException;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
-import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.control.CompositeCache;
-import org.apache.commons.jcs.engine.control.CompositeCacheManager;
-import org.apache.commons.jcs.engine.stats.behavior.ICacheStats;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -52,21 +49,12 @@
  * The JCS class is the preferred way to access these methods.
  */
 public class CacheAccess<K extends Serializable, V extends Serializable>
+    extends AbstractCacheAccess<K, V>
     implements ICacheAccess<K, V>
 {
     /** The logger. */
     private static final Log log = LogFactory.getLog( CacheAccess.class );
 
-    /** Cache manager use by the various forms of defineRegion and getAccess */
-    private static CompositeCacheManager cacheMgr;
-
-    /**
-     * The cache that a given instance of this class provides access to.
-     * <p>
-     * @TODO Should this be the interface?
-     */
-    protected CompositeCache<K, V> cacheControl;
-
     /**
      * Constructor for the CacheAccess object.
      * <p>
@@ -74,111 +62,9 @@ public class CacheAccess<K extends Serializable, V extends Serializable>
      */
     public CacheAccess( CompositeCache<K, V> cacheControl )
     {
-        this.cacheControl = cacheControl;
-    }
-
-    // ----------------------------- static methods for access to cache regions
-
-    /**
-     * Define a new cache region with the given name. In the oracle specification, these attributes
-     * are global and not region specific, regional overrides is a value add each region should be
-     * able to house both cache and element attribute sets. It is more efficient to define a cache
-     * in the props file and then strictly use the get access method. Use of the define region
-     * outside of an initialization block should be avoided.
-     * <p>
-     * @param name Name that will identify the region
-     * @return CacheAccess instance for the new region
-     * @exception CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( name );
-        return new CacheAccess<K, V>( cache );
-    }
-
-    /**
-     * Define a new cache region with the specified name and attributes.
-     * <p>
-     * @param name Name that will identify the region
-     * @param cattr CompositeCacheAttributes for the region
-     * @return CacheAccess instance for the new region
-     * @exception CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name, ICompositeCacheAttributes cattr )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( name, cattr );
-        return new CacheAccess<K, V>( cache );
-    }
-
-    /**
-     * Define a new cache region with the specified name and attributes and return a CacheAccess to
-     * it.
-     * <p>
-     * @param name Name that will identify the region
-     * @param cattr CompositeCacheAttributes for the region
-     * @param attr Attributes for the region
-     * @return CacheAccess instance for the new region
-     * @exception CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> defineRegion( String name, ICompositeCacheAttributes cattr, IElementAttributes attr )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( name, cattr, attr );
-        return new CacheAccess<K, V>( cache );
-    }
-
-    /**
-     * Get a CacheAccess instance for the given region.
-     * <p>
-     * @param region Name that identifies the region
-     * @return CacheAccess instance for region
-     * @exception CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> getAccess( String region )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region );
-        return new CacheAccess<K, V>( cache );
-    }
-
-    /**
-     * Get a CacheAccess instance for the given region with the given attributes.
-     * <p>
-     * @param region Name that identifies the region
-     * @param icca
-     * @return CacheAccess instance for region
-     * @exception CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> CacheAccess<K, V> getAccess( String region, ICompositeCacheAttributes icca )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region, icca );
-        return new CacheAccess<K, V>( cache );
+        super(cacheControl);
     }
 
-    /**
-     * Helper method which checks to make sure the cacheMgr class field is set, and if not requests
-     * an instance from CacheManagerFactory.
-     *
-     * @throws CacheException if the configuration cannot be loaded
-     */
-    protected static CompositeCacheManager getCacheManager() throws CacheException
-    {
-        synchronized ( CacheAccess.class )
-        {
-            if ( cacheMgr == null )
-            {
-                cacheMgr = CompositeCacheManager.getInstance();
-            }
-
-            return cacheMgr;
-        }
-    }
-
-    // ------------------------------------------------------- instance methods
-
     /**
      * Retrieve an object from the cache region this instance provides access to.
      * <p>
@@ -356,73 +242,6 @@ public void put( K key, V val, IElementAttributes attr )
         }
     }
 
-    /**
-     * Destroy the region and all objects within it. After calling this method, the Cache object can
-     * no longer be used as it will be closed.
-     * <p>
-     * @exception CacheException
-     * @deprecated
-     */
-    @Deprecated
-    public void destroy()
-        throws CacheException
-    {
-        try
-        {
-            this.cacheControl.removeAll();
-        }
-        catch ( IOException e )
-        {
-            throw new CacheException( e );
-        }
-    }
-
-    /**
-     * Removes all of the elements from a region.
-     * <p>
-     * @deprecated use clear()
-     * @throws CacheException
-     */
-    @Deprecated
-    public void remove()
-        throws CacheException
-    {
-        clear();
-    }
-
-    /**
-     * Removes all of the elements from a region.
-     * <p>
-     * @throws CacheException
-     */
-    public void clear()
-        throws CacheException
-    {
-        try
-        {
-            this.cacheControl.removeAll();
-        }
-        catch ( IOException e )
-        {
-            throw new CacheException( e );
-        }
-    }
-
-    /**
-     * Invalidate all objects associated with key name, removing all references to the objects from
-     * the cache.
-     * <p>
-     * @param name Key that specifies object to invalidate
-     * @exception CacheException
-     * @deprecated use remove
-     */
-    @Deprecated
-    public void destroy( K name )
-        throws CacheException
-    {
-        this.cacheControl.remove( name );
-    }
-
     /**
      * Removes a single item by name.
      * <p>
@@ -435,49 +254,6 @@ public void remove( K name )
         this.cacheControl.remove( name );
     }
 
-    /**
-     * ResetAttributes allows for some of the attributes of a region to be reset in particular
-     * expiration time attributes, time to live, default time to live and idle time, and event
-     * handlers. Changing default settings on groups and regions will not affect existing objects.
-     * Only object loaded after the reset will use the new defaults. If no name argument is
-     * provided, the reset is applied to the region.
-     * <p>
-     * NOTE: this method is does not reset the attributes for items already in the cache. It could
-     * potentially do this for items in memory, and maybe on disk (which would be slow) but not
-     * remote items. Rather than have unpredictable behavior, this method just sets the default
-     * attributes.
-     * <p>
-     * TODO is should be renamed "setDefaultElementAttributes"
-     * <p>
-     * @deprecated As of release 1.3
-     * @see #setDefaultElementAttributes(IElementAttributes)
-     * @param attr New attributes for this region.
-     * @exception CacheException
-     * @exception InvalidHandleException
-     */
-    @Deprecated
-    public void resetElementAttributes( IElementAttributes attr )
-        throws CacheException, InvalidHandleException
-    {
-        this.cacheControl.setElementAttributes( attr );
-    }
-
-    /**
-     * This method is does not reset the attributes for items already in the cache. It could
-     * potentially do this for items in memory, and maybe on disk (which would be slow) but not
-     * remote items. Rather than have unpredictable behavior, this method just sets the default
-     * attributes. Items subsequently put into the cache will use these defaults if they do not
-     * specify specific attributes.
-     * <p>
-     * @param attr the default attributes.
-     * @throws CacheException if something goes wrong.
-     */
-    public void setDefaultElementAttributes( IElementAttributes attr )
-        throws CacheException
-    {
-        this.cacheControl.setElementAttributes( attr );
-    }
-
     /**
      * Reset attributes for a particular element in the cache. NOTE: this method is currently not
      * implemented.
@@ -505,40 +281,6 @@ public void resetElementAttributes( K name, IElementAttributes attr )
         put( element.getKey(), element.getVal(), attr );
     }
 
-    /**
-     * GetElementAttributes will return an attribute object describing the current attributes
-     * associated with the object name.
-     * <p>
-     * This was confusing, so I created a new method with a clear name.
-     * <p>
-     * @deprecated As of release 1.3
-     * @see #getDefaultElementAttributes
-     * @return Attributes for this region
-     * @exception CacheException
-     */
-    @Deprecated
-    public IElementAttributes getElementAttributes()
-        throws CacheException
-    {
-        return this.cacheControl.getElementAttributes();
-    }
-
-    /**
-     * Retrieves A COPY OF the default element attributes used by this region. This does not provide
-     * a reference to the element attributes.
-     * <p>
-     * Each time an element is added to the cache without element attributes, the default element
-     * attributes are cloned.
-     * <p>
-     * @return the deafualt element attributes used by this region.
-     * @throws CacheException
-     */
-    public IElementAttributes getDefaultElementAttributes()
-        throws CacheException
-    {
-        return this.cacheControl.getElementAttributes();
-    }
-
     /**
      * GetElementAttributes will return an attribute object describing the current attributes
      * associated with the object name. The name object must override the Object.equals and
@@ -564,83 +306,4 @@ public IElementAttributes getElementAttributes( K name )
 
         return attr;
     }
-
-    /**
-     * This returns the ICacheStats object with information on this region and its auxiliaries.
-     * <p>
-     * This data can be formatted as needed.
-     * <p>
-     * @return ICacheStats
-     */
-    public ICacheStats getStatistics()
-    {
-        return this.cacheControl.getStatistics();
-    }
-
-    /**
-     * @return A String version of the stats.
-     */
-    public String getStats()
-    {
-        return this.cacheControl.getStats();
-    }
-
-    /**
-     * Dispose this region. Flushes objects to and closes auxiliary caches. This is a shutdown
-     * command!
-     * <p>
-     * To simply remove all elements from the region use clear().
-     */
-    public void dispose()
-    {
-        this.cacheControl.dispose();
-    }
-
-    /**
-     * Gets the ICompositeCacheAttributes of the cache region.
-     * <p>
-     * @return ICompositeCacheAttributes, the controllers config info, defined in the top section of
-     *         a region definition.
-     */
-    public ICompositeCacheAttributes getCacheAttributes()
-    {
-        return this.cacheControl.getCacheAttributes();
-    }
-
-    /**
-     * Sets the ICompositeCacheAttributes of the cache region.
-     * <p>
-     * @param cattr The new ICompositeCacheAttribute value
-     */
-    public void setCacheAttributes( ICompositeCacheAttributes cattr )
-    {
-        this.cacheControl.setCacheAttributes( cattr );
-    }
-
-    /**
-     * This instructs the memory cache to remove the <i>numberToFree</i> according to its eviction
-     * policy. For example, the LRUMemoryCache will remove the <i>numberToFree</i> least recently
-     * used items. These will be spooled to disk if a disk auxiliary is available.
-     * <p>
-     * @param numberToFree
-     * @return the number that were removed. if you ask to free 5, but there are only 3, you will
-     *         get 3.
-     * @throws CacheException
-     */
-    public int freeMemoryElements( int numberToFree )
-        throws CacheException
-    {
-        int numFreed = -1;
-        try
-        {
-            numFreed = this.cacheControl.getMemoryCache().freeElements( numberToFree );
-        }
-        catch ( IOException ioe )
-        {
-            String message = "Failure freeing memory elements.  ";
-            log.error( message, ioe );
-            throw new CacheException( message + ioe.getMessage() );
-        }
-        return numFreed;
-    }
 }
diff --git a/src/java/org/apache/commons/jcs/access/GroupCacheAccess.java b/src/java/org/apache/commons/jcs/access/GroupCacheAccess.java
index e26c082f3..605621d7c 100644
--- a/src/java/org/apache/commons/jcs/access/GroupCacheAccess.java
+++ b/src/java/org/apache/commons/jcs/access/GroupCacheAccess.java
@@ -28,7 +28,6 @@
 import org.apache.commons.jcs.access.exception.InvalidArgumentException;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
-import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.group.GroupAttrName;
@@ -38,53 +37,17 @@
  * Access for groups.
  */
 public class GroupCacheAccess<K extends Serializable, V extends Serializable>
-    extends CacheAccess<K, V>
+    extends AbstractCacheAccess<GroupAttrName<K>, V>
     implements IGroupCacheAccess<K, V>
 {
-    /** a typesafe copy of the group cache */
-    private final CompositeCache<GroupAttrName<K>, V> groupCache;
-
     /**
      * Constructor for the GroupCacheAccess object
      * <p>
      * @param cacheControl
      */
-    @SuppressWarnings("unchecked")
-    public GroupCacheAccess( CompositeCache<K, V> cacheControl )
-    {
-        super( cacheControl );
-
-        // This is a HACK to allow different types of keys in group caches
-        this.groupCache = (CompositeCache<GroupAttrName<K>, V>) this.cacheControl;
-    }
-
-    /**
-     * Gets the groupAccess attribute of the GroupCacheAccess class.
-     * <p>
-     * @param region
-     * @return The groupAccess value
-     * @throws CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> GroupCacheAccess<K, V> getGroupAccess( String region )
-        throws CacheException
-    {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region );
-        return new GroupCacheAccess<K, V>( cache );
-    }
-
-    /**
-     * Gets the groupAccess attribute of the GroupCacheAccess class.
-     * <p>
-     * @param region
-     * @param icca
-     * @return The groupAccess value
-     * @throws CacheException
-     */
-    public static <K extends Serializable, V extends Serializable> GroupCacheAccess<K, V> getGroupAccess( String region, ICompositeCacheAttributes icca )
-        throws CacheException
+    public GroupCacheAccess( CompositeCache<GroupAttrName<K>, V> cacheControl )
     {
-        CompositeCache<K, V> cache = getCacheManager().getCache( region, icca );
-        return new GroupCacheAccess<K, V>( cache );
+        super(cacheControl);
     }
 
     /**
@@ -98,7 +61,7 @@ public static <K extends Serializable, V extends Serializable> GroupCacheAccess<
      */
     public V getFromGroup( K name, String group )
     {
-        ICacheElement<GroupAttrName<K>, V> element = this.groupCache.get( getGroupAttrName( group, name ) );
+        ICacheElement<GroupAttrName<K>, V> element = this.cacheControl.get( getGroupAttrName( group, name ) );
         return ( element != null ) ? element.getVal() : null;
     }
 
@@ -168,12 +131,12 @@ public void putInGroup( K name, String groupName, V value, IElementAttributes at
         {
             GroupAttrName<K> key = getGroupAttrName( groupName, name );
             CacheElement<GroupAttrName<K>, V> ce =
-                new CacheElement<GroupAttrName<K>, V>( this.groupCache.getCacheName(), key, value );
+                new CacheElement<GroupAttrName<K>, V>( this.cacheControl.getCacheName(), key, value );
 
-            IElementAttributes attributes = (attr == null) ? this.groupCache.getElementAttributes() : attr;
+            IElementAttributes attributes = (attr == null) ? this.cacheControl.getElementAttributes() : attr;
             ce.setElementAttributes( attributes );
 
-            this.groupCache.update( ce );
+            this.cacheControl.update( ce );
         }
         catch ( Exception e )
         {
@@ -186,10 +149,10 @@ public void putInGroup( K name, String groupName, V value, IElementAttributes at
      * @param name
      * @param group
      */
-    public void remove( K name, String group )
+    public void removeFromGroup( K name, String group )
     {
         GroupAttrName<K> key = getGroupAttrName( group, name );
-        this.groupCache.remove( key );
+        this.cacheControl.remove( key );
     }
 
     /**
@@ -201,10 +164,14 @@ public void remove( K name, String group )
     public Set<K> getGroupKeys( String group )
     {
         Set<K> groupKeys = new HashSet<K>();
+        GroupId groupId = new GroupId( this.cacheControl.getCacheName(), group );
 
-        for (GroupAttrName<K> gan : this.groupCache.getGroupKeys( group ))
+        for (GroupAttrName<K> gan : this.cacheControl.getKeySet())
         {
-            groupKeys.add(gan.attrName);
+            if (gan.groupId.equals( groupId ))
+            {
+                groupKeys.add( gan.attrName );
+            }
         }
 
         return groupKeys;
@@ -217,7 +184,12 @@ public Set<K> getGroupKeys( String group )
      */
     public Set<String> getGroupNames()
     {
-        return this.cacheControl.getGroupNames();
+        HashSet<String> names = new HashSet<String>();
+        for (GroupAttrName<K> gan : this.cacheControl.getKeySet())
+        {
+            names.add(gan.groupId.groupName);
+        }
+        return names;
     }
 
     /**
@@ -228,6 +200,6 @@ public Set<String> getGroupNames()
      */
     public void invalidateGroup( String group )
     {
-        this.groupCache.remove(getGroupAttrName(group, null));
+        this.cacheControl.remove(getGroupAttrName(group, null));
     }
 }
diff --git a/src/java/org/apache/commons/jcs/access/PartitionedCacheAccess.java b/src/java/org/apache/commons/jcs/access/PartitionedCacheAccess.java
index e4a733d58..4fdffa12a 100644
--- a/src/java/org/apache/commons/jcs/access/PartitionedCacheAccess.java
+++ b/src/java/org/apache/commons/jcs/access/PartitionedCacheAccess.java
@@ -26,12 +26,14 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.commons.jcs.JCS;
 import org.apache.commons.jcs.access.behavior.ICacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.access.exception.ConfigurationException;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
+import org.apache.commons.jcs.engine.stats.behavior.ICacheStats;
 import org.apache.commons.jcs.utils.props.AbstractPropertyContainer;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -50,7 +52,7 @@
  * System properties will override values in the properties file.
  * <p>
  * We use a JCS region name for each partition that looks like this: partitionRegionNamePrefix + "_"
- * + patitionNuber. The number is ) indexed based.
+ * + partitionNumber. The number is 0 indexed based.
  * <p>
  * @author Aaron Smuts
  */
@@ -98,7 +100,11 @@ public void put( K key, V object )
             log.warn( "Bad input key [" + key + "].  Cannot put null into the cache." );
             return;
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return;
+        }
 
         int partition = getPartitionNumberForKey( key );
         try
@@ -126,7 +132,11 @@ public void putSafe( K key, V object )
         {
             log.warn( "Bad input key [" + key + "].  Cannot putSafe null into the cache." );
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return;
+        }
 
         int partition = getPartitionNumberForKey( key );
         partitions[partition].putSafe( key, object );
@@ -148,9 +158,14 @@ public void put( K key, V object, IElementAttributes attr )
             log.warn( "Bad input key [" + key + "].  Cannot put null into the cache." );
             return;
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return;
+        }
 
         int partition = getPartitionNumberForKey( key );
+
         try
         {
             partitions[partition].put( key, object, attr );
@@ -175,14 +190,9 @@ public V get( K key )
             log.warn( "Input key is null." );
             return null;
         }
-        try
-        {
-            ensureInit();
-        }
-        catch ( ConfigurationException e )
+
+        if (!ensureInit())
         {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return null;
         }
 
@@ -204,14 +214,9 @@ public ICacheElement<K, V> getCacheElement( K key )
             log.warn( "Input key is null." );
             return null;
         }
-        try
-        {
-            ensureInit();
-        }
-        catch ( ConfigurationException e )
+
+        if (!ensureInit())
         {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return null;
         }
 
@@ -234,6 +239,11 @@ public Map<K, ICacheElement<K, V>> getCacheElements( Set<K> names )
             return Collections.emptyMap();
         }
 
+        if (!ensureInit())
+        {
+            return Collections.emptyMap();
+        }
+
         @SuppressWarnings("unchecked") // No generic arrays in java
         Set<K>[] dividedNames = new Set[this.getNumberOfPartitions()];
 
@@ -274,22 +284,18 @@ public Map<K, V> getMatching( String pattern )
             log.warn( "Input pattern is null." );
             return null;
         }
-        try
-        {
-            ensureInit();
-        }
-        catch ( ConfigurationException e )
+
+        if (!ensureInit())
         {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return null;
         }
 
         Map<K, V> result = new HashMap<K, V>();
-        for ( int i = 0; i < partitions.length; i++ )
+        for (ICacheAccess<K, V> partition : partitions)
         {
-            result.putAll( partitions[i].getMatching( pattern ) );
+            result.putAll( partition.getMatching( pattern ) );
         }
+
         return result;
     }
 
@@ -306,41 +312,20 @@ public Map<K, ICacheElement<K, V>> getMatchingCacheElements( String pattern )
             log.warn( "Input pattern is null." );
             return null;
         }
-        try
-        {
-            ensureInit();
-        }
-        catch ( ConfigurationException e )
+
+        if (!ensureInit())
         {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return null;
         }
 
         Map<K, ICacheElement<K, V>> result = new HashMap<K, ICacheElement<K, V>>();
-        for ( int i = 0; i < partitions.length; i++ )
+        for (ICacheAccess<K, V> partition : partitions)
         {
-            result.putAll( partitions[i].getMatchingCacheElements( pattern ) );
+            result.putAll( partition.getMatchingCacheElements( pattern ) );
         }
         return result;
     }
 
-    /**
-     * Calls remove on all partitions. This gets translated into a removeAll call.
-     * <p>
-     * @throws CacheException
-     */
-    public void remove()
-        throws CacheException
-    {
-        ensureInit();
-
-        for ( int i = 0; i < partitions.length; i++ )
-        {
-            partitions[i].remove();
-        }
-    }
-
     /**
      * Removes the item from the appropriate partition.
      * <p>
@@ -355,7 +340,11 @@ public void remove( K key )
             log.warn( "Input key is null. Cannot remove null from the cache." );
             return;
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return;
+        }
 
         int partition = getPartitionNumberForKey( key );
         try
@@ -379,12 +368,15 @@ public void remove( K key )
     public int freeMemoryElements( int numberToFree )
         throws CacheException
     {
-        ensureInit();
+        if (!ensureInit())
+        {
+            return 0;
+        }
 
         int count = 0;
-        for ( int i = 0; i < partitions.length; i++ )
+        for (ICacheAccess<K, V> partition : partitions)
         {
-            count += partitions[i].freeMemoryElements( numberToFree );
+            count += partition.freeMemoryElements( numberToFree );
         }
         return count;
     }
@@ -394,14 +386,8 @@ public int freeMemoryElements( int numberToFree )
      */
     public ICompositeCacheAttributes getCacheAttributes()
     {
-        try
+        if (!ensureInit())
         {
-            ensureInit();
-        }
-        catch ( ConfigurationException e )
-        {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return null;
         }
 
@@ -417,17 +403,20 @@ public ICompositeCacheAttributes getCacheAttributes()
      * @return IElementAttributes from the first partition.
      * @throws CacheException
      */
-    public IElementAttributes getElementAttributes()
+    public IElementAttributes getDefaultElementAttributes()
         throws CacheException
     {
-        ensureInit();
+        if (!ensureInit())
+        {
+            return null;
+        }
 
         if ( partitions.length == 0 )
         {
             return null;
         }
 
-        return partitions[0].getElementAttributes();
+        return partitions[0].getDefaultElementAttributes();
     }
 
     /**
@@ -445,31 +434,17 @@ public IElementAttributes getElementAttributes( K key )
             log.warn( "Input key is null. Cannot getElementAttributes for null from the cache." );
             return null;
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return null;
+        }
 
         int partition = getPartitionNumberForKey( key );
 
         return partitions[partition].getElementAttributes( key );
     }
 
-    /**
-     * Resets the default element attributes on all partitions. This does not change items that are
-     * already in the cache.
-     * <p>
-     * @param attributes
-     * @throws CacheException
-     */
-    public void resetElementAttributes( IElementAttributes attributes )
-        throws CacheException
-    {
-        ensureInit();
-
-        for ( int i = 0; i < partitions.length; i++ )
-        {
-            partitions[i].resetElementAttributes( attributes );
-        }
-    }
-
     /**
      * Resets the attributes for this item. This has the same effect as an update, in most cases.
      * None of the auxiliaries are optimized to do this more efficiently than a simply update.
@@ -486,7 +461,11 @@ public void resetElementAttributes( K key, IElementAttributes attributes )
             log.warn( "Input key is null. Cannot resetElementAttributes for null." );
             return;
         }
-        ensureInit();
+
+        if (!ensureInit())
+        {
+            return;
+        }
 
         int partition = getPartitionNumberForKey( key );
 
@@ -500,23 +479,123 @@ public void resetElementAttributes( K key, IElementAttributes attributes )
      */
     public void setCacheAttributes( ICompositeCacheAttributes cattr )
     {
-        try
+        if (!ensureInit())
         {
-            ensureInit();
+            return;
         }
-        catch ( ConfigurationException e )
+
+        for (ICacheAccess<K, V> partition : partitions)
+        {
+            partition.setCacheAttributes( cattr );
+        }
+    }
+
+    /**
+     * Removes all of the elements from a region.
+     * <p>
+     * @throws CacheException
+     */
+    public void clear()
+        throws CacheException
+    {
+        if (!ensureInit())
         {
-            // TODO add exception to interface method.
-            log.error( "Couldn't configure partioned access.", e );
             return;
         }
 
-        for ( int i = 0; i < partitions.length; i++ )
+        for (ICacheAccess<K, V> partition : partitions)
+        {
+            partition.clear();
+        }
+    }
+
+    /**
+     * This method is does not reset the attributes for items already in the cache. It could
+     * potentially do this for items in memory, and maybe on disk (which would be slow) but not
+     * remote items. Rather than have unpredictable behavior, this method just sets the default
+     * attributes. Items subsequently put into the cache will use these defaults if they do not
+     * specify specific attributes.
+     * <p>
+     * @param attr the default attributes.
+     * @throws CacheException if something goes wrong.
+     */
+    public void setDefaultElementAttributes( IElementAttributes attr )
+        throws CacheException
+    {
+        if (!ensureInit())
+        {
+            return;
+        }
+
+        for (ICacheAccess<K, V> partition : partitions)
         {
-            partitions[i].setCacheAttributes( cattr );
+            partition.setDefaultElementAttributes(attr);
         }
     }
 
+    /**
+     * This returns the ICacheStats object with information on this region and its auxiliaries.
+     * <p>
+     * This data can be formatted as needed.
+     * <p>
+     * @return ICacheStats
+     */
+    public ICacheStats getStatistics()
+    {
+        if (!ensureInit())
+        {
+            return null;
+        }
+
+        if ( partitions.length == 0 )
+        {
+            return null;
+        }
+
+        return partitions[0].getStatistics();
+    }
+
+    /**
+     * @return A String version of the stats.
+     */
+    public String getStats()
+    {
+        if (!ensureInit())
+        {
+            return "";
+        }
+
+        StringBuilder stats = new StringBuilder();
+        for (ICacheAccess<K, V> partition : partitions)
+        {
+            stats.append(partition.getStats());
+            stats.append("\n");
+        }
+
+        return stats.toString();
+    }
+
+    /**
+     * Dispose this region. Flushes objects to and closes auxiliary caches. This is a shutdown
+     * command!
+     * <p>
+     * To simply remove all elements from the region use clear().
+     */
+    public synchronized void dispose()
+    {
+        if (!ensureInit())
+        {
+            return;
+        }
+
+        for (ICacheAccess<K, V> partition : partitions)
+        {
+            partition.dispose();
+        }
+
+        initialized = false;
+    }
+
     /**
      * This expects a numeric key. If the key cannot be converted into a number, we will return 0.
      * TODO we could md5 it or get the hashcode.
@@ -573,13 +652,22 @@ public long getNumericValueForKey( K key )
      * <p>
      * @throws ConfigurationException on configuration problem
      */
-    protected synchronized void ensureInit()
-        throws ConfigurationException
+    protected synchronized boolean ensureInit()
     {
         if ( !initialized )
         {
-            initialize();
+            try
+            {
+                initialize();
+            }
+            catch ( ConfigurationException e )
+            {
+                log.error( "Couldn't configure partioned access.", e );
+                return false;
+            }
         }
+
+        return true;
     }
 
     /**
@@ -599,13 +687,14 @@ protected synchronized void initialize()
             String regionName = this.getPartitionRegionNamePrefix() + "_" + i;
             try
             {
-                tempPartitions[i] = CacheAccess.getAccess( regionName );
+                tempPartitions[i] = JCS.getInstance( regionName );
             }
             catch ( CacheException e )
             {
                 log.error( "Problem getting cache for region [" + regionName + "]" );
             }
         }
+
         partitions = tempPartitions;
         initialized = true;
     }
diff --git a/src/java/org/apache/commons/jcs/access/behavior/ICacheAccess.java b/src/java/org/apache/commons/jcs/access/behavior/ICacheAccess.java
index 354df2686..6302973b2 100644
--- a/src/java/org/apache/commons/jcs/access/behavior/ICacheAccess.java
+++ b/src/java/org/apache/commons/jcs/access/behavior/ICacheAccess.java
@@ -25,13 +25,13 @@
 
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
-import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 
 /**
  * ICacheAccess defines the behavior for client access.
  */
 public interface ICacheAccess<K extends Serializable, V extends Serializable>
+    extends ICacheAccessManagement
 {
     /**
      * Basic get method.
@@ -137,13 +137,6 @@ void put( K name, V obj, IElementAttributes attr )
      */
     Map<K, ICacheElement<K, V>> getMatchingCacheElements( String pattern );
 
-    /**
-     * Old remove all method.
-     * @throws CacheException
-     */
-    void remove()
-        throws CacheException;
-
     /**
      * Remove an object for this key if one exists, else do nothing.
      * <p>
@@ -153,21 +146,6 @@ void remove()
     void remove( K name )
         throws CacheException;
 
-    /**
-     * ResetAttributes allows for some of the attributes of a region to be reset in particular
-     * expiration time attributes, time to live, default time to live and idle time, and event
-     * handlers. The cacheloader object and attributes set as flags can't be reset with
-     * resetAttributes, the object must be destroyed and redefined to cache those parameters.
-     * Changing default settings on groups and regions will not affect existing objects. Only object
-     * loaded after the reset will use the new defaults. If no name argument is provided, the reset
-     * is applied to the region.
-     * <p>
-     * @param attributes
-     * @throws CacheException
-     */
-    void resetElementAttributes( IElementAttributes attributes )
-        throws CacheException;
-
     /**
      * Reset the attributes on the object matching this key name.
      * <p>
@@ -178,18 +156,6 @@ void resetElementAttributes( IElementAttributes attributes )
     void resetElementAttributes( K name, IElementAttributes attributes )
         throws CacheException;
 
-    /**
-     * GetElementAttributes will return an attribute object describing the current attributes
-     * associated with the object name. If no name parameter is available, the attributes for the
-     * region will be returned. The name object must override the Object.equals and Object.hashCode
-     * methods.
-     * <p>
-     * @return The elementAttributes value
-     * @throws CacheException
-     */
-    IElementAttributes getElementAttributes()
-        throws CacheException;
-
     /**
      * Gets the elementAttributes attribute of the ICacheAccess object
      * <p>
@@ -199,31 +165,4 @@ IElementAttributes getElementAttributes()
      */
     IElementAttributes getElementAttributes( K name )
         throws CacheException;
-
-    /**
-     * Gets the ICompositeCacheAttributes of the cache region
-     * <p>
-     * @return ICompositeCacheAttributes
-     */
-    public ICompositeCacheAttributes getCacheAttributes();
-
-    /**
-     * Sets the ICompositeCacheAttributes of the cache region
-     * <p>
-     * @param cattr The new ICompositeCacheAttribute value
-     */
-    public void setCacheAttributes( ICompositeCacheAttributes cattr );
-
-    /**
-     * This instructs the memory cache to remove the <i>numberToFree</i> according to its eviction
-     * policy. For example, the LRUMemoryCache will remove the <i>numberToFree</i> least recently
-     * used items. These will be spooled to disk if a disk auxiliary is available.
-     * <p>
-     * @param numberToFree
-     * @return the number that were removed. if you ask to free 5, but there are only 3, you will
-     *         get 3.
-     * @throws CacheException
-     */
-    public int freeMemoryElements( int numberToFree )
-        throws CacheException;
 }
diff --git a/src/java/org/apache/commons/jcs/access/behavior/ICacheAccessManagement.java b/src/java/org/apache/commons/jcs/access/behavior/ICacheAccessManagement.java
new file mode 100644
index 000000000..21c01f4b1
--- /dev/null
+++ b/src/java/org/apache/commons/jcs/access/behavior/ICacheAccessManagement.java
@@ -0,0 +1,111 @@
+package org.apache.commons.jcs.access.behavior;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import org.apache.commons.jcs.access.exception.CacheException;
+import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
+import org.apache.commons.jcs.engine.behavior.IElementAttributes;
+import org.apache.commons.jcs.engine.stats.behavior.ICacheStats;
+
+/**
+ * ICacheAccessManagement defines the methods for cache management, cleanup and shutdown.
+ */
+public interface ICacheAccessManagement
+{
+    /**
+     * Dispose this region. Flushes objects to and closes auxiliary caches. This is a shutdown
+     * command!
+     * <p>
+     * To simply remove all elements from the region use clear().
+     */
+    void dispose();
+
+    /**
+     * Removes all of the elements from a region.
+     * <p>
+     * @throws CacheException
+     */
+    void clear() throws CacheException;
+
+    /**
+     * GetElementAttributes will return an attribute object describing the current attributes
+     * associated with the object name. If no name parameter is available, the attributes for the
+     * region will be returned. The name object must override the Object.equals and Object.hashCode
+     * methods.
+     * <p>
+     * @return The elementAttributes value
+     * @throws CacheException
+     */
+    IElementAttributes getDefaultElementAttributes()
+        throws CacheException;
+
+    /**
+     * This method is does not reset the attributes for items already in the cache. It could
+     * potentially do this for items in memory, and maybe on disk (which would be slow) but not
+     * remote items. Rather than have unpredictable behavior, this method just sets the default
+     * attributes. Items subsequently put into the cache will use these defaults if they do not
+     * specify specific attributes.
+     * <p>
+     * @param attr the default attributes.
+     * @throws CacheException if something goes wrong.
+     */
+    void setDefaultElementAttributes( IElementAttributes attr ) throws CacheException;
+
+    /**
+     * Gets the ICompositeCacheAttributes of the cache region
+     * <p>
+     * @return ICompositeCacheAttributes
+     */
+    ICompositeCacheAttributes getCacheAttributes();
+
+    /**
+     * Sets the ICompositeCacheAttributes of the cache region
+     * <p>
+     * @param cattr The new ICompositeCacheAttribute value
+     */
+    void setCacheAttributes( ICompositeCacheAttributes cattr );
+
+    /**
+     * This instructs the memory cache to remove the <i>numberToFree</i> according to its eviction
+     * policy. For example, the LRUMemoryCache will remove the <i>numberToFree</i> least recently
+     * used items. These will be spooled to disk if a disk auxiliary is available.
+     * <p>
+     * @param numberToFree
+     * @return the number that were removed. if you ask to free 5, but there are only 3, you will
+     *         get 3.
+     * @throws CacheException
+     */
+    int freeMemoryElements( int numberToFree )
+        throws CacheException;
+
+    /**
+     * This returns the ICacheStats object with information on this region and its auxiliaries.
+     * <p>
+     * This data can be formatted as needed.
+     * <p>
+     * @return ICacheStats
+     */
+    ICacheStats getStatistics();
+
+    /**
+     * @return A String version of the stats.
+     */
+    String getStats();
+}
diff --git a/src/java/org/apache/commons/jcs/access/behavior/IGroupCacheAccess.java b/src/java/org/apache/commons/jcs/access/behavior/IGroupCacheAccess.java
index 11fa942af..54f21a1c1 100644
--- a/src/java/org/apache/commons/jcs/access/behavior/IGroupCacheAccess.java
+++ b/src/java/org/apache/commons/jcs/access/behavior/IGroupCacheAccess.java
@@ -30,6 +30,7 @@
  * classes.
  */
 public interface IGroupCacheAccess<K extends Serializable, V extends Serializable>
+    extends ICacheAccessManagement
 {
     /**
      * Gets the g attribute of the IGroupCacheAccess object
@@ -70,7 +71,7 @@ void putInGroup( K key, String group, V obj, IElementAttributes attr )
      * @param name
      * @param group
      */
-    public void remove( K name, String group );
+    public void removeFromGroup( K name, String group );
 
     /**
      * Gets the set of keys of objects currently in the group
diff --git a/src/java/org/apache/commons/jcs/auxiliary/AuxiliaryCache.java b/src/java/org/apache/commons/jcs/auxiliary/AuxiliaryCache.java
index 310c29e2e..dd2c9be3f 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/AuxiliaryCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/AuxiliaryCache.java
@@ -38,21 +38,15 @@ public interface AuxiliaryCache<K extends Serializable, V extends Serializable>
     extends ICache<K, V>
 {
     /**
-     * Gets the set of keys of objects currently in the group
-     * @param group
-     * @return a set of group keys
-     * @throws IOException
-     */
-    Set<K> getGroupKeys( String group )
-        throws IOException;
-
-    /**
-     * Gets the set of group names currently in the cache
-     * @return a set of group names
-     * @throws IOException
+     * Get a set of the keys for all elements in the auxiliary cache.
+     * <p>
+     * @return a set of the key type
+     * @TODO This should probably be done in chunks with a range passed in. This
+     *       will be a problem if someone puts a 1,000,000 or so items in a
+     *       region.
+     * @throws IOException if access to the auxiliary cache fails
      */
-    Set<String> getGroupNames()
-        throws IOException;
+    Set<K> getKeySet() throws IOException;
 
     /**
      * @return the historical and statistical data for a region's auxiliary cache.
diff --git a/src/java/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCache.java b/src/java/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCache.java
index 8199858bf..a38f31eaa 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCache.java
@@ -360,18 +360,11 @@ public Map<K, ICacheElement<K, V>> processGetMultiple(Set<K> keys)
     }
 
     /**
-     * The keys in a group.
+     * The keys in the cache.
      * <p>
-     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getGroupKeys(java.lang.String)
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public abstract Set<K> getGroupKeys( String groupName );
-
-    /**
-     * The group names in the cache.
-     * <p>
-     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getGroupNames()
-     */
-    public abstract Set<String> getGroupNames();
+    public abstract Set<K> getKeySet() throws IOException;
 
     /**
      * Removes are not queued. A call to remove is immediate.
diff --git a/src/java/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCache.java b/src/java/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCache.java
index cdaa20727..3cad13191 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCache.java
@@ -41,7 +41,6 @@
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.behavior.IRequireScheduler;
 import org.apache.commons.jcs.engine.control.group.GroupAttrName;
-import org.apache.commons.jcs.engine.control.group.GroupId;
 import org.apache.commons.jcs.engine.stats.StatElement;
 import org.apache.commons.jcs.engine.stats.Stats;
 import org.apache.commons.jcs.engine.stats.behavior.IStatElement;
@@ -231,29 +230,20 @@ protected boolean verifyDisk()
     }
 
     /**
-     * This requires a full iteration through the keys.
+     * Return the keys in this cache.
      * <p>
-     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getGroupKeys(java.lang.String)
+     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
      */
     @Override
-    public Set<K> getGroupKeys( String groupName )
+    public Set<K> getKeySet() throws IOException
     {
-        GroupId groupId = new GroupId( cacheName, groupName );
         HashSet<K> keys = new HashSet<K>();
 
         storageLock.readLock().lock();
 
         try
         {
-            for ( K key : this.keyStore.keySet())
-            {
-                if ( key instanceof GroupAttrName && ( (GroupAttrName<?>) key ).groupId.equals( groupId ) )
-                {
-                    @SuppressWarnings("unchecked") // Type checked with instanceof
-                    K newKey = ((GroupAttrName<K>) key ).attrName;
-                    keys.add( newKey );
-                }
-            }
+            keys.addAll(this.keyStore.keySet());
         }
         finally
         {
@@ -263,38 +253,6 @@ public Set<K> getGroupKeys( String groupName )
         return keys;
     }
 
-    /**
-     * This requires a full iteration through the keys.
-     * <p>
-     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getGroupNames()
-     */
-    @Override
-    public Set<String> getGroupNames()
-    {
-        HashSet<String> names = new HashSet<String>();
-
-        storageLock.readLock().lock();
-
-        try
-        {
-            for ( Serializable key : this.keyStore.keySet())
-            {
-                if ( key instanceof GroupAttrName )
-                {
-                    @SuppressWarnings("unchecked") // Type checked with instanceof
-                    GroupId groupID = ((GroupAttrName<K>) key ).groupId;
-                    names.add( groupID.groupName );
-                }
-            }
-        }
-        finally
-        {
-            storageLock.readLock().unlock();
-        }
-
-        return names;
-    }
-
     /**
      * Gets matching items from the cache.
      * <p>
diff --git a/src/java/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCache.java b/src/java/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCache.java
index e04d4e972..b6da17883 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCache.java
@@ -135,24 +135,12 @@ protected <KK extends Serializable> File file( KK key )
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
-     * @param group
-     * @return a Set of group keys.
+     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
      */
     @Override
-    public Set<K> getGroupKeys(String groupName)
-    {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     */
-    @Override
-    public Set<String> getGroupNames()
+    public Set<K> getKeySet() throws IOException
     {
         throw new UnsupportedOperationException();
     }
diff --git a/src/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java b/src/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
index 411cb0218..9ae53df8e 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCache.java
@@ -739,66 +739,27 @@ private ICacheElement<K, V> readElement( K key )
     }
 
     /**
-     * Gets the group keys from the disk.
+     * Return the keys in this cache.
      * <p>
-     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getGroupKeys(java.lang.String)
+     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
      */
     @Override
-    public Set<K> getGroupKeys( String groupName )
+    public Set<K> getKeySet() throws IOException
     {
-        GroupId groupId = new GroupId( cacheName, groupName );
         HashSet<K> keys = new HashSet<K>();
-        try
-        {
-            storageLock.readLock().lock();
-
-            for (Serializable k : keyHash.keySet())
-            {
-                if ( k instanceof GroupAttrName && ( (GroupAttrName<?>) k ).groupId.equals( groupId ) )
-                {
-                    @SuppressWarnings("unchecked") // Type checked with instanceof
-                    GroupAttrName<K> groupAttrName = (GroupAttrName<K>) k;
-                    keys.add( groupAttrName.attrName );
-                }
-            }
-        }
-        finally
-        {
-            storageLock.readLock().unlock();
-        }
 
-        return keys;
-    }
+        storageLock.readLock().lock();
 
-    /**
-     * Gets the group names from the disk.
-     * <p>
-     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getGroupKeys(java.lang.String)
-     */
-    @Override
-    public Set<String> getGroupNames()
-    {
-        HashSet<String> names = new HashSet<String>();
         try
         {
-            storageLock.readLock().lock();
-
-            for (K k : keyHash.keySet())
-            {
-                if ( k instanceof GroupAttrName )
-                {
-                    @SuppressWarnings("unchecked") // Type checked with instanceof
-                    GroupAttrName<K> groupAttrName = (GroupAttrName<K>) k;
-                    names.add( groupAttrName.groupId.groupName );
-                }
-            }
+            keys.addAll(this.keyHash.keySet());
         }
         finally
         {
             storageLock.readLock().unlock();
         }
 
-        return names;
+        return keys;
     }
 
     /**
diff --git a/src/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java b/src/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
index bae5fa221..b345b3a64 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCache.java
@@ -1038,21 +1038,12 @@ public int getSize()
     }
 
     /**
-     * @param groupName
-     * @return Set
-     */
-    @Override
-    public Set<K> getGroupKeys( String groupName )
-    {
-        throw new UnsupportedOperationException( "Groups not implemented." );
-        // return null;
-    }
-    
-    /**
-     * @return Set
+     * Return the keys in this cache.
+     * <p>
+     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
      */
     @Override
-    public Set<String> getGroupNames()
+    public Set<K> getKeySet() throws IOException
     {
         throw new UnsupportedOperationException( "Groups not implemented." );
         // return null;
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCache.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCache.java
index 492b6d583..08d75e922 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCache.java
@@ -52,7 +52,7 @@ public class LateralCache<K extends Serializable, V extends Serializable>
     private final static Log log = LogFactory.getLog( LateralCache.class );
 
     /** generalize this, use another interface */
-    private final ILateralCacheAttributes lateralCacheAttribures;
+    private final ILateralCacheAttributes lateralCacheAttributes;
 
     /** The region name */
     final String cacheName;
@@ -73,7 +73,7 @@ public class LateralCache<K extends Serializable, V extends Serializable>
     public LateralCache( ILateralCacheAttributes cattr, ICacheServiceNonLocal<K, V> lateral, LateralCacheMonitor monitor )
     {
         this.cacheName = cattr.getCacheName();
-        this.lateralCacheAttribures = cattr;
+        this.lateralCacheAttributes = cattr;
         this.lateralCacheService = lateral;
         this.monitor = monitor;
     }
@@ -86,7 +86,7 @@ public LateralCache( ILateralCacheAttributes cattr, ICacheServiceNonLocal<K, V>
     public LateralCache( ILateralCacheAttributes cattr )
     {
         this.cacheName = cattr.getCacheName();
-        this.lateralCacheAttribures = cattr;
+        this.lateralCacheAttributes = cattr;
     }
 
     /**
@@ -111,12 +111,12 @@ protected void processUpdate( ICacheElement<K, V> ce )
         catch ( NullPointerException npe )
         {
             log.error( "Failure updating lateral. lateral = " + lateralCacheService, npe );
-            handleException( npe, "Failed to put [" + ce.getKey() + "] to " + ce.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( npe, "Failed to put [" + ce.getKey() + "] to " + ce.getCacheName() + "@" + lateralCacheAttributes );
             return;
         }
         catch ( Exception ex )
         {
-            handleException( ex, "Failed to put [" + ce.getKey() + "] to " + ce.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( ex, "Failed to put [" + ce.getKey() + "] to " + ce.getCacheName() + "@" + lateralCacheAttributes );
         }
     }
 
@@ -133,7 +133,7 @@ protected ICacheElement<K, V> processGet( K key )
     {
         ICacheElement<K, V> obj = null;
 
-        if ( this.lateralCacheAttribures.getPutOnlyMode() )
+        if ( this.lateralCacheAttributes.getPutOnlyMode() )
         {
             return null;
         }
@@ -144,7 +144,7 @@ protected ICacheElement<K, V> processGet( K key )
         catch ( Exception e )
         {
             log.error( e );
-            handleException( e, "Failed to get [" + key + "] from " + lateralCacheAttribures.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( e, "Failed to get [" + key + "] from " + lateralCacheAttributes.getCacheName() + "@" + lateralCacheAttributes );
         }
         return obj;
     }
@@ -159,7 +159,7 @@ protected ICacheElement<K, V> processGet( K key )
     protected Map<K, ICacheElement<K, V>> processGetMatching( String pattern )
         throws IOException
     {
-        if ( this.lateralCacheAttribures.getPutOnlyMode() )
+        if ( this.lateralCacheAttributes.getPutOnlyMode() )
         {
             return Collections.emptyMap();
         }
@@ -170,7 +170,7 @@ protected Map<K, ICacheElement<K, V>> processGetMatching( String pattern )
         catch ( IOException e )
         {
             log.error( e );
-            handleException( e, "Failed to getMatching [" + pattern + "] from " + lateralCacheAttribures.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( e, "Failed to getMatching [" + pattern + "] from " + lateralCacheAttributes.getCacheName() + "@" + lateralCacheAttributes );
             return Collections.emptyMap();
         }
     }
@@ -206,44 +206,20 @@ protected Map<K, ICacheElement<K, V>> processGetMultiple( Set<K> keys )
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
-     * @param group
-     * @return a Set of group keys.
-     * @throws IOException
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String groupName )
-        throws IOException
-    {
-        try
-        {
-            return lateralCacheService.getGroupKeys( cacheName, groupName );
-        }
-        catch ( Exception ex )
-        {
-            handleException( ex, "Failed to remove groupName [" + groupName + "] from " + lateralCacheAttribures.getCacheName() + "@"
-                + lateralCacheAttribures );
-        }
-        return Collections.emptySet();
-    }
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     * @throws IOException
-     */
-    public Set<String> getGroupNames()
-        throws IOException
+    public Set<K> getKeySet() throws IOException
     {
         try
         {
-            return lateralCacheService.getGroupNames( cacheName );
+            return lateralCacheService.getKeySet( cacheName );
         }
         catch ( Exception ex )
         {
-            handleException( ex, "Failed to get group names from " + lateralCacheAttribures.getCacheName() + "@"
-                + lateralCacheAttribures );
+            handleException( ex, "Failed to get key set from " + lateralCacheAttributes.getCacheName() + "@"
+                + lateralCacheAttributes );
         }
         return Collections.emptySet();
     }
@@ -271,7 +247,7 @@ protected boolean processRemove( K key )
         }
         catch ( Exception ex )
         {
-            handleException( ex, "Failed to remove " + key + " from " + lateralCacheAttribures.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( ex, "Failed to remove " + key + " from " + lateralCacheAttributes.getCacheName() + "@" + lateralCacheAttributes );
         }
         return false;
     }
@@ -292,7 +268,7 @@ protected void processRemoveAll()
         }
         catch ( Exception ex )
         {
-            handleException( ex, "Failed to remove all from " + lateralCacheAttribures.getCacheName() + "@" + lateralCacheAttribures );
+            handleException( ex, "Failed to remove all from " + lateralCacheAttributes.getCacheName() + "@" + lateralCacheAttributes );
         }
     }
 
@@ -313,13 +289,13 @@ protected void processDispose()
         // any.
         try
         {
-            lateralCacheService.dispose( this.lateralCacheAttribures.getCacheName() );
+            lateralCacheService.dispose( this.lateralCacheAttributes.getCacheName() );
             // Should remove connection
         }
         catch ( Exception ex )
         {
             log.error( "Couldn't dispose", ex );
-            handleException( ex, "Failed to dispose " + lateralCacheAttribures.getCacheName() );
+            handleException( ex, "Failed to dispose " + lateralCacheAttributes.getCacheName() );
         }
     }
 
@@ -375,7 +351,7 @@ private void handleException( Exception ex, String msg )
     {
         log.error( "Disabling lateral cache due to error " + msg, ex );
 
-        lateralCacheService = new ZombieCacheServiceNonLocal<K, V>( lateralCacheAttribures.getZombieQueueMaxSize() );
+        lateralCacheService = new ZombieCacheServiceNonLocal<K, V>( lateralCacheAttributes.getZombieQueueMaxSize() );
         // may want to flush if region specifies
         // Notify the cache monitor about the error, and kick off the recovery
         // process.
@@ -437,7 +413,7 @@ public String getStats()
      */
     public AuxiliaryCacheAttributes getAuxiliaryCacheAttributes()
     {
-        return lateralCacheAttribures;
+        return lateralCacheAttributes;
     }
 
     /**
@@ -448,8 +424,8 @@ public String toString()
     {
         StringBuffer buf = new StringBuffer();
         buf.append( "\n LateralCache " );
-        buf.append( "\n Cache Name [" + lateralCacheAttribures.getCacheName() + "]" );
-        buf.append( "\n cattr =  [" + lateralCacheAttribures + "]" );
+        buf.append( "\n Cache Name [" + lateralCacheAttributes.getCacheName() + "]" );
+        buf.append( "\n cattr =  [" + lateralCacheAttributes + "]" );
         return buf.toString();
     }
 
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWait.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWait.java
index ab4f273ea..fd697e731 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWait.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWait.java
@@ -224,31 +224,15 @@ public Map<K, ICacheElement<K, V>> getMatching(String pattern)
     }
 
     /**
-     * @param groupName
-     * @return Set
-     */
-    public Set<K> getGroupKeys(String groupName)
-    {
-        try
-        {
-            return cache.getGroupKeys( groupName );
-        }
-        catch ( IOException ex )
-        {
-            log.error( ex );
-            eventQueue.destroy();
-        }
-        return Collections.emptySet();
-    }
-    
-    /**
-     * @return Set
+     * Return the keys in this cache.
+     * <p>
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<String> getGroupNames()
+    public Set<K> getKeySet() throws IOException
     {
         try
         {
-            return cache.getGroupNames( );
+            return cache.getKeySet();
         }
         catch ( IOException ex )
         {
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacade.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacade.java
index 4a28622b6..0e23049a0 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacade.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacade.java
@@ -293,12 +293,11 @@ public Map<K, ICacheElement<K, V>> getMatching(String pattern)
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
-     * @param group
-     * @return a Set of group keys.
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String group )
+    public Set<K> getKeySet() throws IOException
     {
         HashSet<K> allKeys = new HashSet<K>();
         for ( int i = 0; i < noWaits.length; i++ )
@@ -306,47 +305,10 @@ public Set<K> getGroupKeys( String group )
             AuxiliaryCache<K, V> aux = noWaits[i];
             if ( aux != null )
             {
-                try
+                Set<K> keys = aux.getKeySet();
+                if(keys != null)
                 {
-                    Set<K> groupKeys = aux.getGroupKeys( group );
-                    if(groupKeys != null)
-                    {
-                    	allKeys.addAll( groupKeys );
-                    }
-                }
-                catch ( IOException e )
-                {
-                    // ignore
-                }
-            }
-        }
-        return allKeys;
-    }
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     */
-    public Set<String> getGroupNames()
-    {
-        HashSet<String> allKeys = new HashSet<String>();
-        for ( int i = 0; i < noWaits.length; i++ )
-        {
-            AuxiliaryCache<K, V> aux = noWaits[i];
-            if ( aux != null )
-            {
-                try
-                {
-                    Set<String> groupNames = aux.getGroupNames();
-                    if(groupNames != null)
-                    {
-                    	allKeys.addAll( groupNames );
-                    }
-                }
-                catch ( IOException e )
-                {
-                    // ignore
+                    allKeys.addAll( keys );
                 }
             }
         }
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCommand.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCommand.java
index 3a79c3f37..5c4ff57ee 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCommand.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/LateralCommand.java
@@ -42,9 +42,6 @@ public enum LateralCommand
     /** Command to return an object. */
     GET_MATCHING,
 
-    /** Command to get all group keys */
-    GET_GROUP_KEYS,
-
-    /** Command to get all group keys */
-    GET_GROUP_NAMES
+    /** Command to get all keys */
+    GET_KEYSET
 }
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPListener.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPListener.java
index 2d8dd5868..8ef0e035b 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPListener.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPListener.java
@@ -36,7 +36,6 @@
 
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.auxiliary.lateral.LateralCacheInfo;
-import org.apache.commons.jcs.auxiliary.lateral.LateralCommand;
 import org.apache.commons.jcs.auxiliary.lateral.LateralElementDescriptor;
 import org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheListener;
 import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.behavior.ITCPLateralCacheAttributes;
@@ -337,28 +336,15 @@ public Map<K, ICacheElement<K, V>> handleGetMatching( String cacheName, String p
     }
 
     /**
-     * Gets the cache that was injected by the lateral factory. Calls getGroupKeys on the cache.
+     * Gets the cache that was injected by the lateral factory. Calls getKeySet on the cache.
      * <p>
      * @param cacheName the name of the cache
-     * @param group the group name
      * @return a set of keys
      * @throws IOException
      */
-    public Set<K> handleGetGroupKeys( String cacheName, String group ) throws IOException
+    public Set<K> handleGetKeySet( String cacheName ) throws IOException
     {
-    	return getCache( cacheName ).getGroupKeys(group, true);
-    }
-
-    /**
-     * Gets the cache that was injected by the lateral factory. Calls getGroupNames on the cache.
-     * <p>
-     * @param cacheName the name of the cache
-     * @return a set of group names
-     * @throws IOException
-     */
-    public Set<String> handleGetGroupNames( String cacheName ) throws IOException
-    {
-    	return getCache( cacheName ).getGroupNames(true);
+    	return getCache( cacheName ).getKeySet(true);
     }
 
     /**
@@ -489,7 +475,7 @@ public class ListenerThread
         public void run()
         {
         	ServerSocket serverSocket = null;
-        	
+
             try
             {
                 log.info( "Listening on port " + port );
@@ -551,11 +537,11 @@ public void run()
             {
             	if (serverSocket != null)
             	{
-            		try 
+            		try
             		{
 						serverSocket.close();
 					}
-            		catch (IOException e) 
+            		catch (IOException e)
             		{
                         log.error( "Exception caught closing socket", e );
 					}
@@ -665,78 +651,69 @@ private void handle( LateralElementDescriptor<K, V> led )
         {
             String cacheName = led.ce.getCacheName();
             K key = led.ce.getKey();
+            Serializable obj = null;
 
-            if ( led.command == LateralCommand.UPDATE )
+            switch (led.command)
             {
-                handlePut( led.ce );
-            }
-            else if ( led.command == LateralCommand.REMOVE )
-            {
-                // if a hashcode was given and filtering is on
-                // check to see if they are the same
-                // if so, then don't remove, otherwise issue a remove
-                if ( led.valHashCode != -1 )
-                {
-                    if ( getTcpLateralCacheAttributes().isFilterRemoveByHashCode() )
+                case UPDATE:
+                    handlePut( led.ce );
+                    break;
+
+                case REMOVE:
+                    // if a hashcode was given and filtering is on
+                    // check to see if they are the same
+                    // if so, then don't remove, otherwise issue a remove
+                    if ( led.valHashCode != -1 )
                     {
-                        ICacheElement<K, V> test = getCache( cacheName ).localGet( key );
-                        if ( test != null )
+                        if ( getTcpLateralCacheAttributes().isFilterRemoveByHashCode() )
                         {
-                            if ( test.getVal().hashCode() == led.valHashCode )
+                            ICacheElement<K, V> test = getCache( cacheName ).localGet( key );
+                            if ( test != null )
                             {
-                                if ( log.isDebugEnabled() )
+                                if ( test.getVal().hashCode() == led.valHashCode )
                                 {
-                                    log.debug( "Filtering detected identical hashCode [" + led.valHashCode
-                                        + "], not issuing a remove for led " + led );
+                                    if ( log.isDebugEnabled() )
+                                    {
+                                        log.debug( "Filtering detected identical hashCode [" + led.valHashCode
+                                            + "], not issuing a remove for led " + led );
+                                    }
+                                    return;
                                 }
-                                return;
-                            }
-                            else
-                            {
-                                if ( log.isDebugEnabled() )
+                                else
                                 {
-                                    log.debug( "Different hashcodes, in cache [" + test.getVal().hashCode()
-                                        + "] sent [" + led.valHashCode + "]" );
+                                    if ( log.isDebugEnabled() )
+                                    {
+                                        log.debug( "Different hashcodes, in cache [" + test.getVal().hashCode()
+                                            + "] sent [" + led.valHashCode + "]" );
+                                    }
                                 }
                             }
                         }
                     }
-                }
-                handleRemove( cacheName, key );
-            }
-            else if ( led.command == LateralCommand.REMOVEALL )
-            {
-                handleRemoveAll( cacheName );
-            }
-            else if ( led.command == LateralCommand.GET )
-            {
-                Serializable obj = handleGet( cacheName, key );
+                    handleRemove( cacheName, key );
+                    break;
 
-                ObjectOutputStream oos = new ObjectOutputStream( socket.getOutputStream() );
-                oos.writeObject( obj );
-                oos.flush();
-            }
-            else if ( led.command == LateralCommand.GET_MATCHING )
-            {
-                Map<K, ICacheElement<K, V>> obj = handleGetMatching( cacheName, (String) key );
+                case REMOVEALL:
+                    handleRemoveAll( cacheName );
+                    break;
 
-                ObjectOutputStream oos = new ObjectOutputStream( socket.getOutputStream() );
-                oos.writeObject( obj );
-                oos.flush();
-            }
-            else if ( led.command == LateralCommand.GET_GROUP_KEYS )
-            {
-            	String groupName = (String) key;
-            	Set<K> obj = handleGetGroupKeys(cacheName, groupName);
+                case GET:
+                    obj = handleGet( cacheName, key );
+                    break;
 
-                ObjectOutputStream oos = new ObjectOutputStream( socket.getOutputStream() );
-                oos.writeObject( obj );
-                oos.flush();
+                case GET_MATCHING:
+                    obj = (Serializable) handleGetMatching( cacheName, (String) key );
+                    break;
+
+                case GET_KEYSET:
+                	obj = (Serializable) handleGetKeySet(cacheName);
+                    break;
+
+                default: break;
             }
-            else if ( led.command == LateralCommand.GET_GROUP_NAMES )
-            {
-            	Set<String> obj = handleGetGroupNames(cacheName);
 
+            if (obj != null)
+            {
                 ObjectOutputStream oos = new ObjectOutputStream( socket.getOutputStream() );
                 oos.writeObject( obj );
                 oos.flush();
diff --git a/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPService.java b/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPService.java
index e51315e97..78cb43ecf 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPService.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPService.java
@@ -363,49 +363,22 @@ public Map<K, ICacheElement<K, V>> getMultiple( String cacheName, Set<K> keys, l
     }
 
     /**
-     * Gets the set of keys of objects currently in the group
+     * Return the keys in this cache.
      * <p>
-     * @param cacheName
-     * @param group
-     * @return Set
+     * @param cacheName the name of the cache region
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
     @SuppressWarnings("unchecked") // Need cast from Object
-    public Set<K> getGroupKeys( String cacheName, String group )
-        throws IOException
-    {
-        CacheElement<String, String> ce = new CacheElement<String, String>(cacheName, group, null);
-        LateralElementDescriptor<String, String> led = new LateralElementDescriptor<String, String>(ce);
-        // led.requesterId = requesterId; // later
-        led.command = LateralCommand.GET_GROUP_KEYS;
-        Object response = sender.sendAndReceive(led);
-        if (response != null)
-        {
-            return (Set<K>) response;
-        }
-
-        return null;
-    }
-
-    /**
-     * Gets the set of groups currently in the cache throws
-     * UnsupportedOperationException
-     * <p>
-     *
-     * @param cacheName
-     * @return Set
-     */
-    @SuppressWarnings("unchecked") // Need cast from Object
-    public Set<String> getGroupNames(String cacheName)
-        throws IOException
+    public Set<K> getKeySet(String cacheName) throws IOException
     {
         CacheElement<String, String> ce = new CacheElement<String, String>(cacheName, null, null);
         LateralElementDescriptor<String, String> led = new LateralElementDescriptor<String, String>(ce);
         // led.requesterId = requesterId; // later
-        led.command = LateralCommand.GET_GROUP_NAMES;
+        led.command = LateralCommand.GET_KEYSET;
         Object response = sender.sendAndReceive(led);
         if (response != null)
         {
-            return (Set<String>) response;
+            return (Set<K>) response;
         }
 
         return null;
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteAuxiliaryCache.java b/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteAuxiliaryCache.java
index a5b17dc78..422a68e6a 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteAuxiliaryCache.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteAuxiliaryCache.java
@@ -446,30 +446,14 @@ protected void processUpdate( ICacheElement<K, V> ce )
     }
 
     /**
-     * Returns all the keys for a group.
+     * Return the keys in this cache.
      * <p>
-     * @param groupName
-     * @return Set
-     * @throws java.rmi.RemoteException
-     * @throws IOException
-     */
-    public Set<K> getGroupKeys( String groupName )
-        throws java.rmi.RemoteException, IOException
-    {
-        return getRemoteCacheService().getGroupKeys( cacheName, groupName );
-    }
-
-    /**
-     * Returns all the group names for a cache.
-     * <p>
-     * @return Set
-     * @throws java.rmi.RemoteException
-     * @throws IOException
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<String> getGroupNames()
+    public Set<K> getKeySet()
         throws java.rmi.RemoteException, IOException
     {
-        return getRemoteCacheService().getGroupNames( cacheName );
+        return getRemoteCacheService().getKeySet(cacheName);
     }
 
     /**
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteCacheNoWaitFacade.java b/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteCacheNoWaitFacade.java
index b337d2bd5..f42a66608 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteCacheNoWaitFacade.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/AbstractRemoteCacheNoWaitFacade.java
@@ -222,14 +222,11 @@ public Map<K, ICacheElement<K, V>> getMultiple( Set<K> keys )
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
-     * @param group
-     * @return the set of keys of objects currently in the group
-     * @throws IOException
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String group )
-        throws IOException
+    public Set<K> getKeySet() throws IOException
     {
         HashSet<K> allKeys = new HashSet<K>();
         for ( int i = 0; i < noWaits.length; i++ )
@@ -237,42 +234,16 @@ public Set<K> getGroupKeys( String group )
             AuxiliaryCache<K, V> aux = noWaits[i];
             if ( aux != null )
             {
-                Set<K> groupKeys = aux.getGroupKeys( group );
-                if(groupKeys != null)
+                Set<K> keys = aux.getKeySet();
+                if(keys != null)
                 {
-                    allKeys.addAll( groupKeys );
+                    allKeys.addAll( keys );
                 }
             }
         }
         return allKeys;
     }
 
-    /**
-     * Gets the group names in the cache
-     * <p>
-     *
-     * @return the set of group names
-     * @throws IOException
-     */
-    public Set<String> getGroupNames() throws IOException
-    {
-        HashSet<String> names = new HashSet<String>();
-        for (int i = 0; i < noWaits.length; i++)
-        {
-            AuxiliaryCache<K, V> aux = noWaits[i];
-            if (aux != null)
-            {
-                Set<String> groupNames = aux.getGroupNames();
-                if (groupNames != null)
-                {
-                    names.addAll(groupNames);
-                }
-            }
-        }
-
-        return names;
-    }
-
     /**
      * Adds a remove request to the remote cache.
      * <p>
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWait.java b/src/java/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWait.java
index 28b4b5d17..4dee405ab 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWait.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWait.java
@@ -276,24 +276,13 @@ public Map<K, ICacheElement<K, V>> getMultiple( Set<K> keys )
     }
 
     /**
-     * @param groupName
-     * @return the keys for the group name
-     * @throws IOException
-     */
-    public Set<K> getGroupKeys( String groupName )
-        throws IOException
-    {
-        return remoteCacheClient.getGroupKeys( groupName );
-    }
-    
-    /**
-     * @return the group names
-     * @throws IOException
+     * Return the keys in this cache.
+     * <p>
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<String> getGroupNames()
-        throws IOException
+    public Set<K> getKeySet() throws IOException
     {
-        return remoteCacheClient.getGroupNames( );
+        return remoteCacheClient.getKeySet();
     }
 
     /**
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClient.java b/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClient.java
index c638a3574..b35dab63b 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClient.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClient.java
@@ -374,15 +374,12 @@ public void release()
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
      * @param cacheName the name of the cache
-     * @param groupName the name of the group
-     * @return a Set of group keys.
-     * @throws IOException
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String cacheName, String groupName )
-        throws IOException
+    public Set<K> getKeySet( String cacheName ) throws IOException
     {
         if ( !isInitialized() )
         {
@@ -392,7 +389,7 @@ public Set<K> getGroupKeys( String cacheName, String groupName )
         }
 
         RemoteCacheRequest<String, String> remoteHttpCacheRequest =
-            RemoteCacheRequestFactory.createGetGroupKeysRequest( cacheName, groupName, 0 );
+            RemoteCacheRequestFactory.createGetKeySetRequest(cacheName, 0 );
 
         RemoteCacheResponse<Set<K>> remoteHttpCacheResponse = getRemoteDispatcher().dispatchRequest( remoteHttpCacheRequest );
 
@@ -404,36 +401,6 @@ public Set<K> getGroupKeys( String cacheName, String groupName )
         return Collections.emptySet();
     }
 
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     * @throws IOException
-     */
-    public Set<String> getGroupNames( String cacheName )
-        throws IOException
-    {
-        if ( !isInitialized() )
-        {
-            String message = "The Remote Http Client is not initialized.  Cannot process request.";
-            log.warn( message );
-            throw new IOException( message );
-        }
-
-        RemoteCacheRequest<String, String> remoteHttpCacheRequest =
-            RemoteCacheRequestFactory.createGetGroupNamesRequest( cacheName, 0 );
-
-        RemoteCacheResponse<Set<String>> remoteHttpCacheResponse =
-            getRemoteDispatcher().dispatchRequest( remoteHttpCacheRequest );
-
-        if ( remoteHttpCacheResponse != null && remoteHttpCacheResponse.getPayload() != null )
-        {
-            return remoteHttpCacheResponse.getPayload();
-        }
-
-        return Collections.emptySet();
-    }
-
     /**
      * Make and alive request.
      * <p>
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcher.java b/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcher.java
index c867c69ce..08d5ee330 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcher.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcher.java
@@ -167,10 +167,7 @@ protected <K extends Serializable, V extends Serializable> String addParameters(
                     case GET_MULTIPLE:
                         keyValue = remoteCacheRequest.getKeySet() + "";
                         break;
-                    case GET_GROUP_KEYS:
-                        keyValue = remoteCacheRequest.getKey() + "";
-                        break;
-                    case GET_GROUP_NAMES:
+                    case GET_KEYSET:
                         keyValue = remoteCacheRequest.getKey() + "";
                         break;
                     case UPDATE:
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/AbstractRemoteCacheService.java b/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/AbstractRemoteCacheService.java
index dfc5855d4..0b2f4e6cf 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/AbstractRemoteCacheService.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/AbstractRemoteCacheService.java
@@ -302,54 +302,26 @@ abstract Map<K, ICacheElement<K, V>> processGetMultiple( String cacheName, Set<K
         throws IOException;
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in this cache.
      * <p>
-     * @param cacheName
-     * @param group
-     * @return A Set of group keys
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String cacheName, String group )
+    public Set<K> getKeySet( String cacheName )
     {
-        return processGetGroupKeys( cacheName, group );
+        return processGetKeySet( cacheName );
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Gets the set of keys of objects currently in the cache.
      * <p>
      * @param cacheName
-     * @param groupName
      * @return Set
      */
-    public Set<K> processGetGroupKeys( String cacheName, String groupName )
+    public Set<K> processGetKeySet( String cacheName )
     {
         CompositeCache<K, V> cache = getCacheManager().getCache( cacheName );
 
-        return cache.getGroupKeys( groupName );
-    }
-
-    /**
-     * Gets the set of group names currently in the cache.
-     * <p>
-     * @param cacheName
-     * @param group
-     * @return A Set of group names
-     */
-    public Set<String> getGroupNames( String cacheName )
-    {
-        return processGetGroupNames( cacheName );
-    }
-
-    /**
-     * Gets the set of keys of objects currently in the group.
-     * <p>
-     * @param cacheName
-     * @param groupName
-     * @return Set
-     */
-    public Set<String> processGetGroupNames( String cacheName )
-    {
-        CompositeCache<?, ?> cache = getCacheManager().getCache( cacheName );
-        return cache.getGroupNames();
+        return cache.getKeySet();
     }
 
     /**
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptor.java b/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptor.java
index 861488c55..a8e7fc380 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptor.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptor.java
@@ -132,14 +132,9 @@ public <T> RemoteCacheResponse<T> processRequest( RemoteCacheRequest<K, V> reque
                         response.setSuccess( true );
                         // DO NOTHING
                         break;
-                    case GET_GROUP_KEYS:
-                        Set<K> groupKeys = getRemoteCacheService().getGroupKeys( request.getCacheName(),
-                                                                              request.getKey() + "" );
-                        response.setPayload( groupKeys );
-                        break;
-                    case GET_GROUP_NAMES:
-                        Set<String> groupNames = getRemoteCacheService().getGroupNames( request.getCacheName() );
-                        response.setPayload( groupNames );
+                    case GET_KEYSET:
+                        Set<K> keys = getRemoteCacheService().getKeySet( request.getCacheName() );
+                        response.setPayload( keys );
                         break;
                     default:
                         String message = "Unknown event type.  Cannot process " + request;
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServer.java b/src/java/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServer.java
index 3b77f686d..6499a1f7c 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServer.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServer.java
@@ -821,25 +821,23 @@ private Map<K, ICacheElement<K, V>> getMultipleFromCacheListeners( Set<K> keys,
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Return the keys in the cache.
      * <p>
-     * @param cacheName
-     * @param group
-     * @return A Set of group keys
+     * @param cacheName the name of the cache region
+     * @see org.apache.commons.jcs.auxiliary.AuxiliaryCache#getKeySet()
      */
-    public Set<K> getGroupKeys( String cacheName, String group )
+    public Set<K> getKeySet(String cacheName) throws IOException
     {
-        return processGetGroupKeys( cacheName, group );
+        return processGetKeySet( cacheName );
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Gets the set of keys of objects currently in the cache.
      * <p>
      * @param cacheName
-     * @param group
      * @return Set
      */
-    protected Set<K> processGetGroupKeys( String cacheName, String group )
+    protected Set<K> processGetKeySet( String cacheName )
     {
         CacheListeners<K, V> cacheDesc = null;
         try
@@ -857,45 +855,7 @@ protected Set<K> processGetGroupKeys( String cacheName, String group )
         }
 
         CompositeCache<K, V> c = (CompositeCache<K, V>) cacheDesc.cache;
-        return c.getGroupKeys( group );
-    }
-
-    /**
-     * Gets the set of group names currently in the cache.
-     * <p>
-     * @param cacheName the name of the region
-     * @return A Set of group names
-     */
-    public Set<String> getGroupNames(String cacheName)
-    {
-        return processGetGroupNames(cacheName);
-    }
-
-    /**
-     * Gets the set of group names currently in the cache.
-     * <p>
-     * @param cacheName the name of the region
-     * @return A Set of group names
-     */
-    protected Set<String> processGetGroupNames(String cacheName)
-    {
-        CacheListeners<K, V> cacheDesc = null;
-        try
-        {
-            cacheDesc = getCacheListeners(cacheName);
-        }
-        catch (Exception e)
-        {
-            log.error("Problem getting listeners.", e);
-        }
-
-        if (cacheDesc == null)
-        {
-            return Collections.emptySet();
-        }
-
-        CompositeCache<K, V> c = (CompositeCache<K, V>) cacheDesc.cache;
-        return c.getGroupNames();
+        return c.getKeySet();
     }
 
     /**
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactory.java b/src/java/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactory.java
index 4adb59c00..c98daf760 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactory.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactory.java
@@ -115,20 +115,19 @@ public static <K extends Serializable, V extends Serializable> RemoteCacheReques
     }
 
     /**
-     * Creates a GetGroupKeys Request.
+     * Creates a GetKeySet Request.
      * <p>
      * @param cacheName
-     * @param groupName
      * @param requesterId
      * @return RemoteHttpCacheRequest
      */
-    public static RemoteCacheRequest<String, String> createGetGroupKeysRequest( String cacheName, String groupName, long requesterId )
+    public static RemoteCacheRequest<String, String> createGetKeySetRequest( String cacheName, long requesterId )
     {
         RemoteCacheRequest<String, String> request = new RemoteCacheRequest<String, String>();
         request.setCacheName( cacheName );
-        request.setKey( groupName );
+        request.setKey( cacheName );
         request.setRequesterId( requesterId );
-        request.setRequestType( RemoteRequestType.GET_GROUP_KEYS );
+        request.setRequestType( RemoteRequestType.GET_KEYSET );
 
         if ( log.isDebugEnabled() )
         {
@@ -138,29 +137,6 @@ public static RemoteCacheRequest<String, String> createGetGroupKeysRequest( Stri
         return request;
     }
 
-    /**
-     * Creates a GetGroupNames Request.
-     * <p>
-     * @param cacheName
-     * @param requesterId
-     * @return RemoteHttpCacheRequest
-     */
-	public static RemoteCacheRequest<String, String> createGetGroupNamesRequest( String cacheName, int requesterId)
-	{
-	    RemoteCacheRequest<String, String> request = new RemoteCacheRequest<String, String>();
-	    request.setCacheName( cacheName );
-	    request.setKey( cacheName );
-	    request.setRequesterId( requesterId );
-	    request.setRequestType( RemoteRequestType.GET_GROUP_NAMES );
-
-	    if ( log.isDebugEnabled() )
-	    {
-	        log.debug( "Created: " + request );
-	    }
-
-	    return request;
-	}
-
     /**
      * Creates a removeAll Request.
      * <p>
diff --git a/src/java/org/apache/commons/jcs/auxiliary/remote/value/RemoteRequestType.java b/src/java/org/apache/commons/jcs/auxiliary/remote/value/RemoteRequestType.java
index 9cadffdb2..9aa9a74b8 100644
--- a/src/java/org/apache/commons/jcs/auxiliary/remote/value/RemoteRequestType.java
+++ b/src/java/org/apache/commons/jcs/auxiliary/remote/value/RemoteRequestType.java
@@ -27,12 +27,9 @@ public enum RemoteRequestType
     /** Remove All request type. */
     REMOVE_ALL,
 
-    /** Get group keys request type. */
-    GET_GROUP_KEYS,
+    /** Get keys request type. */
+    GET_KEYSET,
 
     /** Dispose request type. */
     DISPOSE,
-
-    /** Get group keys request type. */
-    GET_GROUP_NAMES
 }
diff --git a/src/java/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocal.java b/src/java/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocal.java
index 65ea8dcb7..41a73ba73 100644
--- a/src/java/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocal.java
+++ b/src/java/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocal.java
@@ -179,21 +179,9 @@ public Map<K, ICacheElement<K, V>> getMultiple( String cacheName, Set<K> keys, l
      * Does nothing.
      * <p>
      * @param cacheName - region name
-     * @param groupName - group name
      * @return empty set
      */
-    public Set<K> getGroupKeys( String cacheName, String groupName )
-    {
-        return Collections.emptySet();
-    }
-
-    /**
-     * Does nothing.
-     * <p>
-     * @param cacheName - region name
-     * @return empty set
-     */
-    public Set<String> getGroupNames( String cacheName )
+    public Set<K> getKeySet( String cacheName )
     {
         return Collections.emptySet();
     }
diff --git a/src/java/org/apache/commons/jcs/engine/behavior/ICacheServiceNonLocal.java b/src/java/org/apache/commons/jcs/engine/behavior/ICacheServiceNonLocal.java
index 4e36237e6..567201722 100644
--- a/src/java/org/apache/commons/jcs/engine/behavior/ICacheServiceNonLocal.java
+++ b/src/java/org/apache/commons/jcs/engine/behavior/ICacheServiceNonLocal.java
@@ -69,7 +69,7 @@ void removeAll( String cacheName, long requesterId )
     /**
      * Returns a cache bean from the specified cache; or null if the key does not exist.
      * <p>
-     * Adding the requestor id, allows the cache to determine the sournce of the get.
+     * Adding the requestor id, allows the cache to determine the source of the get.
      * <p>
      * @param cacheName
      * @param key
@@ -107,23 +107,13 @@ Map<K, ICacheElement<K, V>> getMatching( String cacheName, String pattern, long
         throws IOException;
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Get a set of the keys for all elements in the cache.
      * <p>
      * @param cacheName the name of the cache
-     * @param groupName the name of the group
-     * @return a Set of group keys.
-     * @throws IOException
+     * @return a set of the key type
+     * @TODO This should probably be done in chunks with a range passed in. This
+     *       will be a problem if someone puts a 1,000,000 or so items in a
+     *       region.
      */
-    Set<K> getGroupKeys( String cacheName, String groupName )
-        throws IOException;
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @param cacheName the name of the cache
-     * @return a Set of group names.
-     * @throws IOException
-     */
-    Set<String> getGroupNames( String cacheName )
-        throws IOException;
+    Set<K> getKeySet( String cacheName ) throws IOException;
 }
diff --git a/src/java/org/apache/commons/jcs/engine/control/CompositeCache.java b/src/java/org/apache/commons/jcs/engine/control/CompositeCache.java
index 96dce075d..5ed60941d 100644
--- a/src/java/org/apache/commons/jcs/engine/control/CompositeCache.java
+++ b/src/java/org/apache/commons/jcs/engine/control/CompositeCache.java
@@ -36,8 +36,8 @@
 import org.apache.commons.jcs.engine.behavior.ICache;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
-import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes.DiskUsagePattern;
+import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.control.event.ElementEvent;
 import org.apache.commons.jcs.engine.control.event.ElementEventQueue;
 import org.apache.commons.jcs.engine.control.event.behavior.ElementEventType;
@@ -1104,67 +1104,27 @@ protected boolean isExpired( ICacheElement<K, V> element )
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Get a set of the keys for all elements in the cache
      * <p>
-     * @param group the name of the group
-     * @return A Set of keys, or null.
+     * @return A set of the key type
      */
-    public Set<K> getGroupKeys( String group )
+    public Set<K> getKeySet()
     {
-       return getGroupKeys(group, false);
+        return getKeySet(false);
     }
 
     /**
-     * Gets the set of keys of objects currently in the group.
+     * Get a set of the keys for all elements in the cache
      * <p>
-     * @param group the name of the group
-     * @return A Set of keys, or null.
+     * @param localOnly true if only memory keys are requested
+     *
+     * @return A set of the key type
      */
-    public Set<K> getGroupKeys( String group, boolean localOnly )
+    public Set<K> getKeySet(boolean localOnly)
     {
         HashSet<K> allKeys = new HashSet<K>();
-        allKeys.addAll( memCache.getGroupKeys( group ) );
-        for ( int i = 0; i < auxCaches.length; i++ )
-        {
-            AuxiliaryCache<K, V> aux = auxCaches[i];
-            if ( aux != null )
-            {
-                if(!localOnly || aux.getCacheType() == CacheType.DISK_CACHE)
-                {
-                    try
-                    {
-                        allKeys.addAll( aux.getGroupKeys( group ) );
-                    }
-                    catch ( IOException e )
-                    {
-                        // ignore
-                    }
-                }
-            }
-        }
-        return allKeys;
-    }
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     */
-    public Set<String> getGroupNames()
-    {
-        return getGroupNames( false );
-    }
 
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @param localOnly whether to get the group names only from local caches or not
-     * @return a Set of group names.
-     */
-    public Set<String> getGroupNames(boolean localOnly)
-    {
-        HashSet<String> allKeys = new HashSet<String>();
-        allKeys.addAll( memCache.getGroupNames() );
+        allKeys.addAll( memCache.getKeySet() );
         for ( int i = 0; i < auxCaches.length; i++ )
         {
             AuxiliaryCache<K, V> aux = auxCaches[i];
@@ -1174,11 +1134,7 @@ public Set<String> getGroupNames(boolean localOnly)
                 {
                     try
                     {
-                        Set<String> groupNames = aux.getGroupNames();
-                        if(groupNames != null)
-                        {
-                            allKeys.addAll( groupNames );
-                        }
+                        allKeys.addAll( aux.getKeySet() );
                     }
                     catch ( IOException e )
                     {
@@ -1607,7 +1563,7 @@ public String getCacheName()
     }
 
     /**
-     * Gets the default element attribute of the Cache object This returna a copy. It does not
+     * Gets the default element attribute of the Cache object This returns a copy. It does not
      * return a reference to the attributes.
      * <p>
      * @return The attributes value
diff --git a/src/java/org/apache/commons/jcs/engine/memory/AbstractMemoryCache.java b/src/java/org/apache/commons/jcs/engine/memory/AbstractMemoryCache.java
index bccea11ff..4e4c5ba84 100644
--- a/src/java/org/apache/commons/jcs/engine/memory/AbstractMemoryCache.java
+++ b/src/java/org/apache/commons/jcs/engine/memory/AbstractMemoryCache.java
@@ -22,7 +22,6 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
@@ -35,8 +34,6 @@
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.behavior.IRequireScheduler;
 import org.apache.commons.jcs.engine.control.CompositeCache;
-import org.apache.commons.jcs.engine.control.group.GroupAttrName;
-import org.apache.commons.jcs.engine.control.group.GroupId;
 import org.apache.commons.jcs.engine.memory.behavior.IMemoryCache;
 import org.apache.commons.jcs.engine.memory.shrinking.ShrinkerThread;
 import org.apache.commons.jcs.engine.memory.util.MemoryElementDescriptor;
@@ -344,50 +341,4 @@ public CompositeCache<K, V> getCompositeCache()
     {
         return this.cache;
     }
-
-    /**
-     * @param groupName
-     * @return group keys
-     */
-    public Set<K> getGroupKeys( String groupName )
-    {
-        GroupId groupId = new GroupId( getCacheName(), groupName );
-        HashSet<K> keys = new HashSet<K>();
-        synchronized ( map )
-        {
-            for (Map.Entry<K, MemoryElementDescriptor<K, V>> entry : map.entrySet())
-            {
-                K k = entry.getKey();
-
-                if ( k instanceof GroupAttrName && ( (GroupAttrName<K>) k ).groupId.equals( groupId ) )
-                {
-                    keys.add(( (GroupAttrName<K>) k ).attrName );
-                }
-            }
-        }
-        return keys;
-    }
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     */
-    public Set<String> getGroupNames()
-    {
-        HashSet<String> names = new HashSet<String>();
-        synchronized ( map )
-        {
-            for (Map.Entry<K, MemoryElementDescriptor<K, V>> entry : map.entrySet())
-            {
-                K k = entry.getKey();
-
-                if ( k instanceof GroupAttrName )
-                {
-                    names.add(( (GroupAttrName<K>) k ).groupId.groupName );
-                }
-            }
-        }
-        return names;
-    }
 }
diff --git a/src/java/org/apache/commons/jcs/engine/memory/behavior/IMemoryCache.java b/src/java/org/apache/commons/jcs/engine/memory/behavior/IMemoryCache.java
index ceeb38a0f..f90579036 100644
--- a/src/java/org/apache/commons/jcs/engine/memory/behavior/IMemoryCache.java
+++ b/src/java/org/apache/commons/jcs/engine/memory/behavior/IMemoryCache.java
@@ -196,19 +196,4 @@ void update( ICacheElement<K, V> ce )
      * @return The cache value
      */
     CompositeCache<K, V> getCompositeCache();
-
-    /**
-     * Gets the set of keys of objects currently in the group.
-     * <p>
-     * @param group
-     * @return a Set of group keys.
-     */
-    Set<K> getGroupKeys( String group );
-
-    /**
-     * Gets the set of group names in the cache
-     * <p>
-     * @return a Set of group names.
-     */
-    Set<String> getGroupNames();
 }
diff --git a/src/java/org/apache/commons/jcs/utils/access/JCSWorker.java b/src/java/org/apache/commons/jcs/utils/access/JCSWorker.java
index a3552a5db..4af3b07cb 100644
--- a/src/java/org/apache/commons/jcs/utils/access/JCSWorker.java
+++ b/src/java/org/apache/commons/jcs/utils/access/JCSWorker.java
@@ -24,6 +24,8 @@
 import java.util.Map;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
+import org.apache.commons.jcs.access.GroupCacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -96,7 +98,10 @@ public class JCSWorker<K extends Serializable, V extends Serializable>
     private static final Log logger = LogFactory.getLog( JCSWorker.class );
 
     /** The cache we are working with */
-    private JCS<K, V> cache;
+    private CacheAccess<K, V> cache;
+
+    /** The cache we are working with */
+    private GroupCacheAccess<K, V> groupCache;
 
     /**
      * Map to hold who's doing work presently.
@@ -119,6 +124,7 @@ public JCSWorker( final String aRegion )
         try
         {
             cache = JCS.getInstance( aRegion );
+            groupCache = JCS.getGroupCacheInstance( aRegion );
         }
         catch ( CacheException e )
         {
@@ -246,7 +252,7 @@ private V run( K aKey, String aGroup, JCSWorkerHelper aHelper )
             // Try to get the item from the cache
             if ( aGroup != null )
             {
-                result = cache.getFromGroup( aKey, aGroup );
+                result = groupCache.getFromGroup( aKey, aGroup );
             }
             else
             {
@@ -265,7 +271,7 @@ private V run( K aKey, String aGroup, JCSWorkerHelper aHelper )
                 // Stick the result of the work in the cache.
                 if ( aGroup != null )
                 {
-                    cache.putInGroup( aKey, aGroup, result );
+                    groupCache.putInGroup( aKey, aGroup, result );
                 }
                 else
                 {
diff --git a/src/test/org/apache/commons/jcs/ConcurrentRemovalLoadTest.java b/src/test/org/apache/commons/jcs/ConcurrentRemovalLoadTest.java
index c4644dec3..486d6fa34 100644
--- a/src/test/org/apache/commons/jcs/ConcurrentRemovalLoadTest.java
+++ b/src/test/org/apache/commons/jcs/ConcurrentRemovalLoadTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.extensions.ActiveTestSuite;
 import junit.framework.Test;
 import junit.framework.TestCase;
diff --git a/src/test/org/apache/commons/jcs/JCSCacheElementRetrievalUnitTest.java b/src/test/org/apache/commons/jcs/JCSCacheElementRetrievalUnitTest.java
index 69dac70e0..4687c1052 100644
--- a/src/test/org/apache/commons/jcs/JCSCacheElementRetrievalUnitTest.java
+++ b/src/test/org/apache/commons/jcs/JCSCacheElementRetrievalUnitTest.java
@@ -21,7 +21,7 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -39,7 +39,7 @@ public class JCSCacheElementRetrievalUnitTest
     public void testSimpleElementRetrieval()
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         jcs.put( "test_key", "test_data" );
 
diff --git a/src/test/org/apache/commons/jcs/JCSConcurrentCacheAccessUnitTest.java b/src/test/org/apache/commons/jcs/JCSConcurrentCacheAccessUnitTest.java
index 4ab342f7b..88e4c2f40 100644
--- a/src/test/org/apache/commons/jcs/JCSConcurrentCacheAccessUnitTest.java
+++ b/src/test/org/apache/commons/jcs/JCSConcurrentCacheAccessUnitTest.java
@@ -24,6 +24,7 @@
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.apache.commons.jcs.access.GroupCacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 
 /**
@@ -38,7 +39,7 @@ public class JCSConcurrentCacheAccessUnitTest
     /**
      * the cache instance
      */
-    protected JCS<Integer, String> cache;
+    protected GroupCacheAccess<Integer, String> cache;
 
     /**
      * the group name
@@ -55,7 +56,7 @@ protected void setUp() throws Exception
 	{
         super.setUp();
         JCS.setConfigFilename( "/TestJCS-73.ccf" );
-        cache = JCS.getInstance( "cache" );
+        cache = JCS.getGroupCacheInstance( "cache" );
         errcount = new AtomicInteger(0);
 	}
 
@@ -71,7 +72,7 @@ protected void tearDown()
     /**
      * Worker thread
      */
-    private class Worker extends Thread
+    protected class Worker extends Thread
     {
     	@Override
 		public void run()
diff --git a/src/test/org/apache/commons/jcs/JCSLightLoadUnitTest.java b/src/test/org/apache/commons/jcs/JCSLightLoadUnitTest.java
index 20221f3b4..f0ef81216 100644
--- a/src/test/org/apache/commons/jcs/JCSLightLoadUnitTest.java
+++ b/src/test/org/apache/commons/jcs/JCSLightLoadUnitTest.java
@@ -19,12 +19,12 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  * Runs a few thousand queries.
  */
@@ -80,7 +80,7 @@ public static Test suite()
     public void testSimpleLoad()
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
         //        ICompositeCacheAttributes cattr = jcs.getCacheAttributes();
         //        cattr.setMaxObjects( 20002 );
         //        jcs.setCacheAttributes( cattr );
diff --git a/src/test/org/apache/commons/jcs/JCSRemovalSimpleConcurrentTest.java b/src/test/org/apache/commons/jcs/JCSRemovalSimpleConcurrentTest.java
index 4992e3260..89e800d44 100644
--- a/src/test/org/apache/commons/jcs/JCSRemovalSimpleConcurrentTest.java
+++ b/src/test/org/apache/commons/jcs/JCSRemovalSimpleConcurrentTest.java
@@ -19,10 +19,10 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.framework.TestCase;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  * Verify that basic removal functionality works.
  */
@@ -73,7 +73,7 @@ public void testTwoDeepRemoval()
         System.out.println( "testTwoDeepRemoval" );
 
         int count = 500;
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = 0; i <= count; i++ )
         {
@@ -111,7 +111,7 @@ public void testSingleDepthRemoval()
         System.out.println( "testSingleDepthRemoval" );
 
         int count = 500;
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = 0; i <= count; i++ )
         {
@@ -149,7 +149,7 @@ public void testClear()
         System.out.println( "testRemoveAll" );
 
         int count = 500;
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = 0; i <= count; i++ )
         {
@@ -192,7 +192,7 @@ public void testClearRepeatedlyWithoutError()
         System.out.println( "testRemoveAll" );
 
         int count = 500;
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         jcs.clear();
 
diff --git a/src/test/org/apache/commons/jcs/JCSThrashTest.java b/src/test/org/apache/commons/jcs/JCSThrashTest.java
index f671a0fda..c81ca33fa 100644
--- a/src/test/org/apache/commons/jcs/JCSThrashTest.java
+++ b/src/test/org/apache/commons/jcs/JCSThrashTest.java
@@ -25,7 +25,7 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.stats.behavior.IStatElement;
 import org.apache.commons.jcs.engine.stats.behavior.IStats;
 import org.apache.commons.logging.Log;
@@ -45,7 +45,7 @@ public class JCSThrashTest
     /**
      * the cache instance
      */
-    protected JCS<String, Serializable> jcs;
+    protected CacheAccess<String, Serializable> jcs;
 
     /**
      * @param args
diff --git a/src/test/org/apache/commons/jcs/JCSUnitTest.java b/src/test/org/apache/commons/jcs/JCSUnitTest.java
index c75b66041..66a7ec4c2 100644
--- a/src/test/org/apache/commons/jcs/JCSUnitTest.java
+++ b/src/test/org/apache/commons/jcs/JCSUnitTest.java
@@ -23,12 +23,12 @@
 import java.util.LinkedList;
 import java.util.Random;
 
-import org.apache.commons.jcs.JCS;
-
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  * Simple test for the JCS class.
  */
@@ -69,7 +69,7 @@ public static void main( String args[] )
     public void testJCS()
         throws Exception
     {
-        JCS<String, LinkedList<HashMap<String, String>>> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, LinkedList<HashMap<String, String>>> jcs = JCS.getInstance( "testCache1" );
 
         LinkedList<HashMap<String, String>> list = buildList();
 
diff --git a/src/test/org/apache/commons/jcs/JCSvsHashtablePerformanceTest.java b/src/test/org/apache/commons/jcs/JCSvsHashtablePerformanceTest.java
index 5a864b5fd..d3ea5646f 100644
--- a/src/test/org/apache/commons/jcs/JCSvsHashtablePerformanceTest.java
+++ b/src/test/org/apache/commons/jcs/JCSvsHashtablePerformanceTest.java
@@ -25,7 +25,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.memory.lru.LRUMemoryCache;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -115,7 +115,7 @@ public void doWork()
         {
 
             JCS.setConfigFilename( "/TestJCSvHashtablePerf.ccf" );
-            JCS<String, String> cache = JCS.getInstance( "testCache1" );
+            CacheAccess<String, String> cache = JCS.getInstance( "testCache1" );
 
             for ( int j = 0; j < loops; j++ )
             {
diff --git a/src/test/org/apache/commons/jcs/RemovalTestUtil.java b/src/test/org/apache/commons/jcs/RemovalTestUtil.java
index 33421188d..b7c90b95a 100644
--- a/src/test/org/apache/commons/jcs/RemovalTestUtil.java
+++ b/src/test/org/apache/commons/jcs/RemovalTestUtil.java
@@ -19,10 +19,10 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.framework.TestCase;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  * Simple methods to be run by active test suites that test removal.
  *
@@ -55,7 +55,7 @@ public RemovalTestUtil( String testName )
     public void runTestPutThenRemoveCategorical( int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = start; i <= end; i++ )
         {
@@ -93,7 +93,7 @@ public void runTestPutThenRemoveCategorical( int start, int end )
     public void runPutInRange( int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = start; i <= end; i++ )
         {
@@ -121,7 +121,7 @@ public void runPutInRange( int start, int end )
     public void runGetInRange( int start, int end, boolean check )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         // don't care if they are found
         for ( int i = end; i >= start; i-- )
diff --git a/src/test/org/apache/commons/jcs/TestTCPLateralCache.java b/src/test/org/apache/commons/jcs/TestTCPLateralCache.java
index 2672fd5b0..1ca9459e7 100644
--- a/src/test/org/apache/commons/jcs/TestTCPLateralCache.java
+++ b/src/test/org/apache/commons/jcs/TestTCPLateralCache.java
@@ -19,12 +19,12 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.extensions.ActiveTestSuite;
 import junit.framework.Test;
 import junit.framework.TestCase;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  * Test which exercises the indexed disk cache. This one uses three different
  * regions for thre threads.
@@ -121,7 +121,7 @@ public void setUp()
     public void runTestForRegion( String region )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
diff --git a/src/test/org/apache/commons/jcs/ZeroSizeCacheUnitTest.java b/src/test/org/apache/commons/jcs/ZeroSizeCacheUnitTest.java
index 81c3b5e22..9143b7e6f 100644
--- a/src/test/org/apache/commons/jcs/ZeroSizeCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/ZeroSizeCacheUnitTest.java
@@ -19,10 +19,10 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.JCS;
-
 import junit.framework.TestCase;
 
+import org.apache.commons.jcs.access.CacheAccess;
+
 /**
  *
  * @author Aaron Smuts
@@ -56,7 +56,7 @@ public void setUp()
     public void testPutGetRemove()
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         for ( int i = 0; i <= items; i++ )
         {
diff --git a/src/test/org/apache/commons/jcs/access/CacheAccessUnitTest.java b/src/test/org/apache/commons/jcs/access/CacheAccessUnitTest.java
index 6f534cb03..39e1a3974 100644
--- a/src/test/org/apache/commons/jcs/access/CacheAccessUnitTest.java
+++ b/src/test/org/apache/commons/jcs/access/CacheAccessUnitTest.java
@@ -26,7 +26,7 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.access.CacheAccess;
+import org.apache.commons.jcs.JCS;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.access.exception.ObjectExistsException;
 import org.apache.commons.jcs.engine.CompositeCacheAttributes;
@@ -50,7 +50,7 @@ public class CacheAccessUnitTest
     public void testPutSafe()
         throws Exception
     {
-        CacheAccess<String, String> access = CacheAccess.getAccess( "test" );
+        CacheAccess<String, String> access = JCS.getInstance( "test" );
         assertNotNull( "We should have an access class", access );
 
         String key = "mykey";
@@ -83,7 +83,7 @@ public void testPutSafe()
     public void testPutNullKey()
         throws Exception
     {
-        CacheAccess<String, String> access = CacheAccess.getAccess( "test" );
+        CacheAccess<String, String> access = JCS.getInstance( "test" );
         assertNotNull( "We should have an access class", access );
 
         String key = null;
@@ -107,7 +107,7 @@ public void testPutNullKey()
     public void testPutNullValue()
         throws Exception
     {
-        CacheAccess<String, String> access = CacheAccess.getAccess( "test" );
+        CacheAccess<String, String> access = JCS.getInstance( "test" );
         assertNotNull( "We should have an access class", access );
 
         String key = "myKey";
@@ -131,7 +131,7 @@ public void testPutNullValue()
     public void testSetDefaultElementAttributes()
         throws Exception
     {
-        CacheAccess<String, String> access = CacheAccess.getAccess( "test" );
+        CacheAccess<String, String> access = JCS.getInstance( "test" );
         assertNotNull( "We should have an access class", access );
 
         long maxLife = 9876;
@@ -162,7 +162,7 @@ public void testGetCacheElements()
         throws Exception
     {
         //SETUP
-        CacheAccess<String, String> access = CacheAccess.getAccess( "test" );
+        CacheAccess<String, String> access = JCS.getInstance( "test" );
         assertNotNull( "We should have an access class", access );
 
         String keyOne = "mykeyone";
@@ -200,7 +200,7 @@ public void testGetCacheElements()
     public void testRegionDefiniton()
         throws Exception
     {
-        CacheAccess<String, String> access = CacheAccess.defineRegion( "test" );
+        CacheAccess<String, String> access = JCS.defineRegion( "test" );
         assertNotNull( "We should have an access class", access );
     }
 
@@ -216,7 +216,7 @@ public void testRegionDefinitonWithAttributes()
         long maxIdleTime = 8765;
         ca.setMaxMemoryIdleTimeSeconds( maxIdleTime );
 
-        CacheAccess<String, String> access = CacheAccess.defineRegion( "testRegionDefinitonWithAttributes", ca );
+        CacheAccess<String, String> access = JCS.defineRegion( "testRegionDefinitonWithAttributes", ca );
         assertNotNull( "We should have an access class", access );
 
         ICompositeCacheAttributes ca2 = access.getCacheAttributes();
@@ -240,7 +240,7 @@ public void testRegionDefinitonWithBothAttributes()
         IElementAttributes attr = new ElementAttributes();
         attr.setMaxLifeSeconds( maxLife );
 
-        CacheAccess<String, String> access = CacheAccess.defineRegion( "testRegionDefinitonWithAttributes", ca, attr );
+        CacheAccess<String, String> access = JCS.defineRegion( "testRegionDefinitonWithAttributes", ca, attr );
         assertNotNull( "We should have an access class", access );
 
         ICompositeCacheAttributes ca2 = access.getCacheAttributes();
@@ -268,7 +268,7 @@ public void testGetMatching_Normal()
         IElementAttributes attr = new ElementAttributes();
         attr.setMaxLifeSeconds( maxLife );
 
-        CacheAccess<String, Integer> access = CacheAccess.defineRegion( "testGetMatching_Normal", cattr, attr );
+        CacheAccess<String, Integer> access = JCS.defineRegion( "testGetMatching_Normal", cattr, attr );
 
         // DO WORK
         int numToInsertPrefix1 = 10;
@@ -325,7 +325,7 @@ public void testGetMatchingElements_Normal()
         IElementAttributes attr = new ElementAttributes();
         attr.setMaxLifeSeconds( maxLife );
 
-        CacheAccess<String, Integer> access = CacheAccess.defineRegion( "testGetMatching_Normal", cattr, attr );
+        CacheAccess<String, Integer> access = JCS.defineRegion( "testGetMatching_Normal", cattr, attr );
 
         // DO WORK
         int numToInsertPrefix1 = 10;
diff --git a/src/test/org/apache/commons/jcs/access/SystemPropertyUnitTest.java b/src/test/org/apache/commons/jcs/access/SystemPropertyUnitTest.java
index 0ffe4a426..ef97a2e9f 100644
--- a/src/test/org/apache/commons/jcs/access/SystemPropertyUnitTest.java
+++ b/src/test/org/apache/commons/jcs/access/SystemPropertyUnitTest.java
@@ -50,7 +50,7 @@ public void testSystemPropertyInValueDelimiter()
 
         JCS.setConfigFilename( "/TestSystemProperties.ccf" );
 
-        JCS<String, String> cache = JCS.getInstance( "test1" );
+        CacheAccess<String, String> cache = JCS.getInstance( "test1" );
         assertEquals( "We should have used the system property for the memory size", maxMemory, cache
             .getCacheAttributes().getMaxObjects() );
 
@@ -72,7 +72,7 @@ public void testSystemPropertyMissingInValueDelimeter()
         CompositeCacheManager mgr = CompositeCacheManager.getUnconfiguredInstance();
         mgr.configure( "/TestSystemProperties.ccf" );
 
-        JCS<String, String> cache = JCS.getInstance( "missing" );
+        CacheAccess<String, String> cache = JCS.getInstance( "missing" );
         // TODO check against the actual default def
         assertEquals( "We should have used the default property for the memory size", 100, cache.getCacheAttributes()
             .getMaxObjects() );
diff --git a/src/test/org/apache/commons/jcs/access/TestCacheAccess.java b/src/test/org/apache/commons/jcs/access/TestCacheAccess.java
index 09cd4fe39..292c853b2 100644
--- a/src/test/org/apache/commons/jcs/access/TestCacheAccess.java
+++ b/src/test/org/apache/commons/jcs/access/TestCacheAccess.java
@@ -46,7 +46,10 @@ public class TestCacheAccess
     private final static Log log = LogFactory.getLog( TestCacheAccess.class );
 
     /** cache instance to use in testing */
-    private JCS<String, String> cache_control = null;
+    private CacheAccess<String, String> cache_control = null;
+
+    /** cache instance to use in testing */
+    private GroupCacheAccess<String, String> group_cache_control = null;
 
     /** do we use system.out.println to print out debug data? */
     private static boolean isSysOut = false;
@@ -65,6 +68,7 @@ public TestCacheAccess( String regionName )
         try
         {
             cache_control = JCS.getInstance( regionName );
+            group_cache_control = JCS.getGroupCacheInstance( regionName );
         }
         catch ( Exception e )
         {
@@ -365,7 +369,7 @@ else if ( tcnt == 4 )
             long n_start = System.currentTimeMillis();
             try
             {
-                Object obj = cache_control.getFromGroup( key, group );
+                Object obj = group_cache_control.getFromGroup( key, group );
                 if ( show && obj != null )
                 {
                     p( obj.toString() );
@@ -422,7 +426,7 @@ else if ( tcnt == 4 )
             {
                 for ( int a = 0; a < num; a++ )
                 {
-                    Object obj = cache_control.getFromGroup( "keygr" + a, group );
+                    Object obj = group_cache_control.getFromGroup( "keygr" + a, group );
                     if ( show && obj != null )
                     {
                         p( obj.toString() );
@@ -470,7 +474,7 @@ else if ( tcnt == 3 )
         else
         {
             long n_start = System.currentTimeMillis();
-            cache_control.putInGroup( key, group, "data from putg ----asdfasfas-asfasfas-asfas in group " + group );
+            group_cache_control.putInGroup( key, group, "data from putg ----asdfasfas-asfasfas-asfas in group " + group );
             long n_end = System.currentTimeMillis();
             p( "---put " + key + " in group " + group + " in " + String.valueOf( n_end - n_start ) + " millis ---" );
         }
@@ -510,7 +514,7 @@ else if ( tcnt == 3 )
             long n_start = System.currentTimeMillis();
             for ( int a = 0; a < num; a++ )
             {
-                cache_control.putInGroup( "keygr" + a, group, "data " + a
+                group_cache_control.putInGroup( "keygr" + a, group, "data " + a
                     + " from putag ----asdfasfas-asfasfas-asfas in group " + group );
             }
             long n_end = System.currentTimeMillis();
@@ -951,7 +955,7 @@ public static void help()
      */
     public void getAttributeNames( String groupName )
     {
-        Iterator<String> iter = cache_control.getGroupKeys( groupName ).iterator();
+        Iterator<String> iter = group_cache_control.getGroupKeys( groupName ).iterator();
 
         while ( iter.hasNext() )
         {
diff --git a/src/test/org/apache/commons/jcs/admin/AdminBeanUnitTest.java b/src/test/org/apache/commons/jcs/admin/AdminBeanUnitTest.java
index ff834650b..37979ffaa 100644
--- a/src/test/org/apache/commons/jcs/admin/AdminBeanUnitTest.java
+++ b/src/test/org/apache/commons/jcs/admin/AdminBeanUnitTest.java
@@ -24,9 +24,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.admin.CacheElementInfo;
-import org.apache.commons.jcs.admin.CacheRegionInfo;
-import org.apache.commons.jcs.admin.JCSAdminBean;
+import org.apache.commons.jcs.access.CacheAccess;
 
 /**
  * Test the admin bean that is used by the JCSAdmin.jsp
@@ -48,7 +46,7 @@ public void testGetRegionInfo()
         throws Exception
     {
         String regionName = "myRegion";
-        JCS<String, String> cache = JCS.getInstance( regionName );
+        CacheAccess<String, String> cache = JCS.getInstance( regionName );
 
         cache.put( "key", "value" );
 
@@ -84,7 +82,7 @@ public void testGetElementForRegionInfo()
         throws Exception
     {
         String regionName = "myRegion";
-        JCS<String, String> cache = JCS.getInstance( regionName );
+        CacheAccess<String, String> cache = JCS.getInstance( regionName );
 
         // clear the region
         cache.clear();
@@ -114,7 +112,7 @@ public void testRemove()
         JCSAdminBean admin = new JCSAdminBean();
 
         String regionName = "myRegion";
-        JCS<String, String> cache = JCS.getInstance( regionName );
+        CacheAccess<String, String> cache = JCS.getInstance( regionName );
 
         // clear the region
         cache.clear();
@@ -148,7 +146,7 @@ public void testClearAll()
         JCSAdminBean admin = new JCSAdminBean();
 
         String regionName = "myRegion";
-        JCS<String, String> cache = JCS.getInstance( regionName );
+        CacheAccess<String, String> cache = JCS.getInstance( regionName );
 
         String key = "myKey";
         cache.put( key, "value" );
diff --git a/src/test/org/apache/commons/jcs/admin/CountingStreamUnitTest.java b/src/test/org/apache/commons/jcs/admin/CountingStreamUnitTest.java
index 0936fac08..129575bb2 100644
--- a/src/test/org/apache/commons/jcs/admin/CountingStreamUnitTest.java
+++ b/src/test/org/apache/commons/jcs/admin/CountingStreamUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.admin.CountingOnlyOutputStream;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/AuxiliaryCacheConfiguratorUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/AuxiliaryCacheConfiguratorUnitTest.java
index 5755fe66b..2e76b293f 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/AuxiliaryCacheConfiguratorUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/AuxiliaryCacheConfiguratorUnitTest.java
@@ -4,7 +4,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.AuxiliaryCacheConfigurator;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.control.MockElementSerializer;
 import org.apache.commons.jcs.engine.logging.MockCacheEventLogger;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCache.java b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCache.java
index 5c26b688a..a63be6ed0 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCache.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCache.java
@@ -25,8 +25,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.jcs.auxiliary.AbstractAuxiliaryCache;
-import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
 import org.apache.commons.jcs.engine.CacheStatus;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.stats.behavior.IStats;
@@ -156,22 +154,11 @@ public String getCacheName()
     }
 
     /**
-     * @param group
-     * @return null
-     * @throws IOException
-     */
-    public Set<K> getGroupKeys( String group )
-        throws IOException
-    {
-        return null;
-    }
-    
-    /**
-     * @return null
-     * @throws IOException
+     * Return the keys in this cache.
+     * <p>
+     * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
      */
-    public Set<String> getGroupNames()
-        throws IOException
+    public Set<K> getKeySet() throws IOException
     {
         return null;
     }
diff --git a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheAttributes.java b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheAttributes.java
index bac71f5e5..e332f9cf1 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheAttributes.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheAttributes.java
@@ -1,7 +1,5 @@
 package org.apache.commons.jcs.auxiliary;
 
-import org.apache.commons.jcs.auxiliary.AbstractAuxiliaryCacheAttributes;
-import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
 
 /** For testing. */
 public class MockAuxiliaryCacheAttributes
diff --git a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheFactory.java b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheFactory.java
index afc333ec2..429447f1d 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheFactory.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/MockAuxiliaryCacheFactory.java
@@ -2,9 +2,6 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.jcs.auxiliary.AuxiliaryCache;
-import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
-import org.apache.commons.jcs.auxiliary.AuxiliaryCacheFactory;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEventLogger;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCacheUnitTest.java
index 62d54f4b5..c5905dafb 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/AbstractDiskCacheUnitTest.java
@@ -5,6 +5,7 @@
 import java.io.StringWriter;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -12,7 +13,6 @@
 
 import org.apache.commons.jcs.TestLogConfigurationUtil;
 import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache;
 import org.apache.commons.jcs.auxiliary.disk.behavior.IDiskCacheAttributes;
 import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
@@ -185,22 +185,14 @@ protected String getDiskLocation()
         }
 
         /**
-         * @param groupName
-         * @return Collections.EMPTY_SET
-         */
-        @Override
-        public Set<K> getGroupKeys(String groupName)
-        {
-            return Collections.emptySet();
-        }
-
-        /**
-         * @return Collections.EMPTY_SET
+         * Return the keys in this cache.
+         * <p>
+         * @see org.apache.commons.jcs.auxiliary.disk.AbstractDiskCache#getKeySet()
          */
         @Override
-        public Set<String> getGroupNames()
+        public Set<K> getKeySet() throws IOException
         {
-            return Collections.emptySet();
+            return new HashSet<K>(map.keySet());
         }
 
         /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/LRUMapJCSUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/LRUMapJCSUnitTest.java
index 2ccf3b4d3..ead04ee09 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/LRUMapJCSUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/LRUMapJCSUnitTest.java
@@ -5,7 +5,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.TestLogConfigurationUtil;
-import org.apache.commons.jcs.auxiliary.disk.LRUMapJCS;
 
 /** Unit tests for the LRUMapJCS implementation. */
 public class LRUMapJCSUnitTest
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/PurgatoryElementUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/PurgatoryElementUnitTest.java
index c2317480b..7206cf746 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/PurgatoryElementUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/PurgatoryElementUnitTest.java
@@ -2,7 +2,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.disk.PurgatoryElement;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheConcurrentUnitTest.java
index 44d4bc7cf..99a5f1f42 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheConcurrentUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -147,7 +148,7 @@ public void setUp()
     public void runTestForRegion( String region )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
         for ( int i = 0; i <= items; i++ )
@@ -208,7 +209,7 @@ public void runTestForRegion( String region )
     public void runTestForRegionInRange( String region, int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
         for ( int i = start; i <= end; i++ )
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheKeyStoreUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheKeyStoreUnitTest.java
index e745edbc8..134053d26 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheKeyStoreUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheKeyStoreUnitTest.java
@@ -19,10 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskKeyStore;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheManagerUnitTest.java
index 106b2bcfc..2cc69b63e 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheManagerUnitTest.java
@@ -4,9 +4,6 @@
 
 import org.apache.commons.jcs.auxiliary.AuxiliaryCache;
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.control.MockElementSerializer;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEventLogger;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheRandomConcurrentTestUtil.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheRandomConcurrentTestUtil.java
index cd8e9c308..3bb80d5ee 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheRandomConcurrentTestUtil.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheRandomConcurrentTestUtil.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.TestCacheAccess;
 
 /**
@@ -64,7 +65,7 @@ public void runTestForRegion( String region, int range, int numOps, int testNum
 
         // make sure a simple put then get works
         // this may fail if the other tests are flooding the disk cache
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         String key = "testKey" + testNum;
         String data = "testData" + testNum;
         jcs.put( key, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSameRegionConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSameRegionConcurrentUnitTest.java
index d013754dd..07cae0a7a 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSameRegionConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSameRegionConcurrentUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -135,7 +136,7 @@ public void setUp()
     public void runTestForRegion( String region, int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSteadyLoadTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSteadyLoadTest.java
index 423a73301..ecaf75d90 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSteadyLoadTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheSteadyLoadTest.java
@@ -25,6 +25,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.auxiliary.disk.DiskTestObject;
 import org.apache.commons.jcs.utils.timing.ElapsedTimer;
 
@@ -66,7 +67,7 @@ public void testRunSteadyLoadTest()
         int runs = 1000;
         int upperKB = 50;
 
-        JCS<String, DiskTestObject> jcs = JCS.getInstance( ( numPerRun / 2 ) + "aSecond" );
+        CacheAccess<String, DiskTestObject> jcs = JCS.getInstance( ( numPerRun / 2 ) + "aSecond" );
 
         ElapsedTimer timer = new ElapsedTimer();
         int numToGet = numPerRun * ( runs / 10 );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheUnitTest.java
index 1ea0bbb53..1079ec7f4 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskCacheUnitTest.java
@@ -6,9 +6,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDisk;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.utils.serialization.StandardSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskElementDescriptorUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskElementDescriptorUnitTest.java
index 0b27546f2..de4dd2e5c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskElementDescriptorUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskElementDescriptorUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDiskElementDescriptor;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskUnitTest.java
index d0438aa7c..15c7d1532 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/BlockDiskUnitTest.java
@@ -24,7 +24,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.disk.block.BlockDisk;
 import org.apache.commons.jcs.utils.serialization.StandardSerializer;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/block/HugeQuantityBlockDiskCacheLoadTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/block/HugeQuantityBlockDiskCacheLoadTest.java
index ba55a2236..016e92f6e 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/block/HugeQuantityBlockDiskCacheLoadTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/block/HugeQuantityBlockDiskCacheLoadTest.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.utils.timing.ElapsedTimer;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 
@@ -58,7 +59,7 @@ public void testLargeNumberOfItems()
         long initialMemory = measureMemoryUse();
         System.out.println( "Before getting JCS: " + initialMemory );
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         jcs.clear();
 
         try
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheFactoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheFactoryUnitTest.java
index 9a72fda80..23bf9ae0a 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheFactoryUnitTest.java
@@ -3,9 +3,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.disk.file.FileDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.file.FileDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.file.FileDiskCacheFactory;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.control.MockCompositeCacheManager;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheUnitTest.java
index 6f64a4913..85e948eba 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/file/FileDiskCacheUnitTest.java
@@ -4,8 +4,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.disk.file.FileDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.file.FileDiskCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.CacheStatus;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/DiskTestObjectUtil.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/DiskTestObjectUtil.java
index d58f17125..8d8383159 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/DiskTestObjectUtil.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/DiskTestObjectUtil.java
@@ -24,7 +24,6 @@
 import java.util.Random;
 
 import org.apache.commons.jcs.auxiliary.disk.DiskTestObject;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDisk;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.utils.serialization.StandardSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/HugeQuantityIndDiskCacheLoadTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/HugeQuantityIndDiskCacheLoadTest.java
index 767231664..dc4fad7fd 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/HugeQuantityIndDiskCacheLoadTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/HugeQuantityIndDiskCacheLoadTest.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 
 /**
  * Put a few hundred thousand entries in the disk cache.
@@ -50,7 +51,7 @@ public void testLargeNumberOfItems()
         int items = 300000;
         String region = "testCache1";
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         try
         {
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexDiskCacheUnitTest.java
index 485a05642..ab439eca0 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexDiskCacheUnitTest.java
@@ -28,10 +28,6 @@
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
 import org.apache.commons.jcs.auxiliary.disk.DiskTestObject;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDisk;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskElementDescriptor;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheConcurrentUnitTest.java
index fb06f785e..dd45dd238 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheConcurrentUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -140,7 +141,7 @@ public void setUp()
     public void runTestForRegion( String region )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
         for ( int i = 0; i <= items; i++ )
@@ -201,7 +202,7 @@ public void runTestForRegion( String region )
     public void runTestForRegionInRange( String region, int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
         for ( int i = start; i <= end; i++ )
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheDefragPerformanceTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheDefragPerformanceTest.java
index bd85f069d..616b123fb 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheDefragPerformanceTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheDefragPerformanceTest.java
@@ -26,6 +26,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 
 /**
  * This is for manually testing the defrag process.
@@ -74,7 +75,7 @@ private static void runRealTimeOptimizationTest()
         throws Exception
     {
         JCS.setConfigFilename( "/TestDiskCacheDefragPerformance.ccf" );
-        JCS<Integer, Tile> jcs = JCS.getInstance( "defrag" );
+        CacheAccess<Integer, Tile> jcs = JCS.getInstance( "defrag" );
 
         Tile tile;
         System.out.println( "Cache Defrag Test" );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheKeyStoreUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheKeyStoreUnitTest.java
index df18bc8c7..263b47649 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheKeyStoreUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheKeyStoreUnitTest.java
@@ -21,8 +21,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheManagerUnitTest.java
index e86facf64..5a7508aba 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheManagerUnitTest.java
@@ -5,9 +5,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheManager;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.MockElementSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheNoMemoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheNoMemoryUnitTest.java
index 852149608..f3448b592 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheNoMemoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheNoMemoryUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -127,7 +128,7 @@ public void setUp()
     public void runTestForRegion( String region )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheOptimizationUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheOptimizationUnitTest.java
index 80c367ae0..e0b1c542d 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheOptimizationUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheOptimizationUnitTest.java
@@ -22,8 +22,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.disk.DiskTestObject;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheRandomConcurrentTestUtil.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheRandomConcurrentTestUtil.java
index 8f66be696..93e2ae7b2 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheRandomConcurrentTestUtil.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheRandomConcurrentTestUtil.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.TestCacheAccess;
 
 /**
@@ -65,7 +66,7 @@ public void runTestForRegion( String region, int range, int numOps, int testNum
 
         // make sure a simple put then get works
         // this may fail if the other tests are flooding the disk cache
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         String key = "testKey" + testNum;
         String data = "testData" + testNum;
         jcs.put( key, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSameRegionConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSameRegionConcurrentUnitTest.java
index 242bad9d3..50b124b31 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSameRegionConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSameRegionConcurrentUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -162,7 +163,7 @@ public void setUp()
     public void runTestForRegion( String region, int start, int end )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSteadyLoadTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSteadyLoadTest.java
index 4e612d90e..bf56ab1cc 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSteadyLoadTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/indexed/IndexedDiskCacheSteadyLoadTest.java
@@ -25,6 +25,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.auxiliary.disk.DiskTestObject;
 import org.apache.commons.jcs.utils.timing.ElapsedTimer;
 
@@ -66,7 +67,7 @@ public void testRunSteadyLoadTest()
         int runs = 1000;
         int upperKB = 50;
 
-        JCS<String, DiskTestObject> jcs = JCS.getInstance( ( numPerRun / 2 ) + "aSecond" );
+        CacheAccess<String, DiskTestObject> jcs = JCS.getInstance( ( numPerRun / 2 ) + "aSecond" );
 
         ElapsedTimer timer = new ElapsedTimer();
         int numToGet = numPerRun * ( runs / 10 );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerUnitTest.java
index 5109d6c05..66fe9bed2 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheManagerUnitTest.java
@@ -3,9 +3,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 import org.apache.commons.jcs.engine.control.MockElementSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManagerUnitTest.java
index e2ca802d5..f003125ab 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCachePoolAccessManagerUnitTest.java
@@ -4,10 +4,6 @@
 import java.sql.DriverManager;
 import java.util.Properties;
 
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccess;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessAttributes;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessManager;
-
 import junit.framework.TestCase;
 
 /** Unit tests for the pool manager */
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheRemovalUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheRemovalUnitTest.java
index ccff556ac..b4c2aec94 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheRemovalUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheRemovalUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 
 /** Tests for the removal functionality. */
 public class JDBCDiskCacheRemovalUnitTest
@@ -63,7 +64,7 @@ public void testPartialKeyRemoval_Good()
         String region = "testCache1";
         String data = "adfadsfasfddsafasasd";
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // DO WORK
         jcs.put( keyPart1 + ":" + keyPart2, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheSharedPoolUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheSharedPoolUnitTest.java
index 4c087b5f3..cbc0c8b0c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheSharedPoolUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheSharedPoolUnitTest.java
@@ -29,6 +29,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -85,7 +86,7 @@ public void testSimpleJDBCPutGetWithHSQL()
     public void runTestForRegion( String region, int items )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheShrinkUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheShrinkUnitTest.java
index 91422598a..1246dc88c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheShrinkUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheShrinkUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 
@@ -83,7 +84,7 @@ public void testExpireInBackground()
         String regionExpire = "expire1Second";
         int items = 200;
 
-        JCS<String, String> jcsExpire = JCS.getInstance( regionExpire );
+        CacheAccess<String, String> jcsExpire = JCS.getInstance( regionExpire );
 
         System.out.println( "BEFORE PUT \n" + jcsExpire.getStats() );
 
@@ -120,7 +121,7 @@ public void testDidNotExpire()
         String region = "expire100Second";
         int items = 200;
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
@@ -172,7 +173,7 @@ public void testDidNotExpireEternal()
         String region = "eternal";
         int items = 200;
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheUnitTest.java
index 5e74479b6..4e11da5b8 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/JDBCDiskCacheUnitTest.java
@@ -29,11 +29,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccess;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessManager;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.MockCompositeCacheManager;
 
@@ -89,7 +85,7 @@ public void testSimpleJDBCPutGetWithHSQL()
     public void runTestForRegion( String region, int items )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheConcurrentUnitTest.java
index ff6d25da9..bad57d53a 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheConcurrentUnitTest.java
@@ -28,6 +28,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -123,7 +124,7 @@ public void setUp()
     public void runTestForRegion( String region )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheUnitTest.java
index 4bd214323..d09800dd8 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/hsql/HSQLDiskCacheUnitTest.java
@@ -26,6 +26,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
@@ -58,7 +59,7 @@ public void testBasicPutRemove()
 
         String region = "testBasicPutRemove";
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         // Add items to cache
 
@@ -121,7 +122,7 @@ public void testRemoveAll()
         throws CacheException, InterruptedException
     {
         String region = "removeAllAllowed";
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         int items = 20;
 
@@ -161,7 +162,7 @@ public void testRemoveAllProhibition()
         throws CacheException, InterruptedException
     {
         String region = "noRemoveAll";
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
 
         int items = 20;
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheHsqlBackedUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheHsqlBackedUnitTest.java
index b3b2f7aa9..65747ccf0 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheHsqlBackedUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheHsqlBackedUnitTest.java
@@ -31,6 +31,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
@@ -96,7 +97,7 @@ public void testSimpleJDBCPutGetWithHSQL()
     public void runTestForRegion( String region, int items )
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         //System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
         // Add items to cache
@@ -157,7 +158,7 @@ public void testPutGetMatchingWithHSQL()
         // SETUP
         int items = 200;
         String region = "testCache2";
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         System.out.println( "BEFORE PUT \n" + jcs.getStats() );
 
         // DO WORK
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManagerUnitTest.java
index 5a4718451..51dd9b34c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheManagerUnitTest.java
@@ -3,9 +3,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 import org.apache.commons.jcs.engine.control.MockElementSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
index 638b53edd..16e747ac4 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLDiskCacheUnitTest.java
@@ -22,8 +22,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCache;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
index d0f0c9d7f..884a00ab7 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/MySQLTableOptimizerManualTester.java
@@ -23,8 +23,6 @@
 
 import org.apache.commons.jcs.auxiliary.disk.jdbc.JDBCDiskCachePoolAccessFactory;
 import org.apache.commons.jcs.auxiliary.disk.jdbc.TableState;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.MySQLTableOptimizer;
 
 /**
  * Hand run tests for the MySQL table optimizer.
diff --git a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/util/ScheduleParserUtilUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/util/ScheduleParserUtilUnitTest.java
index d25372eb4..0ff887b18 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/util/ScheduleParserUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/disk/jdbc/mysql/util/ScheduleParserUtilUnitTest.java
@@ -21,9 +21,6 @@
 
 import java.util.Date;
 
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.util.ScheduleFormatException;
-import org.apache.commons.jcs.auxiliary.disk.jdbc.mysql.util.ScheduleParser;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacadeUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacadeUnitTest.java
index b9c7058d5..ea82fc1ea 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacadeUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/LateralCacheNoWaitFacadeUnitTest.java
@@ -2,10 +2,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.lateral.LateralCache;
-import org.apache.commons.jcs.auxiliary.lateral.LateralCacheAttributes;
-import org.apache.commons.jcs.auxiliary.lateral.LateralCacheNoWait;
-import org.apache.commons.jcs.auxiliary.lateral.LateralCacheNoWaitFacade;
 import org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheAttributes;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPConcurrentRandomTestUtil.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPConcurrentRandomTestUtil.java
index 8b7b0bde1..a85d2bc99 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPConcurrentRandomTestUtil.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPConcurrentRandomTestUtil.java
@@ -24,8 +24,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPService;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
@@ -77,7 +76,7 @@ public void runTestForRegion( String region, int range, int numOps, int testNum
     {
         boolean show = true;//false;
 
-        JCS<String, String> cache = JCS.getInstance( region );
+        CacheAccess<String, String> cache = JCS.getInstance( region );
 
         TCPLateralCacheAttributes lattr2 = new TCPLateralCacheAttributes();
         lattr2.setTcpListenerPort( 1103 );
@@ -151,7 +150,7 @@ else if ( n == 2 )
             throw e;
         }
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         String key = "testKey" + testNum;
         String data = "testData" + testNum;
         jcs.put( key, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPDiscoveryListenerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPDiscoveryListenerUnitTest.java
index 83eb21411..de7c1a3e4 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPDiscoveryListenerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPDiscoveryListenerUnitTest.java
@@ -9,9 +9,6 @@
 import org.apache.commons.jcs.auxiliary.lateral.LateralCacheNoWait;
 import org.apache.commons.jcs.auxiliary.lateral.LateralCacheNoWaitFacade;
 import org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheAttributes;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPCacheManager;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPDiscoveryListener;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
 import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.behavior.ITCPLateralCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPFilterRemoveHashCodeUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPFilterRemoveHashCodeUnitTest.java
index 3c0af230e..038cf3b4f 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPFilterRemoveHashCodeUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPFilterRemoveHashCodeUnitTest.java
@@ -24,8 +24,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPService;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
@@ -87,7 +86,7 @@ public void test()
     public void runTestForRegion( String region, int numOps, int testNum )
         throws Exception
     {
-        JCS<String, Serializable> cache = JCS.getInstance( region );
+        CacheAccess<String, Serializable> cache = JCS.getInstance( region );
 
         Thread.sleep( 100 );
 
@@ -147,7 +146,7 @@ public int hashCode()
          * e.toString() ); e.printStackTrace( System.out ); throw e; }
          */
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         String key = "testKey" + testNum;
         String data = "testData" + testNum;
         jcs.put( key, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPIssueRemoveOnPutUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPIssueRemoveOnPutUnitTest.java
index 214615577..6af19ceeb 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPIssueRemoveOnPutUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/LateralTCPIssueRemoveOnPutUnitTest.java
@@ -24,8 +24,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPService;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
@@ -83,7 +82,7 @@ public void testStandardPut()
     {
         String region = "region1";
 
-        JCS<String, String> cache = JCS.getInstance( region );
+        CacheAccess<String, String> cache = JCS.getInstance( region );
 
         Thread.sleep( 100 );
 
@@ -130,7 +129,7 @@ public void runTestForRegion( String region, int range, int numOps, int testNum
 
         boolean show = true;// false;
 
-        JCS<String, String> cache = JCS.getInstance( region );
+        CacheAccess<String, String> cache = JCS.getInstance( region );
 
         Thread.sleep( 100 );
 
@@ -187,7 +186,7 @@ public void runTestForRegion( String region, int range, int numOps, int testNum
             throw e;
         }
 
-        JCS<String, String> jcs = JCS.getInstance( region );
+        CacheAccess<String, String> jcs = JCS.getInstance( region );
         String key = "testKey" + testNum;
         String data = "testData" + testNum;
         jcs.put( key, data );
diff --git a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/TestTCPLateralUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/TestTCPLateralUnitTest.java
index 485d9a9d0..779a60532 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/TestTCPLateralUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/lateral/socket/tcp/TestTCPLateralUnitTest.java
@@ -28,10 +28,6 @@
 import org.apache.commons.jcs.auxiliary.lateral.LateralCacheAttributes;
 import org.apache.commons.jcs.auxiliary.lateral.LateralCommand;
 import org.apache.commons.jcs.auxiliary.lateral.LateralElementDescriptor;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPListener;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPSender;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.LateralTCPService;
-import org.apache.commons.jcs.auxiliary.lateral.socket.tcp.TCPLateralCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
@@ -280,7 +276,7 @@ public void testGet_SendAndReceived()
     }
 
     /**
-     * Create a listener. Add an element to the listeners cache. Setup a service. Try to get group keys from
+     * Create a listener. Add an element to the listeners cache. Setup a service. Try to get keys from
      * the service.
      * <p>
      * @throws Exception
@@ -317,7 +313,7 @@ public void testGetGroupKeys_SendAndReceived()  throws Exception
         SleepUtil.sleepAtLeast( 500 );
 
         // DO WORK
-        Set<GroupAttrName<String>> result = service.getGroupKeys("test", "group");
+        Set<GroupAttrName<String>> result = service.getKeySet("test");
 
        // SleepUtil.sleepAtLeast( 5000000 );
 
@@ -325,64 +321,6 @@ public void testGetGroupKeys_SendAndReceived()  throws Exception
         System.out.println( "testSendAndReceived, result = " + result );
         assertNotNull( "Result should not be null.", result );
         assertEquals( "Didn't get the correct object", "key", result.toArray()[0] );
-
-        result = service.getGroupKeys("test", "");
-        System.out.println( "testSendAndReceived, result = " + result );
-        assertTrue("List should be empty", result.size() == 0);
-    }
-
-    /**
-     * Create a listener. Add an element to the listeners cache. Setup a service. Try to get group names from
-     * the service.
-     * <p>
-     * @throws Exception
-     */
-    public void testGetGroupNames_SendAndReceived()  throws Exception
-    {
-        // SETUP
-        // setup a listener
-        TCPLateralCacheAttributes lattr = new TCPLateralCacheAttributes();
-        lattr.setTcpListenerPort( 1157 );
-        MockCompositeCacheManager cacheMgr = new MockCompositeCacheManager();
-        CompositeCache<GroupAttrName<String>, String> cache = cacheMgr.getCache( "test" );
-        System.out.println( "mock cache = " + cache );
-
-        // get the listener started
-        // give it our mock cache manager
-        LateralTCPListener.getInstance( lattr, cacheMgr );
-
-        // add the item to the listeners cache
-        GroupAttrName<String> groupKey = new GroupAttrName<String>(new GroupId("test", "group"), "key");
-        ICacheElement<GroupAttrName<String>, String> element =
-            new CacheElement<GroupAttrName<String>, String>( "test", groupKey, "value1" );
-        cache.update( element );
-
-        groupKey = new GroupAttrName<String>(new GroupId("test", "group2"), "key2");
-        element = new CacheElement<GroupAttrName<String>, String>( "test", groupKey, "value2" );
-        cache.update( element );
-
-        // setup a service to talk to the listener started above.
-        TCPLateralCacheAttributes lattr2 = new TCPLateralCacheAttributes();
-        lattr2.setTcpListenerPort( 1156 );
-        lattr2.setTcpServer( "localhost:1157" );
-
-        LateralTCPService<GroupAttrName<String>, String> service =
-            new LateralTCPService<GroupAttrName<String>, String>( lattr2 );
-        service.setListenerId( 123469 );
-
-        SleepUtil.sleepAtLeast( 500 );
-
-        // DO WORK
-        Set<String> result = service.getGroupNames("test");
-
-       // SleepUtil.sleepAtLeast( 5000000 );
-
-        // VERIFY
-        System.out.println( "testSendAndReceived, result = " + result );
-        assertNotNull( "Result should not be null.", result );
-        assertTrue( "Size is wrong" , result.size() == 2);
-        assertTrue( "Didn't get the correct object", result.contains("group"));
-        assertTrue( "Didn't get the correct object", result.contains("group2"));
     }
 
     /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheClient.java b/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheClient.java
index 657ffb2e6..4845f1ad6 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheClient.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheClient.java
@@ -29,7 +29,6 @@
 
 import org.apache.commons.jcs.auxiliary.AbstractAuxiliaryCache;
 import org.apache.commons.jcs.auxiliary.AuxiliaryCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheAttributes;
 import org.apache.commons.jcs.auxiliary.remote.behavior.IRemoteCacheClient;
 import org.apache.commons.jcs.auxiliary.remote.behavior.IRemoteCacheListener;
 import org.apache.commons.jcs.engine.CacheStatus;
@@ -198,18 +197,9 @@ public String getCacheName()
     }
 
     /**
-     * @param group
      * @return null
      */
-    public Set<K> getGroupKeys( String group )
-    {
-        return null;
-    }
-  
-    /**
-     * @return null
-     */
-    public Set<String> getGroupNames()
+    public Set<K> getKeySet( )
     {
         return null;
     }
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheService.java b/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheService.java
index 1f1057fea..fcfcc81b8 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheService.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/MockRemoteCacheService.java
@@ -75,23 +75,13 @@ public ICacheElement<K, V> get( String cacheName, K key, long requesterId )
 
     /**
      * @param cacheName
-     * @param groupName
      * @return empty set
      */
-    public Set<K> getGroupKeys( String cacheName, String groupName )
+    public Set<K> getKeySet( String cacheName )
     {
         return new HashSet<K>();
     }
 
-    /**
-     * @param cacheName
-     * @return empty set
-     */
-    public Set<String> getGroupNames(String cacheName) throws IOException
-    {
-        return new HashSet<String>();
-    }
-
     /**
      * Set the last remove key.
      * <p>
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheListenerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheListenerUnitTest.java
index 5941462a2..2ebaa429c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheListenerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheListenerUnitTest.java
@@ -21,8 +21,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheListener;
 import org.apache.commons.jcs.auxiliary.remote.behavior.IRemoteCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElementSerialized;
 import org.apache.commons.jcs.engine.ElementAttributes;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWaitUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWaitUnitTest.java
index c99f04fa2..be8c15c55 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWaitUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheNoWaitUnitTest.java
@@ -26,7 +26,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheNoWait;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.CacheStatus;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheUnitTest.java
index 0d9ff945c..a0a1e45f9 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteCacheUnitTest.java
@@ -25,8 +25,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCache;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheAttributes;
 import org.apache.commons.jcs.auxiliary.remote.behavior.IRemoteCacheAttributes;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.ZombieCacheServiceNonLocal;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteUtilsUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteUtilsUnitTest.java
index af29d6228..83245c35c 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteUtilsUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/RemoteUtilsUnitTest.java
@@ -21,8 +21,6 @@
 
 import java.rmi.RemoteException;
 
-import org.apache.commons.jcs.auxiliary.remote.RemoteUtils;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/TestRemoteCache.java b/src/test/org/apache/commons/jcs/auxiliary/remote/TestRemoteCache.java
index 606e5eec8..f4dfa798f 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/TestRemoteCache.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/TestRemoteCache.java
@@ -22,11 +22,9 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.auxiliary.AuxiliaryCache;
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.RemoteCacheManager;
-import org.apache.commons.jcs.auxiliary.remote.RemoteUtils;
 import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerFactory;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
@@ -83,7 +81,7 @@ public void skiptestSimpleSend()
         log.info( "testSimpleSend" );
         System.out.println( "testSimpleSend" );
 
-        JCS<String, String> cache = JCS.getInstance( "testCache" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testCache" );
 
         log.info( "cache = " + cache );
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClientUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClientUnitTest.java
index d521a15de..88cfdaf54 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClientUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheClientUnitTest.java
@@ -27,8 +27,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheClient;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteCacheResponse;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteRequestType;
 import org.apache.commons.jcs.engine.CacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcherUniTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcherUniTest.java
index 3297c4731..6fa5eb206 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcherUniTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheDispatcherUniTest.java
@@ -2,8 +2,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheDispatcher;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteCacheRequest;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteRequestType;
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManagerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManagerUnitTest.java
index c196370bc..935997564 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManagerUnitTest.java
@@ -22,9 +22,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.AuxiliaryCache;
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheAttributes;
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheClient;
-import org.apache.commons.jcs.auxiliary.remote.http.client.RemoteHttpCacheManager;
 import org.apache.commons.jcs.auxiliary.remote.http.client.behavior.IRemoteHttpCacheClient;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManualTester.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManualTester.java
index c8b6b0264..4e2b3c23b 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManualTester.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/client/RemoteHttpCacheManualTester.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 
 /** Manual tester for a JCS instance configured to use the http client. */
 public class RemoteHttpCacheManualTester
@@ -46,7 +47,7 @@ public void setUp()
     public void testSimpleLoad()
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "testCache1" );
 
         jcs.put( "TestKey", "TestValue" );
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptorUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptorUnitTest.java
index 4e246858e..a1c203979 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptorUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteCacheServiceAdaptorUnitTest.java
@@ -25,7 +25,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.remote.MockRemoteCacheService;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteCacheServiceAdaptor;
 import org.apache.commons.jcs.auxiliary.remote.util.RemoteCacheRequestFactory;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteCacheRequest;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteCacheResponse;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheServiceUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheServiceUnitTest.java
index 4418b0192..d82f1bce3 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheServiceUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheServiceUnitTest.java
@@ -24,8 +24,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteHttpCacheServerAttributes;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteHttpCacheService;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.control.MockCompositeCacheManager;
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheSeviceFactoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheSeviceFactoryUnitTest.java
index 9f47334c4..9035fc593 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheSeviceFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/http/server/RemoteHttpCacheSeviceFactoryUnitTest.java
@@ -25,9 +25,6 @@
 
 import org.apache.commons.jcs.auxiliary.AuxiliaryCacheConfigurator;
 import org.apache.commons.jcs.auxiliary.remote.http.behavior.IRemoteHttpCacheConstants;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteHttpCacheServerAttributes;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteHttpCacheService;
-import org.apache.commons.jcs.auxiliary.remote.http.server.RemoteHttpCacheSeviceFactory;
 import org.apache.commons.jcs.engine.control.MockCompositeCacheManager;
 import org.apache.commons.jcs.engine.logging.MockCacheEventLogger;
 
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/BasicRemoteCacheClientServerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/BasicRemoteCacheClientServerUnitTest.java
index 387ca9d2f..39fc181c6 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/BasicRemoteCacheClientServerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/BasicRemoteCacheClientServerUnitTest.java
@@ -26,7 +26,6 @@
 import org.apache.commons.jcs.auxiliary.remote.MockRemoteCacheListener;
 import org.apache.commons.jcs.auxiliary.remote.RemoteCacheAttributes;
 import org.apache.commons.jcs.auxiliary.remote.RemoteCacheManager;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServer;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.MockCompositeCacheManager;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RegistryKeepAliveRunnerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RegistryKeepAliveRunnerUnitTest.java
index 23ec9fecb..454e561f6 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RegistryKeepAliveRunnerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RegistryKeepAliveRunnerUnitTest.java
@@ -3,7 +3,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.auxiliary.remote.server.RegistryKeepAliveRunner;
 
 /** Unit tests for the registry keep alive runner. */
 public class RegistryKeepAliveRunnerUnitTest
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerAttributesUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerAttributesUnitTest.java
index 738b72ee9..80dab6c34 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerAttributesUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerAttributesUnitTest.java
@@ -21,7 +21,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerAttributes;
 import org.apache.commons.jcs.auxiliary.remote.server.behavior.RemoteType;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerFactoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerFactoryUnitTest.java
index 70a2edb18..10c4a5cd1 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerFactoryUnitTest.java
@@ -6,9 +6,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.remote.behavior.IRemoteCacheConstants;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerAttributes;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerFactory;
-import org.apache.commons.jcs.auxiliary.remote.server.TimeoutConfigurableRMIScoketFactory;
 
 /** Unit tests for the factory */
 public class RemoteCacheServerFactoryUnitTest
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerStartupUtil.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerStartupUtil.java
index ce8e05506..5fbdbeb28 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerStartupUtil.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerStartupUtil.java
@@ -27,8 +27,6 @@
 import java.rmi.registry.LocateRegistry;
 import java.util.Properties;
 
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServer;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerFactory;
 import org.apache.commons.jcs.utils.props.PropertyLoader;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerUnitTest.java
index 5c7dfd68d..28f6c2c36 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/RemoteCacheServerUnitTest.java
@@ -27,8 +27,6 @@
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
 import org.apache.commons.jcs.auxiliary.remote.MockRemoteCacheListener;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServer;
-import org.apache.commons.jcs.auxiliary.remote.server.RemoteCacheServerAttributes;
 import org.apache.commons.jcs.auxiliary.remote.server.behavior.IRemoteCacheServerAttributes;
 import org.apache.commons.jcs.auxiliary.remote.server.behavior.RemoteType;
 import org.apache.commons.jcs.engine.CacheElement;
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/server/TimeoutConfigurableRMIScoketFactoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/server/TimeoutConfigurableRMIScoketFactoryUnitTest.java
index 58876966e..c1d42adae 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/server/TimeoutConfigurableRMIScoketFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/server/TimeoutConfigurableRMIScoketFactoryUnitTest.java
@@ -4,8 +4,6 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 
-import org.apache.commons.jcs.auxiliary.remote.server.TimeoutConfigurableRMIScoketFactory;
-
 import junit.framework.TestCase;
 
 /** Unit tests for the custom factory */
diff --git a/src/test/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactoryUnitTest.java b/src/test/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactoryUnitTest.java
index 02a71692a..2ff4e671b 100644
--- a/src/test/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/auxiliary/remote/util/RemoteCacheRequestFactoryUnitTest.java
@@ -6,7 +6,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.auxiliary.remote.util.RemoteCacheRequestFactory;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteCacheRequest;
 import org.apache.commons.jcs.auxiliary.remote.value.RemoteRequestType;
 import org.apache.commons.jcs.engine.CacheElement;
diff --git a/src/test/org/apache/commons/jcs/engine/CacheEventQueueFactoryUnitTest.java b/src/test/org/apache/commons/jcs/engine/CacheEventQueueFactoryUnitTest.java
index 3940d8134..78987f63c 100644
--- a/src/test/org/apache/commons/jcs/engine/CacheEventQueueFactoryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/CacheEventQueueFactoryUnitTest.java
@@ -3,9 +3,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.remote.MockRemoteCacheListener;
-import org.apache.commons.jcs.engine.CacheEventQueue;
-import org.apache.commons.jcs.engine.CacheEventQueueFactory;
-import org.apache.commons.jcs.engine.PooledCacheEventQueue;
 import org.apache.commons.jcs.engine.behavior.ICacheEventQueue;
 import org.apache.commons.jcs.engine.behavior.ICacheListener;
 
diff --git a/src/test/org/apache/commons/jcs/engine/EventQueueConcurrentLoadTest.java b/src/test/org/apache/commons/jcs/engine/EventQueueConcurrentLoadTest.java
index 4e57dbc7e..0d35c9185 100644
--- a/src/test/org/apache/commons/jcs/engine/EventQueueConcurrentLoadTest.java
+++ b/src/test/org/apache/commons/jcs/engine/EventQueueConcurrentLoadTest.java
@@ -26,8 +26,6 @@
 import junit.framework.Test;
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.engine.CacheElement;
-import org.apache.commons.jcs.engine.CacheEventQueue;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheListener;
 
diff --git a/src/test/org/apache/commons/jcs/engine/MockCacheEventQueue.java b/src/test/org/apache/commons/jcs/engine/MockCacheEventQueue.java
index 5c8f13179..443b26c73 100644
--- a/src/test/org/apache/commons/jcs/engine/MockCacheEventQueue.java
+++ b/src/test/org/apache/commons/jcs/engine/MockCacheEventQueue.java
@@ -3,7 +3,6 @@
 import java.io.Serializable;
 
 import org.apache.commons.jcs.auxiliary.remote.MockRemoteCacheListener;
-import org.apache.commons.jcs.engine.CacheEventQueue;
 
 /** For testing the factory */
 public class MockCacheEventQueue<K extends Serializable, V extends Serializable>
diff --git a/src/test/org/apache/commons/jcs/engine/MockCacheServiceNonLocal.java b/src/test/org/apache/commons/jcs/engine/MockCacheServiceNonLocal.java
index fc74acfc2..79275a5aa 100644
--- a/src/test/org/apache/commons/jcs/engine/MockCacheServiceNonLocal.java
+++ b/src/test/org/apache/commons/jcs/engine/MockCacheServiceNonLocal.java
@@ -75,23 +75,13 @@ public ICacheElement<K, V> get( String cacheName, K key, long requesterId )
 
     /**
      * @param cacheName
-     * @param groupName
      * @return empty set
      */
-    public Set<K> getGroupKeys( String cacheName, String groupName )
+    public Set<K> getKeySet( String cacheName )
     {
         return new HashSet<K>();
     }
 
-    /**
-     * @param cacheName
-     * @return empty set
-     */
-    public Set<String> getGroupNames(String cacheName) throws IOException
-    {
-        return new HashSet<String>();
-    }
-
     /**
      * Set the last remove key.
      * <p>
diff --git a/src/test/org/apache/commons/jcs/engine/SystemPropertyUsageUnitTest.java b/src/test/org/apache/commons/jcs/engine/SystemPropertyUsageUnitTest.java
index 0d201d16d..458c75581 100644
--- a/src/test/org/apache/commons/jcs/engine/SystemPropertyUsageUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/SystemPropertyUsageUnitTest.java
@@ -24,6 +24,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 import org.apache.commons.jcs.utils.props.PropertyLoader;
 
@@ -46,7 +47,7 @@ public void testSystemPropertyUsage()
 
         JCS.setConfigFilename( "/TestSystemPropertyUsage.ccf" );
 
-        JCS<String, String> jcs = JCS.getInstance( "someCacheNotInFile" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "someCacheNotInFile" );
 
         assertEquals( "System property value is not reflected", jcs.getCacheAttributes().getMaxObjects(), Integer
             .parseInt( "6789" ) );
@@ -70,7 +71,7 @@ public void testSystemPropertyUsage_inactive()
 
         mgr.configure( props, false );
 
-        JCS<String, String> jcs = JCS.getInstance( "someCacheNotInFile" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "someCacheNotInFile" );
 
         assertFalse( "System property value should not be reflected",
                      jcs.getCacheAttributes().getMaxObjects() == Integer.parseInt( props
diff --git a/src/test/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocalUnitTest.java b/src/test/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocalUnitTest.java
index 50a886e67..949277eaa 100644
--- a/src/test/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocalUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/ZombieCacheServiceNonLocalUnitTest.java
@@ -21,8 +21,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.engine.CacheElement;
-import org.apache.commons.jcs.engine.ZombieCacheServiceNonLocal;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/engine/control/CacheManagerStatsUnitTest.java b/src/test/org/apache/commons/jcs/engine/control/CacheManagerStatsUnitTest.java
index 370298682..71eb1666c 100644
--- a/src/test/org/apache/commons/jcs/engine/control/CacheManagerStatsUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/control/CacheManagerStatsUnitTest.java
@@ -22,7 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
-import org.apache.commons.jcs.engine.control.CompositeCacheManager;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.stats.behavior.ICacheStats;
 
 /**
@@ -40,7 +40,7 @@ public class CacheManagerStatsUnitTest
      */
     public void testSimpleGetStats() throws Exception
     {
-        JCS<String, String> cache = JCS.getInstance( "testCache1" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testCache1" );
 
         // 1 miss, 1 hit, 1 put
         cache.get( "testKey" );
diff --git a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheConfiguratorUnitTest.java b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheConfiguratorUnitTest.java
index 6bf0ec27b..82ac2eb1a 100644
--- a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheConfiguratorUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheConfiguratorUnitTest.java
@@ -9,9 +9,6 @@
 import org.apache.commons.jcs.auxiliary.MockAuxiliaryCache;
 import org.apache.commons.jcs.auxiliary.MockAuxiliaryCacheAttributes;
 import org.apache.commons.jcs.auxiliary.MockAuxiliaryCacheFactory;
-import org.apache.commons.jcs.engine.control.CompositeCache;
-import org.apache.commons.jcs.engine.control.CompositeCacheConfigurator;
-import org.apache.commons.jcs.engine.control.CompositeCacheManager;
 import org.apache.commons.jcs.engine.logging.MockCacheEventLogger;
 
 /** Unit tests for the configurator. */
diff --git a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheDiskUsageUnitTest.java b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheDiskUsageUnitTest.java
index 5be33e722..1c0d38197 100644
--- a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheDiskUsageUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheDiskUsageUnitTest.java
@@ -29,6 +29,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.auxiliary.AbstractAuxiliaryCache;
 import org.apache.commons.jcs.auxiliary.AuxiliaryCache;
@@ -38,11 +39,10 @@
 import org.apache.commons.jcs.engine.CompositeCacheAttributes;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
+import org.apache.commons.jcs.engine.behavior.ICacheType.CacheType;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
-import org.apache.commons.jcs.engine.behavior.ICacheType.CacheType;
-import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEventLogger;
 import org.apache.commons.jcs.engine.stats.behavior.IStats;
 
@@ -71,7 +71,7 @@ public void setUp()
     public void testSwapConfig()
         throws CacheException
     {
-        JCS<String, String> swap = JCS.getInstance( "Swap" );
+        CacheAccess<String, String> swap = JCS.getInstance( "Swap" );
         assertEquals( ICompositeCacheAttributes.DiskUsagePattern.SWAP, swap.getCacheAttributes()
             .getDiskUsagePattern() );
     }
@@ -84,7 +84,7 @@ public void testSwapConfig()
     public void testUpdateConfig()
         throws CacheException
     {
-        JCS<String, String> swap = JCS.getInstance( "Update" );
+        CacheAccess<String, String> swap = JCS.getInstance( "Update" );
         assertEquals( ICompositeCacheAttributes.DiskUsagePattern.UPDATE, swap.getCacheAttributes()
             .getDiskUsagePattern() );
     }
@@ -406,21 +406,10 @@ public String getCacheName()
         }
 
         /**
-         * @param group
          * @return null
          * @throws IOException
          */
-        public Set<K> getGroupKeys( String group )
-            throws IOException
-        {
-            return null;
-        }
-        
-        /**
-         * @return null
-         * @throws IOException
-         */
-        public Set<String> getGroupNames()
+        public Set<K> getKeySet( )
             throws IOException
         {
             return null;
@@ -496,7 +485,7 @@ public Map<K, ICacheElement<K, V>> getMatching(String pattern)
             return Collections.emptyMap();
         }
 
-		
+
     }
 
 }
diff --git a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheUnitTest.java b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheUnitTest.java
index 87cd1b022..05821dd14 100644
--- a/src/test/org/apache/commons/jcs/engine/control/CompositeCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/control/CompositeCacheUnitTest.java
@@ -30,10 +30,9 @@
 import org.apache.commons.jcs.engine.CompositeCacheAttributes;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
+import org.apache.commons.jcs.engine.behavior.ICacheType.CacheType;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
-import org.apache.commons.jcs.engine.behavior.ICacheType.CacheType;
-import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.memory.MockMemoryCache;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/engine/control/MockCompositeCacheManager.java b/src/test/org/apache/commons/jcs/engine/control/MockCompositeCacheManager.java
index ebd76fc33..35d4df3d0 100644
--- a/src/test/org/apache/commons/jcs/engine/control/MockCompositeCacheManager.java
+++ b/src/test/org/apache/commons/jcs/engine/control/MockCompositeCacheManager.java
@@ -25,7 +25,6 @@
 import org.apache.commons.jcs.engine.CompositeCacheAttributes;
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheManager;
-import org.apache.commons.jcs.engine.control.CompositeCache;
 
 /** For testing. */
 public class MockCompositeCacheManager
diff --git a/src/test/org/apache/commons/jcs/engine/control/event/SimpleEventHandlingUnitTest.java b/src/test/org/apache/commons/jcs/engine/control/event/SimpleEventHandlingUnitTest.java
index 79431b3b1..8f990725e 100644
--- a/src/test/org/apache/commons/jcs/engine/control/event/SimpleEventHandlingUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/control/event/SimpleEventHandlingUnitTest.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.control.event.behavior.ElementEventType;
 import org.apache.commons.jcs.engine.control.event.behavior.IElementEvent;
@@ -56,7 +57,7 @@ public void testSpoolEvent()
         // SETUP
         MyEventHandler meh = new MyEventHandler();
 
-        JCS<String, String> jcs = JCS.getInstance( "WithDisk" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "WithDisk" );
         // this should add the event handler to all items as they are created.
         IElementAttributes attributes = jcs.getDefaultElementAttributes();
         attributes.addElementEventHandler( meh );
@@ -86,7 +87,7 @@ public void testSpoolEvent()
     public void testSpoolNoDiskEvent()
         throws Exception
     {
-        JCS<String, String> jcs = JCS.getInstance( "NoDisk" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "NoDisk" );
 
         MyEventHandler meh = new MyEventHandler();
 
@@ -119,7 +120,7 @@ public void testSpoolNotAllowedEvent()
     {
         MyEventHandler meh = new MyEventHandler();
 
-        JCS<String, String> jcs = JCS.getInstance( "DiskButNotAllowed" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "DiskButNotAllowed" );
         // this should add the event handler to all items as they are created.
         IElementAttributes attributes = jcs.getDefaultElementAttributes();
         attributes.addElementEventHandler( meh );
@@ -149,7 +150,7 @@ public void testSpoolNotAllowedEventOnItem()
     {
         MyEventHandler meh = new MyEventHandler();
 
-        JCS<String, String> jcs = JCS.getInstance( "DiskButNotAllowed" );
+        CacheAccess<String, String> jcs = JCS.getInstance( "DiskButNotAllowed" );
         // this should add the event handler to all items as they are created.
         //IElementAttributes attributes = jcs.getDefaultElementAttributes();
         //attributes.addElementEventHandler( meh );
diff --git a/src/test/org/apache/commons/jcs/engine/logging/CacheEventLoggerDebugLoggerUnitTest.java b/src/test/org/apache/commons/jcs/engine/logging/CacheEventLoggerDebugLoggerUnitTest.java
index 1cee7b7b6..9df515ad3 100644
--- a/src/test/org/apache/commons/jcs/engine/logging/CacheEventLoggerDebugLoggerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/logging/CacheEventLoggerDebugLoggerUnitTest.java
@@ -4,7 +4,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.engine.logging.CacheEventLoggerDebugLogger;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEvent;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
diff --git a/src/test/org/apache/commons/jcs/engine/logging/MockCacheEventLogger.java b/src/test/org/apache/commons/jcs/engine/logging/MockCacheEventLogger.java
index e61620b4c..3eac7585d 100644
--- a/src/test/org/apache/commons/jcs/engine/logging/MockCacheEventLogger.java
+++ b/src/test/org/apache/commons/jcs/engine/logging/MockCacheEventLogger.java
@@ -2,7 +2,6 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.jcs.engine.logging.CacheEvent;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEvent;
 import org.apache.commons.jcs.engine.logging.behavior.ICacheEventLogger;
 
diff --git a/src/test/org/apache/commons/jcs/engine/match/KeyMatcherPatternImpllUnitTest.java b/src/test/org/apache/commons/jcs/engine/match/KeyMatcherPatternImpllUnitTest.java
index 6796cc475..bc8435995 100644
--- a/src/test/org/apache/commons/jcs/engine/match/KeyMatcherPatternImpllUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/match/KeyMatcherPatternImpllUnitTest.java
@@ -3,8 +3,6 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.commons.jcs.engine.match.KeyMatcherPatternImpl;
-
 import junit.framework.TestCase;
 
 /** Unit tests for the key matcher. */
diff --git a/src/test/org/apache/commons/jcs/engine/memory/fifo/FIFOMemoryCacheUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/fifo/FIFOMemoryCacheUnitTest.java
index 67a441a26..0c08732c8 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/fifo/FIFOMemoryCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/fifo/FIFOMemoryCacheUnitTest.java
@@ -9,7 +9,6 @@
 import org.apache.commons.jcs.engine.ElementAttributes;
 import org.apache.commons.jcs.engine.behavior.ICompositeCacheAttributes;
 import org.apache.commons.jcs.engine.control.CompositeCache;
-import org.apache.commons.jcs.engine.memory.fifo.FIFOMemoryCache;
 
 /** Unit tests for the fifo implementation. */
 public class FIFOMemoryCacheUnitTest
diff --git a/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheConcurrentUnitTest.java
index 3a646d802..10941aca6 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheConcurrentUnitTest.java
@@ -31,7 +31,6 @@
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
-import org.apache.commons.jcs.engine.memory.lru.LRUMemoryCache;
 
 /**
  * Test which exercises the LRUMemory cache. This one uses three different
diff --git a/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheUnitTest.java
index 8471d3d29..6822c0f01 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/lru/LHMLRUMemoryCacheUnitTest.java
@@ -26,12 +26,12 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
-import org.apache.commons.jcs.engine.memory.lru.LHMLRUMemoryCache;
 
 /**
  * Tests for the test LHMLRU implementation.
@@ -57,7 +57,7 @@ public void setUp()
     public void testLoadFromCCF()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGet" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGet" );
         String memoryCacheName = cache.getCacheAttributes().getMemoryCacheName();
         assertTrue( "Cache name should have LHMLRU in it.", memoryCacheName.indexOf( "LHMLRUMemoryCache" ) != -1 );
     }
@@ -70,7 +70,7 @@ public void testLoadFromCCF()
     public void testPutGetThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -123,7 +123,7 @@ public void testPutGetThroughHub()
     public void testPutGetThroughHubTwice()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -163,7 +163,7 @@ public void testPutGetThroughHubTwice()
     public void testPutRemoveThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -194,7 +194,7 @@ public void testPutRemoveThroughHub()
     public void testClearThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -222,7 +222,7 @@ public void testClearThroughHub()
     public void testGetStatsThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -279,7 +279,7 @@ public void testGetKeyArray()
     public void testRemovePartialThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max / 2;
diff --git a/src/test/org/apache/commons/jcs/engine/memory/lru/LRUMemoryCacheConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/lru/LRUMemoryCacheConcurrentUnitTest.java
index 101a10002..1ee8f16c2 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/lru/LRUMemoryCacheConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/lru/LRUMemoryCacheConcurrentUnitTest.java
@@ -31,7 +31,6 @@
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
-import org.apache.commons.jcs.engine.memory.lru.LRUMemoryCache;
 
 /**
  * Test which exercises the LRUMemory cache. This one uses three different
diff --git a/src/test/org/apache/commons/jcs/engine/memory/mru/LRUvsMRUPerformanceTest.java b/src/test/org/apache/commons/jcs/engine/memory/mru/LRUvsMRUPerformanceTest.java
index 39c8efaea..6df4ae58f 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/mru/LRUvsMRUPerformanceTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/mru/LRUvsMRUPerformanceTest.java
@@ -22,8 +22,8 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.engine.memory.lru.LRUMemoryCache;
-import org.apache.commons.jcs.engine.memory.mru.MRUMemoryCache;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -94,8 +94,8 @@ public void doWork()
         {
 
             JCS.setConfigFilename( "/TestMRUCache.ccf" );
-            JCS<String, String> cache = JCS.getInstance( "lruDefined" );
-            JCS<String, String> mru = JCS.getInstance( "mruDefined" );
+            CacheAccess<String, String> cache = JCS.getInstance( "lruDefined" );
+            CacheAccess<String, String> mru = JCS.getInstance( "mruDefined" );
 
             System.out.println( "LRU = " + cache );
 
diff --git a/src/test/org/apache/commons/jcs/engine/memory/mru/MRUMemoryCacheUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/mru/MRUMemoryCacheUnitTest.java
index 8b100d395..d9c4fb5ec 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/mru/MRUMemoryCacheUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/mru/MRUMemoryCacheUnitTest.java
@@ -26,12 +26,12 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs.access.CacheAccess;
 import org.apache.commons.jcs.access.exception.CacheException;
 import org.apache.commons.jcs.engine.CacheElement;
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.CompositeCache;
 import org.apache.commons.jcs.engine.control.CompositeCacheManager;
-import org.apache.commons.jcs.engine.memory.mru.MRUMemoryCache;
 
 /**
  * Tests for the test MRU implementation.
@@ -57,7 +57,7 @@ public void setUp()
     public void testLoadFromCCF()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGet" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGet" );
         String memoryCacheName = cache.getCacheAttributes().getMemoryCacheName();
         assertTrue( "Cache name should have MRU in it.", memoryCacheName.indexOf( "MRUMemoryCache" ) != -1 );
     }
@@ -70,7 +70,7 @@ public void testLoadFromCCF()
     public void testPutGetThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -123,7 +123,7 @@ public void testPutGetThroughHub()
     public void testPutGetThroughHubTwice()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -163,7 +163,7 @@ public void testPutGetThroughHubTwice()
     public void testPutRemoveThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -194,7 +194,7 @@ public void testPutRemoveThroughHub()
     public void testClearThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testPutGetThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -222,7 +222,7 @@ public void testClearThroughHub()
     public void testGetStatsThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max * 2;
@@ -279,7 +279,7 @@ public void testGetKeyArray()
     public void testRemovePartialThroughHub()
         throws CacheException
     {
-        JCS<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
+        CacheAccess<String, String> cache = JCS.getInstance( "testGetStatsThroughHub" );
 
         int max = cache.getCacheAttributes().getMaxObjects();
         int items = max / 2;
diff --git a/src/test/org/apache/commons/jcs/engine/memory/shrinking/ShrinkerThreadUnitTest.java b/src/test/org/apache/commons/jcs/engine/memory/shrinking/ShrinkerThreadUnitTest.java
index 5b027f6aa..19f1b04a8 100644
--- a/src/test/org/apache/commons/jcs/engine/memory/shrinking/ShrinkerThreadUnitTest.java
+++ b/src/test/org/apache/commons/jcs/engine/memory/shrinking/ShrinkerThreadUnitTest.java
@@ -29,7 +29,6 @@
 import org.apache.commons.jcs.engine.behavior.ICacheElement;
 import org.apache.commons.jcs.engine.control.event.ElementEventHandlerMockImpl;
 import org.apache.commons.jcs.engine.memory.MockMemoryCache;
-import org.apache.commons.jcs.engine.memory.shrinking.ShrinkerThread;
 
 /**
  * This tests the functionality of the shrinker thread.
diff --git a/src/test/org/apache/commons/jcs/utils/access/JCSWorkerUnitTest.java b/src/test/org/apache/commons/jcs/utils/access/JCSWorkerUnitTest.java
index 78ee6e429..642f8af1a 100644
--- a/src/test/org/apache/commons/jcs/utils/access/JCSWorkerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/access/JCSWorkerUnitTest.java
@@ -19,10 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.utils.access.AbstractJCSWorkerHelper;
-import org.apache.commons.jcs.utils.access.JCSWorker;
-import org.apache.commons.jcs.utils.access.JCSWorkerHelper;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/date/DateFormatterUnitTest.java b/src/test/org/apache/commons/jcs/utils/date/DateFormatterUnitTest.java
index 06dc70877..0bc7c6656 100644
--- a/src/test/org/apache/commons/jcs/utils/date/DateFormatterUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/date/DateFormatterUnitTest.java
@@ -3,8 +3,6 @@
 import java.util.Calendar;
 import java.util.Date;
 
-import org.apache.commons.jcs.utils.date.DateFormatter;
-
 import junit.framework.TestCase;
 
 /** Simple tests for the date formatter utility. */
diff --git a/src/test/org/apache/commons/jcs/utils/date/ThreadSafeSimpleDateFormatUnitTest.java b/src/test/org/apache/commons/jcs/utils/date/ThreadSafeSimpleDateFormatUnitTest.java
index 9b0308c60..879654d10 100644
--- a/src/test/org/apache/commons/jcs/utils/date/ThreadSafeSimpleDateFormatUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/date/ThreadSafeSimpleDateFormatUnitTest.java
@@ -8,7 +8,6 @@
 
 import junit.framework.TestCase;
 
-import org.apache.commons.jcs.utils.date.ThreadSafeSimpleDateFormat;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
diff --git a/src/test/org/apache/commons/jcs/utils/discovery/MockDiscoveryListener.java b/src/test/org/apache/commons/jcs/utils/discovery/MockDiscoveryListener.java
index c3bf5040e..9bbf3534d 100644
--- a/src/test/org/apache/commons/jcs/utils/discovery/MockDiscoveryListener.java
+++ b/src/test/org/apache/commons/jcs/utils/discovery/MockDiscoveryListener.java
@@ -22,7 +22,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.jcs.utils.discovery.DiscoveredService;
 import org.apache.commons.jcs.utils.discovery.behavior.IDiscoveryListener;
 
 /** Mock listener, for testing. */
diff --git a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoverySenderUnitTest.java b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoverySenderUnitTest.java
index 78a097873..b327c2a1f 100644
--- a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoverySenderUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoverySenderUnitTest.java
@@ -21,10 +21,6 @@
 
 import java.util.ArrayList;
 
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryMessage;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryReceiver;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoverySender;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryServiceUnitTest.java b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryServiceUnitTest.java
index e806148fd..94b45db1a 100644
--- a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryServiceUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryServiceUnitTest.java
@@ -24,9 +24,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.utils.discovery.DiscoveredService;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryAttributes;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryService;
 
 /** Unit tests for the service. */
 public class UDPDiscoveryServiceUnitTest
diff --git a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryUnitTest.java b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryUnitTest.java
index 917e707f7..8bc7b737d 100644
--- a/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/discovery/UDPDiscoveryUnitTest.java
@@ -24,10 +24,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.auxiliary.MockCacheEventLogger;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryAttributes;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryReceiver;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoverySender;
-import org.apache.commons.jcs.utils.discovery.UDPDiscoveryService;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/key/KeyGeneratorUtilUnitTest.java b/src/test/org/apache/commons/jcs/utils/key/KeyGeneratorUtilUnitTest.java
index c2b8b63f2..f9b785f64 100644
--- a/src/test/org/apache/commons/jcs/utils/key/KeyGeneratorUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/key/KeyGeneratorUtilUnitTest.java
@@ -7,7 +7,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.utils.date.DateFormatter;
-import org.apache.commons.jcs.utils.key.KeyGeneratorUtil;
 import org.apache.commons.jcs.utils.timing.SleepUtil;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/net/AddressUtilUnitTest.java b/src/test/org/apache/commons/jcs/utils/net/AddressUtilUnitTest.java
index cb64d74c2..c1220837d 100644
--- a/src/test/org/apache/commons/jcs/utils/net/AddressUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/net/AddressUtilUnitTest.java
@@ -1,7 +1,5 @@
 package org.apache.commons.jcs.utils.net;
 
-import org.apache.commons.jcs.utils.net.AddressUtil;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/net/HostNameUtilUnitTest.java b/src/test/org/apache/commons/jcs/utils/net/HostNameUtilUnitTest.java
index c2817403c..a8a9b3680 100644
--- a/src/test/org/apache/commons/jcs/utils/net/HostNameUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/net/HostNameUtilUnitTest.java
@@ -2,8 +2,6 @@
 
 import java.net.UnknownHostException;
 
-import org.apache.commons.jcs.utils.net.HostNameUtil;
-
 import junit.framework.TestCase;
 
 /** Tests for the host name util. */
diff --git a/src/test/org/apache/commons/jcs/utils/serialization/CompressingSerializerUnitTest.java b/src/test/org/apache/commons/jcs/utils/serialization/CompressingSerializerUnitTest.java
index 5dab9b2d9..51fca1233 100644
--- a/src/test/org/apache/commons/jcs/utils/serialization/CompressingSerializerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/serialization/CompressingSerializerUnitTest.java
@@ -21,8 +21,6 @@
 
 import java.io.IOException;
 
-import org.apache.commons.jcs.utils.serialization.CompressingSerializer;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/serialization/SerializationConversionUtilUnitTest.java b/src/test/org/apache/commons/jcs/utils/serialization/SerializationConversionUtilUnitTest.java
index 1741d4bab..6c7c041e8 100644
--- a/src/test/org/apache/commons/jcs/utils/serialization/SerializationConversionUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/serialization/SerializationConversionUtilUnitTest.java
@@ -29,8 +29,6 @@
 import org.apache.commons.jcs.engine.behavior.ICacheElementSerialized;
 import org.apache.commons.jcs.engine.behavior.IElementAttributes;
 import org.apache.commons.jcs.engine.behavior.IElementSerializer;
-import org.apache.commons.jcs.utils.serialization.SerializationConversionUtil;
-import org.apache.commons.jcs.utils.serialization.StandardSerializer;
 
 /**
  * Tests the serialization conversion util.
diff --git a/src/test/org/apache/commons/jcs/utils/serialization/StandardSerializerUnitTest.java b/src/test/org/apache/commons/jcs/utils/serialization/StandardSerializerUnitTest.java
index 16dd98e60..a4fbf5044 100644
--- a/src/test/org/apache/commons/jcs/utils/serialization/StandardSerializerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/serialization/StandardSerializerUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.utils.serialization.StandardSerializer;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/struct/BoundedQueueUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/BoundedQueueUnitTest.java
index b5de05be1..c8fcff000 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/BoundedQueueUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/BoundedQueueUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.utils.struct.BoundedQueue;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/struct/DoubleLinkedListUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/DoubleLinkedListUnitTest.java
index 8dfba8123..de68d97a0 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/DoubleLinkedListUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/DoubleLinkedListUnitTest.java
@@ -5,8 +5,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.TestLogConfigurationUtil;
-import org.apache.commons.jcs.utils.struct.DoubleLinkedList;
-import org.apache.commons.jcs.utils.struct.DoubleLinkedListNode;
 
 /** Unit tests for the double linked list. */
 public class DoubleLinkedListUnitTest
diff --git a/src/test/org/apache/commons/jcs/utils/struct/JCSvsCommonsLRUMapPerformanceTest.java b/src/test/org/apache/commons/jcs/utils/struct/JCSvsCommonsLRUMapPerformanceTest.java
index 7aeda9d2d..aaed5199a 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/JCSvsCommonsLRUMapPerformanceTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/JCSvsCommonsLRUMapPerformanceTest.java
@@ -26,7 +26,6 @@
 import junit.framework.TestSuite;
 
 import org.apache.commons.jcs.JCSvsHashtablePerformanceTest;
-import org.apache.commons.jcs.utils.struct.LRUMap;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
diff --git a/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentTest.java b/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentTest.java
index 24589b67c..ea9132220 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentTest.java
@@ -21,8 +21,6 @@
 
 import java.util.Iterator;
 
-import org.apache.commons.jcs.utils.struct.LRUMap;
-
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
diff --git a/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentUnitTest.java
index 5451c7a98..bc28d22ac 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/LRUMapConcurrentUnitTest.java
@@ -21,8 +21,6 @@
 
 import java.util.Iterator;
 
-import org.apache.commons.jcs.utils.struct.LRUMap;
-
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
diff --git a/src/test/org/apache/commons/jcs/utils/struct/LRUMapPerformanceTest.java b/src/test/org/apache/commons/jcs/utils/struct/LRUMapPerformanceTest.java
index efc9ad457..fb628aab6 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/LRUMapPerformanceTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/LRUMapPerformanceTest.java
@@ -26,7 +26,6 @@
 import junit.framework.TestSuite;
 
 import org.apache.commons.jcs.JCSvsHashtablePerformanceTest;
-import org.apache.commons.jcs.utils.struct.LRUMap;
 
 /**
  * This ensures that the jcs version of the LRU map is as fast as the commons
diff --git a/src/test/org/apache/commons/jcs/utils/struct/LRUMapUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/LRUMapUnitTest.java
index 7dd685834..a870866f6 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/LRUMapUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/LRUMapUnitTest.java
@@ -23,8 +23,6 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
-import org.apache.commons.jcs.utils.struct.LRUMap;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/struct/SingleLinkedListUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/SingleLinkedListUnitTest.java
index 7b2aa963e..e18bf1696 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/SingleLinkedListUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/SingleLinkedListUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.utils.struct.SingleLinkedList;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/struct/SortedPrefArrayUnitTest.java b/src/test/org/apache/commons/jcs/utils/struct/SortedPrefArrayUnitTest.java
index 697681de2..779a685f8 100644
--- a/src/test/org/apache/commons/jcs/utils/struct/SortedPrefArrayUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/struct/SortedPrefArrayUnitTest.java
@@ -19,8 +19,6 @@
  * under the License.
  */
 
-import org.apache.commons.jcs.utils.struct.SortedPreferentialArray;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolManagerUnitTest.java b/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolManagerUnitTest.java
index e31cf5fe1..11b34af64 100644
--- a/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolManagerUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolManagerUnitTest.java
@@ -25,8 +25,6 @@
 import junit.framework.TestCase;
 
 import org.apache.commons.jcs.utils.props.PropertyLoader;
-import org.apache.commons.jcs.utils.threadpool.PoolConfiguration;
-import org.apache.commons.jcs.utils.threadpool.ThreadPoolManager;
 import org.apache.commons.jcs.utils.threadpool.PoolConfiguration.WhenBlockedPolicy;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolUnitTest.java b/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolUnitTest.java
index c42a5001f..f50851248 100644
--- a/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/threadpool/ThreadPoolUnitTest.java
@@ -21,8 +21,6 @@
 
 import java.util.concurrent.ThreadPoolExecutor;
 
-import org.apache.commons.jcs.utils.threadpool.ThreadPoolManager;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/org/apache/commons/jcs/utils/zip/CompressionUtilUnitTest.java b/src/test/org/apache/commons/jcs/utils/zip/CompressionUtilUnitTest.java
index b7f03dd89..730a42fd0 100644
--- a/src/test/org/apache/commons/jcs/utils/zip/CompressionUtilUnitTest.java
+++ b/src/test/org/apache/commons/jcs/utils/zip/CompressionUtilUnitTest.java
@@ -23,8 +23,6 @@
 import java.io.IOException;
 import java.util.zip.GZIPOutputStream;
 
-import org.apache.commons.jcs.utils.zip.CompressionUtil;
-
 import junit.framework.TestCase;
 
 /** Unit tests for the compression util */
