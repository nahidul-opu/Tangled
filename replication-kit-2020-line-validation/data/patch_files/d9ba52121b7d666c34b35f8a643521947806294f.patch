From d9ba52121b7d666c34b35f8a643521947806294f Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Thu, 20 Sep 2012 20:15:04 +0000
Subject: [PATCH] [CONFIGURATION-504] Added a new clearAndDetachFromParent()
 method to SubnodeConfiguration.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1388193 13f79535-47bb-0310-9956-ffa450edef68
---
 .../configuration/SubnodeConfiguration.java   | 18 ++++++++++++++++++
 .../TestHierarchicalConfiguration.java        | 19 ++++++++++++++++++-
 2 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/src/main/java/org/apache/commons/configuration/SubnodeConfiguration.java b/src/main/java/org/apache/commons/configuration/SubnodeConfiguration.java
index 07ce7575c7..d5a0352ed3 100644
--- a/src/main/java/org/apache/commons/configuration/SubnodeConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/SubnodeConfiguration.java
@@ -240,6 +240,24 @@ public ConfigurationNode getRootNode()
         return super.getRootNode(); // use stored root node
     }
 
+    /**
+     * Clears this configuration and removes its root node from the parent
+     * configuration. While a default {@link #clear()} operation just removes
+     * all content from the root node, this method is more radical. It also
+     * removes this configuration's root node from the node structure of its
+     * parent. This means that even if later properties are added to this
+     * {@code SubnodeConfiguration}, they will not be visible in the parent
+     * configuration.
+     *
+     * @since 2.0
+     */
+    public void clearAndDetachFromParent()
+    {
+        clear();
+        setSubnodeKey(null); // always detach
+        getParent().removeNode(getRootNode());
+    }
+
     /**
      * Returns a hierarchical configuration object for the given sub node.
      * This implementation will ensure that the returned
diff --git a/src/test/java/org/apache/commons/configuration/TestHierarchicalConfiguration.java b/src/test/java/org/apache/commons/configuration/TestHierarchicalConfiguration.java
index 9897ee93b0..e1cc3b5962 100644
--- a/src/test/java/org/apache/commons/configuration/TestHierarchicalConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestHierarchicalConfiguration.java
@@ -597,13 +597,30 @@ public void testConfigurationAtClear()
         SubnodeConfiguration sub = config.configurationAt("test.sub");
         assertEquals("Wrong value", "fail", sub.getString("test"));
         sub.clear();
-        assertNull("Key still found", config.getString("test.sub.key"));
+        assertNull("Key still found", config.getString("test.sub.test"));
         sub.setProperty("test", "success");
         assertEquals("Property not set", "success",
                 config.getString("test.sub.test"));
         assertEquals("Wrong index (2)", 0, config.getMaxIndex("test"));
     }
 
+    /**
+     * Tests whether a {@code SubnodeConfiguration} can be cleared and its root
+     * node can be removed from its parent configuration.
+     */
+    @Test
+    public void testConfigurationAtClearAndDetach()
+    {
+        config.addProperty("test.sub.test", "success");
+        config.addProperty("test.other", "check");
+        SubnodeConfiguration sub = config.configurationAt("test.sub");
+        sub.clearAndDetachFromParent();
+        assertTrue("Sub not empty", sub.isEmpty());
+        assertNull("Key still found", config.getString("test.sub.test"));
+        sub.setProperty("test", "failure!");
+        assertNull("Node not detached", config.getString("test.sub.test"));
+    }
+
     /**
      * Tests the configurationsAt() method.
      */
