From ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858 Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Fri, 27 Nov 2009 21:45:38 +0000
Subject: [PATCH] Fixed an overflow error in MathUtils.distance that was
 causing KMeansPlusPlusClusterer to fail with a NullPointerException when
 component distances between points exceeded Integer.MAXVALUE. JIRA: MATH-305
 Reported by Erik van Ingen

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885027 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/math/util/MathUtils.java   |  4 ++--
 src/site/xdoc/changes.xml                     |  5 +++++
 .../KMeansPlusPlusClustererTest.java          | 22 +++++++++++++++++++
 3 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java
index 46368dc9f1..ad77a56eb4 100644
--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1621,9 +1621,9 @@ public static double distance(double[] p1, double[] p2) {
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      double sum = 0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          final double dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 3c94d22e90..bd1f4d344d 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -39,6 +39,11 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="2.1" date="TBD" description="TBD">
+      <action dev="psteitz" type="fix" issue="MATH-305" due-to="Erik van Ingen">
+        Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer
+        to fail with a NullPointerException when component distances between points
+        exceeded Integer.MAXVALUE.
+      </action>
       <action dev="psteitz" type="update" issue="MATH-315" due-to="Mikkel Meyer Andersen">
         Added generationsEvolved property to GeneticAlgorithm to track the number of generations
         evolved by the evolve() method before reaching the StoppingCondition.
diff --git a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
index da1d8a93da..dfe89adefb 100644
--- a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
+++ b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
@@ -93,5 +93,27 @@ public void dimension2() {
         assertTrue(cluster3Found);
 
     }
+    
+    /**
+     * JIRA: MATH-305
+     * 
+     * Two points, one cluster, one iteration
+     */
+    @Test
+    public void testPerformClusterAnalysisDegenerate() {
+        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
+                new Random(1746432956321l));
+        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
+                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
+                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };
+        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);
+        assertEquals(1, clusters.size());
+        assertEquals(2, (clusters.get(0).getPoints().size()));
+        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });
+        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });
+        assertTrue(clusters.get(0).getPoints().contains(pt1));
+        assertTrue(clusters.get(0).getPoints().contains(pt2));
+
+    } 
 
 }
