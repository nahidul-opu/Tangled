From d04a18d643707e5d3926236b1a9fcc3ff1522bb7 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Wed, 30 May 2012 20:17:35 +0000
Subject: [PATCH] [CONFIGURATION-483] DatabaseConfiguration now ensures that
 the result set is always closed.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1344442 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../configuration/DatabaseConfiguration.java  | 43 +++++++++++++------
 2 files changed, 33 insertions(+), 13 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 642ce0e67b..17f6fee64c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -35,6 +35,9 @@
         DataConfiguration.get() now also works with String properties and if no
         data type conversion is required.
       </action>
+      <action dev="oheger" type="update" issue="CONFIGURATION-483">
+        DatabaseConfiguration now always closes the result set.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-482" due-to="Chris Seieroe">
         The Import-Package section in the OSGi manifest now uses the
         resolution:=optional directive for optional dependencies.
diff --git a/src/main/java/org/apache/commons/configuration/DatabaseConfiguration.java b/src/main/java/org/apache/commons/configuration/DatabaseConfiguration.java
index 0535d0fd0a..2855f15187 100644
--- a/src/main/java/org/apache/commons/configuration/DatabaseConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/DatabaseConfiguration.java
@@ -219,6 +219,7 @@ public Object getProperty(String key)
 
         Connection conn = null;
         PreparedStatement pstmt = null;
+        ResultSet rs = null;
 
         try
         {
@@ -232,7 +233,7 @@ public Object getProperty(String key)
                 pstmt.setString(2, name);
             }
 
-            ResultSet rs = pstmt.executeQuery();
+            rs = pstmt.executeQuery();
 
             List<Object> results = new ArrayList<Object>();
             while (rs.next())
@@ -264,7 +265,7 @@ public Object getProperty(String key)
         }
         finally
         {
-            close(conn, pstmt);
+            close(conn, pstmt, rs);
         }
 
         return result;
@@ -321,7 +322,7 @@ protected void addPropertyDirect(String key, Object obj)
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, null);
         }
     }
 
@@ -377,6 +378,7 @@ public boolean isEmpty()
 
         Connection conn = null;
         PreparedStatement pstmt = null;
+        ResultSet rs = null;
 
         try
         {
@@ -389,7 +391,7 @@ public boolean isEmpty()
                 pstmt.setString(1, name);
             }
 
-            ResultSet rs = pstmt.executeQuery();
+            rs = pstmt.executeQuery();
 
             if (rs.next())
             {
@@ -403,7 +405,7 @@ public boolean isEmpty()
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, rs);
         }
 
         return empty;
@@ -432,6 +434,7 @@ public boolean containsKey(String key)
 
         Connection conn = null;
         PreparedStatement pstmt = null;
+        ResultSet rs = null;
 
         try
         {
@@ -445,7 +448,7 @@ public boolean containsKey(String key)
                 pstmt.setString(2, name);
             }
 
-            ResultSet rs = pstmt.executeQuery();
+            rs = pstmt.executeQuery();
 
             found = rs.next();
         }
@@ -456,7 +459,7 @@ public boolean containsKey(String key)
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, rs);
         }
 
         return found;
@@ -506,7 +509,7 @@ protected void clearPropertyDirect(String key)
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, null);
         }
     }
 
@@ -552,7 +555,7 @@ public void clear()
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, null);
         }
         fireEvent(EVENT_CLEAR, null, null, false);
     }
@@ -580,6 +583,7 @@ public Iterator<String> getKeys()
 
         Connection conn = null;
         PreparedStatement pstmt = null;
+        ResultSet rs = null;
 
         try
         {
@@ -592,7 +596,7 @@ public Iterator<String> getKeys()
                 pstmt.setString(1, name);
             }
 
-            ResultSet rs = pstmt.executeQuery();
+            rs = pstmt.executeQuery();
 
             while (rs.next())
             {
@@ -606,7 +610,7 @@ public Iterator<String> getKeys()
         finally
         {
             // clean up
-            close(conn, pstmt);
+            close(conn, pstmt, rs);
         }
 
         return keys.iterator();
@@ -641,14 +645,27 @@ protected Connection getConnection() throws SQLException
     }
 
     /**
-     * Close a {@code Connection} and, {@code Statement}.
+     * Close the specified database objects.
      * Avoid closing if null and hide any SQLExceptions that occur.
      *
      * @param conn The database connection to close
      * @param stmt The statement to close
+     * @param rs the result set to close
      */
-    private void close(Connection conn, Statement stmt)
+    private void close(Connection conn, Statement stmt, ResultSet rs)
     {
+        try
+        {
+            if (rs != null)
+            {
+                rs.close();
+            }
+        }
+        catch (SQLException e)
+        {
+            getLogger().error("An error occurred on closing the result set", e);
+        }
+
         try
         {
             if (stmt != null)
