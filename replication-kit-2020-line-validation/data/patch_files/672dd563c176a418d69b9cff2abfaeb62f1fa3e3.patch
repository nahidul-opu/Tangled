From 672dd563c176a418d69b9cff2abfaeb62f1fa3e3 Mon Sep 17 00:00:00 2001
From: Emmanuel Bourg <ebourg@apache.org>
Date: Sun, 17 Feb 2008 23:00:12 +0000
Subject: [PATCH] CONFIGURATION-300: Fixed the creation of a file based
 configuration if the filename contains a '#' (Java 1.4+ only)

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@628573 13f79535-47bb-0310-9956-ffa450edef68
---
 .../AbstractFileConfiguration.java            |  2 +-
 .../configuration/ConfigurationUtils.java     | 45 ++++++++++++++++---
 .../TestPropertiesConfiguration.java          | 19 ++++++++
 xdocs/changes.xml                             |  4 ++
 4 files changed, 64 insertions(+), 6 deletions(-)

diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index 6aa0f72f33..9fac70e1bf 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -238,7 +238,7 @@ public void load(File file) throws ConfigurationException
     {
         try
         {
-            load(file.toURL());
+            load(ConfigurationUtils.toURL(file));
         }
         catch (ConfigurationException e)
         {
diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index 9fd0e783b0..9df3d99f60 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -34,6 +34,7 @@
 import org.apache.commons.configuration.event.ConfigurationErrorListener;
 import org.apache.commons.configuration.event.EventSource;
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.SystemUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -294,7 +295,7 @@ public static URL getURL(String basePath, String file) throws MalformedURLExcept
         File f = new File(file);
         if (f.isAbsolute()) // already absolute?
         {
-            return f.toURL();
+            return toURL(f);
         }
 
         try
@@ -311,7 +312,7 @@ public static URL getURL(String basePath, String file) throws MalformedURLExcept
         }
         catch (MalformedURLException uex)
         {
-            return constructFile(basePath, file).toURL();
+            return toURL(constructFile(basePath, file));
         }
     }
 
@@ -452,7 +453,7 @@ public static URL locate(String base, String name)
             {
                 try
                 {
-                    url = file.toURL();
+                    url = toURL(file);
                     log.debug("Loading configuration from the absolute path " + name);
                 }
                 catch (MalformedURLException e)
@@ -470,7 +471,7 @@ public static URL locate(String base, String name)
                 File file = constructFile(base, name);
                 if (file != null && file.exists())
                 {
-                    url = file.toURL();
+                    url = toURL(file);
                 }
 
                 if (url != null)
@@ -492,7 +493,7 @@ public static URL locate(String base, String name)
                 File file = constructFile(System.getProperty("user.home"), name);
                 if (file != null && file.exists())
                 {
-                    url = file.toURL();
+                    url = toURL(file);
                 }
 
                 if (url != null)
@@ -679,6 +680,40 @@ public static File fileFromURL(URL url)
         }
     }
 
+    /**
+     * Convert the specified file into an URL. This method is equivalent
+     * to file.toURI().toURL() on Java 1.4 and above, and equivalent to
+     * file.toURL() on Java 1.3. This is to work around a bug in the JDK
+     * preventing the transformation of a file into an URL if the file name
+     * contains a '#' character. See the issue CONFIGURATION-300 for
+     * more details.
+     *
+     * @param file the file to be converted into an URL
+     */
+    static URL toURL(File file) throws MalformedURLException
+    {
+        if (SystemUtils.isJavaVersionAtLeast(1.4f))
+        {
+            try
+            {
+                Method toURI = file.getClass().getMethod("toURI", (Class[]) null);
+                Object uri = toURI.invoke(file, (Class[]) null);
+                Method toURL = uri.getClass().getMethod("toURL", (Class[]) null);
+                URL url = (URL) toURL.invoke(uri, (Class[]) null);
+
+                return url;
+            }
+            catch (Exception e)
+            {
+                throw new MalformedURLException(e.getMessage());
+            }
+        }
+        else
+        {
+            return file.toURL();
+        }
+    }
+
     /**
      * Enables runtime exceptions for the specified configuration object. This
      * method can be used for configuration implementations that may face errors
diff --git a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
index cbb9a5c6e1..d6ce32cb7c 100644
--- a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -35,6 +35,7 @@
 import java.util.List;
 
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
+import org.apache.commons.lang.SystemUtils;
 
 import junit.framework.TestCase;
 
@@ -739,6 +740,24 @@ public void testSaveToHTTPServerFail() throws Exception
         }
     }
 
+    /**
+     * Test the creation of a file containing a '#' in its name. This test is
+     * skipped on Java 1.3 as it always fails.
+     */
+    public void testFileWithSharpSymbol() throws Exception
+    {
+        if (SystemUtils.isJavaVersionAtLeast(1.4f))
+        {
+            File file = new File("target/sharp#1.properties");
+            file.createNewFile();
+
+            PropertiesConfiguration conf = new PropertiesConfiguration(file);
+            conf.save();
+
+            assertTrue("Missing file " + file, file.exists());
+        }
+    }
+
     /**
      * Tests initializing a properties configuration from a non existing file.
      * There was a bug, which caused properties getting lost when later save()
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 0b1289bf6e..b9c2af5f82 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -40,6 +40,10 @@
         Instantiating an XMLPropertyListConfiguration no longer fails
         if the DTD is missing from the classpath.
       </action>
+      <action dev="ebourg" type="fix" issue="CONFIGURATION-300">
+        It's now possible to read a configuration file containing
+        a '#' in its name (requires Java 1.4 or above).
+      </action>
     </release>
 
     <release version="1.5" date="2007-11-24" description="Many smaller bugfixes">
