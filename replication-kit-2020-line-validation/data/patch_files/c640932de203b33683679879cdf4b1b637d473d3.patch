From c640932de203b33683679879cdf4b1b637d473d3 Mon Sep 17 00:00:00 2001
From: Dimitri Pourbaix <dimpbx@apache.org>
Date: Thu, 5 Aug 2010 08:48:00 +0000
Subject: [PATCH] MATH-377 fixed

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@982507 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/math/linear/EigenDecompositionImpl.java |  2 +-
 .../math/linear/SingularValueDecompositionImpl.java |  5 ++---
 .../general/AbstractLeastSquaresOptimizer.java      | 13 +++++--------
 src/site/xdoc/changes.xml                           |  3 +++
 .../general/LevenbergMarquardtOptimizerTest.java    |  4 ++--
 5 files changed, 13 insertions(+), 14 deletions(-)

diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index d1531a8124..468dca712c 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -561,7 +561,7 @@ private void findEigenVectors(double[][] householderMatrix) {
                             z[ia][i] = c * z[ia][i] - s * p;
                         }
                     }
-                    if (e[i + 1] == 0.0 && i >= j)
+                    if (t == 0.0 && i >= j)
                         continue;
                     realEigenvalues[j] -= u;
                     e[j] = q;
diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
index 3abf3f0d88..597f6c42f1 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
@@ -108,7 +108,7 @@ public SingularValueDecompositionImpl(final RealMatrix matrix)
                 for (int k = 0; k < n; k++) {
                     matAAT[i][j] += localcopy[i][k] * localcopy[j][k];
                 }
-                matAAT[j][i]=matAAT[i][j];
+                 matAAT[j][i]=matAAT[i][j];
             }
         }
         int p;
@@ -119,7 +119,6 @@ public SingularValueDecompositionImpl(final RealMatrix matrix)
                     new Array2DRowRealMatrix(matATA),1.0);
             singularValues = eigenDecomposition.getRealEigenvalues();
             cachedV = eigenDecomposition.getV();
-
             // compute eigen decomposition of A*A^T
             eigenDecomposition = new EigenDecompositionImpl(
                     new Array2DRowRealMatrix(matAAT),1.0);
@@ -141,7 +140,7 @@ public SingularValueDecompositionImpl(final RealMatrix matrix)
             singularValues[i] = Math.sqrt(Math.abs(singularValues[i]));
         }
         // Up to this point, U and V are computed independently of each other.
-        // There still an sign indetermination of each column of, say, U.
+        // There still a sign indetermination of each column of, say, U.
         // The sign is set such that A.V_i=sigma_i.U_i (i<=p)
         // The right sign corresponds to a positive dot product of A.V_i and U_i
         for (int i = 0; i < p; i++) {
diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
index 10f7762630..5a60da853f 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -237,23 +237,20 @@ protected void updateResidualsAndCost()
      * @return RMS value
      */
     public double getRMS() {
-        double criterion = 0;
-        for (int i = 0; i < rows; ++i) {
-            final double residual = residuals[i];
-            criterion += residualsWeights[i] * residual * residual;
-        }
-        return Math.sqrt(criterion / rows);
+        return Math.sqrt(getChiSquare() / rows);
     }
 
     /**
-     * Get the Chi-Square value.
+     * Get a Chi-Square-like value assuming the N residuals follow N
+     * distinct normal distributions centered on 0 and whose variances are
+     * the reciprocal of the weights.
      * @return chi-square value
      */
     public double getChiSquare() {
         double chiSquare = 0;
         for (int i = 0; i < rows; ++i) {
             final double residual = residuals[i];
-            chiSquare += residual * residual / residualsWeights[i];
+            chiSquare += residual * residual * residualsWeights[i];
         }
         return chiSquare;
     }
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index e39870a368..5d5a42b93f 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,9 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="2.2" date="TBD" description="TBD">
+      <action dev="dimpbx" type="fix" issue="MATH-377">
+        Fixed bug in chi-square computation in AbstractLeastSquaresOptimizer.
+      </action>
       <action dev="luc" type="add" issue="MATH-400" due-to="J. Lewis Muir">
         Added support for Gaussian curve fitting.
       </action>
diff --git a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
index f2b850f48d..3c82eecec6 100644
--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
@@ -439,8 +439,8 @@ public void testCircleFitting() throws FunctionEvaluationException, Optimization
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.0016, cov[1][1], 0.001);
         errors = optimizer.guessParametersErrors();
-        assertEquals(0.002, errors[0], 0.001);
-        assertEquals(0.002, errors[1], 0.001);
+        assertEquals(0.004, errors[0], 0.001);
+        assertEquals(0.004, errors[1], 0.001);
 
     }
 
