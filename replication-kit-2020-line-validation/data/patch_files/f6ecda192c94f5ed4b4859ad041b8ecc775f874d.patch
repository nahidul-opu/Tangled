From f6ecda192c94f5ed4b4859ad041b8ecc775f874d Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 14 Jan 2015 23:09:12 +0000
Subject: [PATCH] VALIDATOR-356 IDN.toASCII drops trailing dot in Java 6 & 7

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1651873 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../validator/routines/DomainValidator.java   | 34 ++++++++++-
 .../routines/DomainValidatorTest.java         | 61 +++++++++++++++++++
 .../validator/routines/UrlValidatorTest.java  |  9 +++
 4 files changed, 105 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a540cadf5..4edbcac49 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
   <release version="1.5.0" date="tba" description="tba">
+    <action issue="VALIDATOR-356" dev="seb" type="fix" >
+      IDN.toASCII drops trailing dot in Java 6 & 7
+    </action>
     <action issue="VALIDATOR-355" dev="britter" type="update" >
       Update to Java 6
     </action>
diff --git a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
index 45fef194d..ef1691c44 100644
--- a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
@@ -1085,16 +1085,46 @@ private String chompLeadingDot(String str) {
      */
     // Needed by UrlValidator
     static String unicodeToASCII(String input) {
-        if (isOnlyASCII(input)) { // TODO temporary hack to work round IDN.toASCII bug
+        if (isOnlyASCII(input)) { // skip possibly expensive processing
             return input;
         }
         try {
-            return IDN.toASCII(input);
+            final String ascii = IDN.toASCII(input);
+            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {
+                return ascii;
+            }
+            final int length = input.length();
+            if (length == 0) {// check there is a last character
+                return input;
+            }
+// RFC3490 3.1. 1)
+//            Whenever dots are used as label separators, the following
+//            characters MUST be recognized as dots: U+002E (full stop), U+3002
+//            (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61
+//            (halfwidth ideographic full stop).
+            char lastChar = input.charAt(length-1);// fetch original last char
+            switch(lastChar) {
+                case '\u002E': // "." full stop
+                case '\u3002': // ideographic full stop
+                case '\uFF0E': // fullwidth full stop
+                case '\uFF61': // halfwidth ideographic full stop
+                    return ascii + "."; // restore the missing stop
+                default:
+                    return ascii;
+            }
         } catch (IllegalArgumentException e) { // input is not valid
             return input;
         }
     }
 
+    private static class IDNBUGHOLDER {
+        private static boolean keepsTrailingDot() {
+            final String input = "a."; // must be a valid name
+            return input.equals(IDN.toASCII(input));
+        }
+        private static final boolean IDN_TOASCII_PRESERVES_TRAILING_DOTS = keepsTrailingDot();
+    }
+
     /*
      * Check if input contains only ASCII
      * Treats null as all ASCII
diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
index 432c4d3fb..70bd655ad 100644
--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
@@ -208,6 +208,67 @@ public void testValidator306() {
         assertFalse("254 chars domain should fail", validator.isValidDomainSyntax(longDomain+"x"));
     }
 
+    // Check that IDN.toASCII behaves as it should (when wrapped by DomainValidator.unicodeToASCII)
+    // Tests show that method incorrectly trims a trailing "." character 
+    public void testUnicodeToASCII() {
+        String[] asciidots = {
+                "",
+                ",",
+                ".", // fails IDN.toASCII, but should pass wrapped version
+                "a.", // ditto
+                "a.b",
+                "a..b",
+                "a...b",
+                ".a",
+                "..a",
+        };
+        for(String s : asciidots) {
+            assertEquals(s,DomainValidator.unicodeToASCII(s));
+        }
+        // RFC3490 3.1. 1)
+//      Whenever dots are used as label separators, the following
+//      characters MUST be recognized as dots: U+002E (full stop), U+3002
+//      (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61
+//      (halfwidth ideographic full stop).
+        final String otherDots[][] = {
+                {"b\u3002", "b.",},
+                {"b\uFF0E", "b.",},
+                {"b\uFF61", "b.",},
+                {"\u3002", ".",},
+                {"\uFF0E", ".",},
+                {"\uFF61", ".",},
+        };
+        for(String s[] : otherDots) {
+            assertEquals(s[1],DomainValidator.unicodeToASCII(s[0]));
+        }
+    }
+
+    // Check if IDN.toASCII is broken or not
+    public void testIsIDNtoASCIIBroken() {
+        System.out.println(">>DomainValidatorTest.testIsIDNtoASCIIBroken()");
+        final String input = ".";
+        final boolean ok = input.equals(IDN.toASCII(input));
+        System.out.println("IDN.toASCII is " + (ok? "OK" : "BROKEN"));
+        String props[] = {
+        "java.version", //    Java Runtime Environment version
+        "java.vendor", // Java Runtime Environment vendor
+        "java.vm.specification.version", //   Java Virtual Machine specification version
+        "java.vm.specification.vendor", //    Java Virtual Machine specification vendor
+        "java.vm.specification.name", //  Java Virtual Machine specification name
+        "java.vm.version", // Java Virtual Machine implementation version
+        "java.vm.vendor", //  Java Virtual Machine implementation vendor
+        "java.vm.name", //    Java Virtual Machine implementation name
+        "java.specification.version", //  Java Runtime Environment specification version
+        "java.specification.vendor", //   Java Runtime Environment specification vendor
+        "java.specification.name", // Java Runtime Environment specification name
+        "java.class.version", //  Java class format version number
+        };
+        for(String t : props) {
+            System.out.println(t + "=" + System.getProperty(t));
+        }    
+        System.out.println("<<DomainValidatorTest.testIsIDNtoASCIIBroken()");
+    }
+
     // Check array is sorted and is lower-case
     public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws Exception {
         final boolean sorted = isSortedLowerCase("INFRASTRUCTURE_TLDS");
diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
index e2ad5138c..19882b32c 100644
--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
@@ -295,6 +295,15 @@ public void testValidator339(){
         assertFalse(urlValidator.isValid("http://www.cnn.invalid./")); // check . does not affect invalid domains
     }
 
+    public void testValidator339IDN(){
+        UrlValidator urlValidator = new UrlValidator();
+        assertTrue(urlValidator.isValid("http://президент.рф/WORLD/?hpt=sitenav")); // without
+        assertTrue(urlValidator.isValid("http://президент.рф./WORLD/?hpt=sitenav")); // with
+        assertFalse(urlValidator.isValid("http://президент.рф..../")); // very dotty
+        assertFalse(urlValidator.isValid("http://президент.рф.../")); // triply dotty
+        assertFalse(urlValidator.isValid("http://президент.рф../")); // doubly dotty
+    }
+
     public void testValidator342(){
         UrlValidator urlValidator = new UrlValidator();
         assertTrue(urlValidator.isValid("http://example.rocks/"));
