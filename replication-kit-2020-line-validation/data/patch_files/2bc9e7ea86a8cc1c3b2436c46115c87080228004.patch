From 2bc9e7ea86a8cc1c3b2436c46115c87080228004 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Sat, 13 Sep 2014 15:36:43 +0000
Subject: [PATCH] [MATH-1149] Fix potential null pointer dereferencing.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1624752 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                       | 4 ++++
 .../commons/math3/ode/sampling/DummyStepInterpolator.java     | 4 +++-
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 73fc41254d..a4a06972b9 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,10 @@ Users are encouraged to upgrade to this version as this release not
   2. A few methods in the FastMath class are in fact slower that their
   counterpart in either Math or StrictMath (cf. MATH-740 and MATH-901).
 ">
+      <action dev="tn" type="fix" issue="MATH-1149" due-to="M Kim">
+        Fixed potential null pointer dereferencing in constructor of
+        "DummyStepInterpolator(DummyStepInterpolator)".
+      </action>
       <action dev="psteitz" type="fix" issue="MATH-1136" due-to="Aleksei Dievskii">
         Fixed BinomialDistribution to deal with degenerate cases correctly.
       </action>
diff --git a/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolator.java b/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolator.java
index 9d9671e797..97b67b40d4 100644
--- a/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolator.java
+++ b/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolator.java
@@ -80,7 +80,9 @@ public DummyStepInterpolator(final double[] y, final double[] yDot, final boolea
    */
   public DummyStepInterpolator(final DummyStepInterpolator interpolator) {
     super(interpolator);
-    currentDerivative = interpolator.currentDerivative.clone();
+    if (interpolator.currentDerivative != null) {
+        currentDerivative = interpolator.currentDerivative.clone();
+    }
   }
 
   /** Really copy the finalized instance.
