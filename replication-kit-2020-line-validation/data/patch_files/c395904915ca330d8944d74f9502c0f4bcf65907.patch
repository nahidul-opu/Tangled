From c395904915ca330d8944d74f9502c0f4bcf65907 Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Mon, 11 Jun 2012 01:09:58 +0000
Subject: [PATCH] [IO-269] Tailer locks file from deletion/rename on Windows.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1348698 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../org/apache/commons/io/input/Tailer.java   | 73 ++++++++++++++++++-
 .../apache/commons/io/input/TailerTest.java   |  8 +-
 3 files changed, 79 insertions(+), 5 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a0ec4ecfdb6..2dd14d78753 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -47,6 +47,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
     <!-- The release date is the date RC is cut -->
     <release version="2.4" date="2012-TDB-TDB" description="">
+      <action issue="IO-269" dev="ggregory" type="add" due-to="sebb">
+        Tailer locks file from deletion/rename on Windows.
+      </action>            
       <action issue="IO-279" dev="sebb" type="fix" due-to="Sergio Bossa, Chris Baron">
         Tailer erroneously considers file as new.
       </action>            
diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index 3cc4f5595a2..e91d53e1737 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -137,6 +137,11 @@ public class Tailer implements Runnable {
      */
     private final TailerListener listener;
 
+    /**
+     * Whether to close and reopen the file whilst waiting for more input.
+     */
+    private final boolean reOpen;
+    
     /**
      * The tailer will run as long as this value is true.
      */
@@ -172,6 +177,18 @@ public Tailer(File file, TailerListener listener, long delayMillis, boolean end)
         this(file, listener, delayMillis, end, DEFAULT_BUFSIZE);
     }
     
+    /**
+     * Creates a Tailer for the given file, with a delay other than the default 1.0s.
+     * @param file the file to follow.
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen if true, close and reopen the file between reading chunks 
+     */
+    public Tailer(File file, TailerListener listener, long delayMillis, boolean end, boolean reOpen) {
+        this(file, listener, delayMillis, end, reOpen, DEFAULT_BUFSIZE);
+    }
+    
     /**
      * Creates a Tailer for the given file, with a specified buffer size.
      * @param file the file to follow.
@@ -181,7 +198,19 @@ public Tailer(File file, TailerListener listener, long delayMillis, boolean end)
      * @param bufSize Buffer size
      */
     public Tailer(File file, TailerListener listener, long delayMillis, boolean end, int bufSize) {
-
+        this(file, listener, delayMillis, end, false, bufSize);
+    }
+    
+    /**
+     * Creates a Tailer for the given file, with a specified buffer size.
+     * @param file the file to follow.
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen if true, close and reopen the file between reading chunks 
+     * @param bufSize Buffer size
+     */
+    public Tailer(File file, TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {
         this.file = file;
         this.delayMillis = delayMillis;
         this.end = end;
@@ -191,6 +220,7 @@ public Tailer(File file, TailerListener listener, long delayMillis, boolean end,
         // Save and prepare the listener
         this.listener = listener;
         listener.init(this);
+        this.reOpen = reOpen;
     }
     
     /**
@@ -211,6 +241,26 @@ public static Tailer create(File file, TailerListener listener, long delayMillis
         return tailer;
     }
 
+    /**
+     * Creates and starts a Tailer for the given file.
+     * 
+     * @param file the file to follow.
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen whether to close/reopen the file between chunks
+     * @param bufSize buffer size.
+     * @return The new tailer
+     */
+    public static Tailer create(File file, TailerListener listener, long delayMillis, boolean end, boolean reOpen, 
+            int bufSize) {
+        Tailer tailer = new Tailer(file, listener, delayMillis, end, reOpen, bufSize);
+        Thread thread = new Thread(tailer);
+        thread.setDaemon(true);
+        thread.start();
+        return tailer;
+    }
+
     /**
      * Creates and starts a Tailer for the given file with default buffer size.
      * 
@@ -224,6 +274,20 @@ public static Tailer create(File file, TailerListener listener, long delayMillis
         return create(file, listener, delayMillis, end, DEFAULT_BUFSIZE);
     }
 
+    /**
+     * Creates and starts a Tailer for the given file with default buffer size.
+     * 
+     * @param file the file to follow.
+     * @param listener the TailerListener to use.
+     * @param delayMillis the delay between checks of the file for new content in milliseconds.
+     * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.
+     * @param reOpen whether to close/reopen the file between chunks
+     * @return The new tailer
+     */
+    public static Tailer create(File file, TailerListener listener, long delayMillis, boolean end, boolean reOpen) {
+        return create(file, listener, delayMillis, end, reOpen, DEFAULT_BUFSIZE);
+    }
+
     /**
      * Creates and starts a Tailer for the given file, starting at the beginning of the file
      * 
@@ -345,10 +409,17 @@ public void run() {
                         last = System.currentTimeMillis();
                     }
                 }
+                if (reOpen) {
+                    IOUtils.closeQuietly(reader);
+                }
                 try {
                     Thread.sleep(delayMillis);
                 } catch (InterruptedException e) {
                 }
+                if (run && reOpen) {
+                    reader = new RandomAccessFile(file, RAF_MODE);
+                    reader.seek(position);
+                }
             }
 
         } catch (Exception e) {
diff --git a/src/test/java/org/apache/commons/io/input/TailerTest.java b/src/test/java/org/apache/commons/io/input/TailerTest.java
index cd28dfd1236..0a37ded9e48 100644
--- a/src/test/java/org/apache/commons/io/input/TailerTest.java
+++ b/src/test/java/org/apache/commons/io/input/TailerTest.java
@@ -146,7 +146,9 @@ public void testTailer() throws Exception {
         final File file = new File(getTestDirectory(), "tailer1-test.txt");
         createFile(file, 0);
         final TestTailerListener listener = new TestTailerListener();
-        tailer = new Tailer(file, listener, delayMillis, false);
+        String osname = System.getProperty("os.name");
+        boolean isWindows = osname.startsWith("Windows");
+        tailer = new Tailer(file, listener, delayMillis, false, isWindows);
         final Thread thread = new Thread(tailer);
         thread.start();
 
@@ -178,9 +180,7 @@ public void testTailer() throws Exception {
         // Delete & re-create
         file.delete();
         boolean exists = file.exists();
-        String osname = System.getProperty("os.name");
-        boolean isWindows = osname.startsWith("Windows");
-        assertFalse("File should not exist (except on Windows)", exists && !isWindows);
+        assertFalse("File should not exist", exists);
         createFile(file, 0);
         Thread.sleep(testDelayMillis);
 
