From af6d69e11b36b755a63bcaaddafa1a06ebb001c9 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Mon, 7 Feb 2011 20:36:11 +0000
Subject: [PATCH] CONFIGURATION-433: Improved handling of indexed properties in
 ConfigurationDynaBean. Also some minor Javadocs corrections. Ported fix to
 configuration2 branch.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/configuration2_experimental@1068111 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 +
 .../beanutils/ConfigurationDynaBean.java      | 89 ++++++++++---------
 .../beanutils/TestConfigurationDynaBean.java  | 71 ++++++++++-----
 3 files changed, 101 insertions(+), 63 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index becbefc00b..32ede45db4 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -79,6 +79,10 @@
     </release>
 
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-433">
+        Minor improvements of the support for indexed properties in
+        ConfigurationDynaBean.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-428">
         XMLConfiguration no longer escapes backslashs in the values of
         XML elements.
diff --git a/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java b/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
index 4ad193c724..3c1dfa45a4 100644
--- a/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
+++ b/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java
@@ -25,7 +25,6 @@
 import org.apache.commons.beanutils.DynaClass;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.ConfigurationMap;
-import org.apache.commons.configuration2.ConversionException;
 import org.apache.commons.configuration2.SubsetConfiguration;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -43,10 +42,10 @@
  * method. Similarly, indexed properties reference lists of configuration
  * properties using the
  * {@link org.apache.commons.configuration2.Configuration#getList(String)}
- * method. Setting an indexed property always throws an exception.</p>
+ * method. Setting an indexed property is supported, too.</p>
  *
  * <p>Note: Some of the methods expect that a dot (&quot;.&quot;) is used as
- * property delimitor for the wrapped configuration. This is true for most of
+ * property delimiter for the wrapped configuration. This is true for most of
  * the default configurations. Hierarchical configurations, for which a specific
  * expression engine is set, may cause problems.</p>
  *
@@ -154,20 +153,14 @@ public boolean contains(String name, String key)
 
     public Object get(String name, int index)
     {
-        try
+        if (!checkIndexedProperty(name))
         {
-            List<?> list = getConfiguration().getList(name);
-            if (list.isEmpty())
-            {
-                throw new IllegalArgumentException("Indexed property '" + name + "' does not exist.");
-            }
-
-            return list.get(index);
-        }
-        catch (ConversionException e)
-        {
-            throw new IllegalArgumentException("Property '" + name + "' is not indexed.", e);
+            throw new IllegalArgumentException("Property '" + name
+                    + "' is not indexed.");
         }
+
+        List<?> list = getConfiguration().getList(name);
+        return list.get(index);
     }
 
     public Object get(String name, String key)
@@ -194,36 +187,28 @@ public void remove(String name, String key)
 
     public void set(String name, int index, Object value)
     {
-        try
+        if (!checkIndexedProperty(name) && index > 0)
         {
-            Object property = getConfiguration().getProperty(name);
+            throw new IllegalArgumentException("Property '" + name
+                    + "' is not indexed.");
+        }
 
-            if (property == null)
-            {
-                throw new IllegalArgumentException("Property '" + name + "' does not exist.");
-            }
-            else if (property instanceof List)
-            {
-                List<Object> list = (List<Object>) property;
-                list.set(index, value);
-                getConfiguration().setProperty(name, list);
-            }
-            else if (property.getClass().isArray())
-            {
-                Array.set(property, index, value);
-            }
-            else if (index == 0)
-            {
-                getConfiguration().setProperty(name, value);
-            }
-            else
-            {
-                throw new IllegalArgumentException("Property '" + name + "' is not indexed.");
-            }
+        Object property = getConfiguration().getProperty(name);
+
+        if (property instanceof List)
+        {
+            @SuppressWarnings("rawtypes")
+            List list = (List) property;
+            list.set(index, value);
+            getConfiguration().setProperty(name, list);
+        }
+        else if (property.getClass().isArray())
+        {
+            Array.set(property, index, value);
         }
-        catch (ConversionException e)
+        else if (index == 0)
         {
-            throw new IllegalArgumentException("Property '" + name + "' is not indexed.", e);
+            getConfiguration().setProperty(name, value);
         }
     }
 
@@ -231,4 +216,26 @@ public void set(String name, String key, Object value)
     {
         getConfiguration().setProperty(name + "." + key, value);
     }
+
+    /**
+     * Tests whether the given name references an indexed property. This
+     * implementation tests for properties of type list or array. If the
+     * property does not exist, an exception is thrown.
+     *
+     * @param name the name of the property to check
+     * @return a flag whether this is an indexed property
+     * @throws IllegalArgumentException if the property does not exist
+     */
+    private boolean checkIndexedProperty(String name)
+    {
+        Object property = getConfiguration().getProperty(name);
+
+        if (property == null)
+        {
+            throw new IllegalArgumentException("Property '" + name
+                    + "' does not exist.");
+        }
+
+        return (property instanceof List) || property.getClass().isArray();
+    }
 }
diff --git a/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java b/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
index 3d5c608001..f40b1a9d4b 100644
--- a/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
+++ b/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java
@@ -722,11 +722,9 @@ protected void testGetDescriptorBase(String name, Class<?> type)
     }
 
     /**
-     * Tests if accessing a non-indexed property using the index
-     * get method throws an IllegalArgumentException as it
-     * should.
+     * Tests whether nested properties can be accessed.
      */
-    public void testNonIndexedPropeties()
+    public void testNestedPropeties()
     {
         ConfigurationDynaBean nested = (ConfigurationDynaBean) bean.get("mappedProperty");
 
@@ -738,44 +736,73 @@ public void testNonIndexedPropeties()
     }
 
     /**
-     * Tests if accessing a non-indexed property using the index
+     * Tests if reading a non-indexed property using the index
      * get method throws an IllegalArgumentException as it
      * should.
      */
-    public void testNestedPropeties()
+    public void testGetNonIndexedProperties()
     {
         try
         {
             bean.get("booleanProperty", 0);
+            fail("Should have thrown IllegalArgumentException");
         }
         catch (IllegalArgumentException e)
         {
-            return;
+            //ok
         }
-        catch (Throwable t)
+    }
+
+    /**
+     * Tests whether accessing a non-indexed string property using the index get
+     * method causes an exception.
+     */
+    public void testGetIndexedString()
+    {
+        bean.set("stringProp", "value");
+        try
         {
-            fail("Threw " + t + " instead of IllegalArgumentException");
-            return;
+            bean.get("stringProp", 0);
+            fail("Could access non-indexed property with indexed get method!");
         }
+        catch(IllegalArgumentException iex)
+        {
+            //ok
+        }
+    }
 
-        fail("Should have thrown IllegalArgumentException");
-
+    /**
+     * Tests whether an indexed access to a non-existing property causes an
+     * exception.
+     */
+    public void testGetIndexedNonExisting()
+    {
         try
         {
-            bean.set("booleanProperty", 0, Boolean.TRUE);
+            bean.get("Non existing property", 0);
+            fail("Non existing property not detected!");
         }
-        catch (IllegalArgumentException e)
+        catch (IllegalArgumentException iex)
         {
-            return;
+            // ok
         }
-        catch (Throwable t)
+    }
+
+    /**
+     * Tests if writing a non-indexed property using the index
+     * set method with an index &gt; 0 throws an IllegalArgumentException as it
+     * should.
+     */
+    public void testSetNonIndexedProperties()
+    {
+        try
         {
-            fail("Threw " + t + " instead of IllegalArgumentException");
-            return;
+            bean.set("booleanProperty", 1, Boolean.TRUE);
+            fail("Could write indexed property!");
+        }
+        catch (IllegalArgumentException e)
+        {
+            //ok
         }
-
-        fail("Should have thrown IllegalArgumentException");
     }
-
-
 }
