From 8a127b81963d28a06bc438c47dd551f860ee8055 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Wed, 26 Aug 2015 12:57:13 +0000
Subject: [PATCH] Follow-up to BCEL-209 Drop the field num_bootstrap_arguments
 it is not necessary, and was not kept in sync if the arguments were updated

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1697916 13f79535-47bb-0310-9956-ffa450edef68
---
 .../bcel6/classfile/BootstrapMethod.java        | 17 +++++++----------
 1 file changed, 7 insertions(+), 10 deletions(-)

diff --git a/src/main/java/org/apache/commons/bcel6/classfile/BootstrapMethod.java b/src/main/java/org/apache/commons/bcel6/classfile/BootstrapMethod.java
index ef42d35080..0b031f32a2 100644
--- a/src/main/java/org/apache/commons/bcel6/classfile/BootstrapMethod.java
+++ b/src/main/java/org/apache/commons/bcel6/classfile/BootstrapMethod.java
@@ -20,6 +20,7 @@
 import java.io.DataInput;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.Arrays;
 
 import org.apache.commons.bcel6.Constants;
 
@@ -37,8 +38,6 @@ public class BootstrapMethod implements Cloneable {
     /** Index of the CONSTANT_MethodHandle_info structure in the constant_pool table */
     private int bootstrap_method_ref;
 
-    private final int num_bootstrap_arguments;
-
     /** Array of references to the constant_pool table */
     private int[] bootstrap_arguments;
 
@@ -59,8 +58,7 @@ public BootstrapMethod(BootstrapMethod c) {
     BootstrapMethod(DataInput input) throws IOException {
         this(input.readUnsignedShort(), input.readUnsignedShort(), (int[]) null);
 
-        bootstrap_arguments = new int[num_bootstrap_arguments];
-        for (int i = 0; i < num_bootstrap_arguments; i++) {
+        for (int i = 0; i < bootstrap_arguments.length; i++) {
             bootstrap_arguments[i] = input.readUnsignedShort();
         }
     }
@@ -73,7 +71,7 @@ public BootstrapMethod(BootstrapMethod c) {
      */
     public BootstrapMethod(int bootstrap_method_ref, int num_bootstrap_arguments, int[] bootstrap_arguments) {
         this.bootstrap_method_ref = bootstrap_method_ref;
-        this.num_bootstrap_arguments = num_bootstrap_arguments;
+        this.bootstrap_arguments = new int[num_bootstrap_arguments];
         this.bootstrap_arguments = bootstrap_arguments;
     }
 
@@ -102,7 +100,7 @@ public int[] getBootstrapArguments() {
      * @return count of number of boostrap arguments
      */
     public int getNumBootstrapArguments() {
-        return num_bootstrap_arguments;
+        return bootstrap_arguments.length;
     }
 
     /**
@@ -117,10 +115,8 @@ public void setBootstrapArguments(int[] bootstrap_arguments) {
      */
     @Override
     public final String toString() {
-        return "BootstrapMethod(" + bootstrap_method_ref + ", " + num_bootstrap_arguments + ", "
-               //UNDONE
-               //+ bootstrap_arguments + ")";
-               + "UNDONE)";
+        return "BootstrapMethod(" + bootstrap_method_ref + ", " + bootstrap_arguments.length + ", "
+               + Arrays.toString(bootstrap_arguments) + ")";
     }
 
     /**
@@ -132,6 +128,7 @@ public final String toString( ConstantPool constant_pool ) {
         bootstrap_method_name = constant_pool.constantToString(bootstrap_method_ref,
                 Constants.CONSTANT_MethodHandle);
         buf.append(Utility.compactClassName(bootstrap_method_name));
+        final int num_bootstrap_arguments = bootstrap_arguments.length;
         if (num_bootstrap_arguments > 0) {
             buf.append("\n     Method Arguments:");
             for (int i = 0; i < num_bootstrap_arguments; i++) {
