From 03da017dfc0a0a033c9f9cbb07f40df2f7024070 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 5 Mar 2011 21:05:41 +0000
Subject: [PATCH] NET-363 Can't connect to a server behind firewall in passive
 mode.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1078354 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 ++
 .../org/apache/commons/net/ftp/FTPClient.java | 35 +++++++++++++------
 2 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 294fcf56e..37968b240 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -57,6 +57,9 @@ The <action> type attribute can be add,update,fix,remove.
 
     <body>
         <release version="3.0" date="TBA" description="TBA">
+            <action issue="NET-363" dev="sebb" type="fix" due-to="daniel damon">
+            Can't connect to a server behind firewall in passive mode.
+            </action>
             <action issue="NET-348" dev="sebb" type="fix">
             Queue is full TelnetInputStream.
             </action>
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index 5b8c56ff4..2f2fd87aa 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -346,11 +346,11 @@ public class FTPClient extends FTP
     // Most FTP servers don't seem to support concurrent control and data connection usage
     private int __controlKeepAliveReplyTimeout=1000;
 
-    /** Pattern for PASV mode responses */
-    private static final String __parms = "\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3}";
-    private static final java.util.regex.Pattern __parms_pat;
+    /** Pattern for PASV mode responses. Groups: (n,n,n,n),(n),(n) */
+    private static final java.util.regex.Pattern __PARMS_PAT;
     static {
-        __parms_pat = java.util.regex.Pattern.compile(__parms);
+        __PARMS_PAT = java.util.regex.Pattern.compile(
+                "(\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3}),(\\d{1,3}),(\\d{1,3})");
     }
 
     private static class PropertiesSingleton {
@@ -430,28 +430,41 @@ private String __parsePathname(String reply)
     private void __parsePassiveModeReply(String reply)
     throws MalformedServerReplyException
     {
-        java.util.regex.Matcher m = __parms_pat.matcher(reply);
+        java.util.regex.Matcher m = __PARMS_PAT.matcher(reply);
         if (!m.find()) {
             throw new MalformedServerReplyException(
                     "Could not parse passive host information.\nServer Reply: " + reply);
         }
-        reply = m.group();
-        String parts[] = m.group().split(",");
 
-        __passiveHost = parts[0] + '.' + parts[1] + '.' + parts[2] + '.' + parts[3];
+        __passiveHost = m.group(1).replace(',', '.'); // Fix up to look like IP address
 
         try
         {
-            int oct1 = Integer.parseInt(parts[4]);
-            int oct2 = Integer.parseInt(parts[5]);
+            int oct1 = Integer.parseInt(m.group(2));
+            int oct2 = Integer.parseInt(m.group(3));
             __passivePort = (oct1 << 8) | oct2;
         }
         catch (NumberFormatException e)
         {
             throw new MalformedServerReplyException(
-                    "Could not parse passive host information.\nServer Reply: " + reply);
+                    "Could not parse passive port information.\nServer Reply: " + reply);
         }
 
+        try {
+            InetAddress host = InetAddress.getByName(__passiveHost);
+            // reply is a local address, but target is not - assume NAT box changed the PASV reply
+            if (host.isSiteLocalAddress() && !getRemoteAddress().isSiteLocalAddress()){
+                String hostAddress = getRemoteAddress().getHostAddress();
+                if (_commandSupport_.getListenerCount() > 0) {
+                    _commandSupport_.fireReplyReceived(0, 
+                            "[Replacing site local address "+__passiveHost+" with "+hostAddress+"]\n");
+                }
+                __passiveHost = hostAddress;
+            }
+        } catch (UnknownHostException e) { // Should not happen as we are passing in an IP address
+            throw new MalformedServerReplyException(
+                    "Could not parse passive host information.\nServer Reply: " + reply);            
+        }
     }
 
     private void __parseExtendedPassiveModeReply(String reply)
