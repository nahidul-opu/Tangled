From 5cf68bdc46c7bcc0fc5eb3cacd1c84514ef552cf Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 20 Feb 2015 16:18:00 +0000
Subject: [PATCH] return 0 from read when asked to read 0 bytes - COMPRESS-309

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1661151 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 +++
 .../bzip2/BZip2CompressorInputStream.java     |  3 ++
 .../bzip2/BZip2CompressorInputStreamTest.java | 33 +++++++++++++++++++
 3 files changed, 41 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0e6db4c47c2..5ead1073d78 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -54,6 +54,11 @@ breaks backwards compatibility for code which used the old package.
 This also changes the superclass of ZCompressorInputStream.    
 ">
 
+      <action issue="COMPRESS-309" type="fix"
+              date="2015-02-20">
+        BZip2CompressorInputStream#read would return -1 when asked to
+        read 0 bytes.
+      </action>
       <action issue="COMPRESS-306" type="fix">
         ArchiveStreamFactory fails to pass on the encoding when creating some streams.
         * ArjArchiveInputStream
diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
index e0e3b1ec135..b32b1f9b21e 100644
--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
@@ -165,6 +165,9 @@ public int read(final byte[] dest, final int offs, final int len)
         if (this.in == null) {
             throw new IOException("stream closed");
         }
+        if (len == 0) {
+            return 0;
+        }
 
         final int hi = offs + len;
         int destOffs = offs;
diff --git a/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java b/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java
index 2ee4567d05f..d15d74a6728 100644
--- a/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java
@@ -20,8 +20,11 @@
 
 import static org.apache.commons.compress.AbstractTestCase.getFile;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
 import java.io.IOException;
+import org.junit.Assert;
 import org.junit.Test;
 
 public class BZip2CompressorInputStreamTest {
@@ -36,4 +39,34 @@ public void shouldThrowAnIOExceptionWhenAppliedToAZipFile() throws Exception {
         }
     }
 
+    /**
+     * @see "https://issues.apache.org/jira/browse/COMPRESS-309"
+     */
+    @Test
+    public void readOfLength0ShouldReturn0() throws Exception {
+        // Create a big random piece of data
+        byte[] rawData = new byte[1048576];
+        for (int i=0; i < rawData.length; ++i) {
+            rawData[i] = (byte) Math.floor(Math.random()*256);
+        }
+
+        // Compress it
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);
+        bzipOut.write(rawData);
+        bzipOut.flush();
+        bzipOut.close();
+        baos.flush();
+        baos.close();
+
+        // Try to read it back in
+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+        BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);
+        byte[] buffer = new byte[1024];
+        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));
+        Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));
+        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));
+        bzipIn.close();
+    }
+
 }
