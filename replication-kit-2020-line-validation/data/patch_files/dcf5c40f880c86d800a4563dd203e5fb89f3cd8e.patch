From dcf5c40f880c86d800a4563dd203e5fb89f3cd8e Mon Sep 17 00:00:00 2001
From: Ate Douma <ate@apache.org>
Date: Fri, 18 Apr 2014 12:00:54 +0000
Subject: [PATCH] SCXML-202: move state machine running status management into
 SCInstance itself, thereby retaining this status after
 serializing/de-serializing

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/scxml/trunk@1588451 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/scxml2/SCInstance.java | 26 +++++++++++++++++++
 .../commons/scxml2/SCXMLExecutionContext.java | 14 +++-------
 2 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/src/main/java/org/apache/commons/scxml2/SCInstance.java b/src/main/java/org/apache/commons/scxml2/SCInstance.java
index 51ed1b107..6d8c04a37 100644
--- a/src/main/java/org/apache/commons/scxml2/SCInstance.java
+++ b/src/main/java/org/apache/commons/scxml2/SCInstance.java
@@ -76,6 +76,11 @@ public class SCInstance implements Serializable {
      */
     private final Status currentStatus;
 
+    /**
+     * Running status for this state machine
+     */
+    private boolean running;
+
     /**
      * The SCXML I/O Processor for the internal event queue
      */
@@ -136,6 +141,7 @@ protected SCInstance(final SCXMLIOProcessor internalIOProcessor, final Evaluator
      * @throws ModelException if the state machine hasn't been setup for this instance
      */
     protected void initialize() throws ModelException {
+        running = false;
         if (stateMachine == null) {
             throw new ModelException(ERR_NO_STATE_MACHINE);
         }
@@ -293,6 +299,26 @@ public Status getCurrentStatus() {
         return currentStatus;
     }
 
+
+    /**
+     * @return Returns if the state machine is running
+     */
+    public boolean isRunning() {
+        return running;
+    }
+
+    /**
+     * Sets the running status of the state machine
+     * @param running flag indicating the running status of the state machine
+     * @throws IllegalStateException Exception thrown if trying to set the state machine running when in a Final state
+     */
+    protected void setRunning(final boolean running) throws IllegalStateException {
+        if (!this.running && running && currentStatus.isFinal()) {
+            throw new IllegalStateException("The state machine is in a Final state and cannot be set running again");
+        }
+        this.running = running;
+    }
+
     /**
      * Get the root context.
      *
diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
index 0d0a17aa2..881cc9c51 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
@@ -99,11 +99,6 @@ public class SCXMLExecutionContext implements SCXMLIOProcessor {
      */
     private final Map<String, Invoker> invokers = new HashMap<String, Invoker>();
 
-    /**
-     * Running status for this state machine
-     */
-    private boolean running;
-
     /**
      * Constructor
      *
@@ -143,14 +138,14 @@ public ActionExecutionContext getActionExecutionContext() {
      * @return Returns true if this state machine is running
      */
     public boolean isRunning() {
-        return running;
+        return scInstance.isRunning();
     }
 
     /**
      * Stop a running state machine
      */
     public void stopRunning() {
-        this.running = false;
+        scInstance.setRunning(false);
     }
 
     /**
@@ -160,7 +155,6 @@ public void stopRunning() {
      * @throws ModelException if the state machine instance failed to initialize.
      */
     public void initialize() throws ModelException {
-        running = false;
         if (!invokeIds.isEmpty()) {
             for (Invoke invoke : new ArrayList<Invoke>(invokeIds.keySet())) {
                 cancelInvoker(invoke);
@@ -168,7 +162,7 @@ public void initialize() throws ModelException {
         }
         internalEventQueue.clear();
         scInstance.initialize();
-        running = true;
+        scInstance.setRunning(true);
     }
 
     /**
@@ -245,7 +239,6 @@ protected void setErrorReporter(ErrorReporter errorReporter) {
         }
         catch (ModelException me) {
             // won't happen
-            return;
         }
     }
 
@@ -306,7 +299,6 @@ protected void attachInstance(SCInstance instance) {
             }
             catch (ModelException me) {
                 // should not happen
-                return;
             }
         }
     }
