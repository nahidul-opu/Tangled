From 4857531fe0f4cd2435d1aa61661e56066d8689c8 Mon Sep 17 00:00:00 2001
From: Xavier Hanin <xavier@apache.org>
Date: Mon, 26 Dec 2005 09:44:33 +0000
Subject: [PATCH] FIX: cachefileset was returning all artifacts for empty
 configuration (IVY-108)

git-svn-id: https://svn.apache.org/repos/asf/incubator/ivy/trunk@484074 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |   1 +
 .../fr/jayasoft/ivy/ant/IvyCacheFileset.java  | 103 ++-------------
 .../fr/jayasoft/ivy/ant/IvyCachePath.java     |  96 +-------------
 .../fr/jayasoft/ivy/ant/IvyCacheTask.java     | 119 ++++++++++++++++++
 .../jayasoft/ivy/ant/IvyCacheFilesetTest.java |  97 ++++++++++++++
 .../fr/jayasoft/ivy/ant/IvyCachePathTest.java |  13 ++
 test/java/fr/jayasoft/ivy/ant/ivy-108.xml     |  10 ++
 7 files changed, 255 insertions(+), 184 deletions(-)
 create mode 100644 src/java/fr/jayasoft/ivy/ant/IvyCacheTask.java
 create mode 100644 test/java/fr/jayasoft/ivy/ant/IvyCacheFilesetTest.java
 create mode 100644 test/java/fr/jayasoft/ivy/ant/ivy-108.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index d502be894..289b2940e 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -12,6 +12,7 @@
 - IMPROVE: import system properties as ivy variables in standalone mode
 - IMPROVE: string identifying a module is now clearly different from a path
 - IMPROVE: better error message when publish fails due to readonly destination (IVY-83)
+- FIX: cachefileset was returning all artifacts for empty configuration (IVY-108)
 - FIX: transitive and changing attribute were not copied in ivy files in cache (IVY-94)
 - FIX: chain resolver now support latest strategy configuration (IVY-90)
 - FIX: raise a clean error when a cyclic variable definition is found (IVY-75)
diff --git a/src/java/fr/jayasoft/ivy/ant/IvyCacheFileset.java b/src/java/fr/jayasoft/ivy/ant/IvyCacheFileset.java
index 9003c2cb5..e84189d56 100644
--- a/src/java/fr/jayasoft/ivy/ant/IvyCacheFileset.java
+++ b/src/java/fr/jayasoft/ivy/ant/IvyCacheFileset.java
@@ -5,128 +5,47 @@
  */
 package fr.jayasoft.ivy.ant;
 
-import java.io.File;
-import java.util.Arrays;
-import java.util.Collection;
 import java.util.Iterator;
-import java.util.LinkedHashSet;
+import java.util.List;
 
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.PatternSet.NameEntry;
 
-import fr.jayasoft.ivy.Artifact;
-import fr.jayasoft.ivy.Ivy;
-import fr.jayasoft.ivy.ModuleId;
-import fr.jayasoft.ivy.filter.Filter;
-import fr.jayasoft.ivy.filter.FilterHelper;
-import fr.jayasoft.ivy.xml.XmlReportParser;
-
-//TODO: refactor this class and IvyCacheFileset to extract common behaviour
-public class IvyCacheFileset extends IvyTask {
-    private String _conf;
+public class IvyCacheFileset extends IvyCacheTask {
     private String _setid;
 
-    private String _organisation;
-    private String _module;
-    private boolean _haltOnFailure = true;
-    private File _cache;
-    private String _type;
-    
-    private Filter _artifactFilter = null;
-    
-    public String getConf() {
-        return _conf;
-    }
-    
-    public void setConf(String conf) {
-        _conf = conf;
-    }
-    
-    public String getModule() {
-        return _module;
-    }
-    public void setModule(String module) {
-        _module = module;
-    }
-    public String getOrganisation() {
-        return _organisation;
-    }
-    public void setOrganisation(String organisation) {
-        _organisation = organisation;
-    }
-    public boolean isHaltonfailure() {
-        return _haltOnFailure;
-    }
-    public void setHaltonfailure(boolean haltOnFailure) {
-        _haltOnFailure = haltOnFailure;
-    }
-    public File getCache() {
-        return _cache;
-    }
-    public void setCache(File cache) {
-        _cache = cache;
-    }
     public String getSetid() {
         return _setid;
     }
     public void setSetid(String id) {
         _setid = id;
     }
-    public String getType() {
-        return _type;
-    }
-    public void setType(String type) {
-        _type = type;
-    }
 
     public void execute() throws BuildException {
-        Ivy ivy = getIvyInstance();
         if (_setid == null) {
             throw new BuildException("setid is required in ivy cachefileset");
         }
-        ensureResolved(isHaltonfailure());
-        _conf = getProperty(_conf, ivy, "ivy.resolved.configurations");
-        if (_conf.equals("*")) {
-            _conf = getProperty(ivy, "ivy.resolved.configurations");
-        }
-        _organisation = getProperty(_organisation, ivy, "ivy.organisation");
-        _module = getProperty(_module, ivy, "ivy.module");
-        if (_cache == null) {
-            _cache = ivy.getDefaultCache();
-        }
-        
-        if (_organisation == null) {
-            throw new BuildException("no organisation provided for ivy cachefileset: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>");
-        }
-        if (_module == null) {
-            throw new BuildException("no module name provided for ivy cachefileset: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>");
-        }
-        _artifactFilter = FilterHelper.getArtifactTypeFilter(_type);
         try {
-            XmlReportParser parser = new XmlReportParser();
             FileSet fileset = new FileSet();
             fileset.setProject(getProject());
             getProject().addReference(_setid, fileset);
             fileset.setDir(getCache());
             
-            String[] confs = splitConfs(_conf);
-            Collection all = new LinkedHashSet();
-            for (int i = 0; i < confs.length; i++) {
-                Artifact[] artifacts = parser.getArtifacts(new ModuleId(_organisation, _module), confs[i], _cache);
-                all.addAll(Arrays.asList(artifacts));
-            }
-            for (Iterator iter = all.iterator(); iter.hasNext();) {
-                Artifact artifact = (Artifact)iter.next();
-                if (_artifactFilter.accept(artifact)) {
+            List paths = getPaths();
+            if (paths.isEmpty()) {
+                NameEntry ne = fileset.createExclude();
+                ne.setName("**/*");
+            } else {
+                for (Iterator iter = paths.iterator(); iter.hasNext();) {
+                    String p = (String)iter.next();
                     NameEntry ne = fileset.createInclude();
-                    ne.setName(ivy.getArchivePathInCache(artifact));
+                    ne.setName(p);
                 }
             }
         } catch (Exception ex) {
             throw new BuildException("impossible to build ivy cache fileset: "+ex.getMessage(), ex);
-        }
-        
+        }        
     }
 
 }
diff --git a/src/java/fr/jayasoft/ivy/ant/IvyCachePath.java b/src/java/fr/jayasoft/ivy/ant/IvyCachePath.java
index 85f9960e5..c0390d03d 100644
--- a/src/java/fr/jayasoft/ivy/ant/IvyCachePath.java
+++ b/src/java/fr/jayasoft/ivy/ant/IvyCachePath.java
@@ -6,79 +6,20 @@
 package fr.jayasoft.ivy.ant;
 
 import java.io.File;
-import java.util.Arrays;
-import java.util.Collection;
 import java.util.Iterator;
-import java.util.LinkedHashSet;
 
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.types.Path;
 
-import fr.jayasoft.ivy.Artifact;
-import fr.jayasoft.ivy.Ivy;
-import fr.jayasoft.ivy.ModuleId;
-import fr.jayasoft.ivy.filter.Filter;
-import fr.jayasoft.ivy.filter.FilterHelper;
-import fr.jayasoft.ivy.xml.XmlReportParser;
-
-// TODO: refactor this class and IvyCacheFileset to extract common behaviour
-public class IvyCachePath extends IvyTask {
-    private String _conf;
+public class IvyCachePath extends IvyCacheTask {
     private String _pathid;
 
-    private String _organisation;
-    private String _module;
-    private boolean _haltOnFailure = true;
-    private File _cache;
-    private String _type;
-    
-    private Filter _artifactFilter = null;
-    
-    public String getConf() {
-        return _conf;
-    }
-    
-    public void setConf(String conf) {
-        _conf = conf;
-    }
-    
-    public String getModule() {
-        return _module;
-    }
-    public void setModule(String module) {
-        _module = module;
-    }
-    public String getOrganisation() {
-        return _organisation;
-    }
-    public void setOrganisation(String organisation) {
-        _organisation = organisation;
-    }
-    public boolean isHaltonfailure() {
-        return _haltOnFailure;
-    }
-    public void setHaltonfailure(boolean haltOnFailure) {
-        _haltOnFailure = haltOnFailure;
-    }
-    public File getCache() {
-        return _cache;
-    }
-    public void setCache(File cache) {
-        _cache = cache;
-    }
     public String getPathid() {
         return _pathid;
     }
     public void setPathid(String id) {
         _pathid = id;
     }
-    public String getType() {
-        return _type;
-    }
-
-    public void setType(String type) {
-        _type = type;
-    }
     /**
      * @deprecated use setPathid instead
      * @param id
@@ -88,44 +29,15 @@ public void setId(String id) {
     }
 
     public void execute() throws BuildException {
-        Ivy ivy = getIvyInstance();
         if (_pathid == null) {
             throw new BuildException("pathid is required in ivy classpath");
         }
-        ensureResolved(isHaltonfailure());
-        _conf = getProperty(_conf, ivy, "ivy.resolved.configurations");
-        if (_conf.equals("*")) {
-            _conf = getProperty(ivy, "ivy.resolved.configurations");
-        }
-        _organisation = getProperty(_organisation, ivy, "ivy.organisation");
-        _module = getProperty(_module, ivy, "ivy.module");
-        if (_cache == null) {
-            _cache = ivy.getDefaultCache();
-        }
-        
-        if (_organisation == null) {
-            throw new BuildException("no organisation provided for ivy cachepath: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>");
-        }
-        if (_module == null) {
-            throw new BuildException("no module name provided for ivy cachepath: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>");
-        }
-        _artifactFilter = FilterHelper.getArtifactTypeFilter(_type);
-        
         try {
-            XmlReportParser parser = new XmlReportParser();
             Path path = new Path(getProject());
             getProject().addReference(_pathid, path);
-            String[] confs = splitConfs(_conf);
-            Collection all = new LinkedHashSet();
-            for (int i = 0; i < confs.length; i++) {
-                Artifact[] artifacts = parser.getArtifacts(new ModuleId(_organisation, _module), confs[i], _cache);
-                all.addAll(Arrays.asList(artifacts));
-            }
-            for (Iterator iter = all.iterator(); iter.hasNext();) {
-                Artifact artifact = (Artifact)iter.next();
-                if (_artifactFilter.accept(artifact)) {
-                    path.createPathElement().setLocation(ivy.getArchiveFileInCache(_cache, artifact));
-                }
+            for (Iterator iter = getPaths().iterator(); iter.hasNext();) {
+                String p = (String)iter.next();
+                path.createPathElement().setLocation(new File(getCache(), p));
             }
         } catch (Exception ex) {
             throw new BuildException("impossible to build ivy path: "+ex.getMessage(), ex);
diff --git a/src/java/fr/jayasoft/ivy/ant/IvyCacheTask.java b/src/java/fr/jayasoft/ivy/ant/IvyCacheTask.java
new file mode 100644
index 000000000..f2c753346
--- /dev/null
+++ b/src/java/fr/jayasoft/ivy/ant/IvyCacheTask.java
@@ -0,0 +1,119 @@
+/*
+ * This file is subject to the license found in LICENCE.TXT in the root directory of the project.
+ * 
+ * #SNAPSHOT#
+ */
+package fr.jayasoft.ivy.ant;
+
+import java.io.File;
+import java.io.IOException;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.List;
+
+import org.apache.tools.ant.BuildException;
+
+import fr.jayasoft.ivy.Artifact;
+import fr.jayasoft.ivy.Ivy;
+import fr.jayasoft.ivy.ModuleId;
+import fr.jayasoft.ivy.filter.Filter;
+import fr.jayasoft.ivy.filter.FilterHelper;
+import fr.jayasoft.ivy.xml.XmlReportParser;
+
+//TODO: refactor this class and IvyCachePath to extract common behaviour
+public abstract class IvyCacheTask extends IvyTask {
+    private String _conf;
+
+    private String _organisation;
+    private String _module;
+    private boolean _haltOnFailure = true;
+    private File _cache;
+    private String _type;
+    
+    private Filter _artifactFilter = null;
+    
+    public String getConf() {
+        return _conf;
+    }
+    
+    public void setConf(String conf) {
+        _conf = conf;
+    }
+    
+    public String getModule() {
+        return _module;
+    }
+    public void setModule(String module) {
+        _module = module;
+    }
+    public String getOrganisation() {
+        return _organisation;
+    }
+    public void setOrganisation(String organisation) {
+        _organisation = organisation;
+    }
+    public boolean isHaltonfailure() {
+        return _haltOnFailure;
+    }
+    public void setHaltonfailure(boolean haltOnFailure) {
+        _haltOnFailure = haltOnFailure;
+    }
+    public File getCache() {
+        return _cache;
+    }
+    public void setCache(File cache) {
+        _cache = cache;
+    }
+    public String getType() {
+        return _type;
+    }
+    public void setType(String type) {
+        _type = type;
+    }
+
+    protected List getPaths() throws BuildException, ParseException, IOException {
+        Ivy ivy = getIvyInstance();
+        
+        ensureResolved(isHaltonfailure());
+        _conf = getProperty(_conf, ivy, "ivy.resolved.configurations");
+        if (_conf.equals("*")) {
+            _conf = getProperty(ivy, "ivy.resolved.configurations");
+        }
+        _organisation = getProperty(_organisation, ivy, "ivy.organisation");
+        _module = getProperty(_module, ivy, "ivy.module");
+        if (_cache == null) {
+            _cache = ivy.getDefaultCache();
+        }
+        
+        if (_organisation == null) {
+            throw new BuildException("no organisation provided for ivy cachefileset: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>");
+        }
+        if (_module == null) {
+            throw new BuildException("no module name provided for ivy cachefileset: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>");
+        }
+        _artifactFilter = FilterHelper.getArtifactTypeFilter(_type);
+
+        XmlReportParser parser = new XmlReportParser();
+        
+        String[] confs = splitConfs(_conf);
+        Collection all = new LinkedHashSet();
+        for (int i = 0; i < confs.length; i++) {
+            Artifact[] artifacts = parser.getArtifacts(new ModuleId(_organisation, _module), confs[i], _cache);
+            all.addAll(Arrays.asList(artifacts));
+        }
+        List paths = new ArrayList();
+        for (Iterator iter = all.iterator(); iter.hasNext();) {
+            Artifact artifact = (Artifact)iter.next();
+            if (_artifactFilter.accept(artifact)) {
+                paths.add(ivy.getArchivePathInCache(artifact));
+            }
+        }
+        
+        return paths;
+    }
+
+}
diff --git a/test/java/fr/jayasoft/ivy/ant/IvyCacheFilesetTest.java b/test/java/fr/jayasoft/ivy/ant/IvyCacheFilesetTest.java
new file mode 100644
index 000000000..c78fb629e
--- /dev/null
+++ b/test/java/fr/jayasoft/ivy/ant/IvyCacheFilesetTest.java
@@ -0,0 +1,97 @@
+/*
+ * This file is subject to the license found in LICENCE.TXT in the root directory of the project.
+ * 
+ * #SNAPSHOT#
+ */
+package fr.jayasoft.ivy.ant;
+
+import java.io.File;
+
+import junit.framework.TestCase;
+
+import org.apache.tools.ant.BuildException;
+import org.apache.tools.ant.DirectoryScanner;
+import org.apache.tools.ant.Project;
+import org.apache.tools.ant.taskdefs.Delete;
+import org.apache.tools.ant.types.FileSet;
+
+public class IvyCacheFilesetTest extends TestCase {
+    private File _cache;
+    private IvyCacheFileset _fileset;
+    private Project _project;
+    
+    protected void setUp() throws Exception {
+        createCache();
+        _project = new Project();
+        _project.setProperty("ivy.conf.file", "test/repositories/ivyconf.xml");
+
+        _fileset = new IvyCacheFileset();
+        _fileset.setProject(_project);
+        _fileset.setCache(_cache);
+    }
+
+    private void createCache() {
+        _cache = new File("build/cache");
+        _cache.mkdirs();
+    }
+    
+    protected void tearDown() throws Exception {
+        cleanCache();
+    }
+
+    private void cleanCache() {
+        Delete del = new Delete();
+        del.setProject(new Project());
+        del.setDir(_cache);
+        del.execute();
+    }
+
+    public void testSimple() throws Exception {
+        _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-simple.xml");
+        _fileset.setSetid("simple-setid");
+        _fileset.execute();
+        Object ref = _project.getReference("simple-setid");
+        assertNotNull(ref);
+        assertTrue(ref instanceof FileSet);
+        FileSet fs = (FileSet)ref;
+        DirectoryScanner directoryScanner = fs.getDirectoryScanner(_project);
+        assertEquals(1, directoryScanner.getIncludedFiles().length);
+        assertEquals(_fileset.getIvyInstance().getArchiveFileInCache(_cache, "org1", "mod1.2", "2.0", "mod1.2", "jar", "jar").getAbsolutePath(),
+                new File("build/cache/"+directoryScanner.getIncludedFiles()[0]).getAbsolutePath());
+    }
+
+    public void testEmptyConf() throws Exception {
+        _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-108.xml");
+        _fileset.setSetid("emptyconf-setid");
+        _fileset.setConf("empty");
+        _fileset.execute();
+        Object ref = _project.getReference("emptyconf-setid");
+        assertNotNull(ref);
+        assertTrue(ref instanceof FileSet);
+        FileSet fs = (FileSet)ref;
+        DirectoryScanner directoryScanner = fs.getDirectoryScanner(_project);
+        assertEquals(0, directoryScanner.getIncludedFiles().length);
+    }
+
+    public void testFailure() throws Exception {
+        try {
+            _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-failure.xml");
+            _fileset.setSetid("failure-setid");
+            _fileset.execute();
+            fail("failure didn't raised an exception with default haltonfailure setting");
+        } catch (BuildException ex) {
+            // ok => should raised an exception
+        }
+    }
+
+    public void testHaltOnFailure() throws Exception {
+        try {
+            _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-failure.xml");
+            _fileset.setSetid("haltfailure-setid");
+            _fileset.setHaltonfailure(false);
+            _fileset.execute();
+        } catch (BuildException ex) {
+            fail("failure raised an exception with haltonfailure set to false");
+        }
+    }
+}
diff --git a/test/java/fr/jayasoft/ivy/ant/IvyCachePathTest.java b/test/java/fr/jayasoft/ivy/ant/IvyCachePathTest.java
index 521880df8..8ce548660 100644
--- a/test/java/fr/jayasoft/ivy/ant/IvyCachePathTest.java
+++ b/test/java/fr/jayasoft/ivy/ant/IvyCachePathTest.java
@@ -58,6 +58,19 @@ public void testSimple() throws Exception {
                 new File(p.list()[0]).getAbsolutePath());
     }
 
+
+    public void testEmptyConf() throws Exception {
+        _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-108.xml");
+        _path.setPathid("emptyconf-pathid");
+        _path.setConf("empty");
+        _path.execute();
+        Object ref = _project.getReference("emptyconf-pathid");
+        assertNotNull(ref);
+        assertTrue(ref instanceof Path);
+        Path p = (Path)ref;
+        assertEquals(0, p.size());
+    }
+
     public void testFailure() throws Exception {
         try {
             _project.setProperty("ivy.dep.file", "test/java/fr/jayasoft/ivy/ant/ivy-failure.xml");
diff --git a/test/java/fr/jayasoft/ivy/ant/ivy-108.xml b/test/java/fr/jayasoft/ivy/ant/ivy-108.xml
new file mode 100644
index 000000000..bdabfbbc2
--- /dev/null
+++ b/test/java/fr/jayasoft/ivy/ant/ivy-108.xml
@@ -0,0 +1,10 @@
+<ivy-module version="1.2">
+  <info organisation="jayasoft" module="108"/>
+  <configurations>
+    <conf name="default"/>
+    <conf name="empty"/>
+  </configurations>
+  <dependencies>
+    <dependency org="org1" name="mod1.2" rev="2.0" conf="default"/>
+  </dependencies>
+</ivy-module>
