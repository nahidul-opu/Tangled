From e69d76cf1654d0676a5872fa6884133d6b5ca7a0 Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Fri, 29 Jul 2011 19:23:09 +0000
Subject: [PATCH] [CONFIGURATION-452] XPathExpressionEngine now supports keys
 for adding or setting properties without a whitespace.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1152343 13f79535-47bb-0310-9956-ffa450edef68
---
 .../tree/xpath/XPathExpressionEngine.java     |  69 +++++++++--
 .../tree/xpath/TestXPathExpressionEngine.java |  21 +---
 .../TestXPathExpressionEngineInConfig.java    | 111 ++++++++++++++++++
 3 files changed, 173 insertions(+), 28 deletions(-)
 create mode 100644 src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngineInConfig.java

diff --git a/src/java/org/apache/commons/configuration/tree/xpath/XPathExpressionEngine.java b/src/java/org/apache/commons/configuration/tree/xpath/XPathExpressionEngine.java
index e553c9ff72..10d6fcf27a 100644
--- a/src/java/org/apache/commons/configuration/tree/xpath/XPathExpressionEngine.java
+++ b/src/java/org/apache/commons/configuration/tree/xpath/XPathExpressionEngine.java
@@ -128,6 +128,12 @@ public class XPathExpressionEngine implements ExpressionEngine
     private static final String NODE_PATH_DELIMITERS = PATH_DELIMITER
             + ATTR_DELIMITER;
 
+    /**
+     * Constant for a space which is used as delimiter in keys for adding
+     * properties.
+     */
+    private static final String SPACE = " ";
+
     /**
      * Executes a query. The passed in property key is directly passed to a
      * JXPath context.
@@ -213,18 +219,15 @@ public NodeAddData prepareAdd(ConfigurationNode root, String key)
                     "prepareAdd: key must not be null!");
         }
 
-        int index = key.length() - 1;
-        while (index >= 0 && !Character.isWhitespace(key.charAt(index)))
-        {
-            index--;
-        }
+        String addKey = key;
+        int index = findKeySeparator(addKey);
         if (index < 0)
         {
-            throw new IllegalArgumentException(
-                    "prepareAdd: Passed in key must contain a whitespace!");
+            addKey = generateKeyForAdd(root, addKey);
+            index = findKeySeparator(addKey);
         }
 
-        List nodes = query(root, key.substring(0, index).trim());
+        List nodes = query(root, addKey.substring(0, index).trim());
         if (nodes.size() != 1)
         {
             throw new IllegalArgumentException(
@@ -233,7 +236,7 @@ public NodeAddData prepareAdd(ConfigurationNode root, String key)
 
         NodeAddData data = new NodeAddData();
         data.setParent((ConfigurationNode) nodes.get(0));
-        initNodeAddData(data, key.substring(index).trim());
+        initNodeAddData(data, addKey.substring(index).trim());
         return data;
     }
 
@@ -323,6 +326,37 @@ else if (ATTR_DELIMITER.equals(token))
         data.setAttribute(attr);
     }
 
+    /**
+     * Tries to generate a key for adding a property. This method is called if a
+     * key was used for adding properties which does not contain a space
+     * character. It splits the key at its single components and searches for
+     * the last existing component. Then a key compatible for adding properties
+     * is generated.
+     *
+     * @param root the root node of the configuration
+     * @param key the key in question
+     * @return the key to be used for adding the property
+     */
+    private String generateKeyForAdd(ConfigurationNode root, String key)
+    {
+        int pos = key.lastIndexOf(PATH_DELIMITER, key.length());
+
+        while (pos >= 0)
+        {
+            String keyExisting = key.substring(0, pos);
+            if (!query(root, keyExisting).isEmpty())
+            {
+                StringBuffer buf = new StringBuffer(key.length() + 1);
+                buf.append(keyExisting).append(SPACE);
+                buf.append(key.substring(pos + 1));
+                return buf.toString();
+            }
+            pos = key.lastIndexOf(PATH_DELIMITER, pos - 1);
+        }
+
+        return SPACE + key;
+    }
+
     /**
      * Helper method for throwing an exception about an invalid path.
      *
@@ -335,6 +369,23 @@ private void invalidPath(String path, String msg)
                 + "\" " + msg);
     }
 
+    /**
+     * Determines the position of the separator in a key for adding new
+     * properties. If no delimiter is found, result is -1.
+     *
+     * @param key the key
+     * @return the position of the delimiter
+     */
+    private static int findKeySeparator(String key)
+    {
+        int index = key.length() - 1;
+        while (index >= 0 && !Character.isWhitespace(key.charAt(index)))
+        {
+            index--;
+        }
+        return index;
+    }
+
     // static initializer: registers the configuration node pointer factory
     static
     {
diff --git a/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngine.java b/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngine.java
index aaf5228de6..3f37d39903 100644
--- a/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngine.java
+++ b/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngine.java
@@ -20,6 +20,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import junit.framework.TestCase;
+
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.NodeAddData;
@@ -27,8 +29,6 @@
 import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
 import org.apache.commons.jxpath.ri.model.NodePointerFactory;
 
-import junit.framework.TestCase;
-
 /**
  * Test class for XPathExpressionEngine.
  *
@@ -255,23 +255,6 @@ public void testPrepareAddInvalidParent()
         }
     }
 
-    /**
-     * Tests an add operation where the passed in key has an invalid format: it
-     * does not contain a whitspace. This will cause an error.
-     */
-    public void testPrepareAddInvalidFormat()
-    {
-        try
-        {
-            engine.prepareAdd(ROOT, "anInvalidKey");
-            fail("Could add an invalid key!");
-        }
-        catch (IllegalArgumentException iex)
-        {
-            // ok
-        }
-    }
-
     /**
      * Tests an add operation with an empty path for the new node.
      */
diff --git a/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngineInConfig.java b/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngineInConfig.java
new file mode 100644
index 0000000000..2ff8e9017d
--- /dev/null
+++ b/src/test/org/apache/commons/configuration/tree/xpath/TestXPathExpressionEngineInConfig.java
@@ -0,0 +1,111 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.configuration.tree.xpath;
+
+import junit.framework.TestCase;
+
+import org.apache.commons.configuration.XMLConfiguration;
+
+/**
+ * A test class for XPathExpressionEngine that tests the engine integrated into
+ * a hierarchical configuration.
+ *
+ * @author <a
+ *         href="http://commons.apache.org/configuration/team-list.html">Commons
+ *         Configuration team</a>
+ * @version $Id$
+ */
+public class TestXPathExpressionEngineInConfig extends TestCase
+{
+    /** Constant for a test key. */
+    private static final String KEY = "test/expression/xpath";
+
+    /** Constant for a value for test properties. */
+    private static final String VALUE = "success";
+
+    /** The test configuration. */
+    private XMLConfiguration config;
+
+    protected void setUp() throws Exception
+    {
+        super.setUp();
+        config = new XMLConfiguration();
+        config.setExpressionEngine(new XPathExpressionEngine());
+    }
+
+    /**
+     * Tests whether an already existing property can be changed using
+     * setProperty().
+     */
+    public void testSetPropertyExisting()
+    {
+        config.addProperty(" " + KEY, "failure");
+        config.setProperty(KEY, VALUE);
+        assertEquals("Value not changed", VALUE, config.getString(KEY));
+    }
+
+    /**
+     * Tests setProperty() if the specified path partly exists.
+     */
+    public void testSetPropertyPartlyExisting()
+    {
+        final String testKey = KEY + "/sub";
+        config.addProperty(" " + KEY, "test");
+        config.setProperty(testKey, VALUE);
+        assertEquals("Value not set", VALUE, config.getString(testKey));
+    }
+
+    /**
+     * Tests whether setProperty() can be used to add a new attribute.
+     */
+    public void testSetPropertyNewAttribute()
+    {
+        final String keyAttr = KEY + "/@attr";
+        config.addProperty(" " + KEY, "test");
+        config.setProperty(keyAttr, VALUE);
+        assertEquals("Value not set", VALUE, config.getString(keyAttr));
+    }
+
+    /**
+     * Tests whether setProperty() can be used to create a completely new key.
+     */
+    public void testSetPropertyNewKey()
+    {
+        config.setProperty(KEY, VALUE);
+        assertEquals("Value not set", VALUE, config.getString(KEY));
+    }
+
+    /**
+     * Tests whether addProperty() can be used to create more complex
+     * hierarchical structures.
+     */
+    public void testAddPropertyComplexStructures()
+    {
+        config.addProperty("tables/table/name", "tasks");
+        config.addProperty("tables/table[last()]/@type", "system");
+        config.addProperty("tables/table[last()]/fields/field/name", "taskid");
+        config.addProperty("tables/table[last()]/fields/field[last()]/@type",
+                "int");
+        config.addProperty("tables table/name", "documents");
+        assertEquals("Wrong table 1", "tasks",
+                config.getString("tables/table[1]/name"));
+        assertEquals("Wrong table 2", "documents",
+                config.getString("tables/table[2]/name"));
+        assertEquals("Wrong field type", "int",
+                config.getString("tables/table[1]/fields/field[1]/@type"));
+    }
+}
