From cedf0d27f9e9341a9e9fa8a192735a0c2e11be40 Mon Sep 17 00:00:00 2001
From: Gilles Sadowski <erans@apache.org>
Date: Tue, 15 Jan 2013 12:15:50 +0000
Subject: [PATCH] MATH-929 Fixed truncated value. Thanks to Piotr Wydrych.
 Added unit test: comparing density values with univariate normal
 distribution.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1433367 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +++
 .../MultivariateNormalDistribution.java       |  2 +-
 .../MultivariateNormalDistributionTest.java   | 21 +++++++++++++++++++
 3 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a61254cfa9..fb58f546a2 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -55,6 +55,9 @@ This is a minor release: It combines bug fixes and new features.
   Changes to existing features were made in a backwards-compatible
   way such as to allow drop-in replacement of the v3.1[.1] JAR file.
 ">
+      <action dev="erans" type="fix" issue="MATH-929" due-to="Piotr Wydrych">
+        Fixed truncated value in "MultivariateNormalDistribution".
+      </action>
       <action dev="erans" type="fix" issue="MATH-927" due-to="Dennis Hendriks">
         Made "BitStreamGenerator" implement the "Serializable" interface.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
index 15706811ba..fd18c281b8 100644
--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
@@ -180,7 +180,7 @@ public double density(final double[] vals) throws DimensionMismatchException {
             throw new DimensionMismatchException(vals.length, dim);
         }
 
-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
+        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *
             FastMath.pow(covarianceMatrixDeterminant, -0.5) *
             getExponentTerm(vals);
     }
diff --git a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
index 756c009c6a..96666187aa 100644
--- a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
+++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
@@ -20,6 +20,7 @@
 import org.apache.commons.math3.stat.correlation.Covariance;
 import org.apache.commons.math3.linear.RealMatrix;
 
+import java.util.Random;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -130,4 +131,24 @@ public void testDensities() {
             Assert.assertEquals(correctDensities[i], densities[i], 1e-16);
         }
     }
+
+    /**
+     * Test the accuracy of the distribution when calculating densities.
+     */
+    @Test
+    public void testUnivariateDistribution() {
+        final double[] mu = { -1.5 };
+        final double[][] sigma = { { 1 } };
+ 
+        final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);
+
+        final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);
+        final Random rng = new Random();
+        final int numCases = 100;
+        final double tol = Math.ulp(1d);
+        for (int i = 0; i < numCases; i++) {
+            final double v = rng.nextDouble() * 10 - 5;
+            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);
+        }
+    }
 }
