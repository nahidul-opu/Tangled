From e42ab0ec6c4a1b7838ec9f14143126d4b6cad548 Mon Sep 17 00:00:00 2001
From: Phil Steitz <phil.steitz@gmail.com>
Date: Sat, 10 Jan 2015 15:41:51 -0700
Subject: [PATCH] Javadoc (a few missed updates re: MATH-1146)

---
 .../commons/math3/stat/descriptive/moment/FirstMoment.java    | 4 +++-
 .../commons/math3/stat/descriptive/moment/SecondMoment.java   | 4 +++-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FirstMoment.java b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FirstMoment.java
index eaf9788eed..5f2b95af32 100644
--- a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FirstMoment.java
+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FirstMoment.java
@@ -38,7 +38,9 @@
  *   <code>m = m + (new value - m) / (number of observations)</code></li>
  * </ol></p>
  * <p>
- *  Returns <code>Double.NaN</code> if the dataset is empty.</p>
+ *  Returns <code>Double.NaN</code> if the dataset is empty. Note that
+ *  Double.NaN may also be returned if the input includes NaN and / or infinite
+ *  values.</p>
  * <p>
  * <strong>Note that this implementation is not synchronized.</strong> If
  * multiple threads access an instance of this class concurrently, and at least
diff --git a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SecondMoment.java b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SecondMoment.java
index 5caeca385b..12715c09c2 100644
--- a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SecondMoment.java
+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SecondMoment.java
@@ -36,7 +36,9 @@
  * new value = old value + dev^2 * (n -1) / n.</p>
  * <p>
  * Returns <code>Double.NaN</code> if no data values have been added and
- * returns <code>0</code> if there is just one value in the data set.</p>
+ * returns <code>0</code> if there is just one value in the data set.
+ * Note that Double.NaN may also be returned if the input includes NaN
+ * and / or infinite values.</p>
  * <p>
  * <strong>Note that this implementation is not synchronized.</strong> If
  * multiple threads access an instance of this class concurrently, and at least
