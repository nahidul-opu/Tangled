From 11819bd33f724b5cfb604eb82379b79020983f8c Mon Sep 17 00:00:00 2001
From: Mark Thomas <markt@apache.org>
Date: Tue, 22 Mar 2011 20:45:34 +0000
Subject: [PATCH] Fix DBCP-333. Correctly implement the option to configure the
 class loader used to load the JDBC driver.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1084346 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/dbcp/BasicDataSource.java  | 21 ++++++++--
 .../commons/dbcp/TestBasicDataSource.java     | 13 ++++++
 .../commons/dbcp/TesterClassLoader.java       | 40 +++++++++++++++++++
 3 files changed, 70 insertions(+), 4 deletions(-)
 create mode 100644 src/test/org/apache/commons/dbcp/TesterClassLoader.java

diff --git a/src/java/org/apache/commons/dbcp/BasicDataSource.java b/src/java/org/apache/commons/dbcp/BasicDataSource.java
index 5bedde4774..ed6054fae0 100644
--- a/src/java/org/apache/commons/dbcp/BasicDataSource.java
+++ b/src/java/org/apache/commons/dbcp/BasicDataSource.java
@@ -1444,8 +1444,20 @@ protected synchronized DataSource createDataSource()
     }
 
     /**
-     * Creates a JDBC connection factory for this datasource.  This method only
-     * exists so subclasses can replace the implementation class.
+     * Creates a JDBC connection factory for this datasource.  The JDBC driver
+     * is loaded using the following algorithm:
+     * <ol>
+     * <li>If {@link #driverClassName} is specified that class is loaded using
+     * the {@link ClassLoader} of this class or, if {@link #driverClassLoader}
+     * is set, {@link #driverClassName} is loaded with the specified
+     * {@link ClassLoader}.</li>
+     * <li>If {@link #driverClassName} is specified and the previous attempt
+     * fails, the class is loaded using the context class loader of the current
+     * thread.</li>
+     * <li>If a driver still isn't loaded one is loaded via the
+     * {@link DriverManager} using the specified {@link #url}.
+     * </ol>
+     * This method exists so subclasses can replace the implementation class.
      */
     protected ConnectionFactory createConnectionFactory() throws SQLException {
         // Load the JDBC driver class
@@ -1454,9 +1466,10 @@ protected ConnectionFactory createConnectionFactory() throws SQLException {
             try {
                 try {
                     if (driverClassLoader == null) {
-                        Class.forName(driverClassName);
+                        driverFromCCL = Class.forName(driverClassName);
                     } else {
-                        Class.forName(driverClassName, true, driverClassLoader);
+                        driverFromCCL = Class.forName(
+                                driverClassName, true, driverClassLoader);
                     }
                 } catch (ClassNotFoundException cnfe) {
                     driverFromCCL = Thread.currentThread(
diff --git a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
index 932812cade..7f79b5bff7 100644
--- a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
+++ b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
@@ -62,6 +62,7 @@ public void setUp() throws Exception {
         ds.setPassword("password");
         ds.setValidationQuery("SELECT DUMMY FROM DUAL");
         ds.setConnectionInitSqls(Arrays.asList(new String[] { "SELECT 1", "SELECT 2"}));
+        ds.setDriverClassLoader(new TesterClassLoader());
     }
 
     protected BasicDataSource createDataSource() throws Exception {
@@ -500,4 +501,16 @@ public void testCreateDataSourceCleanupThreads() throws Exception {
         // Allow one extra thread for JRockit compatibility
         assertTrue(Thread.activeCount() <= threadCount + 1);
     }
+    
+    /**
+     * JIRA DBCP-333: Check that a custom class loader is used.
+     * @throws Exception 
+     */
+    public void testDriverClassLoader() throws Exception {
+        getConnection();
+        ClassLoader cl = ds.getDriverClassLoader();
+        assertNotNull(cl);
+        assertTrue(cl instanceof TesterClassLoader);
+        assertTrue(((TesterClassLoader) cl).didLoad(ds.getDriverClassName()));
+    }
 }
diff --git a/src/test/org/apache/commons/dbcp/TesterClassLoader.java b/src/test/org/apache/commons/dbcp/TesterClassLoader.java
new file mode 100644
index 0000000000..166041c00f
--- /dev/null
+++ b/src/test/org/apache/commons/dbcp/TesterClassLoader.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.dbcp;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Simple class loader that just records the classes it was asked to load.
+ */
+public class TesterClassLoader extends ClassLoader {
+
+    private Set<String> loadedClasses = new HashSet<String>();
+    
+    @Override
+    protected synchronized Class<?> loadClass(String name, boolean resolve)
+            throws ClassNotFoundException {
+        Class<?> clazz =  super.loadClass(name, resolve);
+        loadedClasses.add(name);
+        return clazz;
+    }
+
+    public boolean didLoad(String className) {
+        return loadedClasses.contains(className);
+    }
+}
