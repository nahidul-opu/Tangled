From a68542f4bcbf6d986a5eb62b3584230556c95bb5 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sun, 11 Jul 2010 22:00:50 +0000
Subject: [PATCH] NET-180 Telnet EOR is "consumed" by TelnetInputStream when in
 BINARY transmission

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/branches/NET_2_0@963152 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/net/telnet/Telnet.java | 19 +++++++++++++++++++
 .../commons/net/telnet/TelnetInputStream.java |  9 +++++----
 .../net/telnet/TelnetNotificationHandler.java | 15 ++++++++++-----
 3 files changed, 34 insertions(+), 9 deletions(-)

diff --git a/src/main/java/org/apache/commons/net/telnet/Telnet.java b/src/main/java/org/apache/commons/net/telnet/Telnet.java
index ff54b33ca..74bf34a75 100644
--- a/src/main/java/org/apache/commons/net/telnet/Telnet.java
+++ b/src/main/java/org/apache/commons/net/telnet/Telnet.java
@@ -405,6 +405,25 @@ void _setWantDont(int option)
         _options[option] &= ~_REQUESTED_DO_MASK;
     }
 
+    /**
+     * Processes a COMMAND.
+     * 
+     * @param command - option code to be set.
+     **/
+    void _processCommand(int command)
+    {
+        if (debugoptions)
+        {
+            System.err.println("RECEIVED COMMAND: " + command);
+        }
+
+        if (__notifhand != null)
+        {
+            __notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_COMMAND, command);
+        }
+    }
+
     /**
      * Processes a DO request.
      * 
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
index 6d6900d5d..e49965ed7 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
@@ -212,8 +212,9 @@ private int __read(boolean mayBlock) throws IOException
                     __receiveState = _STATE_DATA;
                     break; // exit to enclosing switch to return IAC from read
                 default:
-                    __receiveState = _STATE_DATA;           
-                    continue; // move on the next char, i.e. ignore IAC+unknown
+                    __receiveState = _STATE_DATA;
+                    __client._processCommand(ch); // Notify the user
+                    continue; // move on the next char
                 }
                 break; // exit and return from read
             case _STATE_WILL:
@@ -382,7 +383,7 @@ public int read() throws IOException
                         __readIsWaiting = true;
                         int ch;
                         boolean mayBlock = true;    // block on the first read only
-                        
+
                         do
                         {
                             try
@@ -421,7 +422,7 @@ public int read() throws IOException
                                 if (__isClosed)
                                     return EOF;
                             }
-                            
+
                             // Reads should not block on subsequent iterations. Potentially, this could happen if the 
                             // remaining buffered socket data consists entirely of Telnet command sequence and no "user" data.
                             mayBlock = false;
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java b/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
index eaa3d9a37..11ac139b0 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
@@ -53,13 +53,18 @@ public interface TelnetNotificationHandler
     public static final int RECEIVED_WONT = 4;
 
     /***
-     * Callback method called when TelnetClient receives an option
-     * negotiation command.
+     * The remote party sent a COMMAND.
+     ***/
+    public static final int RECEIVED_COMMAND = 5;
+
+    /***
+     * Callback method called when TelnetClient receives an 
+     * command or option negotiation command
      * <p>
-     * @param negotiation_code - type of negotiation command received
-     * (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT)
+     * @param negotiation_code - type of (negotiation) command received
+     * (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT, RECEIVED_COMMAND)
      * <p>
-     * @param option_code - code of the option negotiated
+     * @param option_code - code of the option negotiated, or the command code itself (e.g. NOP).
      * <p>
      ***/
     public void receivedNegotiation(int negotiation_code, int option_code);
