From fa2875b53071a837c52a6e6a72bc229176210227 Mon Sep 17 00:00:00 2001
From: Bernd Eckenfels <ecki@apache.org>
Date: Sun, 18 Jan 2015 23:19:58 +0000
Subject: [PATCH] [VFS-558] make moveTo and getParent work with ON_CALL

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1652870 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/AbstractFileObject.java     | 42 ++++++++++---------
 .../vfs2/test/ProviderRenameTests.java        | 24 +++++++++++
 src/changes/changes.xml                       |  3 ++
 3 files changed, 50 insertions(+), 19 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
index 81bdc3f71f..5d143001c7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
@@ -217,23 +217,20 @@ protected void childrenChanged(final FileName childName, final FileType newType)
     {
         // TODO - this may be called when not attached
 
-        if (children != null)
+        if (children != null && childName != null && newType != null)
         {
-            if (childName != null && newType != null)
+            // TODO - figure out if children[] can be replaced by list
+            final ArrayList<FileName> list = new ArrayList<FileName>(Arrays.asList(children));
+            if (newType.equals(FileType.IMAGINARY))
             {
-                // TODO - figure out if children[] can be replaced by list
-                final ArrayList<FileName> list = new ArrayList<FileName>(Arrays.asList(children));
-                if (newType.equals(FileType.IMAGINARY))
-                {
-                    list.remove(childName);
-                }
-                else
-                {
-                    list.add(childName);
-                }
-                children = new FileName[list.size()];
-                list.toArray(children);
+                list.remove(childName);
             }
+            else
+            {
+                list.add(childName);
+            }
+            children = new FileName[list.size()];
+            list.toArray(children);
         }
 
         // removeChildrenCache();
@@ -1419,7 +1416,7 @@ public OutputStream getOutputStream(final boolean bAppend) throws FileSystemExce
     @Override
     public FileObject getParent() throws FileSystemException
     {
-        if (this == fs.getRoot())
+        if (this.compareTo(fs.getRoot()) == 0) // equals is not implements :-/
         {
             if (fs.getParentLayer() == null)
             {
@@ -1438,10 +1435,15 @@ public FileObject getParent() throws FileSystemException
             // Locate the parent of this file
             if (parent == null)
             {
-                parent = fs.resolveFile(fileName.getParent());
+                FileName name = fileName.getParent();
+                if (name == null)
+                {
+                    return null;
+                }
+                parent = fs.resolveFile(name);
             }
+            return parent;
         }
-        return parent;
     }
 
     /**
@@ -1879,10 +1881,12 @@ public void moveTo(final FileObject destFile) throws FileSystemException
             try
             {
                 attach();
-                doRename(destFile);
+                // remeber type to avoid attach
+                FileType srcType = getType();
 
-                FileObjectUtils.getAbstractFileObject(destFile).handleCreate(getType());
+                doRename(destFile);
 
+                FileObjectUtils.getAbstractFileObject(destFile).handleCreate(srcType);
                 destFile.close(); // now the destFile is no longer imaginary. force reattach.
 
                 handleDelete(); // fire delete-events. This file-object (src) is like deleted.
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/ProviderRenameTests.java b/core/src/test/java/org/apache/commons/vfs2/test/ProviderRenameTests.java
index 11a8d0331a..fe9dd98de2 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/ProviderRenameTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/ProviderRenameTests.java
@@ -20,6 +20,7 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 
+import org.apache.commons.vfs2.CacheStrategy;
 import org.apache.commons.vfs2.Capability;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
@@ -117,6 +118,29 @@ public void testRenameFile() throws Exception
         moveFile(scratchFolder, file, content);
     }
 
+    /**
+     * Tests moving a file to empty folder.
+     * <P>
+     * This fails with VFS-558, but only with a CacheStrategy.ON_CALL.
+     */
+    public void testRenameFileIntoEmptyFolder() throws Exception
+    {
+        final FileObject scratchFolder = createScratchFolder();
+
+        // Create direct child of the test folder
+        final FileObject file = scratchFolder.resolveFile("file1.txt");
+        assertTrue(!file.exists());
+
+        final String content = createTestFile(file);
+
+        final FileObject destFolder = scratchFolder.resolveFile("empty-target-folder");
+        destFolder.createFolder();
+        assertTrue("new destination must be folder", destFolder.getType().hasChildren());
+        assertTrue("new destination must be emty", destFolder.getChildren().length == 0);
+
+        moveFile(destFolder, file, content);
+    }
+
     /**
      * Moves a file from a child folder to a parent folder to test what happens when the original folder is now empty.
      *
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index e6430d0a1a..7cd4df0f20 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -26,6 +26,9 @@
 <!--       <action issue="VFS-443" dev="ggregory" type="update" due-to="nickallen"> -->
 <!--        [Local] Need an easy way to convert from a FileObject to a File. -->
 <!--       </action> -->
+      <action issue="VFS-558" dev="ecki" type="fix">
+       Make moveTo() and getParent() work with CacheStrategy.ON_CALL.
+       In case of FTP Provider it would lead otherwise to an UnsupportedOperationException.
       <action dev="ecki" type="fix">
        [sandbox] RACRandomAccessFile is now in org.apache.commons.vfs2.util package (so sandbox has only one overlapping package).
       </action>
