From e2cf412a7856a7a9f314c3927df2f5a04f42177d Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 28 Dec 2012 06:53:21 +0000
Subject: [PATCH] COMPRESS-189 Inflater may return 0 if it needs more input, we
 don't handle this case properly

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1426417 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../archivers/zip/ZipArchiveInputStream.java  | 40 +++++++++++++------
 .../zip/ZipArchiveInputStreamTest.java        | 34 +++++++++++++++-
 3 files changed, 64 insertions(+), 14 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index eef3eb2c80a..b7edad3e127 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -78,6 +78,10 @@ The <action> type attribute can be add,update,fix,remove.
         Writing TAR PAX headers failed if the generated entry name
         ended with a "/".
       </action>
+      <action type="fix" date="2012-12-28" issue="COMPRESS-189">
+        ZipArchiveInputStream sometimes failed to provide input to the
+        Inflater when it needed it, leading to reads returning 0.
+      </action>
     </release>
     <release version="1.4.1" date="2012-05-23"
              description="Release 1.4.1">
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 0d65141cd7a..61f034f1a74 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -380,20 +380,9 @@ private int readStored(byte[] buffer, int start, int length)
      */
     private int readDeflated(byte[] buffer, int start, int length)
         throws IOException {
-        if (inf.needsInput()) {
-            fill();
-            if (buf.lengthOfLastRead > 0) {
-                current.bytesReadFromStream += buf.lengthOfLastRead;
-            }
-        }
-        int read = 0;
-        try {
-            read = inf.inflate(buffer, start, length);
-        } catch (DataFormatException e) {
-            throw new ZipException(e.getMessage());
-        }
+        int read = readFromInflater(buffer, start, length);
         if (read == 0) {
-            if (inf.finished()) {
+            if (inf.finished() || inf.needsDictionary()) {
                 return -1;
             } else if (buf.lengthOfLastRead == -1) {
                 throw new IOException("Truncated ZIP file");
@@ -403,6 +392,31 @@ private int readDeflated(byte[] buffer, int start, int length)
         return read;
     }
 
+    /**
+     * Potentially reads more bytes to fill the inflater's buffer and
+     * reads from it.
+     */
+    private int readFromInflater(byte[] buffer, int start, int length)
+        throws IOException {
+        int read = 0;
+        do {
+            if (inf.needsInput()) {
+                fill();
+                if (buf.lengthOfLastRead > 0) {
+                    current.bytesReadFromStream += buf.lengthOfLastRead;
+                } else {
+                    break;
+                }
+            }
+            try {
+                read = inf.inflate(buffer, start, length);
+            } catch (DataFormatException e) {
+                throw new ZipException(e.getMessage());
+            }
+        } while (read == 0 && inf.needsInput());
+        return read;
+    }
+
     @Override
     public void close() throws IOException {
         if (!closed) {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
index 8ff16a32c1e..54df48d2af4 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
@@ -19,12 +19,15 @@
 package org.apache.commons.compress.archivers.zip;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
+import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.net.URI;
 import java.net.URL;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class ZipArchiveInputStreamTest {
@@ -49,4 +52,33 @@ public void winzipBackSlashWorkaround() throws Exception {
         }
     }
 
-}
\ No newline at end of file
+    /**
+     * @see "https://issues.apache.org/jira/browse/COMPRESS-189"
+     */
+    @Test
+    @Ignore
+    public void properUseOfInflater() throws Exception {
+        URL zip = getClass().getResource("/COMPRESS-189.zip");
+        ZipFile zf = null;
+        ZipArchiveInputStream in = null;
+        try {
+            zf = new ZipFile(new File(new URI(zip.toString())));
+            ZipArchiveEntry zae = zf.getEntry("USD0558682-20080101.ZIP");
+            in = new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));
+            ZipArchiveEntry innerEntry;
+            while ((innerEntry = in.getNextZipEntry()) != null) {
+                if (innerEntry.getName().endsWith("XML")) {
+                    assertTrue(0 < in.read());
+                }
+            }
+        } finally {
+            if (zf != null) {
+                zf.close();
+            }
+            if (in != null) {
+                in.close();
+            }
+        }
+    }
+
+}
