From 1a0852ffcd26a6ed2345b82a98107c27a1cd0d2a Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Fri, 17 Oct 2008 21:55:13 +0000
Subject: [PATCH] FIX: cachefileset produces an empty fileset when the cache
 refers to libs in directories that only have the root directory in common
 (IVY-948) (thanks to Chris Wood)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@705768 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                      |  2 ++
 src/java/org/apache/ivy/ant/IvyCacheFileset.java | 16 +++++++++++++---
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/CHANGES.txt b/CHANGES.txt
index e0f4a03ee..4a24d56d4 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -75,6 +75,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 	James P. White
 	Tom Widmer
 	John Williams
+    Chris Wood
 	Patrick Woodworth
 	Jaroslaw Wypychowski
 	
@@ -104,6 +105,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 - FIX: Can't use latest.release for pom dependencies (IVY-936)
 - FIX: Unable to resolve snapshot versions depending on xml elements order (IVY-940)
 - FIX: pre-resolve-dependency event doesn't export branch information (IVY-941) (thanks to Jaroslaw Wypychowski)
+- FIX: cachefileset produces an empty fileset when the cache refers to libs in directories that only have the root directory in common (IVY-948) (thanks to Chris Wood)
 
    2.0.0-rc1
 =====================================
diff --git a/src/java/org/apache/ivy/ant/IvyCacheFileset.java b/src/java/org/apache/ivy/ant/IvyCacheFileset.java
index ee8f30d2d..ad9b55b07 100644
--- a/src/java/org/apache/ivy/ant/IvyCacheFileset.java
+++ b/src/java/org/apache/ivy/ant/IvyCacheFileset.java
@@ -78,7 +78,7 @@ public void doExecute() throws BuildException {
                 for (Iterator iter = paths.iterator(); iter.hasNext();) {
                     ArtifactDownloadReport a = (ArtifactDownloadReport) iter.next();
                     if (a.getLocalFile() != null) {
-                        NameEntry ne = fileset.createInclude();
+                        NameEntry ne = fileset. createInclude();
                         ne.setName(getPath(base, a.getLocalFile()));
                     }
                 }
@@ -93,10 +93,20 @@ public void doExecute() throws BuildException {
      * 
      * @param base the parent directory to which the file must be evaluated.
      * @param file the file for which the path should be returned
-     * @returnthe path of the file relative to the given base directory.
+     * @return the path of the file relative to the given base directory.
      */
     private String getPath(File base, File file) {
-        return file.getAbsolutePath().substring(base.getAbsolutePath().length() + 1);
+        String absoluteBasePath = base.getAbsolutePath();
+        
+        int beginIndex = absoluteBasePath.length();
+        
+        // checks if the basePath ends with the file separator (which can for instance
+        // happen if the basePath is the root on unix)
+        if (!absoluteBasePath.endsWith(File.separator)) {
+            beginIndex++; // skip the seperator char as well
+        }
+        
+        return file.getAbsolutePath().substring(beginIndex);
     }
 
     /**
