From b4b470096a39bfa51d33782f442505383ecc5e79 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@apache.org>
Date: Sat, 7 Oct 2006 11:56:25 +0000
Subject: [PATCH] IO-93 - FileSystemUtils - Fixed resource leak leading to 'Too
 many open files' error - Previously did not destroy Process instances (as JDK
 Javadoc is so poor) -
 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4801027

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@453889 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  5 ++
 .../apache/commons/io/FileSystemUtils.java    | 52 ++++++++++++-------
 .../commons/io/FileSystemUtilsTestCase.java   | 13 ++---
 3 files changed, 42 insertions(+), 28 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index ddf0b99eda2..56cfb2e57dc 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -51,6 +51,11 @@ Bug fixes from 1.2
 - FileSystemUtils.freeSpace [IO-91]
   - This is now documented not to work on SunOS 5
 
+- FileSystemUtils [IO-93]
+  - Fixed resource leak leading to 'Too many open files' error
+  - Previously did not destroy Process instances (as JDK Javadoc is so poor)
+  - http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4801027
+
 - FileCleaner
   - This now handles the situation where an error occurs when deleting the file
 
diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index e64dbfb8fd7..b9d6019ec33 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -18,7 +18,9 @@
 
 import java.io.BufferedReader;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -113,8 +115,8 @@ public FileSystemUtils() {
      * As this is not very useful, this method is deprecated in favour
      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.
      * <p>
-     * Note that some OS's are NOT currently supported, including OS/390
-     * and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)
+     * Note that some OS's are NOT currently supported, including OS/390,
+     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)
      * <pre>
      * FileSystemUtils.freeSpace("C:");       // Windows
      * FileSystemUtils.freeSpace("/volume");  // *nix
@@ -374,6 +376,7 @@ long parseBytes(String freeSpace, String path) throws IOException {
         }
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Performs the os command.
      *
@@ -383,16 +386,31 @@ long parseBytes(String freeSpace, String path) throws IOException {
      * @throws IOException if an error occurs
      */
     List performCommand(String[] cmdAttribs, int max) throws IOException {
-        List lines = new ArrayList();
-        BufferedReader in = null;
+        // this method does what it can to avoid the 'Too many open files' error
+        // based on trial and error and these links:
+        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4784692
+        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4801027
+        // http://forum.java.sun.com/thread.jspa?threadID=533029&messageID=2572018
+        // however, its still not perfect as the JDK support is so poor
+        // (see commond-exec or ant for a better multi-threaded multi-os solution)
+        
+        List lines = new ArrayList(20);
+        Process proc = null;
+        InputStream in = null;
+        OutputStream out = null;
+        InputStream err = null;
+        BufferedReader inr = null;
         try {
-            Process proc = openProcess(cmdAttribs);
-            in = openProcessStream(proc);
-            String line = in.readLine();
+            proc = openProcess(cmdAttribs);
+            in = proc.getInputStream();
+            out = proc.getOutputStream();
+            err = proc.getErrorStream();
+            inr = new BufferedReader(new InputStreamReader(in));
+            String line = inr.readLine();
             while (line != null && lines.size() < max) {
                 line = line.toLowerCase().trim();
                 lines.add(line);
-                line = in.readLine();
+                line = inr.readLine();
             }
             
             proc.waitFor();
@@ -416,6 +434,12 @@ List performCommand(String[] cmdAttribs, int max) throws IOException {
                     "' for command " + Arrays.asList(cmdAttribs));
         } finally {
             IOUtils.closeQuietly(in);
+            IOUtils.closeQuietly(out);
+            IOUtils.closeQuietly(err);
+            IOUtils.closeQuietly(inr);
+            if (proc != null) {
+                proc.destroy();
+            }
         }
     }
 
@@ -430,16 +454,4 @@ Process openProcess(String[] cmdAttribs) throws IOException {
         return Runtime.getRuntime().exec(cmdAttribs);
     }
 
-    /**
-     * Opens the stream to the operating system.
-     *
-     * @param proc  the process
-     * @return a reader
-     * @throws IOException if an error occurs
-     */
-    BufferedReader openProcessStream(Process proc) throws IOException {
-        return new BufferedReader(
-            new InputStreamReader(proc.getInputStream()));
-    }
-
 }
diff --git a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
index 4875099c140..7ff94cc7f6f 100644
--- a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
+++ b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
@@ -17,12 +17,12 @@
 package org.apache.commons.io;
 
 import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
-import java.io.StringReader;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -479,17 +479,17 @@ public void testGetFreeSpaceUnix_String_InvalidResponse4() throws Exception {
     //-----------------------------------------------------------------------
     static class MockFileSystemUtils extends FileSystemUtils {
         private final int exitCode;
-        private final StringReader reader;
+        private final byte[] bytes;
         private final String cmd;
         public MockFileSystemUtils(int exitCode, String lines) {
             this(exitCode, lines, null);
         }
         public MockFileSystemUtils(int exitCode, String lines, String cmd) {
             this.exitCode = exitCode;
-            this.reader = new StringReader(lines);
+            this.bytes = lines.getBytes();
             this.cmd = cmd;
         }
-        protected Process openProcess(String[] params) {
+        Process openProcess(String[] params) {
             if (cmd != null) {
                 assertEquals(cmd, params[params.length - 1]);
             }
@@ -498,7 +498,7 @@ public InputStream getErrorStream() {
                     return null;
                 }
                 public InputStream getInputStream() {
-                    return null;
+                    return new ByteArrayInputStream(bytes);
                 }
                 public OutputStream getOutputStream() {
                     return null;
@@ -513,9 +513,6 @@ public void destroy() {
                 }
             };
         }
-        protected BufferedReader openProcessStream(Process p) {
-            return new BufferedReader(reader);
-        }
     }
 
 }
