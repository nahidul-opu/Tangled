From 0d057fc6dc9fac9e16c01e3647c2201281310a6a Mon Sep 17 00:00:00 2001
From: Luc Maisonobe <luc@apache.org>
Date: Sun, 10 Mar 2013 12:01:00 +0000
Subject: [PATCH] Fixed creation of generic array.

Thanks to Piotr Wydrych.

JIRA: MATH-942

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1454840 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                             |  5 ++++-
 .../math3/distribution/DiscreteDistribution.java    |  8 ++++----
 .../distribution/DiscreteRealDistributionTest.java  | 13 +++++++++++++
 3 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 45e409db50..c1c6e5d9b0 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -55,7 +55,10 @@ This is a minor release: It combines bug fixes and new features.
   Changes to existing features were made in a backwards-compatible
   way such as to allow drop-in replacement of the v3.1[.1] JAR file.
 ">
-      <action dev="luc" type="add" issue="MATH-914" >
+      <action dev="luc" type="fix" issue="MATH-942" due-to="Piotr Wydrych" >
+        Fixed creation of generic array.
+      </action>
+        <action dev="luc" type="add" issue="MATH-914" >
         Check bounds in multi-start vector optimizers.
       </action>
       <action dev="luc" type="add" issue="MATH-941" due-to="Piotr Wydrych" >
diff --git a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
index 8c08dbe36a..879eb2a292 100644
--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math3.distribution;
 
-import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.apache.commons.math3.exception.MathArithmeticException;
 import org.apache.commons.math3.exception.MathIllegalArgumentException;
 import org.apache.commons.math3.exception.NotPositiveException;
@@ -178,13 +178,13 @@ public T sample() {
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
-    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
+    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
-        @SuppressWarnings("unchecked")
-        final T[]out = (T[]) Array.newInstance(singletons.get(0).getClass(), sampleSize);
+
+        final Object[] out = new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
diff --git a/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
index 1a7ef5302e..cd639f6a85 100644
--- a/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
@@ -16,11 +16,15 @@
  */
 package org.apache.commons.math3.distribution;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.MathArithmeticException;
 import org.apache.commons.math3.exception.MathIllegalArgumentException;
 import org.apache.commons.math3.exception.NotPositiveException;
 import org.apache.commons.math3.util.FastMath;
+import org.apache.commons.math3.util.Pair;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -199,4 +203,13 @@ public void testSample() {
         Assert.assertEquals(testDistribution.getNumericalVariance(),
                 sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);
     }
+
+    @Test
+    public void testIssue942() {
+        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();
+        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));
+        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));
+        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);
+    }
+
 }
