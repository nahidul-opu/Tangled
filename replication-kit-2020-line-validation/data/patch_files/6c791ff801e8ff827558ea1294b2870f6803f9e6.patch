From 6c791ff801e8ff827558ea1294b2870f6803f9e6 Mon Sep 17 00:00:00 2001
From: Mark Thomas <markt@apache.org>
Date: Thu, 19 Feb 2009 15:46:03 +0000
Subject: [PATCH] Fix DBCP-235. Separate internal implementation and externally
 interfacing methods to allow equals and hashcode to work. Includes supporting
 test case.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@745904 13f79535-47bb-0310-9956-ffa450edef68
---
 .../commons/dbcp/DelegatingConnection.java    | 23 ++++++++++++++-----
 .../dbcp/managed/ManagedConnection.java       | 10 +-------
 .../dbcp/managed/TestManagedDataSource.java   | 23 +++++++++++++++++++
 3 files changed, 41 insertions(+), 15 deletions(-)

diff --git a/src/java/org/apache/commons/dbcp/DelegatingConnection.java b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
index ab20580a2c..4564e67d1b 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingConnection.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
@@ -107,7 +107,7 @@ public DelegatingConnection(Connection c, AbandonedConfig config) {
     public String toString() {
         String s = null;
         
-        Connection c = this.getInnermostDelegate();
+        Connection c = this.getInnermostDelegateInternal();
         if (c != null) {
             try {
                 if (c.isClosed()) {
@@ -143,6 +143,13 @@ public String toString() {
      * @return my underlying {@link Connection}.
      */
     public Connection getDelegate() {
+        return getDelegateInternal();
+    }
+    
+    /**
+     * Should be final but can't be for compatability with previous releases.
+     */
+    protected Connection getDelegateInternal() {
         return _conn;
     }
     
@@ -154,7 +161,7 @@ public Connection getDelegate() {
      * @since 1.2.2
      */
     public boolean innermostDelegateEquals(Connection c) {
-        Connection innerCon = getInnermostDelegate();
+        Connection innerCon = getInnermostDelegateInternal();
         if (innerCon == null) {
             return c == null;
         } else {
@@ -169,7 +176,7 @@ public boolean equals(Object obj) {
         if (obj == this) {
             return true;
         }
-        Connection delegate = getInnermostDelegate();
+        Connection delegate = getInnermostDelegateInternal();
         if (delegate == null) {
             return false;
         }
@@ -183,7 +190,7 @@ public boolean equals(Object obj) {
     }
 
     public int hashCode() {
-        Object obj = getInnermostDelegate();
+        Object obj = getInnermostDelegateInternal();
         if (obj == null) {
             return 0;
         }
@@ -207,16 +214,20 @@ public int hashCode() {
      * sure to obtain a "genuine" {@link Connection}.
      */
     public Connection getInnermostDelegate() {
+        return getInnermostDelegateInternal();
+    }
+
+    protected final Connection getInnermostDelegateInternal() {
         Connection c = _conn;
         while(c != null && c instanceof DelegatingConnection) {
-            c = ((DelegatingConnection)c).getDelegate();
+            c = ((DelegatingConnection)c).getDelegateInternal();
             if(this == c) {
                 return null;
             }
         }
         return c;
     }
-
+    
     /** Sets my delegate. */
     public void setDelegate(Connection c) {
         _conn = c;
diff --git a/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java b/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
index 8084ab4027..bb3f4a4cdd 100644
--- a/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
+++ b/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
@@ -251,17 +251,9 @@ public Connection getDelegate() {
         }
     }
 
-    /**
-     * Gets the actual delegate without checking the isAccessToUnderlyingConnectionAllowed() flag.  This method is for internal use only.
-     * @return the delegate of this connection
-     */
-    protected Connection getDelegateInternal() {
-        return super.getDelegate();
-    }
-
     public Connection getInnermostDelegate() {
         if (isAccessToUnderlyingConnectionAllowed()) {
-            return super.getInnermostDelegate();
+            return super.getInnermostDelegateInternal();
         } else {
             return null;
         }
diff --git a/src/test/org/apache/commons/dbcp/managed/TestManagedDataSource.java b/src/test/org/apache/commons/dbcp/managed/TestManagedDataSource.java
index 8464914a1b..51155ef226 100644
--- a/src/test/org/apache/commons/dbcp/managed/TestManagedDataSource.java
+++ b/src/test/org/apache/commons/dbcp/managed/TestManagedDataSource.java
@@ -126,6 +126,28 @@ public void testSharedConnection() throws Exception {
         connectionB.close();
     }
 
+    public void testManagedConnectionEqualsSameDelegateNoUnderlyingAccess() throws Exception {
+        // Get a maximal set of connections from the pool
+        Connection[] c = new Connection[getMaxActive()];
+        for (int i = 0; i < c.length; i++) {
+            c[i] = newConnection();
+        }
+        // Close the delegate of one wrapper in the pool
+        ((DelegatingConnection) c[0]).getDelegate().close();
+
+        // Disable access for the new connection
+        ds.setAccessToUnderlyingConnectionAllowed(false);
+        // Grab a new connection - should get c[0]'s closed connection
+        // so should be delegate-equivalent, so equal
+        Connection con = newConnection();
+        assertTrue(c[0].equals(con));
+        assertTrue(con.equals(c[0]));
+        for (int i = 0; i < c.length; i++) {
+            c[i].close();
+        }
+        ds.setAccessToUnderlyingConnectionAllowed(true);
+    }
+
     public void testManagedConnectionEqualsSameDelegate() throws Exception {
         // Get a maximal set of connections from the pool
         Connection[] c = new Connection[getMaxActive()];
@@ -145,6 +167,7 @@ public void testManagedConnectionEqualsSameDelegate() throws Exception {
         }
     }
 
+
     /*
     * JIRA: DBCP-198
     */
