From 4d97847b3aa6c0741eace88aa0ad1a7516e80970 Mon Sep 17 00:00:00 2001
From: Mark Thomas <markt@apache.org>
Date: Thu, 30 Jan 2014 13:50:23 +0000
Subject: [PATCH] Fix DBCP-376 Fix thread safety issues in the
 SharedPoolDataSource and the PerUserPoolDataSource. Test case and fix based
 on patches suggested by Dave Oxley.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1562825 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 ++
 .../datasources/CPDSConnectionFactory.java    | 12 ++--
 .../KeyedCPDSConnectionFactory.java           | 12 ++--
 .../cpdsadapter/TestDriverAdapterCPDS.java    | 67 +++++++++++++++++++
 4 files changed, 85 insertions(+), 10 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4a395bbee8..b052507557 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -87,6 +87,10 @@ The <action> type attribute can be add,update,fix,remove.
         properties are available as is the connection pool and the statement
         pools (if statement pooling is enabled).
       </action>
+      <action dev="markt" issue="DBCP-376" type="fix" due-to="Dave Oxley">
+        Fix thread safety issues in the SharedPoolDataSource and the
+        PerUserPoolDataSource. 
+      </action>
     </release>
     <release version="1.5.1" date="TBD" description="TBD">
       <action dev="markt" issue="DBCP-400" type="fix">
diff --git a/src/java/org/apache/commons/dbcp2/datasources/CPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp2/datasources/CPDSConnectionFactory.java
index 2d74be2cdf..374f23db55 100644
--- a/src/java/org/apache/commons/dbcp2/datasources/CPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp2/datasources/CPDSConnectionFactory.java
@@ -20,9 +20,10 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.HashSet;
+import java.util.Collections;
+import java.util.Map;
 import java.util.Set;
-import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.sql.ConnectionEvent;
 import javax.sql.ConnectionEventListener;
@@ -63,13 +64,14 @@ class CPDSConnectionFactory
      * Map of PooledConnections for which close events are ignored.
      * Connections are muted when they are being validated.
      */
-    private final Set<PooledConnection> validatingSet = new HashSet<>();
+    private final Set<PooledConnection> validatingSet =
+            Collections.newSetFromMap(new ConcurrentHashMap<PooledConnection,Boolean>());
 
     /**
      * Map of PooledConnectionAndInfo instances
      */
-    private final WeakHashMap<PooledConnection, PooledConnectionAndInfo> pcMap =
-        new WeakHashMap<>();
+    private final Map<PooledConnection, PooledConnectionAndInfo> pcMap =
+        new ConcurrentHashMap<>();
 
     /**
      * Create a new <tt>PoolableConnectionFactory</tt>.
diff --git a/src/java/org/apache/commons/dbcp2/datasources/KeyedCPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp2/datasources/KeyedCPDSConnectionFactory.java
index 1d8253198c..0553b356d1 100644
--- a/src/java/org/apache/commons/dbcp2/datasources/KeyedCPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp2/datasources/KeyedCPDSConnectionFactory.java
@@ -21,9 +21,10 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.HashSet;
+import java.util.Collections;
+import java.util.Map;
 import java.util.Set;
-import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.sql.ConnectionEvent;
 import javax.sql.ConnectionEventListener;
@@ -61,13 +62,14 @@ class KeyedCPDSConnectionFactory
      * Map of PooledConnections for which close events are ignored.
      * Connections are muted when they are being validated.
      */
-    private final Set<PooledConnection> validatingSet = new HashSet<>();
+    private final Set<PooledConnection> validatingSet =
+            Collections.newSetFromMap(new ConcurrentHashMap<PooledConnection,Boolean>());
 
     /**
      * Map of PooledConnectionAndInfo instances
      */
-    private final WeakHashMap<PooledConnection, PooledConnectionAndInfo> pcMap =
-        new WeakHashMap<>();
+    private final Map<PooledConnection, PooledConnectionAndInfo> pcMap =
+        new ConcurrentHashMap<>();
 
     /**
      * Create a new <tt>KeyedPoolableConnectionFactory</tt>.
diff --git a/src/test/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java b/src/test/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java
index 1d44794b2e..fe223d3dfc 100644
--- a/src/test/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java
+++ b/src/test/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java
@@ -24,6 +24,11 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+import javax.sql.DataSource;
+
+import org.apache.commons.dbcp2.datasources.SharedPoolDataSource;
+import org.junit.Assert;
+
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -158,4 +163,66 @@ public void testSetProperties() throws Exception {
         pcds.getPooledConnection("foo", "bar").close();
         assertEquals("bar", pcds.getConnectionProperties().getProperty("password"));
     }
+
+    // https://issues.apache.org/jira/browse/DBCP-376
+    public void testDbcp367() throws Exception {
+        ThreadDbcp367[] threads = new ThreadDbcp367[200];
+
+        pcds.setPoolPreparedStatements(true);
+        pcds.setMaxPreparedStatements(-1);
+        pcds.setAccessToUnderlyingConnectionAllowed(true);
+
+        SharedPoolDataSource spds = new SharedPoolDataSource();
+        spds.setConnectionPoolDataSource(pcds);
+        spds.setMaxTotal(threads.length + 10);
+        spds.setMaxWaitMillis(-1);
+        spds.setMaxIdle(10);
+        spds.setDefaultAutoCommit(false);
+
+        spds.setValidationQuery("SELECT 1");
+        spds.setTimeBetweenEvictionRunsMillis(10000);
+        spds.setNumTestsPerEvictionRun(-1);
+        spds.setTestWhileIdle(true);
+        spds.setTestOnBorrow(true);
+        spds.setTestOnReturn(false);
+
+        for (int i = 0; i < threads.length; i++) {
+            threads[i] = new ThreadDbcp367(spds);
+            threads[i].start();
+        }
+
+        for (int i = 0; i < threads.length; i++) {
+            threads[i].join();
+            Assert.assertFalse(threads[i].isFailed());
+        }
+    }
+
+    private static class ThreadDbcp367 extends Thread {
+
+        private final DataSource ds;
+
+        private volatile boolean failed = false;
+
+        public ThreadDbcp367(DataSource ds) {
+            this.ds = ds;
+        }
+
+        @Override
+        public void run() {
+            Connection c = null;
+            try {
+                for (int j=0; j < 5000; j++) {
+                    c = ds.getConnection();
+                    c.close();
+                }
+            } catch (SQLException sqle) {
+                failed = true;
+                sqle.printStackTrace();
+            }
+        }
+
+        public boolean isFailed() {
+            return failed;
+        }
+    }
 }
