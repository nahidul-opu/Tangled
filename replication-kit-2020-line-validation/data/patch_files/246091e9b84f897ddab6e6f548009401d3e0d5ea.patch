From 246091e9b84f897ddab6e6f548009401d3e0d5ea Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Wed, 23 Jul 2008 22:06:48 +0000
Subject: [PATCH] Attempt to fix connection leak reported in IVY-854 by caching
 the HttpClient instance.

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@679208 13f79535-47bb-0310-9956-ffa450edef68
---
 .../ivy/util/url/HttpClientHandler.java       | 46 ++++++++++++-------
 1 file changed, 30 insertions(+), 16 deletions(-)

diff --git a/src/java/org/apache/ivy/util/url/HttpClientHandler.java b/src/java/org/apache/ivy/util/url/HttpClientHandler.java
index dacf2906c..0a4a3fbb7 100644
--- a/src/java/org/apache/ivy/util/url/HttpClientHandler.java
+++ b/src/java/org/apache/ivy/util/url/HttpClientHandler.java
@@ -33,6 +33,7 @@
 import org.apache.commons.httpclient.HttpException;
 import org.apache.commons.httpclient.HttpMethodBase;
 import org.apache.commons.httpclient.HttpStatus;
+import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
 import org.apache.commons.httpclient.auth.AuthPolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
@@ -61,6 +62,8 @@ public class HttpClientHandler extends AbstractURLHandler {
     private String proxyPasswd = null;
 
     private HttpClientHelper httpClientHelper;
+    
+    private static HttpClient httpClient;
 
     public HttpClientHandler() {
         configureProxy();
@@ -204,28 +207,39 @@ private HeadMethod doHead(URL url, int timeout) throws IOException {
     }
 
     private HttpClient getClient(URL url) {
-        HttpClient client = new HttpClient();
-
-        List authPrefs = new ArrayList(2);
-        authPrefs.add(AuthPolicy.DIGEST);
-        authPrefs.add(AuthPolicy.BASIC);
-        // Exclude the NTLM authentication scheme because it is not supported by this class
-        client.getParams().setParameter(AuthPolicy.AUTH_SCHEME_PRIORITY, authPrefs);
-
-        if (useProxy()) {
-            client.getHostConfiguration().setProxy(proxyHost, proxyPort);
-            if (useProxyAuthentication()) {
-                client.getState().setProxyCredentials(proxyRealm, proxyHost,
-                    new UsernamePasswordCredentials(proxyUserName, proxyPasswd));
+        if (httpClient == null) {
+            final MultiThreadedHttpConnectionManager connManager = new MultiThreadedHttpConnectionManager();
+            httpClient = new HttpClient(connManager);
+            
+            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
+                public void run() {
+                    connManager.shutdown();
+                }
+            }));
+        
+            List authPrefs = new ArrayList(2);
+            authPrefs.add(AuthPolicy.DIGEST);
+            authPrefs.add(AuthPolicy.BASIC);
+            // Exclude the NTLM authentication scheme because it is not supported by this class
+            httpClient.getParams().setParameter(AuthPolicy.AUTH_SCHEME_PRIORITY, authPrefs);
+    
+            if (useProxy()) {
+                httpClient.getHostConfiguration().setProxy(proxyHost, proxyPort);
+                if (useProxyAuthentication()) {
+                    httpClient.getState().setProxyCredentials(proxyRealm, proxyHost,
+                        new UsernamePasswordCredentials(proxyUserName, proxyPasswd));
+                }
             }
         }
+        
         Credentials c = getCredentials(url);
         if (c != null) {
             Message.debug("found credentials for " + url + ": " + c);
-            client.getState().setCredentials(c.getRealm(), c.getHost(),
+            httpClient.getState().setCredentials(c.getRealm(), c.getHost(),
                 new UsernamePasswordCredentials(c.getUserName(), c.getPasswd()));
         }
-        return client;
+        
+        return httpClient;
     }
 
     private boolean useProxy() {
@@ -243,7 +257,7 @@ private Credentials getCredentials(URL url) {
     private boolean useProxyAuthentication() {
         return (proxyUserName != null && proxyUserName.trim().length() > 0);
     }
-
+    
     private static final class GETInputStream extends InputStream {
         private InputStream is;
 
