From ef7e8ec9c67c062ad5f221b196a077f5ef0f0bab Mon Sep 17 00:00:00 2001
From: Oliver Heger <oheger@apache.org>
Date: Mon, 15 Aug 2011 20:07:42 +0000
Subject: [PATCH] [CONFIGURATION-460] Ensure that the CombinedConfiguration
 used for sources in the additional section is correctly initialized, so that
 reloading works.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/trunk@1157974 13f79535-47bb-0310-9956-ffa450edef68
---
 conf/testComplexInitialization.xml            |  3 +-
 src/changes/changes.xml                       |  5 +++
 .../DefaultConfigurationBuilder.java          | 31 +++++++++++++++++--
 .../TestDefaultConfigurationBuilder.java      | 31 ++++++++++++++++++-
 4 files changed, 65 insertions(+), 5 deletions(-)

diff --git a/conf/testComplexInitialization.xml b/conf/testComplexInitialization.xml
index 157731b2e9..5e66875876 100644
--- a/conf/testComplexInitialization.xml
+++ b/conf/testComplexInitialization.xml
@@ -2,7 +2,8 @@
 <!-- Test configuration definition file that demonstrates complex initialization -->
 <configuration>
   <header>
-    <result delimiterParsingDisabled="true">
+    <result delimiterParsingDisabled="true" forceReloadCheck="true"
+      ignoreReloadExceptions="true">
       <nodeCombiner config-class="org.apache.commons.configuration.tree.OverrideCombiner"/>
       <expressionEngine config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
     </result>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2c5b3b3a35..ff38204823 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,11 @@
 
   <body>
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-460">
+        Reloading now also works for configuration sources declared in the
+        additional section of a configuration definition file for
+        DefaultConfigurationBuilder.
+      </action>
       <action dev="oheger" type="add" issue="CONFIGURATION-458">
         HierarchicalConfiguration now provides a specific implementation of the
         clear() method. This is more efficient and also solves some other
diff --git a/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java b/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
index d3813b5452..12bfa0f96a 100644
--- a/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
+++ b/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
@@ -603,8 +603,7 @@ public CombinedConfiguration getConfiguration(boolean load)
         List additionals = fetchChildConfigs(KEY_UNION);
         if (!additionals.isEmpty())
         {
-            CombinedConfiguration addConfig = new CombinedConfiguration(
-                    new UnionCombiner());
+            CombinedConfiguration addConfig = createAdditionalsConfiguration(result);
             result.addConfiguration(addConfig, ADDITIONAL_NAME);
             initCombinedConfiguration(addConfig, additionals,
                     KEY_ADDITIONAL_LIST);
@@ -640,13 +639,39 @@ protected CombinedConfiguration createResultConfiguration()
         return result;
     }
 
+    /**
+     * Creates the <code>CombinedConfiguration</code> for the configuration
+     * sources in the <code>&lt;additional&gt;</code> section. This method is
+     * called when the builder constructs the final configuration. It creates a
+     * new <code>CombinedConfiguration</code> and initializes some properties
+     * from the result configuration.
+     *
+     * @param resultConfig the result configuration (this is the configuration
+     *        that will be returned by the builder)
+     * @return the <code>CombinedConfiguration</code> for the additional
+     *         configuration sources
+     * @since 1.7
+     */
+    protected CombinedConfiguration createAdditionalsConfiguration(
+            CombinedConfiguration resultConfig)
+    {
+        CombinedConfiguration addConfig =
+                new CombinedConfiguration(new UnionCombiner());
+        addConfig.setDelimiterParsingDisabled(resultConfig
+                .isDelimiterParsingDisabled());
+        addConfig.setForceReloadCheck(resultConfig.isForceReloadCheck());
+        addConfig.setIgnoreReloadExceptions(resultConfig
+                .isIgnoreReloadExceptions());
+        return addConfig;
+    }
+
     /**
      * Initializes a combined configuration for the configurations of a specific
      * section. This method is called for the override and for the additional
      * section (if it exists).
      *
      * @param config the configuration to be initialized
-     * @param containedConfigs the list with the declaratinos of the contained
+     * @param containedConfigs the list with the declarations of the contained
      * configurations
      * @param keyListNodes a list with the declaration of list nodes
      * @throws ConfigurationException if an error occurs
diff --git a/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java b/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
index d61f41481c..0d2d1dc297 100644
--- a/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
+++ b/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
@@ -730,7 +730,7 @@ public void testComplexInitialization() throws ConfigurationException
     /**
      * Tests if the returned combined configuration has the expected structure.
      */
-    public void testCombinedConfiguration() throws ConfigurationException
+    public void testCombinedConfigurationStructure() throws ConfigurationException
     {
         factory.setFile(INIT_FILE);
         CombinedConfiguration cc = (CombinedConfiguration) factory
@@ -751,6 +751,35 @@ public void testCombinedConfiguration() throws ConfigurationException
         assertTrue("Config 2 not contained", names.contains("combiner2"));
     }
 
+    /**
+     * Helper method for testing the attributes of a combined configuration
+     * created by the builder.
+     *
+     * @param cc the configuration to be checked
+     */
+    private void checkCombinedConfigAttrs(CombinedConfiguration cc)
+    {
+        assertTrue("Wrong delimiter parsing flag",
+                cc.isDelimiterParsingDisabled());
+        assertTrue("Wrong reload check", cc.isForceReloadCheck());
+        assertTrue("Wrong ignore reload ex flag", cc.isIgnoreReloadExceptions());
+    }
+
+    /**
+     * Tests whether attributes are correctly set on the combined configurations
+     * for the override and additional sections.
+     */
+    public void testCombinedConfigurationAttributes() throws ConfigurationException
+    {
+        factory.setFile(INIT_FILE);
+        CombinedConfiguration cc = (CombinedConfiguration) factory
+                .getConfiguration();
+        checkCombinedConfigAttrs(cc);
+        CombinedConfiguration cc2 = (CombinedConfiguration) cc
+                .getConfiguration(DefaultConfigurationBuilder.ADDITIONAL_NAME);
+        checkCombinedConfigAttrs(cc2);
+    }
+
     /**
      * Tests the structure of the returned combined configuration if there is no
      * additional section.
