From 6037f828b16141d886e636a782fe81fe69662606 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Sat, 14 Jul 2012 12:49:05 +0000
Subject: [PATCH] NET-473 FTPClient setSoTimeout (int time) will result in
 NullPointerException. Clarify Javadoc.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1361535 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                            |  3 +++
 .../java/org/apache/commons/net/SocketClient.java  | 14 ++++++++++++++
 2 files changed, 17 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index e5093d11a..dc411d2bf 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -65,6 +65,9 @@ The <action> type attribute can be add,update,fix,remove.
         <release version="3.2" date="TBA" description="
 TBA
         ">
+            <action issue="NET-473" dev="sebb" type="fix">
+            FTPClient setSoTimeout (int time) will result in NullPointerException. Clarify Javadoc.
+            </action>
             <action issue="NET-468" dev="sebb" type="add" due-to="Bogdan Drozdowski">
             Request for native support for socks proxy routing with Commons net FTP.
             </action>
diff --git a/src/main/java/org/apache/commons/net/SocketClient.java b/src/main/java/org/apache/commons/net/SocketClient.java
index b5dc2799b..766fc33a8 100644
--- a/src/main/java/org/apache/commons/net/SocketClient.java
+++ b/src/main/java/org/apache/commons/net/SocketClient.java
@@ -450,9 +450,12 @@ public int getDefaultTimeout()
      * Only call this method after a connection has been opened
      * by {@link #connect connect()}.
      * <p>
+     * To set the initial timeout, use {@link #setDefaultTimeout(int)} instead.
+     * 
      * @param timeout  The timeout in milliseconds to use for the currently
      *                 open socket connection.
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public void setSoTimeout(int timeout) throws SocketException
     {
@@ -505,6 +508,7 @@ protected int getReceiveBufferSize(){
      * <p>
      * @return The timeout in milliseconds of the currently opened socket.
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public int getSoTimeout() throws SocketException
     {
@@ -517,6 +521,7 @@ public int getSoTimeout() throws SocketException
      * <p>
      * @param on  True if Nagle's algorithm is to be enabled, false if not.
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public void setTcpNoDelay(boolean on) throws SocketException
     {
@@ -531,6 +536,7 @@ public void setTcpNoDelay(boolean on) throws SocketException
      * @return True if Nagle's algorithm is enabled on the currently opened
      *        socket, false otherwise.
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public boolean getTcpNoDelay() throws SocketException
     {
@@ -546,6 +552,7 @@ public boolean getTcpNoDelay() throws SocketException
      * other systems.
      * @param  keepAlive If true, keepAlive is turned on
      * @throws SocketException
+     * @throws NullPointerException if the socket is not currently open
      * @since 2.2
      */
     public void setKeepAlive(boolean keepAlive) throws SocketException {
@@ -557,6 +564,7 @@ public void setKeepAlive(boolean keepAlive) throws SocketException {
      * Delegates to {@link Socket#getKeepAlive()}
      * @return True if SO_KEEPALIVE is enabled.
      * @throws SocketException
+     * @throws NullPointerException if the socket is not currently open
      * @since 2.2
      */
     public boolean getKeepAlive() throws SocketException {
@@ -569,6 +577,7 @@ public boolean getKeepAlive() throws SocketException {
      * @param on  True if linger is to be enabled, false if not.
      * @param val The linger timeout (in hundredths of a second?)
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public void setSoLinger(boolean on, int val) throws SocketException
     {
@@ -582,6 +591,7 @@ public void setSoLinger(boolean on, int val) throws SocketException
      * @return The current SO_LINGER timeout.  If SO_LINGER is disabled returns
      *         -1.
      * @exception SocketException If the operation fails.
+     * @throws NullPointerException if the socket is not currently open
      */
     public int getSoLinger() throws SocketException
     {
@@ -596,6 +606,7 @@ public int getSoLinger() throws SocketException
      * <p>
      * @return The port number of the open socket on the local host used
      *         for the connection.
+     * @throws NullPointerException if the socket is not currently open
      */
     public int getLocalPort()
     {
@@ -608,6 +619,7 @@ public int getLocalPort()
      * Delegates to {@link Socket#getLocalAddress()}
      * <p>
      * @return The local address to which the client's socket is bound.
+     * @throws NullPointerException if the socket is not currently open
      */
     public InetAddress getLocalAddress()
     {
@@ -621,6 +633,7 @@ public InetAddress getLocalAddress()
      * <p>
      * @return The port number of the remote host to which the client is
      *         connected.
+     * @throws NullPointerException if the socket is not currently open
      */
     public int getRemotePort()
     {
@@ -631,6 +644,7 @@ public int getRemotePort()
     /**
      * @return The remote address to which the client is connected.
      * Delegates to {@link Socket#getInetAddress()}
+     * @throws NullPointerException if the socket is not currently open
      */
     public InetAddress getRemoteAddress()
     {
