From ba75ed23264fdc913f7007323d6ca728bc3a712e Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 5 Jan 2012 18:55:03 +0000
Subject: [PATCH] NET-434 FTPClient fails to close local listener socket when
 command socket channel encounter "ReadTimeoutException"

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1227754 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +
 .../org/apache/commons/net/ftp/FTPClient.java | 67 ++++++++-----------
 2 files changed, 31 insertions(+), 39 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index faac647e7..e2b51b35b 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -59,6 +59,9 @@ The <action> type attribute can be add,update,fix,remove.
         <release version="3.1-SNAPSHOT" date="TBA" description="
 TBA
         ">
+            <action issue="NET-434" dev="sebb" type="fix">
+            FTPClient fails to close local listener socket when command socket channel encounter "ReadTimeoutException"
+            </action>
             <action issue="NET-436" dev="sebb" type="add">
             Support for SYST "Mac OS" listing - "MACOS Peter's Server"
             </action>
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index a598e4fbb..369ec2910 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -688,50 +688,39 @@ protected Socket _openDataConnection_(String command, String arg)
             // -> new ServerSocket(0) -> bind to any free local port
             ServerSocket server = _serverSocketFactory_.createServerSocket(getActivePort(), 1, getHostAddress());
 
-            // Try EPRT only if remote server is over IPv6, if not use PORT,
-            // because EPRT has no advantage over PORT on IPv4.
-            // It could even have the disadvantage,
-            // that EPRT will make the data connection fail, because
-            // today's intelligent NAT Firewalls are able to
-            // substitute IP addresses in the PORT command,
-            // but might not be able to recognize the EPRT command.
-            if (isInet6Address)
-            {
-                if (!FTPReply.isPositiveCompletion(eprt(getHostAddress(), server.getLocalPort())))
-                {
-                    server.close();
-                    return null;
+            try {
+                // Try EPRT only if remote server is over IPv6, if not use PORT,
+                // because EPRT has no advantage over PORT on IPv4.
+                // It could even have the disadvantage,
+                // that EPRT will make the data connection fail, because
+                // today's intelligent NAT Firewalls are able to
+                // substitute IP addresses in the PORT command,
+                // but might not be able to recognize the EPRT command.
+                if (isInet6Address) {
+                    if (!FTPReply.isPositiveCompletion(eprt(getHostAddress(), server.getLocalPort()))) {
+                        return null;
+                    }
+                } else {
+                    if (!FTPReply.isPositiveCompletion(port(getHostAddress(), server.getLocalPort()))) {
+                        return null;
+                    }
                 }
-            }
-            else
-            {
-                if (!FTPReply.isPositiveCompletion(port(getHostAddress(), server.getLocalPort())))
-                {
-                    server.close();
+    
+                if ((__restartOffset > 0) && !restart(__restartOffset)) {
                     return null;
                 }
-            }
-
-            if ((__restartOffset > 0) && !restart(__restartOffset))
-            {
-                server.close();
-                return null;
-            }
 
-            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))
-            {
-                server.close();
-                return null;
-            }
+                if (!FTPReply.isPositivePreliminary(sendCommand(command, arg))) {
+                    return null;
+                }
 
-            // For now, let's just use the data timeout value for waiting for
-            // the data connection.  It may be desirable to let this be a
-            // separately configurable value.  In any case, we really want
-            // to allow preventing the accept from blocking indefinitely.
-            if (__dataTimeout >= 0) {
-                server.setSoTimeout(__dataTimeout);
-            }
-            try {
+                // For now, let's just use the data timeout value for waiting for
+                // the data connection.  It may be desirable to let this be a
+                // separately configurable value.  In any case, we really want
+                // to allow preventing the accept from blocking indefinitely.
+                if (__dataTimeout >= 0) {
+                    server.setSoTimeout(__dataTimeout);
+                }
                 socket = server.accept();
             } finally {
                 server.close();
