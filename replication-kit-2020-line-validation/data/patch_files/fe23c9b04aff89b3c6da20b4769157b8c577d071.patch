From fe23c9b04aff89b3c6da20b4769157b8c577d071 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <thomas.neidhart@gmail.com>
Date: Mon, 23 Nov 2015 23:16:58 +0100
Subject: [PATCH] =?UTF-8?q?[MATH-1294]=20Fix=20potential=20race=20conditio?=
 =?UTF-8?q?n=20in=20PolynomialUtils.=20Thanks=20to=20Kamil=20W=C5=82odarcz?=
 =?UTF-8?q?yk?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/changes/changes.xml                                |  5 +++++
 .../math3/analysis/polynomials/PolynomialsUtils.java   | 10 +++++++---
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 7dfacc5a4d..3448c230f7 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -51,6 +51,11 @@ If the output is not quite correct, check for invisible trailing spaces!
   </properties>
   <body>
     <release version="3.6" date="XXXX-XX-XX" description="">
+      <action dev="tn" type="fix" issue="MATH-1294" due-to="Kamil WÅ‚odarczyk">
+        Fixed potential race condition in PolynomialUtils#buildPolynomial in
+        case polynomials are generated from multiple threads. Furthermore, the
+        synchronization is now performed on the coefficient list instead of the class.
+      </action>    
       <action dev="psteitz" type="update" issue="MATH-1246">
         Added bootstrap method to KolmogorovSmirnov test.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.java b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.java
index 5604149895..2efa07dc80 100644
--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.java
+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.java
@@ -107,6 +107,7 @@ public static PolynomialFunction createChebyshevPolynomial(final int degree) {
             /** Fixed recurrence coefficients. */
             private final BigFraction[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE };
             /** {@inheritDoc} */
+            @Override
             public BigFraction[] generate(int k) {
                 return coeffs;
             }
@@ -131,6 +132,7 @@ public static PolynomialFunction createHermitePolynomial(final int degree) {
         return buildPolynomial(degree, HERMITE_COEFFICIENTS,
                 new RecurrenceCoefficientsGenerator() {
             /** {@inheritDoc} */
+            @Override
             public BigFraction[] generate(int k) {
                 return new BigFraction[] {
                         BigFraction.ZERO,
@@ -157,6 +159,7 @@ public static PolynomialFunction createLaguerrePolynomial(final int degree) {
         return buildPolynomial(degree, LAGUERRE_COEFFICIENTS,
                 new RecurrenceCoefficientsGenerator() {
             /** {@inheritDoc} */
+            @Override
             public BigFraction[] generate(int k) {
                 final int kP1 = k + 1;
                 return new BigFraction[] {
@@ -184,6 +187,7 @@ public static PolynomialFunction createLegendrePolynomial(final int degree) {
         return buildPolynomial(degree, LEGENDRE_COEFFICIENTS,
                                new RecurrenceCoefficientsGenerator() {
             /** {@inheritDoc} */
+            @Override
             public BigFraction[] generate(int k) {
                 final int kP1 = k + 1;
                 return new BigFraction[] {
@@ -234,6 +238,7 @@ public static PolynomialFunction createJacobiPolynomial(final int degree, final
         return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),
                                new RecurrenceCoefficientsGenerator() {
             /** {@inheritDoc} */
+            @Override
             public BigFraction[] generate(int k) {
                 k++;
                 final int kvw      = k + v + w;
@@ -359,9 +364,8 @@ public static double[] shift(final double[] coefficients,
     private static PolynomialFunction buildPolynomial(final int degree,
                                                       final List<BigFraction> coefficients,
                                                       final RecurrenceCoefficientsGenerator generator) {
-
-        final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
-        synchronized (PolynomialsUtils.class) {
+        synchronized (coefficients) {
+            final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
             if (degree > maxDegree) {
                 computeUpToDegree(degree, maxDegree, generator, coefficients);
             }
