From 717068898a67d03b7c2435e9f16bb65aced68048 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Mon, 30 Dec 2013 23:47:49 +0000
Subject: [PATCH] NET-520 SubnetUtils("0.0.0.0/0") does not behave as expected
 Fixed range checking so network and broadcast addresses are treated as
 unsigned ints

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1554334 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  4 ++++
 .../apache/commons/net/util/SubnetUtils.java   | 18 ++++++++++++------
 .../apache/commons/net/SubnetUtilsTest.java    | 11 +++++++++++
 3 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 6ae9af101..fdd043c8a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -64,6 +64,10 @@ The <action> type attribute can be add,update,fix,remove.
     <body>
         <release version="3.4" date="2013-??-??" description="
         ">
+            <action issue="NET-520" type="fix" dev="sebb">
+            SubnetUtils("0.0.0.0/0") does not behave as expected
+            Fixed range checking so network and broadcast addresses are treated as unsigned ints
+            </action>
             <action issue="NET-521" type="fix" dev="sebb">
             SubnetUtils.SubnetInfo.getAddressCount() can overflow as it returns an int
             </action>
diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index 24cb3d371..834906b5c 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -99,15 +99,19 @@ private SubnetInfo() {}
         private int network()       { return network; }
         private int address()       { return address; }
         private int broadcast()     { return broadcast; }
+        
+        // long versions of the values (as unsigned int) which are more suitable for range checking
+        private long networkLong()  { return network &  UNSIGNED_INT_MASK; }
+        private long broadcastLong(){ return broadcast &  UNSIGNED_INT_MASK; }
 
         private int low() {
             return (isInclusiveHostCount() ? network() :
-                broadcast() - network() > 1 ? network() + 1 : 0);
+                broadcastLong() - networkLong() > 1 ? network() + 1 : 0);
         }
 
         private int high() {
             return (isInclusiveHostCount() ? broadcast() :
-                broadcast() - network() > 1 ? broadcast() -1  : 0);
+                broadcastLong() - networkLong() > 1 ? broadcast() -1  : 0);
         }
 
         /**
@@ -122,8 +126,10 @@ public boolean isInRange(String address) {
         }
 
         private boolean isInRange(int address) {
-            int diff = address - low();
-            return (diff >= 0 && (diff <= (high() - low())));
+            long addLong = address & UNSIGNED_INT_MASK;
+            long lowLong = low() & UNSIGNED_INT_MASK;
+            long highLong = high() & UNSIGNED_INT_MASK;
+            return addLong >= lowLong && addLong <= highLong;
         }
 
         public String getBroadcastAddress() {
@@ -185,8 +191,8 @@ public int getAddressCount() {
          * @return the count of addresses, may be zero.
          */
         public long getAddressCountLong() {
-            long b = broadcast() & UNSIGNED_INT_MASK;
-            long n = network()   & UNSIGNED_INT_MASK;
+            long b = broadcastLong();
+            long n = networkLong();
             long count = b - n + (isInclusiveHostCount() ? 1 : -1);
             return count < 0 ? 0 : count;
         }
diff --git a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
index ed9cd1866..a797b5a36 100644
--- a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
+++ b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
@@ -344,4 +344,15 @@ public void testNET521() {
         info = utils.getInfo();
         assertEquals(2147483646, info.getAddressCount());
     }
+
+    public void testNET520() {
+        SubnetUtils utils = new SubnetUtils("0.0.0.0/0");
+        utils.setInclusiveHostCount(true);
+        SubnetInfo info = utils.getInfo();
+        assertEquals("0.0.0.0",info.getNetworkAddress());
+        assertEquals("255.255.255.255",info.getBroadcastAddress());
+        assertTrue(info.isInRange("127.0.0.0"));
+        utils.setInclusiveHostCount(false);
+        assertTrue(info.isInRange("127.0.0.0"));
+    }
 }
