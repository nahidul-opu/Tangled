From 5dad11262d3331060cdb5fe1081079bdb5696f3f Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Wed, 7 Dec 2011 11:34:34 +0000
Subject: [PATCH] Allow PAX headers to set sizes bigger than 8GiB. 
 COMPRESS-163.  Based on patch by John Kodis

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1211393 13f79535-47bb-0310-9956-ffa450edef68
---
 .../compress/archivers/tar/TarArchiveEntry.java    | 14 ++++++++++++++
 .../archivers/tar/TarArchiveInputStream.java       |  7 ++++++-
 .../archivers/tar/TarArchiveEntryTest.java         | 13 +++++++++++++
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
index d16069cad2b..25ddaa7acca 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
@@ -571,6 +571,20 @@ public void setSize(long size) {
         this.size = size;
     }
 
+    /**
+     * Set this entry's file size.
+     *
+     * <p>Invoked by input stream when reading a PAX header.</p>
+     * @throws IllegalArgumentException if the size is &lt; 0
+     * @since Apache Commons Compress 1.4
+     */
+    void adjustSize(long size) {
+        if (size < 0){
+            throw new IllegalArgumentException("Size is out of range: " + size);
+        }
+        this.size = size;
+    }
+
     /**
      * Indicates in case of a sparse file if an extension sparse header
      * follows.
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 6e7a7ef0aa2..db87d2bd979 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -229,6 +229,11 @@ public TarArchiveEntry getNextTarEntry() throws IOException {
             readGNUSparse();
         }
 
+        // If the size of the next element in the archive has changed
+        // due to a new size being reported in the posix header
+        // information, we update entrySize here so that it contains
+        // the correct value.
+        entrySize = currEntry.getSize();
         return currEntry;
     }
 
@@ -341,7 +346,7 @@ public void close() {
             } else if ("uname".equals(key)){
                 currEntry.setUserName(val);
             } else if ("size".equals(key)){
-                currEntry.setSize(Long.parseLong(val));
+                currEntry.adjustSize(Long.parseLong(val));
             }
         }
     }
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java
index 50c0eea26a9..dc366e91ab1 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java
@@ -115,4 +115,17 @@ public void testMaxFileSize(){
         } catch (IllegalArgumentException expected) {
         }
     }
+
+    public void testAdjustFileSize(){
+        TarArchiveEntry t = new TarArchiveEntry("");
+        t.adjustSize(0);
+        t.adjustSize(1);
+        try {
+            t.adjustSize(-1);
+            fail("Should have generated IllegalArgumentException");
+        } catch (IllegalArgumentException expected) {
+        }
+        t.adjustSize(077777777777L);
+        t.adjustSize(0100000000000L);
+    }
 }
