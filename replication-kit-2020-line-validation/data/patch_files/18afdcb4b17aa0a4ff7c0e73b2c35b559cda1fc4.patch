From 18afdcb4b17aa0a4ff7c0e73b2c35b559cda1fc4 Mon Sep 17 00:00:00 2001
From: Benjamin Speakmon <bspeakmon@apache.org>
Date: Tue, 30 Oct 2007 06:33:59 +0000
Subject: [PATCH] - VALIDATOR-203: refactoring UrlValidator to use
 DomainValidator, replacing   the rather ugly domain checking code that caused
 VALIDATOR-202

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@589974 13f79535-47bb-0310-9956-ffa450edef68
---
 .../validator/routines/UrlValidator.java      | 51 +------------------
 1 file changed, 2 insertions(+), 49 deletions(-)

diff --git a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
index 089ffda58..1a7b109b1 100644
--- a/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/UrlValidator.java
@@ -339,55 +339,8 @@ protected boolean isValidAuthority(String authority) {
 
         if (!ipV4Address) {
             // Domain is hostname name
-            Perl5Util domainMatcher = new Perl5Util();
-            hostname = domainMatcher.match(DOMAIN_PATTERN, hostIP);
-        }
-
-        //rightmost hostname will never start with a digit.
-        if (hostname) {
-            // LOW-TECH FIX FOR VALIDATOR-202
-            // TODO: Rewrite to use ArrayList and .add semantics: see VALIDATOR-203
-            char[] chars = hostIP.toCharArray();
-            int size = 1;
-            for(int i=0; i<chars.length; i++) {
-                if(chars[i] == '.') {
-                    size++;
-                }
-            }
-            String[] domainSegment = new String[size];
-            boolean match = true;
-            int segmentCount = 0;
-            int segmentLength = 0;
-            Perl5Util atomMatcher = new Perl5Util();
-
-            while (match) {
-                match = atomMatcher.match(ATOM_PATTERN, hostIP);
-                if (match) {
-                    domainSegment[segmentCount] = atomMatcher.group(1);
-                    segmentLength = domainSegment[segmentCount].length() + 1;
-                    hostIP =
-                            (segmentLength >= hostIP.length())
-                            ? ""
-                            : hostIP.substring(segmentLength);
-
-                    segmentCount++;
-                }
-            }
-            String topLevel = domainSegment[segmentCount - 1];
-            if (topLevel.length() < 2 || topLevel.length() > 4) {
-                return false;
-            }
-
-            // First letter of top level must be a alpha
-            Perl5Util alphaMatcher = new Perl5Util();
-            if (!alphaMatcher.match(ALPHA_PATTERN, topLevel.substring(0, 1))) {
-                return false;
-            }
-
-            // Make sure there's a host name preceding the authority.
-            if (segmentCount < 2) {
-                return false;
-            }
+            DomainValidator validator = DomainValidator.getInstance();
+            hostname = validator.isValid(hostIP);
         }
 
         if (!hostname && !ipV4Address) {
