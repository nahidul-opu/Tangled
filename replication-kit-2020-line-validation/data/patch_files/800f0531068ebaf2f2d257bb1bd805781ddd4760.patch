From 800f0531068ebaf2f2d257bb1bd805781ddd4760 Mon Sep 17 00:00:00 2001
From: Julius Davies <julius@apache.org>
Date: Tue, 1 Jun 2010 21:52:33 +0000
Subject: [PATCH] CODEC-98 - Base64InputStream causes NullPointerException on
 some input - https://issues.apache.org/jira/browse/CODEC-98

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@950267 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/codec/binary/Base64.java   |  4 ++++
 .../codec/binary/Base64InputStreamTest.java   | 20 ++++++++++++++++
 .../codec/binary/Base64OutputStreamTest.java  | 23 +++++++++++++++++++
 .../commons/codec/binary/Base64TestData.java  | 12 +++++++++-
 4 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java
index c861f46d37..19a695947e 100644
--- a/src/java/org/apache/commons/codec/binary/Base64.java
+++ b/src/java/org/apache/commons/codec/binary/Base64.java
@@ -583,6 +583,10 @@ void decode(byte[] in, int inPos, int inAvail) {
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
+                resizeBuffer();
+            }
+            
             x = x << 6;
             switch (modulus) {
                 case 2 :
diff --git a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
index 2171f84e13..fd1fc1f765 100644
--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java
@@ -46,6 +46,26 @@ public Base64InputStreamTest(String name) {
         super(name);
     }
 
+    /**
+     * Test the Base64InputStream implementation against the special NPE inducing input
+     * identified in the CODEC-98 bug.
+     *
+     * @throws Exception for some failure scenarios.
+     */
+    public void testCodec98NPE() throws Exception {
+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);
+        ByteArrayInputStream data = new ByteArrayInputStream(codec98);
+        Base64InputStream stream = new Base64InputStream(data);
+
+        // This line causes an NPE in commons-codec-1.4.jar:
+        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);
+
+        String decoded = StringUtils.newStringUtf8(decodedBytes);
+        assertEquals(
+            "codec-98 NPE Base64InputStream", Base64TestData.CODEC_98_NPE_DECODED, decoded
+        );
+    }
+
     /**
      * Tests the Base64InputStream implementation against empty input.
      * 
diff --git a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java
index bf692621fb..fd64ce66f4 100644
--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java
+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java
@@ -46,6 +46,29 @@ public Base64OutputStreamTest(String name) {
         super(name);
     }
 
+    /**
+     * Test the Base64OutputStream implementation against the special NPE inducing input
+     * identified in the CODEC-98 bug.
+     *
+     * @throws Exception for some failure scenarios.
+     */
+    public void testCodec98NPE() throws Exception {
+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);
+        byte[] codec98_1024 = new byte[1024];
+        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);
+        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);
+        Base64OutputStream stream = new Base64OutputStream(data, false);
+        stream.write(codec98_1024, 0, 1024);
+        stream.close();
+
+        byte[] decodedBytes = data.toByteArray();
+        String decoded = StringUtils.newStringUtf8(decodedBytes);
+        assertEquals(
+            "codec-98 NPE Base64OutputStream", Base64TestData.CODEC_98_NPE_DECODED, decoded
+        );
+    }
+    
+
     /**
      * Test the Base64OutputStream implementation against empty input.
      * 
diff --git a/src/test/org/apache/commons/codec/binary/Base64TestData.java b/src/test/org/apache/commons/codec/binary/Base64TestData.java
index f4be0f4bf2..84bb5bf7e3 100644
--- a/src/test/org/apache/commons/codec/binary/Base64TestData.java
+++ b/src/test/org/apache/commons/codec/binary/Base64TestData.java
@@ -32,6 +32,13 @@
  */
 public class Base64TestData {
 
+    public static final String CODEC_98_NPE
+        = "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM";
+
+    public static final String CODEC_98_NPE_DECODED
+        = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123";
+
+
     // OpenSSL doesn't include the final \n, but it would be annoying beyond belief
     // to further parameterize commons-codec to support this pointless variation.
     final static String ENCODED_64_CHARS_PER_LINE
@@ -133,7 +140,10 @@ public class Base64TestData {
 
     static byte[] streamToBytes(final InputStream in) throws IOException {
         // new byte[7] is obviously quite slow, but helps exercise the code.
-        byte[] buf = new byte[7];
+        return streamToBytes(in, new byte[7]);
+    }
+
+    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {
         try {
             int[] status = fill(buf, 0, in);
             int size = status[SIZE_KEY];
