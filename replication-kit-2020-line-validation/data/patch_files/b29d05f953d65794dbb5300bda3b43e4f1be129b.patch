From b29d05f953d65794dbb5300bda3b43e4f1be129b Mon Sep 17 00:00:00 2001
From: Marc Giger <giger@apache.org>
Date: Sun, 15 Feb 2015 09:11:24 +0000
Subject: [PATCH] SANTUARIO-415: implement writeAsEncodedUnicode(). It is used
 by the LogInputProcessor

git-svn-id: https://svn.apache.org/repos/asf/santuario/xml-security-java/trunk@1659901 13f79535-47bb-0310-9956-ffa450edef68
---
 .../stax/ext/stax/XMLSecEventFactory.java     |   2 +-
 .../stax/impl/stax/XMLSecAttributeImpl.java   |  44 ++++
 .../stax/impl/stax/XMLSecCharactersImpl.java  |  47 +++++
 .../stax/impl/stax/XMLSecCommentImpl.java     |  14 ++
 .../stax/impl/stax/XMLSecDTDImpl.java         |  12 ++
 .../stax/impl/stax/XMLSecEndDocumentImpl.java |   7 +
 .../stax/impl/stax/XMLSecEndElementImpl.java  |  19 ++
 .../stax/XMLSecEntityDeclarationImpl.java     |  19 ++
 .../impl/stax/XMLSecEntityReferenceImpl.java  |  14 ++
 .../stax/impl/stax/XMLSecEventBaseImpl.java   |   3 +-
 .../stax/impl/stax/XMLSecNamespaceImpl.java   |  43 ++++
 .../stax/XMLSecProcessingInstructionImpl.java |  19 ++
 .../impl/stax/XMLSecStartDocumentImpl.java    |  31 +++
 .../impl/stax/XMLSecStartElementImpl.java     |  46 +++++
 .../security/test/stax/XMLSecEventTest.java   | 190 ++++++++++++++++++
 15 files changed, 508 insertions(+), 2 deletions(-)
 create mode 100644 src/test/java/org/apache/xml/security/test/stax/XMLSecEventTest.java

diff --git a/src/main/java/org/apache/xml/security/stax/ext/stax/XMLSecEventFactory.java b/src/main/java/org/apache/xml/security/stax/ext/stax/XMLSecEventFactory.java
index 893c25c55e..0690204c1f 100644
--- a/src/main/java/org/apache/xml/security/stax/ext/stax/XMLSecEventFactory.java
+++ b/src/main/java/org/apache/xml/security/stax/ext/stax/XMLSecEventFactory.java
@@ -75,7 +75,7 @@ public static XMLSecEvent allocate(XMLStreamReader xmlStreamReader, XMLSecStartE
                 return new XMLSecCharactersImpl(xmlStreamReader.getText(), false, true, xmlStreamReader.isWhiteSpace(), parentXMLSecStartElement);
             case XMLStreamConstants.START_DOCUMENT:
                 String systemId = xmlStreamReader.getLocation() != null ? xmlStreamReader.getLocation().getSystemId() : null;
-                return new XMLSecStartDocumentImpl(systemId, xmlStreamReader.getEncoding(),
+                return new XMLSecStartDocumentImpl(systemId, xmlStreamReader.getCharacterEncodingScheme(),
                         xmlStreamReader.standaloneSet() ? xmlStreamReader.isStandalone() : null, xmlStreamReader.getVersion());
             case XMLStreamConstants.END_DOCUMENT:
                 return new XMLSecEndDocumentImpl();
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecAttributeImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecAttributeImpl.java
index ab3a351ccd..8aa8134a5b 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecAttributeImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecAttributeImpl.java
@@ -23,6 +23,9 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * Class to let XML-Attributes be comparable how it is requested by C14N
@@ -108,4 +111,45 @@ public int getEventType() {
     public boolean isAttribute() {
         return true;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            final String prefix = getName().getPrefix();
+            if (prefix != null && !prefix.isEmpty()) {
+                writer.write(prefix);
+                writer.write(':');
+            }
+            writer.write(getName().getLocalPart());
+            writer.write("=\"");
+            writeEncoded(writer, getValue());
+            writer.write("\"");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
+
+    private void writeEncoded(Writer writer, String text) throws IOException {
+        final int length = text.length();
+
+        int i = 0;
+        int idx = 0;
+        while (i < length) {
+            char c = text.charAt(i);
+            switch (c) {
+                case '&':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&amp;");
+                    idx = i + 1;
+                    break;
+                case '"':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&quot;");
+                    idx = i + 1;
+                    break;
+            }
+            i++;
+        }
+        writer.write(text, idx, length - idx);
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCharactersImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCharactersImpl.java
index 2c06e2070b..8db72fb6c0 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCharactersImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCharactersImpl.java
@@ -22,6 +22,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -99,4 +102,48 @@ public boolean isCharacters() {
     public XMLSecCharacters asCharacters() {
         return this;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            if (isCData) {
+                writer.write("<![CDATA[");
+                writer.write(getText());
+                writer.write("]]>");
+            } else {
+                writeEncoded(writer, getText());
+            }
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
+
+    private void writeEncoded(Writer writer, char[] text) throws IOException {
+        final int length = text.length;
+
+        int i = 0;
+        int idx = 0;
+        while (i < length) {
+            char c = text[i];
+            switch (c) {
+                case '<':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&lt;");
+                    idx = i + 1;
+                    break;
+                case '>':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&gt;");
+                    idx = i + 1;
+                    break;
+                case '&':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&amp;");
+                    idx = i + 1;
+                    break;
+            }
+            i++;
+        }
+        writer.write(text, idx, length - idx);
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCommentImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCommentImpl.java
index 6116f7ead7..8ce1fdcbc0 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCommentImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecCommentImpl.java
@@ -22,6 +22,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -45,4 +48,15 @@ public String getText() {
     public int getEventType() {
         return XMLStreamConstants.COMMENT;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("<!--");
+            writer.write(getText());
+            writer.write("-->");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecDTDImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecDTDImpl.java
index 8b5ec2eba6..5fb7f76443 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecDTDImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecDTDImpl.java
@@ -22,6 +22,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 import java.util.Collections;
 import java.util.List;
 
@@ -62,4 +65,13 @@ public List getEntities() {
     public int getEventType() {
         return XMLStreamConstants.DTD;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write(getDocumentTypeDeclaration());
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndDocumentImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndDocumentImpl.java
index 31cc2b2961..607982b85a 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndDocumentImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndDocumentImpl.java
@@ -21,6 +21,8 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecEndDocument;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -42,4 +44,9 @@ public boolean isEndDocument() {
     public XMLSecEndDocument asEndEndDocument() {
         return this;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        // nothing to write.
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndElementImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndElementImpl.java
index bda6aace3d..82c837db40 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndElementImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEndElementImpl.java
@@ -23,6 +23,9 @@
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 import java.util.Iterator;
 
 /**
@@ -62,4 +65,20 @@ public boolean isEndElement() {
     public XMLSecEndElement asEndElement() {
         return this;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("</");
+            final String prefix = getName().getPrefix();
+            if (prefix != null && !prefix.isEmpty()) {
+                writer.write(getName().getPrefix());
+                writer.write(':');
+            }
+            writer.write(getName().getLocalPart());
+            writer.write('>');
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityDeclarationImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityDeclarationImpl.java
index 9acdaa6e15..a5df84dfd4 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityDeclarationImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityDeclarationImpl.java
@@ -21,6 +21,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecEntityDeclaration;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -73,4 +76,20 @@ public int getEventType() {
     public boolean isEntityReference() {
         return true;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("<!ENTITY ");
+            writer.write(getName());
+            writer.write(" \"");
+            final String replacementText = getReplacementText();
+            if (replacementText != null) {
+                writer.write(replacementText);
+            }
+            writer.write("\">");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityReferenceImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityReferenceImpl.java
index bd22635617..7266fbd62d 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityReferenceImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEntityReferenceImpl.java
@@ -22,7 +22,10 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.events.EntityDeclaration;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -58,4 +61,15 @@ public int getEventType() {
     public boolean isEntityReference() {
         return true;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write('&');
+            writer.write(getName());
+            writer.write(';');
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEventBaseImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEventBaseImpl.java
index cd062219f6..a6e20ce7be 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEventBaseImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecEventBaseImpl.java
@@ -158,7 +158,8 @@ public QName getSchemaType() {
 
     @Override
     public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
-        throw new UnsupportedOperationException();
+        throw new UnsupportedOperationException(
+                "writeAsEncodedUnicode not implemented for " + this.getClass().getName());
     }
 
     static final class LocationImpl implements Location {
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecNamespaceImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecNamespaceImpl.java
index cdd16bd34d..58a4767f7f 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecNamespaceImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecNamespaceImpl.java
@@ -23,6 +23,9 @@
 import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 import java.util.Map;
 import java.util.WeakHashMap;
 
@@ -148,6 +151,46 @@ public boolean isNamespace() {
         return true;
     }
 
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("xmlns");
+            if (getPrefix() != null && !getPrefix().isEmpty()) {
+                writer.write(':');
+                writer.write(getPrefix());
+            }
+            writer.write("=\"");
+            writeEncoded(writer, getValue());
+            writer.write("\"");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
+
+    private void writeEncoded(Writer writer, String text) throws IOException {
+        final int length = text.length();
+
+        int i = 0;
+        int idx = 0;
+        while (i < length) {
+            char c = text.charAt(i);
+            switch (c) {
+                case '&':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&amp;");
+                    idx = i + 1;
+                    break;
+                case '"':
+                    writer.write(text, idx, i - idx);
+                    writer.write("&quot;");
+                    idx = i + 1;
+                    break;
+            }
+            i++;
+        }
+        writer.write(text, idx, length - idx);
+    }
+
     @Override
     public String toString() {
         if (this.prefix == null || this.prefix.isEmpty()) {
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecProcessingInstructionImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecProcessingInstructionImpl.java
index 7c3336a252..b114902dd3 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecProcessingInstructionImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecProcessingInstructionImpl.java
@@ -22,6 +22,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -57,4 +60,20 @@ public int getEventType() {
     public boolean isProcessingInstruction() {
         return true;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("<?");
+            writer.write(getTarget());
+            final String data = getData();
+            if (data != null && !data.isEmpty()) {
+                writer.write(' ');
+                writer.write(data);
+            }
+            writer.write("?>");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartDocumentImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartDocumentImpl.java
index 7d00a962ee..109879360b 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartDocumentImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartDocumentImpl.java
@@ -21,6 +21,9 @@
 import org.apache.xml.security.stax.ext.stax.XMLSecStartDocument;
 
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import java.io.IOException;
+import java.io.Writer;
 
 /**
  * @author $Author$
@@ -84,4 +87,32 @@ public boolean isStartDocument() {
     public XMLSecStartDocument asStartDocument() {
         return this;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write("<?xml version=\"");
+            if (getVersion() == null || getVersion().isEmpty()) {
+                writer.write("1.0");
+            } else {
+                writer.write(getVersion());
+            }
+            writer.write('"');
+            if (encodingSet()) {
+                writer.write(" encoding=\"");
+                writer.write(getCharacterEncodingScheme());
+                writer.write('"');
+            }
+            if (standaloneSet()) {
+                if (isStandalone()) {
+                    writer.write(" standalone=\"yes\"");
+                } else {
+                    writer.write(" standalone=\"no\"");
+                }
+            }
+            writer.write(" ?>");
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartElementImpl.java b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartElementImpl.java
index e6e919c59c..b357f263bd 100644
--- a/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartElementImpl.java
+++ b/src/main/java/org/apache/xml/security/stax/impl/stax/XMLSecStartElementImpl.java
@@ -25,7 +25,10 @@
 import javax.xml.namespace.NamespaceContext;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.*;
 
 /**
@@ -244,4 +247,47 @@ public boolean isStartElement() {
     public XMLSecStartElement asStartElement() {
         return this;
     }
+
+    @Override
+    public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {
+        try {
+            writer.write('<');
+            final String prefix = getName().getPrefix();
+            if (prefix != null && !prefix.isEmpty()) {
+                writer.write(prefix);
+                writer.write(':');
+            }
+            writer.write(getName().getLocalPart());
+
+            for (XMLSecNamespace xmlSecNamespace : namespaces) {
+                writer.write(" xmlns");
+
+                final String nsPrefix = xmlSecNamespace.getPrefix();
+                if (nsPrefix != null && !nsPrefix.isEmpty()) {
+                    writer.write(':');
+                    writer.write(nsPrefix);
+                }
+                writer.write("=\"");
+                writer.write(xmlSecNamespace.getValue());
+                writer.write('"');
+            }
+
+            for (XMLSecAttribute xmlSecAttribute : attributes) {
+                writer.write(' ');
+                final String attrPrefix = xmlSecAttribute.getName().getPrefix();
+                if (attrPrefix != null && !attrPrefix.isEmpty()) {
+                    writer.write(attrPrefix);
+                    writer.write(':');
+                }
+                writer.write(xmlSecAttribute.getName().getLocalPart());
+                writer.write("=\"");
+                writer.write(xmlSecAttribute.getValue());
+                writer.write('"');
+            }
+
+            writer.write('>');
+        } catch (IOException e) {
+            throw new XMLStreamException(e);
+        }
+    }
 }
diff --git a/src/test/java/org/apache/xml/security/test/stax/XMLSecEventTest.java b/src/test/java/org/apache/xml/security/test/stax/XMLSecEventTest.java
new file mode 100644
index 0000000000..57cdacf11f
--- /dev/null
+++ b/src/test/java/org/apache/xml/security/test/stax/XMLSecEventTest.java
@@ -0,0 +1,190 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.xml.security.test.stax;
+
+import org.apache.xml.security.stax.ext.stax.*;
+import org.apache.xml.security.stax.impl.XMLSecurityEventReader;
+import org.apache.xml.security.stax.impl.stax.*;
+import org.codehaus.stax2.ri.evt.CharactersEventImpl;
+import org.junit.Assert;
+import org.junit.Test;
+
+import javax.xml.namespace.QName;
+import javax.xml.stream.XMLEventReader;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.stream.events.XMLEvent;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.util.ArrayDeque;
+import java.util.Deque;
+
+/**
+ * @author $Author$
+ * @version $Revision$ $Date$
+ */
+public class XMLSecEventTest extends Assert {
+
+    @Test
+    public void testWriteCharactersEncoded() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecCharacters xmlSecCharacters = new XMLSecCharactersImpl("test", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("test", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecCharacters = new XMLSecCharactersImpl("<", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("&lt;", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecCharacters = new XMLSecCharactersImpl(">", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("&gt;", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecCharacters = new XMLSecCharactersImpl("&", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("&amp;", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecCharacters = new XMLSecCharactersImpl("<&>", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("&lt;&amp;&gt;", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecCharacters = new XMLSecCharactersImpl(" < & > ", false, false, false, null);
+        xmlSecCharacters.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals(" &lt; &amp; &gt; ", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteAttributeEncoded() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecAttribute xmlSecAttribute = new XMLSecAttributeImpl(new QName("test", "test", "test"), "test");
+        xmlSecAttribute.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("test:test=\"test\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecAttribute = new XMLSecAttributeImpl(new QName("test"), "\"");
+        xmlSecAttribute.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("test=\"&quot;\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecAttribute = new XMLSecAttributeImpl(new QName("test"), "&");
+        xmlSecAttribute.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("test=\"&amp;\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecAttribute = new XMLSecAttributeImpl(new QName("test"), " & \" > < ");
+        xmlSecAttribute.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("test=\" &amp; &quot; > < \"", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteComment() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecComment xmlSecAttribute = new XMLSecCommentImpl(" < > & \" '", null);
+        xmlSecAttribute.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("<!-- < > & \" '-->", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteEntityDeclaration() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecEntityDeclaration xmlSecEntityDeclaration = new XMLSecEntityDeclarationImpl("test");
+        xmlSecEntityDeclaration.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("<!ENTITY test \"\">", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteEntityReference() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecEntityReference xmlSecEntityReference = new XMLSecEntityReferenceImpl("test", null, null);
+        xmlSecEntityReference.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("&test;", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteNamespaceEncoded() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecNamespace xmlSecNamespace = XMLSecNamespaceImpl.getInstance("test", "test");
+        xmlSecNamespace.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("xmlns:test=\"test\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecNamespace = XMLSecNamespaceImpl.getInstance("", "\"");
+        xmlSecNamespace.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("xmlns=\"&quot;\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecNamespace = XMLSecNamespaceImpl.getInstance("test", "&");
+        xmlSecNamespace.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("xmlns:test=\"&amp;\"", stringWriter.toString());
+
+        stringWriter = new StringWriter();
+        xmlSecNamespace = XMLSecNamespaceImpl.getInstance("test", " & \" > < ");
+        xmlSecNamespace.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("xmlns:test=\" &amp; &quot; > < \"", stringWriter.toString());
+    }
+
+    @Test
+    public void testWriteProcessingInstruction() throws Exception {
+        StringWriter stringWriter = new StringWriter();
+        XMLSecProcessingInstruction xmlSecProcessingInstruction =
+                new XMLSecProcessingInstructionImpl("test", "test", null);
+        xmlSecProcessingInstruction.writeAsEncodedUnicode(stringWriter);
+        Assert.assertEquals("<?test test?>", stringWriter.toString());
+    }
+
+    @Test
+    public void testwWiteAsEncodedUnicode() throws Exception {
+        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
+        XMLStreamReader xmlStreamReader =
+                xmlInputFactory.createXMLStreamReader(this.getClass().getClassLoader().getResourceAsStream(
+                        "org/apache/xml/security/c14n/inExcl/plain-soap-1.1.xml"));
+
+        Deque<XMLSecEvent> xmlSecEventDeque = new ArrayDeque<XMLSecEvent>();
+        do {
+            xmlSecEventDeque.push(XMLSecEventFactory.allocate(xmlStreamReader, null));
+            xmlStreamReader.next();
+        }
+        while (xmlStreamReader.hasNext());
+        xmlSecEventDeque.push((XMLSecEventFactory.allocate(xmlStreamReader, null)));//EndDocumentEvent
+
+        XMLSecurityEventReader xmlSecurityEventReader = new XMLSecurityEventReader(xmlSecEventDeque, 0);
+
+        XMLEventReader xmlEventReader =
+                xmlInputFactory.createXMLEventReader(this.getClass().getClassLoader().getResourceAsStream(
+                        "org/apache/xml/security/c14n/inExcl/plain-soap-1.1.xml"));
+
+        final StringWriter stdWriter = new StringWriter();
+        final StringWriter secWriter = new StringWriter();
+        while (xmlEventReader.hasNext()) {
+            XMLEvent stdXmlEvent = xmlEventReader.nextEvent();
+            XMLEvent secXmlEvent = xmlSecurityEventReader.nextEvent();
+
+            stdXmlEvent.writeAsEncodedUnicode(stdWriter);
+            secXmlEvent.writeAsEncodedUnicode(secWriter);
+        }
+
+        Assert.assertEquals(secWriter.toString(), stdWriter.toString());
+    }
+}
