From 87af08aaff52d228a48cc8970f06a595640a64d2 Mon Sep 17 00:00:00 2001
From: Colm O Heigeartaigh <coheigea@apache.org>
Date: Mon, 18 Apr 2011 12:19:05 +0000
Subject: [PATCH] [SANTUARIO-263] - Canonicalizer can't handle dynamical
 created DOM correctly  - Patch applied, thanks.

git-svn-id: https://svn.apache.org/repos/asf/santuario/xml-security-java/trunk@1094522 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG.txt                                 |  1 +
 .../c14n/implementations/Canonicalizer11.java | 16 +++++-
 .../Canonicalizer20010315.java                | 16 +++++-
 .../implementations/CanonicalizerBase.java    | 18 ++++++-
 .../Canonicalizer20010315ExclusiveTest.java   | 51 +++++++++++++++++++
 .../xml/security/c14n/inExcl/example2_4.xml   |  1 +
 .../c14n/inExcl/example2_4_c14nized.xml       |  1 +
 7 files changed, 100 insertions(+), 4 deletions(-)
 create mode 100644 src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4.xml
 create mode 100644 src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml

diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index bd29f21b46..669e894da2 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,6 +1,7 @@
 Changelog for "Apache xml-security" <http://santuario.apache.org/>
 
 New in v1.5.0-SNAPSHOT
+    Fixed SANTUARIO-263: Canonicalizer can't handle dynamical created DOM correctly. Thanks to Martin Koegler.
     Fixed SANTUARIO-262: Invalid use of String.getBytes(). Thanks to Martin Koegler.
 
 New in v1.4.4
diff --git a/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer11.java b/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
index ba1a4ba682..69f3455096 100644
--- a/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
+++ b/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer11.java
@@ -421,7 +421,7 @@ protected void circumventBugIfNeeded(XMLSignatureInput input)
     }
 
     protected void handleParent(Element e, NameSpaceSymbTable ns) {
-        if (!e.hasAttributes()) {
+        if (!e.hasAttributes() && e.getNamespaceURI() == null) {
             return;
         }
         xmlattrStack.push(-1);
@@ -444,6 +444,20 @@ protected void handleParent(Element e, NameSpaceSymbTable ns) {
             }            
             ns.addMapping(NName,NValue,N);             
         }
+        if (e.getNamespaceURI() != null) {
+            String NName = e.getPrefix();
+            String NValue = e.getNamespaceURI();
+            String Name;
+            if (NName == null || NName.equals("")) {
+                NName = "xmlns";
+                Name = "xmlns";
+            } else {
+                Name = "xmlns:" + NName;
+            }
+            Attr n = e.getOwnerDocument().createAttributeNS("http://www.w3.org/2000/xmlns/", Name);
+            n.setValue(NValue);
+            ns.addMapping(NName, NValue, n);
+        }
     }
 
     private static String joinURI(String baseURI, String relativeURI) throws URISyntaxException {
diff --git a/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer20010315.java b/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer20010315.java
index cae0d8a8a4..750b41764b 100644
--- a/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer20010315.java
+++ b/src/main/java/org/apache/xml/security/c14n/implementations/Canonicalizer20010315.java
@@ -366,7 +366,7 @@ protected void circumventBugIfNeeded(XMLSignatureInput input)
     }
 
     protected void handleParent(Element e, NameSpaceSymbTable ns) {
-        if (!e.hasAttributes()) {
+        if (!e.hasAttributes() && e.getNamespaceURI() == null) {
             return;
         }
         xmlattrStack.push(-1);
@@ -389,5 +389,19 @@ protected void handleParent(Element e, NameSpaceSymbTable ns) {
             }            
             ns.addMapping(NName, NValue, N);             
         }
+        if (e.getNamespaceURI() != null) {
+            String NName = e.getPrefix();
+            String NValue = e.getNamespaceURI();
+            String Name;
+            if (NName == null || NName.equals("")) {
+                NName = "xmlns";
+                Name = "xmlns";
+            } else {
+                Name = "xmlns:" + NName;
+            }
+            Attr n = e.getOwnerDocument().createAttributeNS("http://www.w3.org/2000/xmlns/", Name);
+            n.setValue(NValue);
+            ns.addMapping(NName, NValue, n);
+        }
     }
 }
diff --git a/src/main/java/org/apache/xml/security/c14n/implementations/CanonicalizerBase.java b/src/main/java/org/apache/xml/security/c14n/implementations/CanonicalizerBase.java
index 1425021c32..56561a96a7 100644
--- a/src/main/java/org/apache/xml/security/c14n/implementations/CanonicalizerBase.java
+++ b/src/main/java/org/apache/xml/security/c14n/implementations/CanonicalizerBase.java
@@ -552,7 +552,7 @@ protected boolean isVisible(Node currentNode) {
     }
 
     protected void handleParent(Element e, NameSpaceSymbTable ns) {
-        if (!e.hasAttributes()) {
+        if (!e.hasAttributes() && e.getNamespaceURI() == null) {
             return;
         }
         NamedNodeMap attrs = e.getAttributes();
@@ -570,7 +570,21 @@ protected void handleParent(Element e, NameSpaceSymbTable ns) {
                 continue;
             }            
             ns.addMapping(NName, NValue, N);             
-        }   			
+        }
+        if (e.getNamespaceURI() != null) {
+            String NName = e.getPrefix();
+            String NValue = e.getNamespaceURI();
+            String Name;
+            if (NName == null || NName.equals("")) {
+                NName = "xmlns";
+                Name = "xmlns";
+            } else {
+                Name = "xmlns:" + NName;
+            }
+            Attr n = e.getOwnerDocument().createAttributeNS("http://www.w3.org/2000/xmlns/", Name);
+            n.setValue(NValue);
+            ns.addMapping(NName, NValue, n);
+        }
     }
 
     /**
diff --git a/src/test/java/org/apache/xml/security/test/c14n/implementations/Canonicalizer20010315ExclusiveTest.java b/src/test/java/org/apache/xml/security/test/c14n/implementations/Canonicalizer20010315ExclusiveTest.java
index be142d8583..db8a92cd4d 100644
--- a/src/test/java/org/apache/xml/security/test/c14n/implementations/Canonicalizer20010315ExclusiveTest.java
+++ b/src/test/java/org/apache/xml/security/test/c14n/implementations/Canonicalizer20010315ExclusiveTest.java
@@ -353,6 +353,57 @@ public void testNodeSet() throws Exception {
         byte[] bytes = c14n.engineCanonicalize(input, "env ns0 xsi wsu");
         assertEquals(c14nXML,new String(bytes));
     }
+    
+    /**
+     * Method test24excl - a testcase for SANTUARIO-263 
+     * "Canonicalizer can't handle dynamical created DOM correctly"
+     * https://issues.apache.org/jira/browse/SANTUARIO-263
+     */
+    @org.junit.Test
+    public void test24excl() throws Exception {
+        Document doc =
+            this.db.parse(
+                getAbsolutePath(
+                    "src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4.xml"));
+        Node root = 
+            doc.getElementsByTagNameNS("http://example.net", "elem2").item(0);
+        Canonicalizer20010315Excl c = new Canonicalizer20010315ExclWithComments();
+        byte[] reference = 
+            JavaUtils.getBytesFromFile(getAbsolutePath(
+                "src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml"));
+        byte[] result = c.engineCanonicalizeSubTree(root);
+        boolean equals = java.security.MessageDigest.isEqual(reference, result);
+
+        assertTrue(equals);
+    }
+
+    /**
+     * Method test24Aexcl - a testcase for SANTUARIO-263 
+     * "Canonicalizer can't handle dynamical created DOM correctly"
+     * https://issues.apache.org/jira/browse/SANTUARIO-263
+     */
+    @org.junit.Test
+    public void test24Aexcl() throws Exception {
+        Document doc = dbf.newDocumentBuilder ().newDocument ();
+        Element local = doc.createElementNS("foo:bar", "dsig:local");
+        Element test = doc.createElementNS("http://example.net", "etsi:test");
+        Element elem2 = doc.createElementNS("http://example.net", "etsi:elem2");
+        Element stuff = doc.createElementNS("foo:bar", "dsig:stuff");
+        elem2.appendChild(stuff);
+        test.appendChild(elem2);
+        local.appendChild(test);
+        doc.appendChild(local);
+
+        Node root = doc.getElementsByTagNameNS("http://example.net", "elem2").item(0);
+        Canonicalizer20010315Excl c = new Canonicalizer20010315ExclWithComments();
+        byte[] reference = 
+            JavaUtils.getBytesFromFile(getAbsolutePath(
+                "src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml"));
+        byte[] result = c.engineCanonicalizeSubTree(root);
+        boolean equals = java.security.MessageDigest.isEqual(reference, result);
+
+        assertTrue(equals);
+    }
 
     private String getAbsolutePath(String path) {
         String basedir = System.getProperty("basedir");
diff --git a/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4.xml b/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4.xml
new file mode 100644
index 0000000000..8b19151156
--- /dev/null
+++ b/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4.xml
@@ -0,0 +1 @@
+<?xml version="1.0" encoding="UTF-8"?><dsig:local xmlns:dsig="foo:bar"><etsi:test xmlns:etsi="http://example.net"><etsi:elem2><dsig:stuff/></etsi:elem2></etsi:test></dsig:local>
\ No newline at end of file
diff --git a/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml b/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml
new file mode 100644
index 0000000000..096ce49306
--- /dev/null
+++ b/src/test/resources/org/apache/xml/security/c14n/inExcl/example2_4_c14nized.xml
@@ -0,0 +1 @@
+<etsi:elem2 xmlns:etsi="http://example.net"><dsig:stuff xmlns:dsig="foo:bar"></dsig:stuff></etsi:elem2>
\ No newline at end of file
