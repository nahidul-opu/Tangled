From d3d48f834749a31459a3201fa33b89d72eb42fe5 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Mon, 19 May 2014 20:37:58 +0000
Subject: [PATCH] [COLLECTIONS-516] Added clarification to javadoc in case of
 null keys/values. Thanks to Cyrille Artho.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1596050 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                                     | 4 ++++
 src/main/java/org/apache/commons/collections4/MapUtils.java | 5 +++++
 2 files changed, 9 insertions(+)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d9c0b42143..b6766a33ba 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -22,6 +22,10 @@
   <body>
 
   <release version="4.1" date="TBD" description="">
+    <action issue="COLLECTIONS-516" dev="tn" type="fix" due-to="Cyrille Artho">
+      Added clarification to the javadoc of "MapUtils#toProperties(Map)" in case
+      of null keys/values.
+    </action>
     <action issue="COLLECTIONS-524" dev="tn" type="fix" due-to="J Goodfellow">
       "ListOrderedSet#listOrderedSet(List)" did not remove duplicates from the
       input list as advertised in the javadoc.
diff --git a/src/main/java/org/apache/commons/collections4/MapUtils.java b/src/main/java/org/apache/commons/collections4/MapUtils.java
index 788e0dc4fd..bfd03d803f 100644
--- a/src/main/java/org/apache/commons/collections4/MapUtils.java
+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java
@@ -852,11 +852,16 @@ public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key
     /**
      * Gets a new Properties object initialised with the values from a Map.
      * A null input will return an empty properties object.
+     * <p>
+     * A Properties object may only store non-null keys and values, thus if
+     * the provided map contains either a key or value which is {@code null},
+     * a {@link NullPointerException} will be thrown.
      *
      * @param <K>  the key type
      * @param <V>  the value type
      * @param map  the map to convert to a Properties object
      * @return the properties object
+     * @throws NullPointerException if a key or value in the provided map is {@code null}
      */
     public static <K, V> Properties toProperties(final Map<K, V> map) {
         final Properties answer = new Properties();
