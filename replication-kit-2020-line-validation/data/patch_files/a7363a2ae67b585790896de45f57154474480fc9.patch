From a7363a2ae67b585790896de45f57154474480fc9 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Thu, 10 Jul 2014 21:39:53 +0000
Subject: [PATCH] [MATH-1135] Fix MonotoneChain algorithm in case of collinear
 hull points. Thanks to Guillaume Marceau.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1609577 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  5 +++++
 .../euclidean/twod/hull/MonotoneChain.java    |  2 +-
 .../ConvexHullGenerator2DAbstractTest.java    | 21 +++++++++++++++++++
 3 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index f0ef731619..a50e33c54d 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,11 @@ Users are encouraged to upgrade to this version as this release not
   2. A few methods in the FastMath class are in fact slower that their
   counterpart in either Math or StrictMath (cf. MATH-740 and MATH-901).
 ">
+      <action dev="tn" type="fix" issue="MATH-1135" due-to="Guillaume Marceau">
+        "MonotoneChain" failed to generate a convex hull if only a minimal hull
+        shall be created (includeCollinearPoints=false) and collinear hull points
+        were present in the input.
+      </action>
       <action dev="tn" type="fix" issue="MATH-1131" due-to="Schalk W. CronjÃ©">
         Improve performance of "KolmogorovSmirnovTest#kolmogorovSmirnovTest(...)" for
         large samples.
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java
index 2ade7a69e1..50fd6b752a 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java
@@ -160,8 +160,8 @@ private void updateHull(final Vector2D point, final List<Vector2D> hull) {
                 } else {
                     if (distanceToCurrent > distanceToLast) {
                         hull.remove(size - 1);
+                        hull.add(point);
                     }
-                    hull.add(point);
                 }
                 return;
             } else if (offset > 0) {
diff --git a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
index c9e84ae70d..4edebd9aca 100644
--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java
@@ -53,6 +53,7 @@ protected Collection<Vector2D> reducePoints(Collection<Vector2D> points) {
 
     @Before
     public void setUp() {
+        // by default, do not include collinear points
         generator = createConvexHullGenerator(false);
         random = new MersenneTwister(10);
     }
@@ -203,6 +204,26 @@ public void testClosePoints() {
         checkConvexHull(points, hull);
     }
 
+    @Test
+    public void testCollinearPointOnExistingBoundary() {
+        // MATH-1135: check that collinear points on the hull are handled correctly
+        //            when only a minimal hull shall be constructed
+        final Collection<Vector2D> points = new ArrayList<Vector2D>();
+        points.add(new Vector2D(7.3152, 34.7472));
+        points.add(new Vector2D(6.400799999999997, 34.747199999999985));
+        points.add(new Vector2D(5.486399999999997, 34.7472));
+        points.add(new Vector2D(4.876799999999999, 34.7472));
+        points.add(new Vector2D(4.876799999999999, 34.1376));
+        points.add(new Vector2D(4.876799999999999, 30.48));
+        points.add(new Vector2D(6.0959999999999965, 30.48));
+        points.add(new Vector2D(6.0959999999999965, 34.1376));
+        points.add(new Vector2D(7.315199999999996, 34.1376));
+        points.add(new Vector2D(7.3152, 30.48));
+
+        final ConvexHull2D hull = createConvexHullGenerator(false).generate(points);
+        checkConvexHull(points, hull);
+    }
+
     @Test
     public void testIssue1123() {
 
