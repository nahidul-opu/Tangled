From 8644dbaa9e1203bd9eb6e167cf7aea96667f694c Mon Sep 17 00:00:00 2001
From: Phil Steitz <psteitz@apache.org>
Date: Sun, 23 Sep 2007 19:50:08 +0000
Subject: [PATCH] Eliminated potential sources of NullPointerExceptions in
 PoolingConnection. JIRA: DBCP-241

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@578597 13f79535-47bb-0310-9956-ffa450edef68
---
 pom.xml                                       |  1 +
 .../commons/dbcp/DelegatingConnection.java    |  9 +++--
 .../commons/dbcp/PoolingConnection.java       | 14 +++++++-
 .../dbcp/TestDelegatingConnection.java        | 36 +++++++++++++++++++
 .../apache/commons/dbcp/TestPStmtPooling.java | 31 ++++++++++++++++
 xdocs/changes.xml                             |  4 +++
 6 files changed, 92 insertions(+), 3 deletions(-)

diff --git a/pom.xml b/pom.xml
index 016af89645..d7df32cb4a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -241,6 +241,7 @@
                 <include>org/apache/commons/dbcp/TestBasicDataSourceFactory.java</include>
                 <include>org/apache/commons/dbcp/TestBasicDataSource.java</include>
                 <include>org/apache/commons/dbcp/TestAbandonedBasicDataSource.java</include>
+                <include>org/apache/commons/dbcp/TestPStmtPooling.java</include>
                 <include>org/apache/commons/dbcp/TestPStmtPoolingBasicDataSource.java</include>
                 <include>org/apache/commons/dbcp/TestPoolingDataSource.java</include>
                 <include>org/apache/commons/dbcp/TestJndi.java</include>
diff --git a/src/java/org/apache/commons/dbcp/DelegatingConnection.java b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
index 60046ed33b..3d183c213a 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingConnection.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
@@ -358,8 +358,13 @@ public boolean isClosed() throws SQLException {
 
     protected void checkOpen() throws SQLException {
         if(_closed) {
-            throw new SQLException
-                ("Connection " + _conn + " is closed.");
+            if (null != _conn) {
+                throw new SQLException
+                    ("Connection " + _conn + " is closed.");
+            } else {
+                throw new SQLException
+                    ("Connection is null.");
+            }      
         }
     }
 
diff --git a/src/java/org/apache/commons/dbcp/PoolingConnection.java b/src/java/org/apache/commons/dbcp/PoolingConnection.java
index 3df3507c92..15ee2ce703 100644
--- a/src/java/org/apache/commons/dbcp/PoolingConnection.java
+++ b/src/java/org/apache/commons/dbcp/PoolingConnection.java
@@ -88,6 +88,10 @@ public synchronized void close() throws SQLException {
      * @return a {@link PoolablePreparedStatement}
      */
     public PreparedStatement prepareStatement(String sql) throws SQLException {
+        if (null == _pstmtPool) {
+            throw new SQLException(
+                    "Statement pool is null - closed or invalid PoolingConnection.");
+        }
         try {
             return(PreparedStatement)(_pstmtPool.borrowObject(createKey(sql)));
         } catch(NoSuchElementException e) {
@@ -104,6 +108,10 @@ public PreparedStatement prepareStatement(String sql) throws SQLException {
      * @return a {@link PoolablePreparedStatement}
      */
     public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
+        if (null == _pstmtPool) {
+            throw new SQLException(
+                    "Statement pool is null - closed or invalid PoolingConnection.");
+        }
         try {
             return(PreparedStatement)(_pstmtPool.borrowObject(createKey(sql,resultSetType,resultSetConcurrency)));
         } catch(NoSuchElementException e) {
@@ -245,7 +253,11 @@ public void passivateObject(Object key, Object obj) throws Exception {
     }
 
     public String toString() {
-        return "PoolingConnection: " + _pstmtPool.toString();
+        if (_pstmtPool != null ) {
+            return "PoolingConnection: " + _pstmtPool.toString();
+        } else {
+            return "PoolingConnection: null";
+        }
     }
 
     /**
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
index b7194d4e2d..2ba7ed1c1c 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
@@ -24,6 +24,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.apache.commons.pool.impl.GenericKeyedObjectPool;
+
 /**
  * @author Dirk Verbeeck
  * @version $Revision$ $Date$
@@ -91,4 +93,38 @@ public void testCheckOpen() throws Exception {
             // expected
         }      
     }
+    
+    /**
+     * Verify fix for DBCP-241
+     */
+    public void testCheckOpenNull() throws Exception {
+        try {
+            conn.close();
+            conn.checkOpen();
+            fail("Expecting SQLException");
+        } catch (SQLException ex) {
+            assertTrue(ex.getMessage().endsWith("is closed."));
+        }
+
+        try {
+            conn = new DelegatingConnection(null);
+            conn._closed = true;  
+            conn.checkOpen();
+            fail("Expecting SQLException");
+        } catch (SQLException ex) {
+            assertTrue(ex.getMessage().endsWith("is null."));
+        }
+
+        try {
+            PoolingConnection pc = new PoolingConnection
+                (delegateConn2, new GenericKeyedObjectPool());
+            conn = new DelegatingConnection(pc);
+            pc.close();
+            conn.close();
+            conn.prepareStatement("");
+            fail("Expecting SQLException");
+        } catch (SQLException ex) {
+            assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
+        }   
+    }
 }
diff --git a/src/test/org/apache/commons/dbcp/TestPStmtPooling.java b/src/test/org/apache/commons/dbcp/TestPStmtPooling.java
index c8e44a88fe..c80f88ffa9 100644
--- a/src/test/org/apache/commons/dbcp/TestPStmtPooling.java
+++ b/src/test/org/apache/commons/dbcp/TestPStmtPooling.java
@@ -19,6 +19,7 @@
 
 import java.sql.Connection;
 import java.sql.Statement;
+import java.sql.SQLException;
 
 import javax.sql.DataSource;
 
@@ -69,4 +70,34 @@ public void testStmtPool() throws Exception {
         stmt2.close();
         assertSame(ustmt1, ustmt2);
     }
+    
+    public void testClosePool() throws Exception {
+        new TesterDriver();
+        ConnectionFactory connFactory = new DriverManagerConnectionFactory(
+                "jdbc:apache:commons:testdriver","u1","p1");
+
+        ObjectPool connPool = new GenericObjectPool();
+        KeyedObjectPoolFactory stmtPoolFactory = new GenericKeyedObjectPoolFactory(null);
+
+        PoolableConnectionFactory x = new PoolableConnectionFactory(
+                connFactory, connPool, stmtPoolFactory,
+                null, false, true);
+
+        DataSource ds = new PoolingDataSource(connPool);
+        ((PoolingDataSource) ds).setAccessToUnderlyingConnectionAllowed(true);
+
+        Connection conn = ds.getConnection();
+        Statement stmt = conn.prepareStatement("select 1 from dual");
+        
+        Connection poolableConnection = ((DelegatingConnection) conn).getDelegate();
+        Connection poolingConnection = 
+            ((DelegatingConnection) poolableConnection).getDelegate();
+        poolingConnection.close();
+        try {
+            stmt = conn.prepareStatement("select 1 from dual");
+            fail("Expecting SQLException");
+        } catch (SQLException ex) {
+            assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
+        }     
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 332349fd42..7ca1114e53 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -88,6 +88,10 @@ The <action> type attribute can be add,update,fix,remove.
         idle connections are destroyed and the method returns.  As the remaining
         active connections are closed, they are destroyed.
       </action>
+      <action dev="psteitz" type="fix" issue="DBCP-241">
+        Eliminated potential sources of NullPointerExceptions in 
+        PoolingConnection.
+      </action>
     </release>
     <release version="1.2.2" date="2007-04-04"
       description="This is a maintenance release containing bug fixes
