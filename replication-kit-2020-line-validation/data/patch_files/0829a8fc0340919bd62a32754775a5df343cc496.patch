From 0829a8fc0340919bd62a32754775a5df343cc496 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rn=20Kottmann?= <joern@apache.org>
Date: Tue, 18 Feb 2014 12:57:45 +0000
Subject: [PATCH] OPENNLP-600 Stream test classes now use a InputStreamFactory
 instead of InputStream.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1569299 13f79535-47bb-0310-9956-ffa450edef68
---
 .../formats/Conll02NameSampleStreamTest.java  | 16 ++++++-
 .../formats/Conll03NameSampleStreamTest.java  | 16 ++++++-
 .../formats/ConllXPOSSampleStreamTest.java    |  9 ++--
 .../formats/EvalitaNameSampleStreamTest.java  | 15 +++++-
 .../formats/ResourceAsStreamFactory.java      | 47 +++++++++++++++++++
 .../formats/ad/ADChunkSampleStreamTest.java   |  7 +--
 .../formats/ad/ADNameSampleStreamTest.java    |  7 +--
 .../formats/ad/ADPOSSampleStreamTest.java     | 16 +++----
 .../formats/ad/ADParagraphStreamTest.java     |  5 +-
 .../ad/ADSentenceSampleStreamTest.java        |  7 +--
 10 files changed, 114 insertions(+), 31 deletions(-)
 create mode 100644 opennlp-tools/src/test/java/opennlp/tools/formats/ResourceAsStreamFactory.java

diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/Conll02NameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/Conll02NameSampleStreamTest.java
index 42fd56944..7a3ec1634 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/Conll02NameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/Conll02NameSampleStreamTest.java
@@ -24,10 +24,10 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
-import java.io.InputStream;
 
 import opennlp.tools.formats.Conll02NameSampleStream.LANGUAGE;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.Span;
 
@@ -41,7 +41,8 @@
 public class Conll02NameSampleStreamTest {
   
   private static ObjectStream<NameSample> openData(LANGUAGE lang, String name) throws IOException {
-    InputStream in = Conll02NameSampleStreamTest.class.getResourceAsStream("/opennlp/tools/formats/" + name);
+    InputStreamFactory in = new ResourceAsStreamFactory(Conll02NameSampleStreamTest.class, 
+        "/opennlp/tools/formats/" + name);
     
     return new Conll02NameSampleStream(lang, in, Conll02NameSampleStream.GENERATE_PERSON_ENTITIES);
   }
@@ -84,4 +85,15 @@ public void testParsingDutchSample() throws IOException {
     
     assertNull(sampleStream.read());
   }
+  
+  @Test
+  public void testReset() throws IOException {
+    ObjectStream<NameSample> sampleStream = openData(LANGUAGE.NL, "conll2002-nl.sample");
+    
+    NameSample sample = sampleStream.read();
+    
+    sampleStream.reset();
+    
+    assertEquals(sample, sampleStream.read());
+  }
 }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/Conll03NameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/Conll03NameSampleStreamTest.java
index 37045e21a..3b80b23b1 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/Conll03NameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/Conll03NameSampleStreamTest.java
@@ -22,10 +22,10 @@
 import static org.junit.Assert.assertNull;
 
 import java.io.IOException;
-import java.io.InputStream;
 
 import opennlp.tools.formats.Conll03NameSampleStream.LANGUAGE;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.Span;
 
@@ -41,7 +41,8 @@ public class Conll03NameSampleStreamTest {
   
 	
   private static ObjectStream<NameSample> openData(LANGUAGE lang, String name) throws IOException {
-    InputStream in = Conll03NameSampleStreamTest.class.getResourceAsStream("/opennlp/tools/formats/" + name);
+    InputStreamFactory in = new ResourceAsStreamFactory(Conll03NameSampleStreamTest.class, 
+        "/opennlp/tools/formats/" + name);
 
     return new Conll03NameSampleStream(lang, in, Conll02NameSampleStream.GENERATE_PERSON_ENTITIES);
   }
@@ -97,4 +98,15 @@ public void testParsingGermanSample() throws IOException {
     assertEquals(0, personName.getNames().length);
     assertEquals(true, personName.isClearAdaptiveDataSet());
   }
+  
+  @Test
+  public void testReset() throws IOException {
+    ObjectStream<NameSample> sampleStream = openData(LANGUAGE.DE, GERMAN_SAMPLE);
+    
+    NameSample sample = sampleStream.read();
+    
+    sampleStream.reset();
+    
+    assertEquals(sample, sampleStream.read());
+  }
 }
\ No newline at end of file
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ConllXPOSSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ConllXPOSSampleStreamTest.java
index dbb0f9956..9a56fb372 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ConllXPOSSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ConllXPOSSampleStreamTest.java
@@ -21,11 +21,10 @@
 import static org.junit.Assert.assertNull;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.nio.charset.Charset;
 
 import opennlp.tools.postag.POSSample;
-import opennlp.tools.util.MockInputStreamFactory;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 
 import org.junit.Test;
@@ -35,10 +34,10 @@ public class ConllXPOSSampleStreamTest {
   @Test
   public void testParsingSample() throws IOException {
     
-    InputStream in = ConllXPOSSampleStreamTest.class.getResourceAsStream("/opennlp/tools/formats/conllx.sample");
+    InputStreamFactory in = new ResourceAsStreamFactory(ConllXPOSSampleStreamTest.class, 
+        "/opennlp/tools/formats/conllx.sample");
     
-    ObjectStream<POSSample> sampleStream = new ConllXPOSSampleStream(new MockInputStreamFactory(in),
-        Charset.forName("UTF-8"));
+    ObjectStream<POSSample> sampleStream = new ConllXPOSSampleStream(in,Charset.forName("UTF-8"));
     
     POSSample a = sampleStream.read();
     
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/EvalitaNameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/EvalitaNameSampleStreamTest.java
index ce6c36a8c..2b1ad3d56 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/EvalitaNameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/EvalitaNameSampleStreamTest.java
@@ -22,10 +22,10 @@
 import static org.junit.Assert.assertNull;
 
 import java.io.IOException;
-import java.io.InputStream;
 
 import opennlp.tools.formats.EvalitaNameSampleStream.LANGUAGE;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.ObjectStream;
 import opennlp.tools.util.Span;
 
@@ -39,7 +39,8 @@
 public class EvalitaNameSampleStreamTest {
   
   private static ObjectStream<NameSample> openData(LANGUAGE lang, String name) throws IOException {
-    InputStream in = EvalitaNameSampleStreamTest.class.getResourceAsStream("/opennlp/tools/formats/" + name);
+    InputStreamFactory in = new ResourceAsStreamFactory(EvalitaNameSampleStreamTest.class, 
+        "/opennlp/tools/formats/" + name);
     
     return new EvalitaNameSampleStream(lang, in, EvalitaNameSampleStream.GENERATE_PERSON_ENTITIES);
   }
@@ -67,4 +68,14 @@ public void testParsingItalianSample() throws IOException {
     assertNull(sampleStream.read());
   }
   
+  @Test
+  public void testReset() throws IOException {
+    ObjectStream<NameSample> sampleStream = openData(LANGUAGE.IT, "evalita-ner-it.sample");
+    
+    NameSample sample = sampleStream.read();
+    
+    sampleStream.reset();
+    
+    assertEquals(sample, sampleStream.read());
+  }
 }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ResourceAsStreamFactory.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ResourceAsStreamFactory.java
new file mode 100644
index 000000000..03e047e65
--- /dev/null
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ResourceAsStreamFactory.java
@@ -0,0 +1,47 @@
+/*
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *  under the License.
+ */
+
+package opennlp.tools.formats;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import opennlp.tools.util.InputStreamFactory;
+
+public class ResourceAsStreamFactory implements InputStreamFactory {
+
+  private Class<?> clazz;
+  private String name;
+
+  /**
+   * 
+   * @param clazz
+   * @param name
+   */
+  public ResourceAsStreamFactory(Class<?> clazz, String name) {
+    
+    if (clazz == null || name == null) {
+      throw new IllegalArgumentException("Null parameters are not allowed!");
+    }
+    
+    this.clazz = clazz;
+    this.name = name;
+  }
+  
+  @Override
+  public InputStream createInputStream() throws IOException {
+    return clazz.getResourceAsStream(name);
+  }
+}
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
index 5581b9dd6..a4e7837b5 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADChunkSampleStreamTest.java
@@ -20,11 +20,12 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 
 import opennlp.tools.chunker.ChunkSample;
+import opennlp.tools.formats.ResourceAsStreamFactory;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Before;
@@ -66,8 +67,8 @@ public void testChunks() throws IOException {
 
   @Before
   public void setup() throws IOException {
-    InputStream in = ADParagraphStreamTest.class
-	.getResourceAsStream("/opennlp/tools/formats/ad.sample");
+    InputStreamFactory in = new ResourceAsStreamFactory(
+        ADParagraphStreamTest.class, "/opennlp/tools/formats/ad.sample");
 
     ADChunkSampleStream stream = new ADChunkSampleStream(
     	new PlainTextByLineStream(in, "UTF-8"));
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
index fb6f37fd9..6105ef08b 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java
@@ -20,11 +20,12 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 
+import opennlp.tools.formats.ResourceAsStreamFactory;
 import opennlp.tools.namefind.NameSample;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -112,8 +113,8 @@ public void testMissingRightContraction() throws IOException {
 
   @Before
   public void setup() throws IOException {
-    InputStream in = ADParagraphStreamTest.class
-        .getResourceAsStream("/opennlp/tools/formats/ad.sample");
+    InputStreamFactory in = new ResourceAsStreamFactory(ADParagraphStreamTest.class,
+        "/opennlp/tools/formats/ad.sample");
 
     ADNameSampleStream stream = new ADNameSampleStream(
         new PlainTextByLineStream(in, "UTF-8"), true);
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
index f5b7e379d..eb89b024e 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADPOSSampleStreamTest.java
@@ -21,6 +21,7 @@
 
 import java.io.IOException;
 
+import opennlp.tools.formats.ResourceAsStreamFactory;
 import opennlp.tools.postag.POSSample;
 import opennlp.tools.util.PlainTextByLineStream;
 
@@ -32,9 +33,8 @@ public class ADPOSSampleStreamTest {
   public void testSimple() throws IOException {
     // add one sentence with expandME = includeFeats = false
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(
-            ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+        new PlainTextByLineStream(new ResourceAsStreamFactory(
+            ADParagraphStreamTest.class, "/opennlp/tools/formats/ad.sample"),
             "UTF-8"), false, false);
 
     POSSample sample = stream.read();
@@ -58,9 +58,8 @@ public void testSimple() throws IOException {
   public void testExpandME() throws IOException {
     // add one sentence with expandME = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(
-            ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+        new PlainTextByLineStream(new ResourceAsStreamFactory(
+            ADParagraphStreamTest.class, "/opennlp/tools/formats/ad.sample"),
             "UTF-8"), true, false);
 
     POSSample sample = stream.read();
@@ -87,9 +86,8 @@ public void testExpandME() throws IOException {
   public void testIncludeFeats() throws IOException {
     // add one sentence with includeFeats = true
     ADPOSSampleStream stream = new ADPOSSampleStream(
-        new PlainTextByLineStream(
-            ADParagraphStreamTest.class
-                .getResourceAsStream("/opennlp/tools/formats/ad.sample"),
+        new PlainTextByLineStream(new ResourceAsStreamFactory(
+            ADParagraphStreamTest.class, "/opennlp/tools/formats/ad.sample"),
             "UTF-8"), false, true);
 
     POSSample sample = stream.read();
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
index 733b2d845..34e935e5d 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADParagraphStreamTest.java
@@ -20,8 +20,9 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.IOException;
-import java.io.InputStream;
 
+import opennlp.tools.formats.ResourceAsStreamFactory;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 
 import org.junit.Test;
@@ -64,7 +65,7 @@ public void testLeadingWithContraction() throws IOException {
   }
   
   private static ADSentenceStream openData() throws IOException {
-    InputStream in = ADParagraphStreamTest.class.getResourceAsStream("/opennlp/tools/formats/ad.sample");
+    InputStreamFactory in = new ResourceAsStreamFactory(ADParagraphStreamTest.class, "/opennlp/tools/formats/ad.sample");
     
     return new ADSentenceStream(new PlainTextByLineStream(in, "UTF-8"));
   }
diff --git a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
index 235f7bbea..462de2d94 100644
--- a/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
+++ b/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADSentenceSampleStreamTest.java
@@ -21,11 +21,12 @@
 import static org.junit.Assert.assertNotNull;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 
+import opennlp.tools.formats.ResourceAsStreamFactory;
 import opennlp.tools.sentdetect.SentenceSample;
+import opennlp.tools.util.InputStreamFactory;
 import opennlp.tools.util.PlainTextByLineStream;
 import opennlp.tools.util.Span;
 
@@ -52,8 +53,8 @@ public void testSentences() throws IOException {
 
   @Before
   public void setup() throws IOException {
-    InputStream in = ADSentenceSampleStreamTest.class
-        .getResourceAsStream("/opennlp/tools/formats/ad.sample");
+    InputStreamFactory in = new ResourceAsStreamFactory(ADSentenceSampleStreamTest.class,
+        "/opennlp/tools/formats/ad.sample");
 
     ADSentenceSampleStream stream = new ADSentenceSampleStream(
         new PlainTextByLineStream(in, "UTF-8"), true);
