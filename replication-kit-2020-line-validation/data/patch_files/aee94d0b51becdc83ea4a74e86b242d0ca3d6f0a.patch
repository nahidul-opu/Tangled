From aee94d0b51becdc83ea4a74e86b242d0ca3d6f0a Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Thu, 7 Aug 2014 19:41:45 +0000
Subject: [PATCH] NET-551 Util copyReader calls
 CopyStreamListener.bytesTransferred with the incorrect value for
 bytesTransferred

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1616574 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |   5 +-
 .../java/org/apache/commons/net/io/Util.java  |   2 +-
 .../org/apache/commons/net/util/UtilTest.java | 113 ++++++++++++++++++
 3 files changed, 118 insertions(+), 2 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/net/util/UtilTest.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b95a81795..1d8925be1 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -68,10 +68,13 @@ This is mainly a bug-fix release. See further details below.
   IMAPExportMbox (example app) allows IMAP folders to be exported into an mbox file.
   This is the inverse of the IMAPImportMbox example added previously
         ">
+            <action issue="NET-551" type="fix" dev="sebb">
+            Util copyReader calls CopyStreamListener.bytesTransferred with the incorrect value for bytesTransferred
+            </action>
             <action type="update" dev="sebb">
             Added control character processing to TelnetClientExample
             </action>
-            <action issue="NET-547" type="fix" dev="sebb" due-to="Fabio Scippacercola">
+            <action issue="NET-547" type="update" dev="sebb" due-to="Fabio Scippacercola">
             There is a lack of documentation regarding setControlKeepAliveTimeout
             </action>
             <action issue="NET-549" type="fix" dev="sebb" due-to="Pradeep Natarajan">
diff --git a/src/main/java/org/apache/commons/net/io/Util.java b/src/main/java/org/apache/commons/net/io/Util.java
index fbb5f2c64..d18b075f9 100644
--- a/src/main/java/org/apache/commons/net/io/Util.java
+++ b/src/main/java/org/apache/commons/net/io/Util.java
@@ -285,7 +285,7 @@ public static final long copyReader(Reader source, Writer dest,
                     dest.flush();
                     ++total;
                     if (listener != null) {
-                        listener.bytesTransferred(total, chars, streamSize);
+                        listener.bytesTransferred(total, 1, streamSize);
                     }
                     continue;
                 }
diff --git a/src/test/java/org/apache/commons/net/util/UtilTest.java b/src/test/java/org/apache/commons/net/util/UtilTest.java
new file mode 100644
index 000000000..573ef17db
--- /dev/null
+++ b/src/test/java/org/apache/commons/net/util/UtilTest.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.commons.net.util;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.CharArrayReader;
+import java.io.CharArrayWriter;
+import java.io.Closeable;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.net.Socket;
+
+import org.apache.commons.net.io.CopyStreamEvent;
+import org.apache.commons.net.io.CopyStreamListener;
+import org.apache.commons.net.io.Util;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class UtilTest {
+
+    private Writer dest = new CharArrayWriter();
+    private Reader source = new CharArrayReader(new char[]{'a'});
+    private InputStream src = new ByteArrayInputStream(new byte[]{'z'});
+    private OutputStream dst = new ByteArrayOutputStream();
+
+    @Test
+    public void testcloseQuietly() {
+        Util.closeQuietly((Closeable) null);
+        Util.closeQuietly((Socket) null);
+    }
+
+    @Test
+    public void testReader0() throws Exception {
+        long streamSize=0;
+        int bufferSize=0;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    @Test
+    public void testReader1() throws Exception {
+        long streamSize=0;
+        int bufferSize=1;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    @Test
+    public void testReader_1() throws Exception {
+        long streamSize=0;
+        int bufferSize=-1;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    @Test
+    public void testStream0() throws Exception {
+        long streamSize=0;
+        int bufferSize=0;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    @Test
+    public void testStream1() throws Exception {
+        long streamSize=0;
+        int bufferSize=1;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    @Test
+    public void testStream_1() throws Exception {
+        long streamSize=0;
+        int bufferSize=-1;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
+    }
+
+    static class CSL implements CopyStreamListener {
+
+        final long expectedTotal;
+        final int expectedBytes;
+        final long expectedSize;
+        CSL(long totalBytesTransferred, int bytesTransferred, long streamSize) {
+            this.expectedTotal = totalBytesTransferred;
+            this.expectedBytes = bytesTransferred;
+            this.expectedSize = streamSize;
+        }
+        public void bytesTransferred(CopyStreamEvent event) {
+        }
+
+        public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {
+            Assert.assertEquals("Wrong total", expectedTotal, totalBytesTransferred);
+            Assert.assertEquals("Wrong streamSize", expectedSize, streamSize);
+            Assert.assertEquals("Wrong bytes", expectedBytes, bytesTransferred); 
+        }
+        
+    }
+}
