From 2bff4be4f58a70359154b9b5752074586ff3c852 Mon Sep 17 00:00:00 2001
From: Rahul Akolkar <rahul@apache.org>
Date: Mon, 7 Aug 2006 23:53:33 +0000
Subject: [PATCH] Allow the target of a transition to be omitted.

Variant of patch by: Sitthichai Rernglertpricha <sitthichai_rernglertpricha AT yahoo DOT com>

Also added a test case to ensure stay, self and regular transition behavior.

SCXML-14


git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/scxml/trunk@429516 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/commons/scxml/io/ModelUpdater.java |  3 ++
 .../commons/scxml/SCXMLExecutorTest.java      | 27 +++++++++-
 .../apache/commons/scxml/transitions-02.xml   | 51 +++++++++++++++++++
 3 files changed, 79 insertions(+), 2 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/scxml/transitions-02.xml

diff --git a/src/main/java/org/apache/commons/scxml/io/ModelUpdater.java b/src/main/java/org/apache/commons/scxml/io/ModelUpdater.java
index a8ca8de58..7aa655415 100644
--- a/src/main/java/org/apache/commons/scxml/io/ModelUpdater.java
+++ b/src/main/java/org/apache/commons/scxml/io/ModelUpdater.java
@@ -224,6 +224,9 @@ private static void updateParallel(final Parallel p, final Map targets)
     private static void updateTransition(final Transition t,
             final Map targets) throws ModelException {
         String next = t.getNext();
+        if (next == null) { // stay transition
+            return;
+        }
         TransitionTarget tt = t.getTarget();
         if (tt == null) {
             tt = (TransitionTarget) targets.get(next);
diff --git a/src/test/java/org/apache/commons/scxml/SCXMLExecutorTest.java b/src/test/java/org/apache/commons/scxml/SCXMLExecutorTest.java
index 1ee52d547..1353602dd 100644
--- a/src/test/java/org/apache/commons/scxml/SCXMLExecutorTest.java
+++ b/src/test/java/org/apache/commons/scxml/SCXMLExecutorTest.java
@@ -46,7 +46,7 @@ public static Test suite() {
 
     // Test data
     private URL microwave01jsp, microwave02jsp, microwave01jexl,
-        microwave02jexl, transitions01, send02;
+        microwave02jexl, transitions01, transitions02, send02;
     private SCXMLExecutor exec;
 
     /**
@@ -63,6 +63,8 @@ public void setUp() {
             getResource("org/apache/commons/scxml/env/jexl/microwave-02.xml");
         transitions01 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/transitions-01.xml");
+        transitions02 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/transitions-02.xml");
         send02 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/send-02.xml");
     }
@@ -72,7 +74,7 @@ public void setUp() {
      */
     public void tearDown() {
         microwave01jsp = microwave02jsp = microwave01jexl = microwave02jexl =
-            transitions01 = send02 = null;
+            transitions01 = transitions02 = send02 = null;
     }
 
     /**
@@ -123,6 +125,27 @@ public void testSCXMLExecutorTransitions01Sample() {
         }
     }
 
+    public void testSCXMLExecutorTransitions02Sample() {
+        exec = SCXMLTestHelper.getExecutor(transitions02);
+        assertNotNull(exec);
+        try {
+            Set currentStates = SCXMLTestHelper.fireEvent(exec, "ten.stay");
+            assertEquals(1, currentStates.size());
+            assertEquals("ten", ((State)currentStates.iterator().
+                next()).getId());
+            currentStates = SCXMLTestHelper.fireEvent(exec, "ten.self");
+            assertEquals(1, currentStates.size());
+            assertEquals("ten", ((State)currentStates.iterator().
+                next()).getId());
+            currentStates = SCXMLTestHelper.fireEvent(exec, "ten.done");
+            assertEquals(1, currentStates.size());
+            assertEquals("twenty", ((State)currentStates.iterator().
+                next()).getId());
+        } catch (Exception e) {
+            fail(e.getMessage());
+        }
+    }
+
     public void testSendTargettypeSCXMLSample() {
         exec = SCXMLTestHelper.getExecutor(send02);
         assertNotNull(exec);
diff --git a/src/test/java/org/apache/commons/scxml/transitions-02.xml b/src/test/java/org/apache/commons/scxml/transitions-02.xml
new file mode 100644
index 000000000..89a071510
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/transitions-02.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0"?>
+<!--
+   Copyright 2006 The Apache Software Foundation
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/SCXML"
+       version="1.0"
+       initialstate="ten">
+
+    <state id="ten">
+
+        <onentry>
+            <var name="foo" expr="1" />
+            <log expr="'Foo is:' + foo" />
+        </onentry>
+
+        <!-- stay transition -->
+        <transition event="ten.stay">
+            <assign name="foo" expr="foo + 1" />
+            <log expr="'Foo is:' + foo" />
+        </transition>
+
+        <!-- self transition -->
+        <transition event="ten.self" target="ten">
+            <assign name="foo" expr="foo + 1" />
+            <log expr="'Foo is:' + foo" />
+        </transition>
+
+        <!-- "regular" transition -->
+        <transition event="ten.done" target="twenty">
+            <assign name="foo" expr="foo + 1" />
+            <log expr="'Foo is:' + foo" />
+        </transition>
+
+    </state>
+
+    <state id="twenty" final="true" />
+
+</scxml>
+
