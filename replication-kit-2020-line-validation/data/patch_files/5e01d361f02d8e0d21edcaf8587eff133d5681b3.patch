From 5e01d361f02d8e0d21edcaf8587eff133d5681b3 Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <tn@apache.org>
Date: Sun, 21 Apr 2013 17:47:50 +0000
Subject: [PATCH] [COLLECTIONS-445] Ignore several failing tests when executing
 with IBM J9 VM 1.6.x due to a faulty TreeMap implementation.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1470322 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  4 +++
 .../bidimap/DualTreeBidiMap2Test.java         | 29 +++++++++++++++++-
 .../bidimap/DualTreeBidiMapTest.java          | 30 +++++++++++++++++--
 .../collections4/map/AbstractMapTest.java     |  2 +-
 .../map/TransformedSortedMapTest.java         | 29 ++++++++++++++++++
 5 files changed, 90 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index c5fdaa3650..754b6e3d8b 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -22,6 +22,10 @@
   <body>
 
   <release version="4.0" date="TBA" description="Next release">
+    <action issue="COLLECTIONS-445" dev="tn" type="fix">
+      Adapt and/or ignore several unit tests when run on a IBM J9 VM (specification version 1.6.0)
+      due to a faulty "java.util.TreeMap" implementation.
+    </action>
     <action issue="COLLECTIONS-422" dev="tn" type="add" due-to="Benoit Corne">
       Added method "CollectionUtils#permutations(Collection)" and class "PermutationIterator"
       to generate unordered permutations of a collection.
diff --git a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
index 9634e28a71..7549cd7071 100644
--- a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
+++ b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
@@ -154,9 +154,36 @@ public String getCompatibilityVersion() {
      */
     @Override
     public String[] ignoredTests() {
-        return new String[] {"DualTreeBidiMap2Test.bulkTestInverseMap.bulkTestInverseMap"};
+        String recursiveTest = "DualTreeBidiMap2Test.bulkTestInverseMap.bulkTestInverseMap";
+
+        // there are several bugs in the following JVM:
+        // IBM J9 VM build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr12-20121024_126067
+        // thus disabling tests related to these bugs
+        
+        final String vmName = System.getProperty("java.vm.name");
+        final String version = System.getProperty("java.version");
+        
+        if (vmName == null || version == null) {
+            return new String[] { recursiveTest };
+        }
+
+        if (vmName.equals("IBM J9 VM") && version.equals("1.6.0")) {
+            final String preSub = "DualTreeBidiMap2Test.bulkTestSubMap.bulkTestMap";
+            final String preTail = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMap";
+            return new String[] {
+                    recursiveTest,
+                    preSub + "EntrySet.testCollectionIteratorRemove",
+                    preSub + "Values.testCollectionIteratorRemove",
+                    preTail + "Values.testCollectionClear",
+                    preTail + "Values.testCollectionRemoveAll",
+                    preTail + "Values.testCollectionRetainAll"
+            };
+        } else {
+            return new String[] { recursiveTest };
+        }
     }
 
+
 //    public void testCreate() throws Exception {
 //        resetEmpty();
 //        writeExternalFormToDisk((java.io.Serializable) map, "src/test/resources/data/test/DualTreeBidiMap.emptyCollection.version4.Test2.obj");
diff --git a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMapTest.java b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMapTest.java
index e0546cdde0..ee2d718935 100644
--- a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMapTest.java
@@ -49,9 +49,35 @@ public DualTreeBidiMap<K, V> makeObject() {
      */
     @Override
     public String[] ignoredTests() {
-        return new String[] {"DualTreeBidiMapTest.bulkTestInverseMap.bulkTestInverseMap"};
+        String recursiveTest = "DualTreeBidiMapTest.bulkTestInverseMap.bulkTestInverseMap";
+
+        // there are several bugs in the following JVM:
+        // IBM J9 VM build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr12-20121024_126067
+        // thus disabling tests related to these bugs
+        
+        final String vmName = System.getProperty("java.vm.name");
+        final String version = System.getProperty("java.version");
+        
+        if (vmName == null || version == null) {
+            return new String[] { recursiveTest };
+        }
+
+        if (vmName.equals("IBM J9 VM") && version.equals("1.6.0")) {
+            final String preSub = "DualTreeBidiMapTest.bulkTestSubMap.bulkTestMap";
+            final String preTail = "DualTreeBidiMapTest.bulkTestTailMap.bulkTestMap";
+            return new String[] {
+                    recursiveTest,
+                    preSub + "EntrySet.testCollectionIteratorRemove",
+                    preSub + "Values.testCollectionIteratorRemove",
+                    preTail + "Values.testCollectionClear",
+                    preTail + "Values.testCollectionRemoveAll",
+                    preTail + "Values.testCollectionRetainAll"
+            };
+        } else {
+            return new String[] { recursiveTest };
+        }
     }
-    
+
 //    public void testCreate() throws Exception {
 //        resetEmpty();
 //        writeExternalFormToDisk((java.io.Serializable) map, "src/test/resources/data/test/DualTreeBidiMap.emptyCollection.version4.obj");
diff --git a/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java b/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java
index 9de9fcb5d6..4476bbbc6a 100644
--- a/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java
@@ -2001,7 +2001,7 @@ public void verifyValues() {
         
         // bug in IBM JDK: IBM J9 VM build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr12-20121024_126067
         // a call to values() on an empty map retrieved via TreeMap#headMap or tailMap
-        // will render the values view unusable: resulting in NullPointExceptions or missing values
+        // will render the values view unusable: resulting in NullPointerExceptions or missing values
         // it will also not recover, as the value view is cached internally
         values = getMap().values();
         
diff --git a/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java b/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java
index 0552daede0..7a8716ded9 100644
--- a/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java
@@ -46,6 +46,35 @@ public static Test suite() {
         return BulkTest.makeSuite(TransformedSortedMapTest.class);
     }
 
+    @Override
+    public String[] ignoredTests() {
+        // there are several bugs in the following JVM:
+        // IBM J9 VM build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr12-20121024_126067
+        // thus disabling tests related to these bugs
+        
+        final String vmName = System.getProperty("java.vm.name");
+        final String version = System.getProperty("java.version");
+        
+        if (vmName == null || version == null) {
+            return null;
+        }
+
+        if (vmName.equals("IBM J9 VM") && version.equals("1.6.0")) {
+            final String preSubMap = "TransformedSortedMapTest.bulkTestSubMap.bulkTestMap";
+            final String preTailMap = "TransformedSortedMapTest.bulkTestTailMap.bulkTestMap";
+            return new String[] {
+                    preSubMap + "EntrySet.testCollectionIteratorRemove",
+                    preSubMap + "KeySet.testCollectionRemove",
+                    preSubMap + "Values.testCollectionIteratorRemove",
+                    preTailMap + "Values.testCollectionClear",
+                    preTailMap + "Values.testCollectionRemoveAll",
+                    preTailMap + "Values.testCollectionRetainAll"
+            };
+        } else {
+            return null;
+        }
+    }
+
     //-----------------------------------------------------------------------
     @Override
     @SuppressWarnings("unchecked")
