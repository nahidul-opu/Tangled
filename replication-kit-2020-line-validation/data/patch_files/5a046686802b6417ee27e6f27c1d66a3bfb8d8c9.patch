From 5a046686802b6417ee27e6f27c1d66a3bfb8d8c9 Mon Sep 17 00:00:00 2001
From: Benedikt Ritter <britter@apache.org>
Date: Sun, 24 Feb 2013 12:10:13 +0000
Subject: [PATCH] [BEANUTILS-408] - MethodUtils.invokeMethod() throws
 NullPointerException when args==null

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@1449465 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  3 +++
 .../apache/commons/beanutils/MethodUtils.java | 17 +++++++++----
 .../beanutils/MethodUtilsTestCase.java        | 24 +++++++++++++++++++
 3 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4d06ed5d1..dfa0d5e68 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -40,6 +40,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
     <release version="1.8.4" date="in SVN" description="Bug fix for 1.8.3">
+      <action dev="britter" type="fix" issue="BEANUTILS-408" >
+         MethodUtils.invokeMethod() throws NullPointerException when args==null
+      </action>
       <action dev="britter" type="fix" issue="BEANUTILS-426" >
          ConstructorUtils.invokeConstructor(Class klass, Object arg) throws 
          NullPointerException when arg==null
diff --git a/src/main/java/org/apache/commons/beanutils/MethodUtils.java b/src/main/java/org/apache/commons/beanutils/MethodUtils.java
index 5af0c8fd2..9549d0c03 100644
--- a/src/main/java/org/apache/commons/beanutils/MethodUtils.java
+++ b/src/main/java/org/apache/commons/beanutils/MethodUtils.java
@@ -173,7 +173,7 @@ public static Object invokeMethod(
             IllegalAccessException,
             InvocationTargetException {
 
-        Object[] args = {arg};
+        Object[] args = toArray(arg);
         return invokeMethod(object, methodName, args);
     }
 
@@ -309,7 +309,7 @@ public static Object invokeExactMethod(
             IllegalAccessException,
             InvocationTargetException {
 
-        Object[] args = {arg};
+        Object[] args = toArray(arg);
         return invokeExactMethod(object, methodName, args);
     }
 
@@ -487,7 +487,7 @@ public static Object invokeStaticMethod(
             IllegalAccessException,
             InvocationTargetException {
 
-        Object[] args = {arg};
+        Object[] args = toArray(arg);
         return invokeStaticMethod (objectClass, methodName, args);
     }
 
@@ -626,11 +626,10 @@ public static Object invokeExactStaticMethod(
             IllegalAccessException,
             InvocationTargetException {
 
-        Object[] args = {arg};
+        Object[] args = toArray(arg);
         return invokeExactStaticMethod (objectClass, methodName, args);
     }
 
-
     /**
      * <p>Invoke a static method whose parameter types match exactly the object
      * types.</p>
@@ -671,6 +670,14 @@ public static Object invokeExactStaticMethod(
     }
 
 
+    private static Object[] toArray(Object arg) {
+        Object[] args = {arg};
+        if (arg == null) {
+            args = null;
+        }
+        return args;
+    }
+
     /**
      * <p>Return an accessible method (that is, one that can be invoked via
      * reflection) with given name and a single parameter.  If no such method
diff --git a/src/test/java/org/apache/commons/beanutils/MethodUtilsTestCase.java b/src/test/java/org/apache/commons/beanutils/MethodUtilsTestCase.java
index 7ad4f32d9..a02027f9d 100644
--- a/src/test/java/org/apache/commons/beanutils/MethodUtilsTestCase.java
+++ b/src/test/java/org/apache/commons/beanutils/MethodUtilsTestCase.java
@@ -185,6 +185,13 @@ public void testInvokeExactMethod() {
         }
     }
 
+    public void testInvokeExactMethodNull() throws Exception {
+        Object object = new Object();
+        Object result = MethodUtils.invokeExactMethod(object, "toString", (Object) null);
+        assertEquals(object.toString(), result);
+    }
+
+
     /**
      * <p> Test <code>invokeMethod</code>.
      */
@@ -261,6 +268,12 @@ public void testInvokeMethod() throws Exception {
         MethodUtils.invokeExactMethod(parent, "getName", null, null);
     }
 
+    public void testInvokeMethodNull() throws Exception {
+        Object object = new Object();
+        Object result = MethodUtils.invokeMethod(object, "toString", (Object) null);
+        assertEquals(object.toString(), result);
+    }
+
     /**
      * <p> Test <code>invokeMethod</code> with a primitive.
      */
@@ -328,6 +341,17 @@ public void testStaticInvokeMethod() throws Exception {
         assertEquals("currentCounter value", current, ((Integer) value).intValue());
     }
 
+    public void testInvokeStaticMethodNull() throws Exception {
+        int current = TestBean.currentCounter();
+        Object value = MethodUtils.invokeStaticMethod(TestBean.class, "currentCounter", (Object) null);
+        assertEquals("currentCounter value", current, ((Integer) value).intValue());
+    }
+
+    public void testInvokeExactStaticMethodNull() throws Exception {
+        int current = TestBean.currentCounter();
+        Object value = MethodUtils.invokeExactStaticMethod(TestBean.class, "currentCounter", (Object) null);
+        assertEquals("currentCounter value", current, ((Integer) value).intValue());
+    }
 
     /**
      * Simple tests for accessing static methods via invokeMethod().
