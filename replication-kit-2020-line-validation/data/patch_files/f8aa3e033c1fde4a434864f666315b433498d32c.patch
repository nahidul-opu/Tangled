From f8aa3e033c1fde4a434864f666315b433498d32c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@apache.org>
Date: Tue, 18 Jul 2006 22:03:00 +0000
Subject: [PATCH] COLLECTIONS-217 - Flat3Map - Fix setValue in MapIterator and
 EntrySetIterator to work correctly

git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@423264 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.html                            |   2 +-
 .../commons/collections/map/Flat3Map.java     |   6 +
 .../commons/collections/map/TestFlat3Map.java | 121 +++++++++++++++++-
 3 files changed, 127 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.html b/RELEASE-NOTES.html
index 7c4afd7536..65618bfba1 100644
--- a/RELEASE-NOTES.html
+++ b/RELEASE-NOTES.html
@@ -54,7 +54,7 @@
 
 <center><h3>BUG FIXES</h3></center>
 <ul>
-<li>xxxxxxxxxxxxxx</li>
+<li>Flat3Map - Fix setValue in MapIterator and EntrySetIterator to work correctly [COLLECTIONS-217]</li>
 </ul>
 
 <center><h3>JAVADOC</h3></center>
diff --git a/src/java/org/apache/commons/collections/map/Flat3Map.java b/src/java/org/apache/commons/collections/map/Flat3Map.java
index 8acc0021b1..a5083d29ca 100644
--- a/src/java/org/apache/commons/collections/map/Flat3Map.java
+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java
@@ -651,10 +651,13 @@ public Object setValue(Object value) {
             switch (nextIndex) {
                 case 3: 
                     parent.value3 = value;
+                    break;
                 case 2:
                     parent.value2 = value;
+                    break;
                 case 1:
                     parent.value1 = value;
+                    break;
             }
             return old;
         }
@@ -803,10 +806,13 @@ public Object setValue(Object value) {
             switch (nextIndex) {
                 case 3: 
                     parent.value3 = value;
+                    break;
                 case 2:
                     parent.value2 = value;
+                    break;
                 case 1:
                     parent.value1 = value;
+                    break;
             }
             return old;
         }
diff --git a/src/test/org/apache/commons/collections/map/TestFlat3Map.java b/src/test/org/apache/commons/collections/map/TestFlat3Map.java
index 437803075f..3f5d9776db 100644
--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java
+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.util.Iterator;
 import java.util.Map;
 
 import junit.framework.Test;
@@ -39,8 +40,10 @@ public class TestFlat3Map extends AbstractTestIterableMap {
 
     private static final Integer ONE = new Integer(1);
     private static final Integer TWO = new Integer(2);
+    private static final Integer THREE = new Integer(3);
     private static final String TEN = "10";
     private static final String TWENTY = "20";
+    private static final String THIRTY = "30";
         
     public TestFlat3Map(String testName) {
         super(testName);
@@ -207,7 +210,123 @@ public void testSerialisation4() throws Exception {
         assertEquals(ONE, ser.get(TEN));
         assertEquals(TWO, ser.get(TWENTY));
     }
-    
+
+    //-----------------------------------------------------------------------
+    public void testEntryIteratorSetValue1() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        Iterator it = map.entrySet().iterator();
+        Map.Entry entry = (Map.Entry) it.next();
+        entry.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals("NewValue", map.get(ONE));
+        assertEquals(TWENTY, map.get(TWO));
+        assertEquals(THIRTY, map.get(THREE));
+    }
+
+    public void testEntryIteratorSetValue2() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        Iterator it = map.entrySet().iterator();
+        it.next();
+        Map.Entry entry = (Map.Entry) it.next();
+        entry.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals(TEN, map.get(ONE));
+        assertEquals("NewValue", map.get(TWO));
+        assertEquals(THIRTY, map.get(THREE));
+    }
+
+    public void testEntryIteratorSetValue3() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        Iterator it = map.entrySet().iterator();
+        it.next();
+        it.next();
+        Map.Entry entry = (Map.Entry) it.next();
+        entry.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals(TEN, map.get(ONE));
+        assertEquals(TWENTY, map.get(TWO));
+        assertEquals("NewValue", map.get(THREE));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMapIteratorSetValue1() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        MapIterator it = map.mapIterator();
+        it.next();
+        it.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals("NewValue", map.get(ONE));
+        assertEquals(TWENTY, map.get(TWO));
+        assertEquals(THIRTY, map.get(THREE));
+    }
+
+    public void testMapIteratorSetValue2() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        MapIterator it = map.mapIterator();
+        it.next();
+        it.next();
+        it.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals(TEN, map.get(ONE));
+        assertEquals("NewValue", map.get(TWO));
+        assertEquals(THIRTY, map.get(THREE));
+    }
+
+    public void testMapIteratorSetValue3() throws Exception {
+        Flat3Map map = new Flat3Map();
+        map.put(ONE, TEN);
+        map.put(TWO, TWENTY);
+        map.put(THREE, THIRTY);
+        
+        MapIterator it = map.mapIterator();
+        it.next();
+        it.next();
+        it.next();
+        it.setValue("NewValue");
+        assertEquals(3, map.size());
+        assertEquals(true, map.containsKey(ONE));
+        assertEquals(true, map.containsKey(TWO));
+        assertEquals(true, map.containsKey(THREE));
+        assertEquals(TEN, map.get(ONE));
+        assertEquals(TWENTY, map.get(TWO));
+        assertEquals("NewValue", map.get(THREE));
+    }
+
     //-----------------------------------------------------------------------
     public BulkTest bulkTestMapIterator() {
         return new TestFlatMapIterator();
