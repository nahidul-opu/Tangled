From 1f696bb27bd7045f6361f4ab6f131e60a7d52ee2 Mon Sep 17 00:00:00 2001
From: Sebastian Bazley <sebb@apache.org>
Date: Mon, 26 Nov 2012 10:34:50 +0000
Subject: [PATCH] NET-46 retrieveFileStream fails randomly or hangs

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/net/trunk@1413545 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                        |  3 +++
 .../org/apache/commons/net/ftp/FTPClient.java  | 18 ++++++++++++++----
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a347e42be..a8b33a41c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -66,6 +66,9 @@ The <action> type attribute can be add,update,fix,remove.
 This release fixes bugs and adds some new functionality (see below).
  It is binary compatible with previous releases.
         ">
+            <action issue="NET-46" dev="sebb" type="fix">
+            retrieveFileStream fails randomly or hangs
+            </action>
             <action issue="NET-485" dev="sebb" type="fix">
             Remove unnecessary Base64 methods.
             </action>
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index 7b9837569..fd2df13bc 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -773,6 +773,11 @@ protected Socket _openDataConnection_(String command, String arg)
                     server.setSoTimeout(__dataTimeout);
                 }
                 socket = server.accept();
+                
+                // Ensure the timeout is set before any commands are issued on the new socket
+                if (__dataTimeout >= 0) {
+                    socket.setSoTimeout(__dataTimeout);
+                }
             } finally {
                 server.close();
             }
@@ -808,6 +813,15 @@ protected Socket _openDataConnection_(String command, String arg)
             if (__passiveLocalHost != null) {
                 socket.bind(new InetSocketAddress(__passiveLocalHost, 0));
             }
+
+            // For now, let's just use the data timeout value for waiting for
+            // the data connection.  It may be desirable to let this be a
+            // separately configurable value.  In any case, we really want
+            // to allow preventing the accept from blocking indefinitely.
+            if (__dataTimeout >= 0) {
+                socket.setSoTimeout(__dataTimeout);
+            }
+
             socket.connect(new InetSocketAddress(__passiveHost, __passivePort), connectTimeout);
             if ((__restartOffset > 0) && !restart(__restartOffset))
             {
@@ -831,10 +845,6 @@ protected Socket _openDataConnection_(String command, String arg)
                     " is not same as server " + getRemoteAddress().getHostAddress());
         }
 
-        if (__dataTimeout >= 0) {
-            socket.setSoTimeout(__dataTimeout);
-        }
-
         if ( __bufferSize > 0 ) {
             socket.setReceiveBufferSize(__bufferSize);
             socket.setSendBufferSize(__bufferSize);
