From 487ac1980148522d628e1d2aab50b107c372798b Mon Sep 17 00:00:00 2001
From: Thomas Neidhart <thomas.neidhart@gmail.com>
Date: Mon, 23 Nov 2015 23:13:10 +0100
Subject: [PATCH] =?UTF-8?q?[MATH-1294]=20Fix=20potential=20race=20conditio?=
 =?UTF-8?q?n=20in=20PolynomialUtils.=20Thanks=20to=20Kamil=20W=C5=82odarcz?=
 =?UTF-8?q?yk?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/changes/changes.xml                                      | 5 +++++
 .../commons/math4/analysis/polynomials/PolynomialsUtils.java | 4 ++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 74341f0647..fc75ddcd9d 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -54,6 +54,11 @@ If the output is not quite correct, check for invisible trailing spaces!
     </release>
 
     <release version="4.0" date="XXXX-XX-XX" description="">
+      <action dev="tn" type="fix" issue="MATH-1294" due-to="Kamil WÅ‚odarczyk"> <!-- backported to 3.6 -->
+        Fixed potential race condition in PolynomialUtils#buildPolynomial in
+        case polynomials are generated from multiple threads. Furthermore, the
+        synchronization is now performed on the coefficient list instead of the class.
+      </action>
       <action dev="psteitz" type="update" issue="MATH-1246">
         Added bootstrap method to 2-sample KolmogorovSmirnovTest.
       </action>
diff --git a/src/main/java/org/apache/commons/math4/analysis/polynomials/PolynomialsUtils.java b/src/main/java/org/apache/commons/math4/analysis/polynomials/PolynomialsUtils.java
index 8574b86564..346644e9e0 100644
--- a/src/main/java/org/apache/commons/math4/analysis/polynomials/PolynomialsUtils.java
+++ b/src/main/java/org/apache/commons/math4/analysis/polynomials/PolynomialsUtils.java
@@ -365,8 +365,8 @@ private static PolynomialFunction buildPolynomial(final int degree,
                                                       final List<BigFraction> coefficients,
                                                       final RecurrenceCoefficientsGenerator generator) {
 
-        final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
-        synchronized (PolynomialsUtils.class) {
+        synchronized (coefficients) {
+            final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
             if (degree > maxDegree) {
                 computeUpToDegree(degree, maxDegree, generator, coefficients);
             }
