From 16e434606776d7961f8b67b7d1062e15f23facf0 Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Thu, 20 Jul 2017 01:33:56 +0000
Subject: [PATCH] [VFS-291] ZIP archives are not properly closed after
 unzipping and cannot be deleted until the JVM exists.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1802443 13f79535-47bb-0310-9956-ffa450edef68
---
 .../vfs2/provider/zip/ZipFileObject.java      |  10 ++
 .../provider/zip/test/FileLockTestCase.java   | 112 +++++++++++++++---
 src/changes/changes.xml                       |   3 +
 3 files changed, 109 insertions(+), 16 deletions(-)

diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
index 305ef00bbe..74bbccd7c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
@@ -168,4 +168,14 @@ protected InputStream doGetInputStream() throws Exception
 
         return getAbstractFileSystem().getZipFile().getInputStream(entry);
     }
+
+    @Override
+    protected void doAttach() throws Exception {
+        getAbstractFileSystem().getZipFile();
+    }
+
+    @Override
+    protected void doDetach() throws Exception {
+        getAbstractFileSystem().close();
+    }
 }
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/zip/test/FileLockTestCase.java b/core/src/test/java/org/apache/commons/vfs2/provider/zip/test/FileLockTestCase.java
index 14ccd486ad..ba4215ab6b 100644
--- a/core/src/test/java/org/apache/commons/vfs2/provider/zip/test/FileLockTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/zip/test/FileLockTestCase.java
@@ -19,14 +19,16 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
 
 import org.apache.commons.AbstractVfsTestCase;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemManager;
 import org.apache.commons.vfs2.VFS;
 import org.junit.Assert;
-import org.junit.Ignore;
+import org.junit.Before;
 import org.junit.Test;
 
 /**
@@ -34,30 +36,108 @@
  */
 public class FileLockTestCase {
 
-    /**
-     * This test checks whether we can modify an underlying zip file after we have performed IO operations on files
-     * within it, but although we no longer have any FileObjects explicitely open.
-     * 
-     * @throws IOException
-     */
-    @Test
-    @Ignore
-    public void testResourcesReleasedByZipFileProvider() throws Exception {
-        FileSystemManager manager = VFS.getManager();
+    private FileSystemManager manager;
+    private File newZipFile;
+
+    private String uri;
+
+    private void assertDelete() {
+        // We do not use newZipFile in the Assert message to avoid touching it before calling delete().
+        Assert.assertTrue("Could not delete file", newZipFile.delete());
+    }
+
+    private void resolveAndOpenCloseContent() throws FileSystemException {
+        try (final FileObject zipFileObject = manager.resolveFile(uri)) {
+            zipFileObject.getContent().close();
+        }
+    }
+
+    public void resolveAndOpenCloseInputStream() throws IOException, FileSystemException {
+        try (final FileObject zipFileObject = manager.resolveFile(uri)) {
+            zipFileObject.getContent().getInputStream().close();
+        }
+    }
+
+    @Before
+    public void setup() throws IOException {
         //
         // We copy the normal test zip to a second, nominally temporary, file so that we can try to delete it with
         // impunity. Since the test fails, the file will be left behind, so it should probably be created in a temporary
         // directory somewhere.
         //
         final File zipFile = new File("src/test/resources/test-data/test.zip");
-        final File newZipFile = new File(AbstractVfsTestCase.getTestDirectory(), "test2.zip");
+        newZipFile = new File(AbstractVfsTestCase.getTestDirectory(), "test2.zip");
         FileUtils.copyFile(zipFile, newZipFile);
+        uri = "zip:file:" + newZipFile.getAbsolutePath() + "!/read-tests/file1.txt";
+        manager = VFS.getManager();
+    }
 
-        final String uri = "zip:file:" + newZipFile.getAbsolutePath() + "!/read-tests/file1.txt";
-        try (final FileObject fileOne = manager.resolveFile(uri)) {
-            fileOne.getContent().getInputStream().close();
+    @Test
+    public void testCannotDeleteWhileStreaming() throws Exception {
+        try (final FileObject zipFileObject = manager.resolveFile(uri)) {
+            try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {
+                // We do not use newZipFile in the Assert message to avoid touching it before calling delete().
+                Assert.assertFalse("Could not delete file", newZipFile.delete());
+            }
         }
+        assertDelete();
+    }
 
-        Assert.assertTrue("Could not delete file", newZipFile.delete());
+    @Test
+    public void testCannotDeleteWhileStreaming2() throws Exception {
+        try (final FileObject zipFileObject = manager.resolveFile(uri)) {
+            try (InputStream inputStream = zipFileObject.getContent().getInputStream()) {
+                // We do not use newZipFile in the Assert message to avoid touching it before calling delete().
+                Assert.assertFalse("Could not delete file", newZipFile.delete());
+            }
+        }
     }
+
+    @Test
+    public void testContent() throws Exception {
+        resolveAndOpenCloseContent();
+        assertDelete();
+    }
+
+    @Test
+    public void testContent3() throws Exception {
+        resolveAndOpenCloseContent();
+        resolveAndOpenCloseContent();
+        resolveAndOpenCloseContent();
+
+        assertDelete();
+    }
+
+    /**
+     * This test checks whether we can modify an underlying zip file after we have performed IO operations on files
+     * within it, but although we no longer have any FileObjects explicitely open.
+     * 
+     * @throws IOException
+     */
+    @Test
+    public void testInputStream() throws Exception {
+        resolveAndOpenCloseInputStream();
+        assertDelete();
+    }
+
+    @Test
+    public void testInputStream3() throws Exception {
+        resolveAndOpenCloseInputStream();
+        resolveAndOpenCloseInputStream();
+        resolveAndOpenCloseInputStream();
+
+        assertDelete();
+    }
+
+    @Test
+    public void testNestedInputStreams() throws Exception {
+        try (final FileObject zipFileObject = manager.resolveFile(uri)) {
+            try (final FileObject zipFileObject2 = manager.resolveFile(uri)) {
+                zipFileObject2.getContent().getInputStream().close();
+            }
+            zipFileObject.getContent().getInputStream().close();
+        }
+        assertDelete();
+    }
+
 }
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index ccec815e84..932d899760 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -77,6 +77,9 @@ The <action> type attribute can be add,update,fix,remove.
      <action issue="VFS-620" dev="ggregory" type="fix" due-to="stevezhuang">
         FileObject.moveTo(FileObject) API doesn't work well for a Linux FTP.
      </action>
+     <action issue="VFS-291" dev="ggregory" type="fix">
+        ZIP archives are not properly closed after unzipping and cannot be deleted until the JVM exists.
+     </action>
    </release>  
     <release version="2.1" date="2016-05-19" description="New features and bug fix release.
 
