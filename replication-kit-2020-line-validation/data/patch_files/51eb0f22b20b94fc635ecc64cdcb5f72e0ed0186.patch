From 51eb0f22b20b94fc635ecc64cdcb5f72e0ed0186 Mon Sep 17 00:00:00 2001
From: Stefan Bodewig <bodewig@apache.org>
Date: Fri, 5 Feb 2016 18:08:51 +0100
Subject: [PATCH] COMPRESS-330 ignore non-zero size for directories

---
 .../archivers/tar/TarArchiveInputStream.java        | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 41acf2af565..118bf7a2f33 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -178,6 +178,9 @@ public int getRecordSize() {
      */
     @Override
     public int available() throws IOException {
+        if (isDirectory()) {
+            return 0;
+        }
         if (entrySize - entryOffset > Integer.MAX_VALUE) {
             return Integer.MAX_VALUE;
         }
@@ -203,7 +206,7 @@ public int available() throws IOException {
      */
     @Override
     public long skip(final long n) throws IOException {
-        if (n <= 0) {
+        if (n <= 0 || isDirectory()) {
             return 0;
         }
 
@@ -329,7 +332,7 @@ public TarArchiveEntry getNextTarEntry() throws IOException {
      * additional space used to fill a record after an entry
      */
     private void skipRecordPadding() throws IOException {
-        if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {
+        if (!isDirectory() && this.entrySize > 0 && this.entrySize % this.recordSize != 0) {
             long numRecords = (this.entrySize / this.recordSize) + 1;
             long padding = (numRecords * this.recordSize) - this.entrySize;
             long skipped = IOUtils.skip(is, padding);
@@ -546,6 +549,10 @@ private void readGNUSparse() throws IOException {
         }
     }
 
+    private boolean isDirectory() {
+        return currEntry != null && currEntry.isDirectory();
+    }
+
     /**
      * Returns the next Archive Entry in this Stream.
      *
@@ -601,7 +608,7 @@ private void tryToConsumeSecondEOFRecord() throws IOException {
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
-        if (hasHitEOF || entryOffset >= entrySize) {
+        if (hasHitEOF || isDirectory() || entryOffset >= entrySize) {
             return -1;
         }
 
