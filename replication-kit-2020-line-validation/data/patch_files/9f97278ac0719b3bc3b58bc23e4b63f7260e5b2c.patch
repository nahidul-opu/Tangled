From 9f97278ac0719b3bc3b58bc23e4b63f7260e5b2c Mon Sep 17 00:00:00 2001
From: Henning Schmiedehausen <henning@apache.org>
Date: Mon, 21 Oct 2013 07:29:03 +0000
Subject: [PATCH] [CONFIGURATION-557] Regression: MapConfiguration no longer
 accepts a Map<String, String>

In 1.7 and before, it was possible to pass an arbitrary Map into the
constructor of MapConfiguration. With the generification in 1.8, this
actually broke and it was no longer possible to pass in e.g. a
Map<String, String> because the signature now required a Map<String,
Object>. Changing the constructor to accept a Map<String, ?> restores
this.

All of this is purely a compiler issue, the runtime itself does not
see any of the generics due to the Java type erasure.



git-svn-id: https://svn.apache.org/repos/asf/commons/proper/configuration/branches/CONFIGURATION_1_X_MAINTENANCE@1534048 13f79535-47bb-0310-9956-ffa450edef68
---
 RELEASE-NOTES.txt                             |  8 ++++
 .../configuration/MapConfiguration.java       |  4 +-
 .../TestMapConfigurationRegression.java       | 39 +++++++++++++++++++
 3 files changed, 49 insertions(+), 2 deletions(-)
 create mode 100644 src/test/java/org/apache/commons/configuration/TestMapConfigurationRegression.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 73e64edae2..af8644357d 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -37,7 +37,15 @@ BUG FIXES IN 1.10
   SystemConfiguration object. This behaviour broke in 1.8 and 1.9. This has been fixed
   for 1.10.
 
+* [CONFIGURATION-557] Regression: MapConfiguration no longer accepts a Map<String, String>
 
+  In 1.7 and before, it was possible to pass an arbitrary Map into the constructor of 
+  MapConfiguration. With the generification in 1.8, this actually broke and it was no longer
+  possible to pass in e.g. a Map<String, String> because the signature now required a 
+  Map<String, Object>. Changing the constructor to accept a Map<String, ?> restores this.
+
+  All of this is purely a compiler issue, the runtime itself does not see any of the generics
+  due to the Java type erasure. 
 
 IMPROVEMENTS AND NEW FEATURES IN 1.10
 =====================================
diff --git a/src/main/java/org/apache/commons/configuration/MapConfiguration.java b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
index f5be5b512f..e815283b6e 100644
--- a/src/main/java/org/apache/commons/configuration/MapConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
@@ -104,9 +104,9 @@ public class MapConfiguration extends AbstractConfiguration implements Cloneable
      *
      * @param map the map
      */
-    public MapConfiguration(Map<String, Object> map)
+    public MapConfiguration(Map<String, ?> map)
     {
-        this.map = map;
+        this.map = (Map<String, Object>) map;
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/configuration/TestMapConfigurationRegression.java b/src/test/java/org/apache/commons/configuration/TestMapConfigurationRegression.java
new file mode 100644
index 0000000000..124df61c41
--- /dev/null
+++ b/src/test/java/org/apache/commons/configuration/TestMapConfigurationRegression.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.configuration;
+
+import java.util.Collections;
+import java.util.Map;
+import java.util.UUID;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestMapConfigurationRegression
+{
+    @Test
+    public void testMapConfigurationRegression()
+    {
+        final String key = UUID.randomUUID().toString();
+        final String value = UUID.randomUUID().toString();
+        final Map<String, String> map = Collections.singletonMap(key, value);
+        final MapConfiguration mc = new MapConfiguration(map);
+        Assert.assertEquals(1, mc.getMap().size());
+        Assert.assertEquals(value, mc.getString(key));
+    }
+}
