From 312c2518aaaa70bf76ccbe2b719c51e93d46bc50 Mon Sep 17 00:00:00 2001
From: Maarten Coene <maartenc@apache.org>
Date: Thu, 1 Oct 2009 22:44:26 +0000
Subject: [PATCH] FIX: SearchEngine.listModules returns MRID without extra
 attributes (IVY-1128) (thanks to Michael Scheetz)

git-svn-id: https://svn.apache.org/repos/asf/ant/ivy/core/trunk@820829 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES.txt                                   |  1 +
 .../apache/ivy/core/search/SearchEngine.java  | 52 +++++++++++++++----
 .../apache/ivy/core/search/SearchTest.java    | 32 ++++++++++++
 test/repositories/IVY-1128/ivysettings.xml    | 27 ++++++++++
 .../test/a/extraatt/extraatt2/ivy-1.xml       | 22 ++++++++
 .../test/a/extraatt/extraatt2/ivy-2.xml       | 22 ++++++++
 6 files changed, 146 insertions(+), 10 deletions(-)
 create mode 100644 test/repositories/IVY-1128/ivysettings.xml
 create mode 100644 test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-1.xml
 create mode 100644 test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-2.xml

diff --git a/CHANGES.txt b/CHANGES.txt
index adfd5475d..932145d67 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -94,6 +94,7 @@ for detailed view of each issue, please consult http://issues.apache.org/jira/br
 	
    trunk
 =====================================
+- FIX: SearchEngine.listModules returns MRID without extra attributes (IVY-1128) (thanks to Michael Scheetz)
 - FIX: IvyBuildNumber non-deterministic behaviour (IVY-1120)
 - FIX: Change spelling of 'occured' to 'occurred' (IVY-1123)
 - FIX: Ivy deliver fails to replace dynamic revision when using extra attributes (IVY-1111) (thanks to Michael Scheetz)
diff --git a/src/java/org/apache/ivy/core/search/SearchEngine.java b/src/java/org/apache/ivy/core/search/SearchEngine.java
index 9deb24989..027f54014 100644
--- a/src/java/org/apache/ivy/core/search/SearchEngine.java
+++ b/src/java/org/apache/ivy/core/search/SearchEngine.java
@@ -233,10 +233,9 @@ public ModuleRevisionId[] listModules(ModuleRevisionId moduleCrit, PatternMatche
         addMatcher(matcher, moduleCrit.getName(), criteria, IvyPatternHelper.MODULE_KEY);
         addMatcher(matcher, moduleCrit.getBranch(), criteria, IvyPatternHelper.BRANCH_KEY);
         addMatcher(matcher, moduleCrit.getRevision(), criteria, IvyPatternHelper.REVISION_KEY);
-        
-        String[] tokensToList = new String[] {
-                IvyPatternHelper.ORGANISATION_KEY, IvyPatternHelper.MODULE_KEY, 
-                IvyPatternHelper.BRANCH_KEY, IvyPatternHelper.REVISION_KEY};
+
+        String[] tokensToList = (String[]) moduleCrit.getAttributes().keySet().toArray(
+                    new String[moduleCrit.getAttributes().size()]);
 
         for (Iterator iter = settings.getResolvers().iterator(); iter.hasNext();) {
             DependencyResolver resolver = (DependencyResolver) iter.next();
@@ -246,7 +245,24 @@ public ModuleRevisionId[] listModules(ModuleRevisionId moduleCrit, PatternMatche
                 String name = (String) moduleIdAsMap[i].get(IvyPatternHelper.MODULE_KEY);
                 String branch = (String) moduleIdAsMap[i].get(IvyPatternHelper.BRANCH_KEY);
                 String rev = (String) moduleIdAsMap[i].get(IvyPatternHelper.REVISION_KEY);
-                ModuleRevisionId modRevId = ModuleRevisionId.newInstance(org, name, branch, rev);
+                
+                Map foundExtraAtts = new HashMap();
+                for (Iterator iter2 = moduleCrit.getQualifiedExtraAttributes().keySet().iterator(); iter2.hasNext(); ) {
+                    String qualifiedKey = (String) iter2.next();
+                    String value = null;
+                    int colonIndex = qualifiedKey.indexOf(':');
+                    if (colonIndex == -1) {
+                        value = (String) moduleIdAsMap[i].get(qualifiedKey);
+                    } else {
+                        value = (String) moduleIdAsMap[i].get(qualifiedKey.substring(colonIndex + 1));
+                    }
+
+                    if (value != null) {
+                        foundExtraAtts.put(qualifiedKey, value);
+                    }
+                }
+                
+                ModuleRevisionId modRevId = ModuleRevisionId.newInstance(org, name, branch, rev, foundExtraAtts);
                 ret.add(resolver.getNamespace().getToSystemTransformer().transform(modRevId));
             }
         }
@@ -274,9 +290,8 @@ public ModuleRevisionId[] listModules(
         addMatcher(matcher, moduleCrit.getBranch(), criteria, IvyPatternHelper.BRANCH_KEY);
         addMatcher(matcher, moduleCrit.getRevision(), criteria, IvyPatternHelper.REVISION_KEY);
         
-        String[] tokensToList = new String[] {
-                IvyPatternHelper.ORGANISATION_KEY, IvyPatternHelper.MODULE_KEY, 
-                IvyPatternHelper.BRANCH_KEY, IvyPatternHelper.REVISION_KEY};
+        String[] tokensToList = (String[]) moduleCrit.getAttributes().keySet().toArray(
+            new String[moduleCrit.getAttributes().size()]);
 
         Map[] moduleIdAsMap = resolver.listTokenValues(tokensToList, criteria);
         Set result = new LinkedHashSet(); // we use a Set to remove duplicates
@@ -285,8 +300,25 @@ public ModuleRevisionId[] listModules(
             String name = (String) moduleIdAsMap[i].get(IvyPatternHelper.MODULE_KEY);
             String branch = (String) moduleIdAsMap[i].get(IvyPatternHelper.BRANCH_KEY);
             String rev = (String) moduleIdAsMap[i].get(IvyPatternHelper.REVISION_KEY);
-            result.add(resolver.getNamespace().getToSystemTransformer().transform(
-                ModuleRevisionId.newInstance(org, name, branch, rev)));
+            
+            Map foundExtraAtts = new HashMap();
+            for (Iterator iter2 = moduleCrit.getQualifiedExtraAttributes().keySet().iterator(); iter2.hasNext(); ) {
+                String qualifiedKey = (String) iter2.next();
+                String value = null;
+                int colonIndex = qualifiedKey.indexOf(':');
+                if (colonIndex == -1) {
+                    value = (String) moduleIdAsMap[i].get(qualifiedKey);
+                } else {
+                    value = (String) moduleIdAsMap[i].get(qualifiedKey.substring(colonIndex + 1));
+                }
+
+                if (value != null) {
+                    foundExtraAtts.put(qualifiedKey, value);
+                }
+            }
+            
+            ModuleRevisionId modRevId = ModuleRevisionId.newInstance(org, name, branch, rev, foundExtraAtts);
+            result.add(resolver.getNamespace().getToSystemTransformer().transform(modRevId));
         }
         
         return (ModuleRevisionId[]) result.toArray(new ModuleRevisionId[result.size()]);
diff --git a/test/java/org/apache/ivy/core/search/SearchTest.java b/test/java/org/apache/ivy/core/search/SearchTest.java
index 147b542ed..2fc4e8e88 100644
--- a/test/java/org/apache/ivy/core/search/SearchTest.java
+++ b/test/java/org/apache/ivy/core/search/SearchTest.java
@@ -18,6 +18,8 @@
 package org.apache.ivy.core.search;
 
 import java.io.File;
+import java.io.IOException;
+import java.text.ParseException;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -27,6 +29,9 @@
 
 import org.apache.ivy.Ivy;
 import org.apache.ivy.core.IvyPatternHelper;
+import org.apache.ivy.core.module.id.ModuleRevisionId;
+import org.apache.ivy.core.settings.IvySettings;
+import org.apache.ivy.plugins.matcher.PatternMatcher;
 import org.apache.ivy.plugins.resolver.IBiblioResolver;
 
 public class SearchTest extends TestCase {
@@ -58,4 +63,31 @@ public void testListInMavenRepo2() throws Exception {
             new HashSet(Arrays.asList(new String[] {"1.0","1.1","1.2"})), 
             new HashSet(Arrays.asList(revs)));
     }
+
+    public void testListModulesWithExtraAttributes() throws ParseException, IOException {
+        Ivy ivy = Ivy.newInstance();
+        ivy.configure(new File("test/repositories/IVY-1128/ivysettings.xml"));
+        IvySettings settings = ivy.getSettings();
+
+        Map extendedAttributes = new HashMap();
+        extendedAttributes.put("e:att1","extraatt");
+        extendedAttributes.put("e:att2","extraatt2");
+        ModuleRevisionId criteria = ModuleRevisionId.newInstance("test", "a", "*", extendedAttributes);
+
+        ModuleRevisionId[] mrids = ivy.listModules(criteria, settings.getMatcher(PatternMatcher.REGEXP));
+
+        assertEquals(2, mrids.length);
+        ModuleRevisionId mrid = mrids[0];
+        assertEquals("extraatt", mrid.getExtraAttribute("att1"));
+
+        Map extraAttributes = mrid.getExtraAttributes();
+        assertEquals(2, extraAttributes.size());
+        assertTrue(extraAttributes.toString(), extraAttributes.keySet().contains("att1"));
+        assertTrue(extraAttributes.toString(), extraAttributes.keySet().contains("att2"));
+
+        Map qualifiedExtraAttributes = mrid.getQualifiedExtraAttributes();
+        assertEquals(2, qualifiedExtraAttributes.size());
+        assertTrue(qualifiedExtraAttributes.toString(), qualifiedExtraAttributes.keySet().contains("e:att1"));
+        assertTrue(qualifiedExtraAttributes.toString(), qualifiedExtraAttributes.keySet().contains("e:att2"));
+    }
 }
diff --git a/test/repositories/IVY-1128/ivysettings.xml b/test/repositories/IVY-1128/ivysettings.xml
new file mode 100644
index 000000000..422488f85
--- /dev/null
+++ b/test/repositories/IVY-1128/ivysettings.xml
@@ -0,0 +1,27 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.
+-->
+<ivysettings>
+   <settings defaultResolver="local" />
+   <resolvers>
+        <filesystem name="local" >
+            <ivy pattern="${ivy.settings.dir}/[organisation]/[module]/[att1]/[att2]/ivy-[revision].xml"/>
+            <artifact pattern="${ivy.settings.dir}/[organisation]/[module]/[att1]/[att2]/[artifact]-[revision].[ext]"/>
+        </filesystem>
+    </resolvers>
+</ivysettings>
diff --git a/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-1.xml b/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-1.xml
new file mode 100644
index 000000000..b1c037b26
--- /dev/null
+++ b/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-1.xml
@@ -0,0 +1,22 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
+<ivy-module version="1.4" xmlns:e="http://ant.apache.org/ivy/extra">
+   <info organisation="test" module="a" revision="1" status="integration" publication="20090108103716" e:att1="extraatt" e:att2="extraatt2"/>
+   <publications/>
+</ivy-module>
diff --git a/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-2.xml b/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-2.xml
new file mode 100644
index 000000000..38da29f5b
--- /dev/null
+++ b/test/repositories/IVY-1128/test/a/extraatt/extraatt2/ivy-2.xml
@@ -0,0 +1,22 @@
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one
+   or more contributor license agreements.  See the NOTICE file
+   distributed with this work for additional information
+   regarding copyright ownership.  The ASF licenses this file
+   to you under the Apache License, Version 2.0 (the
+   "License"); you may not use this file except in compliance
+   with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing,
+   software distributed under the License is distributed on an
+   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+   KIND, either express or implied.  See the License for the
+   specific language governing permissions and limitations
+   under the License.    
+-->
+<ivy-module version="1.4" xmlns:e="http://ant.apache.org/ivy/extra">
+   <info organisation="test" module="a" revision="2" status="integration" publication="20090108103716" e:att1="extraatt" e:att2="extraatt2"/>
+   <publications/>
+</ivy-module>
