From 5c13fa7579650c2cbcab61c6b18e509951f640aa Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Fri, 30 May 2008 19:12:01 +0000
Subject: [PATCH] IO-167 Fix case-insensitive string handling - thanks to
 Benjamin Bentmann

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@661822 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/io/FilenameUtils.java  |  8 +--
 src/java/org/apache/commons/io/IOCase.java    | 41 ++++++++----
 .../io/FilenameUtilsWildcardTestCase.java     | 30 +++++++++
 .../org/apache/commons/io/IOCaseTestCase.java | 64 +++++++++++++++++++
 4 files changed, 124 insertions(+), 19 deletions(-)

diff --git a/src/java/org/apache/commons/io/FilenameUtils.java b/src/java/org/apache/commons/io/FilenameUtils.java
index c4a5a4708de..d0fdae2b4c0 100644
--- a/src/java/org/apache/commons/io/FilenameUtils.java
+++ b/src/java/org/apache/commons/io/FilenameUtils.java
@@ -1146,8 +1146,6 @@ public static boolean wildcardMatch(String filename, String wildcardMatcher, IOC
         if (caseSensitivity == null) {
             caseSensitivity = IOCase.SENSITIVE;
         }
-        filename = caseSensitivity.convertCase(filename);
-        wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);
         String[] wcs = splitOnTokens(wildcardMatcher);
         boolean anyChars = false;
         int textIdx = 0;
@@ -1182,18 +1180,18 @@ public static boolean wildcardMatch(String filename, String wildcardMatcher, IOC
                     // matching text token
                     if (anyChars) {
                         // any chars then try to locate text token
-                        textIdx = filename.indexOf(wcs[wcsIdx], textIdx);
+                        textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);
                         if (textIdx == -1) {
                             // token not found
                             break;
                         }
-                        int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);
+                        int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);
                         if (repeat >= 0) {
                             backtrack.push(new int[] {wcsIdx, repeat});
                         }
                     } else {
                         // matching from current position
-                        if (!filename.startsWith(wcs[wcsIdx], textIdx)) {
+                        if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {
                             // couldnt match token
                             break;
                         }
diff --git a/src/java/org/apache/commons/io/IOCase.java b/src/java/org/apache/commons/io/IOCase.java
index 658859e49e8..fde1a358830 100644
--- a/src/java/org/apache/commons/io/IOCase.java
+++ b/src/java/org/apache/commons/io/IOCase.java
@@ -196,33 +196,46 @@ public boolean checkEndsWith(String str, String end) {
     }
 
     /**
-     * Checks if one string contains another at a specific index using the case-sensitivity rule.
+     * Checks if one string contains another starting at a specific index using the
+     * case-sensitivity rule.
      * <p>
-     * This method mimics parts of {@link String#regionMatches(boolean, int, String, int, int)} 
+     * This method mimics parts of {@link String#indexOf(String, int)} 
      * but takes case-sensitivity into account.
      * 
      * @param str  the string to check, not null
      * @param strStartIndex  the index to start at in str
      * @param search  the start to search for, not null
-     * @return true if equal using the case rules
+     * @return the first index of the search String,
+     *  -1 if no match or <code>null</code> string input
      * @throws NullPointerException if either string is null
+     * @since 2.0
      */
-    public boolean checkRegionMatches(String str, int strStartIndex, String search) {
-        return str.regionMatches(!sensitive, strStartIndex, search, 0, search.length());
+    public int checkIndexOf(String str, int strStartIndex, String search) {
+        int endIndex = str.length() - search.length();
+        if (endIndex >= strStartIndex) {
+            for (int i = strStartIndex; i <= endIndex; i++) {
+                if (checkRegionMatches(str, i, search)) {
+                    return i;
+                }
+            }
+        }
+        return -1;
     }
 
     /**
-     * Converts the case of the input String to a standard format.
-     * Subsequent operations can then use standard String methods.
+     * Checks if one string contains another at a specific index using the case-sensitivity rule.
+     * <p>
+     * This method mimics parts of {@link String#regionMatches(boolean, int, String, int, int)} 
+     * but takes case-sensitivity into account.
      * 
-     * @param str  the string to convert, null returns null
-     * @return the lower-case version if case-insensitive
+     * @param str  the string to check, not null
+     * @param strStartIndex  the index to start at in str
+     * @param search  the start to search for, not null
+     * @return true if equal using the case rules
+     * @throws NullPointerException if either string is null
      */
-    String convertCase(String str) {
-        if (str == null) {
-            return null;
-        }
-        return sensitive ? str : str.toLowerCase();
+    public boolean checkRegionMatches(String str, int strStartIndex, String search) {
+        return str.regionMatches(!sensitive, strStartIndex, search, 0, search.length());
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java b/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
index 8578c9365dd..514c12f419e 100644
--- a/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
+++ b/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
@@ -17,6 +17,7 @@
 package org.apache.commons.io;
 
 import java.io.File;
+import java.util.Locale;
 
 import junit.framework.TestCase;
 
@@ -181,4 +182,33 @@ public void testMatch2() {
         assertMatch("log.log.abc.log.abc.d", "*log?abc?d", true);
     }
 
+    public void testLocaleIndependence() {
+        Locale orig = Locale.getDefault();
+
+        Locale[] locales = Locale.getAvailableLocales();
+
+        String[][] data = {
+            { "I", "i"},
+            { "i", "I"},
+            { "i", "\u0130"},
+            { "i", "\u0131"},
+            { "\u03A3", "\u03C2"},
+            { "\u03A3", "\u03C3"},
+            { "\u03C2", "\u03C3"},
+        };
+
+        try {
+            for (int i = 0; i < data.length; i++) {
+                for (int j = 0; j < locales.length; j++) {
+                    Locale.setDefault(locales[j]);
+                    assertTrue("Test data corrupt: " + i, data[i][0].equalsIgnoreCase(data[i][1]));
+                    boolean match = FilenameUtils.wildcardMatch(data[i][0], data[i][1], IOCase.INSENSITIVE);
+                    assertTrue(Locale.getDefault().toString() + ": " + i, match);
+                }
+            }
+        } finally {
+            Locale.setDefault(orig);
+        }
+    }
+
 }
diff --git a/src/test/org/apache/commons/io/IOCaseTestCase.java b/src/test/org/apache/commons/io/IOCaseTestCase.java
index 30c275497d6..d9ae5194e2b 100644
--- a/src/test/org/apache/commons/io/IOCaseTestCase.java
+++ b/src/test/org/apache/commons/io/IOCaseTestCase.java
@@ -245,6 +245,70 @@ public void test_checkEndsWith_case() throws Exception {
         assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith("ABC", "Bc"));
     }
 
+    //-----------------------------------------------------------------------
+    public void test_checkIndexOf_functionality() throws Exception {
+
+        // start
+        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "A"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "A"));
+        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "AB"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "AB"));
+        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "ABC"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "ABC"));
+
+        // middle
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "D"));
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "D"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "D"));
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DE"));
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DE"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DE"));
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DEF"));
+        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DEF"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DEF"));
+
+        // end
+        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "J"));
+        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "J"));
+        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "J"));
+        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "IJ"));
+        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "IJ"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "IJ"));
+        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 6, "HIJ"));
+        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 7, "HIJ"));
+        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "HIJ"));
+
+        // not found
+        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DED"));
+
+        // too long
+        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("DEF", 0, "ABCDEFGHIJ"));
+
+        try {
+            IOCase.SENSITIVE.checkIndexOf("ABC", 0, null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            IOCase.SENSITIVE.checkIndexOf(null, 0, "ABC");
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            IOCase.SENSITIVE.checkIndexOf(null, 0, null);
+            fail();
+        } catch (NullPointerException ex) {}
+    }
+
+    public void test_checkIndexOf_case() throws Exception {
+        assertEquals(1,  IOCase.SENSITIVE.checkIndexOf("ABC", 0, "BC"));
+        assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "Bc"));
+        
+        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "BC"));
+        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "Bc"));
+        
+        assertEquals(1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "BC"));
+        assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "Bc"));
+    }
+
     //-----------------------------------------------------------------------
     public void test_checkRegionMatches_functionality() throws Exception {
         assertEquals(true, IOCase.SENSITIVE.checkRegionMatches("ABC", 0, ""));
