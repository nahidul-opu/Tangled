From 94d8c10b757a5f85012916255bb43d49f854a3c8 Mon Sep 17 00:00:00 2001
From: Niall Pemberton <niallp@apache.org>
Date: Mon, 4 Oct 2010 01:11:27 +0000
Subject: [PATCH] IO-201 Fix inconsistent synchronization

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004079 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/io/input/CountingInputStream.java  | 8 ++++----
 .../apache/commons/io/output/CountingOutputStream.java    | 6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/java/org/apache/commons/io/input/CountingInputStream.java b/src/java/org/apache/commons/io/input/CountingInputStream.java
index 9fcddc65014..c9f78637b35 100644
--- a/src/java/org/apache/commons/io/input/CountingInputStream.java
+++ b/src/java/org/apache/commons/io/input/CountingInputStream.java
@@ -55,7 +55,7 @@ public CountingInputStream(InputStream in) {
      * @see java.io.InputStream#skip(long)
      */
     @Override
-    public long skip(final long length) throws IOException {
+    public synchronized long skip(final long length) throws IOException {
         final long skip = super.skip(length);
         this.count += skip;
         return skip;
@@ -68,7 +68,7 @@ public long skip(final long length) throws IOException {
      * @since Commons IO 2.0
      */
     @Override
-    protected void afterRead(int n) {
+    protected synchronized void afterRead(int n) {
         if (n != -1) {
             this.count += n;
         }
@@ -85,7 +85,7 @@ protected void afterRead(int n) {
      * @return the number of bytes accumulated
      * @throws ArithmeticException if the byte count is too large
      */
-    public synchronized int getCount() {
+    public int getCount() {
         long result = getByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
@@ -103,7 +103,7 @@ public synchronized int getCount() {
      * @return the count previous to resetting
      * @throws ArithmeticException if the byte count is too large
      */
-    public synchronized int resetCount() {
+    public int resetCount() {
         long result = resetByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
diff --git a/src/java/org/apache/commons/io/output/CountingOutputStream.java b/src/java/org/apache/commons/io/output/CountingOutputStream.java
index f825e26d1d7..e1a3eda281c 100644
--- a/src/java/org/apache/commons/io/output/CountingOutputStream.java
+++ b/src/java/org/apache/commons/io/output/CountingOutputStream.java
@@ -50,7 +50,7 @@ public CountingOutputStream( OutputStream out ) {
      * @since Commons IO 2.0
      */
     @Override
-    protected void beforeWrite(int n) {
+    protected synchronized void beforeWrite(int n) {
         count += n;
     }
 
@@ -65,7 +65,7 @@ protected void beforeWrite(int n) {
      * @return the number of bytes accumulated
      * @throws ArithmeticException if the byte count is too large
      */
-    public synchronized int getCount() {
+    public int getCount() {
         long result = getByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
@@ -83,7 +83,7 @@ public synchronized int getCount() {
      * @return the count previous to resetting
      * @throws ArithmeticException if the byte count is too large
      */
-    public synchronized int resetCount() {
+    public int resetCount() {
         long result = resetByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
