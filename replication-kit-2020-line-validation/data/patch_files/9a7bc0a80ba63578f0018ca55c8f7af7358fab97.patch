From 9a7bc0a80ba63578f0018ca55c8f7af7358fab97 Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Thu, 17 May 2012 20:06:36 +0000
Subject: [PATCH] [VFS-417][RAM][Local] Add and implement new API:
 RandomAccessContent.setLength(long). [VFS-406][RAM] resize throws ArrayOOBE
 when shrinking in size.

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/vfs/trunk@1339834 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/commons/vfs2/Capability.java   |   9 +-
 .../commons/vfs2/RandomAccessContent.java     |  20 ++++
 .../AbstractRandomAccessStreamContent.java    |   5 +
 .../local/DefaultLocalFileProvider.java       |   1 +
 .../local/LocalFileRandomAccessContent.java   |   5 +
 .../vfs2/provider/ram/RamFileData.java        |  13 +-
 .../vfs2/provider/ram/RamFileObject.java      |  52 ++++----
 .../vfs2/provider/ram/RamFileProvider.java    |  18 ++-
 .../ram/RamFileRandomAccessContent.java       |   7 ++
 .../vfs2/util/MonitorRandomAccessContent.java |   6 +
 .../test/ProviderRandomSetLengthTests.java    | 113 ++++++++++++++++++
 .../commons/vfs2/test/ProviderTestSuite.java  |   3 +-
 12 files changed, 215 insertions(+), 37 deletions(-)
 create mode 100644 core/src/test/java/org/apache/commons/vfs2/test/ProviderRandomSetLengthTests.java

diff --git a/core/src/main/java/org/apache/commons/vfs2/Capability.java b/core/src/main/java/org/apache/commons/vfs2/Capability.java
index 7a74d5e9c2..8fe8474371 100644
--- a/core/src/main/java/org/apache/commons/vfs2/Capability.java
+++ b/core/src/main/java/org/apache/commons/vfs2/Capability.java
@@ -32,12 +32,17 @@ public enum Capability
     WRITE_CONTENT,
 
     /**
-     * File content can be read in random mode.<br>
+     * File content can be read in random mode.
      */
     RANDOM_ACCESS_READ,
 
     /**
-     * File content can be written in random mode.<br>
+     * File content length can be set in random mode.
+     */
+    RANDOM_ACCESS_SET_LENGTH,
+
+    /**
+     * File content can be written in random mode.
      */
     RANDOM_ACCESS_WRITE,
 
diff --git a/core/src/main/java/org/apache/commons/vfs2/RandomAccessContent.java b/core/src/main/java/org/apache/commons/vfs2/RandomAccessContent.java
index 5288b766d0..9e5c30a7c6 100644
--- a/core/src/main/java/org/apache/commons/vfs2/RandomAccessContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/RandomAccessContent.java
@@ -89,4 +89,24 @@ public interface RandomAccessContent extends DataOutput, DataInput
      *             if <code>pos</code> is less than <code>0</code> or if an I/O error occurs.
      */
     void seek(long pos) throws IOException;
+
+    /**
+     * Sets the length of this content.
+     * 
+     * <p>
+     * If the the {@code newLength} argument is smaller than {@link #length()}, the content is truncated.
+     * </p>
+     * 
+     * <p>
+     * If the the {@code newLength} argument is greater than {@link #length()}, the content grows with undefined data.
+     * </p>
+     * 
+     * @param newLength
+     *            The desired content length
+     * @exception IOException
+     *                If an I/O error occurs
+     * @since 2.1
+     */
+    void setLength(long newLength) throws IOException;
+
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractRandomAccessStreamContent.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractRandomAccessStreamContent.java
index bbd34ced68..465d61b9c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractRandomAccessStreamContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractRandomAccessStreamContent.java
@@ -108,4 +108,9 @@ public InputStream getInputStream() throws IOException
     {
         return getDataInputStream();
     }
+    
+    public void setLength(long newLength) throws IOException
+    {
+        throw new UnsupportedOperationException();        
+    }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/DefaultLocalFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/DefaultLocalFileProvider.java
index acee1e0e1b..c9b5d47d07 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/DefaultLocalFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/DefaultLocalFileProvider.java
@@ -56,6 +56,7 @@ public class DefaultLocalFileProvider
         Capability.WRITE_CONTENT,
         Capability.APPEND_CONTENT,
         Capability.RANDOM_ACCESS_READ,
+        Capability.RANDOM_ACCESS_SET_LENGTH,
         Capability.RANDOM_ACCESS_WRITE
     }));
 
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileRandomAccessContent.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileRandomAccessContent.java
index b6503e3fb5..253a6d37e3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileRandomAccessContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileRandomAccessContent.java
@@ -282,4 +282,9 @@ public InputStream getInputStream() throws IOException
     {
         return rafis;
     }
+
+    public void setLength(long newLength) throws IOException
+    {
+        raf.setLength(newLength);
+    }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileData.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileData.java
index 949dd2ebcf..88bd47e0c3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileData.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileData.java
@@ -272,11 +272,18 @@ int size()
      *
      * @param newSize The new buffer size.
      */
-    void resize(int newSize)
+    void resize(long newSize)
     {
+        // A future implementation may allow longs/multiple buffer/and so on
+        if (newSize > Integer.MAX_VALUE)
+        {
+            throw new IllegalArgumentException(String.format("newSize(%d) > Integer.MAX_VALUE(%d)", newSize,
+                    Integer.MAX_VALUE));
+        }
+        int resize = (int) newSize;
         int size = this.size();
-        byte[] newBuf = new byte[newSize];
-        System.arraycopy(this.buffer, 0, newBuf, 0, size);
+        byte[] newBuf = new byte[resize];
+        System.arraycopy(this.buffer, 0, newBuf, 0, Math.min(resize, size));
         this.buffer = newBuf;
         updateLastModified();
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
index 9bb6b3521e..887e9282d7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
@@ -32,8 +32,8 @@
 import org.apache.commons.vfs2.util.RandomAccessMode;
 
 /**
- * A RAM File contains a single RAM FileData instance, it provides methods to
- * access the data by implementing FileObject interface.
+ * A RAM File contains a single RAM FileData instance, it provides methods to access the data by implementing FileObject
+ * interface.
  */
 public class RamFileObject extends AbstractFileObject
 {
@@ -48,8 +48,10 @@ public class RamFileObject extends AbstractFileObject
     private RamFileData data;
 
     /**
-     * @param name The name of the file.
-     * @param fs The FileSystem.
+     * @param name
+     *            The name of the file.
+     * @param fs
+     *            The FileSystem.
      */
     protected RamFileObject(AbstractFileName name, RamFileSystem fs)
     {
@@ -65,7 +67,7 @@ private void save() throws FileSystemException
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetType()
      */
     @Override
@@ -76,7 +78,7 @@ protected FileType doGetType() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doListChildren()
      */
     @Override
@@ -87,7 +89,7 @@ protected String[] doListChildren() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetContentSize()
      */
     @Override
@@ -98,7 +100,7 @@ protected long doGetContentSize() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetInputStream()
      */
     @Override
@@ -115,7 +117,7 @@ protected InputStream doGetInputStream() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetOutputStream(boolean)
      */
     @Override
@@ -130,7 +132,7 @@ protected OutputStream doGetOutputStream(boolean bAppend) throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doDelete()
      */
     @Override
@@ -146,7 +148,7 @@ protected void doDelete() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetLastModifiedTime()
      */
     @Override
@@ -157,7 +159,7 @@ protected long doGetLastModifiedTime() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doSetLastModifiedTime(long)
      */
     /** @since 2.0 */
@@ -170,7 +172,7 @@ protected boolean doSetLastModifiedTime(long modtime) throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doCreateFolder()
      */
     @Override
@@ -182,7 +184,7 @@ protected void doCreateFolder() throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doRename(org.apache.commons.vfs2.FileObject)
      */
     @Override
@@ -194,20 +196,19 @@ protected void doRename(FileObject newFile) throws Exception
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doGetRandomAccessContent(
-     *      org.apache.commons.vfs2.util.RandomAccessMode)
+     * org.apache.commons.vfs2.util.RandomAccessMode)
      */
     @Override
-    protected RandomAccessContent doGetRandomAccessContent(RandomAccessMode mode)
-            throws Exception
+    protected RandomAccessContent doGetRandomAccessContent(RandomAccessMode mode) throws Exception
     {
         return new RamFileRandomAccessContent(this, mode);
     }
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#doAttach()
      */
     @Override
@@ -235,7 +236,7 @@ void setData(RamFileData data)
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#injectType(org.apache.commons.vfs2.FileType)
      */
     @Override
@@ -247,7 +248,7 @@ protected void injectType(FileType fileType)
 
     /*
      * (non-Javadoc)
-     *
+     * 
      * @see org.apache.commons.vfs2.provider.AbstractFileObject#endOutput()
      */
     @Override
@@ -270,16 +271,15 @@ int size()
      * @throws IOException
      *             if the new size exceeds the limit
      */
-    synchronized void resize(int newSize) throws IOException
+    synchronized void resize(long newSize) throws IOException
     {
         if (fs.getFileSystemOptions() != null)
         {
-            int maxSize = RamFileSystemConfigBuilder.getInstance().getMaxSize(
-                    fs.getFileSystemOptions());
+            // A future implementation may allow longs...
+            int maxSize = RamFileSystemConfigBuilder.getInstance().getMaxSize(fs.getFileSystemOptions());
             if (fs.size() + newSize - this.size() > maxSize)
             {
-                throw new IOException("FileSystem capacity (" + maxSize
-                        + ") exceeded.");
+                throw new IOException("FileSystem capacity (" + maxSize + ") exceeded.");
             }
         }
         this.data.resize(newSize);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileProvider.java
index e8a67767cb..3d552513b6 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileProvider.java
@@ -37,13 +37,21 @@ public class RamFileProvider extends AbstractOriginatingFileProvider implements
     /** The provider's capabilities. */
     public static final Collection<Capability> capabilities = Collections
             .unmodifiableCollection(Arrays.asList(new Capability[]
-            {Capability.CREATE, Capability.DELETE, Capability.RENAME,
-                    Capability.GET_TYPE, Capability.GET_LAST_MODIFIED,
+            {
+                    Capability.CREATE, 
+                    Capability.DELETE, 
+                    Capability.RENAME,
+                    Capability.GET_TYPE, 
+                    Capability.GET_LAST_MODIFIED,
                     Capability.SET_LAST_MODIFIED_FILE,
                     Capability.SET_LAST_MODIFIED_FOLDER,
-                    Capability.LIST_CHILDREN, Capability.READ_CONTENT,
-                    Capability.URI, Capability.WRITE_CONTENT,
-                    Capability.APPEND_CONTENT, Capability.RANDOM_ACCESS_READ,
+                    Capability.LIST_CHILDREN, 
+                    Capability.READ_CONTENT,
+                    Capability.URI, 
+                    Capability.WRITE_CONTENT,
+                    Capability.APPEND_CONTENT, 
+                    Capability.RANDOM_ACCESS_READ,
+                    Capability.RANDOM_ACCESS_SET_LENGTH,
                     Capability.RANDOM_ACCESS_WRITE
             }));
 
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileRandomAccessContent.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileRandomAccessContent.java
index b0fcda4336..c942c57f1b 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileRandomAccessContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileRandomAccessContent.java
@@ -614,4 +614,11 @@ public InputStream getInputStream() throws IOException
     {
         return rafis;
     }
+
+    @Override
+    public void setLength(long newLength) throws IOException
+    {
+        this.file.resize(newLength);
+        this.buf = this.file.getData().getBuffer();
+    }
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/util/MonitorRandomAccessContent.java b/core/src/main/java/org/apache/commons/vfs2/util/MonitorRandomAccessContent.java
index aa6275749a..69a5a87efa 100644
--- a/core/src/main/java/org/apache/commons/vfs2/util/MonitorRandomAccessContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/util/MonitorRandomAccessContent.java
@@ -183,6 +183,11 @@ public int skipBytes(int n) throws IOException
         return content.skipBytes(n);
     }
 
+    public void setLength(long newLength) throws IOException
+    {
+        content.setLength(newLength);
+    }
+    
     public boolean readBoolean() throws IOException
     {
         return content.readBoolean();
@@ -247,4 +252,5 @@ public InputStream getInputStream() throws IOException
     {
         return content.getInputStream();
     }
+
 }
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/ProviderRandomSetLengthTests.java b/core/src/test/java/org/apache/commons/vfs2/test/ProviderRandomSetLengthTests.java
new file mode 100644
index 0000000000..6bf62e596b
--- /dev/null
+++ b/core/src/test/java/org/apache/commons/vfs2/test/ProviderRandomSetLengthTests.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2.test;
+
+import java.io.IOException;
+
+import junit.framework.Assert;
+
+import org.apache.commons.vfs2.Capability;
+import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.RandomAccessContent;
+import org.apache.commons.vfs2.Selectors;
+import org.apache.commons.vfs2.util.RandomAccessMode;
+
+/**
+ * Random set length test cases for file providers.
+ * 
+ * @version $Id$
+ */
+public class ProviderRandomSetLengthTests extends AbstractProviderTestCase
+{
+    private static final String TEST_DATA = "This is a test file.";
+
+    /**
+     * Sets up a scratch folder for the test to use.
+     */
+    protected FileObject createScratchFolder() throws Exception
+    {
+        final FileObject scratchFolder = this.getWriteFolder();
+
+        // Make sure the test folder is empty
+        scratchFolder.delete(Selectors.EXCLUDE_SELF);
+        scratchFolder.createFolder();
+
+        return scratchFolder;
+    }
+
+    /**
+     * Returns the capabilities required by the tests of this test case.
+     */
+    @Override
+    protected Capability[] getRequiredCaps()
+    {
+        return new Capability[]
+        {
+                Capability.GET_TYPE,
+                Capability.RANDOM_ACCESS_READ,
+                Capability.RANDOM_ACCESS_WRITE,
+                Capability.RANDOM_ACCESS_SET_LENGTH };
+    }
+
+    /**
+     * Writes a file
+     */
+    public void testRandomSetLength() throws Exception
+    {
+        FileObject file = null;
+        try
+        {
+            file = this.createScratchFolder().resolveFile("random_write.txt");
+            file.createFile();
+            final RandomAccessContent ra = file.getContent().getRandomAccessContent(RandomAccessMode.READWRITE);
+
+            // Write long string
+            ra.writeBytes(TEST_DATA);
+            Assert.assertEquals(TEST_DATA.length(), ra.length());
+
+            // Shrink to length 1
+            ra.setLength(1);
+            Assert.assertEquals(1, ra.length());
+            // now read 1
+            ra.seek(0);
+            Assert.assertEquals(ra.readByte(), TEST_DATA.charAt(0));
+
+            try
+            {
+                ra.readByte();
+                Assert.fail("Expected " + Exception.class.getName());
+            } catch (IOException e)
+            {
+                // Expected
+            }
+
+            // Grow to length 2
+            ra.setLength(2);
+            Assert.assertEquals(2, ra.length());
+            // We have an undefined extra byte
+            ra.seek(1);
+            ra.readByte();
+
+        } finally
+        {
+            if (file != null)
+            {
+                file.close();
+            }
+        }
+    }
+}
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/ProviderTestSuite.java b/core/src/test/java/org/apache/commons/vfs2/test/ProviderTestSuite.java
index 4c3061b21f..b54d865fff 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/ProviderTestSuite.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/ProviderTestSuite.java
@@ -63,10 +63,11 @@ protected void addBaseTests() throws Exception
         addTests(NamingTests.class);
         addTests(ContentTests.class);
         addTests(ProviderReadTests.class);
-        addTests(ProviderRandomReadTests.class);
         addTests(ProviderWriteTests.class);
         addTests(ProviderWriteAppendTests.class);
+        addTests(ProviderRandomReadTests.class);
         addTests(ProviderRandomReadWriteTests.class);
+        addTests(ProviderRandomSetLengthTests.class);
         addTests(ProviderRenameTests.class);
         addTests(ProviderDeleteTests.class);
         addTests(LastModifiedTests.class);
