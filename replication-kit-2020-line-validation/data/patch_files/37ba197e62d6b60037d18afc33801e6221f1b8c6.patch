From 37ba197e62d6b60037d18afc33801e6221f1b8c6 Mon Sep 17 00:00:00 2001
From: "Gary D. Gregory" <ggregory@apache.org>
Date: Thu, 10 Apr 2014 13:51:06 +0000
Subject: [PATCH] <action dev="ggregory" type="add" issue="CODEC-184"
 due-to="Cyrille Artho">NullPointerException in
 DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586300 13f79535-47bb-0310-9956-ffa450edef68
---
 src/changes/changes.xml                       |  1 +
 .../codec/binary/CharSequenceUtils.java       | 63 +++++++++++++++++++
 .../commons/codec/binary/StringUtils.java     | 43 +++++++++++++
 .../codec/language/DoubleMetaphone.java       |  3 +-
 .../codec/language/DoubleMetaphoneTest.java   | 14 ++++-
 5 files changed, 122 insertions(+), 2 deletions(-)
 create mode 100644 src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java

diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 9201aab156..bb9c812a2f 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,7 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="1.10" date="DD Mmmm 2014" description="Feature and fix release."> 
+      <action dev="ggregory" type="add" issue="CODEC-184" due-to="Cyrille Artho">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>   
       <action dev="ggregory" type="add" issue="CODEC-181" due-to="Ivan Martinez-Ortiz">Make possible to provide padding byte to BaseNCodec in constructor</action>   
       <action dev="ggregory" type="fix" issue="CODEC-180" due-to="Ville SkyttÃ¤">Fix Javadoc 1.8.0 errors</action>   
       <action dev="ggregory" type="update" issue="CODEC-178">Deprecate Charsets Charset constants in favor of Java 7's java.nio.charset.StandardCharsets</action>   
diff --git a/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java
new file mode 100644
index 0000000000..fe20eb02fe
--- /dev/null
+++ b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java
@@ -0,0 +1,63 @@
+package org.apache.commons.codec.binary;
+
+/**
+ * <p>
+ * Operations on {@link CharSequence} that are {@code null} safe.
+ * </p>
+ * <p>
+ * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).
+ * </p>
+ * 
+ * @see CharSequence
+ * @since 1.10
+ */
+public class CharSequenceUtils {
+
+    /**
+     * Green implementation of regionMatches.
+     * 
+     * @param cs
+     *            the {@code CharSequence} to be processed
+     * @param ignoreCase
+     *            whether or not to be case insensitive
+     * @param thisStart
+     *            the index to start on the {@code cs} CharSequence
+     * @param substring
+     *            the {@code CharSequence} to be looked for
+     * @param start
+     *            the index to start on the {@code substring} CharSequence
+     * @param length
+     *            character length of the region
+     * @return whether the region matched
+     */
+    static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,
+            final CharSequence substring, final int start, final int length) {
+        if (cs instanceof String && substring instanceof String) {
+            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);
+        }
+        int index1 = thisStart;
+        int index2 = start;
+        int tmpLen = length;
+
+        while (tmpLen-- > 0) {
+            char c1 = cs.charAt(index1++);
+            char c2 = substring.charAt(index2++);
+
+            if (c1 == c2) {
+                continue;
+            }
+
+            if (!ignoreCase) {
+                return false;
+            }
+
+            // The same check as in String.regionMatches():
+            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)
+                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java
index 14a362f81d..8f1f57fa6b 100644
--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java
+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java
@@ -37,6 +37,49 @@
  */
 public class StringUtils {
 
+    /**
+     * <p>
+     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.
+     * </p>
+     * 
+     * <p>
+     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The
+     * comparison is case sensitive.
+     * </p>
+     * 
+     * <pre>
+     * StringUtils.equals(null, null)   = true
+     * StringUtils.equals(null, "abc")  = false
+     * StringUtils.equals("abc", null)  = false
+     * StringUtils.equals("abc", "abc") = true
+     * StringUtils.equals("abc", "ABC") = false
+     * </pre>
+     * 
+     * <p>
+     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).
+     * </p>
+     * 
+     * @see Object#equals(Object)
+     * @param cs1
+     *            the first CharSequence, may be {@code null}
+     * @param cs2
+     *            the second CharSequence, may be {@code null}
+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
+     * @since 1.10
+     */
+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
+        if (cs1 == cs2) {
+            return true;
+        }
+        if (cs1 == null || cs2 == null) {
+            return false;
+        }
+        if (cs1 instanceof String && cs2 instanceof String) {
+            return cs1.equals(cs2);
+        }
+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
+    }
+
     /**
      * Calls {@link String#getBytes(Charset)}
      *
diff --git a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
index 125503ac9c..6ccd3f27d0 100644
--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
@@ -19,6 +19,7 @@
 
 import org.apache.commons.codec.EncoderException;
 import org.apache.commons.codec.StringEncoder;
+import org.apache.commons.codec.binary.StringUtils;
 
 /**
  * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence
@@ -241,7 +242,7 @@ public boolean isDoubleMetaphoneEqual(final String value1, final String value2)
      *          {@code false} otherwise.
      */
     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {
-        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));
+        return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
index 7a7cf57a7d..5503d34b72 100644
--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1060,6 +1060,16 @@ public void testCCedilla() {
         assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual("\u00e7", "S")); // c-cedilla
     }
 
+    @Test
+    public void testCodec184() throws Throwable {
+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual("", "", false));
+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual("", "", true));
+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("aa", "", false));
+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("aa", "", true));
+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("", "aa", false));
+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("", "aa", true));
+      }
+
     @Test
     public void testDoubleMetaphone() {
         assertDoubleMetaphone("TSTN", "testing");
@@ -1111,7 +1121,9 @@ public void testEmpty() {
 
     @Test
     public void testIsDoubleMetaphoneEqualBasic() {
-        final String[][] testFixture = new String[][] { { "Case", "case" }, {
+        final String[][] testFixture = new String[][] { { 
+                "", "" }, {
+                "Case", "case" }, {
                 "CASE", "Case" }, {
                 "caSe", "cAsE" }, {
                 "cookie", "quick" }, {
