From 66f25d3f4938f905256a593adea53f830abf96ba Mon Sep 17 00:00:00 2001
From: Eli Reisman <ereisman@apache.org>
Date: Thu, 27 Sep 2012 01:51:15 +0000
Subject: [PATCH] GIRAPH-347: GiraphConfiguration broke hcatalog build

git-svn-id: https://svn.apache.org/repos/asf/giraph/trunk@1390802 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGELOG                                      |  2 ++
 .../format/hcatalog/HiveGiraphRunner.java      | 16 +++++++++-------
 .../test/java/org/apache/giraph/BspCase.java   | 18 +++++++++---------
 .../accumulo/TestAccumuloVertexFormat.java     |  8 +++++---
 .../TestHBaseRootMarkerVertextFormat.java      | 10 ++++++----
 5 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index 911ce19a8..0a69230cb 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,6 +1,8 @@
 Giraph Change Log
 
 Release 0.2.0 - unreleased
+  GIRAPH-347: GiraphConfiguration broke hcatalog build
+  (Nitay Joffe via ereisman)
 
   GIRAPH-340: Added client/server ExecutionHandlers to Netty to avoid
   and added WrappedAdaptiveReceiveBufferSizePredictorFactory to
diff --git a/giraph-formats-contrib/src/hcatalog/java/org/apache/giraph/format/hcatalog/HiveGiraphRunner.java b/giraph-formats-contrib/src/hcatalog/java/org/apache/giraph/format/hcatalog/HiveGiraphRunner.java
index da10b4741..abadb360b 100644
--- a/giraph-formats-contrib/src/hcatalog/java/org/apache/giraph/format/hcatalog/HiveGiraphRunner.java
+++ b/giraph-formats-contrib/src/hcatalog/java/org/apache/giraph/format/hcatalog/HiveGiraphRunner.java
@@ -31,6 +31,7 @@
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
+import org.apache.giraph.GiraphConfiguration;
 import org.apache.giraph.graph.Vertex;
 import org.apache.giraph.graph.GiraphJob;
 import org.apache.hadoop.conf.Configuration;
@@ -95,22 +96,23 @@ public final int run(String[] args) throws Exception {
 
 		// setup GiraphJob
 		GiraphJob job = new GiraphJob(getConf(), getClass().getName());
-		job.setVertexClass(vertexClass);
+		GiraphConfiguration conf = job.getConfiguration();
+		conf.setVertexClass(vertexClass);
 
 		// setup input from Hive
 		InputJobInfo inputJobInfo = InputJobInfo.create(dbName, inputTableName,
 				inputTableFilterExpr);
 		HCatInputFormat.setInput(job.getInternalJob(), inputJobInfo);
-		job.setVertexInputFormatClass(vertexInputFormatClass);
+		conf.setVertexInputFormatClass(vertexInputFormatClass);
 
 		// setup output to Hive
 		HCatOutputFormat.setOutput(job.getInternalJob(), OutputJobInfo.create(
 				dbName, outputTableName, outputTablePartitionValues));
 		HCatOutputFormat.setSchema(job.getInternalJob(),
 				HCatOutputFormat.getTableSchema(job.getInternalJob()));
-		job.setVertexOutputFormatClass(vertexOutputFormatClass);
+		conf.setVertexOutputFormatClass(vertexOutputFormatClass);
 
-		job.setWorkerConfiguration(workers, workers, 100.0f);
+		conf.setWorkerConfiguration(workers, workers, 100.0f);
 		initGiraphJob(job);
 
 		return job.run(isVerbose) ? 0 : -1;
@@ -312,7 +314,7 @@ public final void setConf(Configuration conf) {
 	/**
 	 * Override this method to add more command-line options. You can process
 	 * them by also overriding {@link #processMoreArguments(CommandLine)}.
-	 * 
+	 *
 	 * @param options
 	 */
 	protected void addMoreOptions(Options options) {
@@ -322,7 +324,7 @@ protected void addMoreOptions(Options options) {
 	 * Override this method to process additional command-line arguments. You
 	 * may want to declare additional options by also overriding
 	 * {@link #addMoreOptions(Options)}.
-	 * 
+	 *
 	 * @param cmd
 	 */
 	protected void processMoreArguments(CommandLine cmd) {
@@ -331,7 +333,7 @@ protected void processMoreArguments(CommandLine cmd) {
 	/**
 	 * Override this method to do additional setup with the GiraphJob that will
 	 * run.
-	 * 
+	 *
 	 * @param job
 	 *            GiraphJob that is going to run
 	 */
diff --git a/giraph-formats-contrib/src/test/java/org/apache/giraph/BspCase.java b/giraph-formats-contrib/src/test/java/org/apache/giraph/BspCase.java
index 29b22dff5..86d9b779e 100644
--- a/giraph-formats-contrib/src/test/java/org/apache/giraph/BspCase.java
+++ b/giraph-formats-contrib/src/test/java/org/apache/giraph/BspCase.java
@@ -58,7 +58,7 @@ public class BspCase extends TestCase implements Watcher {
    * Adjust the configuration to the basic test case
    */
   public final void setupConfiguration(GiraphJob job) {
-    Configuration conf = job.getConfiguration();
+    GiraphConfiguration conf = job.getConfiguration();
     conf.set("mapred.jar", getJarLocation());
 
     // Allow this test to be run on a real Hadoop setup
@@ -67,7 +67,7 @@ public final void setupConfiguration(GiraphJob job) {
           getJobTracker() + " with jar path " + getJarLocation()
           + " for " + getName());
       conf.set("mapred.job.tracker", getJobTracker());
-      job.setWorkerConfiguration(getNumWorkers(),
+      conf.setWorkerConfiguration(getNumWorkers(),
           getNumWorkers(),
           100.0f);
     }
@@ -75,15 +75,15 @@ public final void setupConfiguration(GiraphJob job) {
       System.out.println("setup: Using local job runner with " +
           "location " + getJarLocation() + " for "
           + getName());
-      job.setWorkerConfiguration(1, 1, 100.0f);
+      conf.setWorkerConfiguration(1, 1, 100.0f);
       // Single node testing
-      conf.setBoolean(GiraphJob.SPLIT_MASTER_WORKER, false);
+      conf.setBoolean(GiraphConfiguration.SPLIT_MASTER_WORKER, false);
     }
-    conf.setInt(GiraphJob.POLL_ATTEMPTS, 10);
-    conf.setInt(GiraphJob.POLL_MSECS, 3*1000);
-    conf.setInt(GiraphJob.ZOOKEEPER_SERVERLIST_POLL_MSECS, 500);
+    conf.setInt(GiraphConfiguration.POLL_ATTEMPTS, 10);
+    conf.setInt(GiraphConfiguration.POLL_MSECS, 3*1000);
+    conf.setInt(GiraphConfiguration.ZOOKEEPER_SERVERLIST_POLL_MSECS, 500);
     if (getZooKeeperList() != null) {
-      job.setZooKeeperConfiguration(getZooKeeperList());
+      conf.setZooKeeperConfiguration(getZooKeeperList());
     }
     // GeneratedInputSplit will generate 5 vertices
     conf.setLong(GeneratedVertexReader.READER_VERTICES, 5);
@@ -175,7 +175,7 @@ public void setUp() {
       FileSystem hdfs = FileSystem.get(conf);
       // Since local jobs always use the same paths, remove them
       Path oldLocalJobPaths = new Path(
-          GiraphJob.ZOOKEEPER_MANAGER_DIR_DEFAULT);
+          GiraphConfiguration.ZOOKEEPER_MANAGER_DIR_DEFAULT);
       FileStatus[] fileStatusArr;
       try {
         fileStatusArr = hdfs.listStatus(oldLocalJobPaths);
diff --git a/giraph-formats-contrib/src/test/java/org/apache/giraph/format/accumulo/TestAccumuloVertexFormat.java b/giraph-formats-contrib/src/test/java/org/apache/giraph/format/accumulo/TestAccumuloVertexFormat.java
index f444b8f05..ee2b0f9d2 100644
--- a/giraph-formats-contrib/src/test/java/org/apache/giraph/format/accumulo/TestAccumuloVertexFormat.java
+++ b/giraph-formats-contrib/src/test/java/org/apache/giraph/format/accumulo/TestAccumuloVertexFormat.java
@@ -34,6 +34,7 @@
 import org.apache.accumulo.core.util.ByteBufferUtil;
 import org.apache.accumulo.core.util.Pair;
 import org.apache.giraph.BspCase;
+import org.apache.giraph.GiraphConfiguration;
 import org.apache.giraph.format.accumulo.edgemarker.AccumuloEdgeInputFormat;
 import org.apache.giraph.format.accumulo.edgemarker.AccumuloEdgeOutputFormat;
 import org.apache.giraph.graph.EdgeListVertex;
@@ -135,9 +136,10 @@ public void testAccumuloInputOutput() throws Exception {
 
         GiraphJob job = new GiraphJob(conf, getCallingMethodName());
         setupConfiguration(job);
-        job.setVertexClass(EdgeNotification.class);
-        job.setVertexInputFormatClass(AccumuloEdgeInputFormat.class);
-        job.setVertexOutputFormatClass(AccumuloEdgeOutputFormat.class);
+        GiraphConfiguration giraphConf = job.getConfiguration();
+        giraphConf.setVertexClass(EdgeNotification.class);
+        giraphConf.setVertexInputFormatClass(AccumuloEdgeInputFormat.class);
+        giraphConf.setVertexOutputFormatClass(AccumuloEdgeOutputFormat.class);
 
         HashSet<Pair<Text, Text>> columnsToFetch = new HashSet<Pair<Text,Text>>();
         columnsToFetch.add(new Pair<Text, Text>(FAMILY, CHILDREN));
diff --git a/giraph-formats-contrib/src/test/java/org/apache/giraph/format/hbase/TestHBaseRootMarkerVertextFormat.java b/giraph-formats-contrib/src/test/java/org/apache/giraph/format/hbase/TestHBaseRootMarkerVertextFormat.java
index 68f160862..fe8be428f 100644
--- a/giraph-formats-contrib/src/test/java/org/apache/giraph/format/hbase/TestHBaseRootMarkerVertextFormat.java
+++ b/giraph-formats-contrib/src/test/java/org/apache/giraph/format/hbase/TestHBaseRootMarkerVertextFormat.java
@@ -21,6 +21,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import org.apache.giraph.BspCase;
+import org.apache.giraph.GiraphConfiguration;
 import org.apache.giraph.format.hbase.edgemarker.TableEdgeInputFormat;
 import org.apache.giraph.format.hbase.edgemarker.TableEdgeOutputFormat;
 import org.apache.giraph.graph.EdgeListVertex;
@@ -142,12 +143,13 @@ public void testHBaseInputOutput() throws Exception{
             conf.set(TableOutputFormat.OUTPUT_TABLE, TABLE_NAME);
 
             GiraphJob giraphJob = new GiraphJob(conf, getCallingMethodName());
-            giraphJob.setZooKeeperConfiguration(
+            GiraphConfiguration giraphConf = giraphJob.getConfiguration();
+            giraphConf.setZooKeeperConfiguration(
                     cluster.getMaster().getZooKeeper().getQuorum());
             setupConfiguration(giraphJob);
-            giraphJob.setVertexClass(EdgeNotification.class);
-            giraphJob.setVertexInputFormatClass(TableEdgeInputFormat.class);
-            giraphJob.setVertexOutputFormatClass(TableEdgeOutputFormat.class);
+            giraphConf.setVertexClass(EdgeNotification.class);
+            giraphConf.setVertexInputFormatClass(TableEdgeInputFormat.class);
+            giraphConf.setVertexOutputFormatClass(TableEdgeOutputFormat.class);
 
             assertTrue(giraphJob.run(true));
             if(log.isInfoEnabled())
