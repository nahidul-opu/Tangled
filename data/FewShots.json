[
    {
        "Message": "Fix bug in InetAddresses and performance problem in InternetDomainName (changed from regex to CharMatcher). This is intended as the last code update before release 06.",
        "Diff": "\n@@ -1,18 +1,18 @@\n   private static boolean validateSyntax(List<String> parts) {\n     final int lastIndex = parts.size() - 1;\n \n     // Validate the last part specially, as it has different syntax rules.\n \n-    if (!validatePart(parts.get(lastIndex), FINAL_PART)) {\n+    if (!validatePart(parts.get(lastIndex), true)) {\n       return false;\n     }\n \n     for (int i = 0; i < lastIndex; i++) {\n       String part = parts.get(i);\n-      if (!validatePart(part, NORMAL_PART)) {\n+      if (!validatePart(part, false)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n",
        "Explanation": "",
        "Answer": "NotBuggy"
    },
    {
        "Message": "Fix bug in InetAddresses and performance problem in InternetDomainName (changed from regex to CharMatcher). This is intended as the last code update before release 06.",
        "Diff": "\n@@ -1,12 +1,12 @@\n   private static String convertDottedQuadToHex(String ipString) {\n     int lastColon = ipString.lastIndexOf(':');\n     String initialPart = ipString.substring(0, lastColon + 1);\n     String dottedQuad = ipString.substring(lastColon + 1);\n     byte[] quad = textToNumericFormatV4(dottedQuad);\n     if (quad == null) {\n       return null;\n     }\n-    String penultimate = Integer.toHexString((quad[0] << 8) | (quad[1] & 0xff));\n-    String ultimate = Integer.toHexString((quad[2] << 8) | (quad[3] & 0xff));\n+    String penultimate = Integer.toHexString(((quad[0] & 0xff) << 8) | (quad[1] & 0xff));\n+    String ultimate = Integer.toHexString(((quad[2] & 0xff) << 8) | (quad[3] & 0xff));\n     return initialPart + penultimate + \"\":\"\" + ultimate;\n   }\n",
        "Explanation": "",
        "Answer": "Buggy"
    }
]