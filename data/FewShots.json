[["@@ -1,48 +1,48 @@\n   public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n \n     final int base = off;\n     final int end = off + len;\n \n     int anchor = off++;\n \n     if (len > LAST_LITERALS + MIN_MATCH) {\n \n       final int limit = end - LAST_LITERALS;\n       final int matchLimit = limit - MIN_MATCH;\n       ht.reset(len);\n       final int hashLog = ht.hashLog;\n       final PackedInts.Mutable hashTable = ht.hashTable;\n \n       main:\n-      while (off < limit) {\n+      while (off <= limit) {\n         // find a match\n         int ref;\n         while (true) {\n           if (off >= matchLimit) {\n             break main;\n           }\n           final int v = readInt(bytes, off);\n           final int h = hash(v, hashLog);\n           ref = base + (int) hashTable.get(h);\n           assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n           hashTable.set(h, off - base);\n           if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n             break;\n           }\n           ++off;\n         }\n \n         // compute match length\n         final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n \n         encodeSequence(bytes, anchor, ref, off, matchLen, out);\n         off += matchLen;\n         anchor = off;\n       }\n     }\n \n     // last literals\n     final int literalLen = end - anchor;\n     assert literalLen >= LAST_LITERALS || literalLen == len;\n     encodeLastLiterals(bytes, anchor, end - anchor, out);\n   }", "Buggy", "Fix compression bug on highly compressible inputs with LZ4.compressHC.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1520060 13f79535-47bb-0310-9956-ffa450edef68\n"], ["@@ -1,13 +1,15 @@\r\n       @Override public Iterator<T> iterator() {\r\n         return new AbstractIterator<T>() {\r\n+          private final Iterator<Optional<T>> iterator = checkNotNull(optionals.iterator());\r\n+\r\n           @Override protected T computeNext() {\r\n             while (iterator.hasNext()) {\r\n               Optional<T> optional = iterator.next();\r\n               if (optional.isPresent()) {\r\n                 return optional.get();\r\n               }\r\n             }\r\n             return endOfData();\r\n           }\r\n         };\r\n       };", "Buggy", "Fix bug in Optional#presentInstances.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=26472796"], ["@@ -1,8 +1,8 @@\n-    public void recordOpTimeUs(SocketDestination dest, long opTimeUs) {\n+    public void recordOpTimeNs(SocketDestination dest, long opTimeNs) {\n         if (dest != null) {\n-            getOrCreateNodeStats(dest).recordOpTimeUs(null, opTimeUs);\n-            recordOpTimeUs(null, opTimeUs);\n+            getOrCreateNodeStats(dest).recordOpTimeNs(null, opTimeNs);\n+            recordOpTimeNs(null, opTimeNs);\n         } else {\n-            this.opTimeRequestCounter.addRequest(opTimeUs * Time.NS_PER_US);\n+            this.opTimeRequestCounter.addRequest(opTimeNs);\n         }\n     }", "Buggy", "Fix time convertion (Nano to micro) bug\n\nMake the method accept nanoseconds to avoid unnecessary\nconvertion.\n"], ["@@ -1,15 +1,20 @@\n     public Object visit(ASTNullLiteral node, Object data) {\n-        if (lookUp(node) instanceof ASTStatementExpression) {\n-            Node n = lookUp(node);\n+        if (get5thParent(node) instanceof ASTStatementExpression) {\n+            ASTStatementExpression n = (ASTStatementExpression)get5thParent(node);\n+\n+            if (isAssignmentToFinalField(n)) {\n+                return data;\n+            }\n+\n             if (n.jjtGetNumChildren() > 2 && n.jjtGetChild(1) instanceof ASTAssignmentOperator) {\n                 RuleContext ctx = (RuleContext) data;\n                 ctx.getReport().addRuleViolation(createRuleViolation(ctx, node));\n             }\n-        } else if (lookUp2(node) instanceof ASTConditionalExpression) {\n-            checkTernary((ASTConditionalExpression)lookUp2(node), data, node);\n-        } else if (lookUp(node) instanceof ASTConditionalExpression) {\n-            checkTernary((ASTConditionalExpression)lookUp(node), data, node);\n+        } else if (get4thParent(node) instanceof ASTConditionalExpression) {\n+            checkTernary((ASTConditionalExpression)get4thParent(node), data, node);\n+        } else if (get5thParent(node) instanceof ASTConditionalExpression) {\n+            checkTernary((ASTConditionalExpression)get5thParent(node), data, node);\n         }\n \n         return data;\n     }", "Buggy", "Fixed bug 1235300 - NullAssignment no longer flags assignments to final fields.\n\n\ngit-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3672 51baf565-9d33-0410-a72c-fc3788e3496d"], ["@@ -1,20 +1,20 @@\n     public Object visit(ASTMethodDeclaration node, Object data) {\n         if (node.isAbstract()) {\n             return data;\n         }\n \n         List returnNodes = new ArrayList();\n-        node.findChildrenOfType(ASTReturnStatement.class, returnNodes);\n+        node.findChildrenOfType(ASTReturnStatement.class, returnNodes, false);\n         if (returnNodes.size() > 1) {\n             RuleContext ctx = (RuleContext)data;\n             for (Iterator i = returnNodes.iterator(); i.hasNext();) {\n                 SimpleNode problem = (SimpleNode)i.next();\n                 // skip the last one, it's OK\n                 if (!i.hasNext()) {\n                     continue;\n                 }\n                 ctx.getReport().addRuleViolation(createRuleViolation(ctx, problem.getBeginLine()));\n             }\n         }\n         return data;\n     }", "Buggy", "Several bug fixes\n\n\ngit-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1376 51baf565-9d33-0410-a72c-fc3788e3496d"], ["@@ -1,3 +1,3 @@\n-  public String metadata() {\n-    return metadata;\n+  public String internalKey() {\n+    return internalKey;\n   }", "NotBuggy", "Fix some quality flaws\n"], ["@@ -1,7 +1,6 @@\n   public static void resetCounters() throws Exception {\n     Class<?> cl = (new SplitLogCounters()).getClass();\n-    Field[] flds = cl.getDeclaredFields();\n-    for (Field fld : flds) {\n+    for (Field fld : cl.getDeclaredFields()) {\n       ((AtomicLong)fld.get(null)).set(0);\n     }\n   }", "NotBuggy", "HBASE-5598 Analyse and fix the findbugs reporting by QA and add invalid bugs into findbugs-excludeFilter file\n\ngit-svn-id: https://svn.apache.org/repos/asf/hbase/trunk@1425351 13f79535-47bb-0310-9956-ffa450edef68\n"], ["@@ -1,3 +1,3 @@\n     public Reader getReader() {\n-      return new StringReader(source_code);\n+      return new StringReader(sourceCode);\n     }", "NotBuggy", "Fix some quality flaws\n"], ["@@ -1,7 +1,10 @@\n   private void addRegion(final LinkedList<RegionInfo> regions, RegionInfo hri) {\n     // If meta, move it last otherwise other unassigns fail because meta is not\n     // online for them to update state in. This is dodgy. Needs to be made more\n     // robust. See TODO below.\n-    if (hri.isMetaRegion()) regions.addLast(hri);\n-    else regions.addFirst(hri);\n+    if (hri.isMetaRegion()) {\n+      regions.addLast(hri);\n+    } else {\n+      regions.addFirst(hri);\n+    }\n   }", "NotBuggy", "HBASE-19601 Fixed Checkstyle errors in hbase-rsgroup and enabled Checkstyle to fail on violations\n"], ["@@ -1,14 +1,14 @@\n   private UserDto synchronize(String userLogin, UserDetails details, HttpServletRequest request) {\n     String name = details.getName();\n     UserIdentity.Builder userIdentityBuilder = UserIdentity.builder()\n       .setLogin(userLogin)\n-      .setName(isNullOrEmpty(name) ? userLogin : name)\n+      .setName(isEmpty(name) ? userLogin : name)\n       .setEmail(trimToNull(details.getEmail()))\n       .setProviderLogin(userLogin);\n     if (externalGroupsProvider != null) {\n       ExternalGroupsProvider.Context context = new ExternalGroupsProvider.Context(userLogin, request);\n       Collection<String> groups = externalGroupsProvider.doGetGroups(context);\n       userIdentityBuilder.setGroups(new HashSet<>(groups));\n     }\n     return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new ExternalIdentityProvider());\n   }", "NotBuggy", "Fix Quality flaws\n\n- missing tests for Protobuf\n- remove incorrect imports of org.elasticsearch.common.Strings\n"]]